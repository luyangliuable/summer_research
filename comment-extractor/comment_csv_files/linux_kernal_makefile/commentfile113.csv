# SPDX-License-Identifier: GPL-2.0

VERSION = 5

PATCHLEVEL = 16



# *DOCUMENTATION*

 To see a list of typical targets execute "make help"

# More info can be located in ./README

 Comments in this file are targeted only to the developer, do not

# expect to learn how to build the kernel reading this file.

$(if $(filter __%, $(MAKECMDGOALS)), \

	$(error targets prefixed with '__' are only for internal use))

# That's our default target when none is given on the command line

__all:

# We are using a recursive build, so we need to do a little thinking

 to get the ordering right.



# Most importantly: sub-Makefiles should only ever modify files in

# their own directory. If in some directory we have a dependency on

# a file in another dir (which doesn't happen often, but it's often

# unavoidable when linking the built-in.a targets which finally

 turn into vmlinux), we will call a sub make in that other dir, and

 after that we are sure that everything which is in that other dir

# is now up to date.

#

 The only cases where we need to modify files which have global

# effects are thus separated out and done before the recursive

 descending is started. They are now explicitly listed as the

 prepare rule.





 Do not use make's built-in rules and variables

 (this increases performance and avoids hard-to-debug behaviour)

MAKEFLAGS += -rR

# Avoid funny character set dependencies

unexport LC_ALL

LC_NUMERIC=C



 Avoid interference with shell env settings



# Beautify output

# ---------------------------------------------------------------------------

#

 Normally, we echo the whole command before executing it. By making

 that echo $($(quiet)$(cmd)), we now have the possibility to set

# $(quiet) to choose other forms of output instead, e.g.

#

#         quiet_cmd_cc_o_c = Compiling $(RELDIR)/$@

#         cmd_cc_o_c       = $(CC) $(c_flags) -c -o $@ $<

#

 If $(quiet) is empty, the whole command will be printed.

 If it is set to "quiet_", only the short version will be printed.

# If it is set to "silent_", nothing will be printed at all, since

 the variable $(silent_cmd_cc_o_c) doesn't exist.



# A simple variant is to prefix commands with $(Q) - that's useful

 for commands that shall be hidden in non-verbose mode.



#	$(Q)ln $@ :<

#

# If KBUILD_VERBOSE equals 0 then the above command will be hidden.

# If KBUILD_VERBOSE equals 1 then the above command is displayed.

# If KBUILD_VERBOSE equals 2 then give the reason why each target is rebuilt.

#

# To put more focus on warnings, be less verbose as default

# Use 'make V=1' to see the full commands

ifeq ("$(origin V)", "command line")

  KBUILD_VERBOSE = $(V)

endif

ifndef KBUILD_VERBOSE



else



# If the user is running make -s (silent mode), suppress echoing of

 commands



ifneq ($(findstring s,$(filter-out --%,$(MAKEFLAGS))),)

  quiet=silent_



export quiet Q KBUILD_VERBOSE

# Call a source code checker (by default, "sparse") as part of the

 C compilation.



# Use 'make C=1' to enable checking of only re-compiled files.

# Use 'make C=2' to enable checking of *all* source files, regardless

# of whether they are re-compiled or not.

#

# See the file "Documentation/dev-tools/sparse.rst" for more details,

 including where to get the "sparse" utility.



  KBUILD_CHECKSRC = $(C)

endif





# Use make M=dir or set the environment variable KBUILD_EXTMOD to specify the

# directory of external module to build. Setting M= takes precedence.



$(if $(word 2, $(KBUILD_EXTMOD)), \



# Remove trailing slashes

ifneq ($(filter %/, $(KBUILD_EXTMOD)),)

KBUILD_EXTMOD := $(shell dirname $(KBUILD_EXTMOD).)

endif

export KBUILD_EXTMOD

 Kbuild will save output files in the current working directory.

# This does not need to match to the root of the kernel source tree.

#

# For example, you can do this:

#

  cd /dir/to/store/output/files; make -f /dir/to/kernel/source/Makefile



 If you want to save output files in a different location, there are

 two syntaxes to specify it.



 1) O=

 Use "make O=dir/to/store/output/files/"



# 2) Set KBUILD_OUTPUT

 Set the environment variable KBUILD_OUTPUT to point to the output directory.

 export KBUILD_OUTPUT=dir/to/store/output/files/; make



 The O= assignment takes precedence over the KBUILD_OUTPUT environment

 variable.



# Do we want to change the working directory?



ifneq ($(KBUILD_OUTPUT),)

 Make's built-in functions such as $(abspath ...), $(realpath ...) cannot

 expand a shell special character '~'. We use a somewhat tedious way here.



# $(realpath ...) resolves symlinks

abs_objtree := $(realpath $(abs_objtree))

abs_objtree := $(CURDIR)

endif # ifneq ($(KBUILD_OUTPUT),)

# Suppress "Entering directory ..." unless we are changing the work directory.

MAKEFLAGS += --no-print-directory

need-sub-make := 1

endif

abs_srctree := $(realpath $(dir $(this-makefile)))



ifneq ($(abs_srctree),$(abs_objtree))

 Look for make include files relative to root of kernel src



# --included-dir is added for backward compatibility, but you should not rely on

 it. Please add $(srctree)/ prefix to include Makefiles in the source tree.



 'MAKEFLAGS += -rR' does not immediately become effective for GNU Make 3.x

 We need to invoke sub-make to avoid implicit rules in the top Makefile.

need-sub-make := 1

 Cancel implicit rules for this Makefile.





ifeq ($(need-sub-make),1)



$(filter-out $(this-makefile), $(MAKECMDGOALS)) __all: __sub-make

	@:

# Invoke a second make in the output directory, passing relevant variables

__sub-make:

	$(Q)$(MAKE) -C $(abs_objtree) -f $(abs_srctree)/Makefile $(MAKECMDGOALS)

 need-sub-make

 sub_make_done



# We process the rest of the Makefile if this is the final invocation of make



 Do not print "Entering directory ...",

 but we want to display it when entering to the output directory

 so that IDEs/editors are able to understand relative filenames.



 building in the source tree

        srctree := .

	building_out_of_srctree :=

        ifeq ($(abs_srctree)/,$(dir $(abs_objtree)))

                # building in a subdirectory of the source tree

                srctree := ..





objtree		:= .





# To make sure we do not include .config for any of the *config targets

 catch them early, and hand them over to scripts/kconfig/Makefile

# It is allowed to specify more targets when calling make, including

# mixing *config targets and build targets.

# For example 'make oldconfig all'.

 Detect when mixed targets is specified, and make a second invocation

 of make so .config is not included in this case either (for *config).



version_h := include/generated/uapi/linux/version.h

clean-targets := %clean mrproper cleandocs

no-dot-config-targets := $(clean-targets) \

			 $(version_h) headers headers_% archheaders archscripts \

			 outputmakefile

# Installation targets should not require compiler. Unfortunately, vdso_install

# is an exception where build artifacts may be updated. This must be fixed.



config-build	:=

need-config	:= 1

may-sync-config	:= 1

single-build	:=

ifneq ($(filter $(no-dot-config-targets), $(MAKECMDGOALS)),)

		need-config :=



	ifeq ($(filter-out $(no-compiler-targets), $(MAKECMDGOALS)),)

	endif

endif

		may-sync-config :=



ifneq ($(KBUILD_EXTMOD),)

	may-sync-config :=

endif

ifeq ($(KBUILD_EXTMOD),)

                ifneq ($(words $(MAKECMDGOALS)),1)

			mixed-build := 1

                endif

        endif

endif

# We cannot build single targets and the others at the same time

ifneq ($(filter $(single-targets), $(MAKECMDGOALS)),)

	ifneq ($(filter-out $(single-targets), $(MAKECMDGOALS)),)

	endif

endif

 For "make -j clean all", "make -j mrproper defconfig all", etc.

		mixed-build := 1

        endif

endif

 install and modules_install need also be processed one by one

ifneq ($(filter install,$(MAKECMDGOALS)),)

		mixed-build := 1

        endif

endif

 ===========================================================================

# We're called with mixed targets (*config and build targets).

# Handle them one by one.



$(MAKECMDGOALS): __build_one_by_one

	@:

	$(Q)set -e; \

	for i in $(MAKECMDGOALS); do \

		$(MAKE) -f $(srctree)/Makefile $$i; \

	done

 !mixed-build



include $(srctree)/scripts/Kbuild.include

# Read KERNELRELEASE from include/config/kernel.release (if it exists)

KERNELRELEASE = $(shell cat include/config/kernel.release 2> /dev/null)

KERNELVERSION = $(VERSION)$(if $(PATCHLEVEL),.$(PATCHLEVEL)$(if $(SUBLEVEL),.$(SUBLEVEL)))$(EXTRAVERSION)





 Cross compiling and selecting different set of gcc/bin-utils

 ---------------------------------------------------------------------------



 When performing cross compilation for other architectures ARCH shall be set

 to the target architecture. (See arch/* for the possibilities).

# ARCH can be set during invocation of make:

 make ARCH=ia64

 Another way is to have ARCH set in the environment.

# The default ARCH is the host where make is executed.

# CROSS_COMPILE specify the prefix used for all executables used

 during compilation. Only gcc and related bin-utils executables

 are prefixed with $(CROSS_COMPILE).

# CROSS_COMPILE can be set on the command line

 make CROSS_COMPILE=ia64-linux-

# Alternatively CROSS_COMPILE can be set in the environment.

 Default value for CROSS_COMPILE is not to prefix executables

# Note: Some architectures assign CROSS_COMPILE in their arch/*/Makefile

ARCH		?= $(SUBARCH)

# Architecture as present in compile.h

UTS_MACHINE 	:= $(ARCH)

SRCARCH 	:= $(ARCH)

# Additional ARCH settings for x86

ifeq ($(ARCH),i386)

        SRCARCH := x86

endif

# Additional ARCH settings for sparc

ifeq ($(ARCH),sparc64)

       SRCARCH := sparc

endif

 Additional ARCH settings for parisc

       SRCARCH := parisc

endif

cross_compiling := 1

endif



 SHELL used by kbuild

CONFIG_SHELL := sh

HOST_LFS_CFLAGS := $(shell getconf LFS_CFLAGS 2>/dev/null)

HOST_LFS_LIBS := $(shell getconf LFS_LIBS 2>/dev/null)

ifneq ($(LLVM),)

else



			      -O2 -fomit-frame-pointer -std=gnu89





# Make variables (CC, etc...)

CPP		= $(CC) -E

LD		= ld.lld

AR		= llvm-ar

NM		= llvm-nm

OBJCOPY		= llvm-objcopy

OBJDUMP		= llvm-objdump

READELF		= llvm-readelf

STRIP		= llvm-strip

LD		= $(CROSS_COMPILE)ld

NM		= $(CROSS_COMPILE)nm

OBJDUMP		= $(CROSS_COMPILE)objdump

STRIP		= $(CROSS_COMPILE)strip

endif

AWK		= awk

INSTALLKERNEL  := installkernel

PERL		= perl

BASH		= bash

KGZIP		= gzip

KBZIP2		= bzip2

KLZOP		= lzop

XZ		= xz



PAHOLE_FLAGS	= $(shell PAHOLE=$(PAHOLE) $(srctree)/scripts/pahole-flags.sh)

CHECKFLAGS     := -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ \

		  -Wbitwise -Wno-return-void -Wno-unknown-attribute $(CF)

NOSTDINC_FLAGS :=

CFLAGS_MODULE   =

AFLAGS_MODULE   =

LDFLAGS_MODULE  =

CFLAGS_KERNEL	=

AFLAGS_KERNEL	=

LDFLAGS_vmlinux =

# Use USERINCLUDE when you must reference the UAPI directories only.

USERINCLUDE    := \

		-I$(srctree)/arch/$(SRCARCH)/include/uapi \

		-I$(objtree)/arch/$(SRCARCH)/include/generated/uapi \

		-I$(srctree)/include/uapi \

		-I$(objtree)/include/generated/uapi \



 Use LINUXINCLUDE when you must reference the include/ directory.

# Needed to be compatible with the O= option

		-I$(srctree)/arch/$(SRCARCH)/include \

		-I$(objtree)/include \



		   -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE \

		   -Werror=implicit-function-declaration -Werror=implicit-int \

		   -Werror=return-type -Wno-format-security \

		   -std=gnu89

KBUILD_CPPFLAGS := -D__KERNEL__

KBUILD_AFLAGS_KERNEL :=

KBUILD_CFLAGS_KERNEL :=

KBUILD_AFLAGS_MODULE  := -DMODULE

KBUILD_CFLAGS_MODULE  := -DMODULE

CLANG_FLAGS :=

export ARCH SRCARCH CONFIG_SHELL BASH HOSTCC KBUILD_HOSTCFLAGS CROSS_COMPILE LD CC

export CPP AR NM STRIP OBJCOPY OBJDUMP READELF PAHOLE RESOLVE_BTFIDS LEX YACC AWK INSTALLKERNEL

export PERL PYTHON3 CHECK CHECKFLAGS MAKE UTS_MACHINE HOSTCXX

export KBUILD_HOSTCXXFLAGS KBUILD_HOSTLDFLAGS KBUILD_HOSTLDLIBS LDFLAGS_MODULE

export KBUILD_CPPFLAGS NOSTDINC_FLAGS LINUXINCLUDE OBJCOPYFLAGS KBUILD_LDFLAGS

export KBUILD_AFLAGS AFLAGS_KERNEL AFLAGS_MODULE

export KBUILD_AFLAGS_KERNEL KBUILD_CFLAGS_KERNEL

export PAHOLE_FLAGS

# Files to ignore in find ... statements

export RCS_FIND_IGNORE := \( -name SCCS -o -name BitKeeper -o -name .svn -o    \

			  -name CVS -o -name .pc -o -name .hg -o -name .git \) \

export RCS_TAR_IGNORE := --exclude SCCS --exclude BitKeeper --exclude .svn \



# ===========================================================================

 Rules shared between *config targets and build targets



# Basic helpers built in scripts/basic/

scripts_basic:

	$(Q)$(MAKE) $(build)=scripts/basic

# Before starting out-of-tree build, make sure the source tree is clean.

# outputmakefile generates a Makefile in the output directory, if using a

 separate output directory. This allows convenient use of make in the

 output directory.

 At the same time when output Makefile generated, generate .gitignore to

 ignore whole output directory



quiet_cmd_makefile = GEN     Makefile

	echo "\# Automatically generated by $(srctree)/Makefile: don't edit"; \



outputmakefile:

		 -d $(srctree)/include/config -o \

		echo >&2 "*** The source tree is not clean, please run 'make$(if $(findstring command line, $(origin ARCH)), ARCH=$(ARCH)) mrproper'"; \

		false; \

	fi

	$(Q)test -e .gitignore || \

 this is build directory, ignore it"; echo "*"; } > .gitignore



# The expansion should be delayed until arch/$(SRCARCH)/Makefile is included.

 Some architectures define CROSS_COMPILE in arch/$(SRCARCH)/Makefile.

# CC_VERSION_TEXT is referenced from Kconfig (so it needs export),

# and from include/config/auto.conf.cmd to detect the compiler upgrade.



ifneq ($(findstring clang,$(CC_VERSION_TEXT)),)

include $(srctree)/scripts/Makefile.clang

endif

# Include this also for config targets because some architectures need

# cc-cross-prefix to determine CROSS_COMPILE.

ifdef need-compiler



 ===========================================================================

 *config targets only - make sure prerequisites are updated, and descend

 in scripts/kconfig to make the *config target



 Read arch specific Makefile to set KBUILD_DEFCONFIG as needed.

 KBUILD_DEFCONFIG may point out an alternative default configuration

 used for 'make defconfig'

export KBUILD_DEFCONFIG KBUILD_KCONFIG CC_VERSION_TEXT

config: outputmakefile scripts_basic FORCE



%config: outputmakefile scripts_basic FORCE



else #!config-build

# ===========================================================================

 Build targets only - this includes vmlinux, arch specific targets, clean

# targets and others. In general all targets except *config targets.

 If building an external module we do not care about the all: rule

 but instead __all depend on modules

PHONY += all

__all: all

__all: modules

endif

 Decide whether to build built-in, modular, or both.

 Normally, just do built-in.



KBUILD_MODULES :=

KBUILD_BUILTIN := 1

 If we have only "make modules", don't compile built-in objects.

ifeq ($(MAKECMDGOALS),modules)

  KBUILD_BUILTIN :=

endif

 If we have "make <whatever> modules", compile modules

 in addition to whatever we do anyway.

 Just "make" or "make all" shall build modules as well





ifeq ($(MAKECMDGOALS),)

  KBUILD_MODULES := 1

endif

export KBUILD_MODULES KBUILD_BUILTIN

include include/config/auto.conf

endif

ifeq ($(KBUILD_EXTMOD),)

 Objects we will link into vmlinux / subdirs we need to visit

core-y		:= init/ usr/ arch/$(SRCARCH)/

drivers-y	+= virt/

libs-y		:= lib/

endif # KBUILD_EXTMOD

 The all: target is the default when no target is given on the

 command line.

# This allow a user to issue only 'make' to build a kernel including modules

# Defaults to vmlinux, but the arch makefile usually adds further targets



CFLAGS_GCOV	:= -fprofile-arcs -ftest-coverage

CFLAGS_GCOV	+= -fno-tree-loop-im

endif



# The arch Makefiles can override CC_FLAGS_FTRACE. We may also append it later.

  CC_FLAGS_FTRACE := -pg

endif

ifdef CONFIG_CC_IS_GCC

RETPOLINE_CFLAGS	:= $(call cc-option,-mindirect-branch=thunk-extern -mindirect-branch-register)

ifdef CONFIG_CC_IS_CLANG

RETPOLINE_VDSO_CFLAGS	:= -mretpoline

endif

export RETPOLINE_CFLAGS



include $(srctree)/arch/$(SRCARCH)/Makefile

# Read in dependencies to all Kconfig* files, make sure to run syncconfig if

 changes are detected. This should be included after arch/$(SRCARCH)/Makefile

# because some architectures define CROSS_COMPILE there.



	@echo >&2 '***'

	@echo >&2 '*** Configuration file "$@" not found!'

	@echo >&2 '*** "make menuconfig" or "make xconfig").'

	@/bin/false

# The actual configuration files used during the build are stored in

 include/generated/ and include/config/. Update them if .config is newer than

 include/config/auto.conf (which mirrors .config).



# This exploits the 'multi-target pattern rule' trick.

 The syncconfig should be executed only once to make all the targets.

# (Note: use the grouped target '&:' when we bump to GNU Make 4.3)

#

# Do not use $(call cmd,...) here. That would suppress prompts from syncconfig,

 so you cannot notice that Kconfig is waiting for the user input.

	$(Q)$(kecho) "  SYNC    $@"

 !may-sync-config

 External modules and some install targets need include/generated/autoconf.h

# and include/config/auto.conf but do not care if they are up-to-date.

# Use auto.conf to trigger the test

PHONY += include/config/auto.conf

	$(Q)test -e include/generated/autoconf.h -a -e $@ || (		\

	echo >&2 "         include/generated/autoconf.h or $@ are missing.";\

	echo >&2 "         Run 'make oldconfig && make prepare' on kernel src to fix it.";	\

	echo >&2 ;							\



endif # may-sync-config

endif # need-config

KBUILD_CFLAGS	+= -fno-delete-null-pointer-checks

KBUILD_CFLAGS	+= $(call cc-disable-warning, format-truncation)



KBUILD_CFLAGS += -O2

KBUILD_CFLAGS += -O3

KBUILD_CFLAGS += -Os

endif

 Tell gcc to never replace conditional load with a non-conditional one

ifdef CONFIG_CC_IS_GCC

 gcc-10 renamed --param=allow-store-data-races=0 to

# -fno-allow-store-data-races.

KBUILD_CFLAGS	+= $(call cc-option,--param=allow-store-data-races=0)



ifdef CONFIG_READABLE_ASM

 Disable optimizations that make assembler listings hard to read.

 reorder blocks reorders the control in the function

# ipa clone creates specialized cloned functions

 partial inlining inlines only parts of functions

KBUILD_CFLAGS += -fno-reorder-blocks -fno-ipa-cp-clone -fno-partial-inlining

endif

ifneq ($(CONFIG_FRAME_WARN),0)

KBUILD_CFLAGS += -Wframe-larger-than=$(CONFIG_FRAME_WARN)

endif

stackp-flags-$(CONFIG_STACKPROTECTOR)             := -fstack-protector

stackp-flags-$(CONFIG_STACKPROTECTOR_STRONG)      := -fstack-protector-strong

KBUILD_CFLAGS += $(stackp-flags-y)



 The kernel builds with '-std=gnu89' so use of GNU extensions is acceptable.

# CLANG uses a _MergedGlobals as optimization, but this breaks modpost, as the

# source of a reference will be _MergedGlobals and not on of the whitelisted names.

# See modpost pattern 2

else

 gcc inanely warns about local variables called 'main'

KBUILD_CFLAGS += -Wno-main

endif

 These warnings generated too much noise in a regular build.

# Use make W=1 to enable them (see scripts/Makefile.extrawarn)

KBUILD_CFLAGS += $(call cc-disable-warning, unused-const-variable)

ifdef CONFIG_FRAME_POINTER

else

 Some targets (ARM with Thumb2, for example), can't be built with frame

 pointers.  For those, we don't have FUNCTION_TRACER automatically

 select FRAME_POINTER.  However, FUNCTION_TRACER adds -pg, and this is

# incompatible with -fomit-frame-pointer with current GCC, so we don't use

 -fomit-frame-pointer with FUNCTION_TRACER.



# Initialize all stack variables with a 0xAA pattern.

ifdef CONFIG_INIT_STACK_ALL_PATTERN



# Initialize all stack variables with a zero value.

ifdef CONFIG_CC_IS_CLANG

# https://bugs.llvm.org/show_bug.cgi?id=45497

KBUILD_CFLAGS	+= -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang

endif

endif

 While VLAs have been removed, GCC produces unreachable stack probes

# for the randomize_kstack_offset feature. Disable it for all compilers.

KBUILD_CFLAGS	+= $(call cc-option, -fno-stack-clash-protection)

# Clear used registers at func exit (to reduce data lifetime and ROP gadgets).



  CC_FLAGS_FTRACE	+= -mrecord-mcount

ifdef CONFIG_FTRACE_MCOUNT_USE_OBJTOOL

  CC_FLAGS_USING	+= -DCC_USING_NOP_MCOUNT

endif

ifdef CONFIG_FTRACE_MCOUNT_USE_RECORDMCOUNT

ifdef CONFIG_HAVE_FENTRY

 s390-linux-gnu-gcc did not support -mfentry until gcc-9.

export CC_FLAGS_FTRACE

KBUILD_CFLAGS	+= $(CC_FLAGS_FTRACE) $(CC_FLAGS_USING)



# We trigger additional mismatches with less inlining

ifdef CONFIG_DEBUG_SECTION_MISMATCH



LDFLAGS_vmlinux += --gc-sections

endif

ifdef CONFIG_SHADOW_CALL_STACK

KBUILD_CFLAGS	+= $(CC_FLAGS_SCS)

export CC_FLAGS_SCS

endif

ifdef CONFIG_LTO_CLANG

ifdef CONFIG_LTO_CLANG_THIN

CC_FLAGS_LTO	:= -flto=thin -fsplit-lto-unit

else

CC_FLAGS_LTO	:= -flto

endif

CC_FLAGS_LTO	+= -fvisibility=hidden

 Limit inlining across translation units to reduce binary size

KBUILD_LDFLAGS += -mllvm -import-instr-limit=5

 Check for frame size exceeding threshold during prolog/epilog insertion

# when using lld < 13.0.0.





CC_FLAGS_CFI	:= -fsanitize=cfi \

		   -fsanitize-cfi-cross-dso \

		   -fno-sanitize-blacklist

CC_FLAGS_CFI	+= -fsanitize-recover=cfi

endif

 If LTO flags are filtered out, we must also filter out CFI.

KBUILD_CFLAGS	+= $(CC_FLAGS_CFI)

export CC_FLAGS_CFI

endif



 arch Makefile may override CC so keep this after arch Makefile is included



 warn about C99 declaration after statement

KBUILD_CFLAGS += -Wdeclaration-after-statement

 Variable Length Arrays (VLAs) should not be used anywhere in the kernel

KBUILD_CFLAGS += -Wvla

 disable pointer signed / unsigned warnings in gcc 4.0

KBUILD_CFLAGS += -Wno-pointer-sign

 disable stringop warnings in gcc 8+

KBUILD_CFLAGS += $(call cc-disable-warning, stringop-truncation)

# We'll want to enable this eventually, but it's not going away for 5.7 at least

KBUILD_CFLAGS += $(call cc-disable-warning, zero-length-bounds)

KBUILD_CFLAGS += $(call cc-disable-warning, stringop-overflow)

 Another good warning that we'll want to enable eventually



 Enabled with W=2, disabled by default as noisy

ifdef CONFIG_CC_IS_GCC

KBUILD_CFLAGS += -Wno-maybe-uninitialized

endif

ifdef CONFIG_CC_IS_GCC

# The allocators already balk at large sizes, so silence the compiler

# warnings for bounds checks involving those possible values. While

# -Wno-alloc-size-larger-than would normally be used here, earlier versions

 of gcc (<9.1) weirdly don't handle the option correctly when _other_

 warnings are produced (?!). Using -Walloc-size-larger-than=SIZE_MAX

 doesn't work (as it is documented to), silently resolving to "0" prior to

 version 9.1 (and producing an error more recently). Numeric values larger

 than PTRDIFF_MAX also don't work prior to version 9.1, which are silently

 ignored, continuing to default to PTRDIFF_MAX. So, left with no other

# choice, we must perform a versioned check to disable this warning.

# https://lore.kernel.org/lkml/20210824115859.187f272f@canb.auug.org.au

KBUILD_CFLAGS += $(call cc-ifversion, -ge, 0901, -Wno-alloc-size-larger-than)

endif

# disable invalid "can't wrap" optimizations for signed / pointers

KBUILD_CFLAGS	+= -fno-strict-overflow

# Make sure -fstack-check isn't enabled (like gentoo apparently did)



# conserve stack if available



# Prohibit date/time macros, which would make the build non-deterministic



# enforce correct pointer usage

KBUILD_CFLAGS   += $(call cc-option,-Werror=incompatible-pointer-types)

 Require designated initializers for all marked structures

KBUILD_CFLAGS   += $(call cc-option,-Werror=designated-init)

 change __FILE__ to the relative path from the srctree

KBUILD_CPPFLAGS += $(call cc-option,-fmacro-prefix-map=$(srctree)/=)

# include additional Makefiles when needed

include-y			:= scripts/Makefile.extrawarn

include-$(CONFIG_KASAN)		+= scripts/Makefile.kasan

include-$(CONFIG_UBSAN)		+= scripts/Makefile.ubsan





 scripts/Makefile.gcc-plugins is intentionally included last.

 Do not add $(call cc-option,...) below this line. When you build the kernel

 from the clean source tree, the GCC plugins do not exist at this point.



# Add user supplied CPPFLAGS, AFLAGS and CFLAGS as the last assignments

KBUILD_CPPFLAGS += $(KCPPFLAGS)

KBUILD_AFLAGS   += $(KAFLAGS)

KBUILD_CFLAGS   += $(KCFLAGS)

KBUILD_LDFLAGS_MODULE += --build-id=sha1



ifeq ($(CONFIG_STRIP_ASM_SYMS),y)

LDFLAGS_vmlinux	+= $(call ld-option, -X,)

endif



# We never want expected sections to be placed heuristically by the

# linker. All sections should be explicitly named in the linker script.

ifdef CONFIG_LD_ORPHAN_WARN

LDFLAGS_vmlinux += --orphan-handling=warn

endif

# Align the bit size of userspace programs with the kernel

KBUILD_USERLDFLAGS += $(filter -m32 -m64 --target=%, $(KBUILD_CFLAGS))

# make the checker run with the right architecture



 insure the checker run with the right endianness



 the checker needs the correct machine size



# Default kernel image to build when no specific target is given.

 KBUILD_IMAGE may be overruled on the command line or

# set in the environment

 Also any assignments in arch/$(ARCH)/Makefile take precedence over

# this default value



#

# INSTALL_PATH specifies where to place the updated kernel and system map

 images. Default is /boot, but you can set it to other values

export	INSTALL_PATH ?= /boot



 INSTALL_DTBS_PATH specifies a prefix for relocations required by build roots.

 Like INSTALL_MOD_PATH, it isn't defined in the Makefile, but can be passed as

 an argument if needed. Otherwise it defaults to the kernel install path





#

 INSTALL_MOD_PATH specifies a prefix to MODLIB for module directory

# relocations required by build roots.  This is not defined in the

 makefile but the argument can be passed to make if needed.





MODLIB	= $(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)

export MODLIB



export extmod_prefix = $(if $(KBUILD_EXTMOD),$(KBUILD_EXTMOD)/)



core-$(CONFIG_BLOCK)	+= block/

vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \

		     $(libs-y) $(libs-m)))

		     $(patsubst %/,%,$(filter %/, $(core-) \



subdir-modorder := $(addsuffix modules.order,$(filter %/, \

			$(drivers-y) $(drivers-m)))

clean-dirs	:= $(vmlinux-alldirs)

# Externally visible symbols (used by link-vmlinux.sh)

KBUILD_VMLINUX_OBJS := $(head-y) $(patsubst %/,%/built-in.a, $(core-y))

KBUILD_VMLINUX_OBJS += $(addsuffix built-in.a, $(filter %/, $(libs-y)))

KBUILD_VMLINUX_LIBS := $(filter-out %/, $(libs-y))

KBUILD_VMLINUX_LIBS := $(patsubst %/,%/lib.a, $(libs-y))

endif



export KBUILD_LDS          := arch/$(SRCARCH)/kernel/vmlinux.lds

 used by scripts/Makefile.package

export KBUILD_ALLDIRS := $(sort $(filter-out arch/%,$(vmlinux-alldirs)) LICENSES arch include scripts tools)



 Recurse until adjust_autoksyms.sh is satisfied

PHONY += autoksyms_recursive

# For the kernel to actually contain only the needed exported symbols,

# we have to build modules as well to determine what those symbols are.

 (this can be evaluated only once include/config/auto.conf has been included)





autoksyms_h := $(if $(CONFIG_TRIM_UNUSED_KSYMS), include/generated/autoksyms.h)

quiet_cmd_autoksyms_h = GEN     $@

      cmd_autoksyms_h = mkdir -p $(dir $@); \

			$(CONFIG_SHELL) $(srctree)/scripts/gen_autoksyms.sh $@

	$(call cmd,autoksyms_h)



 Final link of vmlinux with optional arch pass after final link

cmd_link-vmlinux =                                                 \







# The actual objects are generated when descending,

# make sure no implicit rule kicks in

$(sort $(vmlinux-deps) $(subdir-modorder)): descend ;

filechk_kernel.release = \

	echo "$(KERNELVERSION)$$($(CONFIG_SHELL) $(srctree)/scripts/setlocalversion $(srctree))"

 Store (new) KERNELRELEASE string in include/config/kernel.release

include/config/kernel.release: FORCE

	$(call filechk,kernel.release)

# Additional helpers built in scripts/

# Carefully list dependencies so we do not try to build scripts twice

# in parallel

scripts: scripts_basic scripts_dtc



 Things we need to do before we recursively start building the kernel

 or the modules are listed in "prepare".

# A multi level approach is used. prepareN is processed before prepareN-1.

# archprepare is used in arch Makefiles and when processed asm symlink,

# version.h and scripts_basic is processed / created.

PHONY += prepare archprepare

	include/generated/autoconf.h remove-stale-files



# All the preparing..

prepare: prepare0

	$(Q)$(srctree)/scripts/remove-stale-files

# Support for using generic headers in asm-generic

asm-generic := -f $(srctree)/scripts/Makefile.asm-generic obj

	generic=include/asm-generic

uapi-asm-generic:



# Generate some files

# ---------------------------------------------------------------------------

 KERNELRELEASE can change from a few different places, meaning version.h

# needs to be updated, so this check is forced on all builds

	if [ `echo -n "$(KERNELRELEASE)" | wc -c ` -gt $(uts_len) ]; then \

	  exit 1;                                                         \

define UTS_RELEASE \"$(KERNELRELEASE)\"



		echo \#define LINUX_VERSION_CODE $(shell                 \

		expr $(VERSION) \* 65536 + $(PATCHLEVEL) \* 256 + 255); \

	else                                                             \

define LINUX_VERSION_CODE $(shell                 \

define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) +  \

define LINUX_VERSION_MAJOR $(VERSION);                    \

define LINUX_VERSION_PATCHLEVEL $(PATCHLEVEL);            \

define LINUX_VERSION_SUBLEVEL $(SUBLEVEL)



$(version_h): PATCHLEVEL := $(if $(PATCHLEVEL), $(PATCHLEVEL), 0)

$(version_h): SUBLEVEL := $(if $(SUBLEVEL), $(SUBLEVEL), 0)

$(version_h): FORCE



include/generated/utsrelease.h: include/config/kernel.release FORCE

	$(call filechk,utsrelease.h)

PHONY += headerdep

	$(Q)find $(srctree)/include/ -name '*.h' | xargs --max-args 1 \

	$(srctree)/scripts/headerdep.pl -I$(srctree)/include

 ---------------------------------------------------------------------------

# Kernel headers

Default location for installed headers

export INSTALL_HDR_PATH = $(objtree)/usr

	mkdir -p $(INSTALL_HDR_PATH); \

	rsync -mrl --include='*/' --include='*\.h' --exclude='*' \



headers_install: headers







headers: $(version_h) scripts_unifdef uapi-asm-generic archheaders archscripts



 Deprecated. It is no-op now.

PHONY += headers_check

	@echo >&2 "=================== WARNING ==================="

	@echo >&2 "and will be removed after Linux 5.15 release."

	@echo >&2 "Please remove headers_check from your scripts."



prepare: headers

endif

PHONY += scripts_unifdef



# ---------------------------------------------------------------------------

# Install

 Many distributions have the custom install script, /sbin/installkernel.

 If DKMS is installed, 'make install' will eventually recuses back

 to the this Makefile to build and install external modules.

 Cancel sub_make_done so that options such as M=, V=, etc. are parsed.



install: sub_make_done :=

 ---------------------------------------------------------------------------

 Tools



ifdef CONFIG_STACK_VALIDATION





PHONY += resolve_btfids_clean



 tools/bpf/resolve_btfids directory might not exist

# in output directory, skip its clean in that case

resolve_btfids_clean:

	$(Q)$(MAKE) -sC $(srctree)/tools/bpf/resolve_btfids O=$(resolve_btfids_O) clean

endif

 Clear a bunch of variables before executing the submake

tools_silent=s

endif

	$(Q)mkdir -p $(objtree)/tools



	$(Q)mkdir -p $(objtree)/tools

	$(Q)$(MAKE) LDFLAGS= MAKEFLAGS="$(tools_silent) $(filter --j% -j,$(MAKEFLAGS))" O=$(abspath $(objtree)) subdir=tools -C $(srctree)/tools/ $*

 ---------------------------------------------------------------------------

 Kernel selftest



kselftest:





kselftest-merge:

	$(if $(wildcard $(objtree)/.config),, $(error No .config exists, config your kernel first!))

	$(Q)find $(srctree)/tools/testing/selftests -name config | \

	$(Q)$(MAKE) -f $(srctree)/Makefile olddefconfig

 ---------------------------------------------------------------------------

# Devicetree files



ifneq ($(dtstree),)

	$(Q)$(MAKE) $(build)=$(dtstree) $(dtstree)/$@ $(dtstree)/$*.dt.yaml

%.dtbo: dt_binding_check include/config/kernel.release scripts_dtc



PHONY += dtbs dtbs_install dtbs_check

dtbs: include/config/kernel.release scripts_dtc



ifneq ($(filter dtbs_check %.dtb %.dtbo, $(MAKECMDGOALS)),)

export CHECK_DTBS=y





dtbs_install:

	$(Q)$(MAKE) $(dtbinst)=$(dtstree) dst=$(INSTALL_DTBS_PATH)

ifdef CONFIG_OF_EARLY_FLATTREE

all: dtbs

endif



scripts_dtc: scripts_basic

	$(Q)$(MAKE) $(build)=scripts/dtc

ifneq ($(filter dt_binding_check, $(MAKECMDGOALS)),)

export CHECK_DT_BINDING=y

endif



# ---------------------------------------------------------------------------

# Modules

ifdef CONFIG_MODULES

 By default, build modules as well





# When we're building modules with modversions, we need to consider

 the built-in objects during the descend as well, in order to

 make sure the checksums are up to date before we record them.

ifdef CONFIG_MODVERSIONS

  KBUILD_BUILTIN := 1

endif

 Build modules



 A module can be listed more than once in obj-m resulting in

# duplicate lines in modules.order files.  Those are removed

 using awk while concatenating to the final file.



modules: $(if $(KBUILD_BUILTIN),vmlinux) modules_check modules_prepare



modules.order: $(subdir-modorder) FORCE

	$(call if_changed,modules_order)

targets += modules.order

 Target to prepare building external modules

PHONY += modules_prepare

	$(Q)$(MAKE) $(build)=scripts scripts/module.lds



ifeq ($(CONFIG_MODULE_SIG),y)

PHONY += modules_sign

modules_sign: modules_install

	@:

# modules_sign is a subset of modules_install.

 'make modules_install modules_sign' is equivalent to 'make modules_install'.

modules_sign_only := y

endif

endif

modinst_pre :=

modinst_pre := __modinst_pre

endif

PHONY += __modinst_pre

	@rm -f $(MODLIB)/source

	@mkdir -p $(MODLIB)/kernel

	@if [ ! $(objtree) -ef  $(MODLIB)/build ]; then \

		rm -f $(MODLIB)/build ; \

		ln -s $(CURDIR) $(MODLIB)/build ; \

	fi

	@cp -f modules.builtin $(MODLIB)/

	@cp -f $(objtree)/modules.builtin.modinfo $(MODLIB)/

endif # CONFIG_MODULES



 Cleaning is done on three levels.

# make clean     Delete most generated files

#                Leave enough to build external modules

 make mrproper  Delete the current configuration, and all generated files

# make distclean Remove editor backup files, patch leftover files and the like

 Directories & files removed with 'make clean'

CLEAN_FILES += include/ksym vmlinux.symvers modules-only.symvers \

	       compile_commands.json .thinlto-cache

# Directories & files removed with 'make mrproper'

MRPROPER_FILES += include/config include/generated          \

		  .config .config.old .version \

		  certs/signing_key.pem certs/signing_key.x509 \

		  certs/x509.genkey \

		  *.spec

 clean - Delete most, but leave enough to build external modules





PHONY += archclean vmlinuxclean

	$(Q)$(if $(ARCH_POSTLINK), $(MAKE) -f $(ARCH_POSTLINK) clean)

clean: archclean vmlinuxclean resolve_btfids_clean

# mrproper - Delete all generated files, including .config

#

mrproper: rm-files := $(wildcard $(MRPROPER_FILES))

mrproper-dirs      := $(addprefix _mrproper_,scripts)

PHONY += $(mrproper-dirs) mrproper

$(mrproper-dirs):



	$(call cmd,rmfiles)

 distclean



PHONY += distclean

		\( -name '*.orig' -o -name '*.rej' -o -name '*~' \

		-o -name '*.bak' -o -name '#*#' -o -name '*%' \

		-type f -print | xargs rm -f



 Packaging of the kernel to various formats

 ---------------------------------------------------------------------------



%src-pkg: FORCE

	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.package $@

 Brief documentation of the typical targets used

 ---------------------------------------------------------------------------



board-dirs := $(sort $(notdir $(board-dirs:/=)))

	@echo  '  clean		  - Remove most generated files but keep the config and'

	@echo  ''

	@echo  ''

	@echo  '  all		  - Build all targets marked with [*]'

	@echo  '* vmlinux	  - Build the bare kernel'

	@echo  '* modules	  - Build all modules'

	@echo  '  dir/            - Build all files in dir and below'

	@echo  '  dir/file.[ois]  - Build specified target only'

	@echo  '                    (requires compiler support for LLVM assembly generation)'

	@echo  '  dir/file.lst    - Build specified mixed source/assembly target only'

	@echo  '  modules_prepare - Set up for building external modules'

	@echo  '  cscope	  - Generate cscope index'

	@echo  '  gtags           - Generate GNU GLOBAL index'

	@echo  '  kernelversion	  - Output the version stored in Makefile (use with make -s)'

	@echo  '  image_name	  - Output the image name (use with make -s)'

	@echo  '  headers_install - Install sanitised kernel headers to INSTALL_HDR_PATH'; \

	 echo  '                    (default: $(INSTALL_HDR_PATH))'; \

	@echo  '  headerdep       - Detect inclusion cycles in headers'

	@echo  '  coccicheck      - Check with Coccinelle'

	@echo  ''

	@echo  '  nsdeps          - Generate missing symbol namespace dependencies'

	@echo  'Kernel selftest:'

	@echo  '  kselftest         - Build and run kernel selftest'

	@echo  '  kselftest-clean   - Remove all generated kselftest files'

	@echo  '		      kselftest to existing .config.'

	@$(if $(dtstree), \

		echo 'Devicetree:'; \

		echo '* dtbs             - Build device tree blobs for enabled boards'; \

		echo '  dtbs_install     - Install dtbs to $(INSTALL_DTBS_PATH)'; \

		echo '  dt_binding_check - Validate device tree binding documents'; \

		echo '  dtbs_check       - Validate device tree source files';\



	@echo 'Userspace tools targets:'

	@echo '  or  "cd tools; make help"'

	@echo  ''

	@$(MAKE) -f $(srctree)/Documentation/Makefile dochelp

	@$(if $(archhelp),$(archhelp),\

	@echo  ''

	@$(if $(boards), \

		$(foreach b, $(boards), \

		printf "  %-27s - Build for %s\\n" $(b) $(subst _defconfig,,$(b));) \

		printf "  %-16s - Show all of the above\\n" help-boards; \



	@echo  '  make V=0|1 [targets] 0 => quiet build (default), 1 => verbose build'

	@echo  '  make V=2   [targets] 2 => give reason for rebuild of target'

	@echo  '  make C=1   [targets] Check re-compiled c source with $$CHECK'

	@echo  '		1: warnings which may be relevant and do not occur too often'

	@echo  '		2: warnings which occur quite often but may still be relevant'

	@echo  '		Multiple levels can be combined with W=12 or W=123'

	@echo  'Execute "make" or "make all" to build all targets marked with [*] '





help-boards: $(help-board-dirs)

boards-per-dir = $(sort $(notdir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/$*/*_defconfig)))

	@echo  'Architecture specific targets ($(SRCARCH) $*):'

	@$(if $(boards-per-dir), \

		$(foreach b, $(boards-per-dir), \

		echo '')



# Documentation targets

# ---------------------------------------------------------------------------

	       linkcheckdocs dochelp refcheckdocs

PHONY += $(DOC_TARGETS)

$(DOC_TARGETS):



 Misc

 ---------------------------------------------------------------------------





all: scripts_gdb

endif

else # KBUILD_EXTMOD



# External module support.

# When building external modules the kernel used as basis is considered

 read-only, and no consistency checks are made and the make

 system is not used on the basis kernel. If updates are required

# in the basis kernel ordinary make commands (without M=...) must be used.

# We are always building only modules.

KBUILD_BUILTIN :=

KBUILD_MODULES := 1

build-dirs := $(KBUILD_EXTMOD)



PHONY += compile_commands.json

clean-dirs := $(KBUILD_EXTMOD)



# now expand this into a simple variable to reduce the cost of shell evaluations

prepare:

		echo >&2 "  The kernel was built by: "$(CONFIG_CC_VERSION_TEXT); \

		echo >&2 "  You are using:           $(CC_VERSION_TEXT)"; \

	fi

	@echo  '  Building external modules.'

	@echo  '  Syntax: make -C path/to/kernel/src M=$$PWD target'

	@echo  '  modules_install - install the module'

	@echo  '  clean           - remove generated files in module directory only'



 no-op for external module builds

PHONY += modules_prepare

 KBUILD_EXTMOD



# ---------------------------------------------------------------------------

# Modules

PHONY += modules modules_install

ifdef CONFIG_MODULES

modules: modules_check

	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost

PHONY += modules_check







else # CONFIG_MODULES

# Modules not configured

# ---------------------------------------------------------------------------

modules modules_install:

	@echo >&2 '*** to enable CONFIG_MODULES.'

	@exit 1

endif # CONFIG_MODULES

# Single targets

# ---------------------------------------------------------------------------

 To build individual files in subdirectories, you can do like this:



#   make foo/bar/baz.s

#

# The supported suffixes for single-target are listed in 'single-targets'

#

 To build only under specific subdirectories, you can do like this:



   make foo/bar/baz/





 .ko is special because modpost is needed

single-ko := $(sort $(filter %.ko, $(MAKECMDGOALS)))

single-no-ko := $(sort $(patsubst %.ko,%.mod, $(MAKECMDGOALS)))

$(single-ko): single_modpost

	@:



# For the single build of in-tree modules, use a temporary file to avoid

# the situation of modules_install installing an invalid modules.order.



PHONY += single_modpost

single_modpost: $(single-no-ko) modules_prepare

	$(Q){ $(foreach m, $(single-ko), echo $(extmod_prefix)$m;) } > $(MODORDER)

	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost





 trim unrelated directories

			$(if $(filter $(d)/%, $(KBUILD_SINGLE_TARGETS)), $(d)))



ifndef CONFIG_MODULES

KBUILD_MODULES :=

endif

 Handle descending into subdirectories listed in $(build-dirs)

 Preset locale variables to speed up the build process. Limit locale

 tweaks to this spot to avoid wrong language settings when running

# make menuconfig etc.

# Error messages still appears in the original language

descend: $(build-dirs)

	$(Q)$(MAKE) $(build)=$@ \

	single-build=$(if $(filter-out $@/, $(filter $@/%, $(KBUILD_SINGLE_TARGETS))),1) \

	need-builtin=1 need-modorder=1

PHONY += $(clean-dirs) clean



	$(call cmd,rmfiles)

	@find $(if $(KBUILD_EXTMOD), $(KBUILD_EXTMOD), .) $(RCS_FIND_IGNORE) \

		\( -name '*.[aios]' -o -name '*.ko' -o -name '.*.cmd' \

		-o -name '*.ko.*' \

		-o -name '*.su' -o -name '*.mod' \

		-o -name '*.lex.c' -o -name '*.tab.[ch]' \

		-o -name '*.symtypes' -o -name 'modules.order' \

		-o -name '.tmp_*.o.*' \

		-o -name '*.c.[012]*.*' \

		-o -name '*.ll' \

		-o -name '*.gcno' \



# Generate tags for editors

# ---------------------------------------------------------------------------

quiet_cmd_tags = GEN     $@



tags TAGS cscope gtags: FORCE

	$(call cmd,tags)

 Script to generate missing namespace dependencies

 ---------------------------------------------------------------------------



PHONY += nsdeps

	$(Q)$(CONFIG_SHELL) $(srctree)/scripts/nsdeps

 Clang Tooling

 ---------------------------------------------------------------------------



quiet_cmd_gen_compile_commands = GEN     $@

      cmd_gen_compile_commands = $(PYTHON3) $< -a $(AR) -o $@ $(filter-out $<, $(real-prereqs))

$(extmod_prefix)compile_commands.json: scripts/clang-tools/gen_compile_commands.py \

	$(call if_changed,gen_compile_commands)

targets += $(extmod_prefix)compile_commands.json

PHONY += clang-tidy clang-analyzer

ifdef CONFIG_CC_IS_CLANG

      cmd_clang_tools = $(PYTHON3) $(srctree)/scripts/clang-tools/run-clang-tools.py $@ $<

clang-tidy clang-analyzer: $(extmod_prefix)compile_commands.json

else



# Scripts to check various things for consistency

# ---------------------------------------------------------------------------



includecheck:

	find $(srctree)/* $(RCS_FIND_IGNORE) \

		-name '*.[hcS]' -type f -print | sort \



versioncheck:

	find $(srctree)/* $(RCS_FIND_IGNORE) \

		-name '*.[hcS]' -type f -print | sort \

		| xargs $(PERL) -w $(srctree)/scripts/checkversion.pl

	$(Q)$(BASH) $(srctree)/scripts/$@

export_report:





 UML needs a little special treatment here.  It wants to use the host

 toolchain, so needs $(SUBARCH) passed to checkstack.pl.  Everyone

# else wants $(ARCH), including people doing cross-builds, which means

 that $(SUBARCH) doesn't work here.

ifeq ($(ARCH), um)

CHECKSTACK_ARCH := $(SUBARCH)

CHECKSTACK_ARCH := $(ARCH)

endif

checkstack:

	$(PERL) $(srctree)/scripts/checkstack.pl $(CHECKSTACK_ARCH)

kernelrelease:





image_name:



quiet_cmd_rmfiles = $(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))



# read saved command lines for existing targets





 config-build

 mixed-build

 need-sub-make



FORCE:

# Declare the contents of the PHONY variable as phony.  We keep that

# information in a variable so we can use it in if_changed and friends.

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux filesystems.

#

 14 Sep 2000, Christoph Hellwig <hch@infradead.org>

# Rewritten to use lists instead of if-statements.

 



obj-y :=	open.o read_write.o file_table.o super.o \

		char_dev.o stat.o exec.o pipe.o namei.o fcntl.o \

		ioctl.o readdir.o select.o dcache.o inode.o \

		attr.o bad_inode.o file.o filesystems.o namespace.o \

		seq_file.o xattr.o libfs.o fs-writeback.o \

		pnode.o splice.o sync.o utimes.o d_path.o \

		kernel_read_file.o remap_range.o

ifeq ($(CONFIG_BLOCK),y)

obj-y +=	buffer.o direct-io.o mpage.o



obj-$(CONFIG_PROC_FS) += proc_namespace.o

obj-$(CONFIG_USERFAULTFD)	+= userfaultfd.o

obj-$(CONFIG_FS_DAX)		+= dax.o

obj-$(CONFIG_FILE_LOCKING)      += locks.o

obj-$(CONFIG_BINFMT_MISC)	+= binfmt_misc.o

obj-$(CONFIG_BINFMT_ELF)	+= binfmt_elf.o

obj-$(CONFIG_BINFMT_ELF_FDPIC)	+= binfmt_elf_fdpic.o



obj-$(CONFIG_FS_MBCACHE)	+= mbcache.o

obj-$(CONFIG_FS_POSIX_ACL)	+= posix_acl.o

obj-$(CONFIG_NFS_COMMON)	+= nfs_common/

obj-$(CONFIG_COREDUMP)		+= coredump.o



obj-$(CONFIG_FHANDLE)		+= fhandle.o





obj-$(CONFIG_PROC_FS)		+= proc/

obj-$(CONFIG_SYSFS)		+= sysfs/



 Do not add any filesystems before this line

obj-$(CONFIG_FSCACHE)		+= fscache/

 We place ext4 before ext2 so that clean ext3 root fs's do NOT mount using the

 ext2 driver, which doesn't know about journalling!  Explicitly request ext2

# by giving the rootfstype= parameter.

obj-$(CONFIG_EXT2_FS)		+= ext2/

obj-$(CONFIG_CRAMFS)		+= cramfs/

obj-y				+= ramfs/

obj-$(CONFIG_ISO9660_FS)	+= isofs/

 Before hfs to find wrapped HFS+

obj-$(CONFIG_EXPORTFS)		+= exportfs/

obj-$(CONFIG_LOCKD)		+= lockd/

obj-$(CONFIG_UNICODE)		+= unicode/

obj-$(CONFIG_SYSV_FS)		+= sysv/

obj-$(CONFIG_SMBFS_COMMON)	+= smbfs_common/

obj-$(CONFIG_SMB_SERVER)	+= ksmbd/

obj-$(CONFIG_HPFS_FS)		+= hpfs/

obj-$(CONFIG_NTFS_FS)		+= ntfs/

obj-$(CONFIG_NTFS3_FS)		+= ntfs3/

obj-$(CONFIG_UFS_FS)		+= ufs/

obj-$(CONFIG_EFS_FS)		+= efs/

obj-$(CONFIG_JFFS2_FS)		+= jffs2/

obj-$(CONFIG_UBIFS_FS)		+= ubifs/

obj-$(CONFIG_AFFS_FS)		+= affs/

obj-$(CONFIG_ROMFS_FS)		+= romfs/

obj-$(CONFIG_QNX4FS_FS)		+= qnx4/

obj-$(CONFIG_QNX6FS_FS)		+= qnx6/

obj-$(CONFIG_AUTOFS_FS)		+= autofs/

obj-$(CONFIG_ADFS_FS)		+= adfs/

obj-$(CONFIG_FUSE_FS)		+= fuse/

obj-$(CONFIG_ORANGEFS_FS)       += orangefs/

obj-$(CONFIG_UDF_FS)		+= udf/

obj-$(CONFIG_SUN_OPENPROMFS)	+= openpromfs/

obj-$(CONFIG_OMFS_FS)		+= omfs/

obj-$(CONFIG_JFS_FS)		+= jfs/

obj-$(CONFIG_XFS_FS)		+= xfs/

obj-$(CONFIG_9P_FS)		+= 9p/

obj-$(CONFIG_AFS_FS)		+= afs/

obj-$(CONFIG_NILFS2_FS)		+= nilfs2/

obj-$(CONFIG_BEFS_FS)		+= befs/

obj-$(CONFIG_TRACING)		+= tracefs/

obj-$(CONFIG_OCFS2_FS)		+= ocfs2/

obj-$(CONFIG_BTRFS_FS)		+= btrfs/

obj-$(CONFIG_PSTORE)		+= pstore/

obj-$(CONFIG_EFIVAR_FS)		+= efivarfs/

obj-$(CONFIG_EROFS_FS)		+= erofs/

obj-$(CONFIG_VBOXSF_FS)		+= vboxsf/

obj-$(CONFIG_ZONEFS_FS)		+= zonefs/

 SPDX-License-Identifier: GPL-2.0-only



 VxFS Makefile





obj-$(CONFIG_VXFS_FS) += freevxfs.o

freevxfs-objs := vxfs_bmap.o vxfs_fshead.o vxfs_immed.o vxfs_inode.o \

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for CEPH filesystem.

#



ceph-y := super.o inode.o dir.o file.o locks.o addr.o ioctl.o \

	mds_client.o mdsmap.o strings.o ceph_frag.o \



 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux qnx4-filesystem routines.

#



qnx4-objs := inode.o dir.o namei.o bitmap.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for general filesystem caching code





	cache.o \

	cookie.o \

	netfs.o \

	object.o \



fscache-$(CONFIG_PROC_FS) += proc.o



 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux SystemV/Coherent filesystem routines.

#



sysv-objs := ialloc.o balloc.o inode.o itree.o file.o dir.o \

	     namei.o super.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the linux udf-filesystem routines.





obj-$(CONFIG_UDF_FS) += udf.o

		partition.o super.o truncate.o symlink.o \

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux JFS filesystem routines.

#



jfs-y    := super.o file.o inode.o namei.o jfs_mount.o jfs_umount.o \

	    jfs_unicode.o jfs_dtree.o jfs_inode.o jfs_discard.o \





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the filesystem export support routines.

obj-$(CONFIG_EXPORTFS) += exportfs.o

exportfs-objs := expfs.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the FUSE filesystem.





obj-$(CONFIG_FUSE_FS) += fuse.o



fuse-$(CONFIG_FUSE_DAX) += dax.o

# SPDX-License-Identifier: GPL-2.0

#

 Copyright (c) 2000-2005 Silicon Graphics, Inc.

# All Rights Reserved.

#

ccflags-y += -I $(srctree)/$(src)		# needed for trace events





# this one should be compiled first, as the tracing macros can easily blow up

xfs-y				+= xfs_trace.o

 build the libxfs code first

xfs-y				+= $(addprefix libxfs/, \

				   xfs_ag.o \

				   xfs_alloc_btree.o \

				   xfs_attr.o \

				   xfs_attr_remote.o \

				   xfs_btree.o \

				   xfs_defer.o \

				   xfs_dir2.o \

				   xfs_dir2_block.o \

				   xfs_dir2_leaf.o \

				   xfs_dir2_sf.o \

				   xfs_iext_tree.o \

				   xfs_inode_fork.o \

				   xfs_ag_resv.o \

				   xfs_rmap.o \

				   xfs_rmap_btree.o \

				   xfs_refcount.o \

				   xfs_refcount_btree.o \

				   xfs_sb.o \

				   xfs_symlink_remote.o \

				   xfs_types.o \

# xfs_rtbitmap is shared with libxfs

xfs-$(CONFIG_XFS_RT)		+= $(addprefix libxfs/, \

				   xfs_rtbitmap.o \



 highlevel code

xfs-y				+= xfs_aops.o \

				   xfs_attr_list.o \

				   xfs_buf.o \

				   xfs_dir2_readdir.o \

				   xfs_error.o \

				   xfs_export.o \

				   xfs_fsmap.o \

				   xfs_globals.o \

				   xfs_health.o \

				   xfs_icache.o \

				   xfs_iomap.o \

				   xfs_iops.o \

				   xfs_iwalk.o \

				   xfs_mount.o \

				   xfs_pwork.o \

				   xfs_stats.o \

				   xfs_symlink.o \

				   xfs_trans.o \



 low-level transaction/log code

				   xfs_log_cil.o \

				   xfs_refcount_item.o \

				   xfs_log_recover.o \

				   xfs_trans_buf.o

 optional features

				   xfs_trans_dquot.o \



 xfs_rtbitmap is shared with libxfs

xfs-$(CONFIG_XFS_RT)		+= xfs_rtalloc.o

xfs-$(CONFIG_XFS_POSIX_ACL)	+= xfs_acl.o

xfs-$(CONFIG_SYSCTL)		+= xfs_sysctl.o

xfs-$(CONFIG_EXPORTFS_BLOCK_OPS)	+= xfs_pnfs.o

 online scrub/repair



# Tracepoints like to blow up, so build that before everything else

				   trace.o \

				   agheader.o \

				   btree.o \

				   common.o \

				   dir.o \

				   fscounters.o \

				   health.o \

				   ialloc.o \

				   scrub.o \

				   )



# online repair

				   agheader_repair.o \

				   bitmap.o \

				   repair.o \

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux BeOS filesystem routines.

#

 

obj-$(CONFIG_BEFS_FS) += befs.o

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_ZONEFS_FS) += zonefs.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_UNICODE) += unicode.o

obj-$(CONFIG_UNICODE_NORMALIZATION_SELFTEST) += utf8-selftest.o

unicode-y := utf8-norm.o utf8-core.o



# In the normal build, the checked-in utf8data.h is just shipped.

#

 To generate utf8data.h from UCD, put *.txt files in this directory

 and pass REGENERATE_UTF8DATA=1 from the command line.



quiet_cmd_utf8data = GEN     $@

      cmd_utf8data = $< \

		-a $(srctree)/$(src)/DerivedAge.txt \

		-p $(srctree)/$(src)/DerivedCoreProperties.txt \

		-f $(srctree)/$(src)/CaseFolding.txt \

		-n $(srctree)/$(src)/NormalizationCorrections.txt \



$(obj)/utf8data.h: $(obj)/mkutf8data $(filter %.txt, $(cmd_utf8data)) FORCE







endif

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux eCryptfs





obj-$(CONFIG_ECRYPT_FS) += ecryptfs.o

ecryptfs-y := dentry.o file.o inode.o main.o super.o mmap.o read_write.o \



ecryptfs-$(CONFIG_ECRYPT_FS_MESSAGING) += messaging.o miscdev.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux autofs-filesystem routines.

#

obj-$(CONFIG_AUTOFS_FS) += autofs4.o

autofs4-objs := init.o inode.o root.o symlink.o waitq.o expire.o dev-ioctl.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux ext4-filesystem routines.





obj-$(CONFIG_EXT4_FS) += ext4.o

ext4-y	:= balloc.o bitmap.o block_validity.o dir.o ext4_jbd2.o extents.o \

		extents_status.o file.o fsmap.o fsync.o hash.o ialloc.o \

		indirect.o inline.o inode.o ioctl.o mballoc.o migrate.o \

		mmp.o move_extent.o namei.o page-io.o readpage.o resize.o \



ext4-$(CONFIG_EXT4_FS_POSIX_ACL)	+= acl.o

ext4-inode-test-objs			+= inode-test.o

# SPDX-License-Identifier: GPL-2.0

# Rules for making the NTFS driver.



ntfs-y := aops.o attrib.o collate.o compress.o debug.o dir.o file.o \

	  index.o inode.o mft.o mst.o namei.o runlist.o super.o sysctl.o \



ntfs-$(CONFIG_NTFS_RW) += bitmap.o lcnalloc.o logfile.o quota.o usnjrnl.o

ccflags-y := -DNTFS_VERSION=\"2.1.32\"

ccflags-$(CONFIG_NTFS_DEBUG)	+= -DDEBUG



 SPDX-License-Identifier: GPL-2.0-only

debugfs-objs	:= inode.o file.o



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the linux pstorefs routines.

#

obj-$(CONFIG_PSTORE) += pstore.o

pstore-$(CONFIG_PSTORE_FTRACE)	+= ftrace.o

pstore-$(CONFIG_PSTORE_PMSG)	+= pmsg.o

ramoops-objs += ram.o ram_core.o

obj-$(CONFIG_PSTORE_RAM)	+= ramoops.o

pstore_zone-objs += zone.o



obj-$(CONFIG_PSTORE_BLK)	+= pstore_blk.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux Sun Openprom filesystem routines.

#

obj-$(CONFIG_SUN_OPENPROMFS) += openpromfs.o

openpromfs-objs := inode.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for native language support







obj-$(CONFIG_NLS_CODEPAGE_437)	+= nls_cp437.o

obj-$(CONFIG_NLS_CODEPAGE_737)	+= nls_cp737.o

obj-$(CONFIG_NLS_CODEPAGE_775)	+= nls_cp775.o

obj-$(CONFIG_NLS_CODEPAGE_850)	+= nls_cp850.o

obj-$(CONFIG_NLS_CODEPAGE_852)	+= nls_cp852.o

obj-$(CONFIG_NLS_CODEPAGE_855)	+= nls_cp855.o

obj-$(CONFIG_NLS_CODEPAGE_857)	+= nls_cp857.o

obj-$(CONFIG_NLS_CODEPAGE_860)	+= nls_cp860.o

obj-$(CONFIG_NLS_CODEPAGE_861)	+= nls_cp861.o

obj-$(CONFIG_NLS_CODEPAGE_862)	+= nls_cp862.o

obj-$(CONFIG_NLS_CODEPAGE_863)	+= nls_cp863.o

obj-$(CONFIG_NLS_CODEPAGE_864)	+= nls_cp864.o

obj-$(CONFIG_NLS_CODEPAGE_865)	+= nls_cp865.o

obj-$(CONFIG_NLS_CODEPAGE_866)	+= nls_cp866.o

obj-$(CONFIG_NLS_CODEPAGE_869)	+= nls_cp869.o

obj-$(CONFIG_NLS_CODEPAGE_874)	+= nls_cp874.o

obj-$(CONFIG_NLS_ISO8859_1)	+= nls_iso8859-1.o

obj-$(CONFIG_NLS_ISO8859_3)	+= nls_iso8859-3.o

obj-$(CONFIG_NLS_ISO8859_5)	+= nls_iso8859-5.o

obj-$(CONFIG_NLS_ISO8859_7)	+= nls_iso8859-7.o

obj-$(CONFIG_NLS_ISO8859_8)	+= nls_cp1255.o

obj-$(CONFIG_NLS_ISO8859_13)	+= nls_iso8859-13.o

obj-$(CONFIG_NLS_ISO8859_15)	+= nls_iso8859-15.o

obj-$(CONFIG_NLS_KOI8_U)	+= nls_koi8-u.o nls_koi8-ru.o

obj-$(CONFIG_NLS_UTF8)		+= nls_utf8.o

obj-$(CONFIG_NLS_MAC_CELTIC)    += mac-celtic.o

obj-$(CONFIG_NLS_MAC_CENTEURO)  += mac-centeuro.o

obj-$(CONFIG_NLS_MAC_CROATIAN)  += mac-croatian.o

obj-$(CONFIG_NLS_MAC_CYRILLIC)  += mac-cyrillic.o

obj-$(CONFIG_NLS_MAC_GAELIC)    += mac-gaelic.o

obj-$(CONFIG_NLS_MAC_ICELAND)   += mac-iceland.o

obj-$(CONFIG_NLS_MAC_ROMAN)     += mac-roman.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_FSNOTIFY)		+= fsnotify.o notification.o group.o mark.o \

				   fdinfo.o

obj-y			+= fanotify/

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

ccflags-y := -I$(src)

obj-$(CONFIG_GFS2_FS) += gfs2.o

	glops.o log.o lops.o main.o meta_io.o \





# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the ntfs3 filesystem support.





# to check robot warnings

	$(call cc-option,-Wunused-but-set-variable,-Wunused-const-variable) \



obj-$(CONFIG_NTFS3_FS) += ntfs3.o

		attrlist.o \

		bitfunc.o \

		fsntfs.o \

		frecord.o \

		lznt.o \

		namei.o \

		upcase.o \

		xattr.o

ntfs3-$(CONFIG_NTFS3_LZX_XPRESS) += $(addprefix lib/,\

		decompress_common.o \

		)
# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the ORANGEFS filesystem.

#



orangefs-objs := acl.o file.o orangefs-cache.o orangefs-utils.o xattr.o \

		 dcache.o inode.o orangefs-sysfs.o orangefs-mod.o super.o \

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Linux filesystem routines that are shared by client and server.

#

obj-$(CONFIG_SMBFS_COMMON) += cifs_md4.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the linux lock manager stuff

#

obj-$(CONFIG_LOCKD) += lockd.o

lockd-objs-y := clntlock.o clntproc.o clntxdr.o host.o svc.o svclock.o \

	        svcshare.o svcproc.o svcsubs.o mon.o xdr.o

lockd-objs-$(CONFIG_LOCKD_V4) += clnt4xdr.o xdr4.o svc4proc.o

lockd-objs		      := $(lockd-objs-y)

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux qnx4-filesystem routines.

#



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux fat filesystem support.





obj-$(CONFIG_FAT_FS) += fat.o

obj-$(CONFIG_VFAT_FS) += vfat.o

obj-$(CONFIG_MSDOS_FS) += msdos.o

vfat-y := namei_vfat.o



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux isofs filesystem routines.

#



isofs-objs-y 			:= namei.o inode.o dir.o util.o rock.o export.o

isofs-objs-$(CONFIG_JOLIET)	+= joliet.o

isofs-objs-$(CONFIG_ZISOFS)	+= compress.o

isofs-objs			:= $(isofs-objs-y)

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Linux filesystem routines that are shared by client and server.

#

obj-$(CONFIG_NFS_ACL_SUPPORT) += nfs_acl.o



obj-$(CONFIG_GRACE_PERIOD) += grace.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux hfs filesystem routines.





obj-$(CONFIG_HFS_FS) += hfs.o

	    catalog.o dir.o extent.o inode.o attr.o mdb.o \



 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the configfs virtual filesystem

#



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Linux CIFS/SMB2/SMB3 VFS client



ccflags-y += -I$(src)		# needed for trace events





$(obj)/asn1.o: $(obj)/cifs_spnego_negtokeninit.asn1.h





cifs-$(CONFIG_CIFS_UPCALL) += cifs_spnego.o

cifs-$(CONFIG_CIFS_DFS_UPCALL) += cifs_dfs_ref.o dfs_cache.o

cifs-$(CONFIG_CIFS_SWN_UPCALL) += netlink.o cifs_swn.o

cifs-$(CONFIG_CIFS_FSCACHE) += fscache.o cache.o



 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux affs filesystem routines.

#

ccflags-y := -DDEBUG=1



obj-$(CONFIG_AFFS_FS) += affs.o

# SPDX-License-Identifier: GPL-2.0

netfs-y := read_helper.o stats.o

obj-$(CONFIG_NETFS_SUPPORT) := netfs.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux nfs filesystem routines.

#



CFLAGS_nfstrace.o += -I$(src)

nfs-y 			:= client.o dir.o file.o getroot.o inode.o super.o \

nfs-$(CONFIG_SYSCTL)	+= sysctl.o



obj-$(CONFIG_NFS_V2) += nfsv2.o

nfsv2-y := nfs2super.o proc.o nfs2xdr.o

nfsv3-y := nfs3super.o nfs3client.o nfs3proc.o nfs3xdr.o

nfsv3-$(CONFIG_NFS_V3_ACL) += nfs3acl.o

CFLAGS_nfs4trace.o += -I$(src)

nfsv4-y := nfs4proc.o nfs4xdr.o nfs4state.o nfs4renewd.o nfs4super.o nfs4file.o \

	  delegation.o nfs4idmap.o callback.o callback_xdr.o callback_proc.o \

	  nfs4namespace.o nfs4getroot.o nfs4client.o nfs4session.o \

nfsv4-$(CONFIG_SYSCTL)	+= nfs4sysctl.o

nfsv4-$(CONFIG_NFS_V4_2)	+= nfs42proc.o nfs42xattr.o

obj-$(CONFIG_PNFS_BLOCK) += blocklayout/

obj-$(CONFIG_PNFS_FLEXFILE_LAYOUT) += flexfilelayout/

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the pNFS Flexfile Layout Driver kernel module

#

nfs_layout_flexfiles-y := flexfilelayout.o flexfilelayoutdev.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the pNFS Files Layout Driver kernel module



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the pNFS block layout driver kernel module





blocklayoutdriver-y += blocklayout.o dev.o extent_tree.o rpc_pipefs.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux proc filesystem routines.





obj-y   += proc.o

CFLAGS_task_mmu.o	+= $(call cc-option,-Wno-override-init,)

proc-$(CONFIG_MMU)	:= task_mmu.o

		fd.o

proc-$(CONFIG_TTY)      += proc_tty.o

proc-y	+= cmdline.o

proc-y	+= interrupts.o

proc-y	+= loadavg.o

proc-y	+= meminfo.o

proc-y	+= uptime.o

proc-y	+= softirqs.o

proc-y	+= self.o

proc-y	+= thread_self.o

proc-$(CONFIG_PROC_SYSCTL)	+= proc_sysctl.o

proc-$(CONFIG_NET)		+= proc_net.o

proc-$(CONFIG_PROC_VMCORE)	+= vmcore.o

proc-$(CONFIG_PRINTK)	+= kmsg.o

proc-$(CONFIG_BOOT_CONFIG)	+= bootconfig.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux adfs filesystem routines.

#



adfs-objs := dir.o dir_f.o dir_fplus.o file.o inode.o map.o super.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the kernfs pseudo filesystem





 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_OMFS_FS) += omfs.o

# SPDX-License-Identifier: GPL-2.0

ccflags-y := -I$(src)

obj-$(CONFIG_OCFS2_FS) += 	\

	ocfs2_stackglue.o

obj-$(CONFIG_OCFS2_FS_USERSPACE_CLUSTER) += ocfs2_stack_user.o

	alloc.o 		\

	blockcheck.o		\

	buffer_head_io.o	\

	dcache.o 		\

	dir.o 			\

	file.o 			\

	inode.o 		\

	journal.o 		\

	localalloc.o 		\

	mmap.o 			\

	refcounttree.o		\

	move_extents.o		\

	super.o 		\

	sysfile.o 		\

	quota_global.o		\

	acl.o	\



ocfs2_stackglue-objs := stackglue.o

ocfs2_stack_o2cb-objs := stack_o2cb.o

ocfs2_stack_user-objs := stack_user.o

obj-$(CONFIG_OCFS2_FS) += dlmfs/

# cluster/ is always needed when OCFS2_FS for masklog support

 SPDX-License-Identifier: GPL-2.0-only



ocfs2_dlmfs-objs := userdlm.o dlmfs.o

 SPDX-License-Identifier: GPL-2.0-only



ocfs2_nodemanager-objs := heartbeat.o masklog.o sys.o nodemanager.o \

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_OCFS2_FS_O2CB) += ocfs2_dlm.o

ocfs2_dlm-objs := dlmdomain.o dlmdebug.o dlmthread.o dlmrecovery.o \

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux hpfs filesystem routines.

#



	     inode.o map.o name.o namei.o super.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_9P_FS) := 9p.o

9p-objs := \

	vfs_inode.o \

	vfs_inode_dotl.o \

	vfs_addr.o \

	vfs_file.o \

	xattr.o

9p-$(CONFIG_9P_FSCACHE) += cache.o

9p-$(CONFIG_9P_FS_POSIX_ACL) += acl.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for BFS filesystem.

#



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux reiser-filesystem routines.





obj-$(CONFIG_REISERFS_FS) += reiserfs.o

reiserfs-objs := bitmap.o do_balan.o namei.o inode.o file.o dir.o fix_node.o \

		 hashes.o tail_conversion.o journal.o resize.o \



ifeq ($(CONFIG_REISERFS_PROC_INFO),y)

reiserfs-objs += procfs.o

endif

ifeq ($(CONFIG_REISERFS_FS_XATTR),y)

reiserfs-objs += xattr_user.o xattr_trusted.o

endif



reiserfs-objs += xattr_acl.o

endif

	etags *.c

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for caching in a mounted filesystem





cachefiles-y := \

	bind.o \

	daemon.o \

	key.o \

	main.o \

	xattr.o

obj-$(CONFIG_CACHEFILES) := cachefiles.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_QUOTA)		+= dquot.o

obj-$(CONFIG_QFMT_V2)		+= quota_v2.o

obj-$(CONFIG_QUOTA_NETLINK_INTERFACE)	+= netlink.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux ufs filesystem routines.





obj-$(CONFIG_UFS_FS) += ufs.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the linux cramfs routines.







cramfs-objs := inode.o uncompress.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux ramfs routines.

#

obj-y += ramfs.o

file-mmu-y := file-nommu.o

 SPDX-License-Identifier: GPL-2.0-or-later



# Copyright (c) 2019 Oracle.

 All Rights Reserved.





 needed for trace events





iomap-y				+= trace.o \

				   direct-io.o \

				   fiemap.o \

				   iter.o \

				   seek.o

iomap-$(CONFIG_SWAP)		+= swapfile.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux ramfs routines.

#

obj-$(CONFIG_HUGETLBFS) += hugetlbfs.o

# SPDX-License-Identifier: GPL-2.0

# Subset of W=1 warnings

subdir-ccflags-y += -Wmissing-declarations

subdir-ccflags-y += -Wmissing-prototypes

subdir-ccflags-y += -Wmissing-include-dirs

	$(call cc-option, -Wunused-but-set-variable)		\

	$(call cc-option, -Wpacked-not-aligned)			\

	$(call cc-option, -Wstringop-truncation)

# The following turn off the warnings enabled by -Wextra

subdir-ccflags-y += -Wno-missing-field-initializers

subdir-ccflags-y += -Wno-sign-compare



obj-$(CONFIG_BTRFS_FS) := btrfs.o

btrfs-y += super.o ctree.o extent-tree.o print-tree.o root-tree.o dir-item.o \

	   transaction.o inode.o file.o tree-defrag.o \

	   export.o tree-log.o free-space-cache.o zlib.o lzo.o zstd.o \

	   reada.o backref.o ulist.o qgroup.o send.o dev-replace.o raid56.o \

	   uuid-tree.o props.o free-space-tree.o tree-checker.o space-info.o \

	   subpage.o tree-mod-log.o

btrfs-$(CONFIG_BLK_DEV_ZONED) += zoned.o

btrfs-$(CONFIG_FS_VERITY) += verity.o

	tests/extent-buffer-tests.o tests/btrfs-tests.o \

	tests/extent-io-tests.o tests/inode-tests.o tests/qgroup-tests.o \

	tests/free-space-tree-tests.o tests/extent-map-tests.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the overlay filesystem.

#



overlay-objs := super.o namei.o util.o inode.o file.o dir.o readdir.o \

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_NILFS2_FS) += nilfs2.o

nilfs2-y := inode.o file.o dir.o super.o namei.o page.o mdt.o \

	ifile.o alloc.o gcinode.o ioctl.o sysfs.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux nfs server

#

 needed for trace events





# this one should be compiled first, as the tracing macros can easily blow up

nfsd-y			+= trace.o

nfsd-y 			+= nfssvc.o nfsctl.o nfsproc.o nfsfh.o vfs.o \

			   export.o auth.o lockd.o nfscache.o nfsxdr.o \

			   stats.o filecache.o

nfsd-$(CONFIG_NFSD_V2_ACL) += nfs2acl.o

nfsd-$(CONFIG_NFSD_V4)	+= nfs4proc.o nfs4xdr.o nfs4state.o nfs4idmap.o \

nfsd-$(CONFIG_NFSD_SCSILAYOUT) += blocklayout.o blocklayoutxdr.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_EROFS_FS) += erofs.o

erofs-$(CONFIG_EROFS_FS_ZIP_LZMA) += decompressor_lzma.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux ext2-filesystem routines.





obj-$(CONFIG_EXT2_FS) += ext2.o

ext2-y := balloc.o dir.o file.o ialloc.o inode.o \



ext2-$(CONFIG_EXT2_FS_XATTR)	 += xattr.o xattr_user.o xattr_trusted.o

ext2-$(CONFIG_EXT2_FS_POSIX_ACL) += acl.o

# SPDX-License-Identifier: GPL-2.0

#





obj-$(CONFIG_HFSPLUS_FS) += hfsplus.o

		attributes.o xattr.o xattr_user.o xattr_security.o xattr_trusted.o

 SPDX-License-Identifier: GPL-2.0-or-later



# Makefile for the linux exFAT filesystem support.

#

obj-$(CONFIG_EXFAT_FS) += exfat.o

exfat-y	:= inode.o namei.o dir.o super.o fatent.o cache.o nls.o misc.o \

	   file.o balloc.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the sysfs virtual filesystem





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux Coda filesystem routines.

#





 If you want debugging output, please uncomment the following line.



# ccflags-y := -DDEBUG -DDEBUG_SMB_MALLOC=1



 Copyright (C) 2000 Jeff Dike (jdike@karaya.com)

# Licensed under the GPL

#

hostfs-objs := hostfs_kern.o hostfs_user.o

obj-y :=



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the linux squashfs routines.

#

obj-$(CONFIG_SQUASHFS) += squashfs.o

squashfs-y += block.o cache.o dir.o export.o file.o fragment.o id.o inode.o

squashfs-$(CONFIG_SQUASHFS_FILE_CACHE) += file_cache.o

squashfs-$(CONFIG_SQUASHFS_FILE_DIRECT) += file_direct.o page_actor.o

squashfs-$(CONFIG_SQUASHFS_DECOMP_MULTI) += decompressor_multi.o

squashfs-$(CONFIG_SQUASHFS_LZ4) += lz4_wrapper.o

squashfs-$(CONFIG_SQUASHFS_XZ) += xz_wrapper.o

squashfs-$(CONFIG_SQUASHFS_ZSTD) += zstd_wrapper.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the linux efs-filesystem routines.





obj-$(CONFIG_EFS_FS) += efs.o

efs-objs := super.o inode.o namei.o dir.o file.o symlink.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux Journalling Flash File System v2 (JFFS2)

#

#



jffs2-y	:= compr.o dir.o file.o ioctl.o nodelist.o malloc.o

jffs2-y	+= super.o debug.o

jffs2-$(CONFIG_JFFS2_FS_WRITEBUFFER)	+= wbuf.o

jffs2-$(CONFIG_JFFS2_FS_XATTR)		+= xattr.o xattr_trusted.o xattr_user.o

jffs2-$(CONFIG_JFFS2_FS_SECURITY)	+= security.o

jffs2-$(CONFIG_JFFS2_FS_POSIX_ACL)	+= acl.o

jffs2-$(CONFIG_JFFS2_RTIME)	+= compr_rtime.o

jffs2-$(CONFIG_JFFS2_LZO)	+= compr_lzo.o

# SPDX-License-Identifier: GPL-2.0

			   init.o \

			   measure.o \

			   verify.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_DLM) +=		dlm.o

				config.o \

				dir.o \

				main.o \

				memory.o \

				lowcomms.o \

				plock.o \

				recoverd.o \

				user.o \

				util.o 

dlm-$(CONFIG_DLM_DEBUG) +=	debug_fs.o

# SPDX-License-Identifier: MIT



 SPDX-License-Identifier: GPL-2.0-or-later



 Makefile for Linux SMB3 kernel server





		misc.o oplock.o connection.o ksmbd_work.o crypto_ctx.o \

		mgmt/ksmbd_ida.o mgmt/user_config.o mgmt/share_config.o \

		transport_tcp.o transport_ipc.o smbacl.o smb2pdu.o \

		smb2ops.o smb2misc.o ksmbd_spnego_negtokeninit.asn1.o \

		ksmbd_spnego_negtokentarg.asn1.o asn1.o

$(obj)/asn1.o: $(obj)/ksmbd_spnego_negtokeninit.asn1.h $(obj)/ksmbd_spnego_negtokentarg.asn1.h

$(obj)/ksmbd_spnego_negtokeninit.asn1.o: $(obj)/ksmbd_spnego_negtokeninit.asn1.c $(obj)/ksmbd_spnego_negtokeninit.asn1.h



 SPDX-License-Identifier: GPL-2.0-only





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the efivarfs filesystem

#

obj-$(CONFIG_EFIVAR_FS)		+= efivarfs.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux minix filesystem routines.





obj-$(CONFIG_MINIX_FS) += minix.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the linux journaling routines.







# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the linux RomFS filesystem routines.

#





ifneq ($(CONFIG_MMU),y)



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux /dev/pts virtual filesystem.







 SPDX-License-Identifier: GPL-2.0-only



	      fname.o \

	      hkdf.o \

	      keyring.o \

	      keysetup.o \



fscrypto-$(CONFIG_BLOCK) += bio.o

fscrypto-$(CONFIG_FS_ENCRYPTION_INLINE_CRYPT) += inline_crypt.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_F2FS_FS) += f2fs.o

f2fs-y		+= shrinker.o extent_cache.o sysfs.o

f2fs-$(CONFIG_FS_VERITY) += verity.o

f2fs-$(CONFIG_F2FS_IOSTAT) += iostat.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Red Hat Linux AFS client.







kafs-y := \

	$(afs-cache-y) \

	cmservice.o \

	dir_silly.o \

	flock.o \

	fsclient.o \

	fs_operation.o \

	fs_probe.o \

	mntpt.o \

	rotate.o \

	server_list.o \

	vl_list.o \

	vl_probe.o \

	write.o \

	yfsclient.o

kafs-$(CONFIG_PROC_FS) += proc.o

obj-$(CONFIG_AFS_FS)  := kafs.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_UBIFS_FS) += ubifs.o

ubifs-y += shrinker.o journal.o file.o dir.o super.o sb.o io.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel signature checking certificates.





obj-$(CONFIG_SYSTEM_TRUSTED_KEYRING) += system_keyring.o system_certificates.o common.o

obj-$(CONFIG_SYSTEM_BLACKLIST_KEYRING) += blacklist_hashes.o

obj-$(CONFIG_SYSTEM_BLACKLIST_KEYRING) += blacklist_nohashes.o

endif



$(eval $(call config_filename,SYSTEM_TRUSTED_KEYS))

# GCC doesn't include .incbin files in -MD generated dependencies (PR#66871)



 Cope with signing_key.x509 existing in $(srctree) not $(objtree)

AFLAGS_system_certificates.o := -I$(srctree)



$(obj)/x509_certificate_list: scripts/extract-cert $(SYSTEM_TRUSTED_KEYS_SRCPREFIX)$(SYSTEM_TRUSTED_KEYS_FILENAME) FORCE

	$(call if_changed,extract_certs,$(SYSTEM_TRUSTED_KEYS_SRCPREFIX)$(CONFIG_SYSTEM_TRUSTED_KEYS))

endif # CONFIG_SYSTEM_TRUSTED_KEYRING

clean-files := x509_certificate_list .x509.list x509_revocation_list



ifeq ($(CONFIG_MODULES),y)

	SIGN_KEY = y

endif

endif

ifdef SIGN_KEY

###############################################################################

#

# If module signing is requested, say by allyesconfig, but a key has not been

 supplied, then one will need to be generated to make sure the build does not

# fail and that the kernel may be used afterwards.

#

###############################################################################

ifndef CONFIG_MODULE_SIG_HASH



redirect_openssl	= 2>&1

quiet_redirect_openssl	= 2>&1

silent_redirect_openssl = 2>/dev/null

openssl_available       = $(shell openssl help 2>/dev/null && echo yes)

 We do it this way rather than having a boolean option for enabling an

 external private key, because 'make randconfig' might enable such a

# boolean option and we unfortunately can't make it depend on !RANDCONFIG.

ifeq ($(CONFIG_MODULE_SIG_KEY),"certs/signing_key.pem")

X509TEXT=$(shell openssl x509 -in "certs/signing_key.pem" -text 2>/dev/null)

endif

# Support user changing key type

$(if $(findstring id-ecPublicKey,$(X509TEXT)),,$(shell rm -f "certs/signing_key.pem"))

endif

 CONFIG_MODULE_SIG_KEY_TYPE_ECDSA



endif # CONFIG_MODULE_SIG_KEY_TYPE_RSA

$(obj)/signing_key.pem: $(obj)/x509.genkey

"

 Now generating an X.509 key pair to be used for signing modules."

	@$(kecho) "###"

	@$(kecho) "### If this takes a long time, you might wish to run rngd in the"

 background to keep the supply of entropy topped up.  It"

	@$(kecho) "### needs to be run as root, and uses a hardware random"

 number generator if one is available."

	@$(kecho) "###"

	$(Q)openssl req -new -nodes -utf8 -$(CONFIG_MODULE_SIG_HASH) -days 36500 \

		-batch -x509 -config $(obj)/x509.genkey \

		-keyout $(obj)/signing_key.pem \

	@$(kecho) "###"

 Key pair generated."

	@$(kecho) "###"

	@echo >>$@ "string_mask = utf8only"

	@echo >>$@ "[ req_distinguished_name ]"

O = Unspecified company"

	@echo >>$@ "CN = Build time autogenerated kernel key"

emailAddress = unspecified.user@unspecified.company"

	@echo >>$@ "[ myexts ]"

	@echo >>$@ "authorityKeyIdentifier=keyid"

endif # CONFIG_MODULE_SIG_KEY

$(eval $(call config_filename,MODULE_SIG_KEY))

# If CONFIG_MODULE_SIG_KEY isn't a PKCS#11 URI, depend on it

ifeq ($(patsubst pkcs11:%,%,$(firstword $(MODULE_SIG_KEY_FILENAME))),$(firstword $(MODULE_SIG_KEY_FILENAME)))

X509_DEP := $(MODULE_SIG_KEY_SRCPREFIX)$(MODULE_SIG_KEY_FILENAME)

endif

 GCC PR


targets += signing_key.x509

$(obj)/signing_key.x509: scripts/extract-cert $(X509_DEP) FORCE

	$(call if_changed,extract_certs,$(MODULE_SIG_KEY_SRCPREFIX)$(CONFIG_MODULE_SIG_KEY))

endif # CONFIG_MODULE_SIG





$(obj)/revocation_certificates.o: $(obj)/x509_revocation_list



targets += x509_revocation_list

$(obj)/x509_revocation_list: scripts/extract-cert $(SYSTEM_REVOCATION_KEYS_SRCPREFIX)$(SYSTEM_REVOCATION_KEYS_FILENAME) FORCE

	$(call if_changed,extract_certs,$(SYSTEM_REVOCATION_KEYS_SRCPREFIX)$(CONFIG_SYSTEM_REVOCATION_KEYS))

endif

# SPDX-License-Identifier: GPL-2.0

 Makefile for the Linux sound card driver





obj-$(CONFIG_SND) += core/ i2c/ drivers/ isa/ pci/ ppc/ arm/ sh/ synth/ usb/ \

	firewire/ sparc/ spi/ parisc/ pcmcia/ mips/ soc/ atmel/ hda/ x86/ xen/ \



# This one must be compilable even if sound is configured out





soundcore-objs  := sound_core.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the DMA sound driver





obj-$(CONFIG_DMASOUND_PAULA)	+= dmasound_core.o dmasound_paula.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2004 by Jaroslav Kysela <perex@perex.cz>

#

snd-pdaudiocf-objs := pdaudiocf.o pdaudiocf_core.o pdaudiocf_irq.o pdaudiocf_pcm.o

obj-$(CONFIG_SND_PDAUDIOCF) += snd-pdaudiocf.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA





snd-aica-objs := aica.o

snd-sh_dac_audio-objs := sh_dac_audio.o

# Toplevel Module Dependency

obj-$(CONFIG_SND_SH_DAC_AUDIO) += snd-sh_dac_audio.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_POWERMAC)	+= snd-powermac.o

obj-$(CONFIG_SND_PS3)		+= snd_ps3.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

#

			clock.o \

			endpoint.o \

			format.o \

			helper.o \

			implicit.o \

			mixer_scarlett_gen2.o \

			pcm.o \



snd-usb-audio-$(CONFIG_SND_USB_AUDIO_USE_MEDIA_CONTROLLER) += media.o

snd-usbmidi-lib-objs := midi.o

# Toplevel Module Dependency



obj-$(CONFIG_SND_USB_USX2Y) += snd-usbmidi-lib.o

obj-$(CONFIG_SND_USB_US122L) += snd-usbmidi-lib.o

obj-$(CONFIG_SND) += misc/ usx2y/ caiaq/ 6fire/ hiface/ bcd2000/

obj-$(CONFIG_SND_USB_LINE6)	+= line6/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SND_USB_6FIRE) += snd-usb-6fire.o

# SPDX-License-Identifier: GPL-2.0

		driver.o	\

		midi.o		\

		midibuf.o	\

		playback.o

snd-usb-pod-y := pod.o

snd-usb-toneport-y := toneport.o



obj-$(CONFIG_SND_USB_POD)	+= snd-usb-pod.o

obj-$(CONFIG_SND_USB_TONEPORT)	+= snd-usb-toneport.o

 SPDX-License-Identifier: GPL-2.0-only

snd-usb-caiaq-y := device.o audio.o midi.o control.o



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SND_USB_UA101) += snd-ua101.o

# SPDX-License-Identifier: GPL-2.0

snd-usb-usx2y-objs := usbusx2y.o usX2Yhwdep.o usx2yhwdeppcm.o

snd-usb-us122l-objs := us122l.o

obj-$(CONFIG_SND_USB_USX2Y) += snd-usb-usx2y.o

 SPDX-License-Identifier: GPL-2.0-only

snd-bcd2000-y := bcd2000.o

obj-$(CONFIG_SND_BCD2000) += snd-bcd2000.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SND_USB_HIFACE) += snd-usb-hiface.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2002 by David S. Miller <davem@redhat.com>





snd-sun-amd7930-objs := amd7930.o

snd-sun-cs4231-objs := cs4231.o

snd-sun-dbri-objs := dbri.o

obj-$(CONFIG_SND_SUN_AMD7930) += snd-sun-amd7930.o

obj-$(CONFIG_SND_SUN_DBRI) += snd-sun-dbri.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





snd-dummy-objs := dummy.o

snd-aloop-objs := aloop.o

snd-mtpav-objs := mtpav.o

snd-mts64-objs := mts64.o

snd-portman2x4-objs := portman2x4.o

snd-serial-u16550-objs := serial-u16550.o

snd-virmidi-objs := virmidi.o

# Toplevel Module Dependency

obj-$(CONFIG_SND_ALOOP) += snd-aloop.o

obj-$(CONFIG_SND_SERIAL_U16550) += snd-serial-u16550.o

obj-$(CONFIG_SND_MTS64) += snd-mts64.o



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





ifneq ($(CONFIG_SND_SEQUENCER_OSS),)



obj-$(CONFIG_SND_OPL4_LIB) += snd-opl3-lib.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>







obj-$(CONFIG_SND_OPL4_LIB_SEQ) += snd-opl4-synth.o

 SPDX-License-Identifier: GPL-2.0-only

snd-pcsp-objs := pcsp.o pcsp_lib.o pcsp_mixer.o pcsp_input.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#





 Toplevel Module Dependency

obj-$(CONFIG_SND_MPU401) += snd-mpu401.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

# Copyright (c) 1999,2001 by Jaroslav Kysela <perex@perex.cz>

#

snd-y     := sound.o init.o memory.o control.o misc.o device.o

ifneq ($(CONFIG_M68K),y)

snd-$(CONFIG_ISA_DMA_API) += isadma.o

endif

snd-$(CONFIG_SND_VMASTER) += vmaster.o



snd-pcm-$(CONFIG_SND_PCM_TIMER) += pcm_timer.o

snd-pcm-$(CONFIG_SND_PCM_ELD) += pcm_drm_eld.o



 for trace-points

CFLAGS_pcm_lib.o := -I$(src)

CFLAGS_pcm_native.o := -I$(src)



snd-rawmidi-objs  := rawmidi.o

snd-hrtimer-objs  := hrtimer.o

snd-rtctimer-objs := rtctimer.o



snd-compress-objs := compress_offload.o

obj-$(CONFIG_SND) 		+= snd.o

obj-$(CONFIG_SND_HRTIMER)	+= snd-hrtimer.o

obj-$(CONFIG_SND_PCM)		+= snd-pcm.o

obj-$(CONFIG_SND_SEQ_DEVICE)	+= snd-seq-device.o



obj-$(CONFIG_SND_OSSEMUL)	+= oss/

obj-$(CONFIG_SND_SEQUENCER)	+= seq/

obj-$(CONFIG_SND_COMPRESS_OFFLOAD)	+= snd-compress.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>





snd-mixer-oss-objs := mixer_oss.o

snd-pcm-oss-y := pcm_oss.o

snd-pcm-oss-$(CONFIG_SND_PCM_OSS_PLUGINS) += pcm_plugin.o \



obj-$(CONFIG_SND_PCM_OSS) += snd-pcm-oss.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>





snd-seq-objs := seq.o seq_lock.o seq_clientmgr.o seq_memory.o seq_queue.o \

                seq_system.o seq_ports.o

snd-seq-$(CONFIG_SND_PROC_FS) += seq_info.o

snd-seq-midi-objs := seq_midi.o

snd-seq-midi-emul-objs := seq_midi_emul.o

snd-seq-midi-event-objs := seq_midi_event.o

snd-seq-dummy-objs := seq_dummy.o

snd-seq-virmidi-objs := seq_virmidi.o

obj-$(CONFIG_SND_SEQUENCER) += snd-seq.o

obj-$(CONFIG_SND_SEQUENCER_OSS) += oss/

obj-$(CONFIG_SND_SEQ_DUMMY) += snd-seq-dummy.o

obj-$(CONFIG_SND_SEQ_MIDI_EMUL) += snd-seq-midi-emul.o

obj-$(CONFIG_SND_SEQ_VIRMIDI) += snd-seq-virmidi.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>

#

		     seq_oss_midi.o seq_oss_readq.o seq_oss_writeq.o

obj-$(CONFIG_SND_SEQUENCER_OSS) += snd-seq-oss.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SND_AOA) += core/

obj-$(CONFIG_SND_AOA_SOUNDBUS) += soundbus/

obj-$(CONFIG_SND_AOA) += fabrics/

# SPDX-License-Identifier: GPL-2.0

snd-aoa-codec-onyx-objs := onyx.o

snd-aoa-codec-tas-objs := tas.o

snd-aoa-codec-toonie-objs := toonie.o

obj-$(CONFIG_SND_AOA_ONYX) += snd-aoa-codec-onyx.o

obj-$(CONFIG_SND_AOA_TOONIE) += snd-aoa-codec-toonie.o

# SPDX-License-Identifier: GPL-2.0

snd-aoa-objs := core.o \

		gpio-pmf.o \

 SPDX-License-Identifier: GPL-2.0-only

snd-aoa-fabric-layout-objs += layout.o

obj-$(CONFIG_SND_AOA_FABRIC_LAYOUT) += snd-aoa-fabric-layout.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SND_AOA_SOUNDBUS) += snd-aoa-soundbus.o

snd-aoa-soundbus-objs := core.o sysfs.o

obj-$(CONFIG_SND_AOA_SOUNDBUS_I2S) += i2sbus/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SND_AOA_SOUNDBUS_I2S) += snd-aoa-i2sbus.o

snd-aoa-i2sbus-objs := core.o pcm.o control.o

 SPDX-License-Identifier: GPL-2.0 OR MIT



snd_xen_front-objs := xen_snd_front.o \

		      xen_snd_front_cfg.o \

		      xen_snd_front_evtchnl.o \



obj-$(CONFIG_SND_XEN_FRONTEND) += snd_xen_front.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





snd-i2c-objs := i2c.o

snd-cs8427-objs := cs8427.o

snd-tea6330t-objs := tea6330t.o



 Toplevel Module Dependency

obj-$(CONFIG_SND_ICE1724) += snd-i2c.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2003 by Jaroslav Kysela <perex@perex.cz>





snd-ak4114-objs := ak4114.o

snd-ak4117-objs := ak4117.o

snd-ak4113-objs := ak4113.o

snd-ak4xxx-adda-objs := ak4xxx-adda.o

snd-pt2258-objs := pt2258.o

 Module Dependency

obj-$(CONFIG_SND_ICE1712) += snd-ak4xxx-adda.o

obj-$(CONFIG_SND_ICE1724) += snd-ak4114.o snd-ak4113.o snd-ak4xxx-adda.o snd-pt2258.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA







 Toplevel Module Dependency

obj-$(CONFIG_SND_SGI_O2) += snd-sgi-o2.o

obj-$(CONFIG_SND_N64) += snd-n64.o

 SPDX-License-Identifier: GPL-2.0-only

snd-atmel-ac97c-objs		:= ac97c.o

obj-$(CONFIG_SND_ATMEL_AC97C)	+= snd-atmel-ac97c.o

 SPDX-License-Identifier: GPL-2.0+





	virtio_card.o \

	virtio_chmap.o \

	virtio_ctl_msg.o \



 SPDX-License-Identifier: GPL-2.0-only

snd-hdmi-lpe-audio-objs += \

	intel_hdmi_audio.o

obj-$(CONFIG_HDMI_LPE_AUDIO) += snd-hdmi-lpe-audio.o

 SPDX-License-Identifier: GPL-2.0-only



 make for AC97 bus drivers







# SPDX-License-Identifier: GPL-2.0

snd-hda-core-objs := hda_bus_type.o hdac_bus.o hdac_device.o hdac_sysfs.o \

	hdac_regmap.o hdac_controller.o hdac_stream.o array.o hdmi_chmap.o

snd-hda-core-objs += trace.o



# for sync with i915 gfx driver

snd-hda-core-$(CONFIG_SND_HDA_I915) += hdac_i915.o

obj-$(CONFIG_SND_HDA_CORE) += snd-hda-core.o

extended hda

obj-$(CONFIG_SND_HDA_EXT_CORE) += ext/

obj-$(CONFIG_SND_INTEL_DSP_CONFIG) += snd-intel-dspcfg.o

obj-$(CONFIG_SND_INTEL_SOUNDWIRE_ACPI) += snd-intel-sdw-acpi.o

 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA





snd-harmony-objs := harmony.o

# Toplevel Module Dependency

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

#





snd-pxa2xx-ac97-objs		:= pxa2xx-ac97.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





snd-adlib-objs := adlib.o

snd-als100-objs := als100.o

snd-azt2320-objs := azt2320.o

snd-cmi8328-objs := cmi8328.o

snd-cmi8330-objs := cmi8330.o

snd-es18xx-objs := es18xx.o

snd-opl3sa2-objs := opl3sa2.o

snd-sc6000-objs := sc6000.o

snd-sscape-objs := sscape.o

# Toplevel Module Dependency

obj-$(CONFIG_SND_ALS100) += snd-als100.o

obj-$(CONFIG_SND_CMI8328) += snd-cmi8328.o

obj-$(CONFIG_SND_ES18XX) += snd-es18xx.o

obj-$(CONFIG_SND_SC6000) += snd-sc6000.o



obj-$(CONFIG_SND) += ad1816a/ ad1848/ cs423x/ es1688/ galaxy/ gus/ msnd/ opti9xx/ \

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





snd-opti92x-ad1848-objs := opti92x-ad1848.o

snd-opti92x-cs4231-objs := opti92x-cs4231.o

snd-opti93x-objs := opti93x.o

snd-miro-objs := miro.o

# Toplevel Module Dependency

obj-$(CONFIG_SND_OPTI92X_CS4231) += snd-opti92x-cs4231.o

obj-$(CONFIG_SND_MIRO) += snd-miro.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_GUSEXTREME) += snd-es1688-lib.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2008 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_WSS_LIB) += snd-wss-lib.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





snd-sb16-dsp-objs := sb16_main.o

snd-sb16-csp-objs := sb16_csp.o

snd-sb8-objs := sb8.o

snd-sb16-objs := sb16.o

snd-sbawe-objs := sbawe.o emu8000.o



 Toplevel Module Dependency

obj-$(CONFIG_SND_SB_COMMON) += snd-sb-common.o

obj-$(CONFIG_SND_SB8_DSP) += snd-sb8-dsp.o

obj-$(CONFIG_SND_SB16) += snd-sb16.o

obj-$(CONFIG_SND_JAZZ16) += snd-jazz16.o

ifeq ($(CONFIG_SND_SB16_CSP),y)

obj-$(CONFIG_SND_SBAWE_SEQ) += snd-emu8000-synth.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





		    gus_io.o gus_irq.o gus_timer.o \

		    gus_uart.o \

		    gus_reset.o



 Toplevel Module Dependency

obj-$(CONFIG_SND_GUSCLASSIC) += snd-gusclassic.o snd-gus-lib.o

obj-$(CONFIG_SND_GUSEXTREME) += snd-gusextreme.o snd-gus-lib.o

obj-$(CONFIG_SND_INTERWAVE_STB) += snd-interwave-stb.o snd-gus-lib.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#

snd-cs4236-objs := cs4236.o cs4236_lib.o

# Toplevel Module Dependency

obj-$(CONFIG_SND_CS4236) += snd-cs4236.o



# SPDX-License-Identifier: GPL-2.0



 Toplevel Module Dependency



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_AD1816A) += snd-ad1816a.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_WAVEFRONT) += snd-wavefront.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_AD1848) += snd-ad1848.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@suse.cz>





snd-azt1605-objs := azt1605.o

snd-azt2316-objs := azt2316.o

obj-$(CONFIG_SND_AZT1605) += snd-azt1605.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





snd-util-mem-objs := util_mem.o

# Toplevel Module Dependency

obj-$(CONFIG_SND_EMU10K1) += snd-util-mem.o

obj-$(CONFIG_SND_TRIDENT) += snd-util-mem.o

obj-$(CONFIG_SND_SBAWE_SEQ) += snd-util-mem.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





snd-emux-synth-objs := emux.o emux_synth.o emux_seq.o emux_nrpn.o \

		       emux_effect.o emux_hwdep.o soundfont.o

snd-emux-synth-$(CONFIG_SND_PROC_FS) += emux_proc.o

snd-emux-synth-y += emux_oss.o

endif

obj-$(CONFIG_SND_SYNTH_EMUX) += snd-emux-synth.o

# SPDX-License-Identifier: GPL-2.0

 To find a header included by define_trace.h.



snd-firewire-lib-objs := lib.o iso-resources.o packets-buffer.o \



obj-$(CONFIG_SND_ISIGHT) += snd-isight.o

obj-$(CONFIG_SND_FIREWORKS) += fireworks/

obj-$(CONFIG_SND_BEBOB) += bebob/

obj-$(CONFIG_SND_FIREWIRE_TASCAM) += tascam/

# SPDX-License-Identifier: GPL-2.0

CFLAGS_amdtp-motu.o	:= -I$(src)

snd-firewire-motu-objs := motu.o amdtp-motu.o motu-transaction.o motu-stream.o \

			  motu-protocol-v2.o motu-protocol-v3.o \

			  motu-command-dsp-message-parser.o

 SPDX-License-Identifier: GPL-2.0-only

snd-oxfw-objs := oxfw-command.o oxfw-stream.o oxfw-pcm.o oxfw-proc.o \

		 oxfw-midi.o oxfw-hwdep.o oxfw-spkr.o oxfw-scs1x.o oxfw.o

 SPDX-License-Identifier: GPL-2.0-only

snd-firewire-tascam-objs := tascam-proc.o amdtp-tascam.o tascam-stream.o \

			    tascam-pcm.o tascam-hwdep.o tascam-transaction.o \

			    tascam-midi.o tascam.o

# SPDX-License-Identifier: GPL-2.0

		  bebob_pcm.o bebob_hwdep.o bebob_terratec.o \

obj-$(CONFIG_SND_BEBOB) += snd-bebob.o

 SPDX-License-Identifier: GPL-2.0-only

snd-firewire-digi00x-objs := amdtp-dot.o digi00x-stream.o digi00x-proc.o \

			     digi00x-pcm.o digi00x-hwdep.o \

obj-$(CONFIG_SND_FIREWIRE_DIGI00X) += snd-firewire-digi00x.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SND_FIREFACE) += snd-fireface.o

 SPDX-License-Identifier: GPL-2.0-only

		 dice-alesis.o dice-extension.o dice-mytek.o dice-presonus.o \

obj-$(CONFIG_SND_DICE) += snd-dice.o

 SPDX-License-Identifier: GPL-2.0-only

		      fireworks_stream.o fireworks_proc.o fireworks_midi.o \

		      fireworks_pcm.o fireworks_hwdep.o fireworks.o

# SPDX-License-Identifier: GPL-2.0

 Makefile for SPI drivers





# SPDX-License-Identifier: GPL-2.0

snd-soc-core-objs := soc-core.o soc-dapm.o soc-jack.o soc-utils.o soc-dai.o soc-component.o

snd-soc-core-objs += soc-pcm.o soc-devres.o soc-ops.o soc-link.o soc-card.o

snd-soc-core-$(CONFIG_SND_SOC_COMPRESS) += soc-compress.o



# snd-soc-test-objs := soc-topology-test.o



snd-soc-core-objs += soc-generic-dmaengine-pcm.o

endif



ifneq ($(CONFIG_SND_SOC_ACPI),)

snd-soc-acpi-objs := soc-acpi.o

endif

obj-$(CONFIG_SND_SOC_ACPI) += snd-soc-acpi.o

obj-$(CONFIG_SND_SOC)	+= codecs/

obj-$(CONFIG_SND_SOC)	+= generic/

obj-$(CONFIG_SND_SOC)	+= adi/

obj-$(CONFIG_SND_SOC)	+= amd/

obj-$(CONFIG_SND_SOC)	+= atmel/

obj-$(CONFIG_SND_SOC)	+= cirrus/

obj-$(CONFIG_SND_SOC)	+= dwc/

obj-$(CONFIG_SND_SOC)	+= fsl/

obj-$(CONFIG_SND_SOC)	+= hisilicon/

obj-$(CONFIG_SND_SOC)	+= mediatek/

obj-$(CONFIG_SND_SOC)	+= meson/

obj-$(CONFIG_SND_SOC)	+= mxs/

obj-$(CONFIG_SND_SOC)	+= qcom/

obj-$(CONFIG_SND_SOC)	+= sh/

obj-$(CONFIG_SND_SOC)	+= sof/

obj-$(CONFIG_SND_SOC)	+= spear/

obj-$(CONFIG_SND_SOC)	+= ti/

obj-$(CONFIG_SND_SOC)	+= xilinx/

# SPDX-License-Identifier: GPL-2.0

 Platform



obj-$(CONFIG_SND_SOC_LPASS_HDMI) += snd-soc-lpass-hdmi.o

obj-$(CONFIG_SND_SOC_LPASS_IPQ806X) += snd-soc-lpass-ipq806x.o

obj-$(CONFIG_SND_SOC_LPASS_SC7180) += snd-soc-lpass-sc7180.o

 Machine

snd-soc-qcom-common-objs := common.o

obj-$(CONFIG_SND_SOC_STORM) += snd-soc-storm.o

obj-$(CONFIG_SND_SOC_MSM8996) += snd-soc-apq8096.o

obj-$(CONFIG_SND_SOC_SDM845) += snd-soc-sdm845.o

obj-$(CONFIG_SND_SOC_QCOM_COMMON) += snd-soc-qcom-common.o

#DSP lib

obj-$(CONFIG_SND_SOC_QDSP6) += qdsp6/

 SPDX-License-Identifier: GPL-2.0-only

snd-q6dsp-common-objs := q6dsp-common.o q6dsp-lpass-ports.o q6dsp-lpass-clocks.o

snd-q6apm-objs := q6apm.o audioreach.o topology.o

obj-$(CONFIG_SND_SOC_QDSP6_COMMON) += snd-q6dsp-common.o

obj-$(CONFIG_SND_SOC_QDSP6_AFE) += q6afe.o

obj-$(CONFIG_SND_SOC_QDSP6_AFE_CLOCKS) += q6afe-clocks.o

obj-$(CONFIG_SND_SOC_QDSP6_ROUTING) += q6routing.o

obj-$(CONFIG_SND_SOC_QDSP6_ASM_DAI) += q6asm-dai.o

obj-$(CONFIG_SND_SOC_QDSP6_APM) += snd-q6apm.o

obj-$(CONFIG_SND_SOC_QDSP6_PRM) += q6prm.o

# SPDX-License-Identifier: GPL-2.0

snd-soc-simple-card-utils-objs	:= simple-card-utils.o

snd-soc-simple-card-objs	:= simple-card.o

snd-soc-audio-graph-card-objs	:= audio-graph-card.o

snd-soc-audio-graph-card2-objs	:= audio-graph-card2.o

snd-soc-audio-graph-card2-custom-sample-objs := audio-graph-card2-custom-sample.o

snd-soc-test-component-objs	:= test-component.o

obj-$(CONFIG_SND_SIMPLE_CARD_UTILS)	+= snd-soc-simple-card-utils.o

obj-$(CONFIG_SND_SIMPLE_CARD)		+= snd-soc-simple-card.o

obj-$(CONFIG_SND_AUDIO_GRAPH_CARD2)	+= snd-soc-audio-graph-card2.o

obj-$(CONFIG_SND_TEST_COMPONENT)	+= snd-soc-test-component.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_SND_SOC_ADI_AXI_SPDIF) += snd-soc-adi-axi-spdif.o

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



snd-soc-meson-aiu-objs := aiu.o

snd-soc-meson-aiu-objs += aiu-acodec-ctrl.o

snd-soc-meson-aiu-objs += aiu-fifo.o

snd-soc-meson-aiu-objs += aiu-fifo-spdif.o

snd-soc-meson-axg-fifo-objs := axg-fifo.o

snd-soc-meson-axg-frddr-objs := axg-frddr.o

snd-soc-meson-axg-toddr-objs := axg-toddr.o

snd-soc-meson-axg-tdm-formatter-objs := axg-tdm-formatter.o

snd-soc-meson-axg-tdm-interface-objs := axg-tdm-interface.o

snd-soc-meson-axg-tdmin-objs := axg-tdmin.o

snd-soc-meson-axg-tdmout-objs := axg-tdmout.o

snd-soc-meson-axg-sound-card-objs := axg-card.o

snd-soc-meson-axg-spdifin-objs := axg-spdifin.o

snd-soc-meson-axg-spdifout-objs := axg-spdifout.o

snd-soc-meson-axg-pdm-objs := axg-pdm.o

snd-soc-meson-card-utils-objs := meson-card-utils.o

snd-soc-meson-codec-glue-objs := meson-codec-glue.o

snd-soc-meson-gx-sound-card-objs := gx-card.o

snd-soc-meson-g12a-toacodec-objs := g12a-toacodec.o

snd-soc-meson-g12a-tohdmitx-objs := g12a-tohdmitx.o

snd-soc-meson-t9015-objs := t9015.o

obj-$(CONFIG_SND_MESON_AIU) += snd-soc-meson-aiu.o

obj-$(CONFIG_SND_MESON_AXG_FRDDR) += snd-soc-meson-axg-frddr.o

obj-$(CONFIG_SND_MESON_AXG_TDM_FORMATTER) += snd-soc-meson-axg-tdm-formatter.o

obj-$(CONFIG_SND_MESON_AXG_TDMIN) += snd-soc-meson-axg-tdmin.o

obj-$(CONFIG_SND_MESON_AXG_SOUND_CARD) += snd-soc-meson-axg-sound-card.o

obj-$(CONFIG_SND_MESON_AXG_SPDIFOUT) += snd-soc-meson-axg-spdifout.o

obj-$(CONFIG_SND_MESON_CARD_UTILS) += snd-soc-meson-card-utils.o

obj-$(CONFIG_SND_MESON_GX_SOUND_CARD) += snd-soc-meson-gx-sound-card.o

obj-$(CONFIG_SND_MESON_G12A_TOHDMITX) += snd-soc-meson-g12a-tohdmitx.o

 SPDX-License-Identifier: GPL-2.0-only

snd-soc-xlnx-i2s-objs      := xlnx_i2s.o

obj-$(CONFIG_SND_SOC_XILINX_AUDIO_FORMATTER) += snd-soc-xlnx-formatter-pcm.o

snd-soc-xlnx-spdif-objs := xlnx_spdif.o

 SPDX-License-Identifier: GPL-2.0-only

snd-soc-kirkwood-objs := kirkwood-dma.o kirkwood-i2s.o

obj-$(CONFIG_SND_KIRKWOOD_SOC) += snd-soc-kirkwood.o



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SND_SOC_PCM_SH7760)	+= snd-soc-dma-sh7760.o

obj-$(CONFIG_SND_SOC_SH4_HAC)	+= snd-soc-hac.o

obj-$(CONFIG_SND_SOC_SH4_FSI)	+= snd-soc-fsi.o





## boards

snd-soc-sh7760-ac97-objs	:= sh7760-ac97.o



obj-$(CONFIG_SND_SIU_MIGOR)	+= snd-soc-migor.o

# RZ/G2L

obj-$(CONFIG_SND_SOC_RZ)	+= snd-soc-rz-ssi.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SND_SOC_RCAR)	+= snd-soc-rcar.o

# SPDX-License-Identifier: GPL-2.0

 PXA Platform Support



obj-$(CONFIG_SND_PXA2XX_SOC_AC97) += snd-soc-pxa2xx-ac97.o

obj-$(CONFIG_SND_PXA_SOC_SSP) += snd-soc-pxa-ssp.o

obj-$(CONFIG_SND_MMP_SOC_SSPA) += snd-soc-mmp-sspa.o

 PXA Machine Support

snd-soc-e740-objs := e740_wm9705.o

snd-soc-e800-objs := e800_wm9712.o

snd-soc-spitz-objs := spitz.o

snd-soc-em-x270-objs := em-x270.o

snd-soc-palm27x-objs := palm27x.o

snd-soc-zylonite-objs := zylonite.o

snd-soc-hx4700-objs := hx4700.o

snd-soc-magician-objs := magician.o



obj-$(CONFIG_SND_PXA2XX_SOC_CORGI) += snd-soc-corgi.o

obj-$(CONFIG_SND_PXA2XX_SOC_POODLE) += snd-soc-poodle.o

obj-$(CONFIG_SND_PXA2XX_SOC_TOSA) += snd-soc-tosa.o

obj-$(CONFIG_SND_PXA2XX_SOC_E740) += snd-soc-e740.o

obj-$(CONFIG_SND_PXA2XX_SOC_E750) += snd-soc-e750.o

obj-$(CONFIG_SND_PXA2XX_SOC_E800) += snd-soc-e800.o

obj-$(CONFIG_SND_PXA2XX_SOC_SPITZ) += snd-soc-spitz.o

obj-$(CONFIG_SND_PXA2XX_SOC_EM_X270) += snd-soc-em-x270.o

obj-$(CONFIG_SND_PXA2XX_SOC_PALM27X) += snd-soc-palm27x.o

obj-$(CONFIG_SND_PXA2XX_SOC_HX4700) += snd-soc-hx4700.o

obj-$(CONFIG_SND_PXA2XX_SOC_MAGICIAN) += snd-soc-magician.o

obj-$(CONFIG_SND_PXA2XX_SOC_MIOA701) += snd-soc-mioa701.o

obj-$(CONFIG_SND_PXA2XX_SOC_Z2) += snd-soc-z2.o

obj-$(CONFIG_SND_MMP_SOC_BROWNSTONE) += snd-soc-brownstone.o

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

 S3c24XX Platform Support



obj-$(CONFIG_SND_S3C24XX_I2S) += snd-soc-s3c24xx-i2s.o

obj-$(CONFIG_SND_SAMSUNG_SPDIF) += snd-soc-samsung-spdif.o

obj-$(CONFIG_SND_SAMSUNG_I2S) += snd-soc-i2s.o

obj-$(CONFIG_SND_SAMSUNG_I2S) += snd-soc-idma.o

 S3C24XX Machine Support



obj-$(CONFIG_SND_SOC_SAMSUNG_NEO1973_WM8753) += snd-soc-neo1973-wm8753.o

obj-$(CONFIG_SND_SOC_SAMSUNG_SIMTEC) += snd-soc-s3c24xx-simtec.o

obj-$(CONFIG_SND_SOC_SAMSUNG_SIMTEC_TLV320AIC23) += snd-soc-s3c24xx-simtec-tlv320aic23.o

obj-$(CONFIG_SND_SOC_SAMSUNG_RX1950_UDA1380) += snd-soc-rx1950-uda1380.o

obj-$(CONFIG_SND_SOC_SAMSUNG_SMDK_WM8994) += snd-soc-smdk-wm8994.o

obj-$(CONFIG_SND_SOC_SAMSUNG_SMDK_SPDIF) += snd-soc-smdk-spdif.o

obj-$(CONFIG_SND_SOC_SMDK_WM8994_PCM) += snd-soc-smdk-wm8994pcm.o

obj-$(CONFIG_SND_SOC_TOBERMORY) += snd-soc-tobermory.o

obj-$(CONFIG_SND_SOC_LITTLEMILL) += snd-soc-littlemill.o

obj-$(CONFIG_SND_SOC_ODROID) += snd-soc-odroid.o

obj-$(CONFIG_SND_SOC_SAMSUNG_TM2_WM5110) += snd-soc-tm2-wm5110.o

obj-$(CONFIG_SND_SOC_SAMSUNG_MIDAS_WM1811) += snd-soc-midas-wm1811.o

# SPDX-License-Identifier: GPL-2.0

# EP93xx Platform Support

snd-soc-ep93xx-ac97-objs 			:= ep93xx-ac97.o

obj-$(CONFIG_SND_EP93XX_SOC)			+= snd-soc-ep93xx.o

obj-$(CONFIG_SND_EP93XX_SOC_I2S)		+= snd-soc-ep93xx-i2s.o

obj-$(CONFIG_SND_EP93XX_SOC_AC97)		+= snd-soc-ep93xx-ac97.o

# EP93XX Machine Support

snd-soc-snappercl15-objs			:= snappercl15.o

snd-soc-edb93xx-objs				:= edb93xx.o

obj-$(CONFIG_SND_EP93XX_SOC_SIMONE)		+= snd-soc-simone.o

# SPDX-License-Identifier: GPL-2.0

# Au1200/Au1550 PSC audio



 Au1000/1500/1100 Audio units

snd-soc-au1x-dma-objs := dma.o

snd-soc-au1x-i2sc-objs := i2sc.o

obj-$(CONFIG_SND_SOC_AU1XPSC) += snd-soc-au1xpsc-dbdma.o

obj-$(CONFIG_SND_SOC_AU1XPSC_AC97) += snd-soc-au1xpsc-ac97.o

obj-$(CONFIG_SND_SOC_AU1XAUDIO) += snd-soc-au1x-dma.o

obj-$(CONFIG_SND_SOC_AU1XAC97C) += snd-soc-au1x-ac97c.o

obj-$(CONFIG_SND_SOC_AU1XI2SC) += snd-soc-au1x-i2sc.o

# Boards

snd-soc-db1000-objs := db1000.o

snd-soc-db1200-objs := db1200.o

obj-$(CONFIG_SND_SOC_DB1000) += snd-soc-db1000.o

# SPDX-License-Identifier: GPL-2.0

snd-soc-88pm860x-objs := 88pm860x-codec.o

snd-soc-ab8500-codec-objs := ab8500-codec.o

snd-soc-ac97-objs := ac97.o

snd-soc-ad1836-objs := ad1836.o

snd-soc-ad193x-objs := ad193x.o

snd-soc-ad193x-spi-objs := ad193x-spi.o

snd-soc-ad193x-i2c-objs := ad193x-i2c.o

snd-soc-ad1980-objs := ad1980.o

snd-soc-ad73311-objs := ad73311.o

snd-soc-adau-utils-objs := adau-utils.o

snd-soc-adau1372-objs := adau1372.o

snd-soc-adau1372-i2c-objs := adau1372-i2c.o

snd-soc-adau1372-spi-objs := adau1372-spi.o

snd-soc-adau1373-objs := adau1373.o

snd-soc-adau1701-objs := adau1701.o

snd-soc-adau17x1-objs := adau17x1.o

snd-soc-adau1761-objs := adau1761.o

snd-soc-adau1761-i2c-objs := adau1761-i2c.o

snd-soc-adau1761-spi-objs := adau1761-spi.o

snd-soc-adau1781-objs := adau1781.o

snd-soc-adau1781-i2c-objs := adau1781-i2c.o

snd-soc-adau1781-spi-objs := adau1781-spi.o

snd-soc-adau1977-objs := adau1977.o

snd-soc-adau1977-spi-objs := adau1977-spi.o

snd-soc-adau1977-i2c-objs := adau1977-i2c.o

snd-soc-adau7002-objs := adau7002.o

snd-soc-adau7118-objs := adau7118.o

snd-soc-adau7118-i2c-objs := adau7118-i2c.o

snd-soc-adau7118-hw-objs := adau7118-hw.o

snd-soc-adav80x-objs := adav80x.o

snd-soc-adav801-objs := adav801.o

snd-soc-adav803-objs := adav803.o

snd-soc-ads117x-objs := ads117x.o

snd-soc-ak4104-objs := ak4104.o

snd-soc-ak4118-objs := ak4118.o

snd-soc-ak4458-objs := ak4458.o

snd-soc-ak4535-objs := ak4535.o

snd-soc-ak4554-objs := ak4554.o

snd-soc-ak4613-objs := ak4613.o

snd-soc-ak4641-objs := ak4641.o

snd-soc-ak4642-objs := ak4642.o

snd-soc-ak4671-objs := ak4671.o

snd-soc-ak5386-objs := ak5386.o

snd-soc-ak5558-objs := ak5558.o

snd-soc-cs35l41-spi-objs := cs35l41-spi.o cs35l41.o cs35l41-tables.o

snd-soc-da7219-objs := da7219.o da7219-aad.o

snd-soc-da732x-objs := da732x.o

snd-soc-da9055-objs := da9055.o

snd-soc-dmic-objs := dmic.o

snd-soc-es7134-objs := es7134.o

snd-soc-es7241-objs := es7241.o

snd-soc-es8316-objs := es8316.o

snd-soc-es8328-objs := es8328.o

snd-soc-es8328-i2c-objs := es8328-i2c.o

snd-soc-es8328-spi-objs := es8328-spi.o

snd-soc-gtm601-objs := gtm601.o

snd-soc-hdac-hdmi-objs := hdac_hdmi.o

snd-soc-hdac-hda-objs := hdac_hda.o

snd-soc-ics43432-objs := ics43432.o

snd-soc-inno-rk3036-objs := inno_rk3036.o

snd-soc-isabelle-objs := isabelle.o

snd-soc-jz4740-codec-objs := jz4740.o

snd-soc-jz4725b-codec-objs := jz4725b.o

snd-soc-jz4760-codec-objs := jz4760.o

snd-soc-jz4770-codec-objs := jz4770.o

snd-soc-l3-objs := l3.o

snd-soc-lm4857-objs := lm4857.o

snd-soc-lm49453-objs := lm49453.o

snd-soc-lochnagar-sc-objs := lochnagar-sc.o

snd-soc-lpass-rx-macro-objs := lpass-rx-macro.o

snd-soc-lpass-tx-macro-objs := lpass-tx-macro.o

snd-soc-lpass-wsa-macro-objs := lpass-wsa-macro.o

snd-soc-lpass-va-macro-objs := lpass-va-macro.o

snd-soc-madera-objs := madera.o

snd-soc-max9759-objs := max9759.o

snd-soc-max9768-objs := max9768.o

snd-soc-max98088-objs := max98088.o

snd-soc-max98090-objs := max98090.o

snd-soc-max98095-objs := max98095.o

snd-soc-max98357a-objs := max98357a.o

snd-soc-max98371-objs := max98371.o

snd-soc-max9867-objs := max9867.o

snd-soc-max98925-objs := max98925.o

snd-soc-max98926-objs := max98926.o

snd-soc-max98927-objs := max98927.o

snd-soc-max98520-objs := max98520.o

snd-soc-max98373-objs := max98373.o

snd-soc-max98373-i2c-objs := max98373-i2c.o

snd-soc-max98373-sdw-objs := max98373-sdw.o

snd-soc-max98390-objs := max98390.o

snd-soc-max9850-objs := max9850.o

snd-soc-max9860-objs := max9860.o

snd-soc-mc13783-objs := mc13783.o

snd-soc-ml26124-objs := ml26124.o

snd-soc-msm8916-analog-objs := msm8916-wcd-analog.o

snd-soc-msm8916-digital-objs := msm8916-wcd-digital.o

snd-soc-mt6351-objs := mt6351.o

snd-soc-mt6358-objs := mt6358.o

snd-soc-mt6359-objs := mt6359.o

snd-soc-mt6359-accdet-objs := mt6359-accdet.o

snd-soc-mt6660-objs := mt6660.o

snd-soc-nau8315-objs := nau8315.o

snd-soc-nau8540-objs := nau8540.o

snd-soc-nau8810-objs := nau8810.o

snd-soc-nau8821-objs := nau8821.o

snd-soc-nau8822-objs := nau8822.o

snd-soc-nau8824-objs := nau8824.o

snd-soc-nau8825-objs := nau8825.o

snd-soc-hdmi-codec-objs := hdmi-codec.o

snd-soc-pcm1681-objs := pcm1681.o

snd-soc-pcm1789-codec-objs := pcm1789.o

snd-soc-pcm1789-i2c-objs := pcm1789-i2c.o

snd-soc-pcm179x-codec-objs := pcm179x.o

snd-soc-pcm179x-i2c-objs := pcm179x-i2c.o

snd-soc-pcm179x-spi-objs := pcm179x-spi.o

snd-soc-pcm186x-objs := pcm186x.o

snd-soc-pcm186x-i2c-objs := pcm186x-i2c.o

snd-soc-pcm186x-spi-objs := pcm186x-spi.o

snd-soc-pcm3008-objs := pcm3008.o

snd-soc-pcm3060-objs := pcm3060.o

snd-soc-pcm3060-i2c-objs := pcm3060-i2c.o

snd-soc-pcm3060-spi-objs := pcm3060-spi.o

snd-soc-pcm3168a-objs := pcm3168a.o

snd-soc-pcm3168a-i2c-objs := pcm3168a-i2c.o

snd-soc-pcm3168a-spi-objs := pcm3168a-spi.o

snd-soc-pcm5102a-objs := pcm5102a.o

snd-soc-pcm512x-objs := pcm512x.o

snd-soc-pcm512x-i2c-objs := pcm512x-i2c.o

snd-soc-pcm512x-spi-objs := pcm512x-spi.o

snd-soc-rk3328-objs := rk3328_codec.o

snd-soc-rk817-objs := rk817_codec.o

snd-soc-rl6231-objs := rl6231.o

snd-soc-rl6347a-objs := rl6347a.o

snd-soc-rt1011-objs := rt1011.o

snd-soc-rt1015-objs := rt1015.o

snd-soc-rt1015p-objs := rt1015p.o

snd-soc-rt1019-objs := rt1019.o

snd-soc-rt1305-objs := rt1305.o

snd-soc-rt1308-objs := rt1308.o

snd-soc-rt1308-sdw-objs := rt1308-sdw.o

snd-soc-rt1316-sdw-objs := rt1316-sdw.o

snd-soc-rt274-objs := rt274.o

snd-soc-rt286-objs := rt286.o

snd-soc-rt298-objs := rt298.o

snd-soc-rt5514-objs := rt5514.o

snd-soc-rt5514-spi-objs := rt5514-spi.o

snd-soc-rt5616-objs := rt5616.o

snd-soc-rt5631-objs := rt5631.o

snd-soc-rt5640-objs := rt5640.o

snd-soc-rt5645-objs := rt5645.o

snd-soc-rt5651-objs := rt5651.o

snd-soc-rt5659-objs := rt5659.o

snd-soc-rt5660-objs := rt5660.o

snd-soc-rt5663-objs := rt5663.o

snd-soc-rt5665-objs := rt5665.o

snd-soc-rt5668-objs := rt5668.o

snd-soc-rt5670-objs := rt5670.o

snd-soc-rt5677-objs := rt5677.o

snd-soc-rt5677-spi-objs := rt5677-spi.o

snd-soc-rt5682-objs := rt5682.o

snd-soc-rt5682-sdw-objs := rt5682-sdw.o

snd-soc-rt5682-i2c-objs := rt5682-i2c.o

snd-soc-rt5682s-objs := rt5682s.o

snd-soc-rt700-objs := rt700.o rt700-sdw.o

snd-soc-rt711-objs := rt711.o rt711-sdw.o

snd-soc-rt715-sdca-objs := rt715-sdca.o rt715-sdca-sdw.o

snd-soc-rt9120-objs := rt9120.o

snd-soc-sdw-mockup-objs := sdw-mockup.o

snd-soc-sgtl5000-objs := sgtl5000.o

snd-soc-alc5623-objs := alc5623.o

snd-soc-alc5632-objs := alc5632.o

snd-soc-sigmadsp-objs := sigmadsp.o

snd-soc-sigmadsp-i2c-objs := sigmadsp-i2c.o

snd-soc-sigmadsp-regmap-objs := sigmadsp-regmap.o

snd-soc-si476x-objs := si476x.o

snd-soc-wcd-mbhc-objs := wcd-mbhc-v2.o

snd-soc-wcd9335-objs := wcd-clsh-v2.o wcd9335.o

snd-soc-wcd934x-objs := wcd-clsh-v2.o wcd934x.o

snd-soc-wcd938x-objs := wcd938x.o wcd-clsh-v2.o

snd-soc-wcd938x-sdw-objs := wcd938x-sdw.o

snd-soc-wl1273-objs := wl1273.o

snd-soc-wm-adsp-objs := wm_adsp.o

snd-soc-wm0010-objs := wm0010.o

snd-soc-wm1250-ev1-objs := wm1250-ev1.o

snd-soc-wm2000-objs := wm2000.o

snd-soc-wm2200-objs := wm2200.o

snd-soc-wm5100-objs := wm5100.o wm5100-tables.o

snd-soc-wm5102-objs := wm5102.o

snd-soc-wm5110-objs := wm5110.o

snd-soc-wm8350-objs := wm8350.o

snd-soc-wm8400-objs := wm8400.o

snd-soc-wm8510-objs := wm8510.o

snd-soc-wm8523-objs := wm8523.o

snd-soc-wm8524-objs := wm8524.o

snd-soc-wm8580-objs := wm8580.o

snd-soc-wm8711-objs := wm8711.o

snd-soc-wm8727-objs := wm8727.o

snd-soc-wm8728-objs := wm8728.o

snd-soc-wm8731-objs := wm8731.o

snd-soc-wm8737-objs := wm8737.o

snd-soc-wm8741-objs := wm8741.o

snd-soc-wm8750-objs := wm8750.o

snd-soc-wm8753-objs := wm8753.o

snd-soc-wm8770-objs := wm8770.o

snd-soc-wm8776-objs := wm8776.o

snd-soc-wm8782-objs := wm8782.o

snd-soc-wm8804-objs := wm8804.o

snd-soc-wm8804-i2c-objs := wm8804-i2c.o

snd-soc-wm8804-spi-objs := wm8804-spi.o

snd-soc-wm8900-objs := wm8900.o

snd-soc-wm8903-objs := wm8903.o

snd-soc-wm8904-objs := wm8904.o

snd-soc-wm8996-objs := wm8996.o

snd-soc-wm8940-objs := wm8940.o

snd-soc-wm8955-objs := wm8955.o

snd-soc-wm8960-objs := wm8960.o

snd-soc-wm8961-objs := wm8961.o

snd-soc-wm8962-objs := wm8962.o

snd-soc-wm8971-objs := wm8971.o

snd-soc-wm8974-objs := wm8974.o

snd-soc-wm8978-objs := wm8978.o

snd-soc-wm8983-objs := wm8983.o

snd-soc-wm8985-objs := wm8985.o

snd-soc-wm8988-objs := wm8988.o

snd-soc-wm8990-objs := wm8990.o

snd-soc-wm8991-objs := wm8991.o

snd-soc-wm8993-objs := wm8993.o

snd-soc-wm8994-objs := wm8994.o wm8958-dsp2.o

snd-soc-wm8995-objs := wm8995.o

snd-soc-wm8997-objs := wm8997.o

snd-soc-wm8998-objs := wm8998.o

snd-soc-wm9081-objs := wm9081.o

snd-soc-wm9090-objs := wm9090.o

snd-soc-wm9705-objs := wm9705.o

snd-soc-wm9712-objs := wm9712.o

snd-soc-wm9713-objs := wm9713.o

snd-soc-wm-hubs-objs := wm_hubs.o

snd-soc-wsa881x-objs := wsa881x.o

snd-soc-zl38060-objs := zl38060.o

# Amp

snd-soc-max9877-objs := max9877.o

snd-soc-max98504-objs := max98504.o

snd-soc-simple-amplifier-objs := simple-amplifier.o

snd-soc-tpa6130a2-objs := tpa6130a2.o

snd-soc-tas2552-objs := tas2552.o

snd-soc-tas2562-objs := tas2562.o

snd-soc-tas2764-objs := tas2764.o

# Mux

snd-soc-simple-mux-objs := simple-mux.o

obj-$(CONFIG_SND_SOC_88PM860X)	+= snd-soc-88pm860x.o

obj-$(CONFIG_SND_SOC_AC97_CODEC)	+= snd-soc-ac97.o

obj-$(CONFIG_SND_SOC_AD193X)	+= snd-soc-ad193x.o

obj-$(CONFIG_SND_SOC_AD193X_I2C)	+= snd-soc-ad193x-i2c.o

obj-$(CONFIG_SND_SOC_AD73311) += snd-soc-ad73311.o

obj-$(CONFIG_SND_SOC_ADAU1372)	+= snd-soc-adau1372.o

obj-$(CONFIG_SND_SOC_ADAU1372_SPI)	+= snd-soc-adau1372-spi.o

obj-$(CONFIG_SND_SOC_ADAU1761_I2C)	+= snd-soc-adau1761-i2c.o

obj-$(CONFIG_SND_SOC_ADAU1781_I2C)	+= snd-soc-adau1781-i2c.o

obj-$(CONFIG_SND_SOC_ADAU1977_SPI)	+= snd-soc-adau1977-spi.o

obj-$(CONFIG_SND_SOC_ADAU7002)	+= snd-soc-adau7002.o

obj-$(CONFIG_SND_SOC_ADAU7118_I2C)	+= snd-soc-adau7118-i2c.o

obj-$(CONFIG_SND_SOC_ADS117X)	+= snd-soc-ads117x.o

obj-$(CONFIG_SND_SOC_AK4118)	+= snd-soc-ak4118.o

obj-$(CONFIG_SND_SOC_AK4535)	+= snd-soc-ak4535.o

obj-$(CONFIG_SND_SOC_AK4613)	+= snd-soc-ak4613.o

obj-$(CONFIG_SND_SOC_AK4642)	+= snd-soc-ak4642.o

obj-$(CONFIG_SND_SOC_AK5386)	+= snd-soc-ak5386.o

obj-$(CONFIG_SND_SOC_ALC5632)	+= snd-soc-alc5632.o

obj-$(CONFIG_SND_SOC_BD28623)	+= snd-soc-bd28623.o

obj-$(CONFIG_SND_SOC_CQ0093VC) += snd-soc-cq93vc.o

obj-$(CONFIG_SND_SOC_CROS_EC_CODEC)	+= snd-soc-cros-ec-codec.o

obj-$(CONFIG_SND_SOC_CS35L33)	+= snd-soc-cs35l33.o

obj-$(CONFIG_SND_SOC_CS35L35)	+= snd-soc-cs35l35.o

obj-$(CONFIG_SND_SOC_CS35L41_SPI)	+= snd-soc-cs35l41-spi.o

obj-$(CONFIG_SND_SOC_CS42L42)	+= snd-soc-cs42l42.o

obj-$(CONFIG_SND_SOC_CS42L51_I2C)	+= snd-soc-cs42l51-i2c.o

obj-$(CONFIG_SND_SOC_CS42L56)	+= snd-soc-cs42l56.o

obj-$(CONFIG_SND_SOC_CS4234)	+= snd-soc-cs4234.o

obj-$(CONFIG_SND_SOC_CS4270)	+= snd-soc-cs4270.o

obj-$(CONFIG_SND_SOC_CS4271_I2C)	+= snd-soc-cs4271-i2c.o

obj-$(CONFIG_SND_SOC_CS42XX8)	+= snd-soc-cs42xx8.o

obj-$(CONFIG_SND_SOC_CS43130)   += snd-soc-cs43130.o

obj-$(CONFIG_SND_SOC_CS4349)	+= snd-soc-cs4349.o

obj-$(CONFIG_SND_SOC_CS47L15)	+= snd-soc-cs47l15.o

obj-$(CONFIG_SND_SOC_CS47L85)	+= snd-soc-cs47l85.o

obj-$(CONFIG_SND_SOC_CS47L92)	+= snd-soc-cs47l92.o

obj-$(CONFIG_SND_SOC_CX20442)	+= snd-soc-cx20442.o

obj-$(CONFIG_SND_SOC_DA7210)	+= snd-soc-da7210.o

obj-$(CONFIG_SND_SOC_DA7218)	+= snd-soc-da7218.o

obj-$(CONFIG_SND_SOC_DA732X)	+= snd-soc-da732x.o

obj-$(CONFIG_SND_SOC_DMIC)	+= snd-soc-dmic.o

obj-$(CONFIG_SND_SOC_ES7241)	+= snd-soc-es7241.o

obj-$(CONFIG_SND_SOC_ES8316)    += snd-soc-es8316.o

obj-$(CONFIG_SND_SOC_HDAC_HDMI) += snd-soc-hdac-hdmi.o

obj-$(CONFIG_SND_SOC_ICS43432)	+= snd-soc-ics43432.o

obj-$(CONFIG_SND_SOC_ISABELLE)	+= snd-soc-isabelle.o

obj-$(CONFIG_SND_SOC_JZ4725B_CODEC)	+= snd-soc-jz4725b-codec.o

obj-$(CONFIG_SND_SOC_JZ4760_CODEC)      += snd-soc-jz4760-codec.o

obj-$(CONFIG_SND_SOC_L3)	+= snd-soc-l3.o

obj-$(CONFIG_SND_SOC_LM49453)   += snd-soc-lm49453.o

obj-$(CONFIG_SND_SOC_MADERA)	+= snd-soc-madera.o

obj-$(CONFIG_SND_SOC_MAX9768)	+= snd-soc-max9768.o

obj-$(CONFIG_SND_SOC_MAX98090)	+= snd-soc-max98090.o

obj-$(CONFIG_SND_SOC_MAX98357A)	+= snd-soc-max98357a.o

obj-$(CONFIG_SND_SOC_MAX9867)	+= snd-soc-max9867.o

obj-$(CONFIG_SND_SOC_MAX98926)	+= snd-soc-max98926.o

obj-$(CONFIG_SND_SOC_MAX98520)	+= snd-soc-max98520.o

obj-$(CONFIG_SND_SOC_MAX98373_I2C)   += snd-soc-max98373-i2c.o

obj-$(CONFIG_SND_SOC_MAX98390)	+= snd-soc-max98390.o

obj-$(CONFIG_SND_SOC_MAX9860)	+= snd-soc-max9860.o

obj-$(CONFIG_SND_SOC_ML26124)	+= snd-soc-ml26124.o

obj-$(CONFIG_SND_SOC_MSM8916_WCD_ANALOG) +=snd-soc-msm8916-analog.o

obj-$(CONFIG_SND_SOC_MSM8916_WCD_DIGITAL) +=snd-soc-msm8916-digital.o

obj-$(CONFIG_SND_SOC_MT6358)	+= snd-soc-mt6358.o

obj-$(CONFIG_SND_SOC_MT6359_ACCDET) += mt6359-accdet.o

obj-$(CONFIG_SND_SOC_NAU8315)   += snd-soc-nau8315.o

obj-$(CONFIG_SND_SOC_NAU8810)   += snd-soc-nau8810.o

obj-$(CONFIG_SND_SOC_NAU8822)   += snd-soc-nau8822.o

obj-$(CONFIG_SND_SOC_NAU8825)   += snd-soc-nau8825.o

obj-$(CONFIG_SND_SOC_PCM1681)	+= snd-soc-pcm1681.o

obj-$(CONFIG_SND_SOC_PCM1789_I2C)	+= snd-soc-pcm1789-i2c.o

obj-$(CONFIG_SND_SOC_PCM179X_I2C)	+= snd-soc-pcm179x-i2c.o

obj-$(CONFIG_SND_SOC_PCM186X)	+= snd-soc-pcm186x.o

obj-$(CONFIG_SND_SOC_PCM186X_SPI)	+= snd-soc-pcm186x-spi.o

obj-$(CONFIG_SND_SOC_PCM3060)	+= snd-soc-pcm3060.o

obj-$(CONFIG_SND_SOC_PCM3060_SPI)	+= snd-soc-pcm3060-spi.o

obj-$(CONFIG_SND_SOC_PCM3168A_I2C)	+= snd-soc-pcm3168a-i2c.o

obj-$(CONFIG_SND_SOC_PCM5102A)	+= snd-soc-pcm5102a.o

obj-$(CONFIG_SND_SOC_PCM512x_I2C)	+= snd-soc-pcm512x-i2c.o

obj-$(CONFIG_SND_SOC_RK3328)	+= snd-soc-rk3328.o

obj-$(CONFIG_SND_SOC_RL6231)	+= snd-soc-rl6231.o

obj-$(CONFIG_SND_SOC_RT1011)	+= snd-soc-rt1011.o

obj-$(CONFIG_SND_SOC_RT1015P)	+= snd-soc-rt1015p.o

obj-$(CONFIG_SND_SOC_RT1305)	+= snd-soc-rt1305.o

obj-$(CONFIG_SND_SOC_RT1308_SDW)	+= snd-soc-rt1308-sdw.o

obj-$(CONFIG_SND_SOC_RT274)	+= snd-soc-rt274.o

obj-$(CONFIG_SND_SOC_RT298)	+= snd-soc-rt298.o

obj-$(CONFIG_SND_SOC_RT5514_SPI)	+= snd-soc-rt5514-spi.o

obj-$(CONFIG_SND_SOC_RT5616)	+= snd-soc-rt5616.o

obj-$(CONFIG_SND_SOC_RT5640)	+= snd-soc-rt5640.o

obj-$(CONFIG_SND_SOC_RT5651)	+= snd-soc-rt5651.o

obj-$(CONFIG_SND_SOC_RT5660)	+= snd-soc-rt5660.o

obj-$(CONFIG_SND_SOC_RT5665)	+= snd-soc-rt5665.o

obj-$(CONFIG_SND_SOC_RT5670)	+= snd-soc-rt5670.o

obj-$(CONFIG_SND_SOC_RT5677_SPI)	+= snd-soc-rt5677-spi.o

obj-$(CONFIG_SND_SOC_RT5682_I2C)	+= snd-soc-rt5682-i2c.o

obj-$(CONFIG_SND_SOC_RT5682S)	+= snd-soc-rt5682s.o

obj-$(CONFIG_SND_SOC_RT711)     += snd-soc-rt711.o

obj-$(CONFIG_SND_SOC_RT715)     += snd-soc-rt715.o

obj-$(CONFIG_SND_SOC_RT9120)	+= snd-soc-rt9120.o

obj-$(CONFIG_SND_SOC_SIGMADSP)	+= snd-soc-sigmadsp.o

obj-$(CONFIG_SND_SOC_SIGMADSP_REGMAP)	+= snd-soc-sigmadsp-regmap.o

obj-$(CONFIG_SND_SOC_SPDIF)	+= snd-soc-spdif-rx.o snd-soc-spdif-tx.o

obj-$(CONFIG_SND_SOC_SSM2518)	+= snd-soc-ssm2518.o

obj-$(CONFIG_SND_SOC_SSM2602_SPI)	+= snd-soc-ssm2602-spi.o

obj-$(CONFIG_SND_SOC_SSM4567)	+= snd-soc-ssm4567.o

obj-$(CONFIG_SND_SOC_STA350)   += snd-soc-sta350.o

obj-$(CONFIG_SND_SOC_STAC9766)	+= snd-soc-stac9766.o

obj-$(CONFIG_SND_SOC_TAS2552)	+= snd-soc-tas2552.o

obj-$(CONFIG_SND_SOC_TAS2764)	+= snd-soc-tas2764.o

obj-$(CONFIG_SND_SOC_TAS571X)	+= snd-soc-tas571x.o

obj-$(CONFIG_SND_SOC_TAS6424)	+= snd-soc-tas6424.o

obj-$(CONFIG_SND_SOC_TAS2770) += snd-soc-tas2770.o

obj-$(CONFIG_SND_SOC_TFA989X)	+= snd-soc-tfa989x.o

obj-$(CONFIG_SND_SOC_TLV320AIC23_I2C)	+= snd-soc-tlv320aic23-i2c.o

obj-$(CONFIG_SND_SOC_TLV320AIC26)	+= snd-soc-tlv320aic26.o

obj-$(CONFIG_SND_SOC_TLV320AIC32X4)     += snd-soc-tlv320aic32x4.o

obj-$(CONFIG_SND_SOC_TLV320AIC32X4_SPI)	+= snd-soc-tlv320aic32x4-spi.o

obj-$(CONFIG_SND_SOC_TLV320AIC3X_I2C)	+= snd-soc-tlv320aic3x-i2c.o

obj-$(CONFIG_SND_SOC_TLV320DAC33)	+= snd-soc-tlv320dac33.o

obj-$(CONFIG_SND_SOC_TSCS42XX)	+= snd-soc-tscs42xx.o

obj-$(CONFIG_SND_SOC_TS3A227E)	+= snd-soc-ts3a227e.o

obj-$(CONFIG_SND_SOC_TWL6040)	+= snd-soc-twl6040.o

obj-$(CONFIG_SND_SOC_UDA134X)	+= snd-soc-uda134x.o

obj-$(CONFIG_SND_SOC_WCD_MBHC)	+= snd-soc-wcd-mbhc.o

obj-$(CONFIG_SND_SOC_WCD934X)	+= snd-soc-wcd934x.o

ifdef CONFIG_SND_SOC_WCD938X_SDW

# avoid link failure by forcing sdw code built-in when needed

obj-$(CONFIG_SND_SOC_WL1273)	+= snd-soc-wl1273.o

obj-$(CONFIG_SND_SOC_WM1250_EV1) += snd-soc-wm1250-ev1.o

obj-$(CONFIG_SND_SOC_WM2200)	+= snd-soc-wm2200.o

obj-$(CONFIG_SND_SOC_WM5102)	+= snd-soc-wm5102.o

obj-$(CONFIG_SND_SOC_WM8350)	+= snd-soc-wm8350.o

obj-$(CONFIG_SND_SOC_WM8510)	+= snd-soc-wm8510.o

obj-$(CONFIG_SND_SOC_WM8524)	+= snd-soc-wm8524.o

obj-$(CONFIG_SND_SOC_WM8711)	+= snd-soc-wm8711.o

obj-$(CONFIG_SND_SOC_WM8728)	+= snd-soc-wm8728.o

obj-$(CONFIG_SND_SOC_WM8737)	+= snd-soc-wm8737.o

obj-$(CONFIG_SND_SOC_WM8750)	+= snd-soc-wm8750.o

obj-$(CONFIG_SND_SOC_WM8770)	+= snd-soc-wm8770.o

obj-$(CONFIG_SND_SOC_WM8782)	+= snd-soc-wm8782.o

obj-$(CONFIG_SND_SOC_WM8804_I2C) += snd-soc-wm8804-i2c.o

obj-$(CONFIG_SND_SOC_WM8900)	+= snd-soc-wm8900.o

obj-$(CONFIG_SND_SOC_WM8904)	+= snd-soc-wm8904.o

obj-$(CONFIG_SND_SOC_WM8940)	+= snd-soc-wm8940.o

obj-$(CONFIG_SND_SOC_WM8960)	+= snd-soc-wm8960.o

obj-$(CONFIG_SND_SOC_WM8962)	+= snd-soc-wm8962.o

obj-$(CONFIG_SND_SOC_WM8974)	+= snd-soc-wm8974.o

obj-$(CONFIG_SND_SOC_WM8983)	+= snd-soc-wm8983.o

obj-$(CONFIG_SND_SOC_WM8988)	+= snd-soc-wm8988.o

obj-$(CONFIG_SND_SOC_WM8991)	+= snd-soc-wm8991.o

obj-$(CONFIG_SND_SOC_WM8994)	+= snd-soc-wm8994.o

obj-$(CONFIG_SND_SOC_WM8997)	+= snd-soc-wm8997.o

obj-$(CONFIG_SND_SOC_WM9081)	+= snd-soc-wm9081.o

obj-$(CONFIG_SND_SOC_WM9705)	+= snd-soc-wm9705.o

obj-$(CONFIG_SND_SOC_WM9713)	+= snd-soc-wm9713.o

obj-$(CONFIG_SND_SOC_WM_HUBS)	+= snd-soc-wm-hubs.o

obj-$(CONFIG_SND_SOC_ZL38060)	+= snd-soc-zl38060.o

 Amp

obj-$(CONFIG_SND_SOC_MAX9877)	+= snd-soc-max9877.o

obj-$(CONFIG_SND_SOC_SIMPLE_AMPLIFIER)	+= snd-soc-simple-amplifier.o

obj-$(CONFIG_SND_SOC_LPASS_WSA_MACRO)	+= snd-soc-lpass-wsa-macro.o

obj-$(CONFIG_SND_SOC_LPASS_RX_MACRO)	+= snd-soc-lpass-rx-macro.o



# Mux

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SND_I2S_HI6210_I2S) += hi6210-i2s.o

# SPDX-License-Identifier: GPL-2.0

snd-soc-uniphier-aio-ld11-objs := aio-ld11.o



obj-$(CONFIG_SND_SOC_UNIPHIER_LD11) += snd-soc-uniphier-aio-ld11.o



obj-$(CONFIG_SND_SOC_UNIPHIER_EVEA_CODEC) += snd-soc-uniphier-evea.o

 SPDX-License-Identifier: GPL-2.0-only



 Jz4740 Platform Support





# SPDX-License-Identifier: GPL-2.0

# ROCKCHIP Platform Support

snd-soc-rockchip-i2s-objs := rockchip_i2s.o

snd-soc-rockchip-i2s-tdm-objs := rockchip_i2s_tdm.o

snd-soc-rockchip-pdm-objs := rockchip_pdm.o

snd-soc-rockchip-spdif-objs := rockchip_spdif.o

obj-$(CONFIG_SND_SOC_ROCKCHIP_I2S) += snd-soc-rockchip-i2s.o

obj-$(CONFIG_SND_SOC_ROCKCHIP_SPDIF) += snd-soc-rockchip-spdif.o



snd-soc-rockchip-max98090-objs := rockchip_max98090.o

snd-soc-rockchip-rt5645-objs := rockchip_rt5645.o

snd-soc-rk3288-hdmi-analog-objs := rk3288_hdmi_analog.o

snd-soc-rk3399-gru-sound-objs := rk3399_gru_sound.o

obj-$(CONFIG_SND_SOC_ROCKCHIP_MAX98090) += snd-soc-rockchip-max98090.o

obj-$(CONFIG_SND_SOC_RK3288_HDMI_ANALOG) += snd-soc-rk3288-hdmi-analog.o

 SPDX-License-Identifier: GPL-2.0-only

# Core support



 Platform Support

obj-$(CONFIG_SND_SST_ATOM_HIFI2_PLATFORM) += atom/

obj-$(CONFIG_SND_SOC_INTEL_CATPT) += catpt/



# Machine support

 SPDX-License-Identifier: GPL-2.0-only

snd-soc-acpi-intel-match-objs := soc-acpi-intel-byt-match.o soc-acpi-intel-cht-match.o \

	soc-acpi-intel-hsw-bdw-match.o \

	soc-acpi-intel-bxt-match.o soc-acpi-intel-glk-match.o \

	soc-acpi-intel-cml-match.o soc-acpi-intel-icl-match.o \

	soc-acpi-intel-jsl-match.o soc-acpi-intel-adl-match.o \

	soc-acpi-intel-hda-match.o \



obj-$(CONFIG_SND_SOC_ACPI_INTEL_MATCH) += snd-soc-acpi-intel-match.o

 SPDX-License-Identifier: GPL-2.0-only

snd-soc-sst-bdw-rt5650-mach-objs := bdw-rt5650.o

snd-soc-sst-byt-cht-cx2072x-objs := bytcht_cx2072x.o

snd-soc-sst-byt-cht-es8316-objs := bytcht_es8316.o

snd-soc-sof_rt5682-objs := sof_rt5682.o sof_realtek_common.o

snd-soc-sof_cs42l42-objs := sof_cs42l42.o

snd-soc-sof_es8336-objs := sof_es8336.o

snd-soc-cml_rt1011_rt5682-objs := cml_rt1011_rt5682.o

snd-soc-kbl_da7219_max98357a-objs := kbl_da7219_max98357a.o

snd-soc-kbl_da7219_max98927-objs := kbl_da7219_max98927.o

snd-soc-kbl_rt5663_max98927-objs := kbl_rt5663_max98927.o

snd-soc-kbl_rt5663_rt5514_max98927-objs := kbl_rt5663_rt5514_max98927.o

snd-soc-kbl_rt5660-objs := kbl_rt5660.o

snd-soc-skl_rt286-objs := skl_rt286.o

snd-soc-sof-sdw-objs += sof_sdw.o				\

			sof_sdw_max98373.o			\

			sof_sdw_rt711.o sof_sdw_rt711_sdca.o 	\

			sof_sdw_dmic.o sof_sdw_hdmi.o

obj-$(CONFIG_SND_SOC_INTEL_SOF_RT5682_MACH) += snd-soc-sof_rt5682.o

obj-$(CONFIG_SND_SOC_INTEL_SOF_CS42L42_MACH) += snd-soc-sof_cs42l42.o

obj-$(CONFIG_SND_SOC_INTEL_SOF_ES8336_MACH) += snd-soc-sof_es8336.o

obj-$(CONFIG_SND_SOC_INTEL_HASWELL_MACH) += snd-soc-sst-haswell.o

obj-$(CONFIG_SND_SOC_INTEL_BXT_DA7219_MAX98357A_COMMON) += snd-soc-sst-bxt-da7219_max98357a.o

obj-$(CONFIG_SND_SOC_INTEL_BXT_RT298_MACH) += snd-soc-sst-bxt-rt298.o

obj-$(CONFIG_SND_SOC_INTEL_SOF_PCM512x_MACH) += snd-soc-sst-sof-pcm512x.o

obj-$(CONFIG_SND_SOC_INTEL_SOF_WM8804_MACH) += snd-soc-sst-sof-wm8804.o

obj-$(CONFIG_SND_SOC_INTEL_GLK_RT5682_MAX98357A_MACH) += snd-soc-sst-glk-rt5682_max98357a.o

obj-$(CONFIG_SND_SOC_INTEL_BROADWELL_MACH) += snd-soc-sst-broadwell.o

obj-$(CONFIG_SND_SOC_INTEL_BDW_RT5677_MACH) += snd-soc-sst-bdw-rt5677-mach.o

obj-$(CONFIG_SND_SOC_INTEL_BYTCR_RT5640_MACH) += snd-soc-sst-bytcr-rt5640.o

obj-$(CONFIG_SND_SOC_INTEL_BYTCR_RT5651_MACH) += snd-soc-sst-bytcr-rt5651.o

obj-$(CONFIG_SND_SOC_INTEL_BYTCR_WM5102_MACH) += snd-soc-sst-bytcr-wm5102.o

obj-$(CONFIG_SND_SOC_INTEL_CHT_BSW_RT5672_MACH) += snd-soc-sst-cht-bsw-rt5672.o

obj-$(CONFIG_SND_SOC_INTEL_CHT_BSW_RT5645_MACH) += snd-soc-sst-cht-bsw-rt5645.o

obj-$(CONFIG_SND_SOC_INTEL_CHT_BSW_MAX98090_TI_MACH) += snd-soc-sst-cht-bsw-max98090_ti.o

obj-$(CONFIG_SND_SOC_INTEL_CHT_BSW_NAU8824_MACH) += snd-soc-sst-cht-bsw-nau8824.o

obj-$(CONFIG_SND_SOC_INTEL_BYT_CHT_CX2072X_MACH) += snd-soc-sst-byt-cht-cx2072x.o

obj-$(CONFIG_SND_SOC_INTEL_BYT_CHT_DA7213_MACH) += snd-soc-sst-byt-cht-da7213.o

obj-$(CONFIG_SND_SOC_INTEL_BYT_CHT_ES8316_MACH) += snd-soc-sst-byt-cht-es8316.o

obj-$(CONFIG_SND_SOC_INTEL_BYT_CHT_NOCODEC_MACH) += snd-soc-sst-byt-cht-nocodec.o

obj-$(CONFIG_SND_SOC_INTEL_SOF_CML_RT1011_RT5682_MACH) += snd-soc-cml_rt1011_rt5682.o

obj-$(CONFIG_SND_SOC_INTEL_KBL_DA7219_MAX98357A_MACH) += snd-soc-kbl_da7219_max98357a.o

obj-$(CONFIG_SND_SOC_INTEL_KBL_DA7219_MAX98927_MACH) += snd-soc-kbl_da7219_max98927.o

obj-$(CONFIG_SND_SOC_INTEL_KBL_RT5663_MAX98927_MACH) += snd-soc-kbl_rt5663_max98927.o

obj-$(CONFIG_SND_SOC_INTEL_KBL_RT5663_RT5514_MAX98927_MACH) += snd-soc-kbl_rt5663_rt5514_max98927.o

obj-$(CONFIG_SND_SOC_INTEL_KBL_RT5660_MACH) += snd-soc-kbl_rt5660.o

obj-$(CONFIG_SND_SOC_INTEL_SKL_RT286_MACH) += snd-soc-skl_rt286.o

obj-$(CONFIG_SND_SOC_INTEL_SKL_NAU88L25_MAX98357A_MACH) += snd-skl_nau88l25_max98357a.o

obj-$(CONFIG_SND_SOC_INTEL_SKL_NAU88L25_SSM4567_MACH) += snd-soc-skl_nau88l25_ssm4567.o

obj-$(CONFIG_SND_SOC_INTEL_SKL_HDA_DSP_GENERIC_MACH) += snd-soc-skl_hda_dsp.o

obj-$(CONFIG_SND_SOC_INTEL_SOF_DA7219_MAX98373_MACH) += snd-soc-sof_da7219_max98373.o

obj-$(CONFIG_SND_SOC_INTEL_EHL_RT5660_MACH) += snd-soc-ehl-rt5660.o

obj-$(CONFIG_SND_SOC_INTEL_SOUNDWIRE_SOF_MACH) += snd-soc-sof-sdw.o

# common modules

snd-soc-intel-hda-dsp-common-objs := hda_dsp_common.o



snd-soc-intel-sof-maxim-common-objs += sof_maxim_common.o

snd-soc-kmb_platform-objs := \

	        kmb_platform.o

snd-soc-catpt-objs := device.o dsp.o loader.o ipc.o messages.o pcm.o sysfs.o

# tell define_trace.h where to find the trace header

CFLAGS_device.o := -I$(src)

obj-$(CONFIG_SND_SOC_INTEL_CATPT) += snd-soc-catpt.o

 SPDX-License-Identifier: GPL-2.0-only

snd-soc-skl-objs := skl.o skl-pcm.o skl-nhlt.o skl-messages.o skl-topology.o \

		skl-sst-ipc.o skl-sst-dsp.o cnl-sst-dsp.o skl-sst-cldma.o \

		skl-sst.o bxt-sst.o cnl-sst.o skl-sst-utils.o



obj-$(CONFIG_SND_SOC_INTEL_SKYLAKE_COMMON) += snd-soc-skl.o

Skylake Clock device support



 SPDX-License-Identifier: GPL-2.0-only

					sst-atom-controls.o

obj-$(CONFIG_SND_SST_ATOM_HIFI2_PLATFORM) += snd-soc-sst-atom-hifi2-platform.o

# DSP driver

obj-$(CONFIG_SND_SST_ATOM_HIFI2_PLATFORM) += sst/

 SPDX-License-Identifier: GPL-2.0-only

snd-intel-sst-core-objs := sst.o sst_ipc.o sst_stream.o sst_drv_interface.o sst_loader.o sst_pvt.o

snd-intel-sst-pci-objs += sst_pci.o

snd-intel-sst-acpi-objs += sst_acpi.o

obj-$(CONFIG_SND_SST_ATOM_HIFI2_PLATFORM_PCI) += snd-intel-sst-pci.o

# SPDX-License-Identifier: GPL-2.0

# SAI

snd-soc-stm32-sai-sub-objs := stm32_sai_sub.o



snd-soc-stm32-sai-objs := stm32_sai.o



# I2S

snd-soc-stm32-i2s-objs := stm32_i2s.o



# SPDIFRX

snd-soc-stm32-spdifrx-objs := stm32_spdifrx.o



DFSDM

# SPDX-License-Identifier: GPL-2.0

# AT91 Platform Support

snd-soc-atmel-pcm-pdc-objs := atmel-pcm-pdc.o

snd-soc-atmel-pcm-dma-objs := atmel-pcm-dma.o

snd-soc-atmel_ssc_dai-objs := atmel_ssc_dai.o

snd-soc-atmel-i2s-objs := atmel-i2s.o

snd-soc-mchp-i2s-mcc-objs := mchp-i2s-mcc.o

snd-soc-mchp-spdiftx-objs := mchp-spdiftx.o

snd-soc-mchp-spdifrx-objs := mchp-spdifrx.o

 pdc and dma need to both be built-in if any user of

# ssc is built-in.

obj-$(CONFIG_SND_ATMEL_SOC_SSC) += snd-soc-atmel-pcm-pdc.o

endif

obj-$(CONFIG_SND_ATMEL_SOC_SSC) += snd-soc-atmel-pcm-dma.o

endif

obj-$(CONFIG_SND_ATMEL_SOC_I2S) += snd-soc-atmel-i2s.o

obj-$(CONFIG_SND_MCHP_SOC_SPDIFTX) += snd-soc-mchp-spdiftx.o



 AT91 Machine Support



obj-$(CONFIG_SND_AT91_SOC_SAM9G20_WM8731) += snd-soc-sam9g20-wm8731.o

obj-$(CONFIG_SND_ATMEL_SOC_CLASSD) += snd-atmel-soc-classd.o

obj-$(CONFIG_SND_ATMEL_SOC_TSE850_PCM5142) += snd-atmel-soc-tse850-pcm5142.o

 SPDX-License-Identifier: GPL-2.0-only

# BCM2835 Platform Support

snd-soc-bcm2835-i2s-objs := bcm2835-i2s.o

obj-$(CONFIG_SND_BCM2835_SOC_I2S) += snd-soc-bcm2835-i2s.o

 CYGNUS Platform Support

snd-soc-cygnus-objs := cygnus-pcm.o cygnus-ssp.o

obj-$(CONFIG_SND_SOC_CYGNUS) += snd-soc-cygnus.o

# BCM63XX Platform Support



obj-$(CONFIG_SND_BCM63XX_I2S_WHISTLER) += snd-soc-63xx.o
 SPDX-License-Identifier: GPL-2.0-only

 SYNOPSYS Platform Support

obj-$(CONFIG_SND_DESIGNWARE_I2S) += designware_i2s.o

designware_i2s-$(CONFIG_SND_DESIGNWARE_PCM) += dwc-pcm.o

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



		control.o trace.o utils.o sof-audio.o stream-ipc.o

snd-sof-$(CONFIG_SND_SOC_SOF_DEBUG_PROBES) += sof-probes.o



snd-sof-pci-objs := sof-pci-dev.o

snd-sof-acpi-objs := sof-acpi-dev.o

snd-sof-of-objs := sof-of-dev.o



obj-$(CONFIG_SND_SOC_SOF_NOCODEC) += snd-sof-nocodec.o



obj-$(CONFIG_SND_SOC_SOF_OF) += snd-sof-of.o



obj-$(CONFIG_SND_SOC_SOF_IMX_TOPLEVEL) += imx/

obj-$(CONFIG_SND_SOC_SOF_XTENSA) += xtensa/

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



snd-sof-xtensa-dsp-objs := core.o

obj-$(CONFIG_SND_SOC_SOF_XTENSA) += snd-sof-xtensa-dsp.o

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



snd-sof-acpi-intel-bdw-objs := bdw.o

snd-sof-intel-hda-common-objs := hda.o hda-loader.o hda-stream.o hda-trace.o \

				 hda-dsp.o hda-ipc.o hda-ctrl.o hda-pcm.o \

				 apl.o cnl.o tgl.o icl.o

snd-sof-intel-hda-common-$(CONFIG_SND_SOC_SOF_HDA_PROBES) += hda-probes.o



snd-sof-intel-atom-objs := atom.o

obj-$(CONFIG_SND_SOC_SOF_INTEL_ATOM_HIFI_EP) += snd-sof-intel-atom.o

obj-$(CONFIG_SND_SOC_SOF_HDA_COMMON) += snd-sof-intel-hda-common.o



snd-sof-pci-intel-tng-objs := pci-tng.o

snd-sof-pci-intel-apl-objs := pci-apl.o

snd-sof-pci-intel-cnl-objs := pci-cnl.o

snd-sof-pci-intel-icl-objs := pci-icl.o

snd-sof-pci-intel-tgl-objs := pci-tgl.o

obj-$(CONFIG_SND_SOC_SOF_INTEL_APL) += snd-sof-pci-intel-apl.o

obj-$(CONFIG_SND_SOC_SOF_INTEL_ICL) += snd-sof-pci-intel-icl.o

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)



snd-sof-imx-common-objs := imx-common.o

obj-$(CONFIG_SND_SOC_SOF_IMX8) += snd-sof-imx8.o

obj-$(CONFIG_SND_SOC_SOF_IMX_COMMON) += imx-common.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SND_SOC_MEDIATEK) += common/

obj-$(CONFIG_SND_SOC_MT2701) += mt2701/

obj-$(CONFIG_SND_SOC_MT6797) += mt6797/

obj-$(CONFIG_SND_SOC_MT8173) += mt8173/

obj-$(CONFIG_SND_SOC_MT8183) += mt8183/

obj-$(CONFIG_SND_SOC_MT8192) += mt8192/

obj-$(CONFIG_SND_SOC_MT8195) += mt8195/

# SPDX-License-Identifier: GPL-2.0

# platform driver

snd-soc-mtk-common-objs := mtk-afe-platform-driver.o mtk-afe-fe-dai.o



# SPDX-License-Identifier: GPL-2.0

# platform driver

snd-soc-mt2701-afe-objs := mt2701-afe-pcm.o mt2701-afe-clock-ctrl.o



 machine driver

obj-$(CONFIG_SND_SOC_MT2701_CS42448) += mt2701-cs42448.o

# SPDX-License-Identifier: GPL-2.0

 platform driver

snd-soc-mt8192-afe-objs := \

	mt8192-afe-pcm.o \

	mt8192-afe-clk.o \

	mt8192-dai-adda.o \

	mt8192-afe-control.o \

	mt8192-dai-i2s.o \

	mt8192-dai-pcm.o \

	mt8192-dai-tdm.o

obj-$(CONFIG_SND_SOC_MT8192) += snd-soc-mt8192-afe.o

	mt8192-mt6359-rt1015-rt5682.o

# SPDX-License-Identifier: GPL-2.0

 platform driver

snd-soc-mt8183-afe-objs := \

	mt8183-afe-pcm.o \

	mt8183-afe-clk.o \

	mt8183-dai-i2s.o \

	mt8183-dai-tdm.o \

	mt8183-dai-pcm.o \

	mt8183-dai-adda.o

obj-$(CONFIG_SND_SOC_MT8183) += snd-soc-mt8183-afe.o

# SPDX-License-Identifier: GPL-2.0

 platform driver

snd-soc-mt8195-afe-objs := \

	mt8195-dai-adda.o \





 machine driver

obj-$(CONFIG_SND_SOC_MT8195_MT6359_RT1019_RT5682) += mt8195-mt6359-rt1019-rt5682.o

# SPDX-License-Identifier: GPL-2.0

 platform driver

snd-soc-mt6797-afe-objs := \

	mt6797-afe-pcm.o \

	mt6797-afe-clk.o \

	mt6797-dai-pcm.o \

	mt6797-dai-adda.o

obj-$(CONFIG_SND_SOC_MT6797) += snd-soc-mt6797-afe.o

# machine driver

# SPDX-License-Identifier: GPL-2.0

 MTK Platform Support

obj-$(CONFIG_SND_SOC_MT8173) += mt8173-afe-pcm.o

# Machine support

obj-$(CONFIG_SND_SOC_MT8173_RT5650) += mt8173-rt5650.o

obj-$(CONFIG_SND_SOC_MT8173_RT5650_RT5676) += mt8173-rt5650-rt5676.o

 SPDX-License-Identifier: GPL-2.0-only

# STI platform support



# SPDX-License-Identifier: GPL-2.0

 MXS Platform Support

snd-soc-mxs-objs := mxs-saif.o

snd-soc-mxs-pcm-objs := mxs-pcm.o

obj-$(CONFIG_SND_MXS_SOC) += snd-soc-mxs.o snd-soc-mxs-pcm.o

# i.MX Machine Support

snd-soc-mxs-sgtl5000-objs := mxs-sgtl5000.o

obj-$(CONFIG_SND_SOC_MXS_SGTL5000) += snd-soc-mxs-sgtl5000.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SND_SUN4I_I2S) += sun4i-i2s.o

obj-$(CONFIG_SND_SUN8I_CODEC_ANALOG) += sun8i-codec-analog.o

obj-$(CONFIG_SND_SUN8I_CODEC) += sun8i-codec.o

 SPDX-License-Identifier: GPL-2.0-only

snd-soc-acp-rt5645-mach-objs := acp-rt5645.o



obj-$(CONFIG_SND_SOC_AMD_ACP6x) += yc/

 SPDX-License-Identifier: GPL-2.0+

# Vangogh platform Support

snd-pci-acp5x-objs	:= pci-acp5x.o

snd-acp5x-i2s-objs	:= acp5x-i2s.o

snd-acp5x-pcm-dma-objs	:= acp5x-pcm-dma.o

snd-soc-acp5x-mach-objs := acp5x-mach.o

obj-$(CONFIG_SND_SOC_AMD_ACP5x) += snd-pci-acp5x.o

obj-$(CONFIG_SND_SOC_AMD_ACP5x) += snd-acp5x-pcm-dma.o

 SPDX-License-Identifier: GPL-2.0+

 Renoir platform Support

obj-$(CONFIG_SND_SOC_AMD_RENOIR)	+= snd-rn-pci-acp3x.o

obj-$(CONFIG_SND_SOC_AMD_RENOIR)	+= snd-acp3x-pdm-dma.o

obj-$(CONFIG_SND_SOC_AMD_RENOIR_MACH)	+= snd-acp3x-rn.o

 SPDX-License-Identifier: GPL-2.0+

# Yellow Carp platform Support

snd-pci-acp6x-objs	:= pci-acp6x.o

snd-acp6x-pdm-dma-objs	:= acp6x-pdm-dma.o

snd-soc-acp6x-mach-objs := acp6x-mach.o

obj-$(CONFIG_SND_SOC_AMD_ACP6x) += snd-pci-acp6x.o

 SPDX-License-Identifier: GPL-2.0+

# Raven Ridge platform Support

snd-pci-acp3x-objs	:= pci-acp3x.o

snd-acp3x-pcm-dma-objs	:= acp3x-pcm-dma.o

snd-acp3x-i2s-objs	:= acp3x-i2s.o

obj-$(CONFIG_SND_SOC_AMD_ACP3x)	 += snd-pci-acp3x.o

obj-$(CONFIG_SND_SOC_AMD_ACP3x)	 += snd-acp3x-pcm-dma.o

obj-$(CONFIG_SND_SOC_AMD_ACP3x)	 += snd-acp3x-i2s.o

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)

 This file is provided under a dual BSD/GPLv2 license. When using or

 redistributing this file, you may do so under either license.



 Copyright(c) 2021 Advanced Micro Devices, Inc. All rights reserved.



common acp driver

snd-acp-pcm-objs     := acp-platform.o

snd-acp-i2s-objs     := acp-i2s.o

platform specific driver



machine specific driver

snd-acp-mach-objs     := acp-mach-common.o

snd-acp-legacy-mach-objs     := acp-legacy-mach.o

snd-acp-sof-mach-objs     := acp-sof-mach.o

obj-$(CONFIG_SND_SOC_AMD_ACP_PCM) += snd-acp-pcm.o



obj-$(CONFIG_SND_AMD_ASOC_RENOIR) += snd-acp-renoir.o

obj-$(CONFIG_SND_SOC_AMD_LEGACY_MACH) += snd-acp-legacy-mach.o

# SPDX-License-Identifier: GPL-2.0

 MPC8610 HPCD Machine Support

obj-$(CONFIG_SND_SOC_MPC8610_HPCD) += snd-soc-mpc8610-hpcd.o

# P1022 DS Machine Support

snd-soc-p1022-ds-objs := p1022_ds.o



# P1022 RDK Machine Support

snd-soc-p1022-rdk-objs := p1022_rdk.o



# Freescale SSI/DMA/SAI/SPDIF Support

snd-soc-fsl-audmix-objs := fsl_audmix.o

snd-soc-fsl-asoc-card-objs := fsl-asoc-card.o

snd-soc-fsl-ssi-y := fsl_ssi.o

snd-soc-fsl-ssi-$(CONFIG_DEBUG_FS) += fsl_ssi_dbg.o

snd-soc-fsl-spdif-objs := fsl_spdif.o

snd-soc-fsl-esai-objs := fsl_esai.o

snd-soc-fsl-micfil-objs := fsl_micfil.o

snd-soc-fsl-utils-objs := fsl_utils.o

snd-soc-fsl-dma-objs := fsl_dma.o

snd-soc-fsl-mqs-objs := fsl_mqs.o

snd-soc-fsl-easrc-objs := fsl_easrc.o

snd-soc-fsl-xcvr-objs := fsl_xcvr.o

snd-soc-fsl-aud2htx-objs := fsl_aud2htx.o

snd-soc-fsl-rpmsg-objs := fsl_rpmsg.o

obj-$(CONFIG_SND_SOC_FSL_AUDMIX) += snd-soc-fsl-audmix.o

obj-$(CONFIG_SND_SOC_FSL_ASRC) += snd-soc-fsl-asrc.o

obj-$(CONFIG_SND_SOC_FSL_SSI) += snd-soc-fsl-ssi.o

obj-$(CONFIG_SND_SOC_FSL_ESAI) += snd-soc-fsl-esai.o

obj-$(CONFIG_SND_SOC_FSL_UTILS) += snd-soc-fsl-utils.o

obj-$(CONFIG_SND_SOC_FSL_EASRC) += snd-soc-fsl-easrc.o

obj-$(CONFIG_SND_SOC_FSL_XCVR) += snd-soc-fsl-xcvr.o

obj-$(CONFIG_SND_SOC_FSL_RPMSG) += snd-soc-fsl-rpmsg.o

# MPC5200 Platform Support

obj-$(CONFIG_SND_SOC_MPC5200_I2S) += mpc5200_psc_i2s.o



# MPC5200 Machine Support

obj-$(CONFIG_SND_MPC52xx_SOC_PCM030) += pcm030-audio-fabric.o

obj-$(CONFIG_SND_MPC52xx_SOC_EFIKA) += efika-audio-fabric.o

 i.MX Platform Support

obj-$(CONFIG_SND_SOC_IMX_AUDMUX) += snd-soc-imx-audmux.o

obj-$(CONFIG_SND_SOC_IMX_PCM_FIQ) += imx-pcm-fiq.o

obj-$(CONFIG_SND_SOC_IMX_AUDIO_RPMSG) += imx-audio-rpmsg.o



 i.MX Machine Support



obj-$(CONFIG_SND_SOC_IMX_ES8328) += snd-soc-imx-es8328.o

obj-$(CONFIG_SND_SOC_IMX_SPDIF) += snd-soc-imx-spdif.o

obj-$(CONFIG_SND_SOC_IMX_HDMI) += snd-soc-imx-hdmi.o

obj-$(CONFIG_SND_SOC_IMX_CARD) += snd-soc-imx-card.o

# SPDX-License-Identifier: GPL-2.0

 SPEAR Platform Support



obj-$(CONFIG_SND_SPEAR_SPDIF_IN) += snd-soc-spear-spdif-in.o

# SPDX-License-Identifier: GPL-2.0

 Ux500 Platform Support



obj-$(CONFIG_SND_SOC_UX500_PLAT_MSP_I2S) += snd-soc-ux500-plat-msp-i2s.o

snd-soc-ux500-plat-dma-objs := ux500_pcm.o



obj-$(CONFIG_SND_SOC_UX500_MACH_MOP500) += snd-soc-ux500-mach-mop500.o

# SPDX-License-Identifier: GPL-2.0

 Tegra platform Support

snd-soc-tegra-utils-objs += tegra_asoc_utils.o

snd-soc-tegra20-ac97-objs := tegra20_ac97.o

snd-soc-tegra20-das-objs := tegra20_das.o

snd-soc-tegra20-i2s-objs := tegra20_i2s.o

snd-soc-tegra20-spdif-objs := tegra20_spdif.o

snd-soc-tegra30-ahub-objs := tegra30_ahub.o

snd-soc-tegra30-i2s-objs := tegra30_i2s.o

snd-soc-tegra210-ahub-objs := tegra210_ahub.o

snd-soc-tegra210-dmic-objs := tegra210_dmic.o

snd-soc-tegra210-i2s-objs := tegra210_i2s.o

snd-soc-tegra186-dspk-objs := tegra186_dspk.o

snd-soc-tegra210-admaif-objs := tegra210_admaif.o

snd-soc-tegra210-mvc-objs := tegra210_mvc.o

snd-soc-tegra210-sfc-objs := tegra210_sfc.o

snd-soc-tegra210-amx-objs := tegra210_amx.o

snd-soc-tegra210-adx-objs := tegra210_adx.o

snd-soc-tegra210-mixer-objs := tegra210_mixer.o

obj-$(CONFIG_SND_SOC_TEGRA) += snd-soc-tegra-pcm.o

obj-$(CONFIG_SND_SOC_TEGRA20_DAS) += snd-soc-tegra20-das.o

obj-$(CONFIG_SND_SOC_TEGRA20_SPDIF) += snd-soc-tegra20-spdif.o

obj-$(CONFIG_SND_SOC_TEGRA30_I2S) += snd-soc-tegra30-i2s.o

obj-$(CONFIG_SND_SOC_TEGRA210_AHUB) += snd-soc-tegra210-ahub.o

obj-$(CONFIG_SND_SOC_TEGRA186_DSPK) += snd-soc-tegra186-dspk.o

obj-$(CONFIG_SND_SOC_TEGRA210_MVC) += snd-soc-tegra210-mvc.o

obj-$(CONFIG_SND_SOC_TEGRA210_AMX) += snd-soc-tegra210-amx.o

obj-$(CONFIG_SND_SOC_TEGRA210_MIXER) += snd-soc-tegra210-mixer.o

 Tegra machine Support

snd-soc-tegra-machine-objs := tegra_asoc_machine.o

snd-soc-tegra-audio-graph-card-objs := tegra_audio_graph_card.o

obj-$(CONFIG_SND_SOC_TEGRA_WM8903) += snd-soc-tegra-wm8903.o

obj-$(CONFIG_SND_SOC_TEGRA_AUDIO_GRAPH_CARD) += snd-soc-tegra-audio-graph-card.o

# SPDX-License-Identifier: GPL-2.0

# Platform drivers

snd-soc-ti-sdma-objs := sdma-pcm.o



obj-$(CONFIG_SND_SOC_TI_SDMA_PCM) += snd-soc-ti-sdma.o



# CPU DAI drivers

snd-soc-davinci-asp-objs := davinci-i2s.o

snd-soc-davinci-mcasp-objs := davinci-mcasp.o

snd-soc-davinci-vcif-objs := davinci-vcif.o

snd-soc-omap-dmic-objs := omap-dmic.o

snd-soc-omap-mcbsp-objs := omap-mcbsp.o omap-mcbsp-st.o

snd-soc-omap-mcpdm-objs := omap-mcpdm.o

obj-$(CONFIG_SND_SOC_DAVINCI_ASP) += snd-soc-davinci-asp.o

obj-$(CONFIG_SND_SOC_DAVINCI_VCIF) += snd-soc-davinci-vcif.o

obj-$(CONFIG_SND_SOC_OMAP_MCBSP) += snd-soc-omap-mcbsp.o



# Machine drivers

snd-soc-davinci-evm-objs := davinci-evm.o

snd-soc-n810-objs := n810.o

snd-soc-rx51-objs := rx51.o

snd-soc-omap3pandora-objs := omap3pandora.o

snd-soc-omap-twl4030-objs := omap-twl4030.o

snd-soc-omap-abe-twl6040-objs := omap-abe-twl6040.o

snd-soc-ams-delta-objs := ams-delta.o

snd-soc-omap-hdmi-objs := omap-hdmi.o

snd-soc-osk5912-objs := osk5912.o

snd-soc-j721e-evm-objs := j721e-evm.o

obj-$(CONFIG_SND_SOC_DAVINCI_EVM) += snd-soc-davinci-evm.o

obj-$(CONFIG_SND_SOC_NOKIA_RX51) += snd-soc-rx51.o

obj-$(CONFIG_SND_SOC_OMAP3_PANDORA) += snd-soc-omap3pandora.o

obj-$(CONFIG_SND_SOC_OMAP3_TWL4030) += snd-soc-omap-twl4030.o

obj-$(CONFIG_SND_SOC_OMAP_HDMI) += snd-soc-omap-hdmi.o

obj-$(CONFIG_SND_SOC_OMAP_OSK5912) += snd-soc-osk5912.o

# SPDX-License-Identifier: GPL-2.0

 Spreadtrum Audio Support





obj-$(CONFIG_SND_SOC_SPRD) += snd-soc-sprd-platform.o

obj-$(CONFIG_SND_SOC_SPRD_MCDT) += sprd-mcdt.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SND_SOC_IMG_I2S_OUT) += img-i2s-out.o

obj-$(CONFIG_SND_SOC_IMG_SPDIF_IN) += img-spdif-in.o



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





snd-ad1889-objs := ad1889.o

snd-als300-objs := als300.o

snd-als4000-objs := als4000.o

snd-atiixp-objs := atiixp.o

snd-atiixp-modem-objs := atiixp_modem.o

snd-azt3328-objs := azt3328.o

snd-bt87x-objs := bt87x.o

snd-cmipci-objs := cmipci.o

snd-cs4281-objs := cs4281.o

snd-cs5530-objs := cs5530.o



 Toplevel Module Dependency

obj-$(CONFIG_SND_AD1889) += snd-ad1889.o

obj-$(CONFIG_SND_ALS4000) += snd-als4000.o

obj-$(CONFIG_SND_ATIIXP_MODEM) += snd-atiixp-modem.o

obj-$(CONFIG_SND_BT87X) += snd-bt87x.o

obj-$(CONFIG_SND_CS4281) += snd-cs4281.o

obj-$(CONFIG_SND_ENS1370) += snd-ens1370.o

obj-$(CONFIG_SND_ES1938) += snd-es1938.o

obj-$(CONFIG_SND_FM801) += snd-fm801.o

obj-$(CONFIG_SND_INTEL8X0M) += snd-intel8x0m.o

obj-$(CONFIG_SND_RME32) += snd-rme32.o

obj-$(CONFIG_SND_SIS7019) += snd-sis7019.o

obj-$(CONFIG_SND_VIA82XX) += snd-via82xx.o



	ac97/ \

	ali5451/ \

	au88x0/ \

	aw2/ \

	ctxfi/ \

	cs46xx/ \

	cs5535audio/ \

	lx6464es/ \

	echoaudio/ \

	emu10k1/ \

	hda/ \

	ice1712/ \

	mixart/ \

	nm256/ \

	ymfpci/ \

	vx222/

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_ALI5451) += snd-ali5451.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





snd-rme9652-objs := rme9652.o

snd-hdsp-objs := hdsp.o

snd-hdspm-objs := hdspm.o

# Toplevel Module Dependency

obj-$(CONFIG_SND_HDSP) += snd-hdsp.o

obj-$(CONFIG_SND_HDSPM) +=snd-hdspm.o

 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only

	hpicmn.o hpifunc.o hpidebug.o hpidspcd.o\



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





		    irq.o memory.o voice.o emumpu401.o emupcm.o io.o \

		    emumixer.o emufx.o timer.o p16v.o

snd-emu10k1-synth-objs := emu10k1_synth.o emu10k1_callback.o emu10k1_patch.o

snd-emu10k1x-objs := emu10k1x.o

# Toplevel Module Dependency

obj-$(CONFIG_SND_EMU10K1_SEQ) += snd-emu10k1-synth.o

 SPDX-License-Identifier: GPL-2.0-only

	ctsrc.o ctamixer.o ctdaio.o ctimap.o cthardware.o cttimer.o \



# SPDX-License-Identifier: GPL-2.0

snd-oxygen-lib-objs := oxygen_io.o oxygen_lib.o oxygen_mixer.o oxygen_pcm.o

snd-oxygen-objs := oxygen.o xonar_dg_mixer.o xonar_dg.o

snd-se6x-objs := se6x.o

snd-virtuoso-objs := virtuoso.o xonar_lib.o \

	xonar_pcm179x.o xonar_cs43xx.o xonar_wm87x6.o xonar_hdmi.o

obj-$(CONFIG_SND_OXYGEN_LIB) += snd-oxygen-lib.o

obj-$(CONFIG_SND_SE6X) += snd-se6x.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SND_LX6464ES) += snd-lx6464es.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA

 Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>





snd-ice17xx-ak4xxx-objs := ak4xxx.o

snd-ice1724-objs := ice1724.o amp.o revo.o aureon.o vt1720_mobo.o pontis.o prodigy192.o prodigy_hifi.o juli.o phase.o wtm.o se.o maya44.o quartet.o psc724.o wm8766.o wm8776.o

# Toplevel Module Dependency

obj-$(CONFIG_SND_ICE1712) += snd-ice1712.o snd-ice17xx-ak4xxx.o

obj-$(CONFIG_SND_ICE1724) += snd-ice1724.o snd-ice17xx-ak4xxx.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_NM256) += snd-nm256.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_AC97_CODEC) += snd-ac97-codec.o

# SPDX-License-Identifier: GPL-2.0

snd-hda-intel-objs := hda_intel.o

snd-hda-tegra-objs := hda_tegra.o

snd-hda-codec-y := hda_bind.o hda_codec.o hda_jack.o hda_auto_parser.o hda_sysfs.o

snd-hda-codec-y += hda_controller.o

snd-hda-codec-$(CONFIG_SND_PROC_FS) += hda_proc.o

snd-hda-codec-$(CONFIG_SND_HDA_HWDEP) += hda_hwdep.o



 for trace-points

CFLAGS_hda_intel.o := -I$(src)

snd-hda-codec-idt-objs :=	patch_sigmatel.o

snd-hda-codec-si3054-objs :=	patch_si3054.o

snd-hda-codec-cirrus-objs :=	patch_cirrus.o

snd-hda-codec-cs8409-objs :=	patch_cs8409.o patch_cs8409-tables.o

snd-hda-codec-ca0110-objs :=	patch_ca0110.o

snd-hda-codec-ca0132-objs :=	patch_ca0132.o

snd-hda-codec-conexant-objs :=	patch_conexant.o

snd-hda-codec-via-objs :=	patch_via.o

snd-hda-codec-hdmi-objs :=	patch_hdmi.o hda_eld.o

 common driver

obj-$(CONFIG_SND_HDA) := snd-hda-codec.o

 codec drivers

obj-$(CONFIG_SND_HDA_GENERIC) += snd-hda-codec-generic.o

obj-$(CONFIG_SND_HDA_CODEC_CMEDIA) += snd-hda-codec-cmedia.o

obj-$(CONFIG_SND_HDA_CODEC_SI3054) += snd-hda-codec-si3054.o

obj-$(CONFIG_SND_HDA_CODEC_CS8409) += snd-hda-codec-cs8409.o

obj-$(CONFIG_SND_HDA_CODEC_CA0132) += snd-hda-codec-ca0132.o

obj-$(CONFIG_SND_HDA_CODEC_VIA) += snd-hda-codec-via.o



 this must be the last entry after codec drivers;

# otherwise the codec patches won't be hooked before the PCI probe

 when built in kernel

obj-$(CONFIG_SND_HDA_INTEL) += snd-hda-intel.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_YMFPCI) += snd-ymfpci.o

 SPDX-License-Identifier: GPL-2.0-only

snd-aw2-objs := aw2-alsa.o aw2-saa7146.o

obj-$(CONFIG_SND_AW2) += snd-aw2.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_KORG1212) += snd-korg1212.o

 SPDX-License-Identifier: GPL-2.0-only

snd-pcxhr-objs := pcxhr.o pcxhr_hwdep.o pcxhr_mixer.o pcxhr_core.o pcxhr_mix22.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ALSA Echoaudio soundcard drivers

# Copyright (c) 2003 by Giuliano Pochini <pochini@shiny.it>

#



obj-$(CONFIG_SND_GINA20) += snd-gina20.o

obj-$(CONFIG_SND_DARLA24) += snd-darla24.o

obj-$(CONFIG_SND_LAYLA24) += snd-layla24.o

obj-$(CONFIG_SND_MIA) += snd-mia.o

obj-$(CONFIG_SND_INDIGO) += snd-indigo.o

obj-$(CONFIG_SND_INDIGODJ) += snd-indigodj.o

obj-$(CONFIG_SND_INDIGODJX) += snd-indigodjx.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#

snd-cs46xx-$(CONFIG_SND_CS46XX_NEW_DSP) += dsp_spos.o dsp_spos_scb_lib.o

# Toplevel Module Dependency

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for cs5535audio

#

snd-cs5535audio-y := cs5535audio.o cs5535audio_pcm.o

snd-cs5535audio-$(CONFIG_OLPC) += cs5535audio_olpc.o

# Toplevel Module Dependency

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ALSA

# Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>

#



 Toplevel Module Dependency

obj-$(CONFIG_SND_TRIDENT) += snd-trident.o

# SPDX-License-Identifier: GPL-2.0

snd-au8810-objs := au8810.o

snd-au8820-objs := au8820.o

snd-au8830-objs := au8830.o

obj-$(CONFIG_SND_AU8810) += snd-au8810.o

obj-$(CONFIG_SND_AU8830) += snd-au8830.o

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

 Some of the tools (perf) use same make variables

 as in kernel build.





help:

	@echo '  acpi                   - ACPI tools'

	@echo '  cgroup                 - cgroup tools'

	@echo '  counter                - counter tools'

	@echo '  cpupower               - a tool for all things x86 CPU power'

	@echo '  debugging              - tools for debugging'

	@echo '  firmware               - Firmware tools'

	@echo '  gpio                   - GPIO tools'

	@echo '  kvm_stat               - top-like utility for displaying kvm statistics'

	@echo '  leds                   - LEDs  tools'

	@echo '  objtool                - an ELF object analysis tool'

	@echo '  pci                    - PCI tools'

	@echo '  perf                   - Linux performance measurement and analysis tool'

	@echo '  bootconfig             - boot config tool'

	@echo '  spi                    - spi tools'

	@echo '  tracing                - misc tracing tools'

	@echo '  x86_energy_perf_policy - Intel energy policy tool'

	@echo ''

	@echo ' $$ make -C tools/ <tool>_install'

	@echo ''

	@echo '  from the kernel command line to build and install one of'

	@echo '  $$ make tools/all'

	@echo ''

	@echo '  $$ make tools/install'

	@echo ''

	@echo 'Cleaning targets:'

	@echo ''

	@echo '    the respective build directory.'

	@echo '  clean: a summary clean target to clean _all_ folders'



cpupower: FORCE

	$(call descend,power/$@)





libapi: FORCE



 The perf build does not follow the descend function setup,

 invoking it via it's own make rule.

PERF_O   = $(if $(O),$(O)/tools/perf,)







tmon: FORCE

	$(call descend,thermal/$@)

	$(call descend,laptop/$@)



		virtio vm bpf x86_energy_perf_policy \



acpi_install:

	$(call descend,power/$(@:_install=),install)









tmon_install:

	$(call descend,thermal/$(@:_install=),install)

	$(call descend,laptop/$(@:_install=),install)



		perf_install selftests_install turbostat_install usb_install \

		tmon_install freefall_install objtool_install kvm_stat_install \



acpi_clean:

	$(call descend,power/acpi,clean)



cgroup_clean counter_clean hv_clean firewire_clean bootconfig_clean spi_clean usb_clean virtio_clean vm_clean wmi_clean bpf_clean iio_clean gpio_clean objtool_clean leds_clean pci_clean firmware_clean debugging_clean tracing_clean:

	$(call descend,$(@:_clean=),clean)

	$(call descend,lib/api,clean)

	$(call descend,lib/bpf,clean)

libsubcmd_clean:

	$(call descend,lib/subcmd,clean)







tmon_clean:

	$(call descend,thermal/tmon,clean)

	$(call descend,laptop/freefall,clean)

build_clean:



clean: acpi_clean cgroup_clean counter_clean cpupower_clean hv_clean firewire_clean \

		vm_clean bpf_clean iio_clean x86_energy_perf_policy_clean tmon_clean \

		freefall_clean build_clean libbpf_clean libsubcmd_clean \

		intel-speed-select_clean tracing_clean

# SPDX-License-Identifier: GPL-2.0

CC := $(CROSS_COMPILE)gcc

CFLAGS := -I../../usr/include

PROGS := getdelays



	rm -fr $(PROGS)

# SPDX-License-Identifier: GPL-2.0

include ../scripts/Makefile.include

bindir ?= /usr/bin

 This will work when gpio is built in tools env. where srctree

# isn't set and when invoked from selftests build, where srctree

 is set to ".". building_out_of_srctree is undefined for in srctree

# builds

srctree := $(patsubst %/,%,$(dir $(CURDIR)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

endif

# Do not use make's built-in rules

# (this improves performance and avoids hard-to-debug behaviour);

MAKEFLAGS += -r

override CFLAGS += -O2 -Wall -g -D_GNU_SOURCE -I$(OUTPUT)include







#

 We need the following to be outside of kernel tree



$(OUTPUT)include/linux/gpio.h: ../../include/uapi/linux/gpio.h

	mkdir -p $(OUTPUT)include/linux 2>&1 || true





GPIO_UTILS_IN := $(OUTPUT)gpio-utils-in.o

$(GPIO_UTILS_IN): prepare FORCE



#

 lsgpio



$(LSGPIO_IN): prepare FORCE $(OUTPUT)gpio-utils-in.o



#

# gpio-hammer

#

GPIO_HAMMER_IN := $(OUTPUT)gpio-hammer-in.o

$(GPIO_HAMMER_IN): prepare FORCE $(OUTPUT)gpio-utils-in.o

	$(Q)$(MAKE) $(build)=gpio-hammer

$(OUTPUT)gpio-hammer: $(GPIO_HAMMER_IN)

	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@



# gpio-event-mon

#

GPIO_EVENT_MON_IN := $(OUTPUT)gpio-event-mon-in.o

	$(Q)$(MAKE) $(build)=gpio-event-mon

$(OUTPUT)gpio-event-mon: $(GPIO_EVENT_MON_IN)

	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@



# gpio-watch

#

GPIO_WATCH_IN := $(OUTPUT)gpio-watch-in.o

$(GPIO_WATCH_IN): prepare FORCE



	rm -f $(ALL_PROGRAMS)

	find $(if $(OUTPUT),$(OUTPUT),.) -name '*.o' -delete -o -name '\.*.d' -delete

install: $(ALL_PROGRAMS)

	for program in $(ALL_PROGRAMS); do		\





.PHONY: all install clean FORCE prepare

# SPDX-License-Identifier: GPL-2.0

# Makefile for firmware tools



%: %.c

	$(CC) $(CFLAGS) -o $@ $^

clean:



.PHONY: all clean

# SPDX-License-Identifier: GPL-2.0

CC := $(CROSS_COMPILE)gcc

CFLAGS := -I../../usr/include

PROGS := crc32hash



	rm -fr $(PROGS)

# SPDX-License-Identifier: GPL-2.0

srctree := $(patsubst %/,%,$(dir $(CURDIR)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

endif

include $(srctree)/tools//scripts/Makefile.include

  $(if $(or $(findstring environment,$(origin $(1))),\

            $(findstring command line,$(origin $(1)))),,\



$(call allow-override,CC,$(CROSS_COMPILE)gcc)



export HOSTCC HOSTLD HOSTAR

else

  Q = @

endif

export Q srctree CC LD





 Make sure there's anything to clean,

# feature contains check for existing OUTPUT

TMP_O := $(if $(OUTPUT),$(OUTPUT)feature/,./)

clean:

	$(Q)rm -f $(OUTPUT)fixdep

	$(Q)$(MAKE) -C feature OUTPUT=$(TMP_O) clean >/dev/null

endif

	$(Q)$(MAKE) $(build)=fixdep

	$(QUIET_LINK)$(HOSTCC) $(KBUILD_HOSTLDFLAGS) -o $@ $<

FORCE:

# SPDX-License-Identifier: GPL-2.0



FILES=                                          \

         test-all.bin                           \

         test-backtrace.bin                     \

         test-bionic.bin                        \

         test-dwarf.bin                         \

         test-dwarf_getlocations.bin            \

         test-eventfd.bin                       \

         test-fortify-source.bin                \

         test-get_current_dir_name.bin          \

         test-glibc.bin                         \

         test-gtk2.bin                          \

         test-gtk2-infobar.bin                  \

         test-hello.bin                         \

         test-libaudit.bin                      \

         test-libbfd.bin                        \

         test-libbfd-buildid.bin		\

         test-disassembler-four-args.bin        \

         test-libcap.bin			\

         test-libelf.bin                        \

         test-libelf-getphdrnum.bin             \

         test-libelf-gelf_getnote.bin           \

         test-libelf-getshdrstrndx.bin          \

         test-libdebuginfod.bin                 \

         test-libnuma.bin                       \

         test-numa_num_possible_cpus.bin        \

         test-libperl.bin                       \

         test-libpython.bin                     \

         test-libpython-version.bin             \

         test-libslang.bin                      \

         test-libslang-include-subdir.bin       \

         test-libtraceevent.bin                 \

         test-libtracefs.bin                    \

         test-libcrypto.bin                     \

         test-libunwind.bin                     \

         test-libunwind-debug-frame.bin         \

         test-libunwind-x86.bin                 \

         test-libunwind-x86_64.bin              \

         test-libunwind-arm.bin                 \

         test-libunwind-aarch64.bin             \

         test-libunwind-debug-frame-arm.bin     \

         test-libunwind-debug-frame-aarch64.bin \

         test-pthread-attr-setaffinity-np.bin   \

         test-gettid.bin			\

         test-jvmti-cmlr.bin			\

         test-setns.bin				\

         test-clang.bin				\

         test-llvm.bin				\

         test-libaio.bin			\

         test-libzstd.bin			\







all: $(FILES)

__BUILD = $(CC) $(CFLAGS) -MD -Wall -Werror -o $@ $(patsubst %.bin,%.c,$(@F)) $(LDFLAGS)



__BUILDXX = $(CXX) $(CXXFLAGS) -MD -Wall -Werror -o $@ $(patsubst %.bin,%.cpp,$(@F)) $(LDFLAGS)



###############################

$(OUTPUT)test-all.bin:

	$(BUILD) -fstack-protector-all -O2 -D_FORTIFY_SOURCE=2 -ldw -lelf -lnuma -lelf -lslang $(FLAGS_PERL_EMBED) $(FLAGS_PYTHON_EMBED) -DPACKAGE='"perf"' -lbfd -ldl -lz -llzma -lzstd -lcap

$(OUTPUT)test-hello.bin:

	$(BUILD)

$(OUTPUT)test-pthread-attr-setaffinity-np.bin:

	$(BUILD) -D_GNU_SOURCE -lpthread

$(OUTPUT)test-pthread-barrier.bin:

	$(BUILD) -lpthread



$(OUTPUT)test-fortify-source.bin:

	$(BUILD) -O2 -D_FORTIFY_SOURCE=2



$(OUTPUT)test-libcap.bin:

	$(BUILD) -lcap





$(OUTPUT)test-get_current_dir_name.bin:

	$(BUILD)

$(OUTPUT)test-glibc.bin:

	$(BUILD)





$(OUTPUT)test-libopencsd.bin:

	$(BUILD) # -lopencsd_c_api -lopencsd provided by

 $(FEATURE_CHECK_LDFLAGS-libopencsd)



DWARFLIBS := -ldw

ifeq ($(findstring -static,${LDFLAGS}),-static)

DWARFLIBS += -lelf -lebl -lz -llzma -lbz2

endif

$(OUTPUT)test-dwarf.bin:



$(OUTPUT)test-dwarf_getlocations.bin:







$(OUTPUT)test-libelf-getshdrstrndx.bin:

	$(BUILD) -lelf

$(OUTPUT)test-libdebuginfod.bin:



	$(BUILD) -lnuma

	$(BUILD) -lnuma

$(OUTPUT)test-libunwind.bin:

	$(BUILD) -lelf

$(OUTPUT)test-libunwind-debug-frame.bin:

	$(BUILD) -lelf

	$(BUILD) -lelf -lunwind-x86



	$(BUILD) -lelf -lunwind-arm

$(OUTPUT)test-libunwind-aarch64.bin:



	$(BUILD) -lelf -lunwind-arm

$(OUTPUT)test-libunwind-debug-frame-aarch64.bin:



$(OUTPUT)test-libaudit.bin:

	$(BUILD) -laudit





	$(BUILD) -ltraceevent



	$(BUILD) -lcrypto

	$(BUILD) $(shell $(PKG_CONFIG) --libs --cflags gtk+-2.0 2>/dev/null) -Wno-deprecated-declarations



grep-libs  = $(filter -l%,$(1))

strip-libs = $(filter-out -l%,$(1))

PERL_EMBED_LDFLAGS = $(call strip-libs,$(PERL_EMBED_LDOPTS))

PERL_EMBED_CCOPTS = `perl -MExtUtils::Embed -e ccopts 2>/dev/null`









$(OUTPUT)test-libbfd.bin:

	$(BUILD) -DPACKAGE='"perf"' -lbfd -ldl



$(OUTPUT)test-disassembler-four-args.bin:



$(OUTPUT)test-reallocarray.bin:

	$(BUILD)

	$(CC) $(CFLAGS) -Wall -Werror -o $@ test-libbfd.c -DPACKAGE='"perf"' $(LDFLAGS) -lbfd -ldl -liberty

	$(CC) $(CFLAGS) -Wall -Werror -o $@ test-libbfd.c -DPACKAGE='"perf"' $(LDFLAGS) -lbfd -ldl -liberty -lz

	$(BUILD) -liberty

$(OUTPUT)test-backtrace.bin:

	$(BUILD)

$(OUTPUT)test-timerfd.bin:

	$(BUILD)

	$(BUILD) # -ldw provided by $(FEATURE_CHECK_LDFLAGS-libdw-dwarf-unwind)

$(OUTPUT)test-libbabeltrace.bin:

	$(BUILD) # -lbabeltrace provided by $(FEATURE_CHECK_LDFLAGS-libbabeltrace)

	$(CC) -m32 -o $@ test-compile.c

$(OUTPUT)test-compile-x32.bin:

	$(CC) -mx32 -o $@ test-compile.c



$(OUTPUT)test-lzma.bin:







$(OUTPUT)test-libbpf.bin:

	$(BUILD) -lbpf

$(OUTPUT)test-sdt.bin:

	$(BUILD)

$(OUTPUT)test-cxx.bin:



$(OUTPUT)test-gettid.bin:

	$(BUILD)

$(OUTPUT)test-jvmti.bin:

	$(BUILD)



$(OUTPUT)test-llvm.bin:

		-I$(shell $(LLVM_CONFIG) --includedir) 		\

		-L$(shell $(LLVM_CONFIG) --libdir)		\

		$(shell $(LLVM_CONFIG) --system-libs)		\

		> $(@:.bin=.make.output) 2>&1

	$(BUILDXX) -std=gnu++14					\

		-I$(shell $(LLVM_CONFIG) --includedir)		\

		> $(@:.bin=.make.output) 2>&1

$(OUTPUT)test-clang.bin:

		-I$(shell $(LLVM_CONFIG) --includedir) 		\

		-L$(shell $(LLVM_CONFIG) --libdir)		\

		  -lclangFrontend -lclangEdit -lclangLex	\

		  -lclangAST -Wl,--end-group 			\

		$(shell $(LLVM_CONFIG) --system-libs)		\

		> $(@:.bin=.make.output) 2>&1



$(OUTPUT)test-libaio.bin:



	$(BUILD) -lzstd

$(OUTPUT)test-clang-bpf-co-re.bin:







###############################

clean:

	rm -f $(FILES) $(OUTPUT)*.d $(FILES:.bin=.make.output)

# SPDX-License-Identifier: GPL-2.0

export LD      := ld



ex:







ex-in.o: fixdep FORCE

	make $(build)=ex

libex-in.o: fixdep FORCE





.PHONY: FORCE

 SPDX-License-Identifier: GPL-2.0-only

PREFIX ?= /usr

SBINDIR ?= sbin







	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $<

clean:



	$(INSTALL) -D -m 755 $(TARGET) $(DESTDIR)$(PREFIX)/$(SBINDIR)/$(TARGET)

 SPDX-License-Identifier: GPL-2.0-only

LDFLAGS += -fsanitize=address -fsanitize=undefined



ifeq ($(BUILD), 32)



targets: include $(TARGETS)



	$(RM) $(TARGETS) $(OFILES) scatterlist.c linux/scatterlist.h linux/highmem.h linux/kmemleak.h linux/slab.h asm/io.h

	@rmdir asm

	@sed -e 's/^static //' -e 's/__always_inline //' -e 's/inline //' < $< > $@



include: ../../../include/linux/scatterlist.h

	@mkdir -p asm

	@touch linux/kmemleak.h

# SPDX-License-Identifier: GPL-2.0

CFLAGS += -I. -I../../include -g -Og -Wall -D_LGPL_SOURCE -fsanitize=address \

	  -fsanitize=undefined

OFILES = main.o $(CORE_OFILES) regression1.o regression2.o regression3.o \

	 regression4.o tag_check.o multiorder.o idr-test.o iteration_check.o \

	 iteration_check_2.o benchmark.o

ifndef SHIFT



ifeq ($(BUILD), 32)

	CFLAGS += -m32



targets: generated/map-shift.h $(TARGETS)



idr-test.o: ../../../lib/test_ida.c

idr-test: idr-test.o $(CORE_OFILES)

xarray: $(CORE_OFILES)



	$(RM) $(TARGETS) *.o radix-tree.c idr.c generated/map-shift.h



$(OFILES): Makefile *.h */*.h generated/map-shift.h \

	../../include/asm/*.h \

	../../../include/linux/radix-tree.h \

	../../../include/linux/idr.h



idr.c: ../../../lib/idr.c

	sed -e 's/^static //' -e 's/__always_inline //' -e 's/inline //' < $< > $@

xarray.o: ../../../lib/xarray.c ../../../lib/test_xarray.c

generated/map-shift.h:

define XA_CHUNK_SHIFT $(SHIFT)" >		\

				generated/map-shift.h;			\

	fi

# SPDX-License-Identifier: GPL-2.0

TARGETS = arm64

TARGETS += breakpoints

TARGETS += capabilities

TARGETS += cgroup

TARGETS += clone3

TARGETS += core

TARGETS += cpu-hotplug

TARGETS += filesystems

TARGETS += filesystems/binderfs

TARGETS += fpu

TARGETS += ftrace

TARGETS += ipc

TARGETS += ir

TARGETS += kcmp

TARGETS += kvm

TARGETS += landlock

TARGETS += livepatch

TARGETS += memfd

TARGETS += memory-hotplug

TARGETS += mount

TARGETS += nci

TARGETS += net/af_unix

TARGETS += net/forwarding

TARGETS += netfilter

TARGETS += nsfs

TARGETS += pid_namespace

TARGETS += openat2

TARGETS += rtc

TARGETS += sgx

TARGETS += sparc64

TARGETS += splice

TARGETS += syscall_user_dispatch

TARGETS += sysctl

TARGETS += tc-testing

TARGETS += timens

ifneq (1, $(quicktest))

TARGETS += timers

endif

TARGETS += x86

TARGETS += zram

#Please keep the TARGETS list alphabetically sorted

# Run "make quicktest=1 run_tests" or

 "make quicktest=1 kselftest" from top level Makefile



TARGETS_HOTPLUG = cpu-hotplug

TARGETS_HOTPLUG += memory-hotplug

 User can optionally provide a TARGETS skiplist.  By default we skip

 BPF since it has cutting edge build time dependencies which require

 more effort to install.

ifneq ($(SKIP_TARGETS),)

	TMP := $(filter-out $(SKIP_TARGETS), $(TARGETS))

	override TARGETS := $(TMP)

endif

 User can set FORCE_TARGETS to 1 to require all targets to be successfully

 built; make will fail if any of the targets cannot be built. If

 FORCE_TARGETS is not set (the default), make will succeed if at least one

# of the targets gets built.



# Clear LDFLAGS and MAKEFLAGS when implicit rules are missing.  This provides

 implicit rules to sub-test Makefiles which avoids build failures in test

# Makefile that don't have explicit build rules.

ifeq (,$(LINK.c))

override MAKEFLAGS =

endif

 Append kselftest to KBUILD_OUTPUT and O to avoid cluttering

 KBUILD_OUTPUT with selftest objects and headers installed

# by selftests Makefile or lib.mk.

ifdef building_out_of_srctree



ifneq ($(O),)

else

	endif

endif

 Prepare for headers install

top_srcdir ?= ../../..

include $(top_srcdir)/scripts/subarch.include

export KSFT_KHDR_INSTALL_DONE := 1



# set default goal to all, so make without a target runs all, even when

# all isn't the first target in the file.



# Install headers here once for all tests. KSFT_KHDR_INSTALL_DONE

# is used to avoid running headers_install from lib.mk.

 Invoke headers install with --no-builtin-rules to avoid circular

 dependency in "make kselftest" case. In this case, second level

# make inherits builtin-rules which will use the rule generate

 Makefile.o and runs into

# "Circular Makefile.o <- prepare dependency dropped."

# and headers_install fails and test compile fails.

#

# O= KBUILD_OUTPUT cases don't run into this error, since main Makefile

 invokes them as sub-makes and --no-builtin-rules is not necessary,

 but doesn't cause any failures. Keep it simple and use the same

# flags in both cases.

 Local build cases: "make kselftest", "make -C" - headers are installed

# in the default INSTALL_HDR_PATH usr/include.

khdr:

else



all: khdr

	for TARGET in $(TARGETS); do				\

	done; exit $$ret;

run_tests: all

		BUILD_TARGET=$$BUILD/$$TARGET;	\

		$(MAKE) OUTPUT=$$BUILD_TARGET -C $$TARGET run_tests;\



	@for TARGET in $(TARGETS_HOTPLUG); do \

	done;

run_hotplug: hotplug

		BUILD_TARGET=$$BUILD/$$TARGET;	\

		$(MAKE) OUTPUT=$$BUILD_TARGET -C $$TARGET run_full_test;\



	@for TARGET in $(TARGETS_HOTPLUG); do \

	done;

	$(MAKE) -C pstore run_crash

# Use $BUILD as the default install root. $BUILD points to the

 right output location for the following cases:

# 1. output_dir=kernel_src

 2. a separate output directory is specified using O= KBUILD_OUTPUT

 3. a separate output directory is specified using KBUILD_OUTPUT

 Avoid conflict with INSTALL_PATH set by the main Makefile



KSFT_INSTALL_PATH := $(abspath $(KSFT_INSTALL_PATH))

# Avoid changing the rest of the logic here and lib.mk.

ALL_SCRIPT := $(INSTALL_PATH)/run_kselftest.sh

TEST_LIST := $(INSTALL_PATH)/kselftest-list.txt

install: all

	@# Ask all targets to install their files

	mkdir -p $(INSTALL_PATH)/kselftest

	install -m 744 kselftest/runner.sh $(INSTALL_PATH)/kselftest/

	@ret=1;	\

	for TARGET in $(TARGETS); do \

	done; exit $$ret;



 Ask all targets to emit their test scripts

	@# While building kselftest-list.text skip also non-existent TARGET dirs:

	@# they could be the result of a build failure and should NOT be

 included in the generated runlist.

		BUILD_TARGET=$$BUILD/$$TARGET;	\

		echo -n "Emit Tests for $$TARGET\n"; \

		$(MAKE) -s --no-print-directory OUTPUT=$$BUILD_TARGET COLLECTION=$$TARGET \

	done;

	$(error Error: set INSTALL_PATH to use install)

endif

gen_tar: install

	@echo "Created ${TAR_PATH}"

clean:

		BUILD_TARGET=$$BUILD/$$TARGET;	\

		$(MAKE) OUTPUT=$$BUILD_TARGET -C $$TARGET clean;\



.PHONY: khdr all run_tests hotplug run_hotplug clean_hotplug run_pstore_crash install clean gen_tar

# SPDX-License-Identifier: GPL-2.0

CFLAGS += -O3 -Wl,-no-as-needed -Wall



 these are all "safe" tests that don't modify

 system time or require escalated privileges

	     inconsistency-check raw_skew threadtest rtcpie

		      skew_consistency clocksource-switch freq-step leap-a-day \

		      leapcrash set-tai set-2038 set-tz

TEST_GEN_PROGS_EXTENDED = $(DESTRUCTIVE_TESTS)

TEST_FILES := settings



 these tests require escalated privileges

 and may modify the system time or trigger

 other behavior like suspend

run_destructive_tests: run_tests

# SPDX-License-Identifier: GPL-2.0

 Makefile for damon selftests



TEST_FILES = _chk_dependency.sh

TEST_PROGS = debugfs_attrs.sh

# SPDX-License-Identifier: GPL-2.0

TEST_PROGS := gpio-mockup.sh



include ../lib.mk

CC = $(CROSS_COMPILE)gcc

CFLAGS = -g -Wall -O2 -D_FORTIFY_SOURCE=2

OBJS=$(SRCS:.c=.o)

all: resctrl_tests

$(OBJS): $(SRCS)

	$(CC) $(CFLAGS) -c $(SRCS)

resctrl_tests: $(OBJS)

	$(CC) $(CFLAGS) -o $@ $^



	$(RM) $(OBJS) resctrl_tests

# SPDX-License-Identifier: GPL-2.0

include ../lib.mk

uname_M := $(shell uname -m 2>/dev/null || echo not)



TEST_GEN_PROGS := $(OUTPUT)/vdso_test_gettimeofday $(OUTPUT)/vdso_test_getcpu

TEST_GEN_PROGS += $(OUTPUT)/vdso_test_abi

TEST_GEN_PROGS += $(OUTPUT)/vdso_standalone_test_x86

endif

TEST_GEN_PROGS += $(OUTPUT)/vdso_test_correctness

CFLAGS := -std=gnu99

CFLAGS_vdso_standalone_test_x86 := -nostdlib -fno-asynchronous-unwind-tables -fno-stack-protector

LDFLAGS_vdso_test_correctness := -ldl

ifeq ($(CONFIG_X86_32),y)

LDLIBS += -lgcc_s

endif

all: $(TEST_GEN_PROGS)

$(OUTPUT)/vdso_test_gettimeofday: parse_vdso.c vdso_test_gettimeofday.c

$(OUTPUT)/vdso_test_getcpu: parse_vdso.c vdso_test_getcpu.c

$(OUTPUT)/vdso_test_abi: parse_vdso.c vdso_test_abi.c

$(OUTPUT)/vdso_test_correctness: vdso_test_correctness.c

		$(LDFLAGS_vdso_test_correctness)

 SPDX-License-Identifier: GPL-2.0+

all:

	( cd ../../../..; tools/testing/selftests/rcutorture/bin/kvm.sh --duration 10 --configs TREE01 )

# SPDX-License-Identifier: GPL-2.0

all: srcu.c store_buffering

LINUX_SOURCE = ../../../../../..

modified_srcu_input = $(LINUX_SOURCE)/include/linux/srcu.h \

		      $(LINUX_SOURCE)/kernel/rcu/srcu.c

modified_srcu_output = include/linux/srcu.h srcu.c

include/linux/srcu.h: srcu.c

	awk -f modify_srcu.awk $(modified_srcu_input) $(modified_srcu_output)

store_buffering:

# SPDX-License-Identifier: GPL-2.0



	for i in ./*.pass; do \

		CBMC_FLAGS="$(CBMC_FLAGS)" sh ../test_script.sh --should-pass $$i > $$i.out 2>&1 ; \

	done

		echo $$i ; \

# SPDX-License-Identifier: GPL-2.0

CFLAGS += -Wno-nonnull

CFLAGS += -D_GNU_SOURCE

TEST_GEN_FILES := execveat.symlink execveat.denatured script subdir pipe

# Makefile is a run-time dependency, since it's accessed by the execveat test



TEST_GEN_PROGS += recursion-depth



include ../lib.mk

	mkdir -p $@

$(OUTPUT)/script:

!/bin/sh' > $@

	echo 'exit $$*' >> $@

$(OUTPUT)/execveat.symlink: $(OUTPUT)/execveat

	cd $(OUTPUT) && ln -s -f $(shell basename $<) $(shell basename $@)

	chmod -x $@

$(OUTPUT)/load_address_4096: load_address.c

	$(CC) $(CFLAGS) $(LDFLAGS) -Wl,-z,max-page-size=0x1000 -pie -static $< -o $@

	$(CC) $(CFLAGS) $(LDFLAGS) -Wl,-z,max-page-size=0x1000000 -pie -static $< -o $@

# SPDX-License-Identifier: GPL-2.0



TEST_PROGS := main.sh



include ../lib.mk

clean:

# SPDX-License-Identifier: GPL-2.0

# Makefile for mount selftests.

         -O2

TEST_PROGS := run_unprivileged_remount.sh run_nosymfollow.sh



include ../lib.mk

 SPDX-License-Identifier: GPL-2.0-only

 Makefile for firmware loading selftests

CFLAGS = -Wall \



TEST_PROGS := fw_run_tests.sh

TEST_FILES := fw_fallback.sh fw_filesystem.sh fw_lib.sh



include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

TEST_GEN_PROGS := watchdog-test

# SPDX-License-Identifier: GPL-2.0

CFLAGS += -I../../../../include/



TEST_PROGS := run_fuse_test.sh run_hugetlbfs_test.sh



VAR_CFLAGS := $(shell pkg-config fuse --cflags 2>/dev/null)

ifeq ($(VAR_CFLAGS),)



VAR_LDLIBS := $(shell pkg-config fuse --libs 2>/dev/null)

ifeq ($(VAR_LDLIBS),)

VAR_LDLIBS := -lfuse -pthread

endif



include ../lib.mk



$(OUTPUT)/memfd_test: memfd_test.c common.c

$(OUTPUT)/fuse_test: fuse_test.c common.c

EXTRA_CLEAN = $(OUTPUT)/common.o

 SPDX-License-Identifier: GPL-2.0+



LDLIBS := -lm

TEST_GEN_PROGS := test_fpu



include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

TEST_GEN_PROGS_EXTENDED := ir_loopback

APIDIR := ../../../include/uapi

CFLAGS += -Wall -O2 -I$(APIDIR)

# SPDX-License-Identifier: GPL-2.0





include ../lib.mk

# SPDX-License-Identifier: GPL-2.0



TEST_GEN_PROGS := dma_map_benchmark

# SPDX-License-Identifier: GPL-2.0





TEST_GEN_PROGS := $(src_test:.c=)











$(OUTPUT)/%_test: %_test.c $(khdr_dir)/linux/landlock.h ../kselftest_harness.h common.h

	$(LINK.c) $< $(LDLIBS) -o $@ -lcap -I$(khdr_dir)

# SPDX-License-Identifier: GPL-2.0

 Makefile for netfilter selftests



TEST_PROGS := nft_trans_stress.sh nft_fib.sh nft_nat.sh bridge_brouter.sh \

	conntrack_icmp_related.sh nft_flowtable.sh ipvs.sh \

	nft_queue.sh nft_meta.sh nf_nat_edemux.sh \

	ipip-conntrack-mtu.sh conntrack_tcp_unreplied.sh

LDLIBS = -lmnl



include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

 Makefile for powerpc selftests



 ARCH can be overridden by the user for cross compiling





GIT_VERSION = $(shell git describe --always --long --dirty || echo "unknown")



export CFLAGS

	   cache_shape		\

	   dscr			\

	   nx-gzip		\

	   pmu			\

	   signal		\

	   primitives		\

	   tm			\

	   eeh			\

	   ptrace	\



endif

all: $(SUB_DIRS)

$(SUB_DIRS):

	BUILD_TARGET=$(OUTPUT)/$@; mkdir -p $$BUILD_TARGET; $(MAKE) OUTPUT=$$BUILD_TARGET -k -C $@ all



override define RUN_TESTS

	@for TARGET in $(SUB_DIRS); do \

	done;

endef

override define INSTALL_RULE

	@for TARGET in $(SUB_DIRS); do \

	done;

endef

override define EMIT_TESTS

	@for TARGET in $(SUB_DIRS); do \

	done;

endef

		BUILD_TARGET=$(OUTPUT)/$$TARGET;	\

	done;

	rm -f tags

endef

	find . -name '*.c' -o -name '*.h' | xargs ctags

.PHONY: tags $(SUB_DIRS)

# SPDX-License-Identifier: GPL-2.0

TEST_GEN_PROGS := dscr_default_test dscr_explicit_test dscr_user_test	\

	      dscr_inherit_test dscr_inherit_exec_test dscr_sysfs_test	\

	      dscr_sysfs_thread_test

TEST_FILES := settings

include ../../lib.mk

$(OUTPUT)/dscr_default_test: LDLIBS += -lpthread

$(TEST_GEN_PROGS): ../harness.c ../utils.c

# SPDX-License-Identifier: GPL-2.0



CFLAGS += -maltivec





top_srcdir = ../../../../..



$(TEST_GEN_PROGS): ../harness.c ../utils.c signal.S

# SPDX-License-Identifier: GPL-2.0





top_srcdir = ../../../../..

# SPDX-License-Identifier: GPL-2.0







top_srcdir = ../../../../..



$(OUTPUT)/switch_endian_test: ASFLAGS += -I $(OUTPUT)



$(OUTPUT)/check-reversed.o: $(OUTPUT)/check.o

	$(CROSS_COMPILE)objcopy -j .text --reverse-bytes=4 -O binary $< $@

$(OUTPUT)/check-reversed.S: $(OUTPUT)/check-reversed.o

# SPDX-License-Identifier: GPL-2.0



EXTRA_SOURCES := ../harness.c event.c lib.c ../utils.c

include ../../lib.mk

all: $(TEST_GEN_PROGS) ebb



# loop.S can only be built 64-bit

$(OUTPUT)/count_instructions: loop.S count_instructions.c $(EXTRA_SOURCES)

$(OUTPUT)/count_stcx_fail: loop.S $(EXTRA_SOURCES)





DEFAULT_RUN_TESTS := $(RUN_TESTS)

override define RUN_TESTS

	$(DEFAULT_RUN_TESTS)



DEFAULT_EMIT_TESTS := $(EMIT_TESTS)

	$(DEFAULT_EMIT_TESTS)



DEFAULT_INSTALL_RULE := $(INSTALL_RULE)

	$(DEFAULT_INSTALL_RULE)



	TARGET=ebb; BUILD_TARGET=$$OUTPUT/$$TARGET; $(MAKE) OUTPUT=$$BUILD_TARGET -C $$TARGET clean

ebb:

	TARGET=$@; BUILD_TARGET=$$OUTPUT/$$TARGET; mkdir -p $$BUILD_TARGET; $(MAKE) OUTPUT=$$BUILD_TARGET -k -C $$TARGET all

# SPDX-License-Identifier: GPL-2.0



	$(MAKE) -C ../../

# The EBB handler is 64-bit code and everything links against it



 Toolchains may build PIE by default which breaks the assembly

no-pie-option := $(call try-run, echo 'int main() { return 0; }' | \



LDFLAGS += $(no-pie-option)

	 cycles_with_freeze_test pmc56_overflow_test		\

	 task_event_pinned_vs_ebb_test multi_ebb_procs_test	\

	 multi_counter_test pmae_handling_test			\

	 ebb_on_willing_child_test back_to_back_ebbs_test	\

	 lost_exception_test no_handler_test			\

	 cycles_with_mmcr2_test regs_access_pmccext_test

top_srcdir = ../../../../../..

include ../../../lib.mk

$(TEST_GEN_PROGS): ../../harness.c ../../utils.c ../event.c ../lib.c \

	       ebb.c ebb_handler.S trace.c busy_loop.S



$(OUTPUT)/lost_exception_test: ../lib.c

# SPDX-License-Identifier: GPL-2.0

# The loops are all 64-bit code

CFLAGS += -I$(CURDIR)









ifeq ($(build_32bit),1)

$(OUTPUT)/memcmp_32: memcmp.c

$(OUTPUT)/memcmp_32: CFLAGS += -m32



$(OUTPUT)/strlen: strlen.c string.c



TEST_GEN_PROGS += strlen_32

endif



top_srcdir = ../../../../..



$(TEST_GEN_PROGS): $(EXTRA_SOURCES)

 SPDX-License-Identifier: GPL-2.0-only

TEST_GEN_PROGS := copy_first_unaligned alignment_handler

include ../../lib.mk

$(TEST_GEN_PROGS): ../harness.c ../utils.c

# SPDX-License-Identifier: GPL-2.0

SIGNAL_CONTEXT_CHK_TESTS := tm-signal-context-chk-gpr tm-signal-context-chk-fpu \



TEST_GEN_PROGS := tm-resched-dscr tm-syscall tm-signal-msr-resv tm-signal-stack \

	tm-vmxcopy tm-fork tm-tar tm-tmspr tm-vmx-unavail tm-unavailable tm-trap \





top_srcdir = ../../../../..





CFLAGS += -mhtm

$(OUTPUT)/tm-syscall: tm-syscall-asm.S

$(OUTPUT)/tm-tmspr: CFLAGS += -pthread

$(OUTPUT)/tm-vmx-unavail: CFLAGS += -pthread -m64

$(OUTPUT)/tm-resched-dscr: ../pmu/lib.c

$(OUTPUT)/tm-trap: CFLAGS += -O0 -pthread -m64

$(OUTPUT)/tm-signal-context-force-tm: CFLAGS += -pthread -m64



SIGNAL_CONTEXT_CHK_TESTS := $(patsubst %,$(OUTPUT)/%,$(SIGNAL_CONTEXT_CHK_TESTS))

# SPDX-License-Identifier: GPL-2.0



TEST_GEN_PROGS := hugetlb_vs_thp_test subpage_prot prot_sao segv_errors wild_bctr \

		  pkey_siginfo stack_expansion_signal stack_expansion_ldst

TEST_PROGS := stress_code_patching.sh

TEST_GEN_FILES := tempfile

include ../../lib.mk

$(TEST_GEN_PROGS): ../harness.c ../utils.c

$(OUTPUT)/prot_sao: ../utils.c

$(OUTPUT)/large_vm_fork_separation: CFLAGS += -m64

$(OUTPUT)/pkey_exec_prot: CFLAGS += -m64



$(OUTPUT)/stack_expansion_signal: ../utils.c ../pmu/lib.c

$(OUTPUT)/stack_expansion_ldst: CFLAGS += -fno-stack-protector



$(OUTPUT)/tempfile:

	dd if=/dev/zero of=$@ bs=64k count=1

# SPDX-License-Identifier: GPL-2.0

              ptrace-tm-spd-vsx ptrace-tm-spr ptrace-hwbreak ptrace-pkey core-pkey \

              perf-hwbreak ptrace-syscall ptrace-perf-hwbreak

include ../../lib.mk

CFLAGS += -m64 -I../../../../../usr/include -I../tm -mhtm -fno-pie

$(OUTPUT)/ptrace-pkey $(OUTPUT)/core-pkey: child.h

$(OUTPUT)/ptrace-pkey $(OUTPUT)/core-pkey: LDLIBS += -pthread

$(TEST_GEN_PROGS): ../harness.c ../utils.c ../lib/reg.S ptrace.h

CFLAGS = -O3 -m64 -I./include -I../include

TEST_GEN_FILES := gzfht_test gunz_test

TEST_PROGS := nx-gzip-test.sh

include ../../lib.mk

$(TEST_GEN_FILES): gzip_vas.c ../utils.c

 SPDX-License-Identifier: GPL-2.0+



TEST_PROGS := mitigation-patching.sh









$(OUTPUT)/rfi_flush: flush_utils.c

$(OUTPUT)/uaccess_flush: flush_utils.c

# SPDX-License-Identifier: GPL-2.0

TEST_GEN_PROGS := cache_shape

include ../../lib.mk

$(TEST_GEN_PROGS): ../harness.c ../utils.c

 SPDX-License-Identifier: GPL-2.0-only





top_srcdir = ../../../../..



$(TEST_GEN_PROGS): ../harness.c

# SPDX-License-Identifier: GPL-2.0

# The loops are all 64-bit code

CFLAGS += -mcpu=power4

# Use our CFLAGS for the implicit .S rule & set the asm machine type



		memcpy_64_t0 memcpy_64_t1 memcpy_64_t2 \

		copyuser_64_exc_t0 copyuser_64_exc_t1 copyuser_64_exc_t2

EXTRA_SOURCES := validate.c ../harness.c stubs.S

include ../../lib.mk

$(OUTPUT)/copyuser_64_t%:	copyuser_64.S $(EXTRA_SOURCES)

		-o $@ $^

$(OUTPUT)/copyuser_p7_t%:	copyuser_power7.S $(EXTRA_SOURCES)

		-o $@ $^

 Strictly speaking, we only need the memcpy_64 test cases for big-endian

$(OUTPUT)/memcpy_64_t%:	memcpy_64.S $(EXTRA_SOURCES)

		-D COPY_LOOP=test_memcpy \

		-D SELFTEST_CASE=$(subst memcpy_64_t,,$(notdir $@)) \



	$(CC) $(CPPFLAGS) $(CFLAGS) \

		-D COPY_LOOP=test_memcpy_power7 \

		-D SELFTEST_CASE=$(subst memcpy_p7_t,,$(notdir $@)) \



$(OUTPUT)/copy_mc_64: copy_mc_64.S $(EXTRA_SOURCES)

		-o $@ $^

		copy_tofrom_user_reference.S stubs.S

		-o $@ $^

 SPDX-License-Identifier: GPL-2.0-only





top_srcdir = ../../../../..



$(TEST_GEN_PROGS): ../harness.c

# SPDX-License-Identifier: GPL-2.0



top_srcdir = ../../../../..



$(TEST_GEN_PROGS): ../harness.c

$(TEST_GEN_PROGS): CFLAGS += -O2 -g -pthread -m64 -maltivec

$(OUTPUT)/fpu_syscall: fpu_asm.S

$(OUTPUT)/fpu_signal:  fpu_asm.S

$(OUTPUT)/vmx_signal: vmx_asm.S ../utils.c

$(OUTPUT)/vsx_preempt: CFLAGS += -mvsx

$(OUTPUT)/vsx_preempt: vsx_asm.S ../utils.c

# SPDX-License-Identifier: GPL-2.0





CFLAGS += -O2

include ../../lib.mk





$(OUTPUT)/fork: LDLIBS += -lpthread

$(OUTPUT)/exec_target: CFLAGS += -static -nostartfiles

 SPDX-License-Identifier: GPL-2.0-only





top_srcdir = ../../../../..



$(TEST_GEN_PROGS): ../harness.c

 SPDX-License-Identifier: GPL-2.0-only

include ../../../build/Build.include

all:

top_srcdir = ../../../..



 For cross-builds to work, UNAME_M has to map to ARCH and arch specific

 directories and targets in this Makefile. "uname -m" doesn't map to

# arch specific sub-directory names.

#

# UNAME_M variable to used to run the compiles pointing to the right arch

 directories and build the right targets for these supported architectures.



 TEST_GEN_PROGS and LIBKVM are set using UNAME_M variable.

 LINUX_TOOL_ARCH_INCLUDE is set using ARCH variable.



# x86_64 targets are named to include x86_64 as a suffix and directories

 for includes are in x86_64 sub-directory. s390x and aarch64 follow the

 same convention. "uname -m" doesn't result in the correct mapping for

# s390x and aarch64.

#

 No change necessary for x86_64

UNAME_M := $(shell uname -m)

 Set UNAME_M for arm64 compile/install to work

ifeq ($(ARCH),arm64)

	UNAME_M := aarch64

endif

# Set UNAME_M s390x compile/install to work

ifeq ($(ARCH),s390)

	UNAME_M := s390x

endif

LIBKVM_aarch64 = lib/aarch64/processor.c lib/aarch64/ucall.c lib/aarch64/handlers.S lib/aarch64/spinlock.c lib/aarch64/gic.c lib/aarch64/gic_v3.c lib/aarch64/vgic.c

LIBKVM_s390x = lib/s390x/processor.c lib/s390x/ucall.c lib/s390x/diag318_test_handler.c

TEST_GEN_PROGS_x86_64 = x86_64/cr4_cpuid_sync_test

TEST_GEN_PROGS_x86_64 += x86_64/evmcs_test

TEST_GEN_PROGS_x86_64 += x86_64/emulator_error_test

TEST_GEN_PROGS_x86_64 += x86_64/hyperv_clock

TEST_GEN_PROGS_x86_64 += x86_64/kvm_clock_test

TEST_GEN_PROGS_x86_64 += x86_64/kvm_pv_test

TEST_GEN_PROGS_x86_64 += x86_64/mmio_warning_test

TEST_GEN_PROGS_x86_64 += x86_64/mmu_role_test

TEST_GEN_PROGS_x86_64 += x86_64/set_sregs_test

TEST_GEN_PROGS_x86_64 += x86_64/state_test

TEST_GEN_PROGS_x86_64 += x86_64/vmx_preemption_timer_test

TEST_GEN_PROGS_x86_64 += x86_64/svm_vmcall_test

TEST_GEN_PROGS_x86_64 += x86_64/sync_regs_test

TEST_GEN_PROGS_x86_64 += x86_64/userspace_msr_exit_test

TEST_GEN_PROGS_x86_64 += x86_64/vmx_dirty_log_test

TEST_GEN_PROGS_x86_64 += x86_64/vmx_set_nested_state_test

TEST_GEN_PROGS_x86_64 += x86_64/vmx_tsc_adjust_test

TEST_GEN_PROGS_x86_64 += x86_64/vmx_nested_tsc_scaling_test

TEST_GEN_PROGS_x86_64 += x86_64/xss_msr_test

TEST_GEN_PROGS_x86_64 += x86_64/vmx_pi_mmio_test

TEST_GEN_PROGS_x86_64 += x86_64/sev_migrate_tests

TEST_GEN_PROGS_x86_64 += demand_paging_test

TEST_GEN_PROGS_x86_64 += dirty_log_test

TEST_GEN_PROGS_x86_64 += hardware_disable_test

TEST_GEN_PROGS_x86_64 += kvm_create_max_vcpus

TEST_GEN_PROGS_x86_64 += memslot_perf_test

TEST_GEN_PROGS_x86_64 += kvm_binary_stats_test

TEST_GEN_PROGS_x86_64 += system_counter_offset_test

TEST_GEN_PROGS_aarch64 += aarch64/arch_timer

TEST_GEN_PROGS_aarch64 += aarch64/get-reg-list

TEST_GEN_PROGS_aarch64 += demand_paging_test

TEST_GEN_PROGS_aarch64 += kvm_create_max_vcpus

TEST_GEN_PROGS_aarch64 += kvm_page_table_test

TEST_GEN_PROGS_aarch64 += set_memory_region_test



TEST_GEN_PROGS_s390x += s390x/resets

TEST_GEN_PROGS_s390x += demand_paging_test

TEST_GEN_PROGS_s390x += kvm_create_max_vcpus

TEST_GEN_PROGS_s390x += kvm_page_table_test

TEST_GEN_PROGS_s390x += rseq_test



LIBKVM += $(LIBKVM_$(UNAME_M))

INSTALL_HDR_PATH = $(top_srcdir)/usr

LINUX_HDR_PATH = $(INSTALL_HDR_PATH)/include/

LINUX_TOOL_ARCH_INCLUDE = $(top_srcdir)/tools/arch/x86/include

LINUX_TOOL_ARCH_INCLUDE = $(top_srcdir)/tools/arch/$(ARCH)/include

endif

CFLAGS += -Wall -Wstrict-prototypes -Wuninitialized -O2 -g -std=gnu99 \

	-I$(<D) -Iinclude/$(UNAME_M) -I..

no-pie-option := $(call try-run, echo 'int main() { return 0; }' | \

        $(CC) -Werror -no-pie -x c - -o "$$TMP", -no-pie)

# On s390, build the testcases KVM-enabled



LDFLAGS += -pthread $(no-pie-option) $(pgste-option)

 After inclusion, $(OUTPUT) is defined and

# $(TEST_GEN_PROGS) starts with $(OUTPUT)/

include ../lib.mk

EXTRA_CLEAN += $(LIBKVM_C_OBJ) $(LIBKVM_S_OBJ) $(STATIC_LIBS) cscope.*



$(LIBKVM_S_OBJ): $(OUTPUT)/%.o: %.S

	$(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c $< -o $@

$(OUTPUT)/libkvm.a: $(LIBKVM_OBJS)



x := $(shell mkdir -p $(sort $(dir $(TEST_GEN_PROGS))))

all: $(STATIC_LIBS)

$(TEST_GEN_PROGS): $(STATIC_LIBS)

cscope: include_paths = $(LINUX_TOOL_INCLUDE) $(LINUX_HDR_PATH) include lib ..

cscope:

	$(RM) cscope.*

	(find $(include_paths) -name '*.h' \

	cscope -b

# SPDX-License-Identifier: GPL-2.0

#

 Copyright (C) 2015-2019 Jason A. Donenfeld <Jason@zx2c4.com>. All Rights Reserved.



PWD := $(shell pwd)

CHOST := $(shell gcc -dumpmachine)

HOST_ARCH := $(firstword $(subst -, ,$(CHOST)))

else



 Set these from the environment to override

KERNEL_PATH ?= $(PWD)/../../../../..

DISTFILES_PATH ?= $(PWD)/distfiles



MIRROR := https://download.wireguard.com/qemu-test/distfiles/



# variable name, tarball project name, version, tarball extension, default URI base

define tar_download =

$(1)_NAME := $(2)-$$($(1)_VERSION)

$(1)_TAR := $(DISTFILES_PATH)/$$($(1)_NAME)$(4)



	flock -x $$@.lock -c '[ -f $$@ ] && exit 0; wget -O $$@.tmp $(MIRROR)$(1) || wget -O $$@.tmp $(2)$(1) || rm -f $$@.tmp; [ -f $$@.tmp ] || exit 1; if echo "$(3)  $$@.tmp" | sha256sum -c -; then mv $$@.tmp $$@; else rm -f $$@.tmp; exit 71; fi'

endef

$(eval $(call tar_download,IPROUTE2,iproute2,5.6.0,.tar.xz,https://www.kernel.org/pub/linux/utils/net/iproute2/,1b5b0e25ce6e23da7526ea1da044e814ad85ba761b10dd29c2b027c056b04692))

$(eval $(call tar_download,IPTABLES,iptables,1.8.4,.tar.bz2,https://www.netfilter.org/projects/iptables/files/,993a3a5490a544c2cbf2ef15cf7e7ed21af1845baf228318d5c36ef8827e157c))

,a15720dd741d7538dd2645f9f516d193636ae4300ff7dbc8bfca757bf166490a))

$(eval $(call tar_download,WIREGUARD_TOOLS,wireguard-tools,1.0.20200206,.tar.xz,https://git.zx2c4.com/wireguard-tools/snapshot/,f5207248c6a3c3e3bfc9ab30b91c1897b00802ed861e1f9faaed873366078c64))

rwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) $(filter $(subst *,%,$2),$d))



export CPPFLAGS := -I$(BUILD_PATH)/include

STRIP := strip

$(info Cross compilation: building for $(CBUILD) using $(CHOST))

CROSS_COMPILE_FLAG := --build=$(CBUILD) --host=$(CHOST)

export CROSS_COMPILE=$(CBUILD)-

ifeq ($(ARCH),aarch64)

KERNEL_ARCH := arm64

QEMU_MACHINE := -cpu host -machine virt,gic_version=host,accel=kvm

CFLAGS += -march=armv8-a -mtune=cortex-a53

endif

QEMU_ARCH := aarch64

KERNEL_BZIMAGE := $(KERNEL_BUILD_PATH)/arch/arm64/boot/Image

ifeq ($(HOST_ARCH),$(ARCH))

else

QEMU_MACHINE := -cpu cortex-a53 -machine virt

QEMU_ARCH := arm

QEMU_MACHINE := -cpu host -machine virt,gic_version=host,accel=kvm

CFLAGS += -march=armv7-a -mtune=cortex-a15 -mabi=aapcs-linux

endif

else ifeq ($(ARCH),armeb)

KERNEL_ARCH := arm

KERNEL_BZIMAGE := $(KERNEL_BUILD_PATH)/arch/arm/boot/zImage

ifeq ($(HOST_ARCH),$(ARCH))

else

QEMU_MACHINE := -cpu cortex-a15 -machine virt

CFLAGS += -march=armv7-a -mabi=aapcs-linux # We don't pass -mtune=cortex-a15 due to a compiler bug on big endian.

else ifeq ($(ARCH),x86_64)

QEMU_ARCH := x86_64

KERNEL_ARCH := x86_64

QEMU_MACHINE := -cpu host -machine q35,accel=kvm

QEMU_MACHINE := -cpu Skylake-Server -machine q35

CFLAGS += -march=skylake-avx512

endif

KERNEL_ARCH := x86

ifeq ($(subst x86_64,i686,$(HOST_ARCH)),$(ARCH))

else

QEMU_MACHINE := -cpu coreduo -machine q35

CFLAGS += -march=prescott

endif

KERNEL_BZIMAGE := $(KERNEL_BUILD_PATH)/vmlinux

ifeq ($(HOST_ARCH),$(ARCH))

else

QEMU_MACHINE := -cpu MIPS64R2-generic -machine malta -smp 1

CFLAGS += -march=mips64r2 -EB

endif

KERNEL_BZIMAGE := $(KERNEL_BUILD_PATH)/vmlinux

ifeq ($(HOST_ARCH),$(ARCH))

else

QEMU_MACHINE := -cpu MIPS64R2-generic -machine malta -smp 1

CFLAGS += -march=mips64r2 -EL

endif

KERNEL_BZIMAGE := $(KERNEL_BUILD_PATH)/vmlinux

ifeq ($(HOST_ARCH),$(ARCH))

else

QEMU_MACHINE := -cpu 24Kf -machine malta -smp 1

CFLAGS += -march=mips32r2 -EB

endif

KERNEL_BZIMAGE := $(KERNEL_BUILD_PATH)/vmlinux

ifeq ($(HOST_ARCH),$(ARCH))

else

QEMU_MACHINE := -cpu 24Kf -machine malta -smp 1

CFLAGS += -march=mips32r2 -EL

endif

else ifeq ($(ARCH),powerpc64le)

KERNEL_ARCH := powerpc

QEMU_MACHINE := -cpu host,accel=kvm -machine pseries

QEMU_MACHINE := -machine pseries

endif

QEMU_ARCH := ppc

QEMU_MACHINE := -cpu host,accel=kvm -machine ppce500

QEMU_MACHINE := -machine ppce500

endif

CFLAGS += -mcpu=powerpc -mlong-double-64 -msecure-plt

KERNEL_BZIMAGE := $(KERNEL_BUILD_PATH)/vmlinux

KERNEL_CMDLINE := $(shell sed -n 's/CONFIG_CMDLINE=\(.*\)/\1/p' arch/m68k.config)

ifeq ($(HOST_ARCH),$(ARCH))

else

else



USERSPACE_DEPS := $(MUSL_CC) $(BUILD_PATH)/include/.installed $(BUILD_PATH)/include/linux/.installed

build: $(KERNEL_BZIMAGE)

qemu: $(KERNEL_BZIMAGE)

	rm -f $(BUILD_PATH)/result

		-nographic \

		-smp $(NR_CPUS) \

		$(QEMU_MACHINE) \

		-m $$(grep -q CONFIG_DEBUG_KMEMLEAK=y $(KERNEL_BUILD_PATH)/.config && echo 1G || echo 256M) \

		-serial stdio \

		-serial file:$(BUILD_PATH)/result \

		-kernel $<



$(BUILD_PATH)/init-cpio-spec.txt:

	mkdir -p $(BUILD_PATH)

	echo "file /init.sh $(PWD)/../netns.sh 755 0 0" >> $@

	echo "nod /dev/console 644 0 0 c 5 1" >> $@

	echo "file /bin/bash $(BASH_PATH)/bash 755 0 0" >> $@

	echo "file /bin/ip $(IPROUTE2_PATH)/ip/ip 755 0 0" >> $@

	echo "file /bin/ss $(IPROUTE2_PATH)/misc/ss 755 0 0" >> $@

	echo "file /bin/ping $(IPUTILS_PATH)/ping 755 0 0" >> $@

	echo "file /bin/ncat $(NMAP_PATH)/ncat/ncat 755 0 0" >> $@

	echo "file /bin/xtables-legacy-multi $(IPTABLES_PATH)/iptables/xtables-legacy-multi 755 0 0" >> $@

	echo "dir /lib 755 0 0" >> $@

	echo "slink /lib/ld-linux.so.1 libc.so 777 0 0" >> $@

	mkdir -p $(KERNEL_BUILD_PATH)

	cp kernel.config $(KERNEL_BUILD_PATH)/minimal.config

	cd $(KERNEL_BUILD_PATH) && ARCH=$(KERNEL_ARCH) $(KERNEL_PATH)/scripts/kconfig/merge_config.sh -n $(KERNEL_BUILD_PATH)/.config $(KERNEL_BUILD_PATH)/minimal.config



	$(MAKE) -C $(KERNEL_PATH) O=$(KERNEL_BUILD_PATH) ARCH=$(KERNEL_ARCH) CROSS_COMPILE=$(CROSS_COMPILE)

$(BUILD_PATH)/include/linux/.installed: | $(KERNEL_BUILD_PATH)/.config

	$(MAKE) -C $(KERNEL_PATH) O=$(KERNEL_BUILD_PATH) INSTALL_HDR_PATH=$(BUILD_PATH) ARCH=$(KERNEL_ARCH) CROSS_COMPILE=$(CROSS_COMPILE) headers_install

	touch $@

	$(MAKE) -C $(MUSL_PATH)

	$(STRIP) -s $@

$(BUILD_PATH)/include/.installed: $(MUSL_PATH)/lib/libc.so



	printf '#!/bin/sh\nexec "$(REAL_CC)" --specs="$(BUILD_PATH)/musl-gcc.specs" "$$@"\n' > $(BUILD_PATH)/musl-gcc



include <stdint.h>/' $(IPERF_PATH)/src/cjson.h $(IPERF_PATH)/src/timer.h

	sed -i -r 's/-p?g//g' $(IPERF_PATH)/src/Makefile*

	touch $@

$(IPERF_PATH)/src/iperf3: | $(IPERF_PATH)/.installed $(USERSPACE_DEPS)

	cd $(IPERF_PATH) && CFLAGS="$(CFLAGS) -D_GNU_SOURCE" ./configure --prefix=/ $(CROSS_COMPILE_FLAG) --enable-static --disable-shared --with-openssl=no

	$(MAKE) -C $(IPERF_PATH)

	$(STRIP) -s $@

$(WIREGUARD_TOOLS_PATH)/.installed: $(WIREGUARD_TOOLS_TAR)

	mkdir -p $(BUILD_PATH)

	flock -s $<.lock tar -C $(BUILD_PATH) -xf $<

	touch $@

$(WIREGUARD_TOOLS_PATH)/src/wg: | $(WIREGUARD_TOOLS_PATH)/.installed $(USERSPACE_DEPS)



	$(MUSL_CC) -o $@ $(CFLAGS) $(LDFLAGS) -std=gnu11 $<

	$(STRIP) -s $@

$(IPUTILS_PATH)/.installed: $(IPUTILS_TAR)

	mkdir -p $(BUILD_PATH)

	flock -s $<.lock tar -C $(BUILD_PATH) -xf $<

	touch $@

$(IPUTILS_PATH)/ping: | $(IPUTILS_PATH)/.installed $(USERSPACE_DEPS)





	$(MAKE) -C $(BASH_PATH)

	$(STRIP) -s $@

$(IPROUTE2_PATH)/.installed: $(IPROUTE2_TAR)

	mkdir -p $(BUILD_PATH)

	flock -s $<.lock tar -C $(BUILD_PATH) -xf $<

	printf 'CC:=$(CC)\nPKG_CONFIG:=pkg-config\nTC_CONFIG_XT:=n\nTC_CONFIG_ATM:=n\nTC_CONFIG_IPSET:=n\nIP_CONFIG_SETNS:=y\nHAVE_ELF:=n\nHAVE_MNL:=n\nHAVE_BERKELEY_DB:=n\nHAVE_LATEX:=n\nHAVE_PDFLATEX:=n\nCFLAGS+=-DHAVE_SETNS\n' > $(IPROUTE2_PATH)/config.mk

	printf 'lib: snapshot\n\t$$(MAKE) -C lib\nip/ip: lib\n\t$$(MAKE) -C ip ip\nmisc/ss: lib\n\t$$(MAKE) -C misc ss\n' >> $(IPROUTE2_PATH)/Makefile

	touch $@



$(IPROUTE2_PATH)/misc/ss: | $(IPROUTE2_PATH)/.installed $(USERSPACE_DEPS)

	$(MAKE) -C $(IPROUTE2_PATH) PREFIX=/ misc/ss

	$(STRIP) -s $@

$(IPTABLES_PATH)/.installed: $(IPTABLES_TAR)

	mkdir -p $(BUILD_PATH)

	flock -s $<.lock tar -C $(BUILD_PATH) -xf $<



$(IPTABLES_PATH)/iptables/xtables-legacy-multi: | $(IPTABLES_PATH)/.installed $(USERSPACE_DEPS)

	cd $(IPTABLES_PATH) && ./configure --prefix=/ $(CROSS_COMPILE_FLAG) --enable-static --disable-shared --disable-nftables --disable-bpf-compiler --disable-nfsynproxy --disable-libipq --disable-connlabel --with-kernel=$(BUILD_PATH)/include





$(NMAP_PATH)/ncat/ncat: | $(NMAP_PATH)/.installed $(USERSPACE_DEPS)

	$(MAKE) -C $(NMAP_PATH)/libpcap

	$(MAKE) -C $(NMAP_PATH)/ncat

	$(STRIP) -s $@

clean:

	rm -rf $(BUILD_PATH)

distclean: clean

	rm -rf $(DISTFILES_PATH)

menuconfig: $(KERNEL_BUILD_PATH)/.config

	$(MAKE) -C $(KERNEL_PATH) O=$(KERNEL_BUILD_PATH) ARCH=$(KERNEL_ARCH) CROSS_COMPILE=$(CROSS_COMPILE) menuconfig

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for static keys selftests

# No binaries, but make sure arg-less "make" doesn't trigger "run_tests"



TEST_PROGS := test_static_keys.sh

# SPDX-License-Identifier: GPL-2.0





include ../lib.mk

run_full_test:

	@/bin/bash ./cpu-on-off-test.sh -a || echo "cpu-hotplug selftests: [FAIL]"

clean:

# SPDX-License-Identifier: GPL-2.0

# Makefile for LKDTM regression tests



# NOTE: $(OUTPUT) won't get default value if used before lib.mk

TEST_FILES := tests.txt

TEST_GEN_PROGS = $(patsubst %,$(OUTPUT)/%.sh,$(shell awk '{print $$1}' tests.txt | sed -e 's/\#//'))



$(OUTPUT)/%: run.sh tests.txt

# SPDX-License-Identifier: GPL-2.0

SUBDIRS := functional

TEST_PROGS := run.sh



include ../lib.mk

all:

		make OUTPUT=$$BUILD_TARGET -C $$DIR $@;\

		if [ -e $$DIR/$(TEST_PROGS) ]; then \

		fi \

	done

override define INSTALL_RULE

	mkdir -p $(INSTALL_PATH)



		BUILD_TARGET=$(OUTPUT)/$$SUBDIR;	\

		mkdir $$BUILD_TARGET  -p;	\

	done;

endef

	@for DIR in $(SUBDIRS); do		\

		BUILD_TARGET=$(OUTPUT)/$$DIR;	\

		mkdir $$BUILD_TARGET  -p;	\

# SPDX-License-Identifier: GPL-2.0

INCLUDES := -I../include -I../../ -I../../../../../usr/include/ \

	-I$(KBUILD_OUTPUT)/kselftest/usr/include

CFLAGS := $(CFLAGS) -g -O2 -Wall -D_GNU_SOURCE -pthread $(INCLUDES)



	../include/atomic.h \

	../include/logging.h

TEST_GEN_FILES := \

	futex_wait_timeout \

	futex_requeue_pi_signal_restart \

	futex_wait_uninitialized_heap \

	futex_wait_private_mapped_file \

	futex_wait \

	futex_waitv

TEST_PROGS := run.sh

KSFT_KHDR_INSTALL := 1



$(TEST_GEN_FILES): $(HEADERS)

# SPDX-License-Identifier: GPL-2.0





TEST_PROGS     := test_stress.sh

TEST_GEN_PROGS += test_freezer

TEST_GEN_PROGS += test_kill



$(OUTPUT)/test_memcontrol: cgroup_util.c ../clone3/clone3_selftests.h

$(OUTPUT)/test_kmem: cgroup_util.c ../clone3/clone3_selftests.h

$(OUTPUT)/test_core: cgroup_util.c ../clone3/clone3_selftests.h

$(OUTPUT)/test_kill: cgroup_util.c ../clone3/clone3_selftests.h ../pidfd/pidfd.h

# SPDX-License-Identifier: GPL-2.0

 Makefile for pstore selftests.

 Expects pstore backend is registered.





TEST_PROGS := pstore_tests pstore_post_reboot_tests



include ../lib.mk

run_crash:

	@sh pstore_crash_test || { echo "pstore_crash_test: [FAIL]"; exit 1; }

 SPDX-License-Identifier: GPL-2.0-only



TEST_GEN_PROGS :=



include ../lib.mk

 SPDX-License-Identifier: GPL-2.0-only



TEST_GEN_PROGS := udmabuf



# SPDX-License-Identifier: GPL-2.0

 Taken from perf makefile

uname_M := $(shell uname -m 2>/dev/null || echo not)



TEST_GEN_PROGS := step_after_suspend_test

ifeq ($(ARCH),x86)

TEST_GEN_PROGS += breakpoint_test

endif



include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

CFLAGS += -static -O3 -Wl,-no-as-needed -Wall

TEST_GEN_PROGS = dmabuf-heap

# SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)

include ../lib.mk

TEST_PROGS_EXTENDED := tpm2.py tpm2_tests.py

# SPDX-License-Identifier: GPL-2.0

uname_M := $(shell uname -m 2>/dev/null || echo not)



TEST_PROGS := disable-tsc-ctxt-sw-stress-test disable-tsc-on-off-stress-test \

all: $(TEST_PROGS)



# SPDX-License-Identifier: GPL-2.0

CFLAGS += -Wl,-no-as-needed -Wall



TEST_GEN_PROGS := seccomp_bpf seccomp_benchmark

include ../lib.mk

# SPDX-License-Identifier: GPL-2.0



CFLAGS += -O2 -g -std=gnu99 -Wall



include ../lib.mk

 SPDX-License-Identifier: GPL-2.0-or-later



TEST_GEN_PROGS := rlimits-per-userns

# SPDX-License-Identifier: GPL-2.0



TEST_PROGS := zram.sh

TEST_FILES := zram01.sh zram02.sh zram_lib.sh



include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

INSTALL_HDR_PATH = $(top_srcdir)/usr

LINUX_HDR_PATH = $(INSTALL_HDR_PATH)/include/



 SPDX-License-Identifier: GPL-2.0-only





include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

# Makefile for vm selftests





# Without this, failed build products remain, with up-to-date timestamps,

 thus tricking Make (and you!) into believing that All Is Well, in subsequent

 make invocations:



 Avoid accidental wrong builds, due to built-in rules working just a little

 bit too well--but not quite as well as required for our situation here.



 In other words, "make userfaultfd" is supposed to fail to build at all,

# because this Makefile only supports either "make" (all), or "make /full/path".

 However,  the built-in rules, if not suppressed, will pick up CFLAGS and the

# initial LDLIBS (but not the target-specific LDLIBS, because those are only

 set for the full path target!). This causes it to get pretty far into building

# things despite using incorrect values such as an *occasionally* incomplete

# LDLIBS.

MAKEFLAGS += --no-builtin-rules

TEST_GEN_FILES = compaction_test

TEST_GEN_FILES += hugepage-shm

TEST_GEN_FILES += map_populate

TEST_GEN_FILES += mlock2-tests

TEST_GEN_FILES += on-fault-limit

TEST_GEN_FILES += thuge-gen

TEST_GEN_FILES += split_huge_page_test

TEST_GEN_FILES += ksm_tests

ifeq ($(MACHINE),x86_64)

CAN_BUILD_I386 := $(shell ./../x86/check_cc.sh $(CC) ../x86/trivial_32bit_program.c -m32)

CAN_BUILD_WITH_NOPIE := $(shell ./../x86/check_cc.sh $(CC) ../x86/trivial_program.c -no-pie)

TARGETS := protection_keys

BINARIES_64 := $(TARGETS:%=%_64)

ifeq ($(CAN_BUILD_WITH_NOPIE),1)

CFLAGS += -no-pie

endif

ifeq ($(CAN_BUILD_I386),1)



TEST_GEN_FILES += $(BINARIES_64)

endif



ifneq (,$(findstring $(MACHINE),ppc64))

TEST_GEN_FILES += protection_keys

endif



TEST_GEN_FILES += va_128TBswitch

TEST_GEN_FILES += virtual_address_range





TEST_FILES := test_vmalloc.sh

KSFT_KHDR_INSTALL := 1

include ../lib.mk

ifeq ($(MACHINE),x86_64)

BINARIES_32 := $(patsubst %,$(OUTPUT)/%,$(BINARIES_32))

BINARIES_64 := $(patsubst %,$(OUTPUT)/%,$(BINARIES_64))

.PHONY: $(1) $(1)_32

endef

.PHONY: $(1) $(1)_64

endef

ifeq ($(CAN_BUILD_I386),1)



$(BINARIES_64): CFLAGS += -m64 -mxsave

$(BINARIES_64): LDLIBS += -lrt -ldl

$(BINARIES_64): $(OUTPUT)/%_64: %.c

	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(notdir $^) $(LDLIBS) -o $@

$(foreach t,$(TARGETS),$(eval $(call gen-target-rule-64,$(t))))

endif

 x86_64 users should be encouraged to install 32-bit libraries

ifeq ($(CAN_BUILD_I386)$(CAN_BUILD_X86_64),01)

all: warn_32bit_failure

	echo  "environment. This will reduce test coverage of 64-bit" 2>&1;	\

	echo  "try:"; 2>&1;							\

	echo  "";								\

	echo  "If you are using a Fedora-like distribution, try:";		\

	echo  "";								\

	exit 0;

endif

endif



$(OUTPUT)/gup_test: ../../../../mm/gup_test.h



# HMM_EXTRA_LIBS may get set in local_config.mk, or it may be left empty.



$(OUTPUT)/ksm_tests: LDLIBS += -lnuma

	/bin/sh ./check_config.sh $(CC)



ifeq ($(HMM_EXTRA_LIBS),)



	@echo ; \

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for lib/ function selftests

# No binaries, but make sure arg-less "make" doesn't trigger "run_tests"





include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

ARCH ?= $(shell echo $(uname_M) | sed -e s/i.86/i386/)

ifeq ($(ARCH),i386)

        ARCH := x86

	CFLAGS := -DCONFIG_X86_32 -D__i386__

endif

ifeq ($(ARCH),x86_64)







include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

# Makefile for mount selftests.

LDLIBS = -lcap

TEST_GEN_FILES := safesetid-test

# SPDX-License-Identifier: GPL-2.0

CFLAGS += -Wl,-no-as-needed -Wall



TEST_GEN_PROGS := nci_dev

include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

# Makefile for mount selftests.

CFLAGS = -g -I../../../../usr/include/ -Wall -O2 -pthread

TEST_GEN_FILES += mount_setattr_test

top_srcdir = ../../../..



.PHONY: all clean

CAN_BUILD_X86_64 := $(shell ../x86/check_cc.sh $(CC) \



OBJCOPY := $(CROSS_COMPILE)objcopy

endif

HOST_CFLAGS := -Wall -Werror -g $(INCLUDES) -fPIC -z noexecstack

	       -fno-stack-protector -mrdrnd $(INCLUDES)



ifeq ($(CAN_BUILD_X86_64), 1)

all: $(TEST_CUSTOM_PROGS) $(OUTPUT)/test_encl.elf

endif

$(OUTPUT)/test_sgx: $(OUTPUT)/main.o \

		    $(OUTPUT)/call.o \















	$(OUTPUT)/test_encl.elf \

	$(OUTPUT)/load.o \

	$(OUTPUT)/call.o \

	$(OUTPUT)/main.o \

# SPDX-License-Identifier: GPL-2.0

CFLAGS += -I../../../../usr/include/

LDFLAGS += -pthread



include ../lib.mk

# lib.mk TEST_CUSTOM_PROGS var is for custom tests that need special

 build rules. lib.mk will run and install them.





OBJS = sync_test.o sync.o

TESTS += sync_wait.o

TESTS += sync_stress_merge.o



	$(CC) -o $(TEST_CUSTOM_PROGS) $(OBJS) $(TESTS) $(CFLAGS) $(LDFLAGS)

	$(CC) -c $^ -o $@ $(CFLAGS)

$(TESTS): $(OUTPUT)/%.o: %.c



# SPDX-License-Identifier: GPL-2.0

	test-livepatch.sh \

	test-shadow-vars.sh \





include ../lib.mk

 SPDX-License-Identifier: GPL-2.0-only

CFLAGS += -Wall -O2 -Wno-unused-function

CFLAGS += -D_GNU_SOURCE

LDFLAGS += -pthread

TEST_GEN_PROGS += fd-003-kthread

TEST_GEN_PROGS += read

TEST_GEN_PROGS += setns-dcache

TEST_GEN_PROGS += setns-sysvipc

TEST_GEN_PROGS += thread-self



include ../lib.mk

 SPDX-License-Identifier: GPL-2.0-only



TEST_GEN_PROGS := get_syscall_info peeksiginfo vmaccess

 SPDX-License-Identifier: GPL-2.0-or-later



TEST_GEN_PROGS := openat2_test resolve_test rename_attack_test



 SPDX-License-Identifier: GPL-2.0-only



TEST_GEN_PROGS := membarrier_test_single_thread \



include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for locking/ww_mutx selftests



 No binaries, but make sure arg-less "make" doesn't trigger "run_tests"

all:



include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

CFLAGS += -Wl,-no-as-needed -Wall -I../../../../usr/include



# SPDX-License-Identifier: GPL-2.0



include ../lib.mk

# SPDX-License-Identifier: GPL-2.0



include ../lib.mk

TEST_PROGS := mem-on-off-test.sh

run_full_test:



# SPDX-License-Identifier: GPL-2.0

 When ARCH not overridden for crosscompiling, lookup machine



ARM64_SUBTARGETS ?= tags signal pauth fp mte bti





# A proper top_srcdir is needed by KSFT(lib.mk)

top_srcdir = $(realpath ../../../../)

# Additional include paths needed by kselftest.h and local headers



# Guessing where the Kernel headers could have been installed

# depending on ENV config

khdr_dir = $(top_srcdir)/usr/include

 the KSFT preferred location when KBUILD_OUTPUT is set



CFLAGS += -I$(khdr_dir)



		mkdir -p $$BUILD_TARGET;			\



		make OUTPUT=$$BUILD_TARGET -C $$DIR $@;		\

	done

run_tests: all

	@for DIR in $(ARM64_SUBTARGETS); do				\

		BUILD_TARGET=$(OUTPUT)/$$DIR;			\



# Avoid any output on non arm64 on emit_tests

emit_tests: all

	@for DIR in $(ARM64_SUBTARGETS); do				\

		BUILD_TARGET=$(OUTPUT)/$$DIR;			\



		make OUTPUT=$$BUILD_TARGET -C $$DIR $@;		\

	done

.PHONY: all clean install run_tests emit_tests

# SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2019 ARM Limited



 Additional include paths needed by kselftest.h and local headers

CFLAGS += -D_GNU_SOURCE -std=gnu99 -I.

PROGS := $(patsubst %.c,%,$(SRCS))

 Generated binaries to be installed by top KSFT script

TEST_GEN_PROGS := $(notdir $(PROGS))

# Get Kernel headers installed and use them.



# Including KSFT lib.mk here will also mangle the TEST_GEN_PROGS list

 to account for any OUTPUT target-dirs optionally provided by

 the toplevel makefile

include ../../lib.mk



 Common test-unit targets to build common-layout test-cases executables

 Needs secondary expansion to properly include the testcase c-file in pre-reqs

# SPDX-License-Identifier: GPL-2.0

TEST_PROGS := run_tags_test.sh

include ../../lib.mk

# SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2020 ARM Limited



# preserve CC value from top level Makefile

ifeq ($(CC),cc)

CC := $(CROSS_COMPILE)gcc

endif

PROGS := $(patsubst %.c,%,$(SRCS))

#Add mte compiler option

CFLAGS += -march=armv8.5-a+memtag

check if the compiler works well



 Generated binaries to be installed by top KSFT script

TEST_GEN_PROGS := $(PROGS)

# Get Kernel headers installed and use them.

else

    $(warning compiler "$(CC)" does not support the ARMv8.5 MTE extension.)



 Include KSFT lib.mk.

include ../../lib.mk

ifeq ($(mte_cc_support),1)

$(TEST_GEN_PROGS): mte_common_util.c mte_helper.S

endif

# SPDX-License-Identifier: GPL-2.0

TEST_PROGS_EXTENDED := fpsimd-test fpsimd-stress \

	rdvl-sve \

	vlset



sve-ptrace: sve-ptrace.o

sve-probe-vls: sve-probe-vls.o rdvl.o

vlset: vlset.o

include ../../lib.mk

# SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2020 ARM Limited



# preserve CC value from top level Makefile

ifeq ($(CC),cc)

CC := $(CROSS_COMPILE)gcc

endif

 check if the compiler supports ARMv8.3 and branch protection with PAuth

pauth_cc_support := $(shell if ($(CC) $(CFLAGS) -march=armv8.3-a -E -x c /dev/null -o /dev/null 2>&1) then echo "1"; fi)

ifeq ($(pauth_cc_support),1)

TEST_GEN_PROGS := pac

TEST_GEN_PROGS_EXTENDED := exec_target

endif

include ../../lib.mk

ifeq ($(pauth_cc_support),1)

# pac* and aut* instructions are not available on architectures berfore

# ARMv8.3. Therefore target ARMv8.3 wherever they are used directly





# when -mbranch-protection is enabled and the target architecture is ARMv8.3 or

# greater, gcc emits pac* instructions which are not in HINT NOP space,

 preventing the tests from occurring at all. Compile for ARMv8.2 so tests can

# run on earlier targets and print a meaningful error messages

$(OUTPUT)/exec_target: exec_target.c $(OUTPUT)/helper.o



$(OUTPUT)/pac: pac.c $(OUTPUT)/pac_corruptor.o $(OUTPUT)/helper.o

# SPDX-License-Identifier: GPL-2.0





 These tests are built as freestanding binaries since otherwise BTI

# support in ld.so is required which is not currently widespread; when

 it is available it will still be useful to test this separately as the

# cases for statically linked and dynamically lined binaries are

# slightly different.

CFLAGS_NOBTI = -DBTI=0

CFLAGS_BTI = -mbranch-protection=standard -DBTI=1

CFLAGS_COMMON = -ffreestanding -Wall -Wextra $(CFLAGS)



	$(BTI_CC_COMMAND)

%-bti.o: %.S



	$(NOBTI_CC_COMMAND)

%-nobti.o: %.S



BTI_OBJS =                                      \

	test-bti.o                           \

	start-bti.o                             \

	system-bti.o                            \

gen/btitest: $(BTI_OBJS)



NOBTI_OBJS =                                    \

	test-nobti.o                         \

	start-nobti.o                           \

	system-nobti.o                          \

gen/nobtitest: $(NOBTI_OBJS)



# Including KSFT lib.mk here will also mangle the TEST_GEN_PROGS list

 to account for any OUTPUT target-dirs optionally provided by

 the toplevel makefile

include ../../lib.mk

# SPDX-License-Identifier: GPL-2.0



include ../lib.mk







TEST_PROGS += $(BINARIES)



 SPDX-License-Identifier: GPL-2.0-only

# Makefile for user memory selftests

# No binaries, but make sure arg-less "make" doesn't trigger "run_tests"



TEST_PROGS := test_user_copy.sh

# SPDX-License-Identifier: GPL-2.0



include ../lib.mk

.PHONY: all all_32 all_64 warn_32bit_failure clean

UNAME_M := $(shell uname -m)

CAN_BUILD_I386 := $(shell ./check_cc.sh $(CC) trivial_32bit_program.c -m32)

CAN_BUILD_WITH_NOPIE := $(shell ./check_cc.sh $(CC) trivial_program.c -no-pie)

			check_initial_reg_state sigreturn iopl ioperm \

			test_FCMOV test_FCOMI test_FISTTP \

			corrupt_xstate_header amx

 Some selftests require 32bit support enabled also on 64bit systems

TARGETS_C_32BIT_NEEDED := ldt_gdt ptrace_syscall

TARGETS_C_32BIT_ALL := $(TARGETS_C_BOTHBITS) $(TARGETS_C_32BIT_ONLY) $(TARGETS_C_32BIT_NEEDED)

ifeq ($(CAN_BUILD_I386)$(CAN_BUILD_X86_64),11)



BINARIES_64 := $(TARGETS_C_64BIT_ALL:%=%_64)





# call32_from_64 in thunks.S uses absolute addresses.



define gen-target-rule-32

$(1) $(1)_32: $(OUTPUT)/$(1)_32



define gen-target-rule-64

$(1) $(1)_64: $(OUTPUT)/$(1)_64



TEST_PROGS += $(BINARIES_32)



TEST_PROGS += $(BINARIES_64)









$(BINARIES_32): $(OUTPUT)/%_32: %.c helpers.h



$(BINARIES_64): $(OUTPUT)/%_64: %.c helpers.h



# x86_64 users should be encouraged to install 32-bit libraries



warn_32bit_failure:

	@echo "Warning: you seem to have a broken 32-bit build" 2>&1; 	\

	echo "kernels.  If you are using a Debian-like distribution," 2>&1; \

	echo "try:"; 2>&1; \

	echo "";							\

	echo "  apt-get install gcc-multilib libc6-i386 libc6-dev-i386"; \

	echo "";							\

	exit 0;

endif

# Some tests have additional dependencies.

$(OUTPUT)/ptrace_syscall_32: raw_syscall_helper_32.S

$(OUTPUT)/test_syscall_vdso_32: thunks_32.S

 check_initial_reg_state is special: it needs a custom entry, and it

# needs to be static so that its interpreter doesn't destroy its initial

 state.

$(OUTPUT)/check_initial_reg_state_32: CFLAGS += -Wl,-ereal_start -static

# SPDX-License-Identifier: GPL-2.0+ OR MIT

CLANG_FLAGS += -no-integrated-as

endif

CFLAGS += -O2 -Wall -g -I./ -I../../../../usr/include/ -L$(OUTPUT) -Wl,-rpath=./ \

	  $(CLANG_FLAGS)

LDLIBS += -lpthread

# Own dependencies because we only want to build against 1st prerequisite, but

 still track changes to header files and depend on shared object.

OVERRIDE_TARGETS = 1

TEST_GEN_PROGS = basic_test basic_percpu_ops_test param_test \

		param_test_benchmark param_test_compare_twice

TEST_GEN_PROGS_EXTENDED = librseq.so

TEST_PROGS = run_param_test.sh

TEST_FILES := settings





$(OUTPUT)/%: %.c $(TEST_GEN_PROGS_EXTENDED) rseq.h rseq-*.h



$(OUTPUT)/param_test_benchmark: param_test.c $(TEST_GEN_PROGS_EXTENDED) \

	$(CC) $(CFLAGS) -DBENCHMARK $< $(LDLIBS) -lrseq -o $@

					rseq.h rseq-*.h

	$(CC) $(CFLAGS) -DRSEQ_COMPARE_TWICE $< $(LDLIBS) -lrseq -o $@

# SPDX-License-Identifier: GPL-2.0

include ../../../scripts/Makefile.include

APIDIR := $(top_scrdir)/include/uapi

TEST_GEN_FILES = action.o

KSFT_KHDR_INSTALL := 1

include ../lib.mk



  CPU ?= probe

  CPU ?= generic

endif

CLANG_SYS_INCLUDES := $(shell $(CLANG) -v -E - </dev/null 2>&1 \



CLANG_FLAGS = -I. -I$(APIDIR) \

	      -Wno-compare-distinct-pointer-types

$(OUTPUT)/%.o: %.c

	$(LLC) -march=bpf -mcpu=$(CPU) $(LLC_FLAGS) -filetype=obj -o $@

TEST_PROGS += ./tdc.sh

TEST_FILES := tdc*.py Tdc*.py plugins plugin-lib tc-tests

 SPDX-License-Identifier: GPL-2.0-only





include ../lib.mk

 SPDX-License-Identifier: GPL-2.0+



ifneq ($(shell $(CC) --version 2>&1 | head -n 1 | grep clang),)



CFLAGS += -O2 -Wall -g -I./ -I../../../../usr/include/  -Wl,-rpath=./ \

	  $(CLANG_FLAGS)

LDLIBS += -lpthread



include ../lib.mk

 SPDX-License-Identifier: GPL-2.0-only



CFLAGS := -Wall -Werror

# SPDX-License-Identifier: GPL-2.0

 Makefile for net selftests



CFLAGS =  -Wall -Wl,--no-as-needed -O2 -g



TEST_PROGS := run_netsocktests run_afpackettests test_bpf.sh netdevice.sh \

TEST_PROGS += udpgso_bench.sh fib_rule_tests.sh msg_zerocopy.sh psock_snd.sh

TEST_PROGS += udpgro_bench.sh udpgro.sh test_vxlan_under_vrf.sh reuseport_addr_any.sh

TEST_PROGS += test_vxlan_fdb_changelink.sh so_txtime.sh ipv6_flowlabel.sh

TEST_PROGS += altnames.sh icmp.sh icmp_redirect.sh ip6_gre_headroom.sh

TEST_PROGS += route_localnet.sh

TEST_PROGS += txtimestamp.sh

TEST_PROGS += vrf-xfrm-tests.sh

TEST_PROGS += vrf_route_leaking.sh

TEST_PROGS += amt.sh

TEST_PROGS += unicast_extensions.sh

TEST_PROGS += udpgro_fwd.sh

TEST_PROGS += veth.sh

TEST_PROGS += gro.sh

TEST_PROGS += srv6_end_dt4_l3vpn_test.sh

TEST_PROGS_EXTENDED := in_netns.sh setup_loopback.sh setup_veth.sh

TEST_PROGS_EXTENDED += toeplitz_client.sh toeplitz.sh

TEST_GEN_FILES += psock_fanout psock_tpacket msg_zerocopy reuseport_addr_any

TEST_GEN_FILES += tcp_mmap tcp_inq psock_snd txring_overwrite

TEST_GEN_FILES += hwtstamp_config rxtimestamp timestamping txtimestamp

TEST_GEN_FILES += ipsec

TEST_GEN_PROGS += reuseport_dualstack reuseaddr_conflict tls

TEST_GEN_FILES += cmsg_so_mark

TEST_FILES := settings

KSFT_KHDR_INSTALL := 1

include ../lib.mk

$(OUTPUT)/reuseport_bpf_numa: LDLIBS += -lnuma

$(OUTPUT)/tcp_mmap: LDLIBS += -lpthread

# SPDX-License-Identifier: GPL-2.0

KSFT_KHDR_INSTALL := 1

CFLAGS =  -Wall -Wl,--no-as-needed -O2 -g  -I$(top_srcdir)/usr/include

TEST_PROGS := mptcp_connect.sh pm_netlink.sh mptcp_join.sh diag.sh \

	      simult_flows.sh mptcp_sockopt.sh

TEST_GEN_FILES = mptcp_connect pm_nl_ctl mptcp_sockopt

TEST_FILES := settings



include ../../lib.mk

# SPDX-License-Identifier: GPL-2.0+ OR MIT

	gre_inner_v4_multipath.sh \

	ipip_flat_gre_keys.sh \

	ipip_flat_gre.sh \

	ipip_hier_gre_key.sh \

	loopback.sh \

	mirror_gre_bridge_1d.sh \

	mirror_gre_bridge_1d_vlan.sh \

	mirror_gre_bridge_1q.sh \

	mirror_gre_neigh.sh \

	mirror_gre_nh.sh \

	router_bridge_vlan.sh \

	router_multicast.sh \

	router.sh \

	sch_tbf_prio.sh \

	tc_actions.sh \

	tc_chains.sh \

	tc_vlan_modify.sh \



TEST_PROGS_EXTENDED := devlink_lib.sh \

	ethtool_lib.sh \

	fib_offload_lib.sh \

	forwarding.config.sample \

	mirror_gre_lib.sh \

	mirror_gre_topo_lib.sh \

	sch_ets_core.sh \

	sch_ets_tests.sh \



# SPDX-License-Identifier: GPL-2.0



	clone3_cap_checkpoint_restore

# SPDX-License-Identifier: GPL-2.0

LDLIBS += -lrt



include ../lib.mk

clean:

	rm -fr $(TEST_PROGS)

TEST_GEN_PROGS := timens timerfd timer clock_nanosleep procfs exec futex

TEST_GEN_PROGS_EXTENDED := gettime_perf

CFLAGS := -Wall -Werror -pthread

LDLIBS := -lrt -ldl

# SPDX-License-Identifier: GPL-2.0

CFLAGS += -O2



TEST_GEN_PROGS := mq_open_tests mq_perf_tests

 SPDX-License-Identifier: GPL-2.0-only

CFLAGS += -g -I../../../../usr/include/ -pthread

TEST_GEN_PROGS := pidfd_test pidfd_fdinfo_test pidfd_open_test \

	pidfd_poll_test pidfd_wait pidfd_getfd_test pidfd_setns_test



# SPDX-License-Identifier: GPL-2.0

CFLAGS += -g -I../../../../usr/include/



include ../lib.mk

 SPDX-License-Identifier: GPL-2.0-only

CFLAGS += -I../../../../usr/include/



EXTRA_CLEAN := $(OUTPUT)/kcmp-test-file



# SPDX-License-Identifier: GPL-2.0

CFLAGS += -I../../../../usr/include/



include ../lib.mk

# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0

CFLAGS += -I../../../../../usr/include/ -pthread

TEST_GEN_PROGS := binderfs_test

binderfs_test: binderfs_test.c ../../kselftest.h ../../kselftest_harness.h

include ../../lib.mk

# SPDX-License-Identifier: GPL-2.0

# Makefile for mount selftests.



TEST_GEN_FILES += move_mount_set_group_test

# SPDX-License-Identifier: GPL-2.0



ifneq ($(ARCH),sparc64)

.SILENT:









include ../lib.mk

all:

		make OUTPUT=$$BUILD_TARGET -C $$DIR $@;\

SUBDIR test prog name should be in the form: SUBDIR_test.sh \

		if [ -e $$DIR/$$TEST ]; then \

			rsync -a $$DIR/$$TEST $$BUILD_TARGET/; \



	install -t $(INSTALL_PATH) $(TEST_PROGS) $(TEST_PROGS_EXTENDED) $(TEST_FILES)

	@for SUBDIR in $(SUBDIRS); do \

		$(MAKE) OUTPUT=$$BUILD_TARGET -C $$SUBDIR INSTALL_PATH=$(INSTALL_PATH)/$$SUBDIR install; \



override define CLEAN

		make OUTPUT=$$BUILD_TARGET -C $$DIR $@;\

	done

endef

endif

# SPDX-License-Identifier: GPL-2.0

INCLUDEDIR := -I.







$(TEST_GEN_FILES): adi-test.c





# SPDX-License-Identifier: GPL-2.0

#



include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

TEST_PROGS := aliasing-test

all: $(TEST_PROGS)



 SPDX-License-Identifier: GPL-2.0-only

 Makefile for kmod loading selftests



 No binaries, but make sure arg-less "make" doesn't trigger "run_tests"

all:



include ../lib.mk

# Nothing to clean up.

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for sysctl selftests.

 Expects kernel.sysctl_writes_strict=1.



# No binaries, but make sure arg-less "make" doesn't trigger "run_tests".



TEST_PROGS := sysctl.sh



 Nothing to clean up.

clean:

 SPDX-License-Identifier: GPL-2.0-only

CFLAGS = -Wall



include ../lib.mk

 SPDX-License-Identifier: GPL-2.0-only

CFLAGS = -Wall



include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

CFLAGS := $(CFLAGS) -Wall -D_GNU_SOURCE

LDLIBS += -lm

uname_M := $(shell uname -m 2>/dev/null || echo not)







include ../lib.mk

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for kexec tests

uname_M := $(shell uname -m 2>/dev/null || echo not)



TEST_PROGS := test_kexec_load.sh test_kexec_file_load.sh

TEST_FILES := kexec_common_lib.sh



endif

# SPDX-License-Identifier: GPL-2.0

CFLAGS += -O3 -Wl,-no-as-needed -Wall





TEST_GEN_PROGS_EXTENDED = setdate

TEST_FILES := settings

 SPDX-License-Identifier: GPL-2.0+



CFLAGS += -Wall

TEST_GEN_PROGS := mincore_selftest

include ../lib.mk

# SPDX-License-Identifier: GPL-2.0

include ../../../scripts/Makefile.arch

include ../../../scripts/Makefile.include

CXX ?= $(CROSS_COMPILE)g++

CURDIR := $(abspath .)

TOOLSDIR := $(abspath ../../..)

LIBDIR := $(TOOLSDIR)/lib

BPFDIR := $(LIBDIR)/bpf

GENDIR := $(abspath ../../../../include/generated)





	  -I$(CURDIR) -I$(INCLUDE_DIR) -I$(GENDIR) -I$(LIBDIR)		\

	  -I$(TOOLSINCDIR) -I$(APIDIR) -I$(OUTPUT)			\

LDLIBS += -lcap -lelf -lz -lrt -lpthread

# Silence some warnings when compiled with clang



 Order correspond to 'make run_tests' order

TEST_GEN_PROGS = test_verifier test_tag test_maps test_lru_map test_lpm_map test_progs \

	test_sock test_sockmap get_cgroup_id_user \

	test_tcpnotify_user test_sysctl \



# Also test bpf-gcc, if present

ifneq ($(BPF_GCC),)



	test_tc_edt.o

TEST_FILES = xsk_prereqs.sh \

	$(wildcard progs/btf_dump_test_case_*.c)

# Order correspond to 'make run_tests' order

	test_offload.py \

	test_lwt_seg6local.sh \

	test_lirc_mode2.sh \

	test_xdp_vlan_mode_generic.sh \

	test_xdp_vlan_mode_native.sh \

	test_lwt_ip_encap.sh \

	test_tc_tunnel.sh \

	test_tc_edt.sh \

	test_xdping.sh \

	test_bpftool.sh \

	test_bpftool_metadata.sh \

	test_xsk.sh

	with_tunnels.sh \

	test_xdp_vlan.sh test_bpftool.py

# Compile but not part of 'make run_tests'

	flow_dissector_load test_flow_dissector test_tcp_check_syncookie_user \

	test_lirc_mode2_user xdping test_cpp runqslower bench bpf_testmod.ko \





 Emit succinct information message describing current building step

 $1 - generic step name (e.g., CC, LINK, etc);

 $2 - optional "flavor" specifier; if provided, will be emitted as [flavor];

 $3 - target (assumed to be file); only file name will be emitted;

# $4 - optional extra arg, emitted as-is, if provided.

ifeq ($(V),1)

Q =

msg =

msg = @printf '  %-8s%s %s%s\n' "$(1)" "$(if $(2), [$(2)])" "$(notdir $(3))" "$(if $(4), $(4))";

MAKEFLAGS += --no-print-directory

submake_extras := feature_display=0

endif

 override lib.mk's default rules

	$(call msg,CLEAN)

	$(Q)$(RM) -r $(TEST_GEN_PROGS) $(TEST_GEN_PROGS_EXTENDED) $(TEST_GEN_FILES) $(EXTRA_CLEAN)

	$(Q)$(MAKE) -C bpf_testmod clean

	$(Q)$(MAKE) docs-clean

endef



BPFOBJ := $(BUILD_DIR)/libbpf/libbpf.a

ifneq ($(CROSS_COMPILE),)

HOST_SCRATCH_DIR	:= $(OUTPUT)/host-tools

HOST_INCLUDE_DIR	:= $(HOST_SCRATCH_DIR)/include

HOST_SCRATCH_DIR	:= $(SCRATCH_DIR)

HOST_BPFOBJ := $(HOST_BUILD_DIR)/libbpf/libbpf.a

RESOLVE_BTFIDS := $(HOST_BUILD_DIR)/resolve_btfids/resolve_btfids

RUNQSLOWER_OUTPUT := $(BUILD_DIR)/runqslower/

		     $(if $(KBUILD_OUTPUT),$(KBUILD_OUTPUT)/vmlinux)	\

		     ../../../../vmlinux				\

		     /sys/kernel/btf/vmlinux				\

ifeq ($(VMLINUX_BTF),)

$(error Cannot find a vmlinux for VMLINUX_BTF at any of "$(VMLINUX_BTF_PATHS)")

endif

# Define simple and short `make test_progs`, `make test_sysctl`, etc targets

 to build individual tests.

# NOTE: Semicolon at the end is critical to override lib.mk's default static

 rule for binaries.

	 $(TEST_GEN_PROGS_EXTENDED)					\

	 $(TEST_CUSTOM_PROGS)): %: $(OUTPUT)/% ;

# sort removes libbpf duplicates when not cross-building

MAKE_DIRS := $(sort $(BUILD_DIR)/libbpf $(HOST_BUILD_DIR)/libbpf	       \

	       $(HOST_BUILD_DIR)/bpftool $(HOST_BUILD_DIR)/resolve_btfids      \

	$(call msg,MKDIR,,$@)



	$(Q)$(CC) $(CFLAGS) -c $(filter %.c,$^) $(LDLIBS) -o $@



	$(Q)$(CC) $(LDFLAGS) -o $@ $< $(LDLIBS) -Wl,--build-id=sha1

$(OUTPUT)/bpf_testmod.ko: $(VMLINUX_BTF) $(wildcard bpf_testmod/Makefile bpf_testmod/*.[ch])

	$(Q)$(RM) bpf_testmod/bpf_testmod.ko # force re-compilation

	$(Q)$(MAKE) $(submake_extras) -C bpf_testmod

	$(Q)cp bpf_testmod/bpf_testmod.ko $@

$(OUTPUT)/test_stub.o: test_stub.c $(BPFOBJ)

	$(call msg,CC,,$@)



DEFAULT_BPFTOOL := $(HOST_SCRATCH_DIR)/sbin/bpftool

		    OUTPUT=$(RUNQSLOWER_OUTPUT) VMLINUX_BTF=$(VMLINUX_BTF)     \

		    BPFTOOL_OUTPUT=$(HOST_BUILD_DIR)/bpftool/		       \

		    cp $(RUNQSLOWER_OUTPUT)runqslower $@



$(TEST_GEN_PROGS) $(TEST_GEN_PROGS_EXTENDED): $(OUTPUT)/test_stub.o $(BPFOBJ)

$(OUTPUT)/test_sock_addr: cgroup_helpers.c

$(OUTPUT)/get_cgroup_id_user: cgroup_helpers.c

$(OUTPUT)/test_cgroup_storage: cgroup_helpers.c



BPFTOOL ?= $(DEFAULT_BPFTOOL)

		    $(HOST_BPFOBJ) | $(HOST_BUILD_DIR)/bpftool

	$(Q)$(MAKE) $(submake_extras)  -C $(BPFTOOLDIR)			       \

		    CC=$(HOSTCC) LD=$(HOSTLD)				       \

		    EXTRA_CFLAGS='-g -O0'				       \

		    LIBBPF_DESTDIR=$(HOST_SCRATCH_DIR)/			       \



all: docs

	            prefix= OUTPUT=$(OUTPUT)/ DESTDIR=$(OUTPUT)/ $@

	$(Q)$(MAKE) $(submake_extras)					\

	            -f Makefile.docs					\



		    DESTDIR=$(SCRATCH_DIR) prefix= all install_headers

ifneq ($(BPFOBJ),$(HOST_BPFOBJ))

	   | $(HOST_BUILD_DIR)/libbpf

	$(Q)$(MAKE) $(submake_extras) -C $(BPFDIR)                             \

		    EXTRA_CFLAGS='-g -O0'				       \

		    DESTDIR=$(HOST_SCRATCH_DIR)/ prefix= all install_headers

endif

$(INCLUDE_DIR)/vmlinux.h: $(VMLINUX_BTF) $(BPFTOOL) | $(INCLUDE_DIR)

	$(call msg,GEN,,$@)

else

	$(call msg,CP,,$@)

	$(Q)cp "$(VMLINUX_H)" $@

endif

$(RESOLVE_BTFIDS): $(HOST_BPFOBJ) | $(HOST_BUILD_DIR)/resolve_btfids	\

		       $(TOOLSDIR)/lib/ctype.c			\

	$(Q)$(MAKE) $(submake_extras) -C $(TOOLSDIR)/bpf/resolve_btfids	\

		LIBBPF_INCLUDE=$(HOST_INCLUDE_DIR) \



 Get Clang's default includes on this system, as opposed to those seen by

# '-target bpf'. This fixes "missing" files on some architectures/distros,

 such as asm/byteorder.h, asm/socket.h, asm/sockios.h, sys/cdefs.h etc.



 Use '-idirafter': Don't interfere with include mechanics except where the

# build would have failed anyways.

define get_sys_includes

	| sed -n '/<...> search starts here:/,/End of search list./{ s| \(/.*\)|-idirafter \1|p }') \

$(shell $(1) -dM -E - </dev/null | grep '__riscv_xlen ' | awk '{printf("-D__riscv_xlen=%d -D__BITS_PER_LONG=%d", $$3, $$3)}')

endef

# Determine target endianness.

			grep 'define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__')



BPF_CFLAGS = -g -D__TARGET_ARCH_$(SRCARCH) $(MENDIAN) 			\





$(OUTPUT)/test_l4lb_noinline.o: BPF_CFLAGS += -fno-inline





 Build BPF object using Clang

# $1 - input .c file

# $2 - output .o file

# $3 - CFLAGS

define CLANG_BPF_BUILD_RULE

# Similar to CLANG_BPF_BUILD_RULE, but with disabled alu32

define CLANG_NOALU32_BPF_BUILD_RULE

# Build BPF object using GCC

define GCC_BPF_BUILD_RULE

	$(call msg,GCC-BPF,$(TRUNNER_BINARY),$2)







	test_ringbuf.c atomics.c trace_printk.c trace_vprintk.c

 Generate both light skeleton and libbpf skeleton for these

SKEL_BLACKLIST += $$(LSKELS)

linked_vars.skel.h-deps := linked_vars1.o linked_vars2.o





 Set up extra TRUNNER_XXX "temporary" variables in the environment (relies on

# $eval()) and pass control to DEFINE_TEST_RUNNER_RULES.

# Parameters:

 $1 - test runner base binary name (e.g., test_progs)

# $2 - test runner extra "flavor" (e.g., no_alu32, gcc-bpf, etc)

define DEFINE_TEST_RUNNER

TRUNNER_BINARY := $1$(if $2,-)$2

TRUNNER_TEST_OBJS := $$(patsubst %.c,$$(TRUNNER_OUTPUT)/%.test.o,	\

TRUNNER_EXTRA_OBJS := $$(patsubst %.c,$$(TRUNNER_OUTPUT)/%.o,		\

				 $$(filter %.c,$(TRUNNER_EXTRA_SOURCES)))

TRUNNER_EXTRA_HDRS := $$(filter %.h,$(TRUNNER_EXTRA_SOURCES))

TRUNNER_TESTS_HDR := $(TRUNNER_TESTS_DIR)/tests.h

					       $$(TRUNNER_BPF_SRCS)))

TEST_GEN_FILES += $$(TRUNNER_BPF_OBJS)

 Evaluate rules now with extra TRUNNER_XXX variables above already defined

$$(eval $$(call DEFINE_TEST_RUNNER_RULES,$1,$2))



 Using TRUNNER_XXX variables, provided by callers of DEFINE_TEST_RUNNER and

 set up by DEFINE_TEST_RUNNER itself, create test runner build rules with:

# $1 - test runner base binary name (e.g., test_progs)

 $2 - test runner extra "flavor" (e.g., no_alu32, gcc-bpf, etc)



$(TRUNNER_OUTPUT)-dir := y

	$$(call msg,MKDIR,,$$@)

	$(Q)mkdir -p $$@

endif

# ensure we set up BPF objects generation rule just once for a given

 input/output directory combination

$(TRUNNER_BPF_OBJS): $(TRUNNER_OUTPUT)/%.o:				\

		     $(TRUNNER_BPF_PROGS_DIR)/%.c			\

		     $(TRUNNER_BPF_PROGS_DIR)/*.h			\

		     $$(INCLUDE_DIR)/vmlinux.h				\



	$$(call msg,GEN-SKEL,$(TRUNNER_BINARY),$$@)

	$(Q)$$(BPFTOOL) gen object $$(<:.o=.linked1.o) $$<

	$(Q)$$(BPFTOOL) gen object $$(<:.o=.linked2.o) $$(<:.o=.linked1.o)

	$(Q)$$(BPFTOOL) gen object $$(<:.o=.linked3.o) $$(<:.o=.linked2.o)

	$(Q)diff $$(<:.o=.linked2.o) $$(<:.o=.linked3.o)

	$(Q)$$(BPFTOOL) gen skeleton $$(<:.o=.linked3.o) name $$(notdir $$(<:.o=)) > $$@

$(TRUNNER_BPF_LSKELS): %.lskel.h: %.o $(BPFTOOL) | $(TRUNNER_OUTPUT)

	$(Q)$$(BPFTOOL) gen skeleton -L $$(<:.o=.linked3.o) name $$(notdir $$(<:.o=_lskel)) > $$@

	$$(call msg,GEN-SKEL,$(TRUNNER_BINARY),$$@)

	$(Q)$$(BPFTOOL) gen skeleton $$(@:.skel.h=.linked3.o) name $$(notdir $$(@:.skel.h=)) > $$@

endif

 ensure we set up tests.h header generation rule just once

$(TRUNNER_TESTS_HDR): $(TRUNNER_TESTS_DIR)/*.c

	$$(shell (echo '/* Generated header, do not edit */';					\

		  sed -n -E 's/^void (serial_)?test_([a-zA-Z0-9_]+)\((void)?\).*/DEFINE_TEST(\2)/p'	\



# compile individual test files

 Note: we cd into output directory to ensure embedded BPF object is found

		      $(TRUNNER_EXTRA_HDRS)				\

		      $(TRUNNER_BPF_LSKELS)				\

		      $(TRUNNER_BPF_SKELS_LINKED)			\

	$$(call msg,TEST-OBJ,$(TRUNNER_BINARY),$$@)

	$(Q)cd $$(@D) && $$(CC) -I. $$(CFLAGS) -c $(CURDIR)/$$< $$(LDLIBS) -o $$(@F)

$(TRUNNER_EXTRA_OBJS): $(TRUNNER_OUTPUT)/%.o:				\

		       %.c						\

		       $(TRUNNER_EXTRA_HDRS)				\



# non-flavored in-srctree builds receive special treatment, in particular, we

# do not need to copy extra resources (see e.g. test_btf_dump_case())

ifneq ($2:$(OUTPUT),:$(shell pwd))

	$$(call msg,EXT-COPY,$(TRUNNER_BINARY),$(TRUNNER_EXTRA_FILES))

	$(Q)rsync -aq $$^ $(TRUNNER_OUTPUT)/

endif

			     $(RESOLVE_BTFIDS)				\



endef

# Define test_progs test runner.

TRUNNER_TESTS_DIR := prog_tests

TRUNNER_EXTRA_SOURCES := test_progs.c cgroup_helpers.c trace_helpers.c	\

TRUNNER_EXTRA_FILES := $(OUTPUT)/urandom_read $(OUTPUT)/bpf_testmod.ko	\

		       ima_setup.sh					\

		       $(wildcard progs/btf_dump_test_case_*.c)

TRUNNER_BPF_CFLAGS += -DENABLE_ATOMICS_TESTS

$(eval $(call DEFINE_TEST_RUNNER,test_progs))

 Define test_progs-no_alu32 test runner.

TRUNNER_BPF_BUILD_RULE := CLANG_NOALU32_BPF_BUILD_RULE

TRUNNER_BPF_CFLAGS := $(BPF_CFLAGS) $(CLANG_CFLAGS)



# Define test_progs BPF-GCC-flavored test runner.

ifneq ($(BPF_GCC),)

TRUNNER_BPF_CFLAGS := $(BPF_CFLAGS) $(call get_sys_includes,gcc)

$(eval $(call DEFINE_TEST_RUNNER,test_progs,bpf_gcc))

endif

 Define test_maps test runner.

TRUNNER_TESTS_DIR := map_tests

TRUNNER_EXTRA_SOURCES := test_maps.c

TRUNNER_BPF_BUILD_RULE := $$(error no BPF objects should be built)

TRUNNER_BPF_CFLAGS :=



# Define test_verifier test runner.

 It is much simpler than test_maps/test_progs and sufficiently different from

 them (e.g., test.h is using completely pattern), that it's worth just

 explicitly defining all the rules explicitly.

verifier/tests.h: verifier/*.c

ifdef FILL_ARRAY'; \

include \"\1\"@'; \

endif' \



# Make sure we are able to include and link libbpf against c++.

	$(call msg,CXX,,$@)



 Benchmark runner

	$(Q)$(CC) $(CFLAGS) -O2 -c $(filter %.c,$^) $(LDLIBS) -o $@

$(OUTPUT)/bench_ringbufs.o: $(OUTPUT)/ringbuf_bench.skel.h \

			    $(OUTPUT)/perfbuf_bench.skel.h

$(OUTPUT)/bench_bloom_filter_map.o: $(OUTPUT)/bloom_filter_bench.skel.h

$(OUTPUT)/bench: LDLIBS += -lm

		 $(OUTPUT)/bench_count.o \

		 $(OUTPUT)/bench_rename.o \

	$(Q)$(CC) $(LDFLAGS) -o $@ $(filter %.a %.o,$^) $(LDLIBS)

EXTRA_CLEAN := $(TEST_CUSTOM_PROGS) $(SCRATCH_DIR) $(HOST_SCRATCH_DIR)	\

	prog_tests/tests.h map_tests/tests.h verifier/tests.h		\

	feature								\

	$(addprefix $(OUTPUT)/,*.o *.skel.h *.lskel.h no_alu32 bpf_gcc bpf_testmod.ko)

KDIR ?= $(abspath $(BPF_TESTMOD_DIR)/../../../../..)

else

Q = @

endif

MODULES = bpf_testmod.ko

obj-m += bpf_testmod.o

CFLAGS_bpf_testmod.o = -I$(src)

all:



	+$(Q)make -C $(KDIR) M=$(BPF_TESTMOD_DIR) clean

# SPDX-License-Identifier: GPL-2.0

KDIR ?= ../../../

default:

	$(MAKE) -C $(KDIR) M=$$PWD

install: default

	$(MAKE) -C $(KDIR) M=$$PWD modules_install

 SPDX-License-Identifier: GPL-2.0-only

test: vsock_test vsock_diag_test

vsock_test: vsock_test.o timeout.o control.o util.o

vsock_diag_test: vsock_diag_test.o timeout.o control.o util.o

CFLAGS += -g -O2 -Werror -Wall -I. -I../../include -I../../../usr/include -Wno-pointer-sign -fno-strict-overflow -fno-strict-aliasing -fno-common -MMD -U_FORTIFY_SOURCE -D_GNU_SOURCE

clean:

	${RM} *.o *.d vsock_test vsock_diag_test

# SPDX-License-Identifier: GPL-2.0

# We need this for the "cc-option" macro.

include ../../build/Build.include



override CFLAGS+= $(call cc-option,-O3,-O1) ${WARNFLAGS}

 Add "-fstack-protector" only if toolchain supports it.

override CFLAGS+= $(call cc-option,-fstack-protector-strong)





INSTALL_PROGRAM=install -m 755 -p



# Static builds might require -ltinfo, for instance

STATIC := --static

endif

		     echo -lpanel -lncurses)



OBJS = tmon.o tui.o sysfs.o pid.o

	$(CC) $(CFLAGS) $(LDFLAGS) $(OBJS)  -o $(TARGET) $(TMON_LIBS)

valgrind: tmon

	 sudo valgrind -v --track-origins=yes --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes ./$(TARGET)  1> /dev/null

install:



	$(DEL_FILE) "$(INSTALL_ROOT)/$(BINDIR)/$(TARGET)"

clean:



dist:

	git archive --format=tar --prefix="$(TARGET)-$(VERSION)/" v$(VERSION) | \

# SPDX-License-Identifier: GPL-2.0

#

# This is a simple wrapper Makefile that calls the main Makefile.perf

 with a -j option to do parallel builds



# If you want to invoke the perf build in some non-standard way then

 you can use the 'make -f Makefile.perf' method to invoke it.





#

 Clear out the built-in rules GNU make defines by default (such as .o targets),

 so that we pass through all targets to Makefile.perf:



.SUFFIXES:



# We don't want to pass along options like -j:

#



#

 Do a parallel build with multiple jobs, based on the number of CPUs online

# in this system: 'make -j8' on a 8-CPU system, etc.

#

 (To override it, run 'make JOBS=1' and similar.)



  ifeq ($(JOBS),0)

    JOBS := 1

  endif

endif



# Only pass canonical directory names as the output directory:

#

ifneq ($(O),)

  FULL_O := $(shell cd $(PWD); readlink -f $(O) || echo $(O))

endif



 Only accept the 'DEBUG' variable from the command line:



ifeq ("$(origin DEBUG)", "command line")

    override DEBUG = 0

    SET_DEBUG = "DEBUG=$(DEBUG)"

  endif

  override DEBUG = 0

endif

define print_msg



define make



#

 Needed if no target specified:

 (Except for tags and TAGS targets. The reason is that the

 Makefile does not treat tags/TAGS as targets but as files

# and thus won't rebuilt them once they are in place.)

#

	$(make)

ifdef MAKECMDGOALS

ifneq ($(filter clean,$(MAKECMDGOALS)),)

 clean



ifeq ($(has_clean),1)

  rest := $(filter-out clean,$(MAKECMDGOALS))

$(rest): clean

 rest

 has_clean

endif # MAKECMDGOALS



# Explicitly disable parallelism for the clean target.

#

	$(make) -j1



# The build-test target is not really parallel, don't print the jobs info,

 it also uses only the tests/make targets that don't pollute the source

 repository, i.e. that uses O= or builds the tarpkg outside the source

 repo directories.



 For a full test, use:



# make -C tools/perf -f tests/make

#

build-test:



build-test-tarball:

	@$(MAKE) -f tests/make REUSE_FEATURES_DUMP=1 MK=Makefile SET_PARALLEL=1 --no-print-directory out



 All other targets get passed through:



%: FORCE

	$(print_msg)



 SPDX-License-Identifier: GPL-2.0-only

include ../../scripts/Makefile.include

include ../../scripts/utilities.mak

ARTICLES =

 with their own formatting rules.



MAN1_TXT= \



MAN_TXT = $(MAN1_TXT) $(MAN5_TXT) $(MAN7_TXT)

_MAN_XML=$(patsubst %.txt,%.xml,$(MAN_TXT))

_MAN_HTML=$(patsubst %.txt,%.html,$(MAN_TXT))

MAN_XML=$(addprefix $(OUTPUT),$(_MAN_XML))



_DOC_HTML+=$(patsubst %,%.html,$(ARTICLES) $(SP_ARTICLES))



_DOC_MAN1=$(patsubst %.txt,%.1,$(MAN1_TXT))

_DOC_MAN5=$(patsubst %.txt,%.5,$(MAN5_TXT))

_DOC_MAN7=$(patsubst %.txt,%.7,$(MAN7_TXT))

DOC_MAN1=$(addprefix $(OUTPUT),$(_DOC_MAN1))

DOC_MAN7=$(addprefix $(OUTPUT),$(_DOC_MAN7))

 Make the path relative to DESTDIR, not prefix

ifndef DESTDIR

prefix?=$(HOME)

endif

bindir?=$(prefix)/bin

htmldir?=$(prefix)/share/doc/perf-doc

man1dir=$(mandir)/man1

man7dir=$(mandir)/man7

MANPAGE_XSL = manpage-normal.xsl

XMLTO_EXTRA =

DOC_REF = origin/man



ifdef USE_ASCIIDOCTOR

ASCIIDOC_EXTRA += -a compat-mode

ASCIIDOC_EXTRA += -a mansource="perf" -a manmanual="perf Manual"



infodir?=$(prefix)/share/info

MAKEINFO=makeinfo

INSTALL_INFO=install-info

DOCBOOK2X_TEXI=docbook2x-texi

DBLATEX=dblatex

XMLTO=xmlto

	PERL_PATH = /usr/bin/perl

endif

-include ../config.mak.autogen



	missing_tools = $(ASCIIDOC)

endif

ifndef USE_ASCIIDOCTOR

_tmp_tool_path := $(call get-executable,$(XMLTO))

ifeq ($(_tmp_tool_path),)



#

 For asciidoc ...

	-7.1.2,	no extra settings are needed.

#	8.0-,	set ASCIIDOC8.

#



 For docbook-xsl ...

	-1.68.1,	set ASCIIDOC_NO_ROFF? (based on changelog from 1.73.0)

#	1.69.0,		no extra settings are needed?

#	1.69.1-1.71.0,	set DOCBOOK_SUPPRESS_SP?

	1.71.1,		no extra settings are needed?

	1.72.0,		set DOCBOOK_XSL_172.

	1.73.0-,	set ASCIIDOC_NO_ROFF





#

 If you had been using DOCBOOK_XSL_172 in an attempt to get rid

# of 'the ".ft C" problem' in your generated manpages, and you

# instead ended up with weird characters around callouts, try

 using ASCIIDOC_NO_ROFF instead (it works fine with ASCIIDOC8).





ifdef ASCIIDOC8

ASCIIDOC_EXTRA += -a perf-asciidoc-no-roff

else

	ifdef ASCIIDOC_NO_ROFF

	# docbook-xsl after 1.72 needs the regular XSL, but will not

	# pass-thru raw roff codes from asciidoc.conf, so turn them off.

	ASCIIDOC_EXTRA += -a perf-asciidoc-no-roff

ifdef MAN_BOLD_LITERAL



# Shell quote;

SHELL_PATH_SQ = $(subst ','\'',$(SHELL_PATH))



# Please note that there is a minor bug in asciidoc.

 The version after 6.0.3 _will_ include the patch found here:

#   http://marc.theaimsgroup.com/?l=perf&m=111558757202243&w=2

#

 Until that version is released you may have to apply the patch

 yourself - yes, all 6 characters of it!





 space to separate -C and subdir

QUIET_SUBDIR1  =

ifneq ($(findstring $(MAKEFLAGS),w),w)

else # "make -w"

NO_SUBDIR = :

endif

ifneq ($(findstring $(MAKEFLAGS),s),s)

	QUIET_ASCIIDOC	= @echo '  ASCIIDOC '$@;

	QUIET_XMLTO	= @echo '  XMLTO    '$@;

	QUIET_DB2TEXI	= @echo '  DB2TEXI  '$@;

	QUIET_XSLTPROC	= @echo '  XSLTPROC '$@;

	QUIET_GEN	= @echo '  GEN      '$@;

	QUIET_SUBDIR0	= +@subdir=

			   echo '  SUBDIR   ' $$subdir; \

			  $(MAKE) $(PRINT_DIR) -C $$subdir

	export V

endif

endif

all: html man info





man: man1 man5 man7

man1: $(DOC_MAN1)

man5: $(DOC_MAN5)

man7: $(DOC_MAN7)

info: $(OUTPUT)perf.info $(OUTPUT)perfman.info

install: install-man

check-man-tools:

ifdef missing_tools



do-install-man: man

	$(call QUIET_INSTALL, Documentation-man) \

		$(INSTALL) -d -m 755 $(DESTDIR)$(man5dir); \

		$(INSTALL) -d -m 755 $(DESTDIR)$(man7dir); \

#		$(INSTALL) -m 644 $(DOC_MAN5) $(DESTDIR)$(man5dir); \

#		$(INSTALL) -m 644 $(DOC_MAN7) $(DESTDIR)$(man7dir)



ifdef missing_tools

  DO_INSTALL_MAN = $(warning Please install $(missing_tools) to have the man pages installed)





	$(call QUIET_INSTALL, Documentation-info) \

		$(INSTALL) -m 644 $(OUTPUT)perf.info $(OUTPUT)perfman.info $(DESTDIR)$(infodir); \

		$(INSTALL_INFO) --info-dir=$(DESTDIR)$(infodir) perf.info ;\

		$(INSTALL_INFO) --info-dir=$(DESTDIR)$(infodir) perfman.info ;\

	else \



#install-html: html

#	'$(SHELL_PATH_SQ)' ./install-webdoc.sh $(DESTDIR)$(htmldir)



#

 Determine "include::" file references in asciidoc files.



$(OUTPUT)doc.dep : $(wildcard *.txt) build-docdep.perl

	mv $@+ $@



CLEAN_FILES =									\

	$(MAN_XML) $(addsuffix +,$(MAN_XML))					\

	$(MAN_HTML) $(addsuffix +,$(MAN_HTML))					\

	$(DOC_HTML) $(DOC_MAN1) $(DOC_MAN5) $(DOC_MAN7)				\

	$(OUTPUT)*.texi $(OUTPUT)*.texi+ $(OUTPUT)*.texi++			\

	$(OUTPUT)perf.info $(OUTPUT)perfman.info $(OUTPUT)doc.dep		\

	$(OUTPUT)technical/api-*.html $(OUTPUT)technical/api-index.txt

	$(call QUIET_CLEAN, Documentation) $(RM) $(CLEAN_FILES)

$(MAN_HTML): $(OUTPUT)%.html : %.txt

	$(QUIET_ASCIIDOC)$(RM) $@+ $@ && \

	$(ASCIIDOC) -b $(ASCIIDOC_HTML) -d manpage \

		$(ASCIIDOC_EXTRA) -aperf_version=$(PERF_VERSION) -o $@+ $< && \



ifdef USE_ASCIIDOCTOR

	$(ASCIIDOC) -b manpage -d manpage \

		$(ASCIIDOC_EXTRA) -aperf_version=$(PERF_VERSION) -o $@+ $< && \



$(OUTPUT)%.1 $(OUTPUT)%.5 $(OUTPUT)%.7 : $(OUTPUT)%.xml



	$(ASCIIDOC) -b docbook -d manpage \

		-aperf_date=$(shell git log -1 --pretty="format:%cd" \

		-o $@+ $< && \





$(OUTPUT)perfman.texi: $(MAN_XML) cat-texi.perl

		--to-stdout $(xml) &&) true) > $@++ && \

	mv $@+ $@

$(OUTPUT)perfman.info: $(OUTPUT)perfman.texi



$(patsubst %.txt,%.texi,$(MAN_TXT)): %.texi : %.xml

	mv $@+ $@

	$(QUIET_ASCIIDOC)$(ASCIIDOC) -b $(ASCIIDOC_HTML) $*.txt



# UNIMPLEMENTED

install-webdoc : html

	'$(SHELL_PATH_SQ)' ./install-webdoc.sh $(WEBDOC_DEST)



 quick-install: quick-install-man



 quick-install-man:

#	'$(SHELL_PATH_SQ)' ./install-doc-quick.sh $(DOC_REF) $(DESTDIR)$(mandir)

#quick-install-html:

	'$(SHELL_PATH_SQ)' ./install-doc-quick.sh $(HTML_REF) $(DESTDIR)$(htmldir)

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

ifndef NO_DWARF

PERF_HAVE_DWARF_REGS := 1

endif

HAVE_KVM_STAT_SUPPORT := 1

PERF_HAVE_JITDUMP := 1



 Syscall table generation for perf





out    := $(OUTPUT)arch/powerpc/include/generated/asm

header64 := $(out)/syscalls_64.c

sysprf := $(srctree)/tools/perf/arch/powerpc/entry/syscalls

sysdef := $(sysprf)/syscall.tbl



 Create output directory if not already present







clean::

	$(call QUIET_CLEAN, powerpc) $(RM) $(header32) $(header64)

archheaders: $(header32) $(header64)

 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only

HAVE_KVM_STAT_SUPPORT := 1

PERF_HAVE_JITDUMP := 1



 Syscall table generation for perf





header := $(out)/syscalls_64.c

systbl := $(sysprf)/mksyscalltbl

# Create output directory if not already present

_dummy := $(shell [ -d '$(out)' ] || mkdir -p '$(out)')

$(header): $(sysdef) $(systbl)



clean::



 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

ifndef NO_DWARF

PERF_HAVE_DWARF_REGS := 1

endif

 Syscall table generation for perf

out    := $(OUTPUT)arch/mips/include/generated/asm

header := $(out)/syscalls_n64.c

systbl := $(sysprf)/mksyscalltbl

# Create output directory if not already present

_dummy := $(shell [ -d '$(out)' ] || mkdir -p '$(out)')

$(header): $(sysdef) $(systbl)



clean::



PERF_HAVE_ARCH_REGS_QUERY_REGISTER_OFFSET := 1

# SPDX-License-Identifier: GPL-2.0

ifndef NO_DWARF

PERF_HAVE_DWARF_REGS := 1

endif

PERF_HAVE_ARCH_REGS_QUERY_REGISTER_OFFSET := 1



#

# Syscall table generation for perf

#

sysprf := $(srctree)/tools/perf/arch/arm64/entry/syscalls/



 Create output directory if not already present





clean::

	$(call QUIET_CLEAN, arm64) $(RM) $(header)

archheaders: $(header)

# SPDX-License-Identifier: GPL-2.0

ifndef NO_DWARF

PERF_HAVE_DWARF_REGS := 1

endif

PERF_HAVE_ARCH_REGS_QUERY_REGISTER_OFFSET := 1



###

 Syscall table generation





sys       := $(srctree)/tools/perf/arch/x86/entry/syscalls

systbl    := $(sys)/syscalltbl.sh

# Create output directory if not already present

_dummy := $(shell [ -d '$(out)' ] || mkdir -p '$(out)')

$(header): $(sys)/syscall_64.tbl $(systbl)

	$(Q)$(SHELL) '$(systbl)' $(sys)/syscall_64.tbl 'x86_64' > $@



 SPDX-License-Identifier: GPL-2.0-only

PERF_HAVE_JITDUMP := 1

access

chmod

creat

getcwd

lstat

mkdir

openat

read

rename

rmdir

statfs

symlink

# SPDX-License-Identifier: GPL-2.0

# Makefile for LEDs tools

CFLAGS = -Wall -Wextra -g -I../../include/uapi

all: uledmon led_hw_brightness_mon



	$(RM) uledmon led_hw_brightness_mon

# SPDX-License-Identifier: GPL-2.0

BINDIR=usr/bin

MAN1DIR=$(MANDIR)/man1



A2X=a2x

a2x_path := $(call get-executable,$(A2X))

all: man

ifneq ($(findstring $(MAKEFLAGS),s),s)

     QUIET_A2X = @echo '  A2X     '$@;

  endif

endif

%.1: %.txt

ifeq ($(a2x_path),)

else

	$(QUIET_A2X)$(A2X) --doctype manpage --format manpage $<

endif

clean:







	install -d -m 755 $(INSTALL_ROOT)/$(BINDIR)

	install -m 755 -p "kvm_stat" "$(INSTALL_ROOT)/$(BINDIR)/$(TARGET)"

install: install-tools install-man

.PHONY: all clean man install-tools install-man install

# SPDX-License-Identifier: GPL-2.0

 Makefile for USB tools





srctree := $(patsubst %/,%,$(dir $(CURDIR)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

endif

# Do not use make's built-in rules

# (this improves performance and avoids hard-to-debug behaviour);

MAKEFLAGS += -r



ALL_TARGETS := testusb ffs-test

ALL_PROGRAMS := $(patsubst %,$(OUTPUT)%,$(ALL_TARGETS))

all: $(ALL_PROGRAMS)

export srctree OUTPUT CC LD CFLAGS

include $(srctree)/tools/build/Makefile.include

$(TESTUSB_IN): FORCE

	$(Q)$(MAKE) $(build)=testusb

$(OUTPUT)testusb: $(TESTUSB_IN)

	$(QUIET_LINK)$(CC) $(CFLAGS) $< -o $@ $(LDFLAGS)

	$(Q)$(MAKE) $(build)=ffs-test

$(OUTPUT)ffs-test: $(FFS_TEST_IN)

	$(QUIET_LINK)$(CC) $(CFLAGS) $< -o $@ $(LDFLAGS)

clean:



	install -d -m 755 $(DESTDIR)$(bindir);		\

		install $$program $(DESTDIR)$(bindir);	\

	done

FORCE:

# SPDX-License-Identifier: GPL-2.0

WARNINGS = -Wall -Wextra

CFLAGS = $(LIBUSB_CFLAGS) $(WARNINGS)



all: test

	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)

clean:

	$(RM) test

 SPDX-License-Identifier: GPL-2.0-only

CC = gcc

LIBUSB_CFLAGS = $(shell pkg-config --cflags libusb-1.0)

LIBUSB_LIBS = $(shell pkg-config --libs libusb-1.0)

LDFLAGS = $(LIBUSB_LIBS)

%: %.c



# SPDX-License-Identifier: GPL-2.0

# Makefile for cgroup tools

CFLAGS = -Wall -Wextra

all: cgroup_event_listener



	$(RM) cgroup_event_listener

# SPDX-License-Identifier: GPL-2.0

 Makefile for Hyper-V tools



libexecdir ?= /usr/libexec



srctree := $(patsubst %/,%,$(dir $(CURDIR)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

endif

# Do not use make's built-in rules

# (this improves performance and avoids hard-to-debug behaviour);

MAKEFLAGS += -r

override CFLAGS += -O2 -Wall -g -D_GNU_SOURCE -I$(OUTPUT)include

ALL_TARGETS := hv_kvp_daemon hv_vss_daemon hv_fcopy_daemon

ALL_PROGRAMS := $(patsubst %,$(OUTPUT)%,$(ALL_TARGETS))

ALL_SCRIPTS := hv_get_dhcp_info.sh hv_get_dns_info.sh hv_set_ifconfig.sh

all: $(ALL_PROGRAMS)

export srctree OUTPUT CC LD CFLAGS

include $(srctree)/tools/build/Makefile.include

$(HV_KVP_DAEMON_IN): FORCE

	$(Q)$(MAKE) $(build)=hv_kvp_daemon

$(OUTPUT)hv_kvp_daemon: $(HV_KVP_DAEMON_IN)

	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@

$(HV_VSS_DAEMON_IN): FORCE

	$(Q)$(MAKE) $(build)=hv_vss_daemon

$(OUTPUT)hv_vss_daemon: $(HV_VSS_DAEMON_IN)

	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@

$(HV_FCOPY_DAEMON_IN): FORCE

	$(Q)$(MAKE) $(build)=hv_fcopy_daemon

$(OUTPUT)hv_fcopy_daemon: $(HV_FCOPY_DAEMON_IN)

	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@

clean:

	find $(if $(OUTPUT),$(OUTPUT),.) -name '*.o' -delete -o -name '\.*.d' -delete

install: $(ALL_PROGRAMS)

	install -d -m 755 $(DESTDIR)$(libexecdir)/hypervkvpd; \

	install -d -m 755 $(DESTDIR)$(sharedstatedir); \

	for program in $(ALL_PROGRAMS); do \

	done; \

	install -m 755 lsvmbus $(DESTDIR)$(sbindir); \

	for script in $(ALL_SCRIPTS); do \





.PHONY: all install clean FORCE prepare





BIN	:= $(patsubst %.S, %.bin, $(SOURCES))





all:	$(BIN) $(IHEX) $(CODE)

clean:



	@cc -c $^

%.bin.nocrc:	%.o



		| hexdump -v -e '/1 "%02X+"'; done); \

		echo "ibase=16;100-($${list%?})%100" | bc >$@

%.p:	%.crc %.S

	@cc -c -DCRC="$$(cat $*.crc)" -o $@ $*.S

%.bin:	%.p



%.bin.ihex:	%.p



	@echo "{" >$@; hexdump -f hex $^ >>$@; echo "};" >>$@

# SPDX-License-Identifier: GPL-2.0

# Makefile for vm tools

#

include ../scripts/Makefile.include



LIBS = $(LIB_DIR)/libapi.a

CFLAGS = -Wall -Wextra -I../lib/

LDFLAGS = $(LIBS)



$(TARGETS): $(LIBS)

$(LIBS):

	make -C $(LIB_DIR)

%: %.c



	$(RM) page-types slabinfo page_owner_sort

	make -C $(LIB_DIR) clean

sbindir ?= /usr/sbin

install: all

	install -m 755 -p $(TARGETS) $(DESTDIR)$(sbindir)

# SPDX-License-Identifier: GPL-2.0

# trace-cmd version



# file format version



MAKEFLAGS += --no-print-directory



# Makefiles suck: This macro sets a default value of $(2) for the

# variable named by $(1), unless the variable has been set by

 environment or command line. This is necessary for CC and AR

# because make sets default values, so the simpler ?= approach

# won't work as expected.

define allow-override

    $(eval $(1) = $(2)))

endef

# Allow setting CC and AR, or setting CROSS_COMPILE as a prefix.

$(call allow-override,CC,$(CROSS_COMPILE)gcc)

$(call allow-override,NM,$(CROSS_COMPILE)nm)





# Use DESTDIR for installing into a different root directory.

 This is useful for building a package. The program will be

# installed in this directory as if it was the root directory.

 Then the build tool can move it later.

DESTDIR ?=

DESTDIR_SQ = '$(subst ','\'',$(DESTDIR))'

LP64 := $(shell echo __LP64__ | ${CC} ${CFLAGS} -E -x c - | tail -n 1)

ifeq ($(LP64), 1)

else



prefix ?= /usr/local

libdir = $(prefix)/$(libdir_relative)

man_dir = $(prefix)/share/man

man_dir_SQ = '$(subst ','\'',$(man_dir))'

pkgconfig_dir ?= $(word 1,$(shell $(PKG_CONFIG) 		\

			--variable pc_path pkg-config | tr ":" " "))



export man_dir man_dir_SQ INSTALL

export DESTDIR DESTDIR_SQ





 copy a bit from Linux kbuild



  VERBOSE = $(V)

endif



srctree := $(patsubst %/,%,$(dir $(CURDIR)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

$(info Determined 'srctree' to be $(srctree))





 Shell quotes



CONFIG_FLAGS	=

VERSION		= $(EP_VERSION)

PATCHLEVEL	= $(EP_PATCHLEVEL)

EXTRAVERSION	= $(EP_EXTRAVERSION)

N		=



LIB_TARGET  = libtraceevent.a libtraceevent.so.$(EVENT_PARSE_VERSION)

LIB_INSTALL = libtraceevent.a libtraceevent.so*



INCLUDES = -I. -I $(srctree)/tools/include $(CONFIG_INCLUDES)

 Set compile option CFLAGS

ifdef EXTRA_CFLAGS

  CFLAGS := $(EXTRA_CFLAGS)

  CFLAGS := -g -Wall

endif

# Append required CFLAGS

override CFLAGS += $(udis86-flags) -D_GNU_SOURCE

else

  Q = @

endif

 Disable command line variables (CFLAGS) override from top

# level Makefile (perf), otherwise build Makefile will get

 the same command line setup.

MAKEOVERRIDES=

export srctree OUTPUT CC LD CFLAGS V

build := -f $(srctree)/tools/build/Makefile.build dir=. obj

LIB_TARGET := $(addprefix $(OUTPUT),$(LIB_TARGET))







all_cmd: $(CMD_TARGETS)



	@ln -sf $(@F) $(OUTPUT)libtraceevent.so







define make_version.h

   echo \#define VERSION_CODE $(shell						\

   expr $(VERSION) \* 256 + $(PATCHLEVEL));					\

   echo '#define EXTRAVERSION ' $(EXTRAVERSION);				\

define VERSION_STRING "'$(VERSION).$(PATCHLEVEL).$(EXTRAVERSION)'"';	\

define FILE_VERSION '$(FILE_VERSION);					\

  ) > $1

endef

    if [ -r $@ ] && cmp -s $@ $@.tmp; then	\

    else					\

      echo '  UPDATE                 $@';	\

      mv -f $@.tmp $@;				\



ep_version.h: force

	$(Q)$(N)$(call update_version.h)

VERSION_FILES = ep_version.h

   else						\

     mv -f $@.tmp $@;				\

   fi);

endef

	--regex-c++='/_PE\(([^,)]*).*/TEP_ERRNO__\1/'

	find . -name '*.[ch]' | xargs etags \

	--regex='/_PE(\([^,)]*\).*/TEP_ERRNO__\1/'



define do_install

	$(call do_install_mkdir,$2);			\



PKG_CONFIG_SOURCE_FILE = libtraceevent.pc

PKG_CONFIG_FILE := $(addprefix $(OUTPUT),$(PKG_CONFIG_SOURCE_FILE))

	if [ -n "${pkgconfig_dir}" ]; then 					\

		sed -i "s|INSTALL_PREFIX|${1}|g" ${PKG_CONFIG_FILE}; 		\

		sed -i "s|LIB_VERSION|${EVENT_PARSE_VERSION}|g" ${PKG_CONFIG_FILE}; \

		$(call do_install,$(PKG_CONFIG_FILE),$(pkgconfig_dir),644); 	\



		$(call do_install_mkdir,$(libdir_SQ)); \

		cp -fpR $(LIB_INSTALL) $(DESTDIR)$(libdir_SQ)

install_pkgconfig:



		$(call do_install,event-parse.h,$(includedir_SQ),644); \

		$(call do_install,trace-seq.h,$(includedir_SQ),644); \

		$(call do_install,kbuffer.h,$(includedir_SQ),644)

install: install_lib

clean: clean_plugins

	$(call QUIET_CLEAN, libtraceevent) \

		$(RM) TRACEEVENT-CFLAGS tags TAGS; \



doc:



doc-clean:



doc-install:



doc-uninstall:



PHONY += help

help:

	@echo''

	@echo '  plugins             - compile the plugins'

	@echo '  install             - install the library, the plugins,'\

					'the header and pkgconfig files'

	@echo '  clean               - clean the library and the plugins object files'

	@echo '  doc                 - compile the documentation files - man'\

					'and html pages, in the Documentation directory'

	@echo '  doc-install         - install the man pages'

	@echo''

PHONY += plugins

	$(call descend,plugins)

PHONY += install_plugins

	$(call descend,plugins,install)

PHONY += clean_plugins

	$(call descend,plugins,clean)

force:

 Declare the contents of the .PHONY variable as phony.  We keep that

 information in a variable so we can use it in if_changed and friends.

.PHONY: $(PHONY)

# SPDX-License-Identifier: GPL-2.0

#MAKEFLAGS += --no-print-directory



# Makefiles suck: This macro sets a default value of $(2) for the

# variable named by $(1), unless the variable has been set by

 environment or command line. This is necessary for CC and AR

# because make sets default values, so the simpler ?= approach

# won't work as expected.

define allow-override

    $(eval $(1) = $(2)))

endef

# Allow setting CC and AR, or setting CROSS_COMPILE as a prefix.

$(call allow-override,CC,$(CROSS_COMPILE)gcc)

$(call allow-override,NM,$(CROSS_COMPILE)nm)





# Use DESTDIR for installing into a different root directory.

 This is useful for building a package. The program will be

# installed in this directory as if it was the root directory.

 Then the build tool can move it later.

DESTDIR ?=

DESTDIR_SQ = '$(subst ','\'',$(DESTDIR))'

LP64 := $(shell echo __LP64__ | ${CC} ${CFLAGS} -E -x c - | tail -n 1)

ifeq ($(LP64), 1)

  libdir_relative_tmp = lib64



libdir_relative ?= $(libdir_relative_tmp)



set_plugin_dir := 1

# Set plugin_dir to preffered global plugin location

# If we install under $HOME directory we go under

# $(HOME)/.local/lib/traceevent/plugins

#

# We dont set PLUGIN_DIR in case we install under $HOME

# directory, because by default the code looks under:

# $(HOME)/.local/lib/traceevent/plugins by default.

#

ifeq ($(plugin_dir),)

else





include ../../../scripts/Makefile.include

# copy a bit from Linux kbuild

ifeq ("$(origin V)", "command line")

ifndef VERBOSE

  VERBOSE = 0

endif

ifeq ($(srctree),)

#$(info Determined 'srctree' to be $(srctree))

endif

export prefix libdir src obj

# Shell quotes

plugin_dir_SQ = $(subst ','\'',$(plugin_dir))

CONFIG_LIBS    =



OBJ            = $@





# Set compile option CFLAGS

else



 Append required CFLAGS

override CFLAGS += -fPIC

override CFLAGS += $(CONFIG_FLAGS) $(INCLUDES) $(PLUGIN_DIR_SQ)



ifeq ($(VERBOSE),1)

  Q =



# Disable command line variables (CFLAGS) override from top

 level Makefile (perf), otherwise build Makefile will get

# the same command line setup.





build := -f $(srctree)/tools/build/Makefile.build dir=. obj

DYNAMIC_LIST_FILE := $(OUTPUT)libtraceevent-dynamic-list

PLUGINS += plugin_hrtimer.so

PLUGINS += plugin_kmem.so

PLUGINS += plugin_futex.so

PLUGINS += plugin_tlb.so

PLUGINS_IN := $(PLUGINS:.so=-in.o)

plugins: $(PLUGINS) $(DYNAMIC_LIST_FILE)





$(OUTPUT)libtraceevent-dynamic-list: $(PLUGINS)





define update_dir

   if [ -r $@ ] && cmp -s $@ $@.tmp; then      \

   else                                                \

     mv -f $@.tmp $@;                          \

   fi);

endef

	--regex-c++='/_PE\(([^,)]*).*/TEP_ERRNO__\1/'

	find . -name '*.[ch]' | xargs etags \

	--regex='/_PE(\([^,)]*\).*/TEP_ERRNO__\1/'

	if [ ! -d '$(DESTDIR_SQ)$1' ]; then             \

		$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$1'; \

	fi

endef

	$(call do_install_mkdir,$2);                    \



define do_install_plugins

         $(call do_install,$$plugin,$(plugin_dir_SQ)); \

       done

endef

define do_generate_dynamic_list_file

	symbol_type=`$(NM) -u -D $1 | awk 'NF>1 {print $$1}' | \

	xargs echo "U w W" | tr 'w ' 'W\n' | sort -u | xargs echo`;\

	if [ "$$symbol_type" = "U W" ];then				\

		(echo '{';                                              \

		$(NM) -u -D $1 | awk 'NF>1 {sub("@.*", "", $$2); print "\t"$$2";"}' | sort -u;\

		echo '};';                                              \

		) > $2;                                                 \

		(echo Either missing one of [$1] or bad version of $(NM)) 1>&2;\



install: $(PLUGINS)

	$(call QUIET_INSTALL, trace_plugins) \

	$(call do_install_plugins, $(PLUGINS))

clean:

	$(call QUIET_CLEAN, trace_plugins) \

		$(RM) TRACEEVENT-CFLAGS tags TAGS;

PHONY += force plugins



# Declare the contents of the .PHONY variable as phony.  We keep that

# information in a variable so we can use it in if_changed and friends.

include ../../../scripts/utilities.mak

# This Makefile and manpage XSL files were taken from tools/perf/Documentation

# and modified for libtraceevent.

	$(wildcard libtraceevent-*.txt) \



MAN_TXT = $(MAN3_TXT)

_MAN_XML=$(patsubst %.txt,%.xml,$(MAN_TXT))

_MAN_HTML=$(patsubst %.txt,%.html,$(MAN_TXT))

_DOC_MAN3=$(patsubst %.txt,%.3,$(MAN3_TXT))

MAN_XML=$(addprefix $(OUTPUT),$(_MAN_XML))

DOC_MAN3=$(addprefix $(OUTPUT),$(_DOC_MAN3))

 Make the path relative to DESTDIR, not prefix

ifndef DESTDIR

prefix?=$(HOME)

endif

bindir?=$(prefix)/bin

man3dir=$(mandir)/man3

ASCIIDOC_EXTRA = --unsafe -f asciidoc.conf

ASCIIDOC_HTML = xhtml11

INSTALL?=install

RM ?= rm -f

ASCIIDOC = asciidoctor

ASCIIDOC_EXTRA = -a compat-mode

ASCIIDOC_EXTRA += -a mansource="libtraceevent" -a manmanual="libtraceevent Manual"



XMLTO=xmlto

_tmp_tool_path := $(call get-executable,$(ASCIIDOC))

ifeq ($(_tmp_tool_path),)



	missing_tools += $(XMLTO)

endif

endif



# For asciidoc ...

#	-7.1.2,	no extra settings are needed.

	8.0-,	set ASCIIDOC8.





#

# For docbook-xsl ...

#	-1.68.1,	set ASCIIDOC_NO_ROFF? (based on changelog from 1.73.0)

	1.69.0,		no extra settings are needed?

	1.69.1-1.71.0,	set DOCBOOK_SUPPRESS_SP?

#	1.71.1,		no extra settings are needed?

#	1.72.0,		set DOCBOOK_XSL_172.

#	1.73.0-,	set ASCIIDOC_NO_ROFF

#



# If you had been using DOCBOOK_XSL_172 in an attempt to get rid

 of 'the ".ft C" problem' in your generated manpages, and you

 instead ended up with weird characters around callouts, try

# using ASCIIDOC_NO_ROFF instead (it works fine with ASCIIDOC8).

#

ASCIIDOC_EXTRA += -a asciidoc7compatible

endif

ifdef DOCBOOK_XSL_172

ASCIIDOC_EXTRA += -a libtraceevent-asciidoc-no-roff

else

	ifdef ASCIIDOC_NO_ROFF

	# docbook-xsl after 1.72 needs the regular XSL, but will not

	# pass-thru raw roff codes from asciidoc.conf, so turn them off.

	endif

endif

XMLTO_EXTRA += -m manpage-bold-literal.xsl

endif

ifdef DOCBOOK_SUPPRESS_SP

XMLTO_EXTRA += -m manpage-suppress-sp.xsl

endif

SHELL_PATH ?= $(SHELL)

 Shell quote;





export DESTDIR DESTDIR_SQ



# Please note that there is a minor bug in asciidoc.

 The version after 6.0.3 _will_ include the patch found here:

   http://marc.theaimsgroup.com/?l=libtraceevent&m=111558757202243&w=2



# Until that version is released you may have to apply the patch

# yourself - yes, all 6 characters of it!

#

 space to separate -C and subdir

QUIET_SUBDIR1  =

ifneq ($(findstring $(MAKEFLAGS),w),w)

else # "make -w"

NO_SUBDIR = :

endif

ifneq ($(findstring $(MAKEFLAGS),s),s)

	QUIET_ASCIIDOC	= @echo '  ASCIIDOC '$@;

	QUIET_XMLTO	= @echo '  XMLTO    '$@;

	QUIET_SUBDIR1	= ;$(NO_SUBDIR) \



all: html man



html: $(MAN_HTML)

$(MAN_HTML) $(DOC_MAN3): asciidoc.conf

install: install-man

check-man-tools:

ifdef missing_tools



do-install-man: man

	$(call QUIET_INSTALL, Documentation-man) \



install-man: check-man-tools man do-install-man

uninstall: uninstall-man

uninstall-man:

		$(Q)$(RM) $(addprefix $(DESTDIR)$(man3dir)/,$(DOC_MAN3))



ifdef missing_tools

  DO_INSTALL_MAN = $(warning Please install $(missing_tools) to have the man pages installed)



CLEAN_FILES =					\

	$(MAN_XML) $(addsuffix +,$(MAN_XML))	\

	$(MAN_HTML) $(addsuffix +,$(MAN_HTML))	\



	$(call QUIET_CLEAN, Documentation) $(RM) $(CLEAN_FILES)

	$(ASCIIDOC) -b manpage -d manpage \

		$(ASCIIDOC_EXTRA) -alibtraceevent_version=$(EVENT_PARSE_VERSION) -o $@+ $< && \



$(OUTPUT)%.3 : $(OUTPUT)%.xml



	$(ASCIIDOC) -b docbook -d manpage \

		$(ASCIIDOC_EXTRA) -alibtraceevent_version=$(EVENT_PARSE_VERSION) -o $@+ $< && \



		$(ASCIIDOC_EXTRA) -aperf_version=$(EVENT_PARSE_VERSION) -o $@+ $< && \

 SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)

 Most of this file is copied from tools/lib/bpf/Makefile



LIBPERF_VERSION = 0

LIBPERF_EXTRAVERSION = 1



srctree := $(patsubst %/,%,$(dir $(CURDIR)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

$(info Determined 'srctree' to be $(srctree))



INSTALL = install

 Use DESTDIR for installing into a different root directory.

# This is useful for building a package. The program will be

 installed in this directory as if it was the root directory.

# Then the build tool can move it later.



include $(srctree)/tools/scripts/Makefile.include



ifeq ($(LP64), 1)

  libdir_relative = lib64



prefix ?=

libdir = $(prefix)/$(libdir_relative)

# Shell quotes

libdir_SQ = $(subst ','\'',$(libdir))

libdir_relative_SQ = $(subst ','\'',$(libdir_relative))

ifeq ("$(origin V)", "command line")

ifndef VERBOSE

  VERBOSE = 0

endif

else

  Q = @

endif

TEST_ARGS := $(if $(V),-v)

 Set compile option CFLAGS

ifdef EXTRA_CFLAGS

  CFLAGS := $(EXTRA_CFLAGS)

  CFLAGS := -g -Wall

endif

INCLUDES = \

-I$(srctree)/tools/lib/perf/include \

-I$(srctree)/tools/lib/ \



 Append required CFLAGS

override CFLAGS += $(EXTRA_WARNINGS)

override CFLAGS += -fPIC

override CFLAGS += -fvisibility=hidden

all:

export srctree OUTPUT CC LD CFLAGS V

export DESTDIR DESTDIR_SQ



VERSION_SCRIPT := libperf.map

VERSION       = $(LIBPERF_VERSION).$(LIBPERF_PATCHLEVEL).$(LIBPERF_EXTRAVERSION)

LIBPERF_SO := $(OUTPUT)libperf.so.$(VERSION)







ifneq ($(subdir),)

else

else

  API_PATH=$(LIB_DIR)

endif

LIBAPI = $(API_PATH)libapi.a

export LIBAPI

$(LIBAPI): FORCE



	$(call QUIET_CLEAN, libapi)

	$(Q)$(MAKE) -C $(LIB_DIR) O=$(OUTPUT) clean >/dev/null

$(LIBPERF_IN): FORCE

	$(Q)$(MAKE) $(build)=libperf

	$(QUIET_AR)$(RM) $@ && $(AR) rcs $@ $(LIBPERF_IN)

$(LIBPERF_SO): $(LIBPERF_IN) $(LIBAPI)

	$(QUIET_LINK)$(CC) --shared -Wl,-soname,libperf.so \

                                    -Wl,--version-script=$(VERSION_SCRIPT) $^ -o $@



libs: $(LIBPERF_A) $(LIBPERF_SO) $(LIBPERF_PC)



	$(call QUIET_CLEAN, libperf) $(RM) $(LIBPERF_A) \



TESTS_IN = tests-in.o

TESTS_STATIC = $(OUTPUT)tests-static





$(TESTS_STATIC): $(TESTS_IN) $(LIBPERF_A) $(LIBAPI)







tests: make-tests

	@./$(TESTS_STATIC) $(TEST_ARGS)

	@echo "running dynamic:"



		-e "s|@VERSION@|$(VERSION)|" \



define do_install_mkdir



define do_install

	fi;                                             \



install_lib: libs

		$(call do_install_mkdir,$(libdir_SQ)); \

		cp -fpR $(LIBPERF_ALL) $(DESTDIR)$(libdir_SQ)

install_headers:

	$(call QUIET_INSTALL, headers) \

		$(call do_install,include/perf/cpumap.h,$(prefix)/include/perf,644); \

		$(call do_install,include/perf/threadmap.h,$(prefix)/include/perf,644); \

		$(call do_install,include/perf/mmap.h,$(prefix)/include/perf,644);

install_pkgconfig: $(LIBPERF_PC)

	$(call QUIET_INSTALL, $(LIBPERF_PC)) \

		$(call do_install,$(LIBPERF_PC),$(libdir_SQ)/pkgconfig,644)

install_doc:

	$(Q)$(MAKE) -C Documentation install-man install-html install-examples

install: install_lib install_headers install_pkgconfig install_doc

FORCE:

 SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)

# Most of this file is copied from tools/perf/Documentation/Makefile

include ../../../scripts/utilities.mak

MAN_EX    = examples/*.c





MAN_3     = $(addprefix $(OUTPUT),$(_MAN_3))



# Make the path relative to DESTDIR, not prefix

  prefix ?=$(HOME)

endif

mandir  ?= $(prefix)/share/man

man3dir  = $(mandir)/man3

man7dir  = $(mandir)/man7

docdir  ?= $(prefix)/share/doc/libperf

htmldir  = $(docdir)/html

exdir    = $(docdir)/examples

ASCIIDOC        = asciidoc

ASCIIDOC_EXTRA  = --unsafe -f asciidoc.conf

ASCIIDOC_HTML   = xhtml11

XMLTO           =xmlto

INSTALL ?= install



 For asciidoc ...

	-7.1.2,	no extra settings are needed.

#	8.0-,	set ASCIIDOC8.

#

 For docbook-xsl ...

	-1.68.1,	set ASCIIDOC_NO_ROFF? (based on changelog from 1.73.0)

#	1.69.0,		no extra settings are needed?

#	1.69.1-1.71.0,	set DOCBOOK_SUPPRESS_SP?

	1.71.1,		no extra settings are needed?

	1.72.0,		set DOCBOOK_XSL_172.

	1.73.0-,	set ASCIIDOC_NO_ROFF



 If you had been using DOCBOOK_XSL_172 in an attempt to get rid

# of 'the ".ft C" problem' in your generated manpages, and you

# instead ended up with weird characters around callouts, try

 using ASCIIDOC_NO_ROFF instead (it works fine with ASCIIDOC8).



ifdef ASCIIDOC8

  MANPAGE_XSL = manpage-1.72.xsl

  ifdef ASCIIDOC_NO_ROFF

 docbook-xsl after 1.72 needs the regular XSL, but will not

    # pass-thru raw roff codes from asciidoc.conf, so turn them off.

    ASCIIDOC_EXTRA += -a libperf-asciidoc-no-roff

  endif

endif

  XMLTO_EXTRA += -m manpage-bold-literal.xsl

endif

ifdef DOCBOOK_SUPPRESS_SP

  XMLTO_EXTRA += -m manpage-suppress-sp.xsl

endif

DESTDIR ?=

DESTDIR_SQ = '$(subst ','\'',$(DESTDIR))'



 Please note that there is a minor bug in asciidoc.

# The version after 6.0.3 _will_ include the patch found here:

#   http://marc.theaimsgroup.com/?l=libtraceevent&m=111558757202243&w=2

#

 Until that version is released you may have to apply the patch

 yourself - yes, all 6 characters of it!



 space to separate -C and subdir

QUIET_SUBDIR1  =

ifneq ($(findstring $(MAKEFLAGS),w),w)

else # "make -w"

  NO_SUBDIR = :

endif

ifneq ($(findstring $(MAKEFLAGS),s),s)



all: $(MAN_X) $(MAN_HTML)



		$(INSTALL) -d -m 755 $(DESTDIR)$(man3dir); \

		$(INSTALL) -d -m 755 $(DESTDIR)$(man7dir); \



install-html:

		$(INSTALL) -d -m 755 $(DESTDIR)$(htmldir); \

		$(INSTALL) -m 644 $(MAN_HTML) $(DESTDIR)$(htmldir); \

	$(call QUIET_INSTALL, examples) \



CLEAN_FILES =					\

	$(MAN_XML) $(addsuffix +,$(MAN_XML))	\

	$(MAN_HTML) $(addsuffix +,$(MAN_HTML))	\

	$(MAN_X)

clean:



$(MAN_3): $(OUTPUT)%.3: %.xml

	$(QUIET_XMLTO)$(XMLTO) -o $(OUTPUT). -m $(MANPAGE_XSL) $(XMLTO_EXTRA) man $<



$(MAN_XML): $(OUTPUT)%.xml: %.txt

	$(QUIET_ASCIIDOC)$(ASCIIDOC) -b docbook -d manpage \

		$(ASCIIDOC_EXTRA) -alibperf_version=$(EVENT_PARSE_VERSION) -o $@+ $< && \



$(MAN_HTML): $(OUTPUT)%.html: %.txt

	mv $@+ $@

# SPDX-License-Identifier: GPL-2.0

include ../../scripts/utilities.mak		# QUIET_CLEAN

ifeq ($(srctree),)

#$(info Determined 'srctree' to be $(srctree))

endif

AR ?= $(CROSS_COMPILE)ar



MAKEFLAGS += --no-print-directory



CFLAGS := $(EXTRA_WARNINGS) $(EXTRA_CFLAGS)

CFLAGS += -ggdb3 -Wall -Wextra -std=gnu99 -U_FORTIFY_SOURCE -fPIC

ifeq ($(CC_NO_CLANG), 0)

  CFLAGS += -O3



ifeq ($(DEBUG),0)

  CFLAGS += -D_FORTIFY_SOURCE

endif

 Treat warnings as errors unless directed not to



CFLAGS += -I$(srctree)/tools/lib/api















$(LIBFILE): $(API_IN)



	$(call QUIET_CLEAN, libapi) $(RM) $(LIBFILE); \





.PHONY: clean FORCE

# SPDX-License-Identifier: GPL-2.0

include ../../scripts/utilities.mak		# QUIET_CLEAN

ifeq ($(srctree),)

#$(info Determined 'srctree' to be $(srctree))

endif

LD ?= $(CROSS_COMPILE)ld





MAKEFLAGS += --no-print-directory

LIBFILE = $(OUTPUT)libsubcmd.a



ifeq ($(DEBUG),0)

  ifeq ($(feature-fortify-source), 1)

    CFLAGS += -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2

  endif

endif

else

  CFLAGS += -O6

endif

 Treat warnings as errors unless directed not to





CFLAGS += -I$(srctree)/tools/include/











$(SUBCMD_IN): FORCE





	find $(if $(OUTPUT),$(OUTPUT),.) -name \*.o -or -name \*.o.cmd -or -name \*.o.d | xargs $(RM)

FORCE:

 SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)

# Most of this file is copied from tools/lib/traceevent/Makefile

RM ?= rm



LIBBPF_MAJOR_VERSION := $(word 1,$(subst ., ,$(LIBBPF_VERSION)))



MAKEFLAGS += --no-print-directory

# This will work when bpf is built in tools env. where srctree

 isn't set and when invoked from selftests build, where srctree

 is a ".". building_out_of_srctree is undefined for in srctree

# builds

srctree := $(patsubst %/,%,$(dir $(CURDIR)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

$(info Determined 'srctree' to be $(srctree))



INSTALL = install

 Use DESTDIR for installing into a different root directory.

# This is useful for building a package. The program will be

 installed in this directory as if it was the root directory.

# Then the build tool can move it later.





ifeq ($(LP64), 1)

  libdir_relative = lib64





export man_dir man_dir_SQ INSTALL

export DESTDIR DESTDIR_SQ



 copy a bit from Linux kbuild



  VERBOSE = $(V)

endif



INCLUDES = -I$(if $(OUTPUT),$(OUTPUT),.)				\





 Shell quotes



OBJ		= $@



LIB_TARGET	= libbpf.a libbpf.so.$(LIBBPF_VERSION)

PC_FILE		= libbpf.pc

 Set compile option CFLAGS

ifdef EXTRA_CFLAGS

  CFLAGS := $(EXTRA_CFLAGS)

  CFLAGS := -g -O2

endif

# Append required CFLAGS

override CFLAGS += $(EXTRA_WARNINGS) -Wno-switch-enum

override CFLAGS += $(INCLUDES)



# flags specific for shared library

SHLIB_FLAGS := -DSHARED -fPIC

else

  Q = @

endif

 Disable command line variables (CFLAGS) override from top

# level Makefile (perf), otherwise build Makefile will get

 the same command line setup.

MAKEOVERRIDES=

all:

export srctree OUTPUT CC LD CFLAGS V

include $(srctree)/tools/build/Makefile.include

BPF_IN_SHARED	:= $(SHARED_OBJDIR)libbpf-in.o



LIB_FILE	:= $(addprefix $(OUTPUT),$(LIB_FILE))

PC_FILE		:= $(addprefix $(OUTPUT),$(PC_FILE))



GLOBAL_SYM_COUNT = $(shell readelf -s --wide $(BPF_IN_SHARED) | \

			   sed 's/\[.*\]//' | \

			   sort -u | wc -l)

			      grep -Eo '[^ ]+@LIBBPF_' | cut -d@ -f1 | sort -u | wc -l)

CMD_TARGETS = $(LIB_TARGET) $(PC_FILE)

	$(Q)$(MAKE) all_cmd



	@(test -f ../../include/uapi/linux/bpf.h -a -f ../../../include/uapi/linux/bpf.h && ( \

	(diff -B ../../include/uapi/linux/bpf.h ../../../include/uapi/linux/bpf.h >/dev/null) || \

	echo "Warning: Kernel ABI header at 'tools/include/uapi/linux/bpf.h' differs from latest version at 'include/uapi/linux/bpf.h'" >&2 )) || true

	@(test -f ../../include/uapi/linux/if_xdp.h -a -f ../../../include/uapi/linux/if_xdp.h && ( \

	(diff -B ../../include/uapi/linux/if_xdp.h ../../../include/uapi/linux/if_xdp.h >/dev/null) || \

	echo "Warning: Kernel ABI header at 'tools/include/uapi/linux/if_xdp.h' differs from latest version at 'include/uapi/linux/if_xdp.h'" >&2 )) || true



	$(Q)$(MAKE) $(build)=libbpf OUTPUT=$(STATIC_OBJDIR)





	$(QUIET_LINK)$(CC) $(LDFLAGS) \



$(OUTPUT)libbpf.a: $(BPF_IN_STATIC)



$(OUTPUT)libbpf.pc:

	$(QUIET_GEN)sed -e "s|@PREFIX@|$(prefix)|" \

		-e "s|@LIBDIR@|$(libdir_SQ)|" \

		-e "s|@VERSION@|$(LIBBPF_VERSION)|" \

		< libbpf.pc.template > $@

check: check_abi check_version

		echo "Warning: Num of global symbols in $(BPF_IN_SHARED)"	 \

		     "versioned symbols in $^ ($(VERSIONED_SYM_COUNT))." \

		     "Please make sure all LIBBPF_API symbols are"	 \

		     "versioned in $(VERSION_SCRIPT)." >&2;		 \

		readelf -s --wide $(BPF_IN_SHARED) |			 \

		    cut -d "@" -f1 | sed 's/_v[0-9]_[0-9]_[0-9].*//' |	 \

		    sed 's/\[.*\]//' |					 \

		    sort -u > $(OUTPUT)libbpf_global_syms.tmp;		 \

		    awk '/GLOBAL/ && /DEFAULT/ && !/UND/ {print $$NF}'|  \

		diff -u $(OUTPUT)libbpf_global_syms.tmp			 \

		exit 1;							 \

	fi



check_version: $(VERSION_SCRIPT) libbpf_version.h

	@if [ "$(HDR_MAJ_VERSION)" != "$(LIBBPF_MAJOR_VERSION)" ]; then        \

		echo "Error: libbpf major version mismatch detected: "	       \

		exit 1;							       \

	fi

	@if [ "$(HDR_MIN_VERSION)" != "$(LIBBPF_MINOR_VERSION)" ]; then	       \

		echo "Error: libbpf minor version mismatch detected: "	       \

		exit 1;							       \

	fi



define do_install

	if [ ! -d '$(DESTDIR_SQ)$2' ]; then		\

		$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$2';	\

	fi;						\



		$(call do_install_mkdir,$(libdir_SQ)); \



SRC_HDRS := bpf.h libbpf.h btf.h libbpf_common.h libbpf_legacy.h xsk.h	     \

GEN_HDRS := $(BPF_GENERATED)

INSTALL_PFX := $(DESTDIR)$(prefix)/include/bpf

INSTALL_SRC_HDRS := $(addprefix $(INSTALL_PFX)/, $(SRC_HDRS))

INSTALL_GEN_HDRS := $(addprefix $(INSTALL_PFX)/, $(notdir $(GEN_HDRS)))

$(INSTALL_SRC_HDRS): $(INSTALL_PFX)/%.h: %.h



$(INSTALL_GEN_HDRS): $(INSTALL_PFX)/%.h: $(OUTPUT)%.h



install_headers: $(BPF_GENERATED) $(INSTALL_SRC_HDRS) $(INSTALL_GEN_HDRS)

	$(call QUIET_INSTALL, $(PC_FILE)) \





		$(SHARED_OBJDIR) $(STATIC_OBJDIR)			     \

		$(addprefix $(OUTPUT),					     \



force:

	ls *.c *.h > cscope.files

	cscope -b -q -I $(srctree)/include -f cscope.out



# Declare the contents of the .PHONY variable as phony.  We keep that

# information in a variable so we can use it in if_changed and friends.



# Delete partially updated (corrupted) files on error

.DELETE_ON_ERROR:

# SPDX-License-Identifier: GPL-2.0

 Makefile for io_uring test tools

CFLAGS += -Wall -Wextra -g -D_GNU_SOURCE

LDLIBS += -lpthread

%: %.c

	$(CC) $(CFLAGS) -o $@ $^

io_uring-bench: syscall.o io_uring-bench.o

	$(CC) $(CFLAGS) -o $@ $^ $(LDLIBS)

io_uring-cp: setup.o syscall.o queue.o

clean:

	$(RM) io_uring-cp io_uring-bench *.o

# SPDX-License-Identifier: GPL-2.0

 Makefile for debugging tools



INSTALL ?= install

TARGET = kernel-chktaint

all: $(TARGET)

clean:

install: kernel-chktaint

	$(INSTALL) -D -m 755 $(TARGET) $(DESTDIR)$(PREFIX)/$(BINDIR)/$(TARGET)

# SPDX-License-Identifier: GPL-2.0

include ../scripts/Makefile.include

bindir ?= /usr/bin

ifeq ($(srctree),)



 Do not use make's built-in rules

 (this improves performance and avoids hard-to-debug behaviour);











#

 We need the following to be outside of kernel tree



$(OUTPUT)include/linux/counter.h: ../../include/uapi/linux/counter.h

	mkdir -p $(OUTPUT)include/linux 2>&1 || true

	ln -sf $(CURDIR)/../../include/uapi/linux/counter.h $@



COUNTER_EXAMPLE := $(OUTPUT)counter_example.o

$(COUNTER_EXAMPLE): prepare FORCE

	$(Q)$(MAKE) $(build)=counter_example



	rm -f $(ALL_PROGRAMS)

	find $(if $(OUTPUT),$(OUTPUT),.) -name '*.o' -delete -o -name '\.*.d' -delete

install: $(ALL_PROGRAMS)

	for program in $(ALL_PROGRAMS); do		\





.PHONY: all install clean FORCE prepare

# SPDX-License-Identifier: GPL-2.0

all: test mod

test: virtio_test vringh_test



CFLAGS += -g -O2 -Werror -Wno-maybe-uninitialized -Wall -I. -I../include/ -I ../../usr/include/ -Wno-pointer-sign -fno-strict-overflow -fno-strict-aliasing -fno-common -MMD -U_FORTIFY_SOURCE -include ../../include/linux/kconfig.h

vpath %.c ../../drivers/virtio ../../drivers/vhost



oot: build vhost as an out of tree module for a distro kernel

no effort is taken to make it actually build or work, but tends to mostly work

if the distro kernel is very close to upstream

#unsupported! this is a development tool only, don't use the

#resulting modules in production!

#Everyone depends on vhost

#Tweak the below to enable more modules

OOT_CONFIGS=\

	CONFIG_VHOST=m \

	CONFIG_VHOST_NET=n \

	CONFIG_VHOST_RING=n

OOT_BUILD=KCFLAGS="-I "${OOT_VHOST} ${MAKE} -C ${OOT_KSRC} V=${V}

	${OOT_BUILD} M=`pwd`/vhost_test

	${OOT_BUILD} M=${OOT_VHOST} ${OOT_CONFIGS}

oot-clean: oot-build



clean:

	${RM} *.o vringh_test virtio_test vhost_test/*.o vhost_test/.*.cmd \

-include *.d

# SPDX-License-Identifier: GPL-2.0





.c.o:



trace-agent: trace-agent.o trace-agent-ctl.o trace-agent-rw.o

	$(CC) $(CFLAGS) -o $@ $^

clean:

# SPDX-License-Identifier: GPL-2.0





CFLAGS += -Wall



main.o: main.c main.h

ring.o: ring.c main.h

ptr_ring.o: ptr_ring.c main.h ../../../include/linux/ptr_ring.h

virtio_ring_0_9.o: virtio_ring_0_9.c main.h

virtio_ring_poll.o: virtio_ring_poll.c virtio_ring_0_9.c main.h

virtio_ring_inorder.o: virtio_ring_inorder.c virtio_ring_0_9.c main.h

ring: ring.o main.o

virtio_ring_0_9: virtio_ring_0_9.o main.o

virtio_ring_poll: virtio_ring_poll.o main.o

virtio_ring_inorder: virtio_ring_inorder.o main.o

ptr_ring: ptr_ring.o main.o

noring: noring.o main.o

	-rm ring.o ring

	-rm virtio_ring_poll.o virtio_ring_poll

	-rm ptr_ring.o ptr_ring



.PHONY: all clean

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

# Makefile for bootconfig command

include ../scripts/Makefile.include

bindir ?= /usr/bin

ifeq ($(srctree),)





ALL_TARGETS := bootconfig

ALL_PROGRAMS := $(patsubst %,$(OUTPUT)%,$(ALL_TARGETS))







	install $(OUTPUT)bootconfig $(DESTDIR)$(bindir)

clean:

# SPDX-License-Identifier: GPL-2.0

include ../scripts/Makefile.include



 always use the host compiler



srctree := $(patsubst %/,%,$(dir $(CURDIR)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

endif





LIBELF_FLAGS := $(shell pkg-config libelf --cflags 2>/dev/null)

LIBELF_LIBS  := $(shell pkg-config libelf --libs 2>/dev/null || echo -lelf)



WARNINGS := $(EXTRA_WARNINGS) -Wno-switch-default -Wno-switch-enum -Wno-packed -Wno-nested-externs

CFLAGS   := -Werror $(WARNINGS) $(KBUILD_HOSTCFLAGS) -g $(INCLUDES) $(LIBELF_FLAGS)

LDFLAGS  += $(LIBELF_LIBS) $(LIBSUBCMD) $(KBUILD_HOSTLDFLAGS)

# Allow old libelf to be used:



AWK = awk



ifeq ($(SRCARCH),x86)

	SUBCMD_ORC := y

endif

export SUBCMD_CHECK SUBCMD_ORC



$(OBJTOOL_IN): fixdep FORCE

	@$(CONFIG_SHELL) ./sync-check.sh



	$(QUIET_LINK)$(CC) $(OBJTOOL_IN) $(LDFLAGS) -o $@





	$(call QUIET_CLEAN, objtool) $(RM) $(OBJTOOL)

	$(Q)find $(OUTPUT) -name '*.o' -delete -o -name '\.*.cmd' -delete -o -name '\.*.d' -delete





.PHONY: clean FORCE

# SPDX-License-Identifier: GPL-2.0

include ../scripts/Makefile.include

all: latency

clean: latency_clean

install: latency_install

latency:



	$(call descend,latency,install)

latency_clean:



.PHONY: all install clean latency latency_install latency_clean

# SPDX-License-Identifier: GPL-2.0

# Makefile for vm tools

#

VAR_CFLAGS := $(shell pkg-config --cflags libtracefs 2>/dev/null)

VAR_LDLIBS := $(shell pkg-config --libs libtracefs 2>/dev/null)



all: $(TARGETS)

%: %.c



	$(RM) latency-collector

prefix ?= /usr/local

sbindir ?= ${prefix}/sbin

install: all

	install -m 755 -p $(TARGETS) $(DESTDIR)$(sbindir)

# SPDX-License-Identifier: GPL-2.0

 Makefile for x86/kcpuid tool



kcpuid : kcpuid.c

CFLAGS = -Wextra



HWDATADIR ?= /usr/share/misc/



	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

.PHONY : clean

clean :



	install -d  $(DESTDIR)$(BINDIR)

# SPDX-License-Identifier: GPL-2.0

CC := $(CROSS_COMPILE)gcc

CFLAGS := -I../../usr/include



all: $(PROGS)

clean:

# SPDX-License-Identifier: GPL-2.0

INSTALL ?= install





	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $<

clean:



install: freefall

# SPDX-License-Identifier: GPL-2.0

include ../scripts/Makefile.include

bindir ?= /usr/bin

ifeq ($(srctree),)



 Do not use make's built-in rules

 (this improves performance and avoids hard-to-debug behaviour);





ALL_TARGETS := iio_event_monitor lsiio iio_generic_buffer

ALL_PROGRAMS := $(patsubst %,$(OUTPUT)%,$(ALL_TARGETS))

all: $(ALL_PROGRAMS)

export srctree OUTPUT CC LD CFLAGS

include $(srctree)/tools/build/Makefile.include



# We need the following to be outside of kernel tree

#

	ln -sf $(CURDIR)/../../include/uapi/linux/iio/buffer.h $@



prepare: $(OUTPUT)include/linux/iio

$(IIO_UTILS_IN): prepare FORCE

	$(Q)$(MAKE) $(build)=iio_utils

$(LSIIO_IN): prepare FORCE $(OUTPUT)iio_utils-in.o

	$(Q)$(MAKE) $(build)=lsiio

$(OUTPUT)lsiio: $(LSIIO_IN)

	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@

$(IIO_EVENT_MONITOR_IN): prepare FORCE $(OUTPUT)iio_utils-in.o

	$(Q)$(MAKE) $(build)=iio_event_monitor

$(OUTPUT)iio_event_monitor: $(IIO_EVENT_MONITOR_IN)

	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@

	$(Q)$(MAKE) $(build)=iio_generic_buffer

$(OUTPUT)iio_generic_buffer: $(IIO_GENERIC_BUFFER_IN)

	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@

clean:

	rm -rf $(OUTPUT)include/linux/iio



	install -d -m 755 $(DESTDIR)$(bindir);		\

		install $$program $(DESTDIR)$(bindir);	\

	done

FORCE:

# SPDX-License-Identifier: GPL-2.0

prefix = /usr

nosy-dump-version = 0.4

CC = gcc



nosy-dump : CFLAGS = -Wall -O2 -g

nosy-dump : LDFLAGS = -g

nosy-dump : LDLIBS = -lpopt

nosy-dump : nosy-dump.o decode-fcp.o



install :

 SPDX-License-Identifier: GPL-2.0-only





srctree := $(patsubst %/,%,$(dir $(CURDIR)))

srctree := $(patsubst %/,%,$(dir $(srctree)))

endif

# Do not use make's built-in rules

# (this improves performance and avoids hard-to-debug behaviour);

MAKEFLAGS += -r



ALL_TARGETS := spidev_test spidev_fdx

ALL_PROGRAMS := $(patsubst %,$(OUTPUT)%,$(ALL_TARGETS))

all: $(ALL_PROGRAMS)

export srctree OUTPUT CC LD CFLAGS

include $(srctree)/tools/build/Makefile.include



# We need the following to be outside of kernel tree

#

	ln -sf $(CURDIR)/../../include/uapi/linux/spi/spidev.h $@

	ln -sf $(CURDIR)/../../include/uapi/linux/spi/spi.h $@



#

# spidev_test

#

SPIDEV_TEST_IN := $(OUTPUT)spidev_test-in.o



#

 spidev_fdx



	$(Q)$(MAKE) $(build)=spidev_fdx

$(OUTPUT)spidev_fdx: $(SPIDEV_FDX_IN)

	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@

clean:



	install -d -m 755 $(DESTDIR)$(bindir);		\

		install $$program $(DESTDIR)$(bindir);	\

	done

FORCE:

 SPDX-License-Identifier: GPL-2.0-only

 Makefile for cpupower



# Copyright (C) 2005,2006 Dominik Brodowski <linux@dominikbrodowski.net>

#

 Based largely on the Makefile for udev by:



 Copyright (C) 2003,2004 Greg Kroah-Hartman <greg@kroah.com>



ifeq ("$(origin O)", "command line")



 check that the output directory actually exists

OUTDIR := $(shell cd $(OUTPUT) && pwd)



 --- CONFIGURATION BEGIN ---



# Set the following to `true' to make a unstripped, unoptimized

# binary. Leave this set to `false' for production use.

DEBUG ?=	true

 make the build silent. Set this to something else to make it noisy again.



# Internationalization support (output in different languages).

# Requires gettext.



 Set the following to 'true' to build/install the

 cpufreq-bench benchmarking tool



 Do not build libraries, but build the code in statically

# Libraries are still built, otherwise the Makefile code would

# be rather ugly.



# Prefix to the directories we're installing to



# --- CONFIGURATION END ---



 Package-related definitions. Distributions can modify the version

# and _should_ modify the PACKAGE_BUGREPORT definition

LIB_MAJ=			0.0.1





# Directory definitions. These are default and most probably

 do not need to be changed. Please note that DESTDIR is

 added in front of any of them



sbindir ?=	/usr/sbin

includedir ?=	/usr/include

docdir ?=       /usr/share/doc/packages/cpupower

confdir ?=      /etc/

bash_completion_dir ?= /usr/share/bash-completion/completions

 Toolchain: what tools do we use, and what options do they need:



INSTALL_PROGRAM = ${INSTALL}

INSTALL_DATA  = ${INSTALL} -m 644

#bash completion scripts get sourced and so they should be rw only.



# If you are running a cross compiler, you may want to set this

 to something more interesting, like "arm-linux-".  If you want

# to compile vs uClibc, that can be done here as well.

/usr/i386-linux-uclibc/usr/bin/i386-uclibc-

CC = $(CROSS)gcc

HOSTCC = gcc

MKDIR = mkdir

 64bit library detection



libdir ?=	/usr/lib64

libdir ?=	/usr/lib

endif

# Now we set up the build system

#

GMO_FILES = ${shell for HLANG in ${LANGUAGES}; do echo $(OUTPUT)po/$$HLANG.gmo; done;}



# check if compiler option is supported

cc-supports = ${shell if $(CC) ${1} -S -o /dev/null -x c /dev/null > /dev/null 2>&1; then echo "$(1)"; fi;}

 use '-Os' optimization if available, else use -O2



WARNINGS += -Wshadow

override CFLAGS += -DVERSION=\"$(VERSION)\" -DPACKAGE=\"$(PACKAGE)\" \



	utils/helpers/pci.o utils/helpers/bitmask.o \

	utils/idle_monitor/hsw_ext_idle.o \

	utils/cpupower.o utils/cpufreq-info.o utils/cpufreq-set.o \

	utils/cpuidle-set.o

UTIL_SRC := $(UTIL_OBJS:.o=.c)

UTIL_OBJS := $(addprefix $(OUTPUT),$(UTIL_OBJS))

UTIL_HEADERS = utils/helpers/helpers.h utils/idle_monitor/cpupower-monitor.h \

	utils/idle_monitor/idle_monitors.h utils/idle_monitor/idle_monitors.def

LIB_OBJS = 	lib/cpufreq.o lib/cpupower.o lib/cpuidle.o





ifeq ($(strip $(NLS)),true)

	INSTALL_NLS += install-gmo



ifeq ($(strip $(CPUFREQ_BENCH)),true)

	INSTALL_BENCH += install-bench

	COMPILE_BENCH += compile-bench

endif

ifeq ($(strip $(STATIC)),true)

        UTIL_HEADERS += $(LIB_HEADERS)





	QUIET=@

	ECHO=@echo





# if DEBUG is enabled, then we do not strip or optimize

ifeq ($(strip $(DEBUG)),true)

else

	STRIPCMD = $(STRIP) -s --remove-section=.note --remove-section=.comment

endif



# the actual make rules

all: libcpupower $(OUTPUT)cpupower $(COMPILE_NLS) $(COMPILE_BENCH)

	$(ECHO) "  CC      " $@

	$(QUIET) $(CC) $(CFLAGS) -fPIC -o $@ -c lib/$*.c

	$(ECHO) "  LD      " $@

	@ln -sf $(@F) $(OUTPUT)libcpupower.so

	@ln -sf $(@F) $(OUTPUT)libcpupower.so.$(LIB_MIN)



 Let all .o files depend on its .c file and all headers

# Might be worth to put this into utils/Makefile at some point of time

$(UTIL_OBJS): $(UTIL_HEADERS)

	$(ECHO) "  CC      " $@



	$(ECHO) "  CC      " $@

	$(QUIET) $(CC) $(CFLAGS) $(LDFLAGS) $(UTIL_OBJS) -lrt -lpci -L$(OUTPUT) -o $@

	$(QUIET) $(STRIPCMD) $@

	$(ECHO) "  GETTEXT " $@

	$(QUIET) xgettext --default-domain=$(PACKAGE) --add-comments \



	$(ECHO) "  MSGFMT  " $@

	$(QUIET) msgfmt -o $@ po/$*.po

create-gmo: ${GMO_FILES}

	$(ECHO) "  MSGMRG  " $@

		echo -n "Updating $$HLANG "; \

		if msgmerge po/$$HLANG.po $< -o \

		   $(OUTPUT)po/$$HLANG.new.po; then \

			mv -f $(OUTPUT)po/$$HLANG.new.po $(OUTPUT)po/$$HLANG.po; \

			rm -f $(OUTPUT)po/$$HLANG.new.po; \

		fi; \



compile-bench: $(OUTPUT)libcpupower.so.$(LIB_MAJ)



 we compile into subdirectories. if the target directory is not the

 source directory, they might not exists. So we depend the various

 files onto their directories.

DIRECTORY_DEPS = $(LIB_OBJS) $(UTIL_OBJS) $(GMO_FILES)

$(DIRECTORY_DEPS): | $(sort $(dir $(DIRECTORY_DEPS)))

 In the second step, we make a rule to actually create these directories

	$(QUIET) $(MKDIR) -p $@ 2>/dev/null

clean:

	-find $(OUTPUT) \( -not -type d \) -and \( -name '*~' -o -name '*.[oas]' \) -type f -print \

	 | xargs rm -f

	-rm -f $(OUTPUT)cpupower

	-rm -rf $(OUTPUT)po/*.gmo



install-lib: libcpupower

	$(CP) $(OUTPUT)libcpupower.so* $(DESTDIR)${libdir}/

	$(INSTALL_DATA) lib/cpufreq.h $(DESTDIR)${includedir}/cpufreq.h



	$(INSTALL) -d $(DESTDIR)${bindir}

	$(INSTALL_PROGRAM) $(OUTPUT)cpupower $(DESTDIR)${bindir}

	$(INSTALL) -d $(DESTDIR)${bash_completion_dir}

	$(INSTALL_SCRIPT) cpupower-completion.sh '$(DESTDIR)${bash_completion_dir}/cpupower'

install-man:

	$(INSTALL_DATA) -D man/cpupower-frequency-set.1 $(DESTDIR)${mandir}/man1/cpupower-frequency-set.1

	$(INSTALL_DATA) -D man/cpupower-idle-set.1 $(DESTDIR)${mandir}/man1/cpupower-idle-set.1

	$(INSTALL_DATA) -D man/cpupower-set.1 $(DESTDIR)${mandir}/man1/cpupower-set.1

	$(INSTALL_DATA) -D man/cpupower-monitor.1 $(DESTDIR)${mandir}/man1/cpupower-monitor.1

	for HLANG in $(LANGUAGES); do \

		echo '$(INSTALL_DATA) -D $(OUTPUT)po/$$HLANG.gmo $(DESTDIR)${localedir}/$$HLANG/LC_MESSAGES/cpupower.mo'; \

	done;

install-bench: compile-bench

DESTDIR must be set from outside to survive

	@sbindir=$(sbindir) bindir=$(bindir) docdir=$(docdir) confdir=$(confdir) $(MAKE) -C bench O=$(OUTPUT) install

ifeq ($(strip $(STATIC)),true)

else



	- rm -f $(DESTDIR)${libdir}/libcpupower.*

	- rm -f $(DESTDIR)${includedir}/cpuidle.h

	- rm -f $(DESTDIR)${bindir}/utils/cpupower

	- rm -f $(DESTDIR)${mandir}/man1/cpupower-frequency-set.1

	- rm -f $(DESTDIR)${mandir}/man1/cpupower-frequency-info.1

	- rm -f $(DESTDIR)${mandir}/man1/cpupower-monitor.1

	  done;

.PHONY: all utils libcpupower update-po create-gmo install-lib install-tools install-man install-gmo install uninstall clean

# SPDX-License-Identifier: GPL-2.0

ifeq ("$(origin O)", "command line")

ifneq ($(O),)



LIBS = -L../ -L$(OUTPUT) -lm

else

LIBS = -L../ -L$(OUTPUT) -lm -lcpupower





	$(ECHO) "  CC      " $@

	$(QUIET) $(CC) -c $(CFLAGS) $< -o $@

	$(ECHO) "  CC      " $@



all: $(OUTPUT)cpufreq-bench

	mkdir -p $(DESTDIR)/$(bindir)

	install -m 755 $(OUTPUT)cpufreq-bench $(DESTDIR)/$(sbindir)/cpufreq-bench

	install -m 644 README-BENCH $(DESTDIR)/$(docdir)/README-BENCH

	install -m 644 example.cfg $(DESTDIR)/$(confdir)/cpufreq-bench.conf

clean:

	rm -f $(OUTPUT)*.o

	rm -f $(OUTPUT)cpufreq-bench

# SPDX-License-Identifier: GPL-2.0





ifeq ("$(CONFIG_X86_TSC)", "y")





	- rm -rf *.o *.ko .*.cmd .*.mod.* *.mod.c



	install -d $(KMISC)

	/sbin/depmod -a

all:	default

# SPDX-License-Identifier: GPL-2.0

OUTPUT=./

	OUTPUT := $(O)/

endif

bindir  = /usr/bin

INSTALL = /usr/bin/install





$(OUTPUT)centrino-decode: centrino-decode.c



$(OUTPUT)dump_psb: dump_psb.c

	$(CC) $(CFLAGS) -o $@ dump_psb.c

	$(CC) $(CFLAGS) -o $@ -llrmi intel_gsic.c



all: $(OUTPUT)centrino-decode $(OUTPUT)dump_psb $(OUTPUT)intel_gsic $(OUTPUT)powernow-k8-decode

clean:



	$(INSTALL) -d $(DESTDIR)${bindir}



.PHONY: all default clean install

# SPDX-License-Identifier: GPL-2.0

OUTPUT=./

	OUTPUT := $(O)/

endif

bindir  = /usr/bin

INSTALL = /usr/bin/install





$(OUTPUT)centrino-decode: ../i386/centrino-decode.c



$(OUTPUT)powernow-k8-decode: ../i386/powernow-k8-decode.c



all: $(OUTPUT)centrino-decode $(OUTPUT)powernow-k8-decode

clean:



	$(INSTALL) -d $(DESTDIR)${bindir}



.PHONY: all default clean install

# SPDX-License-Identifier: GPL-2.0

PREFIX		?= /usr

DESTDIR		?=

all:

	@echo "Nothing to build"

	install bootgraph.py $(DESTDIR)$(PREFIX)/lib/pm-graph

	install -m 644 config/standby-callgraph.cfg $(DESTDIR)$(PREFIX)/lib/pm-graph/config

	install -m 644 config/standby-dev.cfg $(DESTDIR)$(PREFIX)/lib/pm-graph/config

	install -m 644 config/suspend.cfg $(DESTDIR)$(PREFIX)/lib/pm-graph/config

	install -m 644 config/suspend-x2-proc.cfg $(DESTDIR)$(PREFIX)/lib/pm-graph/config

	install -d  $(DESTDIR)$(PREFIX)/bin

	ln -s ../lib/pm-graph/bootgraph.py $(DESTDIR)$(PREFIX)/bin/bootgraph

	ln -s ../lib/pm-graph/sleepgraph.py $(DESTDIR)$(PREFIX)/bin/sleepgraph

	install sleepgraph.8 $(DESTDIR)$(PREFIX)/share/man/man8

	rm -f $(DESTDIR)$(PREFIX)/share/man/man8/sleepgraph.8

	rm -f $(DESTDIR)$(PREFIX)/bin/bootgraph

	rm -f $(DESTDIR)$(PREFIX)/bin/sleepgraph

	rm -f $(DESTDIR)$(PREFIX)/lib/pm-graph/config/*

	if [ -d $(DESTDIR)$(PREFIX)/lib/pm-graph/config ] ; then \

	fi;

	rm -f $(DESTDIR)$(PREFIX)/lib/pm-graph/__pycache__/*

	fi;

	rm -f $(DESTDIR)$(PREFIX)/lib/pm-graph/*

	fi;

 SPDX-License-Identifier: GPL-2.0-only

# tools/power/acpi/Makefile - ACPI tool Makefile

#

# Copyright (c) 2013, Intel Corporation

#   Author: Lv Zheng <lv.zheng@intel.com>

#

include ../../scripts/Makefile.include



clean: acpidbg_clean acpidump_clean ec_clean

uninstall: acpidbg_uninstall acpidump_uninstall ec_uninstall

acpidbg acpidump ec: FORCE

	$(call descend,tools/$@,all)

acpidbg_install acpidump_install ec_install:

	$(call descend,tools/$(@:_install=),install)



.PHONY: FORCE

 SPDX-License-Identifier: GPL-2.0-only

 tools/power/acpi/tools/acpidump/Makefile - ACPI tool Makefile



 Copyright (c) 2015, Intel Corporation

   Author: Lv Zheng <lv.zheng@intel.com>





include ../../Makefile.config

	ec_access.o

include ../../Makefile.rules

 SPDX-License-Identifier: GPL-2.0-only

# tools/power/acpi/tools/acpidbg/Makefile - ACPI tool Makefile

#

# Copyright (c) 2015, Intel Corporation

#   Author: Lv Zheng <lv.zheng@intel.com>

#



	../../../../../drivers/acpi/acpica\

	../../os_specific/service_layers\

CFLAGS += -DACPI_APPLICATION -DACPI_SINGLE_THREAD -DACPI_DEBUGGER\

LDFLAGS += -lpthread

TOOL_OBJS = \



 SPDX-License-Identifier: GPL-2.0-only

 tools/power/acpi/tools/acpidump/Makefile - ACPI tool Makefile



 Copyright (c) 2015, Intel Corporation

   Author: Lv Zheng <lv.zheng@intel.com>





include ../../Makefile.config



vpath %.c \

	./\

	apdump.o\

	apfiles.o\

	osunixxf.o\

	tbprint.o\

	utbuffer.o\

	utdebug.o\

	utexcep.o\

	utmath.o\

	utnonansi.o\

	utprint.o\

	utstrsuppt.o\

	utstrtoul64.o\

	utxferror.o\





	$(ECHO) "  INST    " acpidump.8

	$(QUIET) $(INSTALL_DATA) -D $< $(DESTDIR)$(mandir)/man8/acpidump.8

	$(ECHO) "  UNINST  " acpidump.8

	$(QUIET) rm -f $(DESTDIR)$(mandir)/man8/acpidump.8

# SPDX-License-Identifier: GPL-2.0

CC		= $(CROSS_COMPILE)gcc





x86_energy_perf_policy : x86_energy_perf_policy.c

override CFLAGS +=	-O2 -Wall -I../../../include

override CFLAGS +=	-DMSRHEADER='"../../../../arch/x86/include/asm/msr-index.h"'



	@mkdir -p $(BUILD_OUTPUT)



	@rm -f $(BUILD_OUTPUT)/x86_energy_perf_policy

install : x86_energy_perf_policy

	install $(BUILD_OUTPUT)/x86_energy_perf_policy $(DESTDIR)$(PREFIX)/bin/x86_energy_perf_policy

	install -d  $(DESTDIR)$(PREFIX)/share/man/man8

	install -m 644 x86_energy_perf_policy.8 $(DESTDIR)$(PREFIX)/share/man/man8

# SPDX-License-Identifier: GPL-2.0

include ../../../scripts/Makefile.include

bindir ?= /usr/bin

ifeq ($(srctree),)



 Do not use make's built-in rules

 (this improves performance and avoids hard-to-debug behaviour);





ALL_TARGETS := intel-speed-select

ALL_PROGRAMS := $(patsubst %,$(OUTPUT)%,$(ALL_TARGETS))

all: $(ALL_PROGRAMS)

export srctree OUTPUT CC LD CFLAGS

include $(srctree)/tools/build/Makefile.include



# We need the following to be outside of kernel tree

#



prepare: $(OUTPUT)include/linux/isst_if.h



$(ISST_IN): prepare FORCE



	rm -f $(ALL_PROGRAMS)

	find $(if $(OUTPUT),$(OUTPUT),.) -name '*.o' -delete -o -name '\.*.d' -delete

install: $(ALL_PROGRAMS)

	for program in $(ALL_PROGRAMS); do		\





.PHONY: all install clean FORCE prepare

# SPDX-License-Identifier: GPL-2.0

CC		= $(CROSS_COMPILE)gcc

BUILD_OUTPUT	:= $(CURDIR)

PREFIX		?= /usr

DESTDIR		?=

ifeq ("$(origin O)", "command line")

	BUILD_OUTPUT := $(O)

endif

override CFLAGS +=	-DINTEL_FAMILY_HEADER='"../../../../arch/x86/include/asm/intel-family.h"'

override CFLAGS +=	-D_FILE_OFFSET_BITS=64



	@mkdir -p $(BUILD_OUTPUT)

	$(CC) $(CFLAGS) $< -o $(BUILD_OUTPUT)/$@ $(LDFLAGS) -lcap -lrt

.PHONY : clean

clean :

	@rm -f $(BUILD_OUTPUT)/turbostat

	install -d  $(DESTDIR)$(PREFIX)/bin

	install -m 644 turbostat.8 $(DESTDIR)$(PREFIX)/share/man/man8

# SPDX-License-Identifier: GPL-2.0

include ../scripts/Makefile.include

bindir ?= /usr/bin

ifeq ($(srctree),)



 Do not use make's built-in rules

 (this improves performance and avoids hard-to-debug behaviour);



CFLAGS += -O2 -Wall -g -D_GNU_SOURCE -I$(OUTPUT)include

ALL_TARGETS := pcitest

ALL_PROGRAMS := $(patsubst %,$(OUTPUT)%,$(ALL_TARGETS))







#

 We need the following to be outside of kernel tree



$(OUTPUT)include/linux/: ../../include/uapi/linux/





PCITEST_IN := $(OUTPUT)pcitest-in.o



	rm -f $(ALL_PROGRAMS)

	rm -rf $(OUTPUT)include/



	install -d -m 755 $(DESTDIR)$(bindir);		\

		install $$program $(DESTDIR)$(bindir);	\

	done;						\

	for script in $(SCRIPTS); do			\

		install $$script $(DESTDIR)$(bindir);	\

	done

FORCE:

# SPDX-License-Identifier: GPL-2.0

include ../scripts/Makefile.include

prefix ?= /usr/local

LEX = flex

INSTALL ?= install

CFLAGS += -D__EXPORTED_HEADERS__ -I$(srctree)/tools/include/uapi \

	  -I$(srctree)/tools/include

# This will work when bpf is built in tools env. where srctree

 isn't set and when invoked from selftests build, where srctree

# is set to ".". building_out_of_srctree is undefined for in srctree

 builds

ifeq ($(srctree),)

update_srctree := 1

endif

ifeq ($(update_srctree),1)



ifeq ($(V),1)

  Q =



FEATURE_USER = .bpf

FEATURE_TESTS = libbfd disassembler-four-args

FEATURE_DISPLAY = libbfd disassembler-four-args

ifdef MAKECMDGOALS

ifeq ($(filter-out $(NON_CHECK_FEAT_TARGETS),$(MAKECMDGOALS)),)

  check_feat := 0

endif

endif

ifeq ($(check_feat),1)

else



ifeq ($(feature-disassembler-four-args), 1)



$(OUTPUT)%.yacc.c: $(srctree)/tools/bpf/%.y







$(OUTPUT)%.lex.o: $(OUTPUT)%.lex.c

	$(QUIET_CC)$(CC) $(CFLAGS) -c -o $@ $<





$(OUTPUT)bpf_jit_disasm: CFLAGS += -DPACKAGE='bpf_jit_disasm'





$(OUTPUT)bpf_asm: $(OUTPUT)bpf_asm.o $(OUTPUT)bpf_exp.yacc.o $(OUTPUT)bpf_exp.lex.o



$(OUTPUT)bpf_exp.lex.c: $(OUTPUT)bpf_exp.yacc.c

$(OUTPUT)bpf_exp.lex.o: $(OUTPUT)bpf_exp.lex.c

clean: bpftool_clean runqslower_clean resolve_btfids_clean

	$(call QUIET_CLEAN, bpf-progs)

	$(call QUIET_CLEAN, core-gen)

	$(Q)$(RM) -- $(OUTPUT)FEATURE-DUMP.bpf

	$(Q)$(RM) -r -- $(OUTPUT)feature

	$(call QUIET_INSTALL, bpf_jit_disasm)

	$(Q)$(INSTALL) $(OUTPUT)bpf_jit_disasm $(DESTDIR)$(prefix)/bin/bpf_jit_disasm

	$(call QUIET_INSTALL, bpf_dbg)

	$(Q)$(INSTALL) $(OUTPUT)bpf_asm $(DESTDIR)$(prefix)/bin/bpf_asm

bpftool:



	$(call descend,bpftool,install)

bpftool_clean:



runqslower:

	$(call descend,runqslower)



resolve_btfids:

	$(call descend,resolve_btfids)



.PHONY: all install clean bpftool bpftool_install bpftool_clean \

	resolve_btfids resolve_btfids_clean

 SPDX-License-Identifier: GPL-2.0-only

include ../../scripts/Makefile.include

include ../../scripts/utilities.mak

ifeq ($(srctree),)



ifeq ($(V),1)

  Q =





  _OUTPUT := $(OUTPUT)

  _OUTPUT := $(CURDIR)

endif

BOOTSTRAP_OUTPUT := $(_OUTPUT)/bootstrap/

LIBBPF_DESTDIR := $(LIBBPF_OUTPUT)

LIBBPF_INCLUDE := $(LIBBPF_DESTDIR)/include

LIBBPF := $(LIBBPF_OUTPUT)libbpf.a

LIBBPF_BOOTSTRAP_DESTDIR := $(LIBBPF_BOOTSTRAP_OUTPUT)

LIBBPF_BOOTSTRAP_INCLUDE := $(LIBBPF_BOOTSTRAP_DESTDIR)/include

LIBBPF_BOOTSTRAP := $(LIBBPF_BOOTSTRAP_OUTPUT)libbpf.a

 We need to copy hashmap.h and nlattr.h which is not otherwise exported by

# libbpf, but still required by bpftool.

LIBBPF_INTERNAL_HDRS := $(addprefix $(LIBBPF_HDRS_DIR)/,hashmap.h nlattr.h)



BPFTOOL_VERSION := $(shell make -rR --no-print-directory -sC ../../.. kernelversion)

endif

$(LIBBPF_OUTPUT) $(BOOTSTRAP_OUTPUT) $(LIBBPF_BOOTSTRAP_OUTPUT) $(LIBBPF_HDRS_DIR) $(LIBBPF_BOOTSTRAP_HDRS_DIR):



$(LIBBPF): $(wildcard $(BPF_DIR)/*.[ch] $(BPF_DIR)/Makefile) | $(LIBBPF_OUTPUT)



	$(call QUIET_INSTALL, $@)



$(LIBBPF_BOOTSTRAP): $(wildcard $(BPF_DIR)/*.[ch] $(BPF_DIR)/Makefile) | $(LIBBPF_BOOTSTRAP_OUTPUT)

		ARCH= CC=$(HOSTCC) LD=$(HOSTLD) $@ install_headers

$(LIBBPF_BOOTSTRAP_INTERNAL_HDRS): $(LIBBPF_BOOTSTRAP_HDRS_DIR)/%.h: $(BPF_DIR)/%.h | $(LIBBPF_BOOTSTRAP_HDRS_DIR)

	$(Q)install -m 644 -t $(LIBBPF_BOOTSTRAP_HDRS_DIR) $<

	$(call QUIET_CLEAN, libbpf)

	$(Q)$(MAKE) -C $(BPF_DIR) OUTPUT=$(LIBBPF_OUTPUT) clean >/dev/null

	$(call QUIET_CLEAN, libbpf-bootstrap)

	$(Q)$(MAKE) -C $(BPF_DIR) OUTPUT=$(LIBBPF_BOOTSTRAP_OUTPUT) clean >/dev/null

prefix ?= /usr/local



CFLAGS += -O2

CFLAGS += $(filter-out -Wswitch-enum -Wnested-externs,$(EXTRA_WARNINGS))

	-I$(if $(OUTPUT),$(OUTPUT),.) \

	-I$(srctree)/tools/include/uapi

ifneq ($(EXTRA_CFLAGS),)

CFLAGS += $(EXTRA_CFLAGS)

endif

ifneq ($(EXTRA_LDFLAGS),)

LDFLAGS += $(EXTRA_LDFLAGS)

endif

INSTALL ?= install

RM ?= rm -f

FEATURE_TESTS = libbfd disassembler-four-args reallocarray zlib libcap \

	clang-bpf-co-re

ifdef MAKECMDGOALS

ifeq ($(filter-out $(NON_CHECK_FEAT_TARGETS),$(MAKECMDGOALS)),)

  check_feat := 0

endif

endif

ifeq ($(check_feat),1)

else



ifeq ($(feature-disassembler-four-args), 1)



ifeq ($(feature-reallocarray), 0)



LIBS_BOOTSTRAP = $(LIBBPF_BOOTSTRAP) -lelf -lz

ifeq ($(feature-libcap), 1)





all: $(OUTPUT)bpftool





  LIBS += -lbfd -ldl -lopcodes

else ifeq ($(feature-libbfd-liberty),1)

  LIBS += -lbfd -ldl -lopcodes -liberty

else ifeq ($(feature-libbfd-liberty-z),1)

  LIBS += -lbfd -ldl -lopcodes -liberty -lz

endif

ifneq ($(filter -lbfd,$(LIBS)),)

CFLAGS += -DHAVE_LIBBFD_SUPPORT

SRCS += $(BFD_SRCS)

endif



BOOTSTRAP_OBJS = $(addprefix $(BOOTSTRAP_OUTPUT),main.o common.o json_writer.o gen.o btf.o xlated_dumper.o btf_dumper.o disasm.o)



OBJS = $(patsubst %.c,$(OUTPUT)%.o,$(SRCS)) $(OUTPUT)disasm.o



VMLINUX_BTF_PATHS ?= $(if $(O),$(O)/vmlinux)				\

		     /boot/vmlinux-$(shell uname -r)

VMLINUX_BTF ?= $(abspath $(firstword $(wildcard $(VMLINUX_BTF_PATHS))))



ifneq ($(VMLINUX_BTF)$(VMLINUX_H),)

ifeq ($(feature-clang-bpf-co-re),1)

BUILD_BPF_SKELS := 1

ifeq ($(VMLINUX_H),)

else

	$(Q)cp "$(VMLINUX_H)" $@

endif

		-I$(srctree)/tools/include/uapi/ \

		-I$(LIBBPF_BOOTSTRAP_INCLUDE) \

		-g -O2 -Wall -target bpf -c $< -o $@ && $(LLVM_STRIP) -g $@

$(OUTPUT)%.skel.h: $(OUTPUT)%.bpf.o $(BPFTOOL_BOOTSTRAP)



$(OUTPUT)prog.o: $(OUTPUT)profiler.skel.h



endif

endif



$(BOOTSTRAP_OUTPUT)disasm.o: $(srctree)/kernel/bpf/disasm.c



$(OUTPUT)disasm.o: $(srctree)/kernel/bpf/disasm.c



$(OUTPUT)feature.o:



$(BPFTOOL_BOOTSTRAP): $(BOOTSTRAP_OBJS) $(LIBBPF_BOOTSTRAP)



$(OUTPUT)bpftool: $(OBJS) $(LIBBPF)



$(BOOTSTRAP_OUTPUT)%.o: %.c $(LIBBPF_BOOTSTRAP_INTERNAL_HDRS) | $(BOOTSTRAP_OUTPUT)

	$(QUIET_CC)$(HOSTCC) \

		-c -MMD -o $@ $<

	$(QUIET_CC)$(CC) $(CFLAGS) -c -MMD -o $@ $<

	$(call QUIET_CLEAN, feature-detect)



clean: $(LIBBPF)-clean $(LIBBPF_BOOTSTRAP)-clean feature-detect-clean

	$(call QUIET_CLEAN, bpftool)

	$(Q)$(RM) -- $(OUTPUT)*.skel.h $(OUTPUT)vmlinux.h

	$(Q)$(RM) -r -- $(LIBBPF_OUTPUT) $(BOOTSTRAP_OUTPUT)

	$(Q)$(RM) -r -- $(OUTPUT)feature/



	$(Q)$(INSTALL) -m 0755 -d $(DESTDIR)$(bash_compdir)

	$(Q)$(INSTALL) -m 0644 bash-completion/bpftool $(DESTDIR)$(bash_compdir)

uninstall:

	$(Q)$(RM) -- $(DESTDIR)$(prefix)/sbin/bpftool

	$(Q)$(RM) -- $(DESTDIR)$(bash_compdir)/bpftool

doc:



	$(call descend,Documentation,clean)

doc-install:



	$(call descend,Documentation,uninstall)

FORCE:

.DEFAULT_GOAL := all

 SPDX-License-Identifier: GPL-2.0-only

include ../../../scripts/utilities.mak

INSTALL ?= install

RM ?= rm -f

RMDIR ?= rmdir --ignore-fail-on-non-empty

else

  Q = @

endif

prefix ?= /usr/local

mandir ?= $(prefix)/man



MAN8_RST = $(wildcard bpftool*.rst)

DOC_MAN8 = $(addprefix $(OUTPUT),$(_DOC_MAN8))





list_pages = $(sort $(basename $(filter-out $(1),$(MAN8_RST))))

	"\t**bpf**\ (2),\n" \

	"\n")

ifndef RST2MAN_DEP

	$(error "rst2man not found, but required to generate man pages")

endif



	$(Q)$(RM) $(DOC_MAN8)

install: man

	$(call QUIET_INSTALL, Documentation-man)



	$(call QUIET_UNINST, Documentation-man)

	$(Q)$(RMDIR) $(DESTDIR)$(man8dir)

.PHONY: man man8 clean install uninstall

 SPDX-License-Identifier: GPL-2.0-only

include ../../scripts/Makefile.include

include ../../scripts/Makefile.arch



ifeq ($(V),1)

  Q =

  msg =

  MAKEFLAGS=--no-print-directory

endif

# always use the host compiler

CC       = $(HOSTCC)

ARCH     = $(HOSTARCH)

RM      ?= rm

OUTPUT ?= $(srctree)/tools/bpf/resolve_btfids/

SUBCMD_SRC := $(srctree)/tools/lib/subcmd/

LIBBPF_OUT := $(abspath $(dir $(BPFOBJ)))/

SUBCMDOBJ  := $(OUTPUT)/libsubcmd/libsubcmd.a

LIBBPF_INCLUDE := $(LIBBPF_DESTDIR)include

BINARY     := $(OUTPUT)/resolve_btfids





	$(call msg,MKDIR,,$@)



	$(Q)$(MAKE) -C $(SUBCMD_SRC) OUTPUT=$(abspath $(dir $@))/ $(abspath $@)

$(BPFOBJ): $(wildcard $(LIBBPF_SRC)/*.[ch] $(LIBBPF_SRC)/Makefile) | $(LIBBPF_OUT)

	$(Q)$(MAKE) $(submake_extras) -C $(LIBBPF_SRC) OUTPUT=$(LIBBPF_OUT)    \



          -I$(srctree)/tools/include \

          -I$(srctree)/tools/include/uapi \

          -I$(LIBBPF_INCLUDE) \

          -I$(SUBCMD_SRC)

LIBS = -lelf -lz

export srctree OUTPUT CFLAGS Q

include $(srctree)/tools/build/Makefile.include

$(BINARY_IN): $(BPFOBJ) fixdep FORCE | $(OUTPUT)



	$(call msg,LINK,$@)

	$(Q)$(CC) $(BINARY_IN) $(LDFLAGS) -o $@ $(BPFOBJ) $(SUBCMDOBJ) $(LIBS)

clean_objects := $(wildcard $(OUTPUT)/*.o                \

                            $(OUTPUT)/.*.o.d             \

                            $(LIBBPF_DESTDIR)            \



ifneq ($(clean_objects),)

clean: fixdep-clean

else



tags:





 SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)

include ../../scripts/Makefile.include



BPFTOOL_OUTPUT := $(OUTPUT)bpftool/

DEFAULT_BPFTOOL := $(BPFTOOL_OUTPUT)bpftool

BPFTOOL ?= $(DEFAULT_BPFTOOL)

BPFOBJ := $(BPFOBJ_OUTPUT)libbpf.a

BPF_DESTDIR := $(BPFOBJ_OUTPUT)

BPF_INCLUDE := $(BPF_DESTDIR)/include

CFLAGS := -g -Wall

# Try to detect best kernel BTF source

KERNEL_REL := $(shell uname -r)

VMLINUX_BTF_PATHS := $(if $(O),$(O)/vmlinux)		\

	/boot/vmlinux-$(KERNEL_REL)



ifeq ($(V),1)

Q =



.DELETE_ON_ERROR:

.PHONY: all clean runqslower libbpf_hdrs

all: runqslower

runqslower: $(OUTPUT)/runqslower

clean:

	$(Q)$(RM) -r $(BPFOBJ_OUTPUT) $(BPFTOOL_OUTPUT)

	$(Q)$(RM) $(OUTPUT)runqslower

	$(Q)$(RM) -r .output

libbpf_hdrs: $(BPFOBJ)

$(OUTPUT)/runqslower: $(OUTPUT)/runqslower.o $(BPFOBJ)







	$(QUIET_GEN)$(BPFTOOL) gen skeleton $< > $@

$(OUTPUT)/%.bpf.o: %.bpf.c $(BPFOBJ) | $(OUTPUT)

	$(QUIET_GEN)$(CLANG) -g -O2 -target bpf $(INCLUDES)		      \

	$(LLVM_STRIP) -g $@

$(OUTPUT)/%.o: %.c | $(OUTPUT)

	$(QUIET_CC)$(CC) $(CFLAGS) $(INCLUDES) -c $(filter %.c,$^) -o $@

	$(QUIET_MKDIR)mkdir -p $@

ifeq ($(VMLINUX_H),)

	$(Q)if [ ! -e "$(VMLINUX_BTF_PATH)" ] ; then \

			"specify its location." >&2;			       \

else

	$(Q)cp "$(VMLINUX_H)" $@

endif

		    DESTDIR=$(BPFOBJ_OUTPUT) prefix= $(abspath $@) install_headers

# SPDX-License-Identifier: GPL-2.0

#

 kbuild file for usr/ - including initramfs image





# cmd_bzip2, cmd_lzma, cmd_lzo, cmd_lz4 from scripts/Makefile.lib appends the

# size at the end of the compressed file, which unfortunately does not work

 with unpack_to_rootfs(). Make size_append no-op.



compress-y					:= shipped

compress-$(CONFIG_INITRAMFS_COMPRESSION_GZIP)	:= gzip

compress-$(CONFIG_INITRAMFS_COMPRESSION_BZIP2)	:= bzip2

compress-$(CONFIG_INITRAMFS_COMPRESSION_LZMA)	:= lzma

compress-$(CONFIG_INITRAMFS_COMPRESSION_XZ)	:= xzmisc

compress-$(CONFIG_INITRAMFS_COMPRESSION_LZO)	:= lzo

compress-$(CONFIG_INITRAMFS_COMPRESSION_LZ4)	:= lz4

compress-$(CONFIG_INITRAMFS_COMPRESSION_ZSTD)	:= zstd

obj-$(CONFIG_BLK_DEV_INITRD) := initramfs_data.o

$(obj)/initramfs_data.o: $(obj)/initramfs_inc_data

ramfs-input := $(strip $(shell echo $(CONFIG_INITRAMFS_SOURCE)))



 If CONFIG_INITRAMFS_SOURCE is empty, generate a small initramfs with the

 default contents.

ifeq ($(ramfs-input),)





# If CONFIG_INITRAMFS_SOURCE specifies a single file, and it is suffixed with

# .cpio, use it directly as an initramfs.



# If CONFIG_INITRAMFS_SOURCE specifies a single file, and it is suffixed with

# .cpio.*, use it directly as an initramfs, and avoid double compression.

ifeq ($(words $(subst .cpio.,$(space),$(ramfs-input))),2)

cpio-data := $(ramfs-input)

compress-y := shipped

endif



 For other cases, generate the initramfs cpio archive based on the contents

 specified by CONFIG_INITRAMFS_SOURCE.

ifeq ($(cpio-data),)





# .initramfs_data.cpio.d is used to identify all files included

 in initramfs and to detect if any files are added/removed.

 Removed files are identified by directory timestamp being updated

 The dependency list is generated by gen_initramfs.sh -l

-include $(obj)/.initramfs_data.cpio.d

# do not try to update files included in initramfs



quiet_cmd_initfs = GEN     $@

	$(CONFIG_SHELL) $< -o $@ -l $(obj)/.initramfs_data.cpio.d \

	$(if $(CONFIG_INITRAMFS_ROOT_GID), -g $(CONFIG_INITRAMFS_ROOT_GID)) \

	$(ramfs-input)

# We rebuild initramfs_data.cpio if:

 1) Any included file is newer than initramfs_data.cpio

 2) There are changes in which files are included (added or deleted)

# 3) If gen_init_cpio are newer than initramfs_data.cpio

 4) Arguments to gen_initramfs.sh changes

$(obj)/initramfs_data.cpio: $(src)/gen_initramfs.sh $(obj)/gen_init_cpio $(deps_initramfs) FORCE



endif



targets += initramfs_data.cpio initramfs_inc_data

subdir-$(CONFIG_UAPI_HEADER_TEST) += include

 SPDX-License-Identifier: GPL-2.0-only



 Unlike the kernel space, exported headers are written in standard C.

#  - Forbid C++ style comments

#  - Use '__inline__', '__asm__' instead of 'inline', 'asm'

#

 -std=c90 (equivalent to -ansi) catches the violation of those.

# We cannot go as far as adding -Wpedantic since it emits too many warnings.

UAPI_CFLAGS := -std=c90 -Wall -Werror=implicit-function-declaration

# In theory, we do not care -m32 or -m64 for header compile tests.

# It is here just because CONFIG_CC_CAN_LINK is tested with -m32 or -m64.





 The following are excluded for now because they fail to build.



 Do not add a new header to the blacklist without legitimate reason.

# Please consider to fix the header first.

#

 Sorted alphabetically.

no-header-test += asm/shmbuf.h

no-header-test += asm/ucontext.h

no-header-test += linux/android/binder.h

no-header-test += linux/coda.h

no-header-test += linux/hdlc/ioctl.h

no-header-test += linux/matroxfb.h

no-header-test += linux/nfc.h

no-header-test += linux/omapfb.h

no-header-test += linux/phonet.h

no-header-test += linux/sctp.h

no-header-test += linux/sysctl.h

no-header-test += linux/usb/audio.h

no-header-test += linux/v4l2-mediabus.h

no-header-test += linux/v4l2-subdev.h

no-header-test += linux/videodev2.h

no-header-test += sound/asequencer.h

no-header-test += sound/asound.h

no-header-test += xen/evtchn.h



# More headers are broken in some architectures

no-header-test += linux/bpf_perf_event.h

endif

ifeq ($(SRCARCH),ia64)

no-header-test += asm/setup.h

no-header-test += linux/if_bonding.h

endif

ifeq ($(SRCARCH),mips)



ifeq ($(SRCARCH),powerpc)

no-header-test += linux/bpf_perf_event.h

endif

no-header-test += linux/bpf_perf_event.h

endif

no-header-test += asm/stat.h

no-header-test += asm/fbio.h

endif

 asm-generic/*.h is used by asm/*.h, and should not be included directly



extra-y := $(patsubst $(obj)/%.h,%.hdrtest, $(shell find $(obj) -name '*.h' 2>/dev/null))

 Include the header twice to detect missing include guard.

quiet_cmd_hdrtest = HDRTEST $<

      cmd_hdrtest = \

		$(CC) $(c_flags) -S -o /dev/null -x c /dev/null \

		touch $@

$(obj)/%.hdrtest: $(obj)/%.h FORCE

	$(call if_changed_dep,hdrtest)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux kernel device drivers.

#

 15 Sep 2000, Christoph Hellwig <hch@infradead.org>

# Rewritten to use lists instead of if-statements.

#

obj-y				+= irqchip/



obj-$(CONFIG_GENERIC_PHY)	+= phy/

# GPIO must come after pinctrl as gpios may need to mux pins etc

obj-y				+= pwm/

obj-y				+= pci/

obj-$(CONFIG_PARISC)		+= parisc/

obj-y				+= video/

obj-y				+= idle/

# IPMI must come before ACPI in order to provide IPMI opregion support





# PnP must come after ACPI since it will eventually need to check if acpi

# was used and do nothing if so



# Many drivers will want to use DMA so this has to be made available

# really early.



 SOC specific infrastructure drivers.

obj-y				+= soc/

obj-$(CONFIG_VIRTIO)		+= virtio/

obj-$(CONFIG_VIRTIO_PCI_LIB)	+= virtio/

obj-$(CONFIG_XEN)		+= xen/

# regulators early, since some subsystems rely on them to initialize



# reset controllers early, since gpu drivers might rely on them to initialize



# tty/ comes before char/ so that the VT console is the boot-time

 default.

obj-y				+= tty/

obj-y				+= char/

# iommu/ comes before gpu as gpu are using iommu controllers



 gpu/ comes after char for AGP vs DRM startup and after iommu

obj-y				+= gpu/

obj-$(CONFIG_CONNECTOR)		+= connector/

# i810fb and intelfb depend on char/agp/



obj-y				+= base/ block/ misc/ mfd/ nfc/

obj-$(CONFIG_LIBNVDIMM)		+= nvdimm/

obj-$(CONFIG_CXL_BUS)		+= cxl/

obj-$(CONFIG_DMA_SHARED_BUFFER) += dma-buf/

obj-y				+= macintosh/

obj-y				+= scsi/

obj-y				+= nvme/

obj-$(CONFIG_TARGET_CORE)	+= target/

obj-$(CONFIG_SPI)		+= spi/

obj-$(CONFIG_HSI)		+= hsi/

obj-y				+= net/

obj-$(CONFIG_UIO)		+= uio/

obj-y				+= cdrom/

obj-y				+= auxdisplay/

obj-$(CONFIG_DIO)		+= dio/

obj-$(CONFIG_ZORRO)		+= zorro/

obj-$(CONFIG_TC)		+= tc/

obj-$(CONFIG_USB)		+= usb/

obj-$(CONFIG_USB_SUPPORT)	+= usb/

obj-$(CONFIG_USB_GADGET)	+= usb/

obj-$(CONFIG_OF)		+= usb/

obj-$(CONFIG_GAMEPORT)		+= input/gameport/

obj-$(CONFIG_RTC_LIB)		+= rtc/

obj-$(CONFIG_PPS)		+= pps/

obj-$(CONFIG_W1)		+= w1/

obj-$(CONFIG_HWMON)		+= hwmon/

obj-$(CONFIG_WATCHDOG)		+= watchdog/

obj-$(CONFIG_ISDN)		+= isdn/

obj-$(CONFIG_EISA)		+= eisa/

obj-$(CONFIG_PM_OPP)		+= opp/

obj-$(CONFIG_CPU_FREQ)		+= cpufreq/

obj-$(CONFIG_CPU_IDLE)		+= cpuidle/

obj-$(CONFIG_MEMSTICK)		+= memstick/

obj-$(CONFIG_CRYPTO)		+= crypto/

obj-y				+= clocksource/

obj-$(CONFIG_HID)		+= hid/

obj-$(CONFIG_OF)		+= of/

obj-$(CONFIG_BCMA)		+= bcma/

obj-$(CONFIG_VHOST)		+= vhost/

obj-$(CONFIG_GREYBUS)		+= greybus/

obj-$(CONFIG_STAGING)		+= staging/

obj-y				+= platform/

obj-$(CONFIG_MAILBOX)		+= mailbox/

obj-$(CONFIG_HWSPINLOCK)	+= hwspinlock/

obj-$(CONFIG_REMOTEPROC)	+= remoteproc/

obj-$(CONFIG_SOUNDWIRE)		+= soundwire/

# Virtualization drivers

obj-$(CONFIG_VIRT_DRIVERS)	+= virt/



obj-$(CONFIG_EXTCON)		+= extcon/

obj-$(CONFIG_IIO)		+= iio/

obj-$(CONFIG_IPACK_BUS)		+= ipack/

obj-$(CONFIG_POWERCAP)		+= powercap/

obj-$(CONFIG_PERF_EVENTS)	+= perf/

obj-$(CONFIG_CORESIGHT)		+= hwtracing/coresight/

obj-y				+= hwtracing/intel_th/

obj-$(CONFIG_ANDROID)		+= android/

obj-$(CONFIG_FPGA)		+= fpga/

obj-$(CONFIG_TEE)		+= tee/

obj-$(CONFIG_MULTIPLEXER)	+= mux/

obj-$(CONFIG_SIOX)		+= siox/

obj-$(CONFIG_COUNTER)		+= counter/

# SPDX-License-Identifier: GPL-2.0

# generic gpio support: platform drivers, dedicated expander chips, etc



obj-$(CONFIG_GPIOLIB)		+= gpiolib.o

obj-$(CONFIG_GPIOLIB)		+= gpiolib-legacy.o

obj-$(CONFIG_GPIO_CDEV)		+= gpiolib-cdev.o

obj-$(CONFIG_GPIO_SYSFS)	+= gpiolib-sysfs.o



# Device drivers. Generally keep list sorted alphabetically

obj-$(CONFIG_GPIO_GENERIC)	+= gpio-generic.o

# directly supported by gpio-generic



obj-$(CONFIG_GPIO_104_DIO_48E)		+= gpio-104-dio-48e.o

obj-$(CONFIG_GPIO_104_IDI_48)		+= gpio-104-idi-48.o

obj-$(CONFIG_GPIO_104_IDIO_16)		+= gpio-104-idio-16.o

obj-$(CONFIG_GPIO_74X164)		+= gpio-74x164.o

obj-$(CONFIG_GPIO_74XX_MMIO)		+= gpio-74xx-mmio.o

obj-$(CONFIG_GPIO_BCM_XGS_IPROC)	+= gpio-xgs-iproc.o

obj-$(CONFIG_GPIO_BD70528)		+= gpio-bd70528.o

obj-$(CONFIG_GPIO_BD71815)		+= gpio-bd71815.o

obj-$(CONFIG_GPIO_BD71828)		+= gpio-bd71828.o

obj-$(CONFIG_GPIO_BD9571MWV)		+= gpio-bd9571mwv.o

obj-$(CONFIG_GPIO_BRCMSTB)		+= gpio-brcmstb.o

obj-$(CONFIG_GPIO_BT8XX)		+= gpio-bt8xx.o

obj-$(CONFIG_GPIO_CADENCE)		+= gpio-cadence.o

obj-$(CONFIG_GPIO_CLPS711X)		+= gpio-clps711x.o

obj-$(CONFIG_GPIO_SNPS_CREG)		+= gpio-creg-snps.o

obj-$(CONFIG_GPIO_DLN2)			+= gpio-dln2.o

obj-$(CONFIG_GPIO_DWAPB)		+= gpio-dwapb.o

obj-$(CONFIG_GPIO_EIC_SPRD)		+= gpio-eic-sprd.o

obj-$(CONFIG_GPIO_EXAR)			+= gpio-exar.o

obj-$(CONFIG_GPIO_F7188X)		+= gpio-f7188x.o

obj-$(CONFIG_GPIO_FTGPIO010)		+= gpio-ftgpio010.o

obj-$(CONFIG_GPIO_HISI)                 += gpio-hisi.o

obj-$(CONFIG_GPIO_ICH)			+= gpio-ich.o

obj-$(CONFIG_GPIO_IDT3243X)		+= gpio-idt3243x.o

obj-$(CONFIG_GPIO_IT87)			+= gpio-it87.o

obj-$(CONFIG_GPIO_IXP4XX)		+= gpio-ixp4xx.o

obj-$(CONFIG_GPIO_JANZ_TTL)		+= gpio-janz-ttl.o

obj-$(CONFIG_GPIO_KEMPLD)		+= gpio-kempld.o

obj-$(CONFIG_GPIO_LOGICVC)		+= gpio-logicvc.o

obj-$(CONFIG_GPIO_LOONGSON1)		+= gpio-loongson1.o

obj-$(CONFIG_GPIO_LOONGSON)		+= gpio-loongson.o

obj-$(CONFIG_GPIO_LP3943)		+= gpio-lp3943.o

obj-$(CONFIG_GPIO_LP873X)		+= gpio-lp873x.o

obj-$(CONFIG_GPIO_LP87565)		+= gpio-lp87565.o

obj-$(CONFIG_GPIO_LPC18XX)		+= gpio-lpc18xx.o

obj-$(CONFIG_GPIO_LPC32XX)		+= gpio-lpc32xx.o

obj-$(CONFIG_GPIO_MADERA)		+= gpio-madera.o

obj-$(CONFIG_GPIO_MAX3191X)		+= gpio-max3191x.o

obj-$(CONFIG_GPIO_MAX7300)		+= gpio-max7300.o

obj-$(CONFIG_GPIO_MAX7301)		+= gpio-max7301.o

obj-$(CONFIG_GPIO_MAX730X)		+= gpio-max730x.o

obj-$(CONFIG_GPIO_MAX732X)		+= gpio-max732x.o

obj-$(CONFIG_GPIO_MAX77620)		+= gpio-max77620.o

obj-$(CONFIG_GPIO_MAX77650)		+= gpio-max77650.o

obj-$(CONFIG_GPIO_MB86S7X)		+= gpio-mb86s7x.o

obj-$(CONFIG_GPIO_MC33880)		+= gpio-mc33880.o

obj-$(CONFIG_GPIO_MENZ127)		+= gpio-menz127.o

obj-$(CONFIG_GPIO_MERRIFIELD)		+= gpio-merrifield.o

obj-$(CONFIG_GPIO_ML_IOH)		+= gpio-ml-ioh.o

obj-$(CONFIG_GPIO_MLXBF)		+= gpio-mlxbf.o

obj-$(CONFIG_GPIO_MLXBF2)		+= gpio-mlxbf2.o

obj-$(CONFIG_GPIO_MM_LANTIQ)		+= gpio-mm-lantiq.o

obj-$(CONFIG_GPIO_MOCKUP)		+= gpio-mockup.o

obj-$(CONFIG_GPIO_MOXTET)		+= gpio-moxtet.o

obj-$(CONFIG_GPIO_MPC5200)		+= gpio-mpc5200.o

obj-$(CONFIG_GPIO_MPC8XXX)		+= gpio-mpc8xxx.o

obj-$(CONFIG_GPIO_MSC313)		+= gpio-msc313.o

obj-$(CONFIG_GPIO_MT7621)		+= gpio-mt7621.o

obj-$(CONFIG_GPIO_MVEBU)		+= gpio-mvebu.o

obj-$(CONFIG_GPIO_MXS)			+= gpio-mxs.o

obj-$(CONFIG_GPIO_OCTEON)		+= gpio-octeon.o

obj-$(CONFIG_GPIO_PCH)			+= gpio-pch.o

obj-$(CONFIG_GPIO_PCIE_IDIO_24)		+= gpio-pcie-idio-24.o

obj-$(CONFIG_GPIO_PCI_IDIO_16)		+= gpio-pci-idio-16.o

obj-$(CONFIG_GPIO_PISOSR)		+= gpio-pisosr.o

obj-$(CONFIG_GPIO_PL061)		+= gpio-pl061.o

obj-$(CONFIG_GPIO_PXA)			+= gpio-pxa.o

obj-$(CONFIG_GPIO_RCAR)			+= gpio-rcar.o

obj-$(CONFIG_GPIO_REG)			+= gpio-reg.o

obj-$(CONFIG_GPIO_SAMA5D2_PIOBU)	+= gpio-sama5d2-piobu.o

obj-$(CONFIG_GPIO_SCH311X)		+= gpio-sch311x.o

obj-$(CONFIG_GPIO_SIOX)			+= gpio-siox.o

obj-$(CONFIG_GPIO_SL28CPLD)		+= gpio-sl28cpld.o

obj-$(CONFIG_GPIO_SODAVILLE)		+= gpio-sodaville.o

obj-$(CONFIG_GPIO_SPEAR_SPICS)		+= gpio-spear-spics.o

obj-$(CONFIG_GPIO_WHISKEY_COVE)		+= gpio-wcove.o

obj-$(CONFIG_GPIO_WINBOND)		+= gpio-winbond.o

obj-$(CONFIG_GPIO_WM831X)		+= gpio-wm831x.o

obj-$(CONFIG_GPIO_WM8350)		+= gpio-wm8350.o

obj-$(CONFIG_GPIO_WM8994)		+= gpio-wm8994.o

obj-$(CONFIG_GPIO_WS16C48)		+= gpio-ws16c48.o

obj-$(CONFIG_GPIO_XGENE)		+= gpio-xgene.o

obj-$(CONFIG_GPIO_XGENE_SB)		+= gpio-xgene-sb.o

obj-$(CONFIG_GPIO_XILINX)		+= gpio-xilinx.o

obj-$(CONFIG_GPIO_ZYNQ)			+= gpio-zynq.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Unisys visorbus





obj-$(CONFIG_UNISYS_VISORBUS)	+= visorbus.o

visorbus-y += visorchannel.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CXL_MEM) += cxl_pci.o

obj-$(CONFIG_CXL_PMEM) += cxl_pmem.o

cxl_pci-y := pci.o

cxl_pmem-y := pmem.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CXL_BUS) += cxl_core.o

ccflags-y += -DDEFAULT_SYMBOL_NAMESPACE=CXL -I$(srctree)/drivers/cxl

cxl_core-y := bus.o

cxl_core-y += regs.o

cxl_core-y += mbox.o

# SPDX-License-Identifier: GPL-2.0

 CPUfreq core

obj-$(CONFIG_CPU_FREQ)			+= cpufreq.o freq_table.o

 CPUfreq stats

obj-$(CONFIG_CPU_FREQ_STAT)             += cpufreq_stats.o

# CPUfreq governors 

obj-$(CONFIG_CPU_FREQ_GOV_PERFORMANCE)	+= cpufreq_performance.o

obj-$(CONFIG_CPU_FREQ_GOV_POWERSAVE)	+= cpufreq_powersave.o

obj-$(CONFIG_CPU_FREQ_GOV_USERSPACE)	+= cpufreq_userspace.o

obj-$(CONFIG_CPU_FREQ_GOV_ONDEMAND)	+= cpufreq_ondemand.o

obj-$(CONFIG_CPU_FREQ_GOV_CONSERVATIVE)	+= cpufreq_conservative.o

obj-$(CONFIG_CPU_FREQ_GOV_ATTR_SET)	+= cpufreq_governor_attr_set.o

obj-$(CONFIG_CPUFREQ_DT_PLATDEV)	+= cpufreq-dt-platdev.o

##################################################################################

 x86 drivers.

 Link order matters. K8 is preferred to ACPI because of firmware bugs in early

# K8 systems. This is still the case but acpi-cpufreq errors out so that

 powernow-k8 can load then. ACPI is preferred to all other hardware-specific drivers.

# speedstep-* is preferred over p4-clockmod.

obj-$(CONFIG_SC520_CPUFREQ)		+= sc520_freq.o

obj-$(CONFIG_X86_LONGRUN)		+= longrun.o

obj-$(CONFIG_X86_GX_SUSPMOD)		+= gx-suspmod.o

obj-$(CONFIG_X86_SPEEDSTEP_ICH)		+= speedstep-ich.o

obj-$(CONFIG_X86_SPEEDSTEP_LIB)		+= speedstep-lib.o

obj-$(CONFIG_X86_SPEEDSTEP_SMI)		+= speedstep-smi.o

obj-$(CONFIG_X86_CPUFREQ_NFORCE2)	+= cpufreq-nforce2.o

obj-$(CONFIG_X86_INTEL_PSTATE)		+= intel_pstate.o



 ARM SoC drivers

obj-$(CONFIG_ARM_ARMADA_37XX_CPUFREQ)	+= armada-37xx-cpufreq.o

obj-$(CONFIG_ARM_BRCMSTB_AVS_CPUFREQ)	+= brcmstb-avs-cpufreq.o

obj-$(CONFIG_ARCH_DAVINCI)		+= davinci-cpufreq.o

obj-$(CONFIG_ARM_IMX_CPUFREQ_DT)	+= imx-cpufreq-dt.o

obj-$(CONFIG_ARM_MEDIATEK_CPUFREQ)	+= mediatek-cpufreq.o

obj-$(CONFIG_ARM_PXA2xx_CPUFREQ)	+= pxa2xx-cpufreq.o

obj-$(CONFIG_ARM_QCOM_CPUFREQ_HW)	+= qcom-cpufreq-hw.o

obj-$(CONFIG_ARM_S3C2410_CPUFREQ)	+= s3c2410-cpufreq.o

obj-$(CONFIG_ARM_S3C2416_CPUFREQ)	+= s3c2416-cpufreq.o

obj-$(CONFIG_ARM_S3C64XX_CPUFREQ)	+= s3c64xx-cpufreq.o

obj-$(CONFIG_ARM_S3C24XX_CPUFREQ_DEBUGFS) += s3c24xx-cpufreq-debugfs.o

obj-$(CONFIG_ARM_SA1100_CPUFREQ)	+= sa1100-cpufreq.o

obj-$(CONFIG_ARM_ALLWINNER_SUN50I_CPUFREQ_NVMEM) += sun50i-cpufreq-nvmem.o

obj-$(CONFIG_ARM_TEGRA124_CPUFREQ)	+= tegra124-cpufreq.o

obj-$(CONFIG_ARM_TEGRA194_CPUFREQ)	+= tegra194-cpufreq.o

obj-$(CONFIG_ARM_TI_CPUFREQ)		+= ti-cpufreq.o



##################################################################################

 PowerPC platform drivers

obj-$(CONFIG_CPU_FREQ_CBE)		+= ppc-cbe-cpufreq.o

obj-$(CONFIG_CPU_FREQ_CBE_PMI)		+= ppc_cbe_cpufreq_pmi.o

obj-$(CONFIG_QORIQ_CPUFREQ)   		+= qoriq-cpufreq.o

obj-$(CONFIG_CPU_FREQ_PMAC64)		+= pmac64-cpufreq.o



# Other platform drivers

obj-$(CONFIG_BMIPS_CPUFREQ)		+= bmips-cpufreq.o

obj-$(CONFIG_IA64_ACPI_CPUFREQ)		+= ia64-acpi-cpufreq.o

obj-$(CONFIG_LOONGSON2_CPUFREQ)		+= loongson2_cpufreq.o

obj-$(CONFIG_LOONGSON1_CPUFREQ)		+= loongson1-cpufreq.o

obj-$(CONFIG_SPARC_US2E_CPUFREQ)	+= sparc-us2e-cpufreq.o

obj-$(CONFIG_SPARC_US3_CPUFREQ)		+= sparc-us3-cpufreq.o

 SPDX-License-Identifier: GPL-2.0-only

 drm/tegra depends on host1x, so if both drivers are built-in care must be

 taken to initialize them in the correct order. Link order is the only way

 to ensure this currently.

obj-y			+= drm/ vga/

obj-$(CONFIG_IMX_IPUV3_CORE)	+= ipu-v3/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VGA_ARB)  += vgaarb.o

# SPDX-License-Identifier: GPL-2.0

 Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.

drm-y       :=	drm_aperture.o drm_auth.o drm_cache.o \

		drm_sysfs.o drm_hashtab.o drm_mm.o \

		drm_trace_points.o drm_prime.o \

		drm_modeset_lock.o drm_atomic.o drm_bridge.o \

		drm_framebuffer.o drm_connector.o drm_blend.o \

		drm_plane.o drm_color_mgmt.o drm_print.o \

		drm_dumb_buffers.o drm_mode_config.o drm_vblank.o \



drm-$(CONFIG_DRM_LEGACY) += drm_agpsupport.o drm_bufs.o drm_context.o drm_dma.o \

drm-$(CONFIG_DRM_LIB_RANDOM) += lib/drm_random.o

drm-$(CONFIG_COMPAT) += drm_ioc32.o

drm-$(CONFIG_DRM_GEM_SHMEM_HELPER) += drm_gem_shmem_helper.o

drm-$(CONFIG_OF) += drm_of.o





obj-$(CONFIG_DRM_VRAM_HELPER) += drm_vram_helper.o

drm_ttm_helper-y := drm_gem_ttm_helper.o



		drm_dsc.o drm_probe_helper.o \

		drm_simple_kms_helper.o drm_modeset_helper.o \

		drm_scdc_helper.o drm_gem_atomic_helper.o \



drm_kms_helper-$(CONFIG_DRM_PANEL_BRIDGE) += bridge/panel.o

drm_kms_helper-$(CONFIG_DRM_FBDEV_EMULATION) += drm_fb_helper.o



obj-$(CONFIG_DRM_DEBUG_SELFTEST) += selftests/

obj-$(CONFIG_DRM)	+= drm.o

obj-$(CONFIG_DRM_MIPI_DSI) += drm_mipi_dsi.o

obj-$(CONFIG_DRM_RADEON)+= radeon/

obj-$(CONFIG_DRM_KMB_DISPLAY)  += kmb/

obj-$(CONFIG_DRM_MGAG200) += mgag200/

obj-$(CONFIG_DRM_VC4)  += vc4/

obj-$(CONFIG_DRM_SIS)   += sis/

obj-$(CONFIG_DRM_VMWGFX)+= vmwgfx/

obj-$(CONFIG_DRM_NOUVEAU) +=nouveau/

obj-$(CONFIG_DRM_ROCKCHIP) +=rockchip/

obj-$(CONFIG_DRM_GMA500) += gma500/

obj-$(CONFIG_DRM_UDL) += udl/

obj-$(CONFIG_DRM_AST) += ast/

obj-$(CONFIG_DRM_ARMADA) += armada/

obj-$(CONFIG_DRM_ATMEL_HLCDC)	+= atmel-hlcdc/

obj-y			+= rcar-du/

obj-y			+= tilcdc/

obj-$(CONFIG_DRM_QXL) += qxl/

obj-$(CONFIG_DRM_VIRTIO_GPU) += virtio/

obj-$(CONFIG_DRM_MSM) += msm/

obj-$(CONFIG_DRM_TEGRA) += tegra/

obj-$(CONFIG_DRM_STM) += stm/

obj-$(CONFIG_DRM_STI) += sti/

obj-y			+= bridge/

obj-$(CONFIG_DRM_FSL_DCU) += fsl-dcu/

obj-$(CONFIG_DRM_ETNAVIV) += etnaviv/

obj-y			+= hisilicon/

obj-$(CONFIG_DRM_MXSFB)	+= mxsfb/

obj-$(CONFIG_DRM_LIMA)  += lima/

obj-$(CONFIG_DRM_PANFROST) += panfrost/

obj-$(CONFIG_DRM_ASPEED_GFX) += aspeed/

obj-$(CONFIG_DRM_MCDE) += mcde/

obj-$(CONFIG_DRM_TIDSS) += tidss/

# SPDX-License-Identifier: GPL-2.0

	panfrost_device.o \

	panfrost_devfreq.o \

	panfrost_gem.o \



 SPDX-License-Identifier: GPL-2.0-only

	vkms_output.o \

	vkms_composer.o \

	vkms_writeback.o

obj-$(CONFIG_DRM_VKMS) += vkms.o

# SPDX-License-Identifier: GPL-2.0

	       shmob_drm_crtc.o \

	       shmob_drm_drv.o \

	       shmob_drm_kms.o \

	       shmob_drm_plane.o

# SPDX-License-Identifier: GPL-2.0

#

#	KMS driver for the GMA500

#

	  backlight.o \

	  cdv_device.o \

	  cdv_intel_display.o \

	  cdv_intel_dp.o \

	  cdv_intel_hdmi.o \

	  cdv_intel_lvds.o \

	  gem.o \

	  gma_device.o \

	  gtt.o \

	  intel_bios.o \

	  intel_i2c.o \

	  mid_bios.o \

	  oaktrail_device.o \

	  oaktrail_hdmi.o \

	  oaktrail_lvds.o \

	  power.o \

	  psb_device.o \

	  psb_intel_display.o \

	  psb_intel_lvds.o \

	  psb_lid.o \





 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_DRM_ARCPGU)		+= arcpgu.o

obj-$(CONFIG_DRM_CIRRUS_QEMU)		+= cirrus.o

obj-$(CONFIG_DRM_GM12U320)		+= gm12u320.o

obj-$(CONFIG_DRM_SIMPLEDRM)		+= simpledrm.o

obj-$(CONFIG_TINYDRM_HX8357D)		+= hx8357d.o

obj-$(CONFIG_TINYDRM_ILI9225)		+= ili9225.o

obj-$(CONFIG_TINYDRM_ILI9341)		+= ili9341.o

obj-$(CONFIG_TINYDRM_ILI9486)		+= ili9486.o

obj-$(CONFIG_TINYDRM_MI0283QT)		+= mi0283qt.o

obj-$(CONFIG_TINYDRM_REPAPER)		+= repaper.o

obj-$(CONFIG_TINYDRM_ST7586)		+= st7586.o

obj-$(CONFIG_TINYDRM_ST7735R)		+= st7735r.o



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





gpu-sched-y := sched_main.o sched_fence.o sched_entity.o

obj-$(CONFIG_DRM_SCHED) += gpu-sched.o

obj-$(CONFIG_DRM_INGENIC) += ingenic-drm.o

ingenic-drm-y = ingenic-drm-drv.o

# SPDX-License-Identifier: GPL-2.0

rcar-du-drm-y := rcar_du_crtc.o \

		 rcar_du_encoder.o \

		 rcar_du_kms.o \



rcar-du-drm-$(CONFIG_DRM_RCAR_LVDS)	+= rcar_du_of.o \

					   rcar_du_of_lvds_r8a7790.dtb.o \

					   rcar_du_of_lvds_r8a7791.dtb.o \

					   rcar_du_of_lvds_r8a7793.dtb.o \

					   rcar_du_of_lvds_r8a7795.dtb.o \

					   rcar_du_of_lvds_r8a7796.dtb.o

rcar-du-drm-$(CONFIG_DRM_RCAR_VSP)	+= rcar_du_vsp.o

rcar-du-drm-$(CONFIG_DRM_RCAR_WRITEBACK) += rcar_du_writeback.o



# 'remote-endpoint' is fixed up at run-time

DTC_FLAGS_rcar_du_of_lvds_r8a7791 += -Wno-graph_endpoint

DTC_FLAGS_rcar_du_of_lvds_r8a7795 += -Wno-graph_endpoint

 SPDX-License-Identifier: GPL-2.0-only

meson-drm-y += meson_viu.o meson_vpp.o meson_venc.o meson_vclk.o meson_overlay.o

meson-drm-y += meson_rdma.o meson_osd_afbcd.o

obj-$(CONFIG_DRM_MESON) += meson-drm.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the drm device driver.  This driver provides support for the

 Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.



 Add a set of useful warning flags and enable -Werror for CI to prevent

# trivial mistakes from creeping in. We have to do this piecemeal as we reject

# any patch that isn't warning clean, so turning on -Wall -Wextra (or W=1) we

 need to filter out dubious warnings.  Still it is our interest

 to keep running locally with W=1 C=1 until we are completely clean.



 Note the danger in using -Wall -Wextra is that when CI updates gcc we

 will most likely get a sudden build breakage... Hopefully we will fix

 new warnings before CI updates!

subdir-ccflags-y += -Wno-type-limits

subdir-ccflags-y += -Wno-missing-field-initializers

subdir-ccflags-y += -Wno-sign-compare

subdir-ccflags-y += $(call cc-disable-warning, unused-but-set-variable)

subdir-ccflags-y += $(call cc-disable-warning, frame-address)

subdir-ccflags-$(CONFIG_DRM_I915_WERROR) += -Werror

 Fine grained warnings disable

CFLAGS_display/intel_fbdev.o = $(call cc-disable-warning, override-init)



# Please keep these build lists sorted!

# core driver code

	  i915_config.o \

	  i915_irq.o \

	  i915_module.o \

	  i915_switcheroo.o \

	  i915_sysfs.o \

	  i915_utils.o \

	  intel_memory_region.o \

	  intel_pcode.o \

	  intel_pm.o \

	  intel_region_ttm.o \

	  intel_runtime_pm.o \

	  intel_wakeref.o \

	  vlv_sideband.o \



# core library code

i915-y += \

	dma_resv_utils.o \

	i915_mm.o \



i915-$(CONFIG_COMPAT)   += i915_ioc32.o

	i915_debugfs_params.o \

i915-$(CONFIG_PERF_EVENTS) += i915_pmu.o

# "Graphics Technology" (aka we talk to the gpu)

gt-y += \

	gt/gen6_engine_cs.o \

	gt/gen7_renderclear.o \

	gt/gen8_ppgtt.o \

	gt/intel_breadcrumbs.o \

	gt/intel_context.o \

	gt/intel_engine_heartbeat.o \

	gt/intel_engine_pm.o \

	gt/intel_engine_user.o \

	gt/intel_ggtt.o \

	gt/intel_gt.o \

	gt/intel_gt_clock_utils.o \

	gt/intel_gt_engines_debugfs.o \

	gt/intel_mocs.o \

	gt/intel_ppgtt.o \

	gt/intel_rc6.o \

	gt/intel_region_lmem.o \

	gt/intel_renderstate.o \

	gt/intel_reset.o \

	gt/intel_sseu.o \

	gt/intel_timeline.o \

	gt/intel_workarounds.o \

	gt/shmem_utils.o \

	gt/sysfs_engines.o

# autogenerated null render state

gt-y += \

	gt/gen7_renderstate.o \

	gt/gen9_renderstate.o

i915-y += $(gt-y)

# GEM (Graphics Execution Management) code

	gem/i915_gem_busy.o \

	gem/i915_gem_clflush.o \

	gem/i915_gem_context.o \

	gem/i915_gem_dmabuf.o \

	gem/i915_gem_execbuffer.o \

	gem/i915_gem_object.o \

	gem/i915_gem_mman.o \

	gem/i915_gem_pages.o \

	gem/i915_gem_pm.o \

	gem/i915_gem_shrinker.o \

	gem/i915_gem_throttle.o \

	gem/i915_gem_ttm_pm.o \

	gem/i915_gem_userptr.o \

	  i915_active.o \

	  i915_buddy.o \

	  i915_gem_ww.o \

	  i915_gem.o \

	  i915_query.o \

	  i915_request.o \

	  i915_scheduler.o \

	  intel_wopcm.o

 general-purpose microcontroller (GuC) support

i915-y += gt/uc/intel_uc.o \

	  gt/uc/intel_uc_debugfs.o \

	  gt/uc/intel_guc.o \

	  gt/uc/intel_guc_debugfs.o \

	  gt/uc/intel_guc_fw.o \

	  gt/uc/intel_guc_log_debugfs.o \

	  gt/uc/intel_guc_rc.o \

	  gt/uc/intel_guc_slpc.o \

	  gt/uc/intel_guc_submission.o \

	  gt/uc/intel_huc_debugfs.o \

	  gt/uc/intel_huc_fw.o

 modesetting core code

	display/intel_audio.o \

	display/intel_bios.o \

	display/intel_bw.o \

	display/intel_color.o \

	display/intel_connector.o \

	display/intel_crtc.o \

	display/intel_cursor.o \

	display/intel_display_power.o \

	display/intel_dpt.o \

	display/intel_drrs.o \

	display/intel_fbc.o \

	display/intel_fifo_underrun.o \

	display/intel_hotplug.o \

	display/intel_overlay.o \

	display/intel_psr.o \

	display/intel_quirks.o \

	display/intel_sprite.o \

	display/intel_tc.o \

	display/skl_universal_plane.o

	display/intel_fbdev.o

 modesetting output/encoder code

	display/icl_dsi.o \

	display/intel_crt.o \

	display/intel_ddi_buf_trans.o \

	display/intel_dp.o \

	display/intel_dp_aux.o \

	display/intel_dp_aux_backlight.o \

	display/intel_dsi.o \

	display/intel_dsi_vbt.o \

	display/intel_gmbus.o \

	display/intel_hdmi.o \

	display/intel_lspcon.o \

	display/intel_lvds.o \

	display/intel_pps.o \

	display/intel_vrr.o \

	display/vlv_dsi_pll.o



 Protected execution platform (PXP) support

i915-$(CONFIG_DRM_I915_PXP) += \

	pxp/intel_pxp_cmd.o \

	pxp/intel_pxp_irq.o \

	pxp/intel_pxp_pm.o \

	pxp/intel_pxp_tee.o

# Post-mortem debug and GPU hang state capture

i915-$(CONFIG_DRM_I915_CAPTURE_ERROR) += i915_gpu_error.o

i915-$(CONFIG_DRM_I915_SELFTEST) += \

	gem/selftests/igt_gem_utils.o \

	selftests/i915_random.o \

	selftests/igt_live_test.o \

	selftests/igt_mmap.o \

	selftests/igt_spinner.o \



 virtual gpu code



ifeq ($(CONFIG_DRM_I915_GVT),y)

i915-y += intel_gvt.o

include $(src)/gvt/Makefile

endif

obj-$(CONFIG_DRM_I915) += i915.o

obj-$(CONFIG_DRM_I915_GVT_KVMGT) += gvt/kvmgt.o

 header test



 exclude some broken headers from the test coverage



always-$(CONFIG_DRM_I915_WERROR) += \





# SPDX-License-Identifier: GPL-2.0

	execlist.o scheduler.o sched_policy.o mmio_context.o cmd_parser.o debugfs.o \

	fb_decoder.o dmabuf.o page_track.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.





# SPDX-License-Identifier: GPL-2.0



sun4i-drm-y			+= sun4i_framebuffer.o

sun4i-drm-hdmi-y		+= sun4i_hdmi_tmds_clk.o

sun8i-drm-hdmi-y		+= sun8i_dw_hdmi.o

sun8i-drm-hdmi-y		+= sun8i_hdmi_phy.o

sun8i-drm-hdmi-y		+= sun8i_hdmi_phy_clk.o

				   sun8i_vi_scaler.o sun8i_csc.o

sun4i-tcon-y			+= sun4i_crtc.o

sun4i-tcon-y			+= sun4i_lvds.o



obj-$(CONFIG_DRM_SUN4I)		+= sun4i-drm.o

obj-$(CONFIG_DRM_SUN4I)		+= sun4i_tv.o

obj-$(CONFIG_DRM_SUN4I)		+= sun6i_drc.o

obj-$(CONFIG_DRM_SUN4I_BACKEND)	+= sun4i-backend.o

obj-$(CONFIG_DRM_SUN4I)		+= sun4i-frontend.o

endif

obj-$(CONFIG_DRM_SUN8I_MIXER)	+= sun8i-mixer.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_DRM_PANEL_ARM_VERSATILE) += panel-arm-versatile.o

obj-$(CONFIG_DRM_PANEL_ASUS_Z00T_TM5P5_NT35596) += panel-asus-z00t-tm5p5-n35596.o

obj-$(CONFIG_DRM_PANEL_BOE_TV101WUM_NL6) += panel-boe-tv101wum-nl6.o

obj-$(CONFIG_DRM_PANEL_LVDS) += panel-lvds.o

obj-$(CONFIG_DRM_PANEL_EDP) += panel-edp.o

obj-$(CONFIG_DRM_PANEL_FEIXIN_K101_IM2BA02) += panel-feixin-k101-im2ba02.o

obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9341) += panel-ilitek-ili9341.o

obj-$(CONFIG_DRM_PANEL_INNOLUX_EJ030NA) += panel-innolux-ej030na.o

obj-$(CONFIG_DRM_PANEL_JDI_LT070ME05000) += panel-jdi-lt070me05000.o

obj-$(CONFIG_DRM_PANEL_KINGDISPLAY_KD097D04) += panel-kingdisplay-kd097d04.o

obj-$(CONFIG_DRM_PANEL_LEADTEK_LTK500HD1829) += panel-leadtek-ltk500hd1829.o

obj-$(CONFIG_DRM_PANEL_LG_LG4573) += panel-lg-lg4573.o

obj-$(CONFIG_DRM_PANEL_NOVATEK_NT35510) += panel-novatek-nt35510.o

obj-$(CONFIG_DRM_PANEL_NOVATEK_NT39016) += panel-novatek-nt39016.o

obj-$(CONFIG_DRM_PANEL_OLIMEX_LCD_OLINUXINO) += panel-olimex-lcd-olinuxino.o

obj-$(CONFIG_DRM_PANEL_OSD_OSD101T2587_53TS) += panel-osd-osd101t2587-53ts.o

obj-$(CONFIG_DRM_PANEL_RASPBERRYPI_TOUCHSCREEN) += panel-raspberrypi-touchscreen.o

obj-$(CONFIG_DRM_PANEL_RAYDIUM_RM68200) += panel-raydium-rm68200.o

obj-$(CONFIG_DRM_PANEL_SAMSUNG_ATNA33XC20) += panel-samsung-atna33xc20.o

obj-$(CONFIG_DRM_PANEL_SAMSUNG_LD9040) += panel-samsung-ld9040.o

obj-$(CONFIG_DRM_PANEL_SAMSUNG_S6D27A1) += panel-samsung-s6d27a1.o

obj-$(CONFIG_DRM_PANEL_SAMSUNG_S6E63J0X03) += panel-samsung-s6e63j0x03.o

obj-$(CONFIG_DRM_PANEL_SAMSUNG_S6E63M0_SPI) += panel-samsung-s6e63m0-spi.o

obj-$(CONFIG_DRM_PANEL_SAMSUNG_S6E88A0_AMS452EF01) += panel-samsung-s6e88a0-ams452ef01.o

obj-$(CONFIG_DRM_PANEL_SAMSUNG_SOFEF00) += panel-samsung-sofef00.o

obj-$(CONFIG_DRM_PANEL_SHARP_LQ101R1SX01) += panel-sharp-lq101r1sx01.o

obj-$(CONFIG_DRM_PANEL_SHARP_LS043T1LE01) += panel-sharp-ls043t1le01.o

obj-$(CONFIG_DRM_PANEL_SITRONIX_ST7701) += panel-sitronix-st7701.o

obj-$(CONFIG_DRM_PANEL_SITRONIX_ST7789V) += panel-sitronix-st7789v.o

obj-$(CONFIG_DRM_PANEL_SONY_ACX565AKM) += panel-sony-acx565akm.o

obj-$(CONFIG_DRM_PANEL_TPO_TD028TTEC1) += panel-tpo-td028ttec1.o

obj-$(CONFIG_DRM_PANEL_TPO_TPG110) += panel-tpo-tpg110.o

obj-$(CONFIG_DRM_PANEL_VISIONOX_RM69299) += panel-visionox-rm69299.o

obj-$(CONFIG_DRM_PANEL_XINPENG_XPP055C272) += panel-xinpeng-xpp055c272.o

 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI)

#

	omap_crtc.o \

	omap_plane.o \

	omap_encoder.o \

	omap_gem_dmabuf.o \

	omap_dmm_tiler.o \

	tcm-sita.o



omapdrm-$(CONFIG_OMAP2_DSS_DPI) += dss/dpi.o

omapdrm-$(CONFIG_OMAP2_DSS_SDI) += dss/sdi.o

omapdrm-$(CONFIG_OMAP2_DSS_HDMI_COMMON) += dss/hdmi_common.o dss/hdmi_wp.o \

		dss/hdmi_pll.o dss/hdmi_phy.o

omapdrm-$(CONFIG_OMAP5_DSS_HDMI) += dss/hdmi5.o dss/hdmi5_core.o



obj-$(CONFIG_DRM_OMAP) += omapdrm.o

obj-$(CONFIG_DRM_KMB_DISPLAY)	+= kmb-drm.o

zynqmp-dpsub-y := zynqmp_disp.o zynqmp_dpsub.o zynqmp_dp.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for hisilicon drm drivers.

 Please keep this list sorted alphabetically



obj-$(CONFIG_DRM_HISI_KIRIN) += kirin/

 SPDX-License-Identifier: GPL-2.0-only

kirin-drm-y := kirin_drm_drv.o \

	       kirin_drm_ade.o

obj-$(CONFIG_DRM_HISI_KIRIN) += kirin-drm.o dw_drm_dsi.o

 SPDX-License-Identifier: GPL-2.0-only

hibmc-drm-y := hibmc_drm_drv.o hibmc_drm_de.o hibmc_drm_vdac.o hibmc_drm_i2c.o

# SPDX-License-Identifier: GPL-2.0

		 fsl_dcu_drm_kms.o \

		 fsl_dcu_drm_plane.o \

		 fsl_dcu_drm_crtc.o \

		 fsl_tcon.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the drm device driver.  This driver provides support for the

ttm-$(CONFIG_AGP) += ttm_agp_backend.o

obj-$(CONFIG_DRM_TTM) += ttm.o

# SPDX-License-Identifier: GPL-2.0

	tidss_drv.o \

	tidss_kms.o \

	tidss_plane.o \

	tidss_dispc.o

obj-$(CONFIG_DRM_TIDSS) += tidss.o

# SPDX-License-Identifier: GPL-2.0

gud-y				:= gud_drv.o gud_pipe.o gud_connector.o

obj-$(CONFIG_DRM_GUD)		+= gud.o

# SPDX-License-Identifier: GPL-2.0

	etnaviv_drv.o \

	etnaviv_dump.o \

	etnaviv_gem.o \

	etnaviv_iommu.o \

	etnaviv_perfmon.o \



# SPDX-License-Identifier: GPL-2.0

		atmel_hlcdc_dc.o \



obj-$(CONFIG_DRM_ATMEL_HLCDC)	+= atmel-hlcdc-dc.o

 SPDX-License-Identifier: GPL-2.0-only

mxsfb-y := mxsfb_drv.o mxsfb_kms.o

 SPDX-License-Identifier: GPL-2.0 OR MIT



drm_xen_front-objs := xen_drm_front.o \

		      xen_drm_front_kms.o \



obj-$(CONFIG_DRM_XEN_FRONTEND) += drm_xen_front.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the drm device driver.  This driver provides support for the

 Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.



rockchipdrm-y := rockchip_drm_drv.o rockchip_drm_fb.o \



rockchipdrm-$(CONFIG_ROCKCHIP_DW_HDMI) += dw_hdmi-rockchip.o

rockchipdrm-$(CONFIG_ROCKCHIP_LVDS) += rockchip_lvds.o



obj-$(CONFIG_DRM_ROCKCHIP) += rockchipdrm.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_DRM_I2C_CH7006) += ch7006.o

sil164-y := sil164_drv.o



obj-$(CONFIG_DRM_I2C_NXP_TDA998X) += tda998x.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the drm device driver.  This driver provides support for the

 Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.



hostprogs := mkregtable

targets := rn50_reg_safe.h r100_reg_safe.h r200_reg_safe.h rv515_reg_safe.h r300_reg_safe.h r420_reg_safe.h rs600_reg_safe.h r600_reg_safe.h evergreen_reg_safe.h cayman_reg_safe.h

      cmd_mkregtable = $(obj)/mkregtable $< > $@

$(obj)/%_reg_safe.h: $(src)/reg_srcs/% $(obj)/mkregtable FORCE





$(obj)/r200.o: $(obj)/r200_reg_safe.h



$(obj)/r300.o: $(obj)/r300_reg_safe.h



$(obj)/rs600.o: $(obj)/rs600_reg_safe.h

$(obj)/r600_cs.o: $(obj)/r600_reg_safe.h





 add KMS driver

radeon-y += radeon_device.o radeon_asic.o radeon_kms.o \

	radeon_legacy_crtc.o radeon_legacy_encoders.o radeon_connectors.o \

	radeon_clocks.o radeon_fb.o radeon_gem.o radeon_ring.o radeon_irq_kms.o \

	rs400.o rs600.o rs690.o rv515.o r520.o r600.o rv770.o radeon_test.o \

	radeon_pm.o atombios_dp.o r600_hdmi.o dce3_1_afmt.o \

	evergreen_hdmi.o radeon_trace_points.o ni.o cayman_blit_shaders.o \

	atombios_encoders.o radeon_semaphore.o radeon_sa.o atombios_i2c.o si.o \

	rv770_smc.o cypress_dpm.o btc_dpm.o sumo_dpm.o sumo_smc.o trinity_dpm.o \

	ci_dpm.o dce6_afmt.o radeon_vm.o radeon_ucode.o radeon_ib.o \

	radeon_sync.o radeon_audio.o radeon_dp_auxch.o radeon_dp_mst.o

radeon-$(CONFIG_MMU_NOTIFIER) += radeon_mn.o

 add async DMA block

	rv770_dma.o \



# add UVD block

radeon-y += \

	radeon_uvd.o \

	uvd_v1_0.o \

	uvd_v2_2.o \

	uvd_v3_1.o \

	uvd_v4_2.o

 add VCE block



radeon-$(CONFIG_ACPI) += radeon_acpi.o

# SPDX-License-Identifier: GPL-2.0

armada-y	:= armada_crtc.o armada_drv.o armada_fb.o armada_fbdev.o \

armada-y	+= armada_510.o

armada-$(CONFIG_DEBUG_FS) += armada_debugfs.o

obj-$(CONFIG_DRM_ARMADA) := armada.o

# SPDX-License-Identifier: GPL-2.0

		vbox_drv.o vbox_hgsmi.o vbox_irq.o vbox_main.o \



 SPDX-License-Identifier: GPL-2.0-only

stm-drm-y := \





# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the drm device driver.  This driver provides support for the

 Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.



exynosdrm-y := exynos_drm_drv.o exynos_drm_crtc.o exynos_drm_fb.o \



exynosdrm-$(CONFIG_DRM_FBDEV_EMULATION) += exynos_drm_fbdev.o

exynosdrm-$(CONFIG_DRM_EXYNOS5433_DECON)	+= exynos5433_drm_decon.o

exynosdrm-$(CONFIG_DRM_EXYNOS_DPI)	+= exynos_drm_dpi.o

exynosdrm-$(CONFIG_DRM_EXYNOS_DP)	+= exynos_dp.o

exynosdrm-$(CONFIG_DRM_EXYNOS_HDMI)	+= exynos_hdmi.o

exynosdrm-$(CONFIG_DRM_EXYNOS_G2D)	+= exynos_drm_g2d.o

exynosdrm-$(CONFIG_DRM_EXYNOS_FIMC)	+= exynos_drm_fimc.o

exynosdrm-$(CONFIG_DRM_EXYNOS_SCALER)	+= exynos_drm_scaler.o

exynosdrm-$(CONFIG_DRM_EXYNOS_MIC)     += exynos_drm_mic.o

obj-$(CONFIG_DRM_EXYNOS)		+= exynosdrm.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.

ast-y := ast_drv.o ast_main.o ast_mm.o ast_mode.o ast_post.o ast_dp501.o

obj-$(CONFIG_DRM_AST) := ast.o

# SPDX-License-Identifier: GPL-2.0

ccflags-y := -I $(srctree)/$(src)

ccflags-y += -I $(srctree)/$(src)/disp/dpu1

ccflags-$(CONFIG_DRM_MSM_DSI) += -I $(srctree)/$(src)/dsi

ccflags-$(CONFIG_DRM_MSM_DP) += -I $(srctree)/$(src)/dp

msm-y := \

	adreno/adreno_device.o \

	adreno/a2xx_gpu.o \

	adreno/a4xx_gpu.o \

	adreno/a5xx_power.o \

	adreno/a6xx_gpu.o \

	adreno/a6xx_hfi.o \

	hdmi/hdmi_audio.o \

	hdmi/hdmi_bridge.o \

	hdmi/hdmi_i2c.o \

	edp/edp.o \

	edp/edp_connector.o \

	edp/edp_ctrl.o \

	disp/mdp_format.o \

	disp/mdp_kms.o \

	disp/mdp4/mdp4_lcdc_encoder.o \

	disp/mdp5/mdp5_crtc.o \

	disp/mdp5/mdp5_encoder.o \

	disp/mdp5/mdp5_irq.o \

	disp/mdp5/mdp5_pipe.o \

	disp/mdp5/mdp5_mixer.o \

	disp/mdp5/mdp5_plane.o \

	disp/mdp5/mdp5_smp.o \

	disp/dpu1/dpu_encoder.o \

	disp/dpu1/dpu_encoder_phys_cmd.o \

	disp/dpu1/dpu_encoder_phys_vid.o \

	disp/dpu1/dpu_hw_interrupts.o \

	disp/dpu1/dpu_hw_lm.o \

	disp/dpu1/dpu_hw_sspp.o \

	disp/dpu1/dpu_hw_util.o \

	disp/dpu1/dpu_io_util.o \

	disp/dpu1/dpu_plane.o \

	disp/dpu1/dpu_rm.o \

	disp/dpu1/dpu_vbif.o \

	disp/msm_disp_snapshot.o \

	msm_debugfs.o \

	msm_fence.o \

	msm_gem_prime.o \

	msm_gem_shrinker.o \

	msm_gem_submit.o \

	msm_gpu.o \

	msm_iommu.o \

	msm_perf.o \

	msm_rd.o \

	msm_ringbuffer.o \

	msm_gpu_tracepoints.o \

	msm_gpummu.o

	dp/dp_debug.o

msm-$(CONFIG_DRM_MSM_GPU_STATE)	+= adreno/a6xx_gpu_state.o

msm-$(CONFIG_DRM_MSM_DP)+= dp/dp_aux.o \

	dp/dp_display.o \

	dp/dp_hpd.o \

	dp/dp_link.o \

	dp/dp_power.o \



msm-$(CONFIG_COMMON_CLK) += hdmi/hdmi_pll_8960.o



msm-$(CONFIG_DRM_MSM_HDMI_HDCP) += hdmi/hdmi_hdcp.o

msm-$(CONFIG_DRM_MSM_DSI) += dsi/dsi.o \

			disp/mdp4/mdp4_dsi_encoder.o \

			dsi/dsi_manager.o \



msm-$(CONFIG_DRM_MSM_DSI_20NM_PHY) += dsi/phy/dsi_phy_20nm.o

msm-$(CONFIG_DRM_MSM_DSI_14NM_PHY) += dsi/phy/dsi_phy_14nm.o

msm-$(CONFIG_DRM_MSM_DSI_7NM_PHY) += dsi/phy/dsi_phy_7nm.o

obj-$(CONFIG_DRM_MSM)	+= msm.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.

tdfx-y := tdfx_drv.o

obj-$(CONFIG_DRM_TDFX)	+= tdfx.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.

savage-y := savage_drv.o savage_bci.o savage_state.o



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the drm device driver.  This driver provides support for the

 Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.





# SPDX-License-Identifier: GPL-2.0



tilcdc-y := \

	tilcdc_plane.o \

	tilcdc_external.o \

	tilcdc_drv.o

obj-$(CONFIG_DRM_TILCDC)	+= tilcdc.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.



obj-$(CONFIG_DRM_QXL)+= qxl.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.



r128-$(CONFIG_COMPAT)   += r128_ioc32.o

obj-$(CONFIG_DRM_R128)	+= r128.o

# SPDX-License-Identifier: GPL-2.0

mediatek-drm-y := mtk_disp_aal.o \

		  mtk_disp_color.o \

		  mtk_disp_ovl.o \

		  mtk_disp_rdma.o \

		  mtk_drm_ddp_comp.o \

		  mtk_drm_drv.o \

		  mtk_drm_gem.o \

		  mtk_drm_plane.o \

		  mtk_dsi.o \

		  mtk_dpi.o

obj-$(CONFIG_DRM_MEDIATEK) += mediatek-drm.o



# SPDX-License-Identifier: GPL-2.0

	sti_mixer.o \

	sti_vid.o \

	sti_cursor.o \

	sti_compositor.o \

	sti_crtc.o \

	sti_plane.o \

	sti_hdmi.o \

	sti_hdmi_tx3g4c28phy.o \

	sti_awg_utils.o \

	sti_hda.o \

	sti_hqvdp.o \



obj-$(CONFIG_DRM_STI) = sti-drm.o

 SPDX-License-Identifier: GPL-2.0-only

tve200_drm-y +=	tve200_display.o \



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.





 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





subdir-ccflags-y += \

		-I$(FULL_AMD_PATH)/pm/inc/  \



AMD_PM_PATH = ../pm





include $(AMD_PM)



AMD_PM_POWER = $(addprefix $(AMD_PM_PATH)/,$(PM_MGR))

AMD_POWERPLAY_FILES += $(AMD_PM_POWER)



 Copyright 2020 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





AMD_PP_PATH = ../pm/powerplay

PP_LIBS = smumgr hwmgr





POWER_MGR-y = amd_powerplay.o

POWER_MGR-$(CONFIG_DRM_AMDGPU_CIK)+= kv_dpm.o kv_smc.o







 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the 'smu manager' sub-component of powerplay.

# It provides the smu management services for the driver.

	  polaris10_smumgr.o iceland_smumgr.o \

	  smu7_smumgr.o vega10_smumgr.o smu10_smumgr.o ci_smumgr.o \

	  vega12_smumgr.o vegam_smumgr.o smu9_smumgr.o vega20_smumgr.o

AMD_PP_SMUMGR = $(addprefix $(AMD_PP_PATH)/smumgr/,$(SMU_MGR))



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the 'hw manager' sub-component of powerplay.

# It provides the hardware management services for the driver.

HARDWARE_MGR = hwmgr.o processpptables.o \

		pppcielanes.o\

		process_pptables_v1_0.o ppatomctrl.o ppatomfwctrl.o \

		vega10_processpptables.o vega10_hwmgr.o vega10_powertune.o \

		vega12_thermal.o \

		vega20_processpptables.o vega20_hwmgr.o vega20_powertune.o \

		vega20_thermal.o common_baco.o vega10_baco.o  vega20_baco.o \

		vega12_baco.o smu9_baco.o tonga_baco.o polaris_baco.o fiji_baco.o \

		ci_baco.o smu7_baco.o





 Copyright 2020 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.













	    smu_cmn.o \

AMD_SWSMU_POWER = $(addprefix $(AMD_SWSMU_PATH)/,$(SWSMU_MGR))



 Copyright 2020 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the 'smu manager' sub-component of powerplay.

# It provides the smu management services for the driver.



AMD_SWSMU_SMU13MGR = $(addprefix $(AMD_SWSMU_PATH)/smu13/,$(SMU13_MGR))

AMD_POWERPLAY_FILES += $(AMD_SWSMU_SMU13MGR)



 Copyright 2020 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the 'smu manager' sub-component of powerplay.

# It provides the smu management services for the driver.

SMU12_MGR = renoir_ppt.o \



AMD_SWSMU_SMU12MGR = $(addprefix $(AMD_SWSMU_PATH)/smu12/,$(SMU12_MGR))

AMD_POWERPLAY_FILES += $(AMD_SWSMU_SMU12MGR)



 Copyright 2020 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the 'smu manager' sub-component of powerplay.

# It provides the smu management services for the driver.

SMU11_MGR = arcturus_ppt.o \

	    navi10_ppt.o \

	    sienna_cichlid_ppt.o \

	    smu_v11_0.o





 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the ACP, which is a sub-component

 of AMDSOC/AMDGPU drm driver.

 It provides the HW control for ACP related functionalities.



AMD_ACP_FILES := $(AMDACPPATH)/acp_hw.o



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the DAL (Display Abstract Layer), which is a  sub-component

# of the AMDGPU drm driver.

# It provides the HW control for display related functionalities.



subdir-ccflags-y += -I$(FULL_AMD_DISPLAY_PATH)/dc/inc/hw

subdir-ccflags-y += -I$(FULL_AMD_DISPLAY_PATH)/dc/clk_mgr

subdir-ccflags-y += -I$(FULL_AMD_DISPLAY_PATH)/modules/color

subdir-ccflags-y += -I$(FULL_AMD_DISPLAY_PATH)/modules/power

subdir-ccflags-y += -I$(FULL_AMD_DISPLAY_PATH)/dmub/inc

ifdef CONFIG_DRM_AMD_DC_HDCP

subdir-ccflags-y += -I$(FULL_AMD_DISPLAY_PATH)/modules/hdcp

endif

#TODO: remove when Timing Sync feature is complete

subdir-ccflags-y += -DBUILD_FEATURE_TIMING_SYNC=0



DAL_LIBS += modules/hdcp

endif

AMD_DAL = $(addsuffix /Makefile, $(addprefix $(FULL_AMD_DISPLAY_PATH)/,$(DAL_LIBS)))

include $(AMD_DAL)



 Copyright 2019 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





DMUB += dmub_dcn30.o dmub_dcn301.o dmub_dcn302.o dmub_dcn303.o



AMD_DAL_DMUB = $(addprefix $(AMDDALPATH)/dmub/src/,$(DMUB))

AMD_DISPLAY_FILES += $(AMD_DAL_DMUB)



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the 'dm' sub-component of DAL.

# It provides the control and status of dm blocks.



AMDGPUDM = amdgpu_dm.o amdgpu_dm_irq.o amdgpu_dm_mst_types.o amdgpu_dm_color.o

AMDGPUDM += dc_fpu.o

endif



AMDGPUDM += amdgpu_dm_hdcp.o

endif



subdir-ccflags-y += -I$(FULL_AMD_DISPLAY_PATH)/dc



AMD_DISPLAY_FILES += $(AMDGPU_DM)



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for Display Core (dc) component.







ifdef CONFIG_DRM_AMD_DC_DCN

DC_LIBS += dsc

DC_LIBS += dcn21

DC_LIBS += dcn201

DC_LIBS += dcn31

endif



DC_LIBS += dce112

DC_LIBS += dce110

DC_LIBS += dce100



DC_LIBS += dce60

endif

ifdef CONFIG_DRM_AMD_DC_HDCP

DC_LIBS += hdcp

endif



include $(AMD_DC)

DISPLAY_CORE = dc.o  dc_stat.o dc_link.o dc_resource.o dc_hw_sequencer.o dc_sink.o \

dc_surface.o dc_link_hwss.o dc_link_dp.o dc_link_ddc.o dc_debug.o dc_stream.o \

dc_link_enc_cfg.o dc_link_dpia.o dc_link_dpcd.o

DISPLAY_CORE += dc_vm_helper.o

endif

AMD_DISPLAY_CORE = $(addprefix $(AMDDALPATH)/dc/core/,$(DISPLAY_CORE))

AMD_DM_REG_UPDATE = $(addprefix $(AMDDALPATH)/dc/,dc_helper.o)

AMD_DISPLAY_FILES += $(AMD_DISPLAY_CORE)

AMD_DISPLAY_FILES += $(AMD_DM_REG_UPDATE)

DC_DMUB += dc_dmub_srv.o

DC_EDID += dc_edid_parser.o

AMD_DISPLAY_EDID = $(addprefix $(AMDDALPATH)/dc/,$(DC_EDID))



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the 'controller' sub-component of DAL.

# It provides the control and status of HW CRTC block.

CFLAGS_$(AMDDALPATH)/dc/dce112/dce112_resource.o = $(call cc-disable-warning, override-init)

DCE112 = dce112_compressor.o dce112_hw_sequencer.o \

dce112_resource.o

AMD_DAL_DCE112 = $(addprefix $(AMDDALPATH)/dc/dce112/,$(DCE112))

AMD_DISPLAY_FILES += $(AMD_DAL_DCE112)



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the 'gpio' sub-component of DAL.

 It provides the control and status of HW GPIO pins.



       hw_gpio.o hw_hpd.o hw_ddc.o hw_generic.o hw_translate.o

AMD_DAL_GPIO = $(addprefix $(AMDDALPATH)/dc/gpio/,$(GPIO))

AMD_DISPLAY_FILES += $(AMD_DAL_GPIO)



# DCE 6x

###############################################################################

 all DCE6.x are derived from DCE6.0

ifdef CONFIG_DRM_AMD_DC_SI







###############################################################################

 DCE 8x



# all DCE8.x are derived from DCE8.0







###############################################################################

# DCE 11x

###############################################################################

GPIO_DCE110 = hw_translate_dce110.o hw_factory_dce110.o



AMD_DISPLAY_FILES += $(AMD_DAL_GPIO_DCE110)



 DCE 12x





AMD_DAL_GPIO_DCE120 = $(addprefix $(AMDDALPATH)/dc/gpio/dce120/,$(GPIO_DCE120))



###############################################################################

 DCN 1x



GPIO_DCN10 = hw_translate_dcn10.o hw_factory_dcn10.o

AMD_DAL_GPIO_DCN10 = $(addprefix $(AMDDALPATH)/dc/gpio/dcn10/,$(GPIO_DCN10))

AMD_DISPLAY_FILES += $(AMD_DAL_GPIO_DCN10)



 DCN 2



GPIO_DCN20 = hw_translate_dcn20.o hw_factory_dcn20.o

AMD_DAL_GPIO_DCN20 = $(addprefix $(AMDDALPATH)/dc/gpio/dcn20/,$(GPIO_DCN20))

AMD_DISPLAY_FILES += $(AMD_DAL_GPIO_DCN20)



# DCN 21

###############################################################################







###############################################################################

# DCN 3

###############################################################################







 Diagnostics on FPGA



GPIO_DIAG_FPGA = hw_translate_diag.o hw_factory_diag.o

AMD_DAL_GPIO_DIAG_FPGA = $(addprefix $(AMDDALPATH)/dc/gpio/diagnostics/,$(GPIO_DIAG_FPGA))

AMD_DISPLAY_FILES += $(AMD_DAL_GPIO_DIAG_FPGA)



 Copyright 2017 Advanced Micro Devices, Inc.

# Copyright 2019 Raptor Engineering, LLC

#

# Permission is hereby granted, free of charge, to any person obtaining a

 copy of this software and associated documentation files (the "Software"),

 to deal in the Software without restriction, including without limitation

# the rights to use, copy, modify, merge, publish, distribute, sublicense,

# and/or sell copies of the Software, and to permit persons to whom the

 Software is furnished to do so, subject to the following conditions:



# The above copyright notice and this permission notice shall be included in

# all copies or substantial portions of the Software.

#

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

# THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

# OTHER DEALINGS IN THE SOFTWARE.

#

#

 Makefile for the 'calcs' sub-component of DAL.

# It calculates Bandwidth and Watermarks values for HW programming

#

ifdef CONFIG_X86

calcs_ccflags := -mhard-float -msse

endif

ifdef CONFIG_PPC64

calcs_ccflags := -mhard-float -maltivec

endif

ifdef CONFIG_CC_IS_GCC

IS_OLD_GCC = 1

endif

endif

ifdef CONFIG_X86

 Stack alignment mismatch, proceed with caution.

 GCC < 7.1 cannot compile code using `double` and -mpreferred-stack-boundary=3

 (8B stack alignment).

else

calcs_ccflags += -msse2

endif

endif

CFLAGS_REMOVE_$(AMDDALPATH)/dc/calcs/dcn_calcs.o := $(calcs_rcflags)

CFLAGS_REMOVE_$(AMDDALPATH)/dc/calcs/dcn_calc_math.o := $(calcs_rcflags)

BW_CALCS = dce_calcs.o bw_fixed.o custom_float.o



AMD_DAL_BW_CALCS = $(addprefix $(AMDDALPATH)/dc/calcs/,$(BW_CALCS))

AMD_DISPLAY_FILES += $(AMD_DAL_BW_CALCS)



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the 'controller' sub-component of DAL.

# It provides the control and status of HW CRTC block.









 Copyright 2019 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.



 Makefile for the 'hdcp' sub-component of DAL.





HDCP_MSG = hdcp_msg.o

AMD_DAL_HDCP_MSG = $(addprefix $(AMDDALPATH)/dc/hdcp/,$(HDCP_MSG))

AMD_DISPLAY_FILES += $(AMD_DAL_HDCP_MSG)



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the 'controller' sub-component of DAL.

# It provides the control and status of HW CRTC block.

CFLAGS_$(AMDDALPATH)/dc/dce80/dce80_resource.o = $(call cc-disable-warning, override-init)



AMD_DAL_DCE80 = $(addprefix $(AMDDALPATH)/dc/dce80/,$(DCE80))







# Copyright 2020 Mauro Rossi <issor.oruam@gmail.com>

#

# Permission is hereby granted, free of charge, to any person obtaining a

 copy of this software and associated documentation files (the "Software"),

 to deal in the Software without restriction, including without limitation

# the rights to use, copy, modify, merge, publish, distribute, sublicense,

# and/or sell copies of the Software, and to permit persons to whom the

 Software is furnished to do so, subject to the following conditions:



# The above copyright notice and this permission notice shall be included in

# all copies or substantial portions of the Software.

#

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

# THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

# OTHER DEALINGS IN THE SOFTWARE.

#

#

# Makefile for the 'controller' sub-component of DAL.

 It provides the control and status of HW CRTC block.





DCE60 = dce60_timing_generator.o dce60_hw_sequencer.o \

	dce60_resource.o



AMD_DISPLAY_FILES += $(AMD_DAL_DCE60)





 (c) Copyright 2020 Advanced Micro Devices, Inc. All the rights reserved



#  All rights reserved.  This notice is intended as a precaution against

#  inadvertent publication and does not imply publication or any waiver

  of confidentiality.  The year included in the foregoing notice is the

#  year of creation of the work.

#

#  Authors: AMD

#

# Makefile for dcn31.

	dcn31_dccg.o dcn31_optc.o dcn31_dio_link_encoder.o dcn31_panel_cntl.o \





CFLAGS_$(AMDDALPATH)/dc/dcn31/dcn31_resource.o := -mhard-float -maltivec

endif

ifdef CONFIG_CC_IS_GCC

IS_OLD_GCC = 1

endif



ifdef IS_OLD_GCC

# Stack alignment mismatch, proceed with caution.

# GCC < 7.1 cannot compile code using `double` and -mpreferred-stack-boundary=3

# (8B stack alignment).

else



AMD_DAL_DCN31 = $(addprefix $(AMDDALPATH)/dc/dcn31/,$(DCN31))

# SPDX-License-Identifier: MIT

#

# Makefile for DCN.

		dcn20_mpc.o dcn20_opp.o dcn20_hubbub.o dcn20_optc.o dcn20_mmhubbub.o \

		dcn20_vmid.o dcn20_dwb.o dcn20_dwb_scl.o

DCN20 += dcn20_dsc.o

ifdef CONFIG_X86



CFLAGS_$(AMDDALPATH)/dc/dcn20/dcn20_resource.o := -mhard-float -maltivec

endif

ifdef CONFIG_CC_IS_GCC

IS_OLD_GCC = 1

endif

endif

ifdef CONFIG_X86

 Stack alignment mismatch, proceed with caution.

 GCC < 7.1 cannot compile code using `double` and -mpreferred-stack-boundary=3

 (8B stack alignment).

CFLAGS_$(AMDDALPATH)/dc/dcn20/dcn20_resource.o += -mpreferred-stack-boundary=4

CFLAGS_$(AMDDALPATH)/dc/dcn20/dcn20_resource.o += -msse2

endif

endif



AMD_DISPLAY_FILES += $(AMD_DAL_DCN20)



 (c) Copyright 2020 Advanced Micro Devices, Inc. All the rights reserved



#  All rights reserved.  This notice is intended as a precaution against

#  inadvertent publication and does not imply publication or any waiver

  of confidentiality.  The year included in the foregoing notice is the

#  year of creation of the work.

#

#  Authors: AMD

#

 Makefile for dcn302.







CFLAGS_$(AMDDALPATH)/dc/dcn302/dcn302_resource.o := -mhard-float -maltivec

endif

ifdef CONFIG_CC_IS_GCC

IS_OLD_GCC = 1

endif



ifdef IS_OLD_GCC

# Stack alignment mismatch, proceed with caution.

# GCC < 7.1 cannot compile code using `double` and -mpreferred-stack-boundary=3

# (8B stack alignment).

else





AMD_DISPLAY_FILES += $(AMD_DAL_DCN3_02)

# SPDX-License-Identifier: MIT

#

# Makefile for DCN.

DCN201 = dcn201_init.o dcn201_resource.o dcn201_hwseq.o \

	dcn201_hubbub.o\

	dcn201_mpc.o dcn201_hubp.o dcn201_opp.o dcn201_optc.o dcn201_dpp.o \



CFLAGS_$(AMDDALPATH)/dc/dcn201/dcn201_resource.o := -mhard-float -msse

endif

ifdef CONFIG_PPC64



ifeq ($(call cc-ifversion, -lt, 0701, y), y)

CFLAGS_$(AMDDALPATH)/dc/dcn201/dcn201_resource.o += -mhard-float

endif

ifdef CONFIG_X86

 Stack alignment mismatch, proceed with caution.

 GCC < 7.1 cannot compile code using `double` and -mpreferred-stack-boundary=3

 (8B stack alignment).

CFLAGS_$(AMDDALPATH)/dc/dcn201/dcn201_resource.o += -mpreferred-stack-boundary=4

CFLAGS_$(AMDDALPATH)/dc/dcn201/dcn201_resource.o += -msse2

endif

endif



# SPDX-License-Identifier: MIT

#

 Makefile for the 'dsc' sub-component of DAL.

DSC = dc_dsc.o rc_calc.o rc_calc_dpi.o



AMD_DISPLAY_FILES += $(AMD_DAL_DSC)

# SPDX-License-Identifier: MIT

#

# Makefile for DCN21.



CFLAGS_$(AMDDALPATH)/dc/dcn21/dcn21_resource.o := -mhard-float -msse

endif

ifdef CONFIG_PPC64



ifeq ($(call cc-ifversion, -lt, 0701, y), y)



ifdef IS_OLD_GCC

# Stack alignment mismatch, proceed with caution.

# GCC < 7.1 cannot compile code using `double` and -mpreferred-stack-boundary=3

# (8B stack alignment).

else



AMD_DAL_DCN21 = $(addprefix $(AMDDALPATH)/dc/dcn21/,$(DCN21))



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for common 'dce' logic

# HW object file under this folder follow similar pattern for HW programming

#   - register offset and/or shift + mask stored in the dec_hw struct

#   - register programming through common macros that look up register 

#     offset/shift/mask stored in dce_hw struct

dce_mem_input.o dce_clock_source.o dce_scl_filters.o dce_transform.o \

dce_i2c.o dce_i2c_hw.o dce_i2c_sw.o dmub_psr.o dmub_abm.o dce_panel_cntl.o \



AMD_DAL_DCE = $(addprefix $(AMDDALPATH)/dc/dce/,$(DCE))



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the 'controller' sub-component of DAL.

# It provides the control and status of HW CRTC block.

CFLAGS_$(AMDDALPATH)/dc/dce100/dce100_resource.o = $(call cc-disable-warning, override-init)

DCE100 = dce100_resource.o dce100_hw_sequencer.o

AMD_DAL_DCE100 = $(addprefix $(AMDDALPATH)/dc/dce100/,$(DCE100))

AMD_DISPLAY_FILES += $(AMD_DAL_DCE100)



###############################################################################

# DCE 10x

###############################################################################

ifdef 0#CONFIG_DRM_AMD_DC_DCE11_0

TG_DCE100 = dce100_resource.o



AMD_DISPLAY_FILES += $(AMD_DAL_TG_DCE100)

endif



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the 'bios' sub-component of DAL.

 It provides the parsing and executing controls for atom bios image.





BIOS += command_table2.o command_table_helper2.o bios_parser2.o

AMD_DAL_BIOS = $(addprefix $(AMDDALPATH)/dc/bios/,$(BIOS))

AMD_DISPLAY_FILES += $(AMD_DAL_BIOS)



# DCE 6x

###############################################################################

 All DCE6.x are derived from DCE6.0, so 6.0 MUST be defined if ANY of

 DCE6.x is compiled.

ifdef CONFIG_DRM_AMD_DC_SI

AMD_DISPLAY_FILES += $(AMDDALPATH)/dc/bios/dce60/command_table_helper_dce60.o

endif



# DCE 8x

###############################################################################

 All DCE8.x are derived from DCE8.0, so 8.0 MUST be defined if ANY of

 DCE8.x is compiled.



###############################################################################

# DCE 11x

###############################################################################

AMD_DISPLAY_FILES += $(AMDDALPATH)/dc/bios/dce110/command_table_helper_dce110.o



# 

# Copyright 2020 Advanced Micro Devices, Inc.

 

 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

 

# The above copyright notice and this permission notice shall be included in

# all copies or substantial portions of the Software.

 

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.

# 

 Authors: AMD

# 

 



	dcn30_afmt.o dcn30_dio_stream_encoder.o dcn30_dwb.o \

	dcn30_dpp_cm.o dcn30_dwb_cm.o dcn30_cm_common.o dcn30_mmhubbub.o \



ifdef CONFIG_X86

CFLAGS_$(AMDDALPATH)/dc/dcn30/dcn30_resource.o := -msse

CFLAGS_$(AMDDALPATH)/dc/dcn30/dcn30_optc.o := -msse

endif

ifdef CONFIG_PPC64

CFLAGS_$(AMDDALPATH)/dc/dcn30/dcn30_optc.o := -mhard-float -maltivec

endif

ifdef CONFIG_CC_IS_GCC

IS_OLD_GCC = 1

endif

CFLAGS_$(AMDDALPATH)/dc/dcn30/dcn30_optc.o += -mhard-float

endif

ifdef CONFIG_X86

 Stack alignment mismatch, proceed with caution.

 GCC < 7.1 cannot compile code using `double` and -mpreferred-stack-boundary=3

 (8B stack alignment).

CFLAGS_$(AMDDALPATH)/dc/dcn30/dcn30_resource.o += -mpreferred-stack-boundary=4

else

CFLAGS_$(AMDDALPATH)/dc/dcn30/dcn30_optc.o += -msse2

endif

endif



AMD_DISPLAY_FILES += $(AMD_DAL_DCN30)



 (c) Copyright 2020 Advanced Micro Devices, Inc. All the rights reserved



#  All rights reserved.  This notice is intended as a precaution against

#  inadvertent publication and does not imply publication or any waiver

  of confidentiality.  The year included in the foregoing notice is the

#  year of creation of the work.

#

#  Authors: AMD

#

# Makefile for dcn30.

DCN301 = dcn301_init.o dcn301_resource.o dcn301_dccg.o \







 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for DCN.



		dcn10_hw_sequencer_debug.o \

		dcn10_hubp.o dcn10_mpc.o \

		dcn10_dpp_dscl.o dcn10_dpp_cm.o dcn10_cm_common.o \



AMD_DAL_DCN10 = $(addprefix $(AMDDALPATH)/dc/dcn10/,$(DCN10))

# SPDX-License-Identifier: MIT

#

# Copyright (C) 2021 Advanced Micro Devices, Inc. All the rights reserved

#

#  Authors: AMD

#

 Makefile for dcn303.







CFLAGS_$(AMDDALPATH)/dc/dcn303/dcn303_resource.o := -mhard-float -maltivec

endif

ifdef CONFIG_CC_IS_GCC

IS_OLD_GCC = 1

endif



ifdef IS_OLD_GCC

# Stack alignment mismatch, proceed with caution.

# GCC < 7.1 cannot compile code using `double` and -mpreferred-stack-boundary=3

# (8B stack alignment).

else





AMD_DISPLAY_FILES += $(AMD_DAL_DCN3_03)



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the 'utils' sub-component of DAL.

 It provides the general basic services required by other DAL

# subcomponents.







 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the 'controller' sub-component of DAL.

# It provides the control and status of HW CRTC block.

CFLAGS_$(AMDDALPATH)/dc/dce110/dce110_resource.o = $(call cc-disable-warning, override-init)

DCE110 = dce110_timing_generator.o \

dce110_compressor.o dce110_hw_sequencer.o dce110_resource.o \

dce110_opp_regamma_v.o dce110_opp_csc_v.o dce110_timing_generator_v.o \







 Copyright 2017 Advanced Micro Devices, Inc.

# Copyright 2019 Raptor Engineering, LLC

#

# Permission is hereby granted, free of charge, to any person obtaining a

 copy of this software and associated documentation files (the "Software"),

 to deal in the Software without restriction, including without limitation

# the rights to use, copy, modify, merge, publish, distribute, sublicense,

# and/or sell copies of the Software, and to permit persons to whom the

 Software is furnished to do so, subject to the following conditions:



# The above copyright notice and this permission notice shall be included in

# all copies or substantial portions of the Software.

#

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

# THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

# OTHER DEALINGS IN THE SOFTWARE.

#

#

 Makefile for the 'utils' sub-component of DAL.

# It provides the general basic services required by other DAL

 subcomponents.







ifeq ($(call cc-ifversion, -lt, 0701, y), y)



ifdef IS_OLD_GCC

# Stack alignment mismatch, proceed with caution.

# GCC < 7.1 cannot compile code using `double` and -mpreferred-stack-boundary=3

# (8B stack alignment).

dml_ccflags += -mpreferred-stack-boundary=4







ifdef CONFIG_DRM_AMD_DC_DCN

CFLAGS_$(AMDDALPATH)/dc/dml/dcn20/display_rq_dlg_calc_20.o := $(dml_ccflags)

CFLAGS_$(AMDDALPATH)/dc/dml/dcn20/display_mode_vba_20v2.o := $(dml_ccflags)

CFLAGS_$(AMDDALPATH)/dc/dml/dcn21/display_rq_dlg_calc_21.o := $(dml_ccflags)

CFLAGS_$(AMDDALPATH)/dc/dml/dcn30/display_rq_dlg_calc_30.o := $(dml_ccflags)

CFLAGS_$(AMDDALPATH)/dc/dml/dcn31/display_rq_dlg_calc_31.o := $(dml_ccflags)

CFLAGS_$(AMDDALPATH)/dc/dml/dcn301/dcn301_fpu.o := $(dml_ccflags)

CFLAGS_$(AMDDALPATH)/dc/dml/dsc/rc_calc_fpu.o := $(dml_ccflags)

CFLAGS_REMOVE_$(AMDDALPATH)/dc/dml/dcn2x/dcn2x.o := $(dml_rcflags)

CFLAGS_REMOVE_$(AMDDALPATH)/dc/dml/dcn20/display_mode_vba_20v2.o := $(dml_rcflags)

CFLAGS_REMOVE_$(AMDDALPATH)/dc/dml/dcn20/display_rq_dlg_calc_20v2.o := $(dml_rcflags)

CFLAGS_REMOVE_$(AMDDALPATH)/dc/dml/dcn30/display_mode_vba_30.o := $(dml_rcflags)

CFLAGS_REMOVE_$(AMDDALPATH)/dc/dml/dcn30/display_rq_dlg_calc_30.o := $(dml_rcflags)

CFLAGS_REMOVE_$(AMDDALPATH)/dc/dml/dcn301/dcn301_fpu.o := $(dml_rcflags)

CFLAGS_REMOVE_$(AMDDALPATH)/dc/dml/display_mode_lib.o := $(dml_rcflags)

CFLAGS_REMOVE_$(AMDDALPATH)/dc/dml/dsc/rc_calc_fpu.o  := $(dml_rcflags)

endif

CFLAGS_$(AMDDALPATH)/dc/dml/display_rq_dlg_helpers.o := $(dml_ccflags)

CFLAGS_REMOVE_$(AMDDALPATH)/dc/dml/dml1_display_rq_dlg_calc.o := $(dml_rcflags)

CFLAGS_REMOVE_$(AMDDALPATH)/dc/dml/display_rq_dlg_helpers.o := $(dml_rcflags)

DML = display_mode_lib.o display_rq_dlg_helpers.o dml1_display_rq_dlg_calc.o \

DML += dcn20/dcn20_fpu.o

DML += dcn301/dcn301_fpu.o



AMD_DAL_DML = $(addprefix $(AMDDALPATH)/dc/dml/,$(DML))



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the virtual sub-component of DAL.

 It provides the control and status of HW CRTC block.



VIRTUAL = virtual_link_encoder.o virtual_stream_encoder.o



AMD_DISPLAY_FILES += $(AMD_DAL_VIRTUAL)



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the 'audio' sub-component of DAL.

# It provides the control and status of HW adapter resources,

 that are global for the ASIC and sharable between pipes.



IRQ = irq_service.o



AMD_DISPLAY_FILES += $(AMD_DAL_IRQ)



# DCE 6x

###############################################################################



AMD_DAL_IRQ_DCE60 = $(addprefix $(AMDDALPATH)/dc/irq/dce60/,$(IRQ_DCE60))



###############################################################################

 DCE 8x





AMD_DAL_IRQ_DCE80 = $(addprefix $(AMDDALPATH)/dc/irq/dce80/,$(IRQ_DCE80))



###############################################################################

# DCE 11x

###############################################################################





AMD_DISPLAY_FILES += $(AMD_DAL_IRQ_DCE11)



 DCE 12x



IRQ_DCE12 = irq_service_dce120.o

AMD_DAL_IRQ_DCE12 = $(addprefix $(AMDDALPATH)/dc/irq/dce120/,$(IRQ_DCE12))



###############################################################################

 DCN 1x



IRQ_DCN1 = irq_service_dcn10.o





# DCN 20

###############################################################################



AMD_DAL_IRQ_DCN2 = $(addprefix $(AMDDALPATH)/dc/irq/dcn20/,$(IRQ_DCN2))

AMD_DISPLAY_FILES += $(AMD_DAL_IRQ_DCN2)

###############################################################################

 DCN 21







AMD_DISPLAY_FILES += $(AMD_DAL_IRQ_DCN21)



 DCN 201









###############################################################################

 DCN 30



IRQ_DCN3 = irq_service_dcn30.o





# DCN 3_02

###############################################################################





AMD_DISPLAY_FILES += $(AMD_DAL_IRQ_DCN3_02)

###############################################################################

 DCN 3_03



IRQ_DCN3_03 = irq_service_dcn303.o

AMD_DAL_IRQ_DCN3_03 = $(addprefix $(AMDDALPATH)/dc/irq/dcn303/,$(IRQ_DCN3_03))



###############################################################################

 DCN 31







AMD_DISPLAY_FILES += $(AMD_DAL_IRQ_DCN31)

endif



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the 'clk_mgr' sub-component of DAL.

 It provides the control and status of HW CLK_MGR pins.



CLK_MGR = clk_mgr.o



AMD_DISPLAY_FILES += $(AMD_DAL_CLK_MGR)





# DCE 60

###############################################################################

CLK_MGR_DCE60 = dce60_clk_mgr.o



AMD_DISPLAY_FILES += $(AMD_DAL_CLK_MGR_DCE60)

endif



 DCE 100 and DCE8x



CLK_MGR_DCE100 = dce_clk_mgr.o

AMD_DAL_CLK_MGR_DCE100 = $(addprefix $(AMDDALPATH)/dc/clk_mgr/dce100/,$(CLK_MGR_DCE100))

AMD_DISPLAY_FILES += $(AMD_DAL_CLK_MGR_DCE100)



 DCE 100 and DCE8x









 DCE 112









 DCE 120









 DCN10





AMD_DAL_CLK_MGR_DCN10 = $(addprefix $(AMDDALPATH)/dc/clk_mgr/dcn10/,$(CLK_MGR_DCN10))



###############################################################################

# DCN20

###############################################################################

CLK_MGR_DCN20 = dcn20_clk_mgr.o



AMD_DISPLAY_FILES += $(AMD_DAL_CLK_MGR_DCN20)



# DCN201

###############################################################################

CLK_MGR_DCN201 = dcn201_clk_mgr.o

AMD_DAL_CLK_MGR_DCN201 = $(addprefix $(AMDDALPATH)/dc/clk_mgr/dcn201/,$(CLK_MGR_DCN201))

AMD_DISPLAY_FILES += $(AMD_DAL_CLK_MGR_DCN201)



 DCN21





# prevent build errors regarding soft-float vs hard-float FP ABI tags

# this code is currently unused on ppc64, as it applies to Renoir APUs only

CFLAGS_$(AMDDALPATH)/dc/clk_mgr/dcn21/rn_clk_mgr.o := $(call cc-option,-mno-gnu-attribute)

endif



AMD_DISPLAY_FILES += $(AMD_DAL_CLK_MGR_DCN21)

###############################################################################

# DCN30

###############################################################################

CLK_MGR_DCN30 = dcn30_clk_mgr.o dcn30_clk_mgr_smu_msg.o

 prevent build errors regarding soft-float vs hard-float FP ABI tags

# this code is currently unused on ppc64, as it applies to VanGogh APUs only



AMD_DAL_CLK_MGR_DCN30 = $(addprefix $(AMDDALPATH)/dc/clk_mgr/dcn30/,$(CLK_MGR_DCN30))



# DCN301

###############################################################################



# prevent build errors regarding soft-float vs hard-float FP ABI tags

 this code is currently unused on ppc64, as it applies to VanGogh APUs only

ifdef CONFIG_PPC64

CFLAGS_$(AMDDALPATH)/dc/clk_mgr/dcn301/vg_clk_mgr.o := $(call cc-option,-mno-gnu-attribute)

endif

AMD_DAL_CLK_MGR_DCN301 = $(addprefix $(AMDDALPATH)/dc/clk_mgr/dcn301/,$(CLK_MGR_DCN301))

AMD_DISPLAY_FILES += $(AMD_DAL_CLK_MGR_DCN301)



 DCN31





AMD_DAL_CLK_MGR_DCN31 = $(addprefix $(AMDDALPATH)/dc/clk_mgr/dcn31/,$(CLK_MGR_DCN31))



 Copyright 2019 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the 'hdcp' sub-module of DAL.

#

HDCP = hdcp_ddc.o hdcp_log.o hdcp_psp.o hdcp.o \

		hdcp2_execution.o hdcp2_transition.o

$(info ************  DAL-HDCP_MAKEFILE ************)





 Copyright 2018 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the color sub-module of DAL.





MOD_COLOR = color_gamma.o color_table.o

AMD_DAL_MOD_COLOR = $(addprefix $(AMDDALPATH)/modules/color/,$(MOD_COLOR))

#$(info ************  DAL COLOR MODULE MAKEFILE ************)



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





# Makefile for the 'freesync' sub-module of DAL.

#



AMD_DAL_FREESYNC = $(addprefix $(AMDDALPATH)/modules/freesync/,$(FREESYNC))

$(info ************  DAL-FREE SYNC_MAKEFILE ************)





 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the 'info_packet' sub-module of DAL.





INFO_PACKET = info_packet.o

AMD_DAL_INFO_PACKET = $(addprefix $(AMDDALPATH)/modules/info_packet/,$(INFO_PACKET))

#$(info ************  DAL INFO_PACKET MODULE MAKEFILE ************)



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the 'power' sub-module of DAL.





MOD_POWER = power_helpers.o

AMD_DAL_MOD_POWER = $(addprefix $(AMDDALPATH)/modules/power/,$(MOD_POWER))

#$(info ************  DAL POWER MODULE MAKEFILE ************)



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for Heterogenous System Architecture support for AMD GPU devices





AMDKFD_FILES	:= $(AMDKFD_PATH)/kfd_module.o \

		$(AMDKFD_PATH)/kfd_device.o \

		$(AMDKFD_PATH)/kfd_pasid.o \

		$(AMDKFD_PATH)/kfd_doorbell.o \

		$(AMDKFD_PATH)/kfd_process.o \

		$(AMDKFD_PATH)/kfd_mqd_manager.o \

		$(AMDKFD_PATH)/kfd_mqd_manager_v10.o \

		$(AMDKFD_PATH)/kfd_kernel_queue.o \

		$(AMDKFD_PATH)/kfd_packet_manager.o \

		$(AMDKFD_PATH)/kfd_packet_manager_v9.o \

		$(AMDKFD_PATH)/kfd_device_queue_manager_vi.o \

		$(AMDKFD_PATH)/kfd_interrupt.o \

		$(AMDKFD_PATH)/kfd_events.o \



ifneq ($(CONFIG_AMD_IOMMU_V2),)



ifneq ($(CONFIG_DEBUG_FS),)



AMDKFD_FILES += $(AMDKFD_PATH)/kfd_svm.o \



 Copyright 2017 Advanced Micro Devices, Inc.



 Permission is hereby granted, free of charge, to any person obtaining a

# copy of this software and associated documentation files (the "Software"),

# to deal in the Software without restriction, including without limitation

 the rights to use, copy, modify, merge, publish, distribute, sublicense,

 and/or sell copies of the Software, and to permit persons to whom the

# Software is furnished to do so, subject to the following conditions:

#

 The above copyright notice and this permission notice shall be included in

 all copies or substantial portions of the Software.



# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 OTHER DEALINGS IN THE SOFTWARE.





 Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.

FULL_AMD_PATH=$(srctree)/$(src)/..

DISPLAY_FOLDER_NAME=display

FULL_AMD_DISPLAY_PATH = $(FULL_AMD_PATH)/$(DISPLAY_FOLDER_NAME)

ccflags-y := -I$(FULL_AMD_PATH)/include/asic_reg \

	-I$(FULL_AMD_PATH)/include \

	-I$(FULL_AMD_PATH)/pm/inc \

	-I$(FULL_AMD_PATH)/acp/include \

	-I$(FULL_AMD_DISPLAY_PATH) \

	-I$(FULL_AMD_DISPLAY_PATH)/include \

	-I$(FULL_AMD_PATH)/amdkfd

amdgpu-y := amdgpu_drv.o

# add KMS driver

	amdgpu_atombios.o atombios_crtc.o amdgpu_connectors.o \

	atom.o amdgpu_fence.o amdgpu_ttm.o amdgpu_object.o amdgpu_gart.o \

	atombios_dp.o amdgpu_afmt.o amdgpu_trace_points.o \

	atombios_encoders.o amdgpu_sa.o atombios_i2c.o \

	amdgpu_gtt_mgr.o amdgpu_preempt_mgr.o amdgpu_vram_mgr.o amdgpu_virt.o \

	amdgpu_atomfirmware.o amdgpu_vf_error.o amdgpu_sched.o \

	amdgpu_xgmi.o amdgpu_csa.o amdgpu_ras.o amdgpu_vm_cpu.o \

	amdgpu_umc.o smu_v11_0_i2c.o amdgpu_fru_eeprom.o amdgpu_rap.o \



amdgpu-$(CONFIG_PROC_FS) += amdgpu_fdinfo.o

amdgpu-$(CONFIG_PERF_EVENTS) += amdgpu_pmu.o

 add asic specific block

amdgpu-$(CONFIG_DRM_AMDGPU_CIK)+= cik.o cik_ih.o \

	dce_v8_0.o gfx_v7_0.o cik_sdma.o uvd_v4_2.o vce_v2_0.o



amdgpu-y += \

	vi.o mxgpu_vi.o nbio_v6_1.o soc15.o emu_soc.o mxgpu_ai.o nbio_v7_0.o vega10_reg_init.o \



 add DF block

	df_v1_7.o \



# add GMC block

amdgpu-y += \

	gmc_v7_0.o \

	gmc_v8_0.o \

	gfxhub_v1_0.o mmhub_v1_0.o gmc_v9_0.o gfxhub_v1_1.o mmhub_v9_4.o \



# add UMC block

amdgpu-y += \



 add IH block

	amdgpu_ih.o \

	iceland_ih.o \

	tonga_ih.o \

	vega10_ih.o \

	navi10_ih.o

 add PSP block

	psp_v10_0.o \

	psp_v11_0_8.o \

	psp_v13_0.o

 add DCE block

	dce_v10_0.o \

	amdgpu_vkms.o

 add GFX block

	gfx_v10_0.o

 add async DMA block

	amdgpu_sdma.o \

	sdma_v3_0.o \

	sdma_v4_4.o \

	sdma_v5_2.o

 add MES block

	mes_v10_1.o

 add UVD block



# add VCE block

amdgpu-y += \

	amdgpu_vce.o \

	vce_v3_0.o \

	vce_v4_0.o

# add VCN and JPEG block

amdgpu-y += \

	amdgpu_vcn.o \

	vcn_v1_0.o \

	vcn_v2_0.o \

	vcn_v2_5.o \

	vcn_v3_0.o \

	jpeg_v1_0.o \

	jpeg_v2_5.o \



# add ATHUB block

amdgpu-y += \

	athub_v1_0.o \

	athub_v2_0.o \

	athub_v2_1.o

 add SMUIO block

	smuio_v11_0.o \

	smuio_v13_0.o

 add reset block



# add MCA block

amdgpu-y += \

	mca_v3_0.o

 add amdkfd interfaces



ifneq ($(CONFIG_HSA_AMD),)

include $(FULL_AMD_PATH)/amdkfd/Makefile

amdgpu-y += $(AMDKFD_FILES)

amdgpu-y += \

	amdgpu_amdkfd_gpuvm.o \

	amdgpu_amdkfd_gfx_v8.o \

	amdgpu_amdkfd_gfx_v9.o \

	amdgpu_amdkfd_arcturus.o \

	amdgpu_amdkfd_gfx_v10.o \



ifneq ($(CONFIG_DRM_AMDGPU_CIK),)



endif

 add cgs

amdgpu-y += amdgpu_cgs.o

 GPU scheduler

amdgpu-y += amdgpu_job.o

# ACP componet

amdgpu-y += amdgpu_acp.o

AMDACPPATH := ../acp

include $(FULL_AMD_PATH)/acp/Makefile

amdgpu-y += $(AMD_ACP_FILES)

endif

amdgpu-$(CONFIG_VGA_SWITCHEROO) += amdgpu_atpx_handler.o

amdgpu-$(CONFIG_HMM_MIRROR) += amdgpu_mn.o

include $(FULL_AMD_PATH)/pm/Makefile

amdgpu-y += $(AMD_POWERPLAY_FILES)



RELATIVE_AMD_DISPLAY_PATH = ../$(DISPLAY_FOLDER_NAME)

include $(FULL_AMD_DISPLAY_PATH)/Makefile

amdgpu-y += $(AMD_DISPLAY_FILES)



obj-$(CONFIG_DRM_AMDGPU)+= amdgpu.o

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com>



lima-y := \

	lima_drv.o \

	lima_l2_cache.o \

	lima_mmu.o \

	lima_pp.o \

	lima_gem.o \

	lima_dlbu.o \

	lima_bcast.o \

	lima_trace.o \

	lima_devfreq.o

obj-$(CONFIG_DRM_LIMA) += lima.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.



mga-$(CONFIG_COMPAT) += mga_ioc32.o

obj-$(CONFIG_DRM_MGA)	+= mga.o

 SPDX-License-Identifier: GPL-2.0-only

mgag200-y   := mgag200_drv.o mgag200_i2c.o mgag200_mm.o mgag200_mode.o mgag200_pll.o

obj-$(CONFIG_DRM_MGAG200) += mgag200.o

 SPDX-License-Identifier: GPL-2.0-only

                      test-drm_format.o test-drm_framebuffer.o \

		      test-drm_damage_helper.o test-drm_dp_mst_helper.o \

		      test-drm_rect.o

obj-$(CONFIG_DRM_DEBUG_SELFTEST) += test-drm_mm.o test-drm_modeset.o test-drm_cmdline_parser.o

# SPDX-License-Identifier: GPL-2.0

vmwgfx-y := vmwgfx_execbuf.o vmwgfx_gmr.o vmwgfx_kms.o vmwgfx_drv.o \

	    vmwgfx_ioctl.o vmwgfx_resource.o vmwgfx_ttm_buffer.o \

	    vmwgfx_cmd.o vmwgfx_irq.o vmwgfx_ldu.o vmwgfx_ttm_glue.o \

	    vmwgfx_overlay.o vmwgfx_gmrid_manager.o vmwgfx_fence.o \

	    vmwgfx_bo.o vmwgfx_scrn.o vmwgfx_context.o \

	    vmwgfx_surface.o vmwgfx_prime.o vmwgfx_mob.o vmwgfx_shader.o \

	    vmwgfx_validation.o vmwgfx_page_dirty.o vmwgfx_streamoutput.o \



vmwgfx-$(CONFIG_DRM_FBDEV_EMULATION) += vmwgfx_fb.o

vmwgfx-$(CONFIG_TRANSPARENT_HUGEPAGE) += vmwgfx_thp.o

obj-$(CONFIG_DRM_VMWGFX) := vmwgfx.o

 SPDX-License-Identifier: GPL-2.0-only



hyperv_drm-y := \

	hyperv_drm_drv.o \

	hyperv_drm_modeset.o \

	hyperv_drm_proto.o

obj-$(CONFIG_DRM_HYPERV) += hyperv_drm.o

# SPDX-License-Identifier: GPL-2.0



pl111_drm-$(CONFIG_ARCH_NOMADIK) += pl111_nomadik.o

pl111_drm-$(CONFIG_DEBUG_FS) += pl111_debugfs.o

obj-$(CONFIG_DRM_PL111) += pl111_drm.o



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_DRM_HDLCD)	+= hdlcd.o

mali-dp-y := malidp_drv.o malidp_hw.o malidp_planes.o malidp_crtc.o

obj-$(CONFIG_DRM_KOMEDA) += display/

# SPDX-License-Identifier: GPL-2.0

ccflags-y := \



komeda-y := \

	komeda_drv.o \

	komeda_dev.o \

	komeda_format_caps.o \

	komeda_pipeline.o \

	komeda_crtc.o \

	komeda_plane.o \



komeda-y += \

	d71/d71_component.o

obj-$(CONFIG_DRM_KOMEDA) += komeda.o

# SPDX-License-Identifier: GPL-2.0



	drm.o \

	uapi.o \

	submit.o \

	firewall.o \

	hub.o \

	rgb.o \

	dsi.o \

	dpaux.o \

	gr2d.o \

	gr3d.o \

	falcon.o \





 SPDX-License-Identifier: GPL-2.0-only

udl-y := udl_drv.o udl_modeset.o udl_connector.o udl_main.o udl_transfer.o

obj-$(CONFIG_DRM_UDL) := udl.o

# SPDX-License-Identifier: GPL-2.0

imxdrm-objs := imx-drm-core.o ipuv3-crtc.o ipuv3-plane.o



obj-$(CONFIG_DRM_IMX_TVE) += imx-tve.o



obj-$(CONFIG_DRM_IMX_HDMI) += dw_hdmi-imx.o

obj-$(CONFIG_DRM_IMX_DCSS) += dcss/

imx-dcss-objs := dcss-drv.o dcss-dev.o dcss-blkctl.o dcss-ctxld.o dcss-dtg.o \





 SPDX-License-Identifier: GPL-2.0-only

 Please keep these build lists sorted!



 core driver code

v3d-y := \

	v3d_bo.o \

	v3d_fence.o \

	v3d_irq.o \

	v3d_perfmon.o \

	v3d_trace_points.o \



v3d-$(CONFIG_DEBUG_FS) += v3d_debugfs.o



CFLAGS_v3d_trace_points.o := -I$(src)

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the drm device driver.  This driver provides support for the

# Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.



obj-$(CONFIG_DRM_VIA)	+=via.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_DRM_CHIPONE_ICN6211) += chipone-icn6211.o

obj-$(CONFIG_DRM_CROS_EC_ANX7688) += cros-ec-anx7688.o

obj-$(CONFIG_DRM_LONTIUM_LT8912B) += lontium-lt8912b.o

obj-$(CONFIG_DRM_LONTIUM_LT9611UXC) += lontium-lt9611uxc.o

obj-$(CONFIG_DRM_MEGACHIPS_STDPXXXX_GE_B850V3_FW) += megachips-stdpxxxx-ge-b850v3-fw.o

obj-$(CONFIG_DRM_PARADE_PS8622) += parade-ps8622.o

obj-$(CONFIG_DRM_SIL_SII8620) += sil-sii8620.o

obj-$(CONFIG_DRM_SII9234) += sii9234.o

obj-$(CONFIG_DRM_THINE_THC63LVD1024) += thc63lvd1024.o

obj-$(CONFIG_DRM_TOSHIBA_TC358764) += tc358764.o

obj-$(CONFIG_DRM_TOSHIBA_TC358768) += tc358768.o

obj-$(CONFIG_DRM_TI_SN65DSI83) += ti-sn65dsi83.o

obj-$(CONFIG_DRM_TI_TFP410) += ti-tfp410.o

obj-$(CONFIG_DRM_ITE_IT66121) += ite-it66121.o

obj-y += analogix/

obj-y += cadence/

 SPDX-License-Identifier: GPL-2.0-only

adv7511-y := adv7511_drv.o adv7533.o

adv7511-$(CONFIG_DRM_I2C_ADV7511_CEC) += adv7511_cec.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_DRM_DW_HDMI) += dw-hdmi.o

obj-$(CONFIG_DRM_DW_HDMI_I2S_AUDIO) += dw-hdmi-i2s-audio.o



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_DRM_CDNS_MHDP8546) += cdns-mhdp8546.o

cdns-mhdp8546-$(CONFIG_DRM_CDNS_MHDP8546_J721E) += cdns-mhdp8546-j721e.o

 SPDX-License-Identifier: GPL-2.0-only

analogix_dp-objs := analogix_dp_core.o analogix_dp_reg.o analogix-i2c-dptx.o

obj-$(CONFIG_DRM_ANALOGIX_ANX78XX) += analogix-anx78xx.o

# SPDX-License-Identifier: GPL-2.0

# Please keep these build lists sorted!

# core driver code

	vc4_drv.o \

	vc4_dsi.o \

	vc4_kms.o \

	vc4_vec.o \

	vc4_irq.o \

	vc4_plane.o \

	vc4_txp.o \



vc4-$(CONFIG_DEBUG_FS) += vc4_debugfs.o

# SPDX-License-Identifier: GPL-2.0

	bus.o \

	syncpt.o \

	channel.o \

	debug.o \

	mipi.o \

	hw/host1x01.o \

	hw/host1x04.o \

	hw/host1x06.o \



# SPDX-License-Identifier: GPL-2.0



imx-ipu-v3-objs := ipu-common.o ipu-cpmem.o ipu-csi.o ipu-dc.o ipu-di.o \

		ipu-dp.o ipu-dmfc.o ipu-ic.o ipu-ic-csc.o \



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_TRACE_GPU_MEM) += trace_gpu_mem.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CONNECTOR)		+= cn.o



cn-y				+= cn_queue.o connector.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the input core drivers.





 Each configuration option enables a list of files.



input-core-y := input.o input-compat.o input-mt.o input-poller.o ff-core.o

input-core-y += touchscreen.o

obj-$(CONFIG_INPUT_FF_MEMLESS)	+= ff-memless.o

obj-$(CONFIG_INPUT_SPARSEKMAP)	+= sparse-keymap.o

obj-$(CONFIG_INPUT_MATRIXKMAP)	+= matrix-keymap.o

obj-$(CONFIG_INPUT_LEDS)	+= input-leds.o

obj-$(CONFIG_INPUT_JOYDEV)	+= joydev.o

obj-$(CONFIG_INPUT_EVBUG)	+= evbug.o



obj-$(CONFIG_INPUT_APMPOWER)	+= apm-power.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_RMI4_CORE) += rmi_core.o





 Function drivers

rmi_core-$(CONFIG_RMI4_F03) += rmi_f03.o

rmi_core-$(CONFIG_RMI4_F12) += rmi_f12.o

rmi_core-$(CONFIG_RMI4_F34) += rmi_f34.o rmi_f34v7.o

rmi_core-$(CONFIG_RMI4_F54) += rmi_f54.o



 Transports

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the input misc drivers.





 Each configuration option enables a list of files.



obj-$(CONFIG_INPUT_88PM80X_ONKEY)	+= 88pm80x_onkey.o

obj-$(CONFIG_INPUT_ARIEL_PWRBUTTON)	+= ariel-pwrbutton.o

obj-$(CONFIG_INPUT_ATC260X_ONKEY)	+= atc260x-onkey.o

obj-$(CONFIG_INPUT_ATI_REMOTE2)		+= ati_remote2.o

obj-$(CONFIG_INPUT_ATLAS_BTNS)		+= atlas_btns.o

obj-$(CONFIG_INPUT_CPCAP_PWRBUTTON)	+= cpcap-pwrbutton.o

obj-$(CONFIG_INPUT_DA9052_ONKEY)	+= da9052_onkey.o

obj-$(CONFIG_INPUT_DA9063_ONKEY)	+= da9063_onkey.o

obj-$(CONFIG_INPUT_DRV260X_HAPTICS)	+= drv260x.o

obj-$(CONFIG_INPUT_DRV2667_HAPTICS)	+= drv2667.o

obj-$(CONFIG_INPUT_GPIO_BEEPER)		+= gpio-beeper.o

obj-$(CONFIG_INPUT_HISI_POWERKEY)	+= hisi_powerkey.o

obj-$(CONFIG_HP_SDC_RTC)		+= hp_sdc_rtc.o

obj-$(CONFIG_INPUT_IMS_PCU)		+= ims-pcu.o

obj-$(CONFIG_INPUT_IQS269A)		+= iqs269a.o

obj-$(CONFIG_INPUT_IQS626A)		+= iqs626a.o

obj-$(CONFIG_INPUT_M68K_BEEP)		+= m68kspkr.o

obj-$(CONFIG_INPUT_MAX77693_HAPTIC)	+= max77693-haptic.o

obj-$(CONFIG_INPUT_MAX8997_HAPTIC)	+= max8997_haptic.o

obj-$(CONFIG_INPUT_PALMAS_PWRBUTTON)	+= palmas-pwrbutton.o

obj-$(CONFIG_INPUT_PCF50633_PMU)	+= pcf50633-input.o

obj-$(CONFIG_INPUT_PM8941_PWRKEY)	+= pm8941-pwrkey.o

obj-$(CONFIG_INPUT_PMIC8XXX_PWRKEY)	+= pmic8xxx-pwrkey.o

obj-$(CONFIG_INPUT_POWERMATE)		+= powermate.o

obj-$(CONFIG_INPUT_PWM_BEEPER)		+= pwm-beeper.o

obj-$(CONFIG_INPUT_PWM_VIBRA)		+= pwm-vibra.o

obj-$(CONFIG_INPUT_RB532_BUTTON)	+= rb532_button.o

obj-$(CONFIG_INPUT_RETU_PWRBUTTON)	+= retu-pwrbutton.o

obj-$(CONFIG_INPUT_AXP20X_PEK)		+= axp20x-pek.o

obj-$(CONFIG_INPUT_GPIO_ROTARY_ENCODER)	+= rotary_encoder.o

obj-$(CONFIG_INPUT_SC27XX_VIBRA)	+= sc27xx-vibra.o

obj-$(CONFIG_INPUT_SGI_BTNS)		+= sgi_btns.o

obj-$(CONFIG_INPUT_STPMIC1_ONKEY)  	+= stpmic1_onkey.o

obj-$(CONFIG_INPUT_TWL4030_PWRBUTTON)	+= twl4030-pwrbutton.o

obj-$(CONFIG_INPUT_TWL6040_VIBRA)	+= twl6040-vibra.o

obj-$(CONFIG_INPUT_UINPUT)		+= uinput.o

obj-$(CONFIG_INPUT_IDEAPAD_SLIDEBAR)	+= ideapad_slidebar.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the touchscreen drivers.

#

# Each configuration option enables a list of files.

wm97xx-ts-y := wm97xx-core.o

goodix_ts-y := goodix.o goodix_fwupload.o

obj-$(CONFIG_TOUCHSCREEN_AD7877)	+= ad7877.o

obj-$(CONFIG_TOUCHSCREEN_AD7879_I2C)	+= ad7879-i2c.o

obj-$(CONFIG_TOUCHSCREEN_ADS7846)	+= ads7846.o

obj-$(CONFIG_TOUCHSCREEN_CHIPONE_ICN8318)	+= chipone_icn8318.o

obj-$(CONFIG_TOUCHSCREEN_CY8CTMA140)	+= cy8ctma140.o

obj-$(CONFIG_TOUCHSCREEN_CY8CTMG110)	+= cy8ctmg110_ts.o

obj-$(CONFIG_TOUCHSCREEN_CYTTSP_I2C)	+= cyttsp_i2c.o cyttsp_i2c_common.o

obj-$(CONFIG_TOUCHSCREEN_CYTTSP4_CORE)	+= cyttsp4_core.o

obj-$(CONFIG_TOUCHSCREEN_CYTTSP4_SPI)	+= cyttsp4_spi.o

obj-$(CONFIG_TOUCHSCREEN_DA9034)	+= da9034-ts.o

obj-$(CONFIG_TOUCHSCREEN_DYNAPRO)	+= dynapro.o

obj-$(CONFIG_TOUCHSCREEN_HAMPSHIRE)	+= hampshire.o

obj-$(CONFIG_TOUCHSCREEN_EETI)		+= eeti_ts.o

obj-$(CONFIG_TOUCHSCREEN_EXC3000)	+= exc3000.o

obj-$(CONFIG_TOUCHSCREEN_FUJITSU)	+= fujitsu_ts.o

obj-$(CONFIG_TOUCHSCREEN_GOODIX)	+= goodix_ts.o

obj-$(CONFIG_TOUCHSCREEN_ILI210X)	+= ili210x.o

obj-$(CONFIG_TOUCHSCREEN_ILITEK)	+= ilitek_ts_i2c.o

obj-$(CONFIG_TOUCHSCREEN_INEXIO)	+= inexio.o

obj-$(CONFIG_TOUCHSCREEN_IPROC)		+= bcm_iproc_tsc.o

obj-$(CONFIG_TOUCHSCREEN_LPC32XX)	+= lpc32xx_ts.o

obj-$(CONFIG_TOUCHSCREEN_MAX11801)	+= max11801_ts.o

obj-$(CONFIG_TOUCHSCREEN_MXS_LRADC)     += mxs-lradc-ts.o

obj-$(CONFIG_TOUCHSCREEN_MELFAS_MIP4)	+= melfas_mip4.o

obj-$(CONFIG_TOUCHSCREEN_MMS114)	+= mms114.o

obj-$(CONFIG_TOUCHSCREEN_MTOUCH)	+= mtouch.o

obj-$(CONFIG_TOUCHSCREEN_MK712)		+= mk712.o

obj-$(CONFIG_TOUCHSCREEN_HTCPEN)	+= htcpen.o

obj-$(CONFIG_TOUCHSCREEN_USB_COMPOSITE)	+= usbtouchscreen.o

obj-$(CONFIG_TOUCHSCREEN_PENMOUNT)	+= penmount.o

obj-$(CONFIG_TOUCHSCREEN_PIXCIR)	+= pixcir_i2c_ts.o

obj-$(CONFIG_TOUCHSCREEN_S6SY761)	+= s6sy761.o

obj-$(CONFIG_TOUCHSCREEN_SIS_I2C)	+= sis_i2c.o

obj-$(CONFIG_TOUCHSCREEN_STMFTS)	+= stmfts.o

obj-$(CONFIG_TOUCHSCREEN_SUN4I)		+= sun4i-ts.o

obj-$(CONFIG_TOUCHSCREEN_SUR40)		+= sur40.o

obj-$(CONFIG_TOUCHSCREEN_TI_AM335X_TSC)	+= ti_am335x_tsc.o

obj-$(CONFIG_TOUCHSCREEN_TOUCHRIGHT)	+= touchright.o

obj-$(CONFIG_TOUCHSCREEN_TSC_SERIO)	+= tsc40.o

obj-$(CONFIG_TOUCHSCREEN_TSC2004)	+= tsc2004.o

tsc2007-$(CONFIG_TOUCHSCREEN_TSC2007_IIO)	+= tsc2007_iio.o

obj-$(CONFIG_TOUCHSCREEN_WACOM_W8001)	+= wacom_w8001.o

obj-$(CONFIG_TOUCHSCREEN_WDT87XX_I2C)	+= wdt87xx_i2c.o

obj-$(CONFIG_TOUCHSCREEN_WM831X)	+= wm831x-ts.o

obj-$(CONFIG_TOUCHSCREEN_WM97XX)	+= wm97xx-ts.o

wm97xx-ts-$(CONFIG_TOUCHSCREEN_WM9712)	+= wm9712.o

obj-$(CONFIG_TOUCHSCREEN_WM97XX_MAINSTONE)	+= mainstone-wm97xx.o

obj-$(CONFIG_TOUCHSCREEN_SX8654)	+= sx8654.o

obj-$(CONFIG_TOUCHSCREEN_TPS6507X)	+= tps6507x-ts.o

obj-$(CONFIG_TOUCHSCREEN_ROHM_BU21023)	+= rohm_bu21023.o

obj-$(CONFIG_TOUCHSCREEN_IQS5XX)	+= iqs5xx.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the input core drivers.





 Each configuration option enables a list of files.



obj-$(CONFIG_KEYBOARD_ADC)		+= adc-keys.o

obj-$(CONFIG_KEYBOARD_ADP5520)		+= adp5520-keys.o

obj-$(CONFIG_KEYBOARD_ADP5588)		+= adp5588-keys.o

obj-$(CONFIG_KEYBOARD_ADP5589)		+= adp5589-keys.o

obj-$(CONFIG_KEYBOARD_AMIGA)		+= amikbd.o

obj-$(CONFIG_KEYBOARD_ATKBD)		+= atkbd.o

obj-$(CONFIG_KEYBOARD_BCM)		+= bcm-keypad.o

obj-$(CONFIG_KEYBOARD_DAVINCI)		+= davinci_keyscan.o

obj-$(CONFIG_KEYBOARD_DLINK_DIR685)	+= dlink-dir685-touchkeys.o

obj-$(CONFIG_KEYBOARD_EP93XX)		+= ep93xx_keypad.o

obj-$(CONFIG_KEYBOARD_GOLDFISH_EVENTS)	+= goldfish_events.o

obj-$(CONFIG_KEYBOARD_GPIO)		+= gpio_keys.o

obj-$(CONFIG_KEYBOARD_HIL)		+= hil_kbd.o

obj-$(CONFIG_KEYBOARD_HIL_OLD)		+= hilkbd.o

obj-$(CONFIG_KEYBOARD_LKKBD)		+= lkkbd.o

obj-$(CONFIG_KEYBOARD_LM8333)		+= lm8333.o

obj-$(CONFIG_KEYBOARD_LOCOMO)		+= locomokbd.o

obj-$(CONFIG_KEYBOARD_LPC32XX)		+= lpc32xx-keys.o

obj-$(CONFIG_KEYBOARD_MAPLE)		+= maple_keyb.o

obj-$(CONFIG_KEYBOARD_MATRIX)		+= matrix_keypad.o

obj-$(CONFIG_KEYBOARD_MAX7359)		+= max7359_keypad.o

obj-$(CONFIG_KEYBOARD_MCS)		+= mcs_touchkey.o

obj-$(CONFIG_KEYBOARD_MPR121)		+= mpr121_touchkey.o

obj-$(CONFIG_KEYBOARD_MTK_PMIC) 	+= mtk-pmic-keys.o

obj-$(CONFIG_KEYBOARD_NEWTON)		+= newtonkbd.o

obj-$(CONFIG_KEYBOARD_NOMADIK)		+= nomadik-ske-keypad.o

obj-$(CONFIG_KEYBOARD_NSPIRE)		+= nspire-keypad.o

obj-$(CONFIG_KEYBOARD_OMAP)		+= omap-keypad.o

obj-$(CONFIG_KEYBOARD_OMAP4)		+= omap4-keypad.o

obj-$(CONFIG_KEYBOARD_OPENCORES)	+= opencores-kbd.o

obj-$(CONFIG_KEYBOARD_PMIC8XXX)		+= pmic8xxx-keypad.o

obj-$(CONFIG_KEYBOARD_PXA27x)		+= pxa27x_keypad.o

obj-$(CONFIG_KEYBOARD_PXA930_ROTARY)	+= pxa930_rotary.o

obj-$(CONFIG_KEYBOARD_QT1050)           += qt1050.o

obj-$(CONFIG_KEYBOARD_QT1070)           += qt1070.o

obj-$(CONFIG_KEYBOARD_SH_KEYSC)		+= sh_keysc.o

obj-$(CONFIG_KEYBOARD_SNVS_PWRKEY)	+= snvs_pwrkey.o

obj-$(CONFIG_KEYBOARD_SPEAR)		+= spear-keyboard.o

obj-$(CONFIG_KEYBOARD_STMPE)		+= stmpe-keypad.o

obj-$(CONFIG_KEYBOARD_SUN4I_LRADC)	+= sun4i-lradc-keys.o

obj-$(CONFIG_KEYBOARD_TEGRA)		+= tegra-kbc.o

obj-$(CONFIG_KEYBOARD_TM2_TOUCHKEY)	+= tm2-touchkey.o

obj-$(CONFIG_KEYBOARD_TWL4030)		+= twl4030_keypad.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the input core drivers.





 Each configuration option enables a list of files.



obj-$(CONFIG_JOYSTICK_ADI)		+= adi.o

obj-$(CONFIG_JOYSTICK_AMIGA)		+= amijoy.o

obj-$(CONFIG_JOYSTICK_ANALOG)		+= analog.o

obj-$(CONFIG_JOYSTICK_DB9)		+= db9.o

obj-$(CONFIG_JOYSTICK_GAMECON)		+= gamecon.o

obj-$(CONFIG_JOYSTICK_GRIP)		+= grip.o

obj-$(CONFIG_JOYSTICK_INTERACT)		+= interact.o

obj-$(CONFIG_JOYSTICK_MAGELLAN)		+= magellan.o

obj-$(CONFIG_JOYSTICK_MAPLE)		+= maplecontrol.o

obj-$(CONFIG_JOYSTICK_N64)		+= n64joy.o

obj-$(CONFIG_JOYSTICK_PSXPAD_SPI)	+= psxpad-spi.o

obj-$(CONFIG_JOYSTICK_SPACEORB)		+= spaceorb.o

obj-$(CONFIG_JOYSTICK_TMDC)		+= tmdc.o

obj-$(CONFIG_JOYSTICK_TURBOGRAFX)	+= turbografx.o

obj-$(CONFIG_JOYSTICK_WARRIOR)		+= warrior.o

obj-$(CONFIG_JOYSTICK_WALKERA0701)	+= walkera0701.o

obj-$(CONFIG_JOYSTICK_ZHENHUA)		+= zhenhua.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the I-Force driver



# By Johann Deneux <johann.deneux@gmail.com>

#

obj-$(CONFIG_JOYSTICK_IFORCE)		+= iforce.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the input core drivers.





 Each configuration option enables a list of files.



obj-$(CONFIG_SERIO)		+= serio.o

obj-$(CONFIG_SERIO_PARKBD)	+= parkbd.o

obj-$(CONFIG_SERIO_CT82C710)	+= ct82c710.o

obj-$(CONFIG_SERIO_AMBAKMI)	+= ambakmi.o

obj-$(CONFIG_SERIO_GSCPS2)	+= gscps2.o

obj-$(CONFIG_HP_SDC)		+= hp_sdc.o

obj-$(CONFIG_SERIO_PCIPS2)	+= pcips2.o

obj-$(CONFIG_SERIO_MACEPS2)	+= maceps2.o

obj-$(CONFIG_SERIO_SGI_IOC3)	+= ioc3kbd.o

obj-$(CONFIG_SERIO_AMS_DELTA)	+= ams_delta_serio.o

obj-$(CONFIG_SERIO_ALTERA_PS2)	+= altera_ps2.o

obj-$(CONFIG_SERIO_APBPS2)	+= apbps2.o

obj-$(CONFIG_HYPERV_KEYBOARD)	+= hyperv-keyboard.o

obj-$(CONFIG_SERIO_GPIO_PS2)	+= ps2-gpio.o

obj-$(CONFIG_USERIO)		+= userio.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the mouse drivers.

#

# Each configuration option enables a list of files.

obj-$(CONFIG_MOUSE_AMIGA)		+= amimouse.o

obj-$(CONFIG_MOUSE_APPLETOUCH)		+= appletouch.o

obj-$(CONFIG_MOUSE_MAPLE)		+= maplemouse.o

obj-$(CONFIG_MOUSE_NAVPOINT_PXA27x)	+= navpoint.o

obj-$(CONFIG_MOUSE_PC110PAD)		+= pc110pad.o

obj-$(CONFIG_MOUSE_PXA930_TRKBALL)	+= pxa930_trkball.o

obj-$(CONFIG_MOUSE_RISCPC)		+= rpcmouse.o

obj-$(CONFIG_MOUSE_SERIAL)		+= sermouse.o

obj-$(CONFIG_MOUSE_SYNAPTICS_USB)	+= synaptics_usb.o

obj-$(CONFIG_MOUSE_VSXXXAA)		+= vsxxxaa.o

cyapatp-objs := cyapa.o cyapa_gen3.o cyapa_gen5.o cyapa_gen6.o



psmouse-$(CONFIG_MOUSE_PS2_ELANTECH)	+= elantech.o

psmouse-$(CONFIG_MOUSE_PS2_LOGIPS2PP)	+= logips2pp.o

psmouse-$(CONFIG_MOUSE_PS2_SENTELIC)	+= sentelic.o

psmouse-$(CONFIG_MOUSE_PS2_TOUCHKIT)	+= touchkit_ps2.o

psmouse-$(CONFIG_MOUSE_PS2_VMMOUSE)	+= vmmouse.o

psmouse-$(CONFIG_MOUSE_PS2_SMBUS)	+= psmouse-smbus.o

elan_i2c-objs := elan_i2c_core.o

elan_i2c-$(CONFIG_MOUSE_ELAN_I2C_I2C)	+= elan_i2c_i2c.o

elan_i2c-$(CONFIG_MOUSE_ELAN_I2C_SMBUS)	+= elan_i2c_smbus.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the tablet drivers

#



obj-$(CONFIG_TABLET_USB_ACECAD)	+= acecad.o

obj-$(CONFIG_TABLET_USB_AIPTEK)	+= aiptek.o

obj-$(CONFIG_TABLET_USB_HANWANG) += hanwang.o

obj-$(CONFIG_TABLET_USB_KBTAB)	+= kbtab.o

obj-$(CONFIG_TABLET_USB_PEGASUS) += pegasus_notetaker.o

obj-$(CONFIG_TABLET_SERIAL_WACOM4) += wacom_serial4.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the gameport drivers.





 Each configuration option enables a list of files.



obj-$(CONFIG_GAMEPORT)		+= gameport.o

obj-$(CONFIG_GAMEPORT_FM801)	+= fm801-gp.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the kernel mmc device drivers.





obj-$(CONFIG_MMC)		+= core/

obj-$(subst m,y,$(CONFIG_MMC))	+= host/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel mmc core.

#

obj-$(CONFIG_MMC)		+= mmc_core.o

mmc_core-y			:= core.o bus.o host.o \

				   sdio_cis.o sdio_io.o sdio_irq.o \

mmc_core-$(CONFIG_OF)		+= pwrseq.o

obj-$(CONFIG_PWRSEQ_SD8787)	+= pwrseq_sd8787.o

mmc_core-$(CONFIG_DEBUG_FS)	+= debugfs.o

obj-$(CONFIG_MMC_BLOCK)		+= mmc_block.o

mmc_block-objs			:= block.o queue.o

obj-$(CONFIG_MMC_TEST)		+= mmc_test.o

obj-$(CONFIG_SDIO_UART)		+= sdio_uart.o

mmc_core-$(CONFIG_MMC_CRYPTO)	+= crypto.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for MMC/SD host controller drivers

#

obj-$(CONFIG_MMC_ARMMMCI) += armmmci.o

armmmci-y := mmci.o

armmmci-$(CONFIG_MMC_QCOM_DML) += mmci_qcom_dml.o

armmmci-$(CONFIG_MMC_STM32_SDMMC) += mmci_stm32_sdmmc.o

obj-$(CONFIG_MMC_MXC)		+= mxcmmc.o

obj-$(CONFIG_MMC_MXS)		+= mxs-mmc.o

obj-$(CONFIG_MMC_SDHCI)		+= sdhci.o

sdhci-pci-y			+= sdhci-pci-core.o sdhci-pci-o2micro.o sdhci-pci-arasan.o \

				   sdhci-pci-dwc-mshc.o sdhci-pci-gli.o

obj-$(CONFIG_MMC_SDHCI_PXAV3)	+= sdhci-pxav3.o

obj-$(CONFIG_MMC_SDHCI_S3C)	+= sdhci-s3c.o

obj-$(CONFIG_MMC_SDHCI_MILBEAUT)	+= sdhci-milbeaut.o

obj-$(CONFIG_MMC_SDHCI_AM654)	+= sdhci_am654.o

obj-$(CONFIG_MMC_WBSD)		+= wbsd.o

obj-$(CONFIG_MMC_ALCOR)	+= alcor.o

obj-$(CONFIG_MMC_TIFM_SD)	+= tifm_sd.o

obj-$(CONFIG_MMC_DAVINCI)       += davinci_mmc.o

obj-$(CONFIG_MMC_SPI)		+= mmc_spi.o

obj-$(CONFIG_MMC_S3C)   	+= s3cmci.o

obj-$(CONFIG_MMC_TMIO_CORE)	+= tmio_mmc_core.o

obj-$(CONFIG_MMC_SDHI_INTERNAL_DMAC)	+= renesas_sdhi_internal_dmac.o

obj-$(CONFIG_MMC_UNIPHIER)	+= uniphier-sd.o

obj-$(CONFIG_MMC_CB710)		+= cb710-mmc.o

obj-$(CONFIG_MMC_DW_PLTFM)	+= dw_mmc-pltfm.o

obj-$(CONFIG_MMC_DW_EXYNOS)	+= dw_mmc-exynos.o

obj-$(CONFIG_MMC_DW_PCI)	+= dw_mmc-pci.o

obj-$(CONFIG_MMC_SH_MMCIF)	+= sh_mmcif.o

obj-$(CONFIG_MMC_VUB300)	+= vub300.o

obj-$(CONFIG_MMC_USHC)		+= ushc.o

obj-$(CONFIG_MMC_WMT)		+= wmt-sdmmc.o

meson-mx-sdhc-objs 		:= meson-mx-sdhc-clkc.o meson-mx-sdhc-mmc.o

obj-$(CONFIG_MMC_MESON_MX_SDIO)	+= meson-mx-sdio.o

obj-$(CONFIG_MMC_USDHI6ROL0)	+= usdhi6rol0.o

obj-$(CONFIG_MMC_TOSHIBA_PCI)	+= toshsd.o



obj-$(CONFIG_MMC_REALTEK_PCI)	+= rtsx_pci_sdmmc.o

obj-$(CONFIG_MMC_REALTEK_USB)	+= rtsx_usb_sdmmc.o

obj-$(CONFIG_MMC_SDHCI_ESDHC_MCF)       += sdhci-esdhc-mcf.o

obj-$(CONFIG_MMC_SDHCI_OF_ARASAN)	+= sdhci-of-arasan.o

obj-$(CONFIG_MMC_SDHCI_OF_ESDHC)	+= sdhci-of-esdhc.o

obj-$(CONFIG_MMC_SDHCI_OF_HLWD)		+= sdhci-of-hlwd.o

obj-$(CONFIG_MMC_SDHCI_OF_SPARX5)	+= sdhci-of-sparx5.o

obj-$(CONFIG_MMC_SDHCI_MICROCHIP_PIC32)	+= sdhci-pic32.o

obj-$(CONFIG_MMC_SDHCI_BRCMSTB)		+= sdhci-brcmstb.o

obj-$(CONFIG_MMC_SDHCI_OMAP)		+= sdhci-omap.o

obj-$(CONFIG_MMC_SDHCI_SPRD)		+= sdhci-sprd.o

obj-$(CONFIG_MMC_HSQ)			+= mmc_hsq.o

ifeq ($(CONFIG_CB710_DEBUG),y)



obj-$(CONFIG_MMC_SDHCI_XENON)	+= sdhci-xenon-driver.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.



obj-$(CONFIG_DMI)		+= dmi_scan.o

obj-$(CONFIG_DMI_SYSFS)		+= dmi-sysfs.o

obj-$(CONFIG_EDD)		+= edd.o

obj-$(CONFIG_EFI_PCDP)		+= pcdp.o

obj-$(CONFIG_INTEL_STRATIX10_SERVICE) += stratix10-svc.o

obj-$(CONFIG_ISCSI_IBFT_FIND)	+= iscsi_ibft_find.o

qcom-scm-objs += qcom_scm.o qcom_scm-smc.o qcom_scm-legacy.o

obj-$(CONFIG_SYSFB)		+= sysfb.o

obj-$(CONFIG_TRUSTED_FOUNDATIONS) += trusted_foundations.o



obj-y				+= meson/

obj-$(CONFIG_EFI)		+= efi/

obj-y				+= imx/

obj-y				+= psci/

obj-y				+= tegra/

obj-y				+= xilinx/

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MESON_SM) +=	meson_sm.o

# SPDX-License-Identifier: GPL-2.0

# Makefile for Xilinx firmwares

# SPDX-License-Identifier: GPL-2.0

#

obj-$(CONFIG_HAVE_ARM_SMCCC_DISCOVERY)	+= smccc.o kvm_guest.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for linux kernel

#



# ARM64 maps efi runtime services in userspace addresses

 which don't have KASAN shadow. So dereference of these addresses

# in efi_call_virt() will cause crash if this code instrumented.

#



obj-$(CONFIG_ACPI_BGRT) 		+= efi-bgrt.o

obj-$(CONFIG_EFI)			+= capsule.o

endif

obj-$(CONFIG_EFI_ESRT)			+= esrt.o

obj-$(CONFIG_EFI_RUNTIME_WRAPPERS)	+= runtime-wrappers.o

subdir-$(CONFIG_EFI_STUB)		+= libstub

obj-$(CONFIG_EFI_DEV_PATH_PARSER)	+= dev-path-parser.o

obj-$(CONFIG_APPLE_PROPERTIES)		+= apple-properties.o

obj-$(CONFIG_EFI_RCI2_TABLE)		+= rci2-table.o



fake_map-y				+= fake_mem.o





arm-obj-$(CONFIG_EFI)			:= efi-init.o arm-runtime.o

obj-$(CONFIG_ARM)			+= $(arm-obj-y)

obj-$(CONFIG_ARM64)			+= $(arm-obj-y)

riscv-obj-$(CONFIG_EFI)			:= efi-init.o riscv-runtime.o

obj-$(CONFIG_RISCV)			+= $(riscv-obj-y)

obj-$(CONFIG_UEFI_CPER_ARM)		+= cper-arm.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_EFI_TEST)			+= efi_test.o

# SPDX-License-Identifier: GPL-2.0

#

# The stub may be linked into the kernel proper or into a separate boot binary,

# but in either case, it executes before the kernel does (with MMU disabled) so

 things like ftrace and stack-protector are likely to cause trouble if left

# enabled, even if doing so doesn't break the build.

#

cflags-$(CONFIG_X86_32)		:= -march=i386

				   -mno-mmx -mno-sse -fshort-wchar \

				   $(call cc-disable-warning, gnu) \



# arm64 uses the full KBUILD_CFLAGS so it's necessary to explicitly

 disable the stackleak plugin

cflags-$(CONFIG_ARM64)		:= $(subst $(CC_FLAGS_FTRACE),,$(KBUILD_CFLAGS)) \

cflags-$(CONFIG_ARM)		:= $(subst $(CC_FLAGS_FTRACE),,$(KBUILD_CFLAGS)) \

				   -fno-builtin -fpic \

				   $(call cc-option,-mno-single-pic-base)

				   -fpic

cflags-$(CONFIG_EFI_GENERIC_STUB) += -I$(srctree)/scripts/dtc/libfdt

				   -D__DISABLE_EXPORTS

 remove SCS flags from all objects in this directory

KBUILD_CFLAGS := $(filter-out $(CC_FLAGS_SCS), $(KBUILD_CFLAGS))

# disable LTO



GCOV_PROFILE			:= n

# Sanitizer runtimes are unavailable and cannot be linked here.

KASAN_SANITIZE			:= n

KCSAN_SANITIZE			:= n

UBSAN_SANITIZE			:= n



 Prevents link failures: __sanitizer_cov_trace_pc() is not linked in.

KCOV_INSTRUMENT			:= n

lib-y				:= efi-stub-helper.o gop.o secureboot.o tpm.o \

				   skip_spaces.o lib-cmdline.o lib-ctype.o \

				   alignedmem.o relocate.o vsprintf.o

 include the stub's generic dependencies from lib/ when building for ARM/arm64





lib-$(CONFIG_EFI_GENERIC_STUB)	+= efi-stub.o fdt.o string.o \



lib-$(CONFIG_ARM64)		+= arm64-stub.o

lib-$(CONFIG_RISCV)		+= riscv-stub.o



 Even when -mbranch-protection=none is set, Clang will generate a

 .note.gnu.property for code-less object files (like lib/ctype.c),

# so work around this by explicitly removing the unwanted section.

# https://bugs.llvm.org/show_bug.cgi?id=46480



#

# For x86, bootloaders like systemd-boot or grub-efi do not zero-initialize the

# .bss section, so the .bss section of the EFI stub needs to be included in the

# .data section of the compressed kernel to ensure initialization. Rename the

 .bss section here so it's easy to pick out in the linker script.



STUBCOPY_RELOC-$(CONFIG_X86_64)	:= R_X86_64_64



 ARM discards the .data section because it disallows r/w data in the

# decompressor. So move our .data to .data.efistub and .bss to .bss.efistub,

# which are preserved explicitly by the decompressor linker script.

#

				   --rename-section .bss=.bss.efistub,load,alloc

STUBCOPY_RELOC-$(CONFIG_ARM)	:= R_ARM_ABS



 arm64 puts the stub in the kernel proper, which will unnecessarily retain all

# code indefinitely unless it is annotated as __init/__initdata/__initconst etc.

 So let's apply the __init annotations at the section level, by prefixing

# the section names directly. This will ensure that even all the inline string

# literals are covered.

 The fact that the stub and the kernel proper are essentially the same binary

 also means that we need to be extra careful to make sure that the stub does

# not rely on any absolute symbol references, considering that the virtual

 kernel mapping that the linker uses is not active yet when the stub is

 executing. So build all C dependencies of the EFI stub into libstub, and do

# a verification pass to see if any absolute relocations exist in any of the

# object files.

#



STUBCOPY_FLAGS-$(CONFIG_ARM64)	+= --prefix-alloc-sections=.init \



# For RISC-V, we don't need anything special other than arm64. Keep all the

 symbols in .init section and make sure that no absolute symbols references

# doesn't exist.

STUBCOPY_FLAGS-$(CONFIG_RISCV)	+= --prefix-alloc-sections=.init \

STUBCOPY_RELOC-$(CONFIG_RISCV)	:= R_RISCV_HI20

	$(call if_changed,stubcopy)



 Strip debug sections and some other sections that may legally contain

 absolute relocations, so that we can inspect the remaining sections for

# such relocations. If none are found, regenerate the output object, but

# this time, use objcopy and leave all sections in place.

#

quiet_cmd_stubcopy = STUBCPY $@

	$(STRIP) --strip-debug -o $@ $<;				\

		echo "$@: absolute symbol references not allowed in the EFI stub" >&2; \

# SPDX-License-Identifier: GPL-2.0

#

obj-$(CONFIG_CS_DSP)		+= cs_dsp.o

 SPDX-License-Identifier: GPL-2.0-only

scmi-bus-y = bus.o

scmi-driver-y = driver.o notify.o

scmi-transport-$(CONFIG_ARM_SCMI_TRANSPORT_MAILBOX) += mailbox.o

scmi-transport-$(CONFIG_ARM_SCMI_TRANSPORT_VIRTIO) += virtio.o

scmi-protocols-y = base.o clock.o perf.o power.o reset.o sensors.o system.o voltage.o

obj-$(CONFIG_ARM_SCMI_PROTOCOL) += scmi-module.o

obj-$(CONFIG_ARM_SCMI_POWER_DOMAIN) += scmi_pm_domain.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_GOOGLE_COREBOOT_TABLE)        += coreboot_table.o

obj-$(CONFIG_GOOGLE_MEMCONSOLE)            += memconsole.o

obj-$(CONFIG_GOOGLE_MEMCONSOLE_COREBOOT)   += memconsole-coreboot.o

obj-$(CONFIG_GOOGLE_MEMCONSOLE_X86_LEGACY) += memconsole-x86-legacy.o

obj-$(CONFIG_GOOGLE_VPD)		+= vpd-sysfs.o

 SPDX-License-Identifier: GPL-2.0-only

ffa-transport-$(CONFIG_ARM_FFA_SMCCC) += smccc.o

obj-$(CONFIG_ARM_FFA_TRANSPORT) = ffa-module.o

 SPDX-License-Identifier: GPL-2.0-only

tegra-bpmp-$(CONFIG_ARCH_TEGRA_210_SOC)	+= bpmp-tegra210.o

tegra-bpmp-$(CONFIG_ARCH_TEGRA_194_SOC)	+= bpmp-tegra186.o

obj-$(CONFIG_TEGRA_BPMP)	+= tegra-bpmp.o

obj-$(CONFIG_TEGRA_IVC)		+= ivc.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_IMX_DSP)		+= imx-dsp.o

obj-$(CONFIG_IMX_SCU)		+= imx-scu.o misc.o imx-scu-irq.o rm.o imx-scu-soc.o

# SPDX-License-Identifier: GPL-2.0

#

obj-$(CONFIG_ARM_PSCI_FW)	+= psci.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the WatchDog device drivers.

#

 The WatchDog Timer Driver Core.



watchdog-objs	+= watchdog_core.o watchdog_dev.o



obj-$(CONFIG_WATCHDOG_PRETIMEOUT_GOV_NOOP)	+= pretimeout_noop.o

obj-$(CONFIG_WATCHDOG_PRETIMEOUT_GOV_PANIC)	+= pretimeout_panic.o

 Only one watchdog can succeed. We probe the ISA/PCI/USB based

 watchdog-cards first, then the architecture specific watchdog

 drivers and then the architecture independent "softdog" driver.

# This means that if your ISA/PCI/USB card isn't detected that

# you can fall back to an architecture specific driver and if

# that also fails then you can fall back to the software watchdog

# to give you some cover.

# ISA-based Watchdog Cards

obj-$(CONFIG_MIXCOMWD) += mixcomwd.o



 PCI-based Watchdog Cards



 USB-based Watchdog Cards



 ALPHA Architecture



 ARM Architecture

obj-$(CONFIG_ARM_SBSA_WATCHDOG) += sbsa_gwdt.o

obj-$(CONFIG_ARMADA_37XX_WATCHDOG) += armada_37xx_wdt.o

obj-$(CONFIG_ASM9260_WATCHDOG) += asm9260_wdt.o

obj-$(CONFIG_AT91RM9200_WATCHDOG) += at91rm9200_wdt.o

obj-$(CONFIG_21285_WATCHDOG) += wdt285.o

obj-$(CONFIG_K3_RTI_WATCHDOG) += rti_wdt.o

obj-$(CONFIG_ORION_WATCHDOG) += orion_wdt.o

obj-$(CONFIG_SUNXI_WATCHDOG) += sunxi_wdt.o

obj-$(CONFIG_RN5T618_WATCHDOG) += rn5t618_wdt.o

obj-$(CONFIG_IMX2_WDT) += imx2_wdt.o

obj-$(CONFIG_IMX7ULP_WDT) += imx7ulp_wdt.o

obj-$(CONFIG_BCM2835_WDT) += bcm2835_wdt.o

obj-$(CONFIG_QCOM_WDT) += qcom-wdt.o

obj-$(CONFIG_MEDIATEK_WATCHDOG) += mtk_wdt.o

obj-$(CONFIG_DIGICOLOR_WATCHDOG) += digicolor_wdt.o

obj-$(CONFIG_LPC18XX_WATCHDOG) += lpc18xx_wdt.o

obj-$(CONFIG_RENESAS_WDT) += renesas_wdt.o

obj-$(CONFIG_RENESAS_RZAWDT) += rza_wdt.o

obj-$(CONFIG_ASPEED_WATCHDOG) += aspeed_wdt.o



# X86 (i386 + ia64 + x86_64) Architecture

obj-$(CONFIG_ACQUIRE_WDT) += acquirewdt.o

obj-$(CONFIG_ADVANTECH_WDT) += advantechwdt.o

obj-$(CONFIG_ALIM7101_WDT) += alim7101_wdt.o

obj-$(CONFIG_F71808E_WDT) += f71808e_wdt.o

obj-$(CONFIG_SC520_WDT) += sc520_wdt.o

obj-$(CONFIG_SBC_FITPC2_WATCHDOG) += sbc_fitpc2_wdt.o

obj-$(CONFIG_EUROTECH_WDT) += eurotechwdt.o

obj-$(CONFIG_IB700_WDT) += ib700wdt.o

obj-$(CONFIG_I6300ESB_WDT) += i6300esb.o

obj-$(CONFIG_ITCO_WDT) += iTCO_wdt.o

obj-$(CONFIG_IT8712F_WDT) += it8712f_wdt.o

obj-$(CONFIG_HP_WATCHDOG) += hpwdt.o

obj-$(CONFIG_SCx200_WDT) += scx200_wdt.o

obj-$(CONFIG_NV_TCO) += nv_tco.o

obj-$(CONFIG_60XX_WDT) += sbc60xxwdt.o

obj-$(CONFIG_SBC7240_WDT) += sbc7240_wdt.o

obj-$(CONFIG_CPU5_WDT) += cpu5wdt.o

obj-$(CONFIG_SMSC_SCH311X_WDT) += sch311x_wdt.o

obj-$(CONFIG_TQMX86_WDT) += tqmx86_wdt.o

obj-$(CONFIG_W83627HF_WDT) += w83627hf_wdt.o

obj-$(CONFIG_W83977F_WDT) += w83977f_wdt.o

obj-$(CONFIG_INTEL_MEI_WDT) += mei_wdt.o

obj-$(CONFIG_NIC7018_WDT) += nic7018_wdt.o



# M68K Architecture

obj-$(CONFIG_M54xx_WATCHDOG) += m54xx_wdt.o

 MicroBlaze Architecture

obj-$(CONFIG_XILINX_WATCHDOG) += of_xilinx_wdt.o

 MIPS Architecture

obj-$(CONFIG_ATH79_WDT) += ath79_wdt.o

obj-$(CONFIG_BCM63XX_WDT) += bcm63xx_wdt.o

obj-$(CONFIG_INDYDOG) += indydog.o

obj-$(CONFIG_SIBYTE_WDOG) += sb_wdog.o

obj-$(CONFIG_OCTEON_WDT) += octeon-wdt.o

obj-$(CONFIG_LANTIQ_WDT) += lantiq_wdt.o

obj-$(CONFIG_RALINK_WDT) += rt2880_wdt.o

obj-$(CONFIG_MT7621_WDT) += mt7621_wdt.o

obj-$(CONFIG_PIC32_DMT) += pic32-dmt.o

 PARISC Architecture



 POWERPC Architecture

obj-$(CONFIG_GEF_WDT) += gef_wdt.o

obj-$(CONFIG_8xxx_WDT) += mpc8xxx_wdt.o

obj-$(CONFIG_BOOKE_WDT) += booke_wdt.o

obj-$(CONFIG_MEN_A21_WDT) += mena21_wdt.o

# PPC64 Architecture

obj-$(CONFIG_WATCHDOG_RTAS) += wdrtas.o

 S390 Architecture



# SUPERH (sh + sh64) Architecture

obj-$(CONFIG_SH_WDT) += shwdt.o

# SPARC Architecture

# SPARC64 Architecture

obj-$(CONFIG_WATCHDOG_RIO)		+= riowd.o

obj-$(CONFIG_WATCHDOG_SUN4V)		+= sun4v_wdt.o

 XTENSA Architecture



# Xen



 Architecture Independent

obj-$(CONFIG_BD957XMUF_WATCHDOG) += bd9576_wdt.o

obj-$(CONFIG_DA9052_WATCHDOG) += da9052_wdt.o

obj-$(CONFIG_DA9055_WATCHDOG) += da9055_wdt.o

obj-$(CONFIG_DA9062_WATCHDOG) += da9062_wdt.o

obj-$(CONFIG_DA9063_WATCHDOG) += da9063_wdt.o

obj-$(CONFIG_GPIO_WATCHDOG)	+= gpio_wdt.o

obj-$(CONFIG_SOFT_WATCHDOG) += softdog.o

obj-$(CONFIG_MENF21BMC_WATCHDOG) += menf21bmc_wdt.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the kernel pcmcia subsystem (c/o David Hinds)





pcmcia_core-$(CONFIG_CARDBUS)			+= cardbus.o





pcmcia_rsrc-y					+= rsrc_mgr.o

pcmcia_rsrc-$(CONFIG_PCCARD_NONSTATIC)		+= rsrc_nonstatic.o

pcmcia_rsrc-$(CONFIG_PCCARD_IODYN)		+= rsrc_iodyn.o



# socket drivers



obj-$(CONFIG_PD6729)				+= pd6729.o

obj-$(CONFIG_I82365)				+= i82365.o

obj-$(CONFIG_I82092)				+= i82092.o

obj-$(CONFIG_TCIC)				+= tcic.o

obj-$(CONFIG_PCMCIA_SOC_COMMON)			+= soc_common.o

obj-$(CONFIG_PCMCIA_SA1100)			+= sa1100_cs.o

obj-$(CONFIG_PCMCIA_BCM63XX)			+= bcm63xx_pcmcia.o

obj-$(CONFIG_ELECTRA_CF)			+= electra_cf.o

obj-$(CONFIG_PCMCIA_ALCHEMY_DEVBOARD)		+= db1xxx_ss.o

obj-$(CONFIG_PCMCIA_MAX1600)			+= max1600.o

sa1111_cs-$(CONFIG_ASSABET_NEPONSET)		+= sa1111_neponset.o

sa1111_cs-$(CONFIG_SA1100_BADGE4)		+= sa1111_badge4.o

sa1111_cs-$(CONFIG_SA1100_JORNADA720)		+= sa1111_jornada720.o

sa1111_cs-$(CONFIG_ARCH_LUBBOCK)		+= sa1111_lubbock.o

sa1100_cs-$(CONFIG_SA1100_COLLIE)		+= pxa2xx_sharpsl.o

sa1100_cs-$(CONFIG_SA1100_H3100)		+= sa1100_h3600.o

sa1100_cs-$(CONFIG_SA1100_H3600)		+= sa1100_h3600.o

sa1100_cs-$(CONFIG_SA1100_SIMPAD)		+= sa1100_simpad.o

pxa2xx_cm_x2xx_cs-y				+= pxa2xx_cm_x2xx.o pxa2xx_cm_x255.o pxa2xx_cm_x270.o

pxa2xx-obj-$(CONFIG_ARCOM_PCMCIA)		+= pxa2xx_viper.o

pxa2xx-obj-$(CONFIG_TRIZEPS_PCMCIA)		+= pxa2xx_trizeps4.o

pxa2xx-obj-$(CONFIG_MACH_PALMTC)		+= pxa2xx_palmtc.o

pxa2xx-obj-$(CONFIG_MACH_STARGATE2)		+= pxa2xx_stargate2.o

pxa2xx-obj-$(CONFIG_MACH_BALLOON3)		+= pxa2xx_balloon3.o

pxa2xx-obj-$(CONFIG_MACH_H4700)			+= pxa2xx_hx4700.o

obj-$(CONFIG_PCMCIA_PXA2XX)			+= pxa2xx_base.o $(pxa2xx-obj-y)

obj-$(CONFIG_PCMCIA_XXS1500)			+= xxs1500_ss.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for drivers that support virtualization

#

obj-$(CONFIG_FSL_HV_MANAGER)	+= fsl_hypervisor.o



obj-$(CONFIG_NITRO_ENCLAVES)	+= nitro_enclaves/

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

#

# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Enclave lifetime management support for Nitro Enclaves (NE).

obj-$(CONFIG_NITRO_ENCLAVES) += nitro_enclaves.o

nitro_enclaves-y := ne_pci_dev.o ne_misc_dev.o

# SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SIOX_BUS_GPIO) += siox-bus-gpio.o

# SPDX-License-Identifier: GPL-2.0

#

# Generic framework for controlling remote processors

#

remoteproc-y				:= remoteproc_core.o

remoteproc-y				+= remoteproc_virtio.o

obj-$(CONFIG_IMX_REMOTEPROC)		+= imx_rproc.o

obj-$(CONFIG_IMX_DSP_REMOTEPROC)	+= imx_dsp_rproc.o

obj-$(CONFIG_INGENIC_VPU_RPROC)		+= ingenic_rproc.o

obj-$(CONFIG_KEYSTONE_REMOTEPROC)	+= keystone_remoteproc.o

obj-$(CONFIG_PRU_REMOTEPROC)		+= pru_rproc.o

obj-$(CONFIG_QCOM_PIL_INFO)		+= qcom_pil_info.o

obj-$(CONFIG_QCOM_RPROC_COMMON)		+= qcom_common.o

qcom_wcnss_pil-y			+= qcom_wcnss.o

qcom_wcnss_pil-y			+= qcom_wcnss_iris.o

obj-$(CONFIG_ST_REMOTEPROC)		+= st_remoteproc.o

obj-$(CONFIG_ST_SLIM_REMOTEPROC)	+= st_slim_rproc.o

obj-$(CONFIG_STM32_RPROC)		+= stm32_rproc.o

obj-$(CONFIG_TI_K3_R5_REMOTEPROC)	+= ti_k3_r5_remoteproc.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the fpga framework and fpga manager drivers.

#

 Core FPGA Manager Framework

obj-$(CONFIG_FPGA)			+= fpga-mgr.o

# FPGA Manager Drivers

obj-$(CONFIG_FPGA_MGR_ALTERA_CVP)	+= altera-cvp.o

obj-$(CONFIG_FPGA_MGR_ALTERA_PS_SPI)	+= altera-ps-spi.o

obj-$(CONFIG_FPGA_MGR_ICE40_SPI)	+= ice40-spi.o

obj-$(CONFIG_FPGA_MGR_MACHXO2_SPI)	+= machxo2-spi.o

obj-$(CONFIG_FPGA_MGR_VERSAL_FPGA)      += versal-fpga.o



# FPGA Bridge Drivers

obj-$(CONFIG_FPGA_BRIDGE)		+= fpga-bridge.o

obj-$(CONFIG_ALTERA_FREEZE_BRIDGE)	+= altera-freeze-bridge.o



# High Level Interfaces

obj-$(CONFIG_FPGA_REGION)		+= fpga-region.o

obj-$(CONFIG_OF_FPGA_REGION)		+= of-fpga-region.o

# FPGA Device Feature List Support

obj-$(CONFIG_FPGA_DFL)			+= dfl.o

obj-$(CONFIG_FPGA_DFL_FME_MGR)		+= dfl-fme-mgr.o

obj-$(CONFIG_FPGA_DFL_FME_BRIDGE)	+= dfl-fme-br.o

obj-$(CONFIG_FPGA_DFL_FME_REGION)	+= dfl-fme-region.o



dfl-fme-objs := dfl-fme-main.o dfl-fme-pr.o dfl-fme-error.o

dfl-afu-objs := dfl-afu-main.o dfl-afu-region.o dfl-afu-dma-region.o

dfl-afu-objs += dfl-afu-error.o



# Drivers for FPGAs which implement DFL

# SPDX-License-Identifier: GPL-2.0

 Makefile for the kernel ISDN subsystem and device drivers.



 Object files in subdirectories



# SPDX-License-Identifier: GPL-2.0

# Makefile for the CAPI subsystem used by BT_CMTP

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the modular ISDN driver





obj-$(CONFIG_MISDN) += mISDN_core.o

obj-$(CONFIG_MISDN_L1OIP) += l1oip.o

 multi objects



mISDN_core-objs := core.o fsm.o socket.o clock.o hwchannel.o stack.o layer1.o layer2.o tei.o timerdev.o

l1oip-objs := l1oip_core.o l1oip_codec.o

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for the CAPI hardware drivers

# Object files in subdirectories

obj-$(CONFIG_MISDN)		+= mISDN/

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the modular ISDN hardware drivers







obj-$(CONFIG_MISDN_HFCMULTI) += hfcmulti.o

obj-$(CONFIG_MISDN_HFCUSB) += hfcsusb.o

obj-$(CONFIG_MISDN_SPEEDFAX) += speedfax.o

obj-$(CONFIG_MISDN_INFINEON) += mISDNinfineon.o

obj-$(CONFIG_MISDN_NETJET) += netjet.o

 chip modules



# SPDX-License-Identifier: GPL-2.0

tee-objs += tee_core.o

tee-objs += tee_shm.o

# SPDX-License-Identifier: GPL-2.0

optee-objs += core.o

optee-objs += supp.o



# for tracing framework to find optee_trace.h

# SPDX-License-Identifier: MIT

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the SuperH specific drivers.

#

ifneq ($(CONFIG_COMMON_CLK),y)

obj-$(CONFIG_SUPERHYWAY)		+= superhyway/

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the SuperHyway bus drivers.

#

obj-$(CONFIG_SUPERHYWAY)	+= superhyway.o



 SPDX-License-Identifier: GPL-2.0-only

# Makefile for Maple Bus

obj-$(CONFIG_MAPLE) := maple.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_SH_CLK_CPG)	+= cpg.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y 	:= access.o chip.o core.o handle.o irqdomain.o virq.o

obj-$(CONFIG_INTC_BALANCING)		+= balancing.o

obj-$(CONFIG_INTC_MAPPING_DEBUG)	+= virq-debugfs.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the bus drivers.

#

# Interconnect bus drivers for ARM platforms

obj-$(CONFIG_ARM_CCI)		+= arm-cci.o

obj-$(CONFIG_BRCMSTB_GISB_ARB)	+= brcmstb_gisb.o

obj-$(CONFIG_MOXTET)		+= moxtet.o

# DPAA2 fsl-mc bus

obj-$(CONFIG_FSL_MC_BUS)	+= fsl-mc/

obj-$(CONFIG_INTEL_IXP4XX_EB)	+= intel-ixp4xx-eb.o

obj-$(CONFIG_MIPS_CDMM)		+= mips_cdmm.o

obj-$(CONFIG_MVEBU_MBUS) 	+= mvebu-mbus.o

# Interconnect bus driver for OMAP SoCs.



obj-$(CONFIG_SUN50I_DE2_BUS)	+= sun50i-de2.o

obj-$(CONFIG_SUNXI_RSB)		+= sunxi-rsb.o

obj-$(CONFIG_TEGRA_ACONNECT)	+= tegra-aconnect.o

obj-$(CONFIG_TEGRA_GMI)		+= tegra-gmi.o

obj-$(CONFIG_TI_PWMSS)		+= ti-pwmss.o

obj-$(CONFIG_TI_SYSC)		+= ti-sysc.o

obj-$(CONFIG_TS_NBUS)		+= ts-nbus.o

obj-$(CONFIG_VEXPRESS_CONFIG)	+= vexpress-config.o

obj-$(CONFIG_DA8XX_MSTPRI)	+= da8xx-mstpri.o

 MHI

obj-$(CONFIG_MHI_BUS)		+= mhi/

# SPDX-License-Identifier: GPL-2.0

#

# Freescale Management Complex (MC) bus drivers

#

 Copyright (C) 2014 Freescale Semiconductor, Inc.





		      mc-sys.o \

		      mc-io.o \

		      dprc.o \

		      dprc-driver.o \

		      fsl-mc-msi.o \

		      dpmcp.o \

		      obj-api.o

# MC userspace support

# core layer



mhi_pci_generic-y += pci_generic.o

obj-$(CONFIG_MHI_BUS) += mhi.o

mhi-y := init.o main.o pm.o boot.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for regulator drivers.

#



obj-$(CONFIG_REGULATOR) += core.o dummy.o fixed-helper.o helpers.o devres.o irq_helpers.o

obj-$(CONFIG_REGULATOR_FIXED_VOLTAGE) += fixed.o

obj-$(CONFIG_REGULATOR_VIRTUAL_CONSUMER) += virtual.o



obj-$(CONFIG_REGULATOR_88PM800) += 88pm800-regulator.o

obj-$(CONFIG_REGULATOR_CROS_EC) += cros-ec-regulator.o

obj-$(CONFIG_REGULATOR_AAT2870) += aat2870-regulator.o

obj-$(CONFIG_REGULATOR_AB8500)	+= ab8500-ext.o ab8500.o

obj-$(CONFIG_REGULATOR_ACT8945A) += act8945a-regulator.o

obj-$(CONFIG_REGULATOR_ANATOP) += anatop-regulator.o

obj-$(CONFIG_REGULATOR_ARIZONA_MICSUPP) += arizona-micsupp.o

obj-$(CONFIG_REGULATOR_AS3711) += as3711-regulator.o

obj-$(CONFIG_REGULATOR_ATC260X) += atc260x-regulator.o

obj-$(CONFIG_REGULATOR_BCM590XX) += bcm590xx-regulator.o

obj-$(CONFIG_REGULATOR_BD71828) += bd71828-regulator.o

obj-$(CONFIG_REGULATOR_BD9571MWV) += bd9571mwv-regulator.o

obj-$(CONFIG_REGULATOR_BD957XMUF) += bd9576-regulator.o

obj-$(CONFIG_REGULATOR_DA9052)	+= da9052-regulator.o

obj-$(CONFIG_REGULATOR_DA9062)	+= da9062-regulator.o

obj-$(CONFIG_REGULATOR_DA9121) += da9121-regulator.o

obj-$(CONFIG_REGULATOR_DA9211) += da9211-regulator.o

obj-$(CONFIG_REGULATOR_DB8500_PRCMU) += db8500-prcmu.o

obj-$(CONFIG_REGULATOR_FAN53880) += fan53880.o

obj-$(CONFIG_REGULATOR_HI6421) += hi6421-regulator.o

obj-$(CONFIG_REGULATOR_HI6421V600) += hi6421v600-regulator.o

obj-$(CONFIG_REGULATOR_ISL6271A) += isl6271a-regulator.o

obj-$(CONFIG_REGULATOR_LM363X) += lm363x-regulator.o

obj-$(CONFIG_REGULATOR_LP3971) += lp3971.o

obj-$(CONFIG_REGULATOR_LP872X) += lp872x.o

obj-$(CONFIG_REGULATOR_LP87565) += lp87565-regulator.o

obj-$(CONFIG_REGULATOR_LP8788) += lp8788-buck.o

obj-$(CONFIG_REGULATOR_LP8755) += lp8755.o

obj-$(CONFIG_REGULATOR_LTC3676) += ltc3676.o

obj-$(CONFIG_REGULATOR_MAX1586) += max1586.o

obj-$(CONFIG_REGULATOR_MAX77650) += max77650-regulator.o

obj-$(CONFIG_REGULATOR_MAX8660) += max8660.o

obj-$(CONFIG_REGULATOR_MAX8907) += max8907-regulator.o

obj-$(CONFIG_REGULATOR_MAX8952) += max8952.o

obj-$(CONFIG_REGULATOR_MAX8997) += max8997-regulator.o

obj-$(CONFIG_REGULATOR_MAX77686) += max77686-regulator.o

obj-$(CONFIG_REGULATOR_MAX77802) += max77802-regulator.o

obj-$(CONFIG_REGULATOR_MC13783) += mc13783-regulator.o

obj-$(CONFIG_REGULATOR_MCP16502) += mcp16502.o

obj-$(CONFIG_REGULATOR_MP8859) += mp8859.o

obj-$(CONFIG_REGULATOR_MPQ7920) += mpq7920.o

obj-$(CONFIG_REGULATOR_MT6315) += mt6315-regulator.o

obj-$(CONFIG_REGULATOR_MT6358)	+= mt6358-regulator.o

obj-$(CONFIG_REGULATOR_MT6360) += mt6360-regulator.o

obj-$(CONFIG_REGULATOR_MT6397)	+= mt6397-regulator.o

obj-$(CONFIG_REGULATOR_QCOM_LABIBB) += qcom-labibb-regulator.o

obj-$(CONFIG_REGULATOR_QCOM_RPMH) += qcom-rpmh-regulator.o

obj-$(CONFIG_REGULATOR_QCOM_SPMI) += qcom_spmi-regulator.o

obj-$(CONFIG_REGULATOR_PALMAS) += palmas-regulator.o

obj-$(CONFIG_REGULATOR_PF8X00) += pf8x00-regulator.o

obj-$(CONFIG_REGULATOR_PV88060) += pv88060-regulator.o

obj-$(CONFIG_REGULATOR_PV88090) += pv88090-regulator.o

obj-$(CONFIG_REGULATOR_TPS51632) += tps51632-regulator.o

obj-$(CONFIG_REGULATOR_PCAP) += pcap-regulator.o

obj-$(CONFIG_REGULATOR_RK808)   += rk808-regulator.o

obj-$(CONFIG_REGULATOR_ROHM)	+= rohm-regulator.o

obj-$(CONFIG_REGULATOR_RT4831)	+= rt4831-regulator.o

obj-$(CONFIG_REGULATOR_RT6160)	+= rt6160-regulator.o

obj-$(CONFIG_REGULATOR_RTMV20)	+= rtmv20-regulator.o

obj-$(CONFIG_REGULATOR_RTQ6752)	+= rtq6752-regulator.o

obj-$(CONFIG_REGULATOR_S2MPS11) += s2mps11.o

obj-$(CONFIG_REGULATOR_SC2731) += sc2731-regulator.o

obj-$(CONFIG_REGULATOR_SLG51000) += slg51000-regulator.o

obj-$(CONFIG_REGULATOR_STM32_VREFBUF) += stm32-vrefbuf.o

obj-$(CONFIG_REGULATOR_STPMIC1) += stpmic1_regulator.o

obj-$(CONFIG_REGULATOR_SY7636A) += sy7636a-regulator.o

obj-$(CONFIG_REGULATOR_SY8824X) += sy8824x.o

obj-$(CONFIG_REGULATOR_TI_ABB) += ti-abb-regulator.o

obj-$(CONFIG_REGULATOR_TPS62360) += tps62360-regulator.o

obj-$(CONFIG_REGULATOR_TPS6507X) += tps6507x-regulator.o

obj-$(CONFIG_REGULATOR_TPS65090) += tps65090-regulator.o

obj-$(CONFIG_REGULATOR_TPS65218) += tps65218-regulator.o

obj-$(CONFIG_REGULATOR_TPS6586X) += tps6586x-regulator.o

obj-$(CONFIG_REGULATOR_TPS65912) += tps65912-regulator.o

obj-$(CONFIG_REGULATOR_TWL4030) += twl-regulator.o twl6030-regulator.o

obj-$(CONFIG_REGULATOR_VCTRL) += vctrl-regulator.o

obj-$(CONFIG_REGULATOR_VQMMC_IPQ4019) += vqmmc-ipq4019-regulator.o

obj-$(CONFIG_REGULATOR_WM831X) += wm831x-dcdc.o

obj-$(CONFIG_REGULATOR_WM831X) += wm831x-ldo.o

obj-$(CONFIG_REGULATOR_WM8400) += wm8400-regulator.o



 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the PPS core.

#

pps_core-y			:= pps.o kapi.o sysfs.o

obj-$(CONFIG_PPS)		:= pps_core.o



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for PPS clients.





obj-$(CONFIG_PPS_CLIENT_KTIMER)	+= pps-ktimer.o

obj-$(CONFIG_PPS_CLIENT_LDISC)	+= pps-ldisc.o

obj-$(CONFIG_PPS_CLIENT_PARPORT) += pps_parport.o

obj-$(CONFIG_PPS_CLIENT_GPIO)	+= pps-gpio.o

ccflags-$(CONFIG_PPS_DEBUG) := -DDEBUG

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for PPS generators.

#

obj-$(CONFIG_PPS_GENERATOR_PARPORT) += pps_gen_parport.o

ifeq ($(CONFIG_PPS_DEBUG),y)

EXTRA_CFLAGS += -DDEBUG

endif

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for sensor chip drivers.

#

					thermal_helpers.o

 netlink interface to manage the thermal framework



 interface to/from other layers providing sensors



# governors

thermal_sys-$(CONFIG_THERMAL_GOV_BANG_BANG)	+= gov_bang_bang.o

thermal_sys-$(CONFIG_THERMAL_GOV_USER_SPACE)	+= gov_user_space.o



# cpufreq cooling

thermal_sys-$(CONFIG_CPU_FREQ_THERMAL)	+= cpufreq_cooling.o

thermal_sys-$(CONFIG_CPU_IDLE_THERMAL)	+= cpuidle_cooling.o

 devfreq cooling

thermal_sys-$(CONFIG_DEVFREQ_THERMAL) += devfreq_cooling.o

obj-$(CONFIG_K3_THERMAL)	+= k3_bandgap.o

 platform thermal drivers

obj-$(CONFIG_SPEAR_THERMAL)	+= spear_thermal.o

obj-$(CONFIG_ROCKCHIP_THERMAL)	+= rockchip_thermal.o

obj-$(CONFIG_RCAR_GEN3_THERMAL)	+= rcar_gen3_thermal.o

obj-$(CONFIG_KIRKWOOD_THERMAL)  += kirkwood_thermal.o

obj-$(CONFIG_DOVE_THERMAL)  	+= dove_thermal.o

obj-$(CONFIG_ARMADA_THERMAL)	+= armada_thermal.o

obj-$(CONFIG_IMX_SC_THERMAL)	+= imx_sc_thermal.o

obj-$(CONFIG_MAX77620_THERMAL)	+= max77620_thermal.o

obj-$(CONFIG_DA9062_THERMAL)	+= da9062-thermal.o

obj-y				+= tegra/

obj-$(CONFIG_MTK_THERMAL)	+= mtk_thermal.o

obj-$(CONFIG_UNIPHIER_THERMAL)	+= uniphier_thermal.o

obj-$(CONFIG_SPRD_THERMAL)	+= sprd_thermal.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_QCOM_TSENS)	+= qcom_tsens.o

qcom_tsens-y			+= tsens.o tsens-v2.o tsens-v1.o tsens-v0_1.o \

				   tsens-8960.o

obj-$(CONFIG_QCOM_SPMI_TEMP_ALARM)	+= qcom-spmi-temp-alarm.o

 SPDX-License-Identifier: GPL-2.0-only



 Samsung thermal specific Makefile



obj-$(CONFIG_EXYNOS_THERMAL)			+= exynos_thermal.o

exynos_thermal-y				:= exynos_tmu.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_TI_SOC_THERMAL)		+= ti-soc-thermal.o

ti-soc-thermal-$(CONFIG_TI_THERMAL)	+= ti-thermal-common.o

ti-soc-thermal-$(CONFIG_OMAP3_THERMAL)	+= omap3-thermal-data.o

ti-soc-thermal-$(CONFIG_OMAP5_THERMAL)	+= omap5-thermal-data.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for various Intel thermal drivers.

obj-$(CONFIG_INTEL_POWERCLAMP)	+= intel_powerclamp.o

obj-$(CONFIG_INTEL_SOC_DTS_THERMAL)	+= intel_soc_dts_thermal.o

obj-$(CONFIG_INT340X_THERMAL)  += int340x_thermal/

obj-$(CONFIG_INTEL_PCH_THERMAL)	+= intel_pch_thermal.o

obj-$(CONFIG_INTEL_MENLOW)	+= intel_menlow.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_INT340X_THERMAL)	+= int3402_thermal.o

obj-$(CONFIG_INT340X_THERMAL)	+= int3401_thermal.o

obj-$(CONFIG_PROC_THERMAL_MMIO_RAPL) += processor_thermal_rapl.o

obj-$(CONFIG_INT340X_THERMAL)	+= processor_thermal_rfim.o

obj-$(CONFIG_INT340X_THERMAL)	+= processor_thermal_mbox.o

obj-$(CONFIG_ACPI_THERMAL_REL)	+= acpi_thermal_rel.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_TEGRA_SOCTHERM)		+= tegra-soctherm.o



tegra-soctherm-y				:= soctherm.o soctherm-fuse.o

tegra-soctherm-$(CONFIG_ARCH_TEGRA_132_SOC)	+= tegra132-soctherm.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



obj-y		+= host/

obj-y		+= target/

# SPDX-License-Identifier: GPL-2.0

ccflags-y				+= -I$(src)

obj-$(CONFIG_NVME_TARGET_LOOP)		+= nvme-loop.o

obj-$(CONFIG_NVME_TARGET_RDMA)		+= nvmet-rdma.o

obj-$(CONFIG_NVME_TARGET_FC)		+= nvmet-fc.o

obj-$(CONFIG_NVME_TARGET_FCLOOP)	+= nvme-fcloop.o

obj-$(CONFIG_NVME_TARGET_TCP)		+= nvmet-tcp.o

			discovery.o io-cmd-file.o io-cmd-bdev.o

nvmet-rdma-y	+= rdma.o

nvmet-tcp-y	+= tcp.o

# SPDX-License-Identifier: GPL-2.0

ccflags-y				+= -I$(src)

obj-$(CONFIG_NVME_CORE)			+= nvme-core.o

obj-$(CONFIG_BLK_DEV_NVME)		+= nvme.o

obj-$(CONFIG_NVME_FABRICS)		+= nvme-fabrics.o

obj-$(CONFIG_NVME_FC)			+= nvme-fc.o



nvme-core-$(CONFIG_BLK_DEV_ZONED)	+= zns.o

nvme-core-$(CONFIG_NVME_HWMON)		+= hwmon.o









# SPDX-License-Identifier: GPL-2.0

dmaengine debug flags



#core

obj-$(CONFIG_DMA_ENGINE) += dmaengine.o

obj-$(CONFIG_DMA_ACPI) += acpi-dma.o



dmatest

obj-$(CONFIG_DMATEST) += dmatest.o

#devices

obj-$(CONFIG_AMBA_PL08X) += amba-pl08x.o

obj-$(CONFIG_AT_HDMAC) += at_hdmac.o

obj-$(CONFIG_AXI_DMAC) += dma-axi-dmac.o

obj-$(CONFIG_DMA_BCM2835) += bcm2835-dma.o

obj-$(CONFIG_DMA_SA11X0) += sa11x0-dma.o

obj-$(CONFIG_DMA_SUN6I) += sun6i-dma.o

obj-$(CONFIG_DW_AXI_DMAC) += dw-axi-dmac/

obj-$(CONFIG_DW_DMAC_CORE) += dw/

obj-$(CONFIG_DW_EDMA) += dw-edma/

obj-$(CONFIG_FSL_EDMA) += fsl-edma.o fsl-edma-common.o

obj-$(CONFIG_FSL_QDMA) += fsl-qdma.o

obj-$(CONFIG_HISI_DMA) += hisi_dma.o

obj-$(CONFIG_HSU_DMA) += hsu/

obj-$(CONFIG_IMX_DMA) += imx-dma.o

obj-$(CONFIG_INTEL_IDMA64) += idma64.o

obj-y += idxd/

obj-$(CONFIG_LPC18XX_DMAMUX) += lpc18xx-dmamux.o

obj-$(CONFIG_MILBEAUT_XDMAC) += milbeaut-xdmac.o

obj-$(CONFIG_MMP_TDMA) += mmp_tdma.o

obj-$(CONFIG_MPC512X_DMA) += mpc512x_dma.o

obj-$(CONFIG_MV_XOR_V2) += mv_xor_v2.o

obj-$(CONFIG_NBPFAXI_DMA) += nbpfaxi.o

obj-$(CONFIG_PCH_DMA) += pch_dma.o

obj-$(CONFIG_PLX_DMA) += plx_dma.o

obj-$(CONFIG_PPC_BESTCOMM) += bestcomm/

obj-$(CONFIG_RENESAS_DMA) += sh/

obj-$(CONFIG_SF_PDMA) += sf-pdma/

obj-$(CONFIG_STE_DMA40) += ste_dma40.o ste_dma40_ll.o

obj-$(CONFIG_STM32_DMAMUX) += stm32-dmamux.o

obj-$(CONFIG_SPRD_DMA) += sprd-dma.o

obj-$(CONFIG_S3C24XX_DMAC) += s3c24xx-dma.o

obj-$(CONFIG_TXX9_DMAC) += txx9dmac.o

obj-$(CONFIG_TEGRA210_ADMA) += tegra210-adma.o

obj-$(CONFIG_UNIPHIER_MDMAC) += uniphier-mdmac.o

obj-$(CONFIG_XGENE_DMA) += xgene-dma.o

obj-$(CONFIG_INTEL_LDMA) += lgm/

obj-y += mediatek/

obj-y += ti/

# SPDX-License-Identifier: GPL-2.0

dw-edma-$(CONFIG_DEBUG_FS)	:= dw-edma-v0-debugfs.o

obj-$(CONFIG_DW_EDMA_PCIE)	+= dw-edma-pcie.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_QCOM_HIDMA_MGMT) += hdma_mgmt.o

hdma-objs        := hidma_ll.o hidma.o hidma_dbg.o

# SPDX-License-Identifier: GPL-2.0

# Makefile for the NXP DPAA2 qDMA controllers

obj-$(CONFIG_FSL_DPAA2_QDMA) += dpaa2-qdma.o dpdmai.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_XILINX_DMA) += xilinx_dma.o

obj-$(CONFIG_XILINX_ZYNQMP_DMA) += zynqmp_dma.o

obj-$(CONFIG_XILINX_ZYNQMP_DPDMA) += xilinx_dpdma.o

# SPDX-License-Identifier: GPL-2.0

#

 DMA Engine Helpers







#

# DMA Controllers

#

shdma-objs := $(shdma-y)



obj-$(CONFIG_RENESAS_USB_DMAC) += usb-dmac.o

obj-$(CONFIG_SF_PDMA)   += sf-pdma.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_INTEL_LDMA)	+= lgm-dma.o

# SPDX-License-Identifier: GPL-2.0

dw_dmac_core-y			:= core.o dw.o idma32.o

dw_dmac_core-$(CONFIG_ACPI)	+= acpi.o



dw_dmac_pci-y			:= pci.o

 SPDX-License-Identifier: GPL-2.0-only

hsu_dma-objs		:= hsu.o

obj-$(CONFIG_HSU_DMA_PCI)	+= hsu_dma_pci.o

hsu_dma_pci-objs	:= pci.o

 SPDX-License-Identifier: GPL-2.0-only



 AMD Passthru DMA driver







ptdma-objs := ptdma-dev.o ptdma-dmaengine.o ptdma-debugfs.o

ptdma-$(CONFIG_PCI) += ptdma-pci.o

ccflags-y += -DDEFAULT_SYMBOL_NAMESPACE=IDXD

obj-$(CONFIG_INTEL_IDXD) += idxd.o

idxd-y := init.o irq.o device.o sysfs.o submit.o dma.o cdev.o

idxd-$(CONFIG_INTEL_IDXD_PERFMON) += perfmon.o

obj-$(CONFIG_INTEL_IDXD_BUS) += idxd_bus.o

idxd_bus-y := bus.o

obj-$(CONFIG_INTEL_IDXD_COMPAT) += idxd_compat.o

idxd_compat-y := compat.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MTK_UART_APDMA) += mtk-uart-apdma.o

obj-$(CONFIG_MTK_CQDMA) += mtk-cqdma.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for BestComm & co





bestcomm-core-objs	:= bestcomm.o sram.o

bestcomm-fec-objs	:= fec.o bcom_fec_rx_task.o bcom_fec_tx_task.o



obj-$(CONFIG_PPC_BESTCOMM_GEN_BD)	+= bestcomm-gen-bd.o

 

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_INTEL_IOATDMA) += ioatdma.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_TI_CPPI41) += cppi41.o

obj-$(CONFIG_TI_EDMA) += edma.o

			    k3-psil-am654.o \

			    k3-psil-j7200.o \

			    k3-psil-am64.o

obj-$(CONFIG_TI_DMA_CROSSBAR) += dma-crossbar.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y	+= ipu_irq.o ipu_idmac.o

# SPDX-License-Identifier: GPL-2.0

bcma-$(CONFIG_BCMA_DRIVER_PCI_HOSTMODE)	+= driver_pci_host.o

bcma-$(CONFIG_BCMA_DRIVER_MIPS)		+= driver_mips.o

obj-$(CONFIG_BCMA)			+= bcma.o

ccflags-$(CONFIG_BCMA_DEBUG)		:= -DDEBUG

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_UIO_CIF)	+= uio_cif.o

obj-$(CONFIG_UIO_DMEM_GENIRQ)	+= uio_dmem_genirq.o

obj-$(CONFIG_UIO_SERCOS3)	+= uio_sercos3.o

obj-$(CONFIG_UIO_NETX)	+= uio_netx.o

obj-$(CONFIG_UIO_MF624)         += uio_mf624.o

obj-$(CONFIG_UIO_HV_GENERIC)	+= uio_hv_generic.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Zorro bus specific drivers.





obj-$(CONFIG_ZORRO)	+= zorro.o zorro-driver.o zorro-sysfs.o

obj-$(CONFIG_PROC_FS)	+= proc.o

obj-$(CONFIG_ZORRO_NAMES) +=  names.o



# Files generated that shall be removed upon make clean



 Dependencies on generated files need to be listed explicitly

$(obj)/names.o: $(obj)/devlist.h

 And that's how to generate them

quiet_cmd_devlist = DEVLIST $@

      cmd_devlist = ( cd $(obj); ./gen-devlist ) < $<

$(obj)/devlist.h: $(src)/zorro.ids $(obj)/gen-devlist



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_MCB) += mcb.o

mcb-y += mcb-parse.o

obj-$(CONFIG_MCB_PCI) += mcb-pci.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_ARM_CCN) += arm-ccn.o

obj-$(CONFIG_ARM_DSU_PMU) += arm_dsu_pmu.o

obj-$(CONFIG_ARM_PMU) += arm_pmu.o arm_pmu_platform.o

obj-$(CONFIG_HISI_PMU) += hisilicon/

obj-$(CONFIG_QCOM_L3_PMU) += qcom_l3_pmu.o

obj-$(CONFIG_XGENE_PMU) += xgene_pmu.o

obj-$(CONFIG_ARM_DMC620_PMU) += arm_dmc620_pmu.o

 SPDX-License-Identifier: GPL-2.0-only

			  hisi_uncore_hha_pmu.o hisi_uncore_ddrc_pmu.o hisi_uncore_sllc_pmu.o \

			  hisi_uncore_pa_pmu.o

# SPDX-License-Identifier: GPL-2.0

# LED Core

obj-$(CONFIG_LEDS_CLASS)		+= led-class.o

obj-$(CONFIG_LEDS_TRIGGERS)		+= led-triggers.o

 LED Platform Drivers (keep this sorted, M-| sort)

obj-$(CONFIG_LEDS_APU)			+= leds-apu.o

obj-$(CONFIG_LEDS_ARIEL)		+= leds-ariel.o

obj-$(CONFIG_LEDS_ASIC3)		+= leds-asic3.o

obj-$(CONFIG_LEDS_AW2013)		+= leds-aw2013.o

obj-$(CONFIG_LEDS_BCM6328)		+= leds-bcm6328.o

obj-$(CONFIG_LEDS_BCM6358)		+= leds-bcm6358.o

obj-$(CONFIG_LEDS_BD2802)		+= leds-bd2802.o

obj-$(CONFIG_LEDS_BLINKM)		+= leds-blinkm.o

obj-$(CONFIG_LEDS_CLEVO_MAIL)		+= leds-clevo-mail.o

obj-$(CONFIG_LEDS_COBALT_QUBE)		+= leds-cobalt-qube.o

obj-$(CONFIG_LEDS_COBALT_RAQ)		+= leds-cobalt-raq.o

obj-$(CONFIG_LEDS_CPCAP)		+= leds-cpcap.o

obj-$(CONFIG_LEDS_DA903X)		+= leds-da903x.o

obj-$(CONFIG_LEDS_DA9052)		+= leds-da9052.o

obj-$(CONFIG_LEDS_GPIO)			+= leds-gpio.o

obj-$(CONFIG_LEDS_IP30)			+= leds-ip30.o

obj-$(CONFIG_LEDS_IPAQ_MICRO)		+= leds-ipaq-micro.o

obj-$(CONFIG_LEDS_IS31FL319X)		+= leds-is31fl319x.o

obj-$(CONFIG_LEDS_IS31FL32XX)		+= leds-is31fl32xx.o

obj-$(CONFIG_LEDS_LM3530)		+= leds-lm3530.o

obj-$(CONFIG_LEDS_LM3532)		+= leds-lm3532.o

obj-$(CONFIG_LEDS_LM3533)		+= leds-lm3533.o

obj-$(CONFIG_LEDS_LM355x)		+= leds-lm355x.o

obj-$(CONFIG_LEDS_LM36274)		+= leds-lm36274.o

obj-$(CONFIG_LEDS_LM3642)		+= leds-lm3642.o

obj-$(CONFIG_LEDS_LM3692X)		+= leds-lm3692x.o

obj-$(CONFIG_LEDS_LM3697)		+= leds-lm3697.o

obj-$(CONFIG_LEDS_LOCOMO)		+= leds-locomo.o

obj-$(CONFIG_LEDS_LP3944)		+= leds-lp3944.o

obj-$(CONFIG_LEDS_LP3952)		+= leds-lp3952.o

obj-$(CONFIG_LEDS_LP50XX)		+= leds-lp50xx.o

obj-$(CONFIG_LEDS_LP5521)		+= leds-lp5521.o

obj-$(CONFIG_LEDS_LP5523)		+= leds-lp5523.o

obj-$(CONFIG_LEDS_LP5562)		+= leds-lp5562.o

obj-$(CONFIG_LEDS_NS2)			+= leds-ns2.o

obj-$(CONFIG_LEDS_OT200)		+= leds-ot200.o

obj-$(CONFIG_LEDS_PCA9532)		+= leds-pca9532.o

obj-$(CONFIG_LEDS_PCA955X)		+= leds-pca955x.o

obj-$(CONFIG_LEDS_PCA963X)		+= leds-pca963x.o

obj-$(CONFIG_LEDS_PM8058)		+= leds-pm8058.o

obj-$(CONFIG_LEDS_POWERNV)		+= leds-powernv.o

obj-$(CONFIG_LEDS_TI_LMU_COMMON)	+= leds-ti-lmu-common.o

obj-$(CONFIG_LEDS_TLC591XX)		+= leds-tlc591xx.o

obj-$(CONFIG_LEDS_TPS6105X)		+= leds-tps6105x.o

obj-$(CONFIG_LEDS_TURRIS_OMNIA)		+= leds-turris-omnia.o

obj-$(CONFIG_LEDS_WRAP)			+= leds-wrap.o

 LED SPI Drivers



# LED Userspace Drivers



# Flash and Torch LED Drivers

obj-$(CONFIG_LEDS_CLASS_FLASH)		+= flash/

# LED Triggers



# LED Blink

obj-y					+= blink/

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_LEDS_AAT1290)	+= leds-aat1290.o

obj-$(CONFIG_LEDS_KTD2692)	+= leds-ktd2692.o

obj-$(CONFIG_LEDS_MAX77693)	+= leds-max77693.o

obj-$(CONFIG_LEDS_RT8515)	+= leds-rt8515.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_LEDS_TRIGGER_TIMER)	+= ledtrig-timer.o

obj-$(CONFIG_LEDS_TRIGGER_ONESHOT)	+= ledtrig-oneshot.o

obj-$(CONFIG_LEDS_TRIGGER_MTD)		+= ledtrig-mtd.o

obj-$(CONFIG_LEDS_TRIGGER_HEARTBEAT)	+= ledtrig-heartbeat.o

obj-$(CONFIG_LEDS_TRIGGER_BACKLIGHT)	+= ledtrig-backlight.o

obj-$(CONFIG_LEDS_TRIGGER_CPU)		+= ledtrig-cpu.o

obj-$(CONFIG_LEDS_TRIGGER_ACTIVITY)	+= ledtrig-activity.o

obj-$(CONFIG_LEDS_TRIGGER_DEFAULT_ON)	+= ledtrig-default-on.o

obj-$(CONFIG_LEDS_TRIGGER_TRANSIENT)	+= ledtrig-transient.o

obj-$(CONFIG_LEDS_TRIGGER_CAMERA)	+= ledtrig-camera.o

obj-$(CONFIG_LEDS_TRIGGER_PANIC)	+= ledtrig-panic.o

obj-$(CONFIG_LEDS_TRIGGER_NETDEV)	+= ledtrig-netdev.o

obj-$(CONFIG_LEDS_TRIGGER_PATTERN)	+= ledtrig-pattern.o

obj-$(CONFIG_LEDS_TRIGGER_AUDIO)	+= ledtrig-audio.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_NTB) += ntb.o hw/ test/



ntb-y			:= core.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_NTB_PINGPONG) += ntb_pingpong.o

obj-$(CONFIG_NTB_PERF) += ntb_perf.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_NTB_SWITCHTEC) += mscc/

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

vhost_net-y := net.o

obj-$(CONFIG_VHOST_SCSI) += vhost_scsi.o



vhost_vsock-y := vsock.o

obj-$(CONFIG_VHOST_RING) += vringh.o

obj-$(CONFIG_VHOST_VDPA) += vhost_vdpa.o





vhost_iotlb-y := iotlb.o



 Makefile for the Linux kernel EDAC drivers.



# Copyright 02 Jul 2003, Linux Networx (http://lnxi.com)

# This file may be distributed under the terms of the

# GNU General Public License.

#







edac_core-y	+= edac_pci.o edac_pci_sysfs.o

endif

obj-$(CONFIG_EDAC_GHES)			+= ghes_edac.o

edac_mce_amd-y				:= mce_amd.o



obj-$(CONFIG_EDAC_AL_MC)		+= al_mc_edac.o

obj-$(CONFIG_EDAC_AMD76X)		+= amd76x_edac.o

obj-$(CONFIG_EDAC_CPC925)		+= cpc925_edac.o

obj-$(CONFIG_EDAC_I5000)		+= i5000_edac.o

obj-$(CONFIG_EDAC_I5100)		+= i5100_edac.o

obj-$(CONFIG_EDAC_I5400)		+= i5400_edac.o

obj-$(CONFIG_EDAC_I7300)		+= i7300_edac.o

obj-$(CONFIG_EDAC_I7CORE)		+= i7core_edac.o

obj-$(CONFIG_EDAC_PND2)			+= pnd2_edac.o

obj-$(CONFIG_EDAC_X38)			+= x38_edac.o

obj-$(CONFIG_EDAC_I82860)		+= i82860_edac.o

obj-$(CONFIG_EDAC_R82600)		+= r82600_edac.o

obj-$(CONFIG_EDAC_AMD64)		+= amd64_edac.o



mpc85xx_edac_mod-y			:= fsl_ddr_edac.o mpc85xx_edac.o

obj-$(CONFIG_EDAC_MPC85XX)		+= mpc85xx_edac_mod.o



obj-$(CONFIG_EDAC_SKX)			+= skx_edac.o

i10nm_edac-y				:= skx_common.o i10nm_base.o

obj-$(CONFIG_EDAC_I10NM)		+= i10nm_edac.o

obj-$(CONFIG_EDAC_CELL)			+= cell_edac.o

obj-$(CONFIG_EDAC_PPC4XX)		+= ppc4xx_edac.o

obj-$(CONFIG_EDAC_AMD8111)		+= amd8111_edac.o

obj-$(CONFIG_EDAC_AMD8131)		+= amd8131_edac.o



obj-$(CONFIG_EDAC_OCTEON_PC)		+= octeon_edac-pc.o

obj-$(CONFIG_EDAC_OCTEON_L2C)		+= octeon_edac-l2c.o

obj-$(CONFIG_EDAC_OCTEON_LMC)		+= octeon_edac-lmc.o

obj-$(CONFIG_EDAC_OCTEON_PCI)		+= octeon_edac-pci.o

obj-$(CONFIG_EDAC_THUNDERX)		+= thunderx_edac.o

obj-$(CONFIG_EDAC_TI)			+= ti_edac.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the HID driver

#

hid-$(CONFIG_DEBUG_FS)		+= hid-debug.o





hid-$(CONFIG_HIDRAW)		+= hidraw.o

hid-logitech-$(CONFIG_LOGITECH_FF)	+= hid-lgff.o

hid-logitech-$(CONFIG_LOGIRUMBLEPAD2_FF)	+= hid-lg2ff.o

hid-logitech-$(CONFIG_LOGIG940_FF)	+= hid-lg3ff.o

hid-logitech-$(CONFIG_LOGIWHEELS_FF)	+= hid-lg4ff.o

hid-wiimote-y		:= hid-wiimote-core.o hid-wiimote-modules.o

hid-wiimote-$(CONFIG_DEBUG_FS)	+= hid-wiimote-debug.o

obj-$(CONFIG_HID_A4TECH)	+= hid-a4tech.o

obj-$(CONFIG_HID_ACRUX)		+= hid-axff.o

obj-$(CONFIG_HID_APPLE)		+= hid-apple.o

obj-$(CONFIG_HID_CREATIVE_SB0540)	+= hid-creative-sb0540.o

obj-$(CONFIG_HID_ASUS)		+= hid-asus.o

obj-$(CONFIG_HID_BELKIN)	+= hid-belkin.o

obj-$(CONFIG_HID_BETOP_FF)	+= hid-betopff.o

obj-$(CONFIG_HID_BIGBEN_FF)	+= hid-bigbenff.o

obj-$(CONFIG_HID_CHICONY)	+= hid-chicony.o

obj-$(CONFIG_HID_CORSAIR)	+= hid-corsair.o

obj-$(CONFIG_HID_CP2112)	+= hid-cp2112.o

obj-$(CONFIG_HID_DRAGONRISE)	+= hid-dr.o

obj-$(CONFIG_HID_EMS_FF)	+= hid-emsff.o

obj-$(CONFIG_HID_ELAN)		+= hid-elan.o

obj-$(CONFIG_HID_GEMBIRD)	+= hid-gembird.o

obj-$(CONFIG_HID_GFRM)		+= hid-gfrm.o

obj-$(CONFIG_HID_GLORIOUS)  += hid-glorious.o

obj-$(CONFIG_HID_VIVALDI)	+= hid-vivaldi.o

obj-$(CONFIG_HID_GYRATION)	+= hid-gyration.o

obj-$(CONFIG_HID_HOLTEK)	+= hid-holtek-mouse.o

obj-$(CONFIG_HID_HYPERV_MOUSE)	+= hid-hyperv.o

obj-$(CONFIG_HID_ICADE)		+= hid-icade.o

obj-$(CONFIG_HID_ITE)		+= hid-ite.o

obj-$(CONFIG_HID_JABRA)		+= hid-jabra.o

obj-$(CONFIG_HID_KEYTOUCH)	+= hid-keytouch.o

obj-$(CONFIG_HID_KYE)		+= hid-kye.o

obj-$(CONFIG_HID_LENOVO)	+= hid-lenovo.o

obj-$(CONFIG_HID_LOGITECH)	+= hid-lg-g15.o

obj-$(CONFIG_HID_LOGITECH_HIDPP)	+= hid-logitech-hidpp.o

obj-$(CONFIG_HID_MAGICMOUSE)	+= hid-magicmouse.o

obj-$(CONFIG_HID_MCP2221)	+= hid-mcp2221.o

obj-$(CONFIG_HID_MICROSOFT)	+= hid-microsoft.o

obj-$(CONFIG_HID_MULTITOUCH)	+= hid-multitouch.o

obj-$(CONFIG_HID_NTI)			+= hid-nti.o

obj-$(CONFIG_HID_NTRIG)		+= hid-ntrig.o

obj-$(CONFIG_HID_ORTEK)		+= hid-ortek.o

obj-$(CONFIG_HID_PENMOUNT)	+= hid-penmount.o

obj-$(CONFIG_HID_PICOLCD)	+= hid-picolcd.o

hid-picolcd-y			+= hid-picolcd_core.o

hid-picolcd-$(CONFIG_HID_PICOLCD_BACKLIGHT)	+= hid-picolcd_backlight.o

hid-picolcd-$(CONFIG_HID_PICOLCD_LEDS)	+= hid-picolcd_leds.o

hid-picolcd-$(CONFIG_DEBUG_FS)		+= hid-picolcd_debugfs.o

obj-$(CONFIG_HID_PLANTRONICS)	+= hid-plantronics.o

obj-$(CONFIG_HID_PRIMAX)	+= hid-primax.o

obj-$(CONFIG_HID_RETRODE)	+= hid-retrode.o

	hid-roccat-arvo.o hid-roccat-isku.o hid-roccat-kone.o \

obj-$(CONFIG_HID_SAITEK)	+= hid-saitek.o

obj-$(CONFIG_HID_SEMITEK)	+= hid-semitek.o

obj-$(CONFIG_HID_SPEEDLINK)	+= hid-speedlink.o

obj-$(CONFIG_HID_STEAM)		+= hid-steam.o

obj-$(CONFIG_HID_SUNPLUS)	+= hid-sunplus.o

obj-$(CONFIG_HID_GREENASIA)	+= hid-gaff.o

obj-$(CONFIG_HID_THRUSTMASTER)	+= hid-tmff.o hid-thrustmaster.o

obj-$(CONFIG_HID_TIVO)		+= hid-tivo.o

obj-$(CONFIG_HID_TWINHAN)	+= hid-twinhan.o

				   hid-uclogic-rdesc.o \

				   hid-uclogic-params.o

obj-$(CONFIG_HID_UDRAW_PS3)	+= hid-udraw-ps3.o

obj-$(CONFIG_HID_LED)		+= hid-led.o

obj-$(CONFIG_HID_ZEROPLUS)	+= hid-zpff.o

obj-$(CONFIG_HID_VIEWSONIC)	+= hid-viewsonic.o

obj-$(CONFIG_HID_WALTOP)	+= hid-waltop.o

obj-$(CONFIG_HID_SENSOR_HUB)	+= hid-sensor-hub.o

obj-$(CONFIG_HID_SENSOR_CUSTOM_SENSOR)	+= hid-sensor-custom.o





obj-$(CONFIG_INTEL_ISH_HID)	+= intel-ish-hid/



obj-$(CONFIG_AMD_SFH_HID)       += amd-sfh-hid/

 SPDX-License-Identifier: GPL-2.0+



# Makefile - Surface System Aggregator Module (SSAM) HID transport driver.

#

obj-$(CONFIG_SURFACE_HID)	+= surface_hid.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile - Intel ISH HID drivers

 Copyright (c) 2014-2016, Intel Corporation.





obj-$(CONFIG_INTEL_ISH_HID) += intel-ishtp.o

intel-ishtp-objs += ishtp/client.o

intel-ishtp-objs += ishtp/bus.o

intel-ishtp-objs += ishtp/client-buffers.o

obj-$(CONFIG_INTEL_ISH_HID) += intel-ish-ipc.o

intel-ish-ipc-objs := ipc/ipc.o

intel-ish-ipc-objs += ipc/pci-ish.o

obj-$(CONFIG_INTEL_ISH_HID) += intel-ishtp-hid.o

intel-ishtp-hid-objs := ishtp-hid.o



obj-$(CONFIG_INTEL_ISH_FIRMWARE_DOWNLOADER) += intel-ishtp-loader.o



ccflags-y += -I $(srctree)/$(src)/ishtp

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the I2C input drivers

#



i2c-hid-$(CONFIG_DMI)				+= i2c-hid-dmi-quirks.o

obj-$(CONFIG_I2C_HID_ACPI)			+= i2c-hid-acpi.o

obj-$(CONFIG_I2C_HID_OF_GOODIX)			+= i2c-hid-of-goodix.o

 SPDX-License-Identifier: GPL-2.0-or-later



# Makefile - AMD SFH HID drivers

# Copyright (c) 2019-2020, Advanced Micro Devices, Inc.

#

#

amd_sfh-objs += amd_sfh_client.o



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the USB input drivers







obj-$(CONFIG_USB_KBD)		+= usbkbd.o



 SPDX-License-Identifier: GPL-2.0-only

 needed for trace events



obj-$(CONFIG_ANDROID_BINDERFS)		+= binderfs.o

obj-$(CONFIG_ANDROID_BINDER_IPC)	+= binder.o binder_alloc.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for misc devices that really don't fit anywhere else.





obj-$(CONFIG_IBM_ASM)		+= ibmasm/

obj-$(CONFIG_IBMVMC)		+= ibmvmc.o

obj-$(CONFIG_AD525X_DPOT_I2C)	+= ad525x_dpot-i2c.o

obj-$(CONFIG_ICS932S401)	+= ics932s401.o

obj-$(CONFIG_QCOM_COINCELL)	+= qcom-coincell.o

obj-$(CONFIG_QCOM_FASTRPC)	+= fastrpc.o

obj-$(CONFIG_SENSORS_BH1770)	+= bh1770glc.o

obj-$(CONFIG_KGDB_TESTS)	+= kgdbts.o

obj-$(CONFIG_SGI_GRU)		+= sgi-gru/

obj-$(CONFIG_HP_ILO)		+= hpilo.o

obj-$(CONFIG_SENSORS_TSL2550)	+= tsl2550.o

obj-$(CONFIG_DS1682)		+= ds1682.o

obj-y				+= cb710/

obj-$(CONFIG_VMWARE_BALLOON)	+= vmw_balloon.o

obj-$(CONFIG_PCH_PHUB)		+= pch_phub.o

obj-y				+= lis3lv02d/

obj-$(CONFIG_INTEL_MEI)		+= mei/

obj-$(CONFIG_LATTICE_ECP3_CONFIG)	+= lattice-ecp3-config.o

obj-$(CONFIG_SRAM)		+= sram.o

obj-$(CONFIG_SRAM_EXEC)		+= sram-exec.o

obj-$(CONFIG_ECHO)		+= echo/

obj-$(CONFIG_CXL_BASE)		+= cxl/

obj-$(CONFIG_PCI_ENDPOINT_TEST)	+= pci_endpoint_test.o

obj-$(CONFIG_BCM_VK)		+= bcm-vk/

obj-y				+= cardreader/

obj-$(CONFIG_UACCE)		+= uacce/

obj-$(CONFIG_HISI_HIKEY_USB)	+= hisi_hikey_usb.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for HabanaLabs AI accelerators driver

#



habanalabs-y += $(HL_COMMON_FILES)

include $(src)/goya/Makefile



include $(src)/gaudi/Makefile

habanalabs-y += $(HL_GAUDI_FILES)

 SPDX-License-Identifier: GPL-2.0-only



habanalabs-y += $(HL_COMMON_MMU_FILES)

include $(src)/common/pci/Makefile



HL_COMMON_FILES := common/habanalabs_drv.o common/device.o common/context.o \

		common/asid.o common/habanalabs_ioctl.o \

		common/command_submission.o common/firmware_if.o \

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

HL_GAUDI_FILES := gaudi/gaudi.o gaudi/gaudi_security.o \

 SPDX-License-Identifier: GPL-2.0-only

HL_GOYA_FILES :=  goya/goya.o goya/goya_security.o goya/goya_hwmgr.o \

# SPDX-License-Identifier: GPL-2.0



cxl-$(CONFIG_PPC_PSERIES)	+= flash.o guest.o of.o hcalls.o



 For tracepoints to include our trace.h from tracepoint infrastructure:

CFLAGS_trace.o := -I$(src)

 SPDX-License-Identifier: GPL-2.0+



# Pvpanic Makefile

#

 Copyright (C) 2021 Oracle.



obj-$(CONFIG_PVPANIC_MMIO)	+= pvpanic.o pvpanic-mmio.o

 SPDX-License-Identifier: GPL-2.0-only

ccflags-$(CONFIG_SGI_GRU_DEBUG)	:= -DDEBUG

obj-$(CONFIG_SGI_GRU) := gru.o



 SPDX-License-Identifier: GPL-2.0-only



# STMicroelectonics LIS3LV02D and similar accelerometers

#

obj-$(CONFIG_SENSORS_LIS3LV02D) += lis3lv02d.o

obj-$(CONFIG_SENSORS_LIS3_SPI)	+= lis3lv02d_spi.o

obj-$(CONFIG_SENSORS_LIS3_I2C)	+= lis3lv02d_i2c.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_EEPROM_AT24)	+= at24.o

obj-$(CONFIG_EEPROM_AT25)	+= at25.o

obj-$(CONFIG_EEPROM_LEGACY)	+= eeprom.o

obj-$(CONFIG_EEPROM_MAX6875)	+= max6875.o

obj-$(CONFIG_EEPROM_93XX46)	+= eeprom_93xx46.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_LKDTM)		+= lkdtm.o

lkdtm-$(CONFIG_LKDTM)		+= core.o

lkdtm-$(CONFIG_LKDTM)		+= heap.o

lkdtm-$(CONFIG_LKDTM)		+= perms.o

lkdtm-$(CONFIG_LKDTM)		+= rodata_objcopy.o

lkdtm-$(CONFIG_PPC_BOOK3S_64)	+= powerpc.o

CFLAGS_REMOVE_rodata.o		+= $(CC_FLAGS_LTO)

OBJCOPYFLAGS_rodata_objcopy.o	:= \

			--rename-section .noinstr.text=.rodata,alloc,readonly,load

$(obj)/rodata_objcopy.o: $(obj)/rodata.o FORCE

	$(call if_changed,objcopy)

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_C2PORT_DURAMAR_2150)	+= c2port-duramar2150.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Broadcom VK driver

#

obj-$(CONFIG_BCM_VK) += bcm_vk.o

	bcm_vk_sg.o

 SPDX-License-Identifier: GPL-2.0-only

ccflags-$(CONFIG_CB710_DEBUG)	:= -DDEBUG



cb710-y				:= core.o sgbuf2.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for GenWQE driver

#

	card_debugfs.o card_utils.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for SGI's XP devices.





obj-$(CONFIG_SGI_XP)		+= xp.o



xpc-y				:= xpc_main.o xpc_channel.o xpc_partition.o \

				   xpc_uv.o

obj-$(CONFIG_SGI_XP)		+= xpnet.o

# SPDX-License-Identifier: GPL-2.0

#

 Copyright (c) 2010-2019, Intel Corporation. All rights reserved.

 Makefile - Intel Management Engine Interface (Intel MEI) Linux driver



obj-$(CONFIG_INTEL_MEI) += mei.o

mei-objs += client.o

mei-objs += dma-ring.o

mei-objs += bus.o

mei-objs += bus-fixup.o

mei-$(CONFIG_DEBUG_FS) += debugfs.o

obj-$(CONFIG_INTEL_MEI_ME) += mei-me.o

mei-me-objs := pci-me.o



mei-txe-objs += hw-txe.o

mei-$(CONFIG_EVENT_TRACING) += mei-trace.o

CFLAGS_mei-trace.o = -I$(src)

# SPDX-License-Identifier: GPL-2.0

#

# Copyright (c) 2019, Intel Corporation. All rights reserved.

#

# Makefile - HDCP client driver for Intel MEI Bus Driver.

obj-$(CONFIG_INTEL_MEI_HDCP) += mei_hdcp.o

# SPDX-License-Identifier: GPL-2.0

#

# Copyright (c) 2020, Intel Corporation. All rights reserved.

#

 Makefile - PXP client driver for Intel MEI Bus Driver.



 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ECHO) += echo.o

# SPDX-License-Identifier: GPL-2.0



ibmasm-y :=	module.o      \

		ibmasmfs.o    \

		event.o       \

		command.o     \

		remote.o      \

		heartbeat.o   \

		r_heartbeat.o \

		dot_command.o \





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for TI's shared transport line discipline

 and its protocol drivers (BT, FM, GPS)



 SPDX-License-Identifier: GPL-2.0+





 For tracepoints to include our trace.h from tracepoint infrastructure:

CFLAGS_trace.o := -I$(src)

# ccflags-y += -DDEBUG

 SPDX-License-Identifier: GPL-2.0-or-later

obj-$(CONFIG_UACCE) += uacce.o

 SPDX-License-Identifier: GPL-2.0-only

vmw_vmci-y += vmci_context.o vmci_datagram.o vmci_doorbell.o \

# SPDX-License-Identifier: GPL-2.0

 Makefile for staging directory



obj-$(CONFIG_PRISM2_USB)	+= wlan-ng/

obj-$(CONFIG_RTL8192U)		+= rtl8192u/

obj-$(CONFIG_RTL8723BS)		+= rtl8723bs/

obj-$(CONFIG_R8712U)		+= rtl8712/

obj-$(CONFIG_RTS5208)		+= rts5208/

obj-$(CONFIG_NETLOGIC_XLR_NET)	+= netlogic/

obj-$(CONFIG_VT6655)		+= vt6655/

obj-$(CONFIG_VME_BUS)		+= vme/

obj-$(CONFIG_USB_EMXX)		+= emxx_udc/

obj-$(CONFIG_ANDROID)		+= android/

obj-$(CONFIG_STAGING_BOARD)	+= board/

obj-$(CONFIG_LTE_GDM724X)	+= gdm724x/

obj-$(CONFIG_MOST)		+= most/

obj-$(CONFIG_GREYBUS)		+= greybus/

obj-$(CONFIG_BCM2835_VCHIQ)	+= vc04_services/

obj-$(CONFIG_DMA_RALINK)	+= ralink-gdma/

obj-$(CONFIG_SOC_MT7621)	+= mt7621-dts/

obj-$(CONFIG_XIL_AXIS_FIFO)	+= axis-fifo/

obj-$(CONFIG_FIELDBUS_DEV)     += fieldbus/

obj-$(CONFIG_WFX)		+= wfx/

# SPDX-License-Identifier: GPL-2.0

	dot11d.o		\

	rtllib_module.o		\

	rtllib_rx.o		\

	rtllib_tx.o		\

	rtllib_wx.o		\

	rtllib_softmac.o	\





obj-$(CONFIG_RTLLIB_CRYPTO_CCMP) += rtllib_crypt_ccmp.o

obj-$(CONFIG_RTLLIB_CRYPTO_TKIP) += rtllib_crypt_tkip.o

obj-$(CONFIG_RTLLIB_CRYPTO_WEP) += rtllib_crypt_wep.o

# SPDX-License-Identifier: GPL-2.0

r8192e_pci-objs :=		\

	r8192E_phy.o		\

	r8192E_hwimg.o		\

	r8190P_rtl8256.o	\

	rtl_cam.o		\

	rtl_dm.o		\

	rtl_pm.o		\

	rtl_wx.o		\

obj-$(CONFIG_RTL8192E) += r8192e_pci.o

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Qlogic 10GbE PCI Express ethernet driver







# SPDX-License-Identifier: GPL-2.0

olpc-dcon-objs += olpc_dcon.o olpc_dcon_xo_1.o olpc_dcon_xo_1_5.o

obj-$(CONFIG_FB_OLPC_DCON)	+= olpc-dcon.o



# SPDX-License-Identifier: GPL-2.0



prism2_usb-y := prism2usb.o \

		p80211netdev.o

# SPDX-License-Identifier: GPL-2.0

gs_fpga-y	+= gs_fpgaboot.o io.o

# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0

ccflags-y += -I$(src)			# needed for trace events

obj-$(CONFIG_ASHMEM)			+= ashmem.o

# SPDX-License-Identifier: GPL-2.0

 Necessary for CREATE_TRACE_POINTS



	queue.o \

	data_rx.o \

	scan.o \

	key.o \

	main.o \

	debug.o

wfx-$(subst m,y,$(CONFIG_MMC)) += bus_sdio.o

obj-$(CONFIG_WFX) += wfx.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_MTK_HSDMA) += hsdma-mt7621.o

# SPDX-License-Identifier: GPL-2.0

	channel.o \

	dpc.o \

	key.o \

	rf.o

obj-$(CONFIG_VT6655) +=	vt6655_stage.o

# SPDX-License-Identifier: GPL-2.0



ks7010-y	:= ks_hostif.o ks_wlan_net.o ks7010_sdio.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_MOST_NET)	+= net/

obj-$(CONFIG_MOST_DIM2)	+= dim2/

# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0

gdmulte-y += gdm_lte.o netlink_k.o

gdmulte-y += gdm_usb.o gdm_endian.o



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_INTEL_ATOMISP)     += atomisp/

obj-$(CONFIG_VIDEO_IMX_MEDIA)	+= imx/

obj-$(CONFIG_VIDEO_MESON_VDEC)	+= meson/vdec/

obj-$(CONFIG_VIDEO_ROCKCHIP_VDEC)	+= rkvdec/

obj-$(CONFIG_VIDEO_SUNXI)	+= sunxi/

obj-$(CONFIG_VIDEO_TEGRA)	+= tegra-video/

obj-$(CONFIG_VIDEO_IPU3_IMGU)	+= ipu3/

obj-$(CONFIG_VIDEO_ZORAN)	+= zoran/

obj-$(CONFIG_DVB_AV7110)	+= av7110/

# SPDX-License-Identifier: GPL-2.0

tegra-vde-y := vde.o iommu.o dmabuf-cache.o

# SPDX-License-Identifier: GPL-2.0

# Makefile for Amlogic meson video decoder driver

meson-vdec-objs = esparser.o vdec.o vdec_helpers.o vdec_platform.o

meson-vdec-objs += vdec_1.o vdec_hevc.o



# SPDX-License-Identifier: GPL-2.0

			zoran_driver.o zoran_card.o

obj-$(CONFIG_VIDEO_ZORAN_ZR36060) += zr36060.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_VIDEO_HANTRO) += hantro-vpu.o

		hantro_drv.o \

		hantro_v4l2.o \

		hantro_postproc.o \

		hantro_g1_h264_dec.o \

		hantro_g1_mpeg2_dec.o \

		rockchip_vpu2_hw_mpeg2_dec.o \

		hantro_mpeg2.o \



		imx8m_vpu_hw.o

hantro-vpu-$(CONFIG_VIDEO_HANTRO_SAMA5D4) += \

		sama5d4_vdec_hw.o

# SPDX-License-Identifier: GPL-2.0

tegra-video-objs := \

		video.o \



obj-$(CONFIG_VIDEO_TEGRA) += tegra-video.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for camera drivers.



obj-$(CONFIG_VIDEO_ATOMISP) += atomisp.o



 While on staging, keep debug enabled

DEFINES += -DDEBUG



 SPDX-License-Identifier: GPL-2.0

	pci/atomisp_acc.o \

	pci/atomisp_drvfs.o \

	pci/atomisp_file.o \

	pci/atomisp_fops.o \

	pci/atomisp_tpg.o \

	pci/atomisp_v4l2.o \

	pci/sh_css_metadata.o \

	pci/sh_css_metrics.o \

	pci/sh_css_params.o \

	pci/sh_css_sp.o \

	pci/sh_css_stream_format.o \

	pci/camera/pipe/src/pipe_binarydesc.o \

	pci/camera/pipe/src/pipe_stagedesc.o \

	pci/hmm/hmm.o \

	pci/isp/kernels/aa/aa_2/ia_css_aa2.host.o \

	pci/isp/kernels/bnlm/ia_css_bnlm.host.o \

	pci/isp/kernels/bnr/bnr2_2/ia_css_bnr2_2.host.o \

	pci/isp/kernels/copy_output/copy_output_1.0/ia_css_copy_output.host.o \

	pci/isp/kernels/crop/crop_1.0/ia_css_crop.host.o \

	pci/isp/kernels/ctc/ctc_1.0/ia_css_ctc.host.o \

	pci/isp/kernels/ctc/ctc1_5/ia_css_ctc1_5.host.o \

	pci/isp/kernels/de/de_2/ia_css_de2.host.o \

	pci/isp/kernels/dvs/dvs_1.0/ia_css_dvs.host.o \

	pci/isp/kernels/fc/fc_1.0/ia_css_formats.host.o \

	pci/isp/kernels/gc/gc_2/ia_css_gc2.host.o \

	pci/isp/kernels/hdr/ia_css_hdr.host.o \

	pci/isp/kernels/ipu2_io_ls/bayer_io_ls/ia_css_bayer_io.host.o \

	pci/isp/kernels/raw_aa_binning/raw_aa_binning_1.0/ia_css_raa.host.o \

	pci/isp/kernels/ref/ref_1.0/ia_css_ref.host.o \

	pci/isp/kernels/sdis/sdis_2/ia_css_sdis2.host.o \

	pci/isp/kernels/tnr/tnr_1.0/ia_css_tnr.host.o \

	pci/isp/kernels/vf/vf_1.0/ia_css_vf.host.o \

	pci/isp/kernels/wb/wb_1.0/ia_css_wb.host.o \

	pci/isp/kernels/xnr/xnr_1.0/ia_css_xnr_table.host.o \

	pci/isp/kernels/xnr/xnr_3.0/ia_css_xnr3.host.o \

	pci/mmu/isp_mmu.o \

	pci/mmu/sh_mmu_mrfld.o \

	pci/runtime/bufq/src/bufq.o \

	pci/runtime/debug/src/ia_css_debug.o \

	pci/runtime/event/src/event.o \

	pci/runtime/ifmtr/src/ifmtr.o \

	pci/runtime/isp_param/src/isp_param.o \

	pci/runtime/isys/src/csi_rx_rmgr.o \

	pci/runtime/isys/src/isys_dma_rmgr.o \

	pci/runtime/isys/src/isys_init.o \

	pci/runtime/isys/src/isys_stream2mmio_rmgr.o \

	pci/runtime/isys/src/virtual_isys.o \

	pci/runtime/queue/src/queue.o \

	pci/runtime/spctrl/src/spctrl.o \

	pci/hive_isp_css_common/host/event_fifo.o \

	pci/hive_isp_css_common/host/gp_timer.o \

	pci/hive_isp_css_common/host/input_system.o \

	pci/hive_isp_css_common/host/irq.o \

	pci/hive_isp_css_common/host/isp.o \

	pci/hive_isp_css_common/host/mmu.o \

	pci/hive_isp_css_common/host/timed_ctrl.o \



obj-byt = \



 These will be needed when clean merge CHT support nicely into the driver

# Keep them here handy for when we get to that point

#

	pci/css_2401_system/hive/ia_css_isp_configs.o \

	pci/css_2401_system/hive/ia_css_isp_params.o \

	pci/css_2401_system/hive/ia_css_isp_states.o \

	pci/css_2401_system/host/isys_dma.o \

	pci/css_2401_system/host/isys_stream2mmio.o

	-I$(atomisp)/ \

	-I$(atomisp)/include/hmm/ \

	-I$(atomisp)/pci/ \

	-I$(atomisp)/pci/base/circbuf/interface/ \

	-I$(atomisp)/pci/camera/pipe/interface/ \

	-I$(atomisp)/pci/hive_isp_css_common/ \

	-I$(atomisp)/pci/hive_isp_css_common/host/ \

	-I$(atomisp)/pci/hive_isp_css_include/ \

	-I$(atomisp)/pci/hive_isp_css_include/device_access/ \

	-I$(atomisp)/pci/hive_isp_css_shared/ \

	-I$(atomisp)/pci/hive_isp_css_shared/host/ \

	-I$(atomisp)/pci/isp/kernels/aa/aa_2/ \

	-I$(atomisp)/pci/isp/kernels/anr/anr_2/ \

	-I$(atomisp)/pci/isp/kernels/bnr/ \

	-I$(atomisp)/pci/isp/kernels/cnr/ \

	-I$(atomisp)/pci/isp/kernels/cnr/cnr_2/ \

	-I$(atomisp)/pci/isp/kernels/conversion/ \

	-I$(atomisp)/pci/isp/kernels/copy_output/ \

	-I$(atomisp)/pci/isp/kernels/crop/crop_1.0/ \

	-I$(atomisp)/pci/isp/kernels/csc/csc_1.0/ \

	-I$(atomisp)/pci/isp/kernels/ctc/ctc_1.0/ \

	-I$(atomisp)/pci/isp/kernels/ctc/ctc1_5/ \

	-I$(atomisp)/pci/isp/kernels/ctc/ctc2/ \

	-I$(atomisp)/pci/isp/kernels/de/ \

	-I$(atomisp)/pci/isp/kernels/de/de_2/ \

	-I$(atomisp)/pci/isp/kernels/dp/ \

	-I$(atomisp)/pci/isp/kernels/dpc2/ \

	-I$(atomisp)/pci/isp/kernels/dvs/ \

	-I$(atomisp)/pci/isp/kernels/fc/fc_1.0/ \

	-I$(atomisp)/pci/isp/kernels/fixedbds/ \

	-I$(atomisp)/pci/isp/kernels/fpn/ \

	-I$(atomisp)/pci/isp/kernels/gc/gc_1.0/ \

	-I$(atomisp)/pci/isp/kernels/hdr/ \

	-I$(atomisp)/pci/isp/kernels/ipu2_io_ls/ \

	-I$(atomisp)/pci/isp/kernels/ipu2_io_ls/ \

	-I$(atomisp)/pci/isp/kernels/ipu2_io_ls/bayer_io_ls/ \

	-I$(atomisp)/pci/isp/kernels/ipu2_io_ls/bayer_io_ls/ \

	-I$(atomisp)/pci/isp/kernels/ipu2_io_ls/common/ \

	-I$(atomisp)/pci/isp/kernels/ipu2_io_ls/yuv444_io_ls/ \

	-I$(atomisp)/pci/isp/kernels/iterator/ \

	-I$(atomisp)/pci/isp/kernels/macc/macc_1.0/ \

	-I$(atomisp)/pci/isp/kernels/macc/macc1_5/ \

	-I$(atomisp)/pci/isp/kernels/norm/ \

	-I$(atomisp)/pci/isp/kernels/ob/ob_1.0/ \

	-I$(atomisp)/pci/isp/kernels/ob/ob2/ \

	-I$(atomisp)/pci/isp/kernels/output/ \

	-I$(atomisp)/pci/isp/kernels/qplane/qplane_2/ \

	-I$(atomisp)/pci/isp/kernels/raw_aa_binning/raw_aa_binning_1.0/ \

	-I$(atomisp)/pci/isp/kernels/ref/ \

	-I$(atomisp)/pci/isp/kernels/s3a/ \

	-I$(atomisp)/pci/isp/kernels/sc/sc_1.0/ \

	-I$(atomisp)/pci/isp/kernels/sdis/ \

	-I$(atomisp)/pci/isp/kernels/sdis/sdis_1.0/ \

	-I$(atomisp)/pci/isp/kernels/tdf/ \

	-I$(atomisp)/pci/isp/kernels/tnr/ \

	-I$(atomisp)/pci/isp/kernels/uds/ \

	-I$(atomisp)/pci/isp/kernels/vf/vf_1.0/ \

	-I$(atomisp)/pci/isp/kernels/wb/ \

	-I$(atomisp)/pci/isp/kernels/xnr/ \

	-I$(atomisp)/pci/isp/kernels/xnr/xnr_3.0/ \

	-I$(atomisp)/pci/isp/kernels/ynr/ynr_1.0/ \

	-I$(atomisp)/pci/isp/modes/interface/ \

	-I$(atomisp)/pci/runtime/binary/interface/ \

	-I$(atomisp)/pci/runtime/bufq/interface/ \

	-I$(atomisp)/pci/runtime/event/interface/ \

	-I$(atomisp)/pci/runtime/eventq/interface/ \

	-I$(atomisp)/pci/runtime/ifmtr/interface/ \

	-I$(atomisp)/pci/runtime/isp_param/interface/ \

	-I$(atomisp)/pci/runtime/isys/interface/ \

	-I$(atomisp)/pci/runtime/isys/src/ \

	-I$(atomisp)/pci/runtime/pipeline/interface/ \

	-I$(atomisp)/pci/runtime/queue/src/ \

	-I$(atomisp)/pci/runtime/rmgr/interface/ \

	-I$(atomisp)/pci/runtime/spctrl/interface/ \

	-I$(atomisp)/pci/runtime/tagger/interface/ \

	-I$(atomisp)/pci/css_2400_system/hive/ \

	-I$(atomisp)/pci/css_2401_system/hrt/

DEFINES := -DHRT_HW -DHRT_ISP_CSS_CUSTOM_HOST -DHRT_USE_VIR_ADDRS -D__HOST__

#DEFINES += -DUSE_DYNAMIC_BIN

DEFINES += -DISP_POWER_GATING

#DEFINES += -DUSE_INTERRUPTS

#DEFINES += -DUSE_SSSE3

#DEFINES += -DPUNIT_CAMERA_BUSY

DEFINES += -DUSE_KMEM_CACHE



	pci/runtime/isys/src/ibuf_ctrl_rmgr.o

DEFINES += -DISP2401 -DISP2401_NEW_INPUT_SYSTEM -DSYSTEM_hive_isp_css_2401_system

atomisp-objs += $(obj-byt)



ccflags-y += $(INCLUDES) $(DEFINES) -fno-common

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for sensor drivers

#

obj-$(CONFIG_VIDEO_ATOMISP_GC2235)     += atomisp-gc2235.o

obj-$(CONFIG_VIDEO_ATOMISP_OV2680)     += atomisp-ov2680.o





 Makefile for flash drivers





# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the IPU3 ImgU drivers





ipu3-imgu-objs += \



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_VIDEO_SUNXI_CEDRUS)	+= cedrus/

# SPDX-License-Identifier: GPL-2.0



sunxi-cedrus-y = cedrus.o cedrus_video.o cedrus_hw.o cedrus_dec.o \

		 cedrus_mpeg2.o cedrus_h264.o cedrus_h265.o \

		 cedrus_vp8.o

# SPDX-License-Identifier: GPL-2.0

imx-media-common-objs := imx-media-capture.o imx-media-dev-common.o \

	imx-media-of.o imx-media-utils.o

imx6-media-objs := imx-media-dev.o imx-media-internal-sd.o \





obj-$(CONFIG_VIDEO_IMX_MEDIA) += imx-media-common.o



obj-$(CONFIG_VIDEO_IMX7_CSI) += imx7-mipi-csis.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for OMAP4 ISS driver

#

	iss.o iss_csi2.o iss_csiphy.o iss_ipipeif.o iss_ipipe.o iss_resizer.o iss_video.o

obj-$(CONFIG_VIDEO_OMAP4) += omap4-iss.o

obj-$(CONFIG_VIDEO_ROCKCHIP_VDEC) += rockchip-vdec.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the AV7110 DVB device driver

#







obj-$(CONFIG_DVB_AV7110) += dvb-ttpci.o

obj-$(CONFIG_DVB_SP8870) += sp8870.o

ccflags-y += -I $(srctree)/drivers/media/dvb-frontends

ccflags-y += -I $(srctree)/drivers/media/tuners

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Unisys SPAR drivers



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Unisys channel

#



visorhba-y := visorhba_main.o

ccflags-y += -I $(srctree)/$(src)/../include

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Unisys channel

#



visornic-y := visornic_main.o

ccflags-y += -I $(srctree)/$(src)/../include

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Unisys visorinput





obj-$(CONFIG_UNISYS_VISORINPUT)	+= visorinput.o

# SPDX-License-Identifier: GPL-2.0



vchiq-objs := \

   interface/vchiq_arm/vchiq_arm.o \

   interface/vchiq_arm/vchiq_connected.o \





ccflags-y += -I $(srctree)/$(src)/include

# SPDX-License-Identifier: GPL-2.0

bcm2835-v4l2-$(CONFIG_VIDEO_BCM2835) := \

	bcm2835-camera.o \

	controls.o



	-I $(srctree)/$(src)/.. \

# SPDX-License-Identifier: GPL-2.0

bcm2835-mmal-vchiq-objs := mmal-vchiq.o

obj-$(CONFIG_BCM2835_VCHIQ_MMAL) += bcm2835-mmal-vchiq.o

ccflags-y += \

	-I$(srctree)/$(src)/.. \

	-I$(srctree)/$(src)/../include \

	-D__VCCOREVER__=0x04000000

# SPDX-License-Identifier: GPL-2.0

snd-bcm2835-objs		:= bcm2835.o bcm2835-ctl.o bcm2835-pcm.o bcm2835-vchiq.o

# SPDX-License-Identifier: GPL-2.0

		rtl871x_cmd.o		\

		rtl871x_security.o	\

		rtl8712_efuse.o		\

		hal_init.o		\

		usb_ops.o		\

		rtl8712_led.o		\

		rtl871x_mlme.o		\

		rtl871x_mp_ioctl.o	\

		rtl871x_mp.o		\

		mlme_linux.o		\

		recv_linux.o		\

		xmit_linux.o		\

		usb_intf.o		\

		os_intfs.o		\

		rtl871x_pwrctrl.o	\

		rtl8712_recv.o		\

		rtl871x_recv.o		\

		rtl871x_sta_mgt.o	\

		rtl871x_xmit.o		\





# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the VME device drivers.





obj-$(CONFIG_VME_USER)		+= vme_user.o

# SPDX-License-Identifier: GPL-2.0

vt6656_stage-y +=	main_usb.o \

			mac.o   \

			baseband.o \

			power.o \

			usbpipe.o \



# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_DTB_GNUBEE1)      += gbpc1.dtb

dtb-$(CONFIG_DTB_GNUBEE2)      += gbpc2.dtb

obj-y				+= $(patsubst %.dtb, %.dtb.o, $(dtb-y))

# SPDX-License-Identifier: GPL-2.0



pi433-objs := pi433_if.o rf69.o

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_DMA_RALINK) += ralink-gdma.o

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

r8723bs-y = \

		core/rtw_ap.o \

		core/rtw_btcoex.o \

	 	core/rtw_cmd.o \

		core/rtw_efuse.o \

		core/rtw_io.o \

		core/rtw_ieee80211.o \

		core/rtw_mlme.o \

		core/rtw_mlme_ext.o \

		core/rtw_pwrctrl.o \

		core/rtw_recv.o \

		core/rtw_rf.o \

		core/rtw_security.o \

		core/rtw_wlan_util.o \

		core/rtw_xmit.o	\

		hal/hal_com_phycfg.o \

		hal/hal_sdio.o \

		hal/hal_pwr_seq.o \

		hal/HalPwrSeqCmd.o \

		hal/odm.o \

		hal/odm_CfoTracking.o \

		hal/odm_DIG.o \

		hal/odm_DynamicTxPower.o \

		hal/odm_HWConfig.o \

		hal/odm_RegConfig8723B.o \

		hal/rtl8723bs_recv.o \

		hal/sdio_halinit.o \

		hal/HalHWImg8723B_BB.o \

		hal/HalHWImg8723B_MAC.o \

		hal/HalPhyRf_8723B.o \

		os_dep/ioctl_cfg80211.o \

		os_dep/osdep_service.o \

		os_dep/os_intfs.o \

		os_dep/recv_linux.o \

		os_dep/wifi_regd.o \

		os_dep/xmit_linux.o

obj-$(CONFIG_RTL8723BS) := r8723bs.o

ccflags-y += -I$(srctree)/$(src)/include -I$(srctree)/$(src)/hal



r8188eu-y = \

		hal/HalHWImg8188E_MAC.o \

		hal/HalHWImg8188E_RF.o \

		hal/HalPwrSeqCmd.o \

		hal/Hal8188ERateAdaptive.o \

		hal/odm_HWConfig.o \

		hal/odm_RTL8188E.o \

		hal/rtl8188eu_recv.o \

		os_dep/ioctl_linux.o \

		os_dep/mlme_linux.o \

		os_dep/os_intfs.o \

		os_dep/usb_ops_linux.o \

		os_dep/xmit_linux.o \

		core/rtw_ap.o \

		core/rtw_br_ext.o \

		core/rtw_efuse.o \

		core/rtw_ioctl_set.o \

		core/rtw_led.o \

		core/rtw_mlme.o \

		core/rtw_mlme_ext.o \

		core/rtw_p2p.o \

		core/rtw_recv.o \

		core/rtw_rf.o \

		core/rtw_security.o \

		core/rtw_wlan_util.o \

		core/rtw_xmit.o

obj-$(CONFIG_R8188EU) := r8188eu.o

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the industrial I/O core.

#

obj-y += impedance-analyzer/

obj-y += meter/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for industrial I/O CDC drivers

#

obj-$(CONFIG_AD7746) += ad7746.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for industrial I/O ADDAC drivers

#

obj-$(CONFIG_ADT7316) += adt7316.o

obj-$(CONFIG_ADT7316_I2C) += adt7316-i2c.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for industrial I/O accelerometer drivers

#

obj-$(CONFIG_ADIS16203) += adis16203.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Impedance Converter, Network Analyzer drivers





# SPDX-License-Identifier: GPL-2.0

#

 Makefile for metering ic drivers





obj-$(CONFIG_ADE7854_I2C) += ade7854-i2c.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Resolver/Synchro drivers

#

obj-$(CONFIG_AD2S1210) += ad2s1210.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for industrial I/O ADC drivers

#

obj-$(CONFIG_AD7816) += ad7816.o

obj-$(CONFIG_AD7280) += ad7280a.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Direct Digital Synthesis drivers

#

obj-$(CONFIG_AD9832) += ad9832.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_FB_SM750)	+= sm750fb.o

sm750fb-objs		:= sm750.o sm750_hw.o sm750_accel.o sm750_cursor.o \

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_KEYBOARD_NVEC) 	+= nvec_kbd.o

obj-$(CONFIG_NVEC_PAZ00) 	+= nvec_paz00.o

# SPDX-License-Identifier: GPL-2.0

# Core module

obj-$(CONFIG_FB_TFT)             += fbtft.o

fbtft-y                          += fbtft-core.o fbtft-sysfs.o fbtft-bus.o fbtft-io.o

 drivers

obj-$(CONFIG_FB_TFT_AGM1264K_FL) += fb_agm1264k-fl.o

obj-$(CONFIG_FB_TFT_BD663474)    += fb_bd663474.o

obj-$(CONFIG_FB_TFT_HX8340BN)    += fb_hx8340bn.o

obj-$(CONFIG_FB_TFT_HX8353D)     += fb_hx8353d.o

obj-$(CONFIG_FB_TFT_ILI9163)     += fb_ili9163.o

obj-$(CONFIG_FB_TFT_ILI9325)     += fb_ili9325.o

obj-$(CONFIG_FB_TFT_ILI9341)     += fb_ili9341.o

obj-$(CONFIG_FB_TFT_ILI9486)     += fb_ili9486.o

obj-$(CONFIG_FB_TFT_S6D02A1)     += fb_s6d02a1.o

obj-$(CONFIG_FB_TFT_SEPS525)     += fb_seps525.o

obj-$(CONFIG_FB_TFT_SH1106)      += fb_sh1106.o

obj-$(CONFIG_FB_TFT_SSD1305)     += fb_ssd1305.o

obj-$(CONFIG_FB_TFT_SSD1305)     += fb_ssd1325.o

obj-$(CONFIG_FB_TFT_SSD1351)     += fb_ssd1351.o

obj-$(CONFIG_FB_TFT_ST7789V)     += fb_st7789v.o

obj-$(CONFIG_FB_TFT_TLS8204)     += fb_tls8204.o

obj-$(CONFIG_FB_TFT_UC1611)      += fb_uc1611.o

obj-$(CONFIG_FB_TFT_UC1701)      += fb_uc1701.o

obj-$(CONFIG_FB_TFT_WATTEROTT)   += fb_watterott.o

# SPDX-License-Identifier: GPL-2.0

#

# Copyright (C) 2005-2009 Cavium Networks

#



 Makefile for Cavium OCTEON on-board ethernet driver





obj-${CONFIG_OCTEON_ETHERNET} :=  octeon-ethernet.o

octeon-ethernet-y += ethernet-mdio.o

octeon-ethernet-y += ethernet-mem.o

octeon-ethernet-y += ethernet-rgmii.o

octeon-ethernet-y += ethernet-tx.o

# SPDX-License-Identifier: GPL-2.0

NIC_SELECT = RTL8192U

ccflags-y += -DCONFIG_FORCE_HARD_FLOAT=y



		  r8190_rtl8256.o r819xU_phy.o r819xU_firmware.o	\

		  r819xU_cmdpkt.o r8192U_dm.o r819xU_firmware_img.o	\

		  ieee80211/ieee80211_crypt_tkip.o			\

		  ieee80211/ieee80211_softmac.o				\

		  ieee80211/ieee80211_tx.o				\

		  ieee80211/ieee80211_wx.o				\

		  ieee80211/ieee80211_module.o				\

		  ieee80211/dot11d.o

obj-$(CONFIG_RTL8192U) += r8192u_usb.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for fieldbus_dev drivers.





obj-$(CONFIG_FIELDBUS_DEV)	+= fieldbus_dev.o anybuss/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for anybuss drivers.

#

anybuss_core-y			+= host.o

obj-$(CONFIG_HMS_PROFINET)	+= hms-profinet.o

# SPDX-License-Identifier: GPL-2.0

# needed for trace events

ccflags-y += -I$(src)

 Greybus class drivers

gb-bootrom-y		:= bootrom.o

gb-firmware-y		:= fw-core.o fw-download.o fw-management.o authentication.o

gb-hid-y		:= hid.o

gb-log-y		:= log.o

gb-raw-y		:= raw.o



obj-$(CONFIG_GREYBUS_BOOTROM)	+= gb-bootrom.o

obj-$(CONFIG_GREYBUS_CAMERA)	+= gb-camera.o

obj-$(CONFIG_GREYBUS_FIRMWARE)	+= gb-firmware.o gb-spilib.o

obj-$(CONFIG_GREYBUS_HID)	+= gb-hid.o

obj-$(CONFIG_GREYBUS_LIGHT)	+= gb-light.o

obj-$(CONFIG_GREYBUS_LOG)	+= gb-log.o

obj-$(CONFIG_GREYBUS_LOOPBACK)	+= gb-loopback.o



# Greybus Audio is a bunch of modules

gb-audio-codec-y	:= audio_codec.o audio_helper.o

gb-audio-manager-y	:= audio_manager.o audio_manager_module.o

# Greybus Audio sysfs helpers can be useful when debugging

#GB_AUDIO_MANAGER_SYSFS ?= true

ifeq ($(GB_AUDIO_MANAGER_SYSFS),true)

#gb-audio-manager-y += audio_manager_sysfs.o

ccflags-y += -DGB_AUDIO_MANAGER_SYSFS

#endif

obj-$(CONFIG_GREYBUS_AUDIO_APB_CODEC)	+= gb-audio-module.o

obj-$(CONFIG_GREYBUS_AUDIO)		+= gb-audio-gb.o

obj-$(CONFIG_GREYBUS_AUDIO)		+= gb-audio-manager.o



# Greybus Bridged PHY drivers

gb-gbphy-y := gbphy.o

gb-gpio-y := gpio.o

gb-i2c-y := i2c.o

gb-pwm-y := pwm.o

gb-sdio-y := sdio.o

gb-spi-y := spi.o

gb-uart-y := uart.o

gb-usb-y := usb.o

obj-$(CONFIG_GREYBUS_GPIO)		+= gb-gpio.o

obj-$(CONFIG_GREYBUS_PWM)		+= gb-pwm.o

obj-$(CONFIG_GREYBUS_SPI)		+= gb-spi.o gb-spilib.o

obj-$(CONFIG_GREYBUS_USB)		+= gb-usb.o



# Greybus Platform driver

gb-arche-y	:= arche-platform.o arche-apb-ctrl.o

# SPDX-License-Identifier: GPL-2.0

ifeq ($(strip $(V)), 1)

  Q =



CFLAGS	+= -std=gnu99 -Wall -Wextra -g \

	    -Wno-unused-parameter \

	    -Wredundant-decls \

	    -Wcast-align \

	    -Wsign-compare \



CC	:= $(CROSS_COMPILE)gcc



all: $(TOOLS)

	$(Q)$(CC) $(CFLAGS) -c $< -o $@

loopback_%: loopback_%.o

	@echo '  TARGET_LD $@'



clean::

	rm -f *.o $(TOOLS)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel USB device drivers.

#

# Object files in subdirectories



obj-$(CONFIG_USB_DWC2)		+= dwc2/

obj-$(CONFIG_USB_ISP1760)	+= isp1760/

obj-$(CONFIG_USB_CDNS_SUPPORT)	+= cdns3/



obj-$(CONFIG_USB_MTU3)		+= mtu3/

obj-$(CONFIG_USB_ISP116X_HCD)	+= host/

obj-$(CONFIG_USB_OHCI_HCD)	+= host/

obj-$(CONFIG_USB_UHCI_HCD)	+= host/

obj-$(CONFIG_USB_FHCI_HCD)	+= host/

obj-$(CONFIG_USB_XHCI_HCD)	+= host/

obj-$(CONFIG_USB_ISP1362_HCD)	+= host/

obj-$(CONFIG_USB_U132_HCD)	+= host/

obj-$(CONFIG_USB_R8A66597_HCD)	+= host/

obj-$(CONFIG_USB_FSL_USB2)	+= host/

obj-$(CONFIG_USB_MAX3421_HCD)	+= host/



obj-$(CONFIG_USB_WDM)		+= class/



obj-$(CONFIG_USB_STORAGE)	+= storage/



obj-$(CONFIG_USB_MICROTEK)	+= image/



obj-$(CONFIG_USB)		+= misc/



obj-$(CONFIG_USB_SPEEDTOUCH)	+= atm/

obj-$(CONFIG_USB_MUSB_HDRC)	+= musb/

obj-$(CONFIG_USB_CHIPIDEA)	+= chipidea/

obj-$(CONFIG_USB_RENESAS_USBHS)	+= renesas_usbhs/

obj-$(CONFIG_USB_GADGET)	+= gadget/

obj-$(CONFIG_USBIP_CORE)	+= usbip/

obj-$(CONFIG_TYPEC)		+= typec/

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the usb common parts.





usb-common-y			  += common.o

usb-common-$(CONFIG_TRACING)	  += debug.o



obj-$(CONFIG_USB_OTG_FSM) += usb-otg-fsm.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the USB serial device drivers.

#

# Object file lists.



usbserial-y := usb-serial.o generic.o bus.o



obj-$(CONFIG_USB_SERIAL_ARK3116)		+= ark3116.o

obj-$(CONFIG_USB_SERIAL_CYBERJACK)		+= cyberjack.o

obj-$(CONFIG_USB_SERIAL_EDGEPORT_TI)		+= io_ti.o

obj-$(CONFIG_USB_SERIAL_EMPEG)			+= empeg.o

obj-$(CONFIG_USB_SERIAL_F81232)			+= f81232.o

obj-$(CONFIG_USB_SERIAL_F8153X)			+= f81534.o

obj-$(CONFIG_USB_SERIAL_KEYSPAN)		+= keyspan.o

obj-$(CONFIG_USB_SERIAL_KOBIL_SCT)		+= kobil_sct.o

obj-$(CONFIG_USB_SERIAL_MOS7720)		+= mos7720.o

obj-$(CONFIG_USB_SERIAL_MXUPORT)		+= mxuport.o

obj-$(CONFIG_USB_SERIAL_NAVMAN)			+= navman.o

obj-$(CONFIG_USB_SERIAL_OPTICON)		+= opticon.o

obj-$(CONFIG_USB_SERIAL_OPTION)			+= option.o

obj-$(CONFIG_USB_SERIAL_QUALCOMM)		+= qcserial.o

obj-$(CONFIG_USB_SERIAL_SAFE)			+= safe_serial.o

obj-$(CONFIG_USB_SERIAL_SIMPLE)			+= usb-serial-simple.o

obj-$(CONFIG_USB_SERIAL_UPD78F0730)		+= upd78f0730.o

obj-$(CONFIG_USB_SERIAL_VISOR)			+= visor.o

obj-$(CONFIG_USB_SERIAL_WISHBONE)		+= wishbone-serial.o

obj-$(CONFIG_USB_SERIAL_XR)			+= xr_serial.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_TYPEC)		+= typec.o

typec-y				:= class.o mux.o bus.o port-mapper.o

obj-$(CONFIG_TYPEC)		+= altmodes/

obj-$(CONFIG_TYPEC_TCPM)	+= tcpm/

obj-$(CONFIG_TYPEC_UCSI)	+= ucsi/

obj-$(CONFIG_TYPEC_TPS6598X)	+= tipd/

obj-$(CONFIG_TYPEC_QCOM_PMIC)	+= qcom-pmic-typec.o

obj-$(CONFIG_TYPEC_STUSB160X) 	+= stusb160x.o

# SPDX-License-Identifier: GPL-2.0

CFLAGS_trace.o				:= -I$(src)



typec_ucsi-y				:= ucsi.o

typec_ucsi-$(CONFIG_TRACING)		+= trace.o

	typec_ucsi-y			+= psy.o

endif

	typec_ucsi-y			+= displayport.o

endif

obj-$(CONFIG_UCSI_ACPI)			+= ucsi_acpi.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_TYPEC_DP_ALTMODE)		+= typec_displayport.o

obj-$(CONFIG_TYPEC_NVIDIA_ALTMODE)	+= typec_nvidia.o

typec_nvidia-y				:= nvidia.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_TYPEC_TCPM)		+= tcpm.o

obj-$(CONFIG_TYPEC_FUSB302)		+= fusb302.o

obj-$(CONFIG_TYPEC_WCOVE)		+= typec_wcove.o

typec_wcove-y				:= wcove.o

obj-$(CONFIG_TYPEC_TCPCI)		+= tcpci.o

obj-$(CONFIG_TYPEC_RT1711H)		+= tcpci_rt1711h.o

obj-$(CONFIG_TYPEC_MT6360)		+= tcpci_mt6360.o

obj-$(CONFIG_TYPEC_TCPCI_MAXIM)		+= tcpci_maxim.o

# SPDX-License-Identifier: GPL-2.0



tps6598x-y			:= core.o

tps6598x-$(CONFIG_TRACING)	+= trace.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_TYPEC_MUX_PI3USB30532)	+= pi3usb30532.o

# SPDX-License-Identifier: GPL-2.0



usbip-core-y := usbip_common.o usbip_event.o

obj-$(CONFIG_USBIP_VHCI_HCD) += vhci-hcd.o

vhci-hcd-y := vhci_sysfs.o vhci_tx.o vhci_rx.o vhci_hcd.o

obj-$(CONFIG_USBIP_HOST) += usbip-host.o



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for early USB devices





# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the rest of the USB drivers

 (the ones that don't fit into any other categories)



obj-$(CONFIG_USB_CYPRESS_CY7C63)	+= cypress_cy7c63.o

obj-$(CONFIG_USB_CYTHERM)		+= cytherm.o

obj-$(CONFIG_USB_EMI62)			+= emi62.o

obj-$(CONFIG_USB_EZUSB_FX2)		+= ezusb.o

obj-$(CONFIG_USB_FTDI_ELAN)		+= ftdi-elan.o

obj-$(CONFIG_USB_ISIGHTFW)		+= isight_firmware.o

obj-$(CONFIG_USB_LCD)			+= usblcd.o

obj-$(CONFIG_USB_LD)			+= ldusb.o

obj-$(CONFIG_USB_EHSET_TEST_FIXTURE)    += ehset.o

obj-$(CONFIG_USB_SEVSEG)		+= usbsevseg.o

obj-$(CONFIG_USB_HSIC_USB3503)		+= usb3503.o



obj-$(CONFIG_USB_LINK_LAYER_TEST)	+= lvstest.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the sisusb driver (if driver is inside kernel tree).

#

obj-$(CONFIG_USB_SISUSBVGA) += sisusbvga.o

# SPDX-License-Identifier: GPL-2.0

isp1760-$(CONFIG_USB_ISP1760_HCD) += isp1760-hcd.o



# SPDX-License-Identifier: GPL-2.0

#

# USB peripheral controller drivers

#

subdir-ccflags-$(CONFIG_USB_GADGET_VERBOSE)	+= -DVERBOSE_DEBUG

ccflags-y				+= -I$(srctree)/drivers/usb/gadget/udc

obj-$(CONFIG_USB_LIBCOMPOSITE)	+= libcomposite.o

libcomposite-y			:= usbstring.o config.o epautoconf.o



# SPDX-License-Identifier: GPL-2.0

#

 USB gadget drivers





ccflags-y			:= -I$(srctree)/drivers/usb/gadget/

ccflags-y			+= -I$(srctree)/drivers/usb/gadget/udc/



g_audio-y			:= audio.o

g_serial-y			:= serial.o

g_midi-y			:= gmidi.o

gadgetfs-y			:= inode.o

g_mass_storage-y		:= mass_storage.o

g_cdc-y				:= cdc2.o

g_dbgp-y			:= dbgp.o

g_webcam-y			:= webcam.o

g_ncm-y				:= ncm.o



obj-$(CONFIG_USB_ZERO)		+= g_zero.o

obj-$(CONFIG_USB_AUDIO)		+= g_audio.o

obj-$(CONFIG_USB_ETH)		+= g_ether.o

obj-$(CONFIG_USB_MASS_STORAGE)	+= g_mass_storage.o

obj-$(CONFIG_USB_G_PRINTER)	+= g_printer.o

obj-$(CONFIG_USB_MIDI_GADGET)	+= g_midi.o

obj-$(CONFIG_USB_G_DBGP)	+= g_dbgp.o

obj-$(CONFIG_USB_G_NOKIA)	+= g_nokia.o

obj-$(CONFIG_USB_G_ACM_MS)	+= g_acm_ms.o

obj-$(CONFIG_USB_GADGET_TARGET)	+= tcm_usb_gadget.o

# SPDX-License-Identifier: GPL-2.0

# define_trace.h needs to know how to find our header





#

# USB peripheral controller drivers

#

obj-$(CONFIG_USB_DUMMY_HCD)	+= dummy_hcd.o

obj-$(CONFIG_USB_NET2280)	+= net2280.o

obj-$(CONFIG_USB_SNP_CORE)	+= snps_udc_core.o

obj-$(CONFIG_USB_PXA25X)	+= pxa25x_udc.o

obj-$(CONFIG_USB_S3C2410)	+= s3c2410_udc.o

obj-$(CONFIG_USB_AT91)		+= at91_udc.o

obj-$(CONFIG_USB_BCM63XX_UDC)	+= bcm63xx_udc.o

fsl_usb2_udc-y			:= fsl_udc_core.o

obj-$(CONFIG_USB_M66592)	+= m66592-udc.o

obj-$(CONFIG_USB_RENESAS_USB3)	+= renesas_usb3.o

obj-$(CONFIG_USB_S3C_HSUDC)	+= s3c-hsudc.o

obj-$(CONFIG_USB_MV_UDC)	+= mv_udc.o

mv_udc-y			:= mv_udc_core.o

obj-$(CONFIG_USB_FOTG210_UDC)	+= fotg210-udc.o

obj-$(CONFIG_USB_MV_U3D)	+= mv_u3d_core.o

obj-$(CONFIG_USB_MAX3420_UDC)	+= max3420_udc.o

 SPDX-License-Identifier: GPL-2.0+

obj-$(CONFIG_USB_ASPEED_VHUB)	+= aspeed-vhub.o

aspeed-vhub-y	:= core.o ep0.o epn.o dev.o hub.o

# SPDX-License-Identifier: GPL-2.0

bdc-y	:= bdc_core.o bdc_cmd.o bdc_ep.o bdc_udc.o

# SPDX-License-Identifier: GPL-2.0

#

# USB peripheral controller drivers

#



# USB Functions

usb_f_ss_lb-y			:= f_loopback.o f_sourcesink.o

obj-$(CONFIG_USB_U_SERIAL)	+= u_serial.o

obj-$(CONFIG_USB_F_SERIAL)	+= usb_f_serial.o

obj-$(CONFIG_USB_F_OBEX)	+= usb_f_obex.o

usb_f_ncm-y			:= f_ncm.o

obj-$(CONFIG_USB_F_NCM)		+= usb_f_ncm.o

usb_f_phonet-y			:= f_phonet.o

usb_f_eem-y			:= f_eem.o

obj-$(CONFIG_USB_F_EEM)		+= usb_f_eem.o

usb_f_ecm_subset-y		:= f_subset.o

usb_f_rndis-y			:= f_rndis.o rndis.o

usb_f_mass_storage-y		:= f_mass_storage.o storage_common.o

obj-$(CONFIG_USB_F_MASS_STORAGE)+= usb_f_mass_storage.o

obj-$(CONFIG_USB_U_AUDIO)	+= u_audio.o

obj-$(CONFIG_USB_F_UAC1)	+= usb_f_uac1.o

usb_f_uac1_legacy-y		:= f_uac1_legacy.o u_uac1_legacy.o

usb_f_uac2-y			:= f_uac2.o

usb_f_uvc-y			:= f_uvc.o uvc_queue.o uvc_v4l2.o uvc_video.o uvc_configfs.o

obj-$(CONFIG_USB_F_UVC)		+= usb_f_uvc.o

obj-$(CONFIG_USB_F_MIDI)	+= usb_f_midi.o

usb_f_printer-y			:= f_printer.o

usb_f_tcm-y			:= f_tcm.o

obj-$(CONFIG_USB_F_TCM)		+= usb_f_tcm.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Cypress C67X00 USB Controller







# SPDX-License-Identifier: GPL-2.0

#

# for USB OTG silicon based on Mentor Graphics INVENTRA designs

#

 define_trace.h needs to know how to find our header





musb_hdrc-y := musb_core.o musb_trace.o

musb_hdrc-$(CONFIG_USB_MUSB_GADGET)$(CONFIG_USB_MUSB_DUAL_ROLE) += musb_gadget_ep0.o musb_gadget.o



# Hardware Glue Layer

obj-$(CONFIG_USB_MUSB_OMAP2PLUS)		+= omap2430.o

obj-$(CONFIG_USB_MUSB_AM35X)			+= am35x.o

obj-$(CONFIG_USB_MUSB_MEDIATEK)      		+= mediatek.o

 the kconfig must guarantee that only one of the

# possible I/O schemes will be enabled at a time ...

# PIO only, or DMA (several potential schemes).

 though PIO is always there to back up DMA, and for ep0



musb_hdrc-$(CONFIG_USB_TI_CPPI_DMA)		+= cppi_dma.o

musb_hdrc-$(CONFIG_USB_TUSB_OMAP_DMA)		+= tusb6010_omap.o

musb_hdrc-$(CONFIG_USB_UX500_DMA)		+= ux500_dma.o

musb_hdrc-$(CONFIG_USB_TI_CPPI41_DMA)		+= musb_cppi41.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for USB Core files and filesystem





usbcore-y := usb.o hub.o hcd.o urb.o message.o driver.o

usbcore-y += devio.o notify.o generic.o quirks.o devices.o

usbcore-y += phy.o port.o



obj-$(CONFIG_USB)		+= usbcore.o

# SPDX-License-Identifier: GPL-2.0

# define_trace.h needs to know how to find our header

CFLAGS_cdns3-trace.o				:= -I$(src)

CFLAGS_cdnsp-trace.o				:= -I$(src)

cdns-usb-common-y				:= core.o drd.o



else

obj-$(CONFIG_USB_CDNS_SUPPORT)			+= cdns-usb-common.o

obj-$(CONFIG_USB_CDNS3)				+= cdns3.o

endif

cdns-usb-common-$(CONFIG_USB_CDNS_HOST) 	+= host.o

cdns3-$(CONFIG_USB_CDNS3_GADGET)		+= cdns3-gadget.o cdns3-ep0.o



obj-$(CONFIG_USB_CDNS3_PCI_WRAP)		+= cdns3-pci-wrap.o

obj-$(CONFIG_USB_CDNS3_IMX)			+= cdns3-imx.o

cdnsp-udc-pci-y					:= cdnsp-pci.o

ifdef CONFIG_USB_CDNSP_PCI

else

obj-$(CONFIG_USB_CDNSP_PCI) 			+= cdnsp-udc-pci.o

endif

endif

						   cdnsp-mem.o cdnsp-ep0.o

cdnsp-udc-pci-$(CONFIG_TRACING)			+= cdnsp-trace.o

endif

# SPDX-License-Identifier: GPL-2.0

# define_trace.h needs to know how to find our header

CFLAGS_trace.o				:= -I$(src)

obj-$(CONFIG_USB_DWC3)			+= dwc3.o

dwc3-y					:= core.o

ifneq ($(CONFIG_TRACING),)

	dwc3-y				+= trace.o

endif

	dwc3-y				+= host.o

endif

	dwc3-y				+= gadget.o ep0.o

endif



	dwc3-y				+= ulpi.o

endif



 Platform-specific glue layers go here



# NOTICE: Make sure your glue layer doesn't depend on anything

 which is arch-specific and that it compiles on all situations.



 We want to keep this requirement in order to be able to compile

 the entire driver (with all its glue layers) on several architectures

 and make sure it compiles fine. This will also help with allmodconfig

# and allyesconfig builds.



obj-$(CONFIG_USB_DWC3_OMAP)		+= dwc3-omap.o

obj-$(CONFIG_USB_DWC3_EXYNOS)		+= dwc3-exynos.o

obj-$(CONFIG_USB_DWC3_PCI)		+= dwc3-pci.o

obj-$(CONFIG_USB_DWC3_HAPS)		+= dwc3-haps.o

obj-$(CONFIG_USB_DWC3_KEYSTONE)		+= dwc3-keystone.o

obj-$(CONFIG_USB_DWC3_OF_SIMPLE)	+= dwc3-of-simple.o

obj-$(CONFIG_USB_DWC3_ST)		+= dwc3-st.o

obj-$(CONFIG_USB_DWC3_QCOM)		+= dwc3-qcom.o

obj-$(CONFIG_USB_DWC3_IMX8MP)		+= dwc3-imx8mp.o

obj-$(CONFIG_USB_DWC3_XILINX)		+= dwc3-xilinx.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for USB ATM/xDSL drivers

#

obj-$(CONFIG_USB_SPEEDTOUCH)	+= speedtch.o

obj-$(CONFIG_USB_UEAGLEATM)	+= ueagle-atm.o

obj-$(CONFIG_USB_XUSBATM)	+= xusbatm.o

# SPDX-License-Identifier: GPL-2.0



# define_trace.h needs to know how to find our header

CFLAGS_mtu3_trace.o	:= -I$(src)

obj-$(CONFIG_USB_MTU3)	+= mtu3.o





ifneq ($(filter y,$(CONFIG_USB_MTU3_HOST) $(CONFIG_USB_MTU3_DUAL_ROLE)),)



ifneq ($(filter y,$(CONFIG_USB_MTU3_GADGET) $(CONFIG_USB_MTU3_DUAL_ROLE)),)

	mtu3-y	+= mtu3_core.o mtu3_gadget_ep0.o mtu3_gadget.o mtu3_qmu.o

endif

	mtu3-y	+= mtu3_dr.o

endif

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the USB Mass Storage device drivers.

#

 15 Aug 2000, Christoph Hellwig <hch@infradead.org>

# Rewritten to use lists instead of if-statements.

#



ccflags-y += -DDEFAULT_SYMBOL_NAMESPACE=USB_STORAGE

obj-$(CONFIG_USB_STORAGE)	+= usb-storage.o

usb-storage-y := scsiglue.o protocol.o transport.o usb.o

usb-storage-y += initializers.o sierra_ms.o option_ms.o

usb-storage-y += usual-tables.o



obj-$(CONFIG_USB_STORAGE_CYPRESS_ATACB) += ums-cypress.o

obj-$(CONFIG_USB_STORAGE_FREECOM)	+= ums-freecom.o

obj-$(CONFIG_USB_STORAGE_JUMPSHOT)	+= ums-jumpshot.o

obj-$(CONFIG_USB_STORAGE_KARMA)		+= ums-karma.o

obj-$(CONFIG_USB_STORAGE_REALTEK)	+= ums-realtek.o

obj-$(CONFIG_USB_STORAGE_SDDR55)	+= ums-sddr55.o

obj-$(CONFIG_USB_STORAGE_USBAT)		+= ums-usbat.o

ums-eneub6250-y		:= ene_ub6250.o

ums-freecom-y		:= freecom.o

ums-isd200-y		:= isd200.o

ums-jumpshot-y		:= jumpshot.o

ums-karma-y		:= karma.o

ums-onetouch-y		:= onetouch.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for USB Host Controller Drivers





# tell define_trace.h where to find the xhci trace header

CFLAGS_xhci-trace.o := -I$(src)

fhci-y := fhci-hcd.o fhci-hub.o fhci-q.o



fhci-$(CONFIG_FHCI_DEBUG) += fhci-dbg.o

xhci-hcd-y += xhci-trace.o

	xhci-hcd-y += xhci-dbgcap.o xhci-dbgtty.o

endif



ifneq ($(CONFIG_USB_XHCI_MVEBU), )

	xhci-plat-hcd-y		+= xhci-mvebu.o

endif

ifneq ($(CONFIG_USB_XHCI_RCAR), )



ifneq ($(CONFIG_DEBUG_FS),)



obj-$(CONFIG_USB_PCI)	+= pci-quirks.o

obj-$(CONFIG_USB_EHCI_HCD)	+= ehci-hcd.o

obj-$(CONFIG_USB_EHCI_HCD_PLATFORM)	+= ehci-platform.o

obj-$(CONFIG_USB_EHCI_HCD_OMAP)	+= ehci-omap.o

obj-$(CONFIG_USB_EHCI_HCD_SPEAR)	+= ehci-spear.o

obj-$(CONFIG_USB_EHCI_HCD_STI)	+= ehci-st.o



obj-$(CONFIG_USB_ISP116X_HCD)	+= isp116x-hcd.o



obj-$(CONFIG_USB_OHCI_HCD_PCI)	+= ohci-pci.o

obj-$(CONFIG_USB_OHCI_EXYNOS)	+= ohci-exynos.o

obj-$(CONFIG_USB_OHCI_HCD_OMAP1)	+= ohci-omap.o

obj-$(CONFIG_USB_OHCI_HCD_AT91)	+= ohci-at91.o

obj-$(CONFIG_USB_OHCI_HCD_LPC32XX)	+= ohci-nxp.o

obj-$(CONFIG_USB_OHCI_HCD_DAVINCI)	+= ohci-da8xx.o

obj-$(CONFIG_USB_UHCI_HCD)	+= uhci-hcd.o

obj-$(CONFIG_USB_XHCI_HCD)	+= xhci-hcd.o

obj-$(CONFIG_USB_XHCI_PCI_RENESAS)	+= xhci-pci-renesas.o

obj-$(CONFIG_USB_XHCI_HISTB)	+= xhci-histb.o

obj-$(CONFIG_USB_XHCI_TEGRA)	+= xhci-tegra.o

obj-$(CONFIG_USB_SL811_CS)	+= sl811_cs.o

obj-$(CONFIG_USB_R8A66597_HCD)	+= r8a66597-hcd.o

obj-$(CONFIG_USB_FSL_USB2)	+= fsl-mph-dr-of.o

obj-$(CONFIG_USB_EHCI_FSL)	+= fsl-mph-dr-of.o

obj-$(CONFIG_USB_EHCI_MV)	+= ehci-mv.o

obj-$(CONFIG_USB_HCD_SSB)	+= ssb-hcd.o

obj-$(CONFIG_USB_MAX3421_HCD)	+= max3421-hcd.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for USB Image drivers





obj-$(CONFIG_USB_MICROTEK)	+= microtek.o

# SPDX-License-Identifier: GPL-2.0

ccflags-$(CONFIG_USB_DWC2_DEBUG)	+= -DDEBUG

ccflags-$(CONFIG_USB_DWC2_VERBOSE)	+= -DVERBOSE_DEBUG

obj-$(CONFIG_USB_DWC2)			+= dwc2.o

dwc2-y					:= core.o core_intr.o platform.o drd.o



ifneq ($(filter y,$(CONFIG_USB_DWC2_HOST) $(CONFIG_USB_DWC2_DUAL_ROLE)),)

	dwc2-y				+= hcd_queue.o hcd_ddma.o

endif

	dwc2-y       			+= gadget.o

endif



 NOTE: The previous s3c-hsotg peripheral mode only driver has been moved to

# this location and renamed gadget.c. When building for dynamically linked

# modules, dwc2.ko will get built for host mode, peripheral mode, and dual-role

# mode. The PCI bus interface module will called dwc2_pci.ko and the platform

# interface module will be called dwc2_platform.ko.

dwc2_pci-y				:= pci.o

# SPDX-License-Identifier: GPL-2.0

roles-y					:= class.o

# SPDX-License-Identifier: GPL-2.0

 define_trace.h needs to know how to find our header

CFLAGS_trace.o			:= -I$(src)



ci_hdrc-y				:= core.o otg.o debug.o ulpi.o

ci_hdrc-$(CONFIG_USB_CHIPIDEA_UDC)	+= udc.o trace.o

ci_hdrc-$(CONFIG_USB_CHIPIDEA_HOST)	+= host.o

ci_hdrc-$(CONFIG_USB_OTG_FSM)		+= otg_fsm.o

# Glue/Bridge layers go here

obj-$(CONFIG_USB_CHIPIDEA_GENERIC)	+= ci_hdrc_usb2.o

obj-$(CONFIG_USB_CHIPIDEA_PCI)		+= ci_hdrc_pci.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for USB monitor







obj-$(CONFIG_USB_MON)	+= usbmon.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for USB Class drivers

# (one step up from the misc category)

#

obj-$(CONFIG_USB_PRINTER)	+= usblp.o

obj-$(CONFIG_USB_WDM)		+= cdc-wdm.o

# SPDX-License-Identifier: GPL-2.0

#

# for Renesas USB

#

obj-$(CONFIG_USB_RENESAS_USBHS)	+= renesas_usbhs.o

renesas_usbhs-y			:= common.o mod.o pipe.o fifo.o rcar2.o rcar3.o rza.o rza2.o

ifneq ($(CONFIG_USB_RENESAS_USBHS_HCD),)

	renesas_usbhs-y		+= mod_host.o

endif

ifneq ($(CONFIG_USB_RENESAS_USBHS_UDC),)

	renesas_usbhs-y		+= mod_gadget.o

endif

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for physical layer USB drivers

#

obj-$(CONFIG_OF)			+= of.o

 transceiver drivers, keep the list sorted



obj-$(CONFIG_AB8500_USB)		+= phy-ab8500-usb.o

obj-$(CONFIG_TAHVO_USB)			+= phy-tahvo.o

obj-$(CONFIG_OMAP_OTG)			+= phy-omap-otg.o

obj-$(CONFIG_TWL6030_USB)		+= phy-twl6030-usb.o

obj-$(CONFIG_USB_TEGRA_PHY)		+= phy-tegra-usb.o

obj-$(CONFIG_USB_GPIO_VBUS)		+= phy-gpio-vbus-usb.o

obj-$(CONFIG_USB_ISP1301)		+= phy-isp1301.o

obj-$(CONFIG_USB_MV_OTG)		+= phy-mv-usb.o

obj-$(CONFIG_USB_MXS_PHY)		+= phy-mxs-usb.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_ATA)		+= libata.o

 non-SFF interface

obj-$(CONFIG_SATA_AHCI)		+= ahci.o libahci.o

obj-$(CONFIG_SATA_ACARD_AHCI)	+= acard-ahci.o libahci.o

obj-$(CONFIG_SATA_AHCI_PLATFORM) += ahci_platform.o libahci.o libahci_platform.o

obj-$(CONFIG_SATA_FSL)		+= sata_fsl.o

obj-$(CONFIG_SATA_INIC162X)	+= sata_inic162x.o

obj-$(CONFIG_SATA_HIGHBANK)	+= sata_highbank.o libahci.o

obj-$(CONFIG_AHCI_CEVA)		+= ahci_ceva.o libahci.o libahci_platform.o

obj-$(CONFIG_AHCI_DA850)	+= ahci_da850.o libahci.o libahci_platform.o

obj-$(CONFIG_AHCI_DM816)	+= ahci_dm816.o libahci.o libahci_platform.o

obj-$(CONFIG_AHCI_MTK)		+= ahci_mtk.o libahci.o libahci_platform.o

obj-$(CONFIG_AHCI_MVEBU)	+= ahci_mvebu.o libahci.o libahci_platform.o

obj-$(CONFIG_AHCI_ST)		+= ahci_st.o libahci.o libahci_platform.o

obj-$(CONFIG_AHCI_TEGRA)	+= ahci_tegra.o libahci.o libahci_platform.o

obj-$(CONFIG_AHCI_XGENE)	+= ahci_xgene.o libahci.o libahci_platform.o

obj-$(CONFIG_AHCI_QORIQ)	+= ahci_qoriq.o libahci.o libahci_platform.o

 SFF w/ custom DMA

obj-$(CONFIG_PATA_ARASAN_CF)	+= pata_arasan_cf.o

obj-$(CONFIG_SATA_QSTOR)	+= sata_qstor.o

obj-$(CONFIG_SATA_SX4)		+= sata_sx4.o

 SFF SATA w/ BMDMA

obj-$(CONFIG_SATA_PROMISE)	+= sata_promise.o

obj-$(CONFIG_SATA_RCAR)		+= sata_rcar.o

obj-$(CONFIG_SATA_SIL)		+= sata_sil.o

obj-$(CONFIG_SATA_SIS)		+= sata_sis.o

obj-$(CONFIG_SATA_SVW)		+= sata_svw.o

obj-$(CONFIG_SATA_ULI)		+= sata_uli.o

obj-$(CONFIG_SATA_VIA)		+= sata_via.o



# SFF PATA w/ BMDMA

obj-$(CONFIG_PATA_ALI)		+= pata_ali.o

obj-$(CONFIG_PATA_AMD)		+= pata_amd.o

obj-$(CONFIG_PATA_ATIIXP)	+= pata_atiixp.o

obj-$(CONFIG_PATA_BK3710)	+= pata_bk3710.o

obj-$(CONFIG_PATA_CS5520)	+= pata_cs5520.o

obj-$(CONFIG_PATA_CS5535)	+= pata_cs5535.o

obj-$(CONFIG_PATA_CYPRESS)	+= pata_cypress.o

obj-$(CONFIG_PATA_EFAR)		+= pata_efar.o

obj-$(CONFIG_PATA_FTIDE010)	+= pata_ftide010.o

obj-$(CONFIG_PATA_HPT37X)	+= pata_hpt37x.o

obj-$(CONFIG_PATA_HPT3X3)	+= pata_hpt3x3.o

obj-$(CONFIG_PATA_IT8213)	+= pata_it8213.o

obj-$(CONFIG_PATA_JMICRON)	+= pata_jmicron.o

obj-$(CONFIG_PATA_MARVELL)	+= pata_marvell.o

obj-$(CONFIG_PATA_NETCELL)	+= pata_netcell.o

obj-$(CONFIG_PATA_NS87415)	+= pata_ns87415.o

obj-$(CONFIG_PATA_OPTIDMA)	+= pata_optidma.o

obj-$(CONFIG_PATA_RADISYS)	+= pata_radisys.o

obj-$(CONFIG_PATA_RDC)		+= pata_rdc.o

obj-$(CONFIG_PATA_SERVERWORKS)	+= pata_serverworks.o

obj-$(CONFIG_PATA_TOSHIBA)	+= pata_piccolo.o



 SFF PIO only

obj-$(CONFIG_PATA_CMD640_PCI)	+= pata_cmd640.o

obj-$(CONFIG_PATA_GAYLE)	+= pata_gayle.o

obj-$(CONFIG_PATA_ISAPNP)	+= pata_isapnp.o

obj-$(CONFIG_PATA_MPIIX)	+= pata_mpiix.o

obj-$(CONFIG_PATA_PCMCIA)	+= pata_pcmcia.o

obj-$(CONFIG_PATA_PLATFORM)	+= pata_platform.o

obj-$(CONFIG_PATA_RZ1000)	+= pata_rz1000.o



obj-$(CONFIG_PATA_PXA)		+= pata_pxa.o

# Should be last but two libata driver

obj-$(CONFIG_PATA_ACPI)		+= pata_acpi.o

 Should be last but one libata driver

obj-$(CONFIG_ATA_GENERIC)	+= ata_generic.o

 Should be last libata driver

obj-$(CONFIG_PATA_LEGACY)	+= pata_legacy.o

	libata-transport.o libata-trace.o

libata-$(CONFIG_SATA_HOST)	+= libata-sata.o

libata-$(CONFIG_ATA_ACPI)	+= libata-acpi.o

libata-$(CONFIG_SATA_ZPODD)	+= libata-zpodd.o

# SPDX-License-Identifier: GPL-2.0



					   comedi_buf.o

comedi-$(CONFIG_PROC_FS)		+= proc.o

obj-$(CONFIG_COMEDI_PCI_DRIVERS)	+= comedi_pci.o

obj-$(CONFIG_COMEDI_USB_DRIVERS)	+= comedi_usb.o

obj-$(CONFIG_COMEDI)			+= comedi.o

obj-$(CONFIG_COMEDI)			+= drivers/

# SPDX-License-Identifier: GPL-2.0

 Makefile for individual comedi drivers



ccflags-$(CONFIG_COMEDI_DEBUG)		:= -DDEBUG

 Comedi "helper" modules



# Comedi misc drivers

obj-$(CONFIG_COMEDI_BOND)		+= comedi_bond.o

obj-$(CONFIG_COMEDI_TEST)		+= comedi_test.o

obj-$(CONFIG_COMEDI_PARPORT)		+= comedi_parport.o

# Comedi ISA drivers

obj-$(CONFIG_COMEDI_AMPLC_DIO200_ISA)	+= amplc_dio200.o

obj-$(CONFIG_COMEDI_AMPLC_PC236_ISA)	+= amplc_pc236.o

obj-$(CONFIG_COMEDI_AMPLC_PC263_ISA)	+= amplc_pc263.o

obj-$(CONFIG_COMEDI_PCL724)		+= pcl724.o

obj-$(CONFIG_COMEDI_PCL730)		+= pcl730.o

obj-$(CONFIG_COMEDI_PCL816)		+= pcl816.o

obj-$(CONFIG_COMEDI_PCM3724)		+= pcm3724.o

obj-$(CONFIG_COMEDI_RTI802)		+= rti802.o

obj-$(CONFIG_COMEDI_DAS16M1)		+= das16m1.o

obj-$(CONFIG_COMEDI_DAS16)		+= das16.o

obj-$(CONFIG_COMEDI_DAS1800)		+= das1800.o

obj-$(CONFIG_COMEDI_DT2801)		+= dt2801.o

obj-$(CONFIG_COMEDI_DT2814)		+= dt2814.o

obj-$(CONFIG_COMEDI_DT2817)		+= dt2817.o

obj-$(CONFIG_COMEDI_DMM32AT)		+= dmm32at.o

obj-$(CONFIG_COMEDI_II_PCI20KC)		+= ii_pci20kc.o

obj-$(CONFIG_COMEDI_MPC624)		+= mpc624.o

obj-$(CONFIG_COMEDI_NI_AT_AO)		+= ni_at_ao.o

obj-$(CONFIG_COMEDI_PCMAD)		+= pcmad.o

obj-$(CONFIG_COMEDI_PCMMIO)		+= pcmmio.o

obj-$(CONFIG_COMEDI_MULTIQ3)		+= multiq3.o



 Comedi PCI drivers

obj-$(CONFIG_COMEDI_8255_PCI)		+= 8255_pci.o

obj-$(CONFIG_COMEDI_ADDI_WATCHDOG)	+= addi_watchdog.o

obj-$(CONFIG_COMEDI_ADDI_APCI_1032)	+= addi_apci_1032.o

obj-$(CONFIG_COMEDI_ADDI_APCI_1500)	+= addi_apci_1500.o

obj-$(CONFIG_COMEDI_ADDI_APCI_1516)	+= addi_apci_1516.o

obj-$(CONFIG_COMEDI_ADDI_APCI_1564)	+= addi_apci_1564.o

obj-$(CONFIG_COMEDI_ADDI_APCI_16XX)	+= addi_apci_16xx.o

obj-$(CONFIG_COMEDI_ADDI_APCI_2032)	+= addi_apci_2032.o

obj-$(CONFIG_COMEDI_ADDI_APCI_2200)	+= addi_apci_2200.o

obj-$(CONFIG_COMEDI_ADDI_APCI_3120)	+= addi_apci_3120.o

obj-$(CONFIG_COMEDI_ADDI_APCI_3501)	+= addi_apci_3501.o

obj-$(CONFIG_COMEDI_ADDI_APCI_3XXX)	+= addi_apci_3xxx.o

obj-$(CONFIG_COMEDI_ADL_PCI6208)	+= adl_pci6208.o

obj-$(CONFIG_COMEDI_ADL_PCI7X3X)	+= adl_pci7x3x.o

obj-$(CONFIG_COMEDI_ADL_PCI8164)	+= adl_pci8164.o

obj-$(CONFIG_COMEDI_ADL_PCI9111)	+= adl_pci9111.o

obj-$(CONFIG_COMEDI_ADL_PCI9118)	+= adl_pci9118.o

obj-$(CONFIG_COMEDI_ADV_PCI1710)	+= adv_pci1710.o

obj-$(CONFIG_COMEDI_ADV_PCI1720)	+= adv_pci1720.o

obj-$(CONFIG_COMEDI_ADV_PCI1723)	+= adv_pci1723.o

obj-$(CONFIG_COMEDI_ADV_PCI1724)	+= adv_pci1724.o

obj-$(CONFIG_COMEDI_ADV_PCI1760)	+= adv_pci1760.o

obj-$(CONFIG_COMEDI_ADV_PCI_DIO)	+= adv_pci_dio.o

obj-$(CONFIG_COMEDI_AMPLC_DIO200_PCI)	+= amplc_dio200_pci.o

obj-$(CONFIG_COMEDI_AMPLC_PC263_PCI)	+= amplc_pci263.o

obj-$(CONFIG_COMEDI_AMPLC_PCI224)	+= amplc_pci224.o

obj-$(CONFIG_COMEDI_AMPLC_PCI230)	+= amplc_pci230.o

obj-$(CONFIG_COMEDI_CONTEC_PCI_DIO)	+= contec_pci_dio.o

obj-$(CONFIG_COMEDI_DT3000)		+= dt3000.o

obj-$(CONFIG_COMEDI_DYNA_PCI10XX)	+= dyna_pci10xx.o

obj-$(CONFIG_COMEDI_ICP_MULTI)		+= icp_multi.o

obj-$(CONFIG_COMEDI_DAQBOARD2000)	+= daqboard2000.o

obj-$(CONFIG_COMEDI_KE_COUNTER)		+= ke_counter.o

obj-$(CONFIG_COMEDI_CB_PCIDAS64)	+= cb_pcidas64.o

obj-$(CONFIG_COMEDI_CB_PCIDDA)		+= cb_pcidda.o

obj-$(CONFIG_COMEDI_CB_PCIMDDA)		+= cb_pcimdda.o

obj-$(CONFIG_COMEDI_ME_DAQ)		+= me_daq.o

obj-$(CONFIG_COMEDI_NI_65XX)		+= ni_65xx.o

obj-$(CONFIG_COMEDI_NI_670X)		+= ni_670x.o

obj-$(CONFIG_COMEDI_NI_LABPC_PCI)	+= ni_labpc_pci.o

obj-$(CONFIG_COMEDI_NI_PCIMIO)		+= ni_pcimio.o

obj-$(CONFIG_COMEDI_S626)		+= s626.o

obj-$(CONFIG_COMEDI_MF6X4)		+= mf6x4.o

 Comedi PCMCIA drivers

obj-$(CONFIG_COMEDI_DAS08_CS)		+= das08_cs.o

obj-$(CONFIG_COMEDI_NI_DAQ_DIO24_CS)	+= ni_daq_dio24.o

obj-$(CONFIG_COMEDI_NI_LABPC_CS)	+= ni_labpc_cs.o



 Comedi USB drivers

obj-$(CONFIG_COMEDI_DT9812)		+= dt9812.o

obj-$(CONFIG_COMEDI_USBDUX)		+= usbdux.o

obj-$(CONFIG_COMEDI_VMK80XX)		+= vmk80xx.o

 Comedi NI drivers

obj-$(CONFIG_COMEDI_MITE)		+= mite.o

obj-$(CONFIG_COMEDI_NI_TIOCMD)		+= ni_tiocmd.o

					   ni_routing/ni_route_values.o \

					   ni_routing/ni_device_routes/pci-6220.o \

					   ni_routing/ni_device_routes/pxi-6224.o \

					   ni_routing/ni_device_routes/pci-6229.o \

					   ni_routing/ni_device_routes/pxi-6251.o \

					   ni_routing/ni_device_routes/pxie-6251.o \

					   ni_routing/ni_device_routes/pci-6259.o \

					   ni_routing/ni_device_routes/pci-6602.o \

					   ni_routing/ni_device_routes/pci-6723.o \

					   ni_routing/ni_device_routes/pxi-6733.o \

					   ni_routing/ni_device_routes/pxie-6738.o

obj-$(CONFIG_COMEDI_NI_LABPC)		+= ni_labpc_common.o

obj-$(CONFIG_COMEDI_NI_LABPC_ISADMA)	+= ni_labpc_isadma.o

obj-$(CONFIG_COMEDI_AMPLC_DIO200)	+= amplc_dio200_common.o

obj-$(CONFIG_COMEDI_DAS08)		+= das08.o

obj-$(CONFIG_COMEDI_TESTS)		+= tests/

# SPDX-License-Identifier: GPL-2.0

 Makefile for comedi drivers unit tests



ccflags-$(CONFIG_COMEDI_DEBUG)		:= -DDEBUG

obj-$(CONFIG_COMEDI_TESTS_NI_ROUTES)	+= ni_routes_test.o

# SPDX-License-Identifier: GPL-2.0

 this make file is simply to help autogenerate these files:

# 	ni_route_values.h

	ni_device_routes.h

# in order to do this, we are also generating a python representation (using

# ctypesgen) of ../../comedi.h.

# This allows us to sort NI signal/terminal names numerically to use a binary

# search through the device_routes tables to find valid routes.

ALL:

	@echo Typical targets:

	@echo "\`make csv-files\`"

	@echo "  Creates new csv-files using content of c-files of existing"

	@echo "  ni_routing/* content.  New csv files are placed in csv"

	@echo "  sub-directory."

	@echo "\`make c-files\`"

	@echo "  Creates new c-files using content of csv sub-directory.  These"

	@echo "  new c-files can be compared to the active content in the"

	@echo "  Create a new blank csv file.  This is useful for establishing a"

	@echo "  new data table for either a device family \(less likely\) or a"

	@echo "  specific board of an existing device family \(more likely\)."

	@echo "\`make clean-partial\`"

	@echo "  Remove all generated files/directories EXCEPT for csv/c files."

	@echo "\`make clean\`"

	@echo "\`make everything\`"

	@echo "  Build all csv-files, then all new c-files."

everything : csv-files c-files csv-blank

CPPFLAGS=-D"BIT(x)=(1UL<<(x))" -D__user=

	ctypesgen $< --include "sys/ioctl.h" --cpp 'gcc -E $(CPPFLAGS)' -o $@



ni_values.py: convert_c_to_py





csv-blank :

	@echo New blank csv signal table in csv/blank_route_table.csv



ROUTE_VALUES_SRC=$(wildcard ../ni_route_values/*.c)

DEVICE_ROUTES_SRC=$(wildcard ../ni_device_routes/*.c)

all_cfiles.c : $(DEVICE_ROUTES_SRC) $(ROUTE_VALUES_SRC)

	@for i in $(DEVICE_ROUTES_SRC) $(ROUTE_VALUES_SRC); do \

include \"$$i\"" >> all_cfiles.c; \



clean-partial :

		__pycache__/

	$(RM) -rf c/ csv/

# Note:  One could also use ctypeslib in order to generate these files.  The

# caveat is that ctypeslib does not do a great job at handling macro functions.

 The make rules are as follows:

 comedi.h.xml : ../../comedi.h

# 	# note that we have to use PWD here to avoid h2xml finding a system

# 	# installed version of the comedilib/comedi.h file

# 	h2xml ${PWD}/../../comedi.h -c -D__user="" -D"BIT(x)=(1<<(x))" \

# 		-o comedi.h.xml

#

 comedi_h.py : comedi.h.xml

 	xml2py ./comedi.h.xml -o comedi_h.py

 clean :

# 	rm -f comedi.h.xml comedi_h.py comedi_h.pyc

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_COMEDI_KCOMEDILIB)	+= kcomedilib.o

kcomedilib-objs := kcomedilib_main.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the memory technology device drivers.





# Core functionality.

obj-$(CONFIG_MTD)		+= mtd.o





# 'Users' - code which presents functionality to userspace.

obj-$(CONFIG_MTD_BLOCK)		+= mtdblock.o

obj-$(CONFIG_MTD_BLOCK_RO)	+= mtdblock_ro.o

obj-$(CONFIG_FTL)		+= ftl.o

obj-$(CONFIG_NFTL)		+= nftl.o

obj-$(CONFIG_INFTL)		+= inftl.o

obj-$(CONFIG_RFD_FTL)		+= rfd_ftl.o

obj-$(CONFIG_SSFDC)		+= ssfdc.o

obj-$(CONFIG_SM_FTL)		+= sm_ftl.o

obj-$(CONFIG_MTD_SWAP)		+= mtdswap.o

nftl-objs		:= nftlcore.o nftlmount.o

inftl-objs		:= inftlcore.o inftlmount.o



obj-$(CONFIG_MTD_SPI_NOR)	+= spi-nor/

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_HBMC_AM654)	+= hbmc-am654.o

# SPDX-License-Identifier: GPL-2.0

#

 linux/drivers/chips/Makefile





obj-$(CONFIG_MTD)		+= chipreg.o

obj-$(CONFIG_MTD_CFI)		+= cfi_probe.o

obj-$(CONFIG_MTD_GEN_PROBE)	+= gen_probe.o

obj-$(CONFIG_MTD_JEDECPROBE)	+= jedec_probe.o

obj-$(CONFIG_MTD_RAM)		+= map_ram.o

obj-$(CONFIG_MTD_ROM)		+= map_rom.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_MTD_TESTS) += mtd_speedtest.o

obj-$(CONFIG_MTD_TESTS) += mtd_stresstest.o

obj-$(CONFIG_MTD_TESTS) += mtd_torturetest.o

obj-$(CONFIG_MTD_TESTS) += mtd_nandbiterrs.o

mtd_oobtest-objs := oobtest.o mtd_test.o

mtd_readtest-objs := readtest.o mtd_test.o

mtd_stresstest-objs := stresstest.o mtd_test.o

mtd_torturetest-objs := torturetest.o mtd_test.o

# SPDX-License-Identifier: GPL-2.0



obj-y	+= onenand/

obj-y	+= raw/

obj-y	+= spi/

nandcore-$(CONFIG_MTD_NAND_ECC) += ecc.o

nandcore-$(CONFIG_MTD_NAND_ECC_SW_BCH) += ecc-sw-bch.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_MTD_SM_COMMON) 		+= sm_common.o

obj-$(CONFIG_MTD_NAND_DENALI)		+= denali.o

obj-$(CONFIG_MTD_NAND_DENALI_PCI)	+= denali_pci.o

obj-$(CONFIG_MTD_NAND_DENALI_DT)	+= denali_dt.o

obj-$(CONFIG_MTD_NAND_S3C2410)		+= s3c2410.o

obj-$(CONFIG_MTD_NAND_DAVINCI)		+= davinci_nand.o

obj-$(CONFIG_MTD_NAND_DISKONCHIP)	+= diskonchip.o

obj-$(CONFIG_MTD_NAND_FSMC)		+= fsmc_nand.o

obj-$(CONFIG_MTD_NAND_NANDSIM)		+= nandsim.o

obj-$(CONFIG_MTD_NAND_CS553X)		+= cs553x_nand.o

obj-$(CONFIG_MTD_NAND_GPIO)		+= gpio.o

obj-$(CONFIG_MTD_NAND_OMAP2) 		+= omap2_nand.o

obj-$(CONFIG_MTD_NAND_OMAP_BCH_BUILD)	+= omap_elm.o

obj-$(CONFIG_MTD_NAND_MARVELL)		+= marvell_nand.o

obj-$(CONFIG_MTD_NAND_TMIO)		+= tmio_nand.o

obj-$(CONFIG_MTD_NAND_PLATFORM)		+= plat_nand.o

obj-$(CONFIG_MTD_NAND_PASEMI)		+= pasemi_nand.o

obj-$(CONFIG_MTD_NAND_ORION)		+= orion_nand.o

obj-$(CONFIG_MTD_NAND_OXNAS)		+= oxnas_nand.o

obj-$(CONFIG_MTD_NAND_FSL_ELBC)		+= fsl_elbc_nand.o

obj-$(CONFIG_MTD_NAND_FSL_IFC)		+= fsl_ifc_nand.o

obj-$(CONFIG_MTD_NAND_SLC_LPC32XX)      += lpc32xx_slc.o

obj-$(CONFIG_MTD_NAND_SH_FLCTL)		+= sh_flctl.o

obj-$(CONFIG_MTD_NAND_MXC)		+= mxc_nand.o

obj-$(CONFIG_MTD_NAND_SOCRATES)		+= socrates_nand.o

obj-$(CONFIG_MTD_NAND_TXX9NDFMC)	+= txx9ndfmc.o

obj-$(CONFIG_MTD_NAND_MPC5121_NFC)	+= mpc5121_nfc.o

obj-$(CONFIG_MTD_NAND_VF610_NFC)	+= vf610_nfc.o

obj-$(CONFIG_MTD_NAND_RICOH)		+= r852.o

obj-y					+= ingenic/

obj-$(CONFIG_MTD_NAND_BCM47XXNFLASH)	+= bcm47xxnflash/

obj-$(CONFIG_MTD_NAND_SUNXI)		+= sunxi_nand.o

obj-$(CONFIG_MTD_NAND_QCOM)		+= qcom_nandc.o

obj-$(CONFIG_MTD_NAND_MTK)		+= mtk_ecc.o mtk_nand.o

obj-$(CONFIG_MTD_NAND_MXIC)		+= mxic_nand.o

obj-$(CONFIG_MTD_NAND_TEGRA)		+= tegra_nand.o

obj-$(CONFIG_MTD_NAND_CADENCE)		+= cadence-nand-controller.o

obj-$(CONFIG_MTD_NAND_ROCKCHIP)		+= rockchip-nand-controller.o



nand-objs := nand_base.o nand_legacy.o nand_bbt.o nand_timings.o nand_ids.o

nand-objs += nand_esmt.o

nand-objs += nand_hynix.o

nand-objs += nand_micron.o

nand-objs += nand_samsung.o

nand-objs += nand_toshiba.o

# SPDX-License-Identifier: GPL-2.0

# link order matters; don't link the more generic brcmstb_nand.o before the

 more specific iproc_nand.o, for instance

obj-$(CONFIG_MTD_NAND_BRCMNAND)		+= iproc_nand.o

obj-$(CONFIG_MTD_NAND_BRCMNAND)		+= bcm63138_nand.o

obj-$(CONFIG_MTD_NAND_BRCMNAND)		+= brcmstb_nand.o

 SPDX-License-Identifier: GPL-2.0-only



ingenic_nand-$(CONFIG_MTD_NAND_INGENIC_ECC) += ingenic_ecc.o

 SPDX-License-Identifier: GPL-2.0-only

bcm47xxnflash-y				+= main.o

bcm47xxnflash-y				+= ops_bcm4706.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



atmel-nand-controller-objs	:= nand-controller.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the OneNAND MTD





# Core functionality.

obj-$(CONFIG_MTD_ONENAND)		+= onenand.o

 Board specific.

obj-$(CONFIG_MTD_ONENAND_GENERIC)	+= generic.o

obj-$(CONFIG_MTD_ONENAND_OMAP2)		+= onenand_omap2.o



onenand-objs = onenand_base.o onenand_bbt.o

# SPDX-License-Identifier: GPL-2.0

spinand-objs := core.o gigadevice.o macronix.o micron.o paragon.o toshiba.o winbond.o

obj-$(CONFIG_MTD_SPI_NAND) += spinand.o

 SPDX-License-Identifier: GPL-2.0-only

ofpart-y				+= ofpart_core.o

ofpart-$(CONFIG_MTD_OF_PARTS_BCM4908)	+= ofpart_bcm4908.o

obj-$(CONFIG_MTD_PARSER_IMAGETAG)	+= parser_imagetag.o

obj-$(CONFIG_MTD_AFS_PARTS)		+= afs.o

obj-$(CONFIG_MTD_PARSER_TRX)		+= parser_trx.o

obj-$(CONFIG_MTD_SHARPSL_PARTS)		+= sharpslpart.o

obj-$(CONFIG_MTD_REDBOOT_PARTS)		+= redboot.o

# SPDX-License-Identifier: GPL-2.0

#

# linux/drivers/maps/Makefile

#



# Chip mappings

obj-$(CONFIG_MTD_DC21285)	+= dc21285.o

obj-$(CONFIG_MTD_AMD76XROM)	+= amd76xrom.o

obj-$(CONFIG_MTD_ICHXROM)	+= ichxrom.o

obj-$(CONFIG_MTD_TSUNAMI)	+= tsunami_flash.o

physmap-objs-y			+= physmap-core.o

physmap-objs-$(CONFIG_MTD_PHYSMAP_BT1_ROM) += physmap-bt1-rom.o

physmap-objs-$(CONFIG_MTD_PHYSMAP_VERSATILE) += physmap-versatile.o

physmap-objs-$(CONFIG_MTD_PHYSMAP_GEMINI) += physmap-gemini.o

physmap-objs-$(CONFIG_MTD_PHYSMAP_IXP4XX) += physmap-ixp4xx.o

physmap-objs			:= $(physmap-objs-y)

obj-$(CONFIG_MTD_SA1100)	+= sa1100-flash.o

obj-$(CONFIG_MTD_SC520CDP)	+= sc520cdp.o

obj-$(CONFIG_MTD_TS5500)	+= ts5500_flash.o

obj-$(CONFIG_MTD_UCLINUX)	+= uclinux.o

obj-$(CONFIG_MTD_SCB2_FLASH)	+= scb2_flash.o

obj-$(CONFIG_MTD_INTEL_VR_NOR)	+= intel_vr_nor.o

obj-$(CONFIG_MTD_LANTIQ)	+= lantiq-flash.o

# SPDX-License-Identifier: GPL-2.0

spi-nor-objs			+= catalyst.o

spi-nor-objs			+= eon.o

spi-nor-objs			+= everspin.o

spi-nor-objs			+= fujitsu.o

spi-nor-objs			+= issi.o

spi-nor-objs			+= spansion.o

spi-nor-objs			+= sst.o

spi-nor-objs			+= winbond.o

obj-$(CONFIG_MTD_SPI_NOR)	+= spi-nor.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SPI_HISI_SFC)	+= hisi-sfc.o

obj-$(CONFIG_SPI_INTEL_SPI)	+= intel-spi.o

obj-$(CONFIG_SPI_INTEL_SPI_PLATFORM)	+= intel-spi-platform.o

# SPDX-License-Identifier: GPL-2.0



ubi-$(CONFIG_MTD_UBI_FASTMAP) += fastmap.o



 SPDX-License-Identifier: GPL-2.0-only



# linux/drivers/mtd/lpddr/Makefile

#

obj-$(CONFIG_MTD_QINFO_PROBE)	+= qinfo_probe.o

obj-$(CONFIG_MTD_LPDDR)	+= lpddr_cmds.o

# SPDX-License-Identifier: GPL-2.0

#

 linux/drivers/mtd/devices/Makefile





obj-$(CONFIG_MTD_DOCG3)		+= docg3.o

obj-$(CONFIG_MTD_SLRAM)		+= slram.o

obj-$(CONFIG_MTD_PHRAM)		+= phram.o

obj-$(CONFIG_MTD_MTDRAM)	+= mtdram.o

obj-$(CONFIG_MTD_LART)		+= lart.o

obj-$(CONFIG_MTD_DATAFLASH)	+= mtd_dataflash.o

obj-$(CONFIG_MTD_MCHP48L640)	+= mchp48l640.o

obj-$(CONFIG_MTD_SST25L)	+= sst25l.o

obj-$(CONFIG_MTD_POWERNV_FLASH)	+= powernv_flash.o



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the IPACK bridge device drivers.



obj-y				+= devices/

obj-y				+= carriers/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_BOARD_TPCI200) += tpci200.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

 Makefile for the Linux device tree



			   cpu.o firmware.o init.o map.o devres.o \

			   attribute_container.o transport_class.o \

			   topology.o container.o property.o cacheinfo.o \

obj-$(CONFIG_AUXILIARY_BUS) += auxiliary.o

obj-$(CONFIG_ISA_BUS_API)	+= isa.o

obj-$(CONFIG_NUMA)	+= node.o

ifeq ($(CONFIG_SYSFS),y)

obj-$(CONFIG_MODULES)	+= module.o

endif

obj-$(CONFIG_SOC_BUS) += soc.o

obj-$(CONFIG_GENERIC_MSI_IRQ_DOMAIN) += platform-msi.o

obj-$(CONFIG_GENERIC_ARCH_NUMA) += arch_numa.o

obj-y			+= test/



# define_trace.h needs to know how to find our header

CFLAGS_trace.o		:= -I$(src)

# SPDX-License-Identifier: GPL-2.0

 Makefile for the Linux firmware loader



obj-$(CONFIG_FW_LOADER_USER_HELPER) += fallback_table.o

obj-$(CONFIG_FW_LOADER)	+= firmware_class.o

firmware_class-objs := main.o



obj-y += builtin/

# SPDX-License-Identifier: GPL-2.0



# Create $(fwdir) from $(CONFIG_EXTRA_FIRMWARE_DIR) -- if it doesn't have a

# leading /, it's relative to $(srctree).

fwdir := $(addprefix $(srctree)/,$(filter-out /%,$(fwdir)))$(filter /%,$(fwdir))

obj-y += $(firmware)

FWSTR     = $(subst $(comma),_,$(subst /,_,$(subst .,_,$(subst -,_,$(FWNAME)))))

ASM_WORD  = $(if $(CONFIG_64BIT),.quad,.long)

ASM_ALIGN = $(if $(CONFIG_64BIT),3,2)

PROGBITS  = $(if $(CONFIG_ARM),%,@)progbits

	echo "/* Generated by $(src)/Makefile */"		;\

	echo "    .incbin \"$(fwdir)/$(FWNAME)\""		;\

	echo "    .p2align $(ASM_ALIGN)"			;\

	echo "    .string \"$(FWNAME)\""			;\

	echo "    .section .builtin_fw,\"a\",$(PROGBITS)"	;\

	echo "    $(ASM_WORD) _fw_end - _fw_$(FWSTR)_bin"

	$(call filechk,fwbin)

 The .o files depend on the binaries directly; the .S files don't.



targets := $(patsubst $(obj)/%,%, \

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_DRIVER_PE_KUNIT_TEST) += property-entry-test.o

# SPDX-License-Identifier: GPL-2.0

# For include/trace/define_trace.h to include trace.h

CFLAGS_regmap.o := -I$(src)

obj-$(CONFIG_DEBUG_FS) += regmap-debugfs.o

obj-$(CONFIG_REGMAP_I2C) += regmap-i2c.o

obj-$(CONFIG_REGMAP_SPI) += regmap-spi.o

obj-$(CONFIG_REGMAP_MMIO) += regmap-mmio.o

obj-$(CONFIG_REGMAP_W1) += regmap-w1.o

obj-$(CONFIG_REGMAP_SOUNDWIRE_MBQ) += regmap-sdw-mbq.o

obj-$(CONFIG_REGMAP_I3C) += regmap-i3c.o

obj-$(CONFIG_REGMAP_MDIO) += regmap-mdio.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PM_SLEEP)	+= main.o wakeup.o wakeup_stats.o

obj-$(CONFIG_PM_TRACE_RTC)	+= trace.o

obj-$(CONFIG_PM_GENERIC_DOMAINS)	+=  domain.o domain_governor.o

obj-$(CONFIG_HAVE_CLK)	+= clock_ops.o

obj-$(CONFIG_PM_QOS_KUNIT_TEST) += qos-test.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for HSI



hsi-objs			:= hsi_core.o

obj-y				+= controllers/

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for HSI controllers drivers

#

obj-$(CONFIG_OMAP_SSI)	+= omap_ssi.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for HSI clients

#

obj-$(CONFIG_NOKIA_MODEM)	+= nokia-modem.o

obj-$(CONFIG_CMT_SPEECH)	+= cmt_speech.o

obj-$(CONFIG_HSI_CHAR)		+= hsi_char.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_HYPERV)		+= hv_vmbus.o

obj-$(CONFIG_HYPERV_BALLOON)	+= hv_balloon.o

CFLAGS_hv_trace.o = -I$(src)



hv_vmbus-y := vmbus_drv.o \

		 channel_mgmt.o ring_buffer.o hv_trace.o

hv_vmbus-$(CONFIG_HYPERV_TESTING)	+= hv_debugfs.o



 Code that must be built-in

obj-$(subst m,y,$(CONFIG_HYPERV)) += hv_common.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_DTPM) += dtpm.o

obj-$(CONFIG_POWERCAP)	+= powercap_sys.o

obj-$(CONFIG_INTEL_RAPL) += intel_rapl_msr.o

# SPDX-License-Identifier: GPL-2.0

 core

ssb-y					+= main.o scan.o

ssb-$(CONFIG_SSB_EMBEDDED)		+= embedded.o



 host support



 built-in drivers

ssb-y					+= driver_chipcommon.o

ssb-$(CONFIG_SSB_DRIVER_PCICORE)	+= driver_pcicore.o

ssb-$(CONFIG_SSB_DRIVER_GIGE)		+= driver_gige.o

ssb-$(CONFIG_SSB_DRIVER_GPIO)		+= driver_gpio.o

 b43 pci-ssb-bridge driver

 Not strictly a part of SSB, but kept here for convenience

ssb-$(CONFIG_SSB_B43_PCI_BRIDGE)	+= b43_pci_bridge.o

obj-$(CONFIG_SSB)			+= ssb.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the GNSS subsystem.





gnss-y := core.o







# SPDX-License-Identifier: GPL-2.0

#

 Makefile for RapidIO interconnect services



obj-$(CONFIG_RAPIDIO) += rapidio.o





obj-$(CONFIG_RAPIDIO)		+= switches/



subdir-ccflags-$(CONFIG_RAPIDIO_DEBUG) := -DDEBUG

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for RIO switches

#

obj-$(CONFIG_RAPIDIO_TSI57X)	+= tsi57x.o

obj-$(CONFIG_RAPIDIO_TSI568)	+= tsi568.o

obj-$(CONFIG_RAPIDIO_RXS_GEN3)	+= idt_gen3.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for RapidIO devices

#

obj-$(CONFIG_RAPIDIO_TSI721)	+= tsi721_mport.o

obj-$(CONFIG_RAPIDIO_MPORT_CDEV) += rio_mport_cdev.o

# SPDX-License-Identifier: GPL-2.0

obj-y = base.o device.o platform.o property.o

obj-$(CONFIG_OF_KOBJ) += kobj.o

obj-$(CONFIG_OF_DYNAMIC) += dynamic.o

obj-$(CONFIG_OF_EARLY_FLATTREE) += fdt_address.o

obj-$(CONFIG_OF_ADDRESS)  += address.o

obj-$(CONFIG_OF_RESERVED_MEM) += of_reserved_mem.o

obj-$(CONFIG_OF_RESOLVE)  += resolver.o

obj-$(CONFIG_OF_OVERLAY) += overlay.o



ifdef CONFIG_KEXEC_FILE

obj-y	+= kexec.o

endif

endif

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_OF_OVERLAY) += overlay.dtb.o \

			    overlay_1.dtb.o \

			    overlay_3.dtb.o \

			    overlay_5.dtb.o \

			    overlay_7.dtb.o \

			    overlay_9.dtb.o \

			    overlay_10.dtb.o \

			    overlay_11.dtb.o \

			    overlay_12.dtb.o \

			    overlay_13.dtb.o \

			    overlay_15.dtb.o \

			    overlay_bad_add_dup_node.dtb.o \

			    overlay_bad_add_dup_prop.dtb.o \

			    overlay_gpio_01.dtb.o \

			    overlay_gpio_02a.dtb.o \

			    overlay_gpio_02b.dtb.o \



# enable creation of __symbols__ node

DTC_FLAGS_overlay += -@

DTC_FLAGS_overlay_bad_phandle += -@

DTC_FLAGS_overlay_base += -@

DTC_FLAGS_testcases += -@

# suppress warnings about intentional errors

DTC_FLAGS_testcases += -Wno-interrupts_property \



 Apply overlays statically with fdtoverlay.  This is a build time test that

# the overlays can be applied successfully by fdtoverlay.  This does not

 guarantee that the overlays can be applied successfully at run time by

 unittest, but it provides a bit of build time test coverage for those

# who do not execute unittest.

#

# The overlays are applied on top of static_base_1.dtb and static_base_2.dtb to

# create static_test_1.dtb and static_test_2.dtb.  If fdtoverlay detects an

# error than the kernel build will fail.  static_test_1.dtb and

# static_test_2.dtb are not consumed by unittest.

#

 Some unittest overlays deliberately contain errors that unittest checks for.

 These overlays will cause fdtoverlay to fail, and are thus not included

 in the static test:

			  overlay_bad_add_dup_node.dtbo \

			  overlay_bad_add_dup_prop.dtbo \

#			  overlay_bad_phandle.dtbo \

#			  overlay_bad_symbol.dtbo \

apply_static_overlay_1 := overlay_0.dtbo \

			  overlay_1.dtbo \

			  overlay_2.dtbo \

			  overlay_3.dtbo \

			  overlay_4.dtbo \

			  overlay_5.dtbo \

			  overlay_6.dtbo \

			  overlay_7.dtbo \

			  overlay_8.dtbo \

			  overlay_9.dtbo \

			  overlay_11.dtbo \

			  overlay_13.dtbo \

			  overlay_gpio_02a.dtbo \

			  overlay_gpio_04a.dtbo \





DTC_FLAGS_static_base_1 += -Wno-interrupts_property \



static_test_1-dtbs := static_base_1.dtb $(apply_static_overlay_1)

static_test_2-dtbs := static_base_2.dtb $(apply_static_overlay_2)

# SPDX-License-Identifier: GPL-2.0

obj-y += core.o

obj-y += hisilicon/

obj-$(CONFIG_ARCH_TEGRA) += tegra/

obj-$(CONFIG_RESET_ATH79) += reset-ath79.o

obj-$(CONFIG_RESET_BCM6345) += reset-bcm6345.o

obj-$(CONFIG_RESET_BRCMSTB) += reset-brcmstb.o

obj-$(CONFIG_RESET_HSDK) += reset-hsdk.o

obj-$(CONFIG_RESET_INTEL_GW) += reset-intel-gw.o

obj-$(CONFIG_RESET_LANTIQ) += reset-lantiq.o

obj-$(CONFIG_RESET_MESON) += reset-meson.o

obj-$(CONFIG_RESET_NPCM) += reset-npcm.o

obj-$(CONFIG_RESET_PISTACHIO) += reset-pistachio.o

obj-$(CONFIG_RESET_QCOM_PDC) += reset-qcom-pdc.o

obj-$(CONFIG_RESET_RZG2L_USBPHY_CTRL) += reset-rzg2l-usbphy-ctrl.o

obj-$(CONFIG_RESET_SIMPLE) += reset-simple.o

obj-$(CONFIG_RESET_SUNXI) += reset-sunxi.o

obj-$(CONFIG_RESET_TI_SYSCON) += reset-ti-syscon.o

obj-$(CONFIG_RESET_UNIPHIER_GLUE) += reset-uniphier-glue.o



 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_STI_RESET_SYSCFG) += reset-syscfg.o

obj-$(CONFIG_STIH407_RESET) += reset-stih407.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_RESET_TEGRA_BPMP) += reset-bpmp.o

# SPDX-License-Identifier: GPL-2.0

vfio_virqfd-y := virqfd.o

obj-$(CONFIG_VFIO) += vfio.o

obj-$(CONFIG_VFIO_IOMMU_TYPE1) += vfio_iommu_type1.o

obj-$(CONFIG_VFIO_SPAPR_EEH) += vfio_spapr_eeh.o

obj-$(CONFIG_VFIO_PLATFORM) += platform/

obj-$(CONFIG_VFIO_FSL_MC) += fsl-mc/

 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)



vfio-fsl-mc-y := vfio_fsl_mc.o vfio_fsl_mc_intr.o

 SPDX-License-Identifier: GPL-2.0-only





obj-$(CONFIG_VFIO_MDEV) += mdev.o

# SPDX-License-Identifier: GPL-2.0

vfio-platform-y := vfio_platform.o

obj-$(CONFIG_VFIO_PLATFORM) += vfio-platform.o

obj-$(CONFIG_VFIO_PLATFORM) += vfio-platform-base.o

obj-$(CONFIG_VFIO_PLATFORM) += reset/

vfio-amba-y := vfio_amba.o

obj-$(CONFIG_VFIO_AMBA) += vfio-amba.o

obj-$(CONFIG_VFIO_AMBA) += vfio-platform-base.o

obj-$(CONFIG_VFIO_AMBA) += reset/

# SPDX-License-Identifier: GPL-2.0

vfio-platform-amdxgbe-y := vfio_platform_amdxgbe.o

obj-$(CONFIG_VFIO_PLATFORM_CALXEDAXGMAC_RESET) += vfio-platform-calxedaxgmac.o

obj-$(CONFIG_VFIO_PLATFORM_BCMFLEXRM_RESET) += vfio_platform_bcmflexrm.o

 SPDX-License-Identifier: GPL-2.0-only



vfio-pci-core-y := vfio_pci_core.o vfio_pci_intrs.o vfio_pci_rdwr.o vfio_pci_config.o

vfio-pci-core-$(CONFIG_S390) += vfio_pci_zdev.o



obj-$(CONFIG_VFIO_PCI) += vfio-pci.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PWM_AB8500)	+= pwm-ab8500.o

obj-$(CONFIG_PWM_ATMEL)		+= pwm-atmel.o

obj-$(CONFIG_PWM_ATMEL_TCB)	+= pwm-atmel-tcb.o

obj-$(CONFIG_PWM_BCM_KONA)	+= pwm-bcm-kona.o

obj-$(CONFIG_PWM_BERLIN)	+= pwm-berlin.o

obj-$(CONFIG_PWM_CLPS711X)	+= pwm-clps711x.o

obj-$(CONFIG_PWM_CRC)		+= pwm-crc.o

obj-$(CONFIG_PWM_EP93XX)	+= pwm-ep93xx.o

obj-$(CONFIG_PWM_IMX_TPM)	+= pwm-imx-tpm.o

obj-$(CONFIG_PWM_IQS620A)	+= pwm-iqs620a.o

obj-$(CONFIG_PWM_KEEMBAY)	+= pwm-keembay.o

obj-$(CONFIG_PWM_LPC18XX_SCT)	+= pwm-lpc18xx-sct.o

obj-$(CONFIG_PWM_LPSS_PCI)	+= pwm-lpss-pci.o

obj-$(CONFIG_PWM_MEDIATEK)	+= pwm-mediatek.o

obj-$(CONFIG_PWM_OMAP_DMTIMER)	+= pwm-omap-dmtimer.o

obj-$(CONFIG_PWM_RASPBERRYPI_POE)	+= pwm-raspberrypi-poe.o

obj-$(CONFIG_PWM_RCAR)		+= pwm-rcar.o

obj-$(CONFIG_PWM_ROCKCHIP)	+= pwm-rockchip.o

obj-$(CONFIG_PWM_SIFIVE)	+= pwm-sifive.o

obj-$(CONFIG_PWM_STM32_LP)	+= pwm-stm32-lp.o

obj-$(CONFIG_PWM_STMPE)		+= pwm-stmpe.o

obj-$(CONFIG_PWM_SUN4I)		+= pwm-sun4i.o

obj-$(CONFIG_PWM_TEGRA)		+= pwm-tegra.o

obj-$(CONFIG_PWM_TIEHRPWM)	+= pwm-tiehrpwm.o

obj-$(CONFIG_PWM_TWL)		+= pwm-twl.o

obj-$(CONFIG_PWM_VISCONTI)	+= pwm-visconti.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the S/390 specific device drivers





obj-y += cio/ block/ char/ crypto/ net/ scsi/ virtio/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the S/390 common i/o drivers

#

# The following is required for define_trace.h to find ./trace.h



	fcx.o itcw.o crw.o ccwreq.o trace.o ioasm.o cio_debugfs.o

ccw_device-objs += device.o device_fsm.o device_ops.o

obj-$(CONFIG_CHSC_SCH) += chsc_sch.o

obj-$(CONFIG_SCM_BUS) += scm.o



qdio-objs := qdio_main.o qdio_thinint.o qdio_debug.o qdio_setup.o



vfio_ccw-objs += vfio_ccw_drv.o vfio_ccw_cp.o vfio_ccw_ops.o vfio_ccw_fsm.o \

	vfio_ccw_async.o vfio_ccw_trace.o vfio_ccw_chp.o



# SPDX-License-Identifier: GPL-2.0

#

# S/390 character devices

#

ifdef CONFIG_FUNCTION_TRACER

# Do not trace early setup code



KCOV_INSTRUMENT_sclp_early_core.o	:= n

UBSAN_SANITIZE_sclp_early_core.o	:= n

KASAN_SANITIZE_sclp_early_core.o	:= n



CFLAGS_REMOVE_sclp_early_core.o	+= $(CC_FLAGS_EXPOLINE)

obj-y += ctrlchar.o keyboard.o defkeymap.o sclp.o sclp_rw.o sclp_quiesce.o \

	 sclp_cmd.o sclp_config.o sclp_cpi_sys.o sclp_ocf.o sclp_ctl.o \



obj-$(CONFIG_TN3270) += raw3270.o

obj-$(CONFIG_TN3270_CONSOLE) += con3270.o

obj-$(CONFIG_TN3270_TTY) += tty3270.o

obj-$(CONFIG_TN3270_FS) += fs3270.o



obj-$(CONFIG_SCLP_CONSOLE) += sclp_con.o



obj-$(CONFIG_PCI) += sclp_pci.o

obj-$(subst m,y,$(CONFIG_ZCRYPT)) += sclp_ap.o

obj-$(CONFIG_VMLOGRDR) += vmlogrdr.o



tape-$(CONFIG_PROC_FS) += tape_proc.o

tape-objs := tape_core.o tape_std.o tape_char.o $(tape-y)

obj-$(CONFIG_MONREADER) += monreader.o

obj-$(CONFIG_CRASH_DUMP) += sclp_sdias.o zcore.o

hmcdrv-objs := hmcdrv_mod.o hmcdrv_dev.o hmcdrv_ftp.o hmcdrv_cache.o diag_ftp.o sclp_ftp.o

obj-$(CONFIG_HMC_DRV) += hmcdrv.o

# SPDX-License-Identifier: GPL-2.0

 Makefile for kvm guest drivers on s390



# Copyright IBM Corp. 2008

obj-$(CONFIG_S390_GUEST) += virtio_ccw.o

# SPDX-License-Identifier: GPL-2.0

#

# S/390 network devices

#

obj-$(CONFIG_CTCM) += ctcm.o fsm.o

obj-$(CONFIG_SMSGIUCV) += smsgiucv.o

obj-$(CONFIG_LCS) += lcs.o

qeth-y += qeth_core_sys.o qeth_core_main.o qeth_core_mpc.o qeth_ethtool.o

obj-$(CONFIG_QETH_L2) += qeth_l2.o

qeth_l3-y += qeth_l3_main.o qeth_l3_sys.o



obj-$(CONFIG_ISM) += ism.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the S/390 specific device drivers







# SPDX-License-Identifier: GPL-2.0

#

# S/390 block devices

#

dasd_eckd_mod-objs := dasd_eckd.o dasd_3990_erp.o dasd_alias.o

			dasd_genhd.o dasd_erp.o

ifdef CONFIG_DASD_EER



obj-$(CONFIG_DASD_DIAG) += dasd_diag_mod.o

obj-$(CONFIG_DCSSBLK) += dcssblk.o

obj-$(CONFIG_SCM_BLOCK) += scm_block.o

# SPDX-License-Identifier: GPL-2.0

#

 S/390 crypto devices





 zcrypt_api.o and zcrypt_msgtype*.o depend on ap.o

zcrypt-objs := zcrypt_api.o zcrypt_card.o zcrypt_queue.o

zcrypt-objs += zcrypt_msgtype6.o zcrypt_msgtype50.o

zcrypt-objs += zcrypt_ccamisc.o zcrypt_ep11misc.o

 adapter drivers depend on ap.o and zcrypt.o



 pkey kernel module

obj-$(CONFIG_PKEY) += pkey.o

# adjunct processor matrix

vfio_ap-objs := vfio_ap_drv.o vfio_ap_ops.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel miscellaneous SPARC device drivers.

#

 Dave Redman Frame Buffer tuning support.



 7 October 2000, Bartlomiej Zolnierkiewicz <bkz@linux-ide.org>

# Rewritten to use lists instead of if-statements.

#



obj-$(CONFIG_OBP_FLASH)			+= flash.o

obj-$(CONFIG_SUN_OPENPROMIO)		+= openprom.o

obj-$(CONFIG_BBC_I2C)			+= bbc.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_TIMER_OF)		+= timer-of.o

obj-$(CONFIG_SCx200HR_TIMER)	+= scx200_hrt.o

obj-$(CONFIG_CLKSRC_JCORE_PIT)		+= jcore-pit.o

obj-$(CONFIG_SH_TIMER_MTU2)	+= sh_mtu2.o

obj-$(CONFIG_SH_TIMER_TMU)	+= sh_tmu.o

obj-$(CONFIG_DAVINCI_TIMER)	+= timer-davinci.o

obj-$(CONFIG_OMAP_DM_TIMER)	+= timer-ti-dm.o

obj-$(CONFIG_OMAP_DM_TIMER)	+= timer-ti-dm-systimer.o

obj-$(CONFIG_DW_APB_TIMER_OF)	+= dw_apb_timer_of.o

obj-$(CONFIG_IXP4XX_TIMER)	+= timer-ixp4xx.o

obj-$(CONFIG_ROCKCHIP_TIMER)      += timer-rockchip.o

obj-$(CONFIG_CLKSRC_NOMADIK_MTU)	+= nomadik-mtu.o

obj-$(CONFIG_ARMADA_370_XP_TIMER)	+= timer-armada-370-xp.o

obj-$(CONFIG_BCM2835_TIMER)	+= bcm2835_timer.o

obj-$(CONFIG_SUN4I_TIMER)	+= timer-sun4i.o

obj-$(CONFIG_MESON6_TIMER)	+= timer-meson6.o

obj-$(CONFIG_VT8500_TIMER)	+= timer-vt8500.o

obj-$(CONFIG_NSPIRE_TIMER)	+= timer-zevio.o

obj-$(CONFIG_CADENCE_TTC_TIMER)	+= timer-cadence-ttc.o

obj-$(CONFIG_CLKSRC_STM32)	+= timer-stm32.o

obj-$(CONFIG_CLKSRC_STM32_LP)	+= timer-stm32-lp.o

obj-$(CONFIG_CLKSRC_EXYNOS_MCT)	+= exynos_mct.o

obj-$(CONFIG_CLKSRC_LPC32XX)	+= timer-lpc32xx.o

obj-$(CONFIG_CLKSRC_MPS2)	+= mps2-timer.o

obj-$(CONFIG_CLKSRC_SAMSUNG_PWM)	+= samsung_pwm_timer.o

obj-$(CONFIG_VF_PIT_TIMER)	+= timer-vf-pit.o

obj-$(CONFIG_CLKSRC_QCOM)	+= timer-qcom.o

obj-$(CONFIG_OXNAS_RPS_TIMER)	+= timer-oxnas-rps.o

obj-$(CONFIG_OWL_TIMER)		+= timer-owl.o

obj-$(CONFIG_SPRD_TIMER)	+= timer-sprd.o



obj-$(CONFIG_ARCH_HAS_TICK_BROADCAST)	+= dummy_timer.o

obj-$(CONFIG_KEYSTONE_TIMER)		+= timer-keystone.o

obj-$(CONFIG_CLKSRC_VERSATILE)		+= timer-versatile.o

obj-$(CONFIG_CLKSRC_IMX_GPT)		+= timer-imx-gpt.o

obj-$(CONFIG_TIMER_IMX_SYS_CTR)		+= timer-imx-sysctr.o

obj-$(CONFIG_ASM9260_TIMER)		+= asm9260_timer.o

obj-$(CONFIG_H8300_TMR8)		+= h8300_timer8.o

obj-$(CONFIG_H8300_TMR16)		+= h8300_timer16.o

obj-$(CONFIG_INGENIC_SYSOST)	+= ingenic-sysost.o

obj-$(CONFIG_INGENIC_TIMER)		+= ingenic-timer.o

obj-$(CONFIG_CLKSRC_ST_LPC)		+= clksrc_st_lpc.o

obj-$(CONFIG_X86_NUMACHIP)		+= numachip.o

obj-$(CONFIG_ATCPIT100_TIMER)		+= timer-atcpit100.o

obj-$(CONFIG_RISCV_TIMER)		+= timer-riscv.o

obj-$(CONFIG_CLINT_TIMER)		+= timer-clint.o

obj-$(CONFIG_CSKY_MP_TIMER)		+= timer-mp-csky.o

obj-$(CONFIG_GX6605S_TIMER)		+= timer-gx6605s.o

obj-$(CONFIG_HYPERV_TIMER)		+= hyperv_timer.o

obj-$(CONFIG_MICROCHIP_PIT64B)		+= timer-microchip-pit64b.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_HOTPLUG_CPU)		+= cpu_hotplug.o

obj-y	+= grant-table.o features.o balloon.o manage.o time.o

obj-y	+= events/



CFLAGS_features.o			:= -fno-stack-protector

dom0-$(CONFIG_ARM64) += arm-device.o

dom0-$(CONFIG_PCI) += pci.o

dom0-$(CONFIG_XEN_ACPI) += acpi.o $(xen-pad-y)

xen-pad-$(CONFIG_X86) += xen-acpi-pad.o

obj-$(CONFIG_XEN_SYS_HYPERVISOR)	+= sys-hypervisor.o

obj-$(CONFIG_XEN_MCE_LOG)		+= mcelog.o

obj-$(CONFIG_XEN_ACPI_PROCESSOR)	+= xen-acpi-processor.o

obj-$(CONFIG_XEN_AUTO_XLATE)		+= xlate_mmu.o

obj-$(CONFIG_XEN_PVCALLS_BACKEND)	+= pvcalls-back.o

obj-$(CONFIG_XEN_PVCALLS_FRONTEND)	+= pvcalls-front.o

xen-evtchn-y				:= evtchn.o

xen-gntdev-y				:= gntdev.o

xen-gntdev-$(CONFIG_XEN_GNTDEV_DMABUF)	+= gntdev-dmabuf.o

xen-gntalloc-y				:= gntalloc.o

xen-privcmd-y				:= privcmd.o privcmd-buf.o

obj-$(CONFIG_XEN_UNPOPULATED_ALLOC)	+= unpopulated-alloc.o

# SPDX-License-Identifier: GPL-2.0

obj-y	+= xenbus.o



xenbus-objs =

xenbus-objs += xenbus_xs.o

xenbus-objs += xenbus_probe.o

xenbus-be-objs-$(CONFIG_XEN_BACKEND) += xenbus_probe_backend.o



obj-$(CONFIG_XEN_BACKEND) += xenbus_dev_backend.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_XENFS) += xenfs.o

# SPDX-License-Identifier: GPL-2.0

 N.B. The below cannot be expressed with a single line using

# CONFIG_XEN_PCI_STUB as it always remains in "y" state,

# thus preventing the driver to be built as a module.

# Please note, that CONFIG_XEN_PCIDEV_BACKEND and

 CONFIG_XEN_PCIDEV_STUB are mutually exclusive.

obj-$(CONFIG_XEN_PCIDEV_STUB) += xen-pciback.o

xen-pciback-y := pci_stub.o pciback_ops.o xenbus.o

xen-pciback-y += conf_space.o conf_space_header.o \

		 passthrough.o

 SPDX-License-Identifier: GPL-2.0-only



events-y += events_base.o

events-y += events_2l.o

events-y += events_fifo.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ARM_AMBA)		+= bus.o

obj-$(CONFIG_TEGRA_AHB)		+= tegra-ahb.o

# SPDX-License-Identifier: GPL-2.0

#

# Generic Hardware Spinlock framework

#

obj-$(CONFIG_HWSPINLOCK)		+= hwspinlock_core.o

obj-$(CONFIG_HWSPINLOCK_OMAP)		+= omap_hwspinlock.o

obj-$(CONFIG_HWSPINLOCK_QCOM)		+= qcom_hwspinlock.o

obj-$(CONFIG_HWSPINLOCK_SPRD)		+= sprd_hwspinlock.o

obj-$(CONFIG_HWSPINLOCK_STM32)		+= stm32_hwspinlock.o

obj-$(CONFIG_HWSPINLOCK_SUN6I)		+= sun6i_hwspinlock.o

obj-$(CONFIG_HSEM_U8500)		+= u8500_hsem.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_MOST) += most_core.o

most_core-y :=	core.o \



obj-$(CONFIG_MOST_CDEV) += most_cdev.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the i2c core.





obj-$(CONFIG_I2C)		+= i2c-core.o

i2c-core-$(CONFIG_OF) 		+= i2c-core-of.o

obj-$(CONFIG_I2C_CHARDEV)	+= i2c-dev.o

obj-$(CONFIG_I2C_MUX)		+= i2c-mux.o

obj-y				+= algos/ busses/ muxes/

obj-$(CONFIG_I2C_STUB)		+= i2c-stub.o

obj-$(CONFIG_I2C_SLAVE_TESTUNIT)	+= i2c-slave-testunit.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the i2c bus drivers.

#

# ACPI drivers

obj-$(CONFIG_I2C_SCMI)		+= i2c-scmi.o

# PC SMBus host controller drivers

obj-$(CONFIG_I2C_ALI1563)	+= i2c-ali1563.o

obj-$(CONFIG_I2C_AMD756)	+= i2c-amd756.o

obj-$(CONFIG_I2C_AMD8111)	+= i2c-amd8111.o

obj-$(CONFIG_I2C_NFORCE2)	+= i2c-nforce2.o

obj-$(CONFIG_I2C_NVIDIA_GPU)	+= i2c-nvidia-gpu.o

obj-$(CONFIG_I2C_PIIX4)		+= i2c-piix4.o

obj-$(CONFIG_I2C_SIS630)	+= i2c-sis630.o

obj-$(CONFIG_I2C_VIAPRO)	+= i2c-viapro.o

 Mac SMBus host controller drivers

obj-$(CONFIG_I2C_POWERMAC)	+= i2c-powermac.o

 Embedded system I2C/SMBus host controller drivers

obj-$(CONFIG_I2C_ALTERA)	+= i2c-altera.o

obj-$(CONFIG_I2C_AMD_MP2)	+= i2c-amd-mp2-pci.o i2c-amd-mp2-plat.o

i2c-at91-objs			:= i2c-at91-core.o i2c-at91-master.o

obj-$(CONFIG_I2C_AU1550)	+= i2c-au1550.o

obj-$(CONFIG_I2C_AXXIA)		+= i2c-axxia.o

obj-$(CONFIG_I2C_BCM_IPROC)	+= i2c-bcm-iproc.o

obj-$(CONFIG_I2C_CBUS_GPIO)	+= i2c-cbus-gpio.o

obj-$(CONFIG_I2C_CPM)		+= i2c-cpm.o

obj-$(CONFIG_I2C_DESIGNWARE_CORE)			+= i2c-designware-core.o

i2c-designware-core-y					+= i2c-designware-master.o

i2c-designware-core-$(CONFIG_I2C_DESIGNWARE_SLAVE) 	+= i2c-designware-slave.o

i2c-designware-platform-$(CONFIG_I2C_DESIGNWARE_BAYTRAIL) += i2c-designware-baytrail.o

obj-$(CONFIG_I2C_DIGICOLOR)	+= i2c-digicolor.o

obj-$(CONFIG_I2C_EG20T)		+= i2c-eg20t.o

obj-$(CONFIG_I2C_EMEV2)		+= i2c-emev2.o

obj-$(CONFIG_I2C_HIGHLANDER)	+= i2c-highlander.o

obj-$(CONFIG_I2C_HISI)		+= i2c-hisi.o

obj-$(CONFIG_I2C_IBM_IIC)	+= i2c-ibm_iic.o

obj-$(CONFIG_I2C_IMG)		+= i2c-img-scb.o

obj-$(CONFIG_I2C_IMX)		+= i2c-imx.o

obj-$(CONFIG_I2C_IOP3XX)	+= i2c-iop3xx.o

obj-$(CONFIG_I2C_KEMPLD)	+= i2c-kempld.o

obj-$(CONFIG_I2C_LPC2K)		+= i2c-lpc2k.o

obj-$(CONFIG_I2C_MESON)		+= i2c-meson.o

obj-$(CONFIG_I2C_MPC)		+= i2c-mpc.o

obj-$(CONFIG_I2C_MT7621)	+= i2c-mt7621.o

obj-$(CONFIG_I2C_NOMADIK)	+= i2c-nomadik.o

obj-$(CONFIG_I2C_OCORES)	+= i2c-ocores.o

obj-$(CONFIG_I2C_OMAP)		+= i2c-omap.o

obj-$(CONFIG_I2C_OWL)		+= i2c-owl.o

i2c-pasemi-objs := i2c-pasemi-core.o i2c-pasemi-pci.o

obj-$(CONFIG_I2C_APPLE)	+= i2c-apple.o

obj-$(CONFIG_I2C_PXA_PCI)	+= i2c-pxa-pci.o

obj-$(CONFIG_I2C_QCOM_GENI)	+= i2c-qcom-geni.o

obj-$(CONFIG_I2C_QUP)		+= i2c-qup.o

obj-$(CONFIG_I2C_RIIC)		+= i2c-riic.o

obj-$(CONFIG_I2C_RK3X)		+= i2c-rk3x.o

obj-$(CONFIG_I2C_SH7760)	+= i2c-sh7760.o

obj-$(CONFIG_I2C_SIMTEC)	+= i2c-simtec.o

obj-$(CONFIG_I2C_SPRD)		+= i2c-sprd.o

obj-$(CONFIG_I2C_ST)		+= i2c-st.o

obj-$(CONFIG_I2C_STM32F7)	+= i2c-stm32f7-drv.o

obj-$(CONFIG_I2C_SYNQUACER)	+= i2c-synquacer.o

obj-$(CONFIG_I2C_TEGRA)		+= i2c-tegra.o

obj-$(CONFIG_I2C_UNIPHIER)	+= i2c-uniphier.o

obj-$(CONFIG_I2C_VERSATILE)	+= i2c-versatile.o

obj-$(CONFIG_I2C_WMT)		+= i2c-wmt.o

i2c-octeon-objs := i2c-octeon-core.o i2c-octeon-platdrv.o

i2c-thunderx-objs := i2c-octeon-core.o i2c-thunderx-pcidrv.o

obj-$(CONFIG_I2C_XILINX)	+= i2c-xiic.o

obj-$(CONFIG_I2C_XLR)		+= i2c-xlr.o



 External I2C/SMBus adapter drivers

obj-$(CONFIG_I2C_DIOLAN_U2C)	+= i2c-diolan-u2c.o

obj-$(CONFIG_I2C_DLN2)		+= i2c-dln2.o

obj-$(CONFIG_I2C_PARPORT)	+= i2c-parport.o

obj-$(CONFIG_I2C_TAOS_EVM)	+= i2c-taos-evm.o

obj-$(CONFIG_I2C_VIPERBOARD)	+= i2c-viperboard.o

 Other I2C/SMBus bus drivers

obj-$(CONFIG_I2C_BCM_KONA)	+= i2c-bcm-kona.o

obj-$(CONFIG_I2C_CROS_EC_TUNNEL)	+= i2c-cros-ec-tunnel.o

obj-$(CONFIG_I2C_MLXCPLD)	+= i2c-mlxcpld.o

obj-$(CONFIG_I2C_OPAL)		+= i2c-opal.o

obj-$(CONFIG_I2C_SIBYTE)	+= i2c-sibyte.o

obj-$(CONFIG_SCx200_ACB)	+= scx200_acb.o

obj-$(CONFIG_I2C_FSI)		+= i2c-fsi.o



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for multiplexer I2C chip drivers.





obj-$(CONFIG_I2C_DEMUX_PINCTRL)		+= i2c-demux-pinctrl.o

obj-$(CONFIG_I2C_MUX_GPIO)	+= i2c-mux-gpio.o

obj-$(CONFIG_I2C_MUX_LTC4306)	+= i2c-mux-ltc4306.o

obj-$(CONFIG_I2C_MUX_PCA9541)	+= i2c-mux-pca9541.o

obj-$(CONFIG_I2C_MUX_PINCTRL)	+= i2c-mux-pinctrl.o



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the i2c algorithms





obj-$(CONFIG_I2C_ALGOBIT)	+= i2c-algo-bit.o

obj-$(CONFIG_I2C_ALGOPCF)	+= i2c-algo-pcf.o

obj-$(CONFIG_I2C_ALGOPCA)	+= i2c-algo-pca.o

# SPDX-License-Identifier: GPL-2.0

 common clock types

obj-$(CONFIG_COMMON_CLK)	+= clk-fixed-factor.o

obj-$(CONFIG_COMMON_CLK)	+= clk-gate.o

obj-$(CONFIG_COMMON_CLK)	+= clk-fractional-divider.o

ifeq ($(CONFIG_OF), y)



# hardware specific clock types

# please keep this section sorted lexicographically by file path name

obj-$(CONFIG_ARCH_AXXIA)		+= clk-axm5516.o

obj-$(CONFIG_COMMON_CLK_BD718XX)	+= clk-bd718x7.o

obj-$(CONFIG_ARCH_CLPS711X)		+= clk-clps711x.o

obj-$(CONFIG_COMMON_CLK_CS2000_CP)	+= clk-cs2000-cp.o

obj-$(CONFIG_COMMON_CLK_GEMINI)		+= clk-gemini.o

obj-$(CONFIG_MACH_ASPEED_G6)		+= clk-ast2600.o

obj-$(CONFIG_CLK_HSDK)			+= clk-hsdk-pll.o

obj-$(CONFIG_LMK04832)			+= clk-lmk04832.o

obj-$(CONFIG_COMMON_CLK_LOCHNAGAR)	+= clk-lochnagar.o

obj-$(CONFIG_COMMON_CLK_MAX77686)	+= clk-max77686.o

obj-$(CONFIG_COMMON_CLK_MAX9485)	+= clk-max9485.o

obj-$(CONFIG_ARCH_MOXART)		+= clk-moxart.o

obj-$(CONFIG_ARCH_NPCM7XX)	    	+= clk-npcm7xx.o

obj-$(CONFIG_COMMON_CLK_OXNAS)		+= clk-oxnas.o

obj-$(CONFIG_CLK_LS1028A_PLLDIG)	+= clk-plldig.o

obj-$(CONFIG_CLK_QORIQ)			+= clk-qoriq.o

obj-$(CONFIG_COMMON_CLK_HI655X)		+= clk-hi655x.o

obj-$(CONFIG_COMMON_CLK_S2MPS11)	+= clk-s2mps11.o

obj-$(CONFIG_COMMON_CLK_SCMI)           += clk-scmi.o

obj-$(CONFIG_COMMON_CLK_SCPI)           += clk-scpi.o

obj-$(CONFIG_COMMON_CLK_SI5351)		+= clk-si5351.o

obj-$(CONFIG_COMMON_CLK_SI544)		+= clk-si544.o

obj-$(CONFIG_ARCH_VT8500)		+= clk-vt8500.o

obj-$(CONFIG_COMMON_CLK_WM831X)		+= clk-wm831x.o



 please keep this section sorted lexicographically by directory path name

obj-y					+= analogbits/

obj-$(CONFIG_COMMON_CLK_AT91)		+= at91/

obj-$(CONFIG_ARCH_ARTPEC)		+= axis/

obj-$(CONFIG_ARC_PLAT_AXS10X)		+= axs10x/

obj-y					+= imgtec/

obj-y					+= imx/

obj-y					+= ingenic/

obj-$(CONFIG_MACH_LOONGSON32)		+= loongson1/

ifeq ($(CONFIG_COMMON_CLK), y)

obj-$(CONFIG_ARCH_MXS)			+= mxs/

obj-$(CONFIG_COMMON_CLK_NXP)		+= nxp/

obj-y					+= ralink/

obj-y					+= renesas/

obj-$(CONFIG_ARCH_ROCKCHIP)		+= rockchip/

obj-$(CONFIG_CLK_SIFIVE)		+= sifive/

obj-y					+= socfpga/

obj-$(CONFIG_PLAT_SPEAR)		+= spear/

obj-$(CONFIG_SUNXI_CCU)			+= sunxi-ng/

obj-$(CONFIG_ARCH_TEGRA)		+= tegra/

obj-$(CONFIG_CLK_UNIPHIER)		+= uniphier/

obj-$(CONFIG_ARCH_U8500)		+= ux500/

obj-y					+= versatile/

obj-y					+= xilinx/

obj-$(CONFIG_COMMON_CLK_ZYNQMP)         += zynqmp/

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_MVEBU_CLK_COREDIV)	+= clk-corediv.o



obj-$(CONFIG_ARMADA_375_CLK)	+= armada-375.o

obj-$(CONFIG_ARMADA_39X_CLK)	+= armada-39x.o

obj-$(CONFIG_ARMADA_37XX_CLK)	+= armada-37xx-xtal.o

obj-$(CONFIG_ARMADA_AP806_SYSCON) += ap806-system-controller.o

obj-$(CONFIG_ARMADA_AP_CPU_CLK) += ap-cpu-clk.o

obj-$(CONFIG_DOVE_CLK)		+= dove.o dove-divider.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_COMMON_CLK_BOSTON)		+= clk-boston.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_COMMON_CLK_QCOM) += clk-qcom.o

clk-qcom-y += common.o

clk-qcom-y += clk-rcg2.o

clk-qcom-y += clk-regmap-divider.o

clk-qcom-y += clk-regmap-mux-div.o

clk-qcom-$(CONFIG_QCOM_GDSC) += gdsc.o

# Keep alphabetically sorted by config

obj-$(CONFIG_APQ_GCC_8084) += gcc-apq8084.o

obj-$(CONFIG_APQ_MMCC_8084) += mmcc-apq8084.o

obj-$(CONFIG_IPQ_APSS_PLL) += apss-ipq-pll.o

obj-$(CONFIG_IPQ_APSS_6018) += apss-ipq6018.o

obj-$(CONFIG_IPQ_GCC_4019) += gcc-ipq4019.o

obj-$(CONFIG_IPQ_GCC_6018) += gcc-ipq6018.o

obj-$(CONFIG_IPQ_GCC_806X) += gcc-ipq806x.o

obj-$(CONFIG_IPQ_GCC_8074) += gcc-ipq8074.o

obj-$(CONFIG_IPQ_LCC_806X) += lcc-ipq806x.o

obj-$(CONFIG_MDM_GCC_9607) += gcc-mdm9607.o

obj-$(CONFIG_MDM_GCC_9615) += gcc-mdm9615.o

obj-$(CONFIG_MDM_LCC_9615) += lcc-mdm9615.o

obj-$(CONFIG_MSM_GCC_8660) += gcc-msm8660.o

obj-$(CONFIG_MSM_GCC_8916) += gcc-msm8916.o

obj-$(CONFIG_MSM_GCC_8939) += gcc-msm8939.o

obj-$(CONFIG_MSM_GCC_8953) += gcc-msm8953.o

obj-$(CONFIG_MSM_GCC_8960) += gcc-msm8960.o

obj-$(CONFIG_MSM_GCC_8974) += gcc-msm8974.o

obj-$(CONFIG_MSM_GCC_8994) += gcc-msm8994.o

obj-$(CONFIG_MSM_GCC_8996) += gcc-msm8996.o

obj-$(CONFIG_MSM_LCC_8960) += lcc-msm8960.o

obj-$(CONFIG_MSM_GCC_8998) += gcc-msm8998.o

obj-$(CONFIG_MSM_GPUCC_8998) += gpucc-msm8998.o

obj-$(CONFIG_MSM_MMCC_8960) += mmcc-msm8960.o

obj-$(CONFIG_MSM_MMCC_8974) += mmcc-msm8974.o

obj-$(CONFIG_MSM_MMCC_8994) += mmcc-msm8994.o

obj-$(CONFIG_MSM_MMCC_8996) += mmcc-msm8996.o

obj-$(CONFIG_MSM_MMCC_8998) += mmcc-msm8998.o

obj-$(CONFIG_QCOM_A7PLL) += a7-pll.o

obj-$(CONFIG_QCOM_CLK_APCS_MSM8916) += apcs-msm8916.o

obj-$(CONFIG_QCOM_CLK_APCC_MSM8996) += clk-cpu-8996.o

obj-$(CONFIG_QCOM_CLK_APCS_SDX55) += apcs-sdx55.o

obj-$(CONFIG_QCOM_CLK_RPM) += clk-rpm.o

obj-$(CONFIG_QCOM_CLK_RPMH) += clk-rpmh.o

obj-$(CONFIG_QCOM_CLK_SMD_RPM) += clk-smd-rpm.o

obj-$(CONFIG_QCM_GCC_2290) += gcc-qcm2290.o

obj-$(CONFIG_QCS_GCC_404) += gcc-qcs404.o

obj-$(CONFIG_QCS_Q6SSTOP_404) += q6sstop-qcs404.o

obj-$(CONFIG_QCS_TURING_404) += turingcc-qcs404.o

obj-$(CONFIG_SC_CAMCC_7180) += camcc-sc7180.o

obj-$(CONFIG_SC_CAMCC_7280) += camcc-sc7280.o

obj-$(CONFIG_SC_DISPCC_7180) += dispcc-sc7180.o

obj-$(CONFIG_SC_DISPCC_7280) += dispcc-sc7280.o

obj-$(CONFIG_SC_GCC_7180) += gcc-sc7180.o

obj-$(CONFIG_SC_GCC_7280) += gcc-sc7280.o

obj-$(CONFIG_SC_GCC_8180X) += gcc-sc8180x.o

obj-$(CONFIG_SC_GPUCC_7180) += gpucc-sc7180.o

obj-$(CONFIG_SC_GPUCC_7280) += gpucc-sc7280.o

obj-$(CONFIG_SC_LPASSCC_7280) += lpasscc-sc7280.o

obj-$(CONFIG_KPSS_XCC) += kpss-xcc.o

obj-$(CONFIG_QCOM_HFPLL) += hfpll.o

obj-$(CONFIG_KRAITCC) += krait-cc.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_INGENIC_CGU_COMMON)	+= cgu.o pm.o

obj-$(CONFIG_INGENIC_CGU_JZ4725B)	+= jz4725b-cgu.o

obj-$(CONFIG_INGENIC_CGU_JZ4770)	+= jz4770-cgu.o

 SPDX-License-Identifier: GPL-2.0-only

 Amlogic clock drivers



obj-$(CONFIG_COMMON_CLK_MESON_AO_CLKC) += meson-aoclk.o

obj-$(CONFIG_COMMON_CLK_MESON_CPU_DYNDIV) += clk-cpu-dyndiv.o

obj-$(CONFIG_COMMON_CLK_MESON_DUALDIV) += clk-dualdiv.o

obj-$(CONFIG_COMMON_CLK_MESON_EE_CLKC) += meson-eeclk.o

obj-$(CONFIG_COMMON_CLK_MESON_MPLL) += clk-mpll.o

obj-$(CONFIG_COMMON_CLK_MESON_PHASE) += clk-phase.o

obj-$(CONFIG_COMMON_CLK_MESON_PLL) += clk-pll.o

obj-$(CONFIG_COMMON_CLK_MESON_REGMAP) += clk-regmap.o

obj-$(CONFIG_COMMON_CLK_MESON_SCLK_DIV) += sclk-div.o

obj-$(CONFIG_COMMON_CLK_MESON_VID_PLL_DIV) += vid-pll-div.o

 Amlogic Clock controllers



obj-$(CONFIG_COMMON_CLK_AXG) += axg.o axg-aoclk.o

obj-$(CONFIG_COMMON_CLK_AXG_AUDIO) += axg-audio.o

obj-$(CONFIG_COMMON_CLK_G12A) += g12a.o g12a-aoclk.o

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

#

# Samsung Clock specific Makefile

#

obj-$(CONFIG_EXYNOS_3250_COMMON_CLK)	+= clk-exynos3250.o

obj-$(CONFIG_EXYNOS_5250_COMMON_CLK)	+= clk-exynos5250.o

obj-$(CONFIG_EXYNOS_5260_COMMON_CLK)	+= clk-exynos5260.o

obj-$(CONFIG_EXYNOS_5420_COMMON_CLK)	+= clk-exynos5420.o

obj-$(CONFIG_EXYNOS_AUDSS_CLK_CON) += clk-exynos-audss.o

obj-$(CONFIG_EXYNOS_ARM64_COMMON_CLK)	+= clk-exynos7.o

obj-$(CONFIG_S3C2410_COMMON_CLK)+= clk-s3c2410.o

obj-$(CONFIG_S3C2412_COMMON_CLK)+= clk-s3c2412.o

# SPDX-License-Identifier: GPL-2.0

 Zynq Ultrascale+ MPSoC clock specific Makefile



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CLK_SIFIVE_PRCI)	+= sifive-prci.o fu540-prci.o fu740-prci.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for mstar specific clk

#

obj-$(CONFIG_MSTAR_MSC313_MPLL) += clk-msc313-mpll.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for mmp specific clk

#

obj-y += clk-apbc.o clk-apmu.o clk-frac.o clk-mix.o clk-gate.o clk.o



obj-$(CONFIG_COMMON_CLK_MMP2_AUDIO) += clk-audio.o

obj-$(CONFIG_CPU_PXA168) += clk-pxa168.o

obj-$(CONFIG_CPU_MMP2) += clk-mmp2.o

# SPDX-License-Identifier: GPL-2.0

#

# Hisilicon Clock specific Makefile

#



obj-$(CONFIG_ARCH_HI3xxx)	+= clk-hi3620.o

obj-$(CONFIG_ARCH_HIP04)	+= clk-hip04.o

obj-$(CONFIG_ARCH_HIX5HD2)	+= clk-hix5hd2.o

obj-$(CONFIG_COMMON_CLK_HI3516CV300)	+= crg-hi3516cv300.o

obj-$(CONFIG_COMMON_CLK_HI3519)	+= clk-hi3519.o

obj-$(CONFIG_COMMON_CLK_HI3559A)	+= clk-hi3559a.o

obj-$(CONFIG_COMMON_CLK_HI3660) += clk-hi3660.o

obj-$(CONFIG_COMMON_CLK_HI3670) += clk-hi3670.o

obj-$(CONFIG_COMMON_CLK_HI3798CV200)	+= crg-hi3798cv200.o

obj-$(CONFIG_COMMON_CLK_HI6220)	+= clk-hi6220.o

obj-$(CONFIG_RESET_HISI)	+= reset.o

obj-$(CONFIG_STUB_CLK_HI3660)	+= clk-hi3660-stub.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CLK_ACTIONS)	+= clk-owl.o

clk-owl-y			+= owl-mux.o

clk-owl-y			+= owl-composite.o

clk-owl-y			+= owl-reset.o

 SoC support

obj-$(CONFIG_CLK_OWL_S500)	+= owl-s500.o

obj-$(CONFIG_CLK_OWL_S900)	+= owl-s900.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y += berlin2-avpll.o berlin2-pll.o berlin2-div.o

obj-$(CONFIG_MACH_BERLIN_BG2CD)	+= bg2.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_TI_SCI_CLK)		+= sci-clk.o

# SPDX-License-Identifier: GPL-2.0

ifeq ($(CONFIG_COMMON_CLK), y)

obj-$(CONFIG_ARCH_DAVINCI_DA8XX)	+= da8xx-cfgchip.o

obj-y += pll.o

obj-$(CONFIG_ARCH_DAVINCI_DA830)	+= pll-da830.o

obj-$(CONFIG_ARCH_DAVINCI_DA850)	+= pll-da850.o

obj-$(CONFIG_ARCH_DAVINCI_DM355)	+= pll-dm355.o

obj-$(CONFIG_ARCH_DAVINCI_DM365)	+= pll-dm365.o

obj-$(CONFIG_ARCH_DAVINCI_DM644x)	+= pll-dm644x.o

obj-$(CONFIG_ARCH_DAVINCI_DM646x)	+= pll-dm646x.o

obj-y += psc.o

obj-$(CONFIG_ARCH_DAVINCI_DA830)	+= psc-da830.o

obj-$(CONFIG_ARCH_DAVINCI_DA850)	+= psc-da850.o

obj-$(CONFIG_ARCH_DAVINCI_DM355)	+= psc-dm355.o

obj-$(CONFIG_ARCH_DAVINCI_DM365)	+= psc-dm365.o

obj-$(CONFIG_ARCH_DAVINCI_DM644x)	+= psc-dm644x.o

obj-$(CONFIG_ARCH_DAVINCI_DM646x)	+= psc-dm646x.o

endif

# SPDX-License-Identifier: GPL-2.0



obj-y	+= clk-uniphier-cpugear.o

obj-y	+= clk-uniphier-fixed-rate.o



obj-y	+= clk-uniphier-sys.o

obj-y	+= clk-uniphier-mio.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ARCH_LPC18XX)	+= clk-lpc18xx-creg.o

obj-$(CONFIG_ARCH_LPC32XX)	+= clk-lpc32xx.o

# SPDX-License-Identifier: GPL-2.0

# SoC

obj-$(CONFIG_CLK_RZA1)			+= clk-rz.o

obj-$(CONFIG_CLK_R8A7742)		+= r8a7742-cpg-mssr.o

obj-$(CONFIG_CLK_R8A7745)		+= r8a7745-cpg-mssr.o

obj-$(CONFIG_CLK_R8A774A1)		+= r8a774a1-cpg-mssr.o

obj-$(CONFIG_CLK_R8A774C0)		+= r8a774c0-cpg-mssr.o

obj-$(CONFIG_CLK_R8A7790)		+= r8a7790-cpg-mssr.o

obj-$(CONFIG_CLK_R8A7792)		+= r8a7792-cpg-mssr.o

obj-$(CONFIG_CLK_R8A7795)		+= r8a7795-cpg-mssr.o

obj-$(CONFIG_CLK_R8A77960)		+= r8a7796-cpg-mssr.o

obj-$(CONFIG_CLK_R8A77961)		+= r8a7796-cpg-mssr.o

obj-$(CONFIG_CLK_R8A77970)		+= r8a77970-cpg-mssr.o

obj-$(CONFIG_CLK_R8A77990)		+= r8a77990-cpg-mssr.o

obj-$(CONFIG_CLK_R8A779A0)		+= r8a779a0-cpg-mssr.o



 Family

obj-$(CONFIG_CLK_RCAR_USB2_CLOCK_SEL)	+= rcar-usb2-clock-sel.o



# Generic

obj-$(CONFIG_CLK_RENESAS_CPG_MSTP)	+= clk-mstp.o

obj-$(CONFIG_CLK_RENESAS_DIV6)		+= clk-div6.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y	+= clk.o

obj-y	+= clk-pistachio.o

# SPDX-License-Identifier: GPL-2.0

#

 Rockchip Clock specific Makefile





obj-$(CONFIG_COMMON_CLK_ROCKCHIP) += clk-rockchip.o

clk-rockchip-y += clk-half-divider.o

clk-rockchip-y += clk-muxgrf.o

clk-rockchip-y += clk-ddr.o



obj-$(CONFIG_CLK_PX30)          += clk-px30.o

obj-$(CONFIG_CLK_RV110X)        += clk-rv1108.o

obj-$(CONFIG_CLK_RK3036)        += clk-rk3036.o

obj-$(CONFIG_CLK_RK312X)        += clk-rk3128.o

obj-$(CONFIG_CLK_RK3188)        += clk-rk3188.o

obj-$(CONFIG_CLK_RK322X)        += clk-rk3228.o

obj-$(CONFIG_CLK_RK3288)        += clk-rk3288.o

obj-$(CONFIG_CLK_RK3308)        += clk-rk3308.o

obj-$(CONFIG_CLK_RK3328)        += clk-rk3328.o

obj-$(CONFIG_CLK_RK3368)        += clk-rk3368.o

obj-$(CONFIG_CLK_RK3399)        += clk-rk3399.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y += i2s_pll_clock.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_COMMON_CLK_PIC32) += clk-core.o

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CLK_BCM_63XX)	+= clk-bcm63xx.o

obj-$(CONFIG_CLK_BCM_63XX_GATE)	+= clk-bcm63xx-gate.o

obj-$(CONFIG_CLK_BCM_KONA)	+= clk-kona-setup.o

obj-$(CONFIG_CLK_BCM_KONA)	+= clk-bcm21664.o

obj-$(CONFIG_COMMON_CLK_IPROC)	+= clk-iproc-armpll.o clk-iproc-pll.o clk-iproc-asiu.o

obj-$(CONFIG_CLK_BCM2835)	+= clk-bcm2835.o

obj-$(CONFIG_CLK_RASPBERRYPI)	+= clk-raspberrypi.o

obj-$(CONFIG_CLK_BCM_CYGNUS)	+= clk-cygnus.o

obj-$(CONFIG_CLK_BCM_NSP)	+= clk-nsp.o

obj-$(CONFIG_CLK_BCM_SR)	+= clk-sr.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y += clk-div.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CLK_BT1_CCU_PLL) += ccu-pll.o clk-ccu-pll.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_LOONGSON1_LS1B)	+= clk-loongson1b.o

 SPDX-License-Identifier: GPL-2.0-only

# Zynq clock specific Makefile

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_X86_AMD_PLATFORM_DEVICE)	+= clk-fch.o

clk-x86-lpss-y			:= clk-lpss-atom.o

obj-$(CONFIG_CLK_LGM_CGU)	+= clk-cgu.o clk-cgu-pll.o clk-lgm.o

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_COMMON_CLK_MT6765) += clk-mt6765.o

obj-$(CONFIG_COMMON_CLK_MT6765_CAMSYS) += clk-mt6765-cam.o

obj-$(CONFIG_COMMON_CLK_MT6765_MIPI0ASYS) += clk-mt6765-mipi0a.o

obj-$(CONFIG_COMMON_CLK_MT6765_VCODECSYS) += clk-mt6765-vcodec.o

obj-$(CONFIG_COMMON_CLK_MT6779) += clk-mt6779.o

obj-$(CONFIG_COMMON_CLK_MT6779_IMGSYS) += clk-mt6779-img.o

obj-$(CONFIG_COMMON_CLK_MT6779_CAMSYS) += clk-mt6779-cam.o

obj-$(CONFIG_COMMON_CLK_MT6779_VENCSYS) += clk-mt6779-venc.o

obj-$(CONFIG_COMMON_CLK_MT6779_AUDSYS) += clk-mt6779-aud.o

obj-$(CONFIG_COMMON_CLK_MT6797) += clk-mt6797.o

obj-$(CONFIG_COMMON_CLK_MT6797_MMSYS) += clk-mt6797-mm.o

obj-$(CONFIG_COMMON_CLK_MT6797_VENCSYS) += clk-mt6797-venc.o

obj-$(CONFIG_COMMON_CLK_MT2701) += clk-mt2701.o

obj-$(CONFIG_COMMON_CLK_MT2701_BDPSYS) += clk-mt2701-bdp.o

obj-$(CONFIG_COMMON_CLK_MT2701_G3DSYS) += clk-mt2701-g3d.o

obj-$(CONFIG_COMMON_CLK_MT2701_IMGSYS) += clk-mt2701-img.o

obj-$(CONFIG_COMMON_CLK_MT2701_VDECSYS) += clk-mt2701-vdec.o

obj-$(CONFIG_COMMON_CLK_MT2712) += clk-mt2712.o

obj-$(CONFIG_COMMON_CLK_MT2712_IMGSYS) += clk-mt2712-img.o

obj-$(CONFIG_COMMON_CLK_MT2712_MFGCFG) += clk-mt2712-mfg.o

obj-$(CONFIG_COMMON_CLK_MT2712_VDECSYS) += clk-mt2712-vdec.o

obj-$(CONFIG_COMMON_CLK_MT7622_ETHSYS) += clk-mt7622-eth.o

obj-$(CONFIG_COMMON_CLK_MT7622_AUDSYS) += clk-mt7622-aud.o

obj-$(CONFIG_COMMON_CLK_MT7629) += clk-mt7629.o

obj-$(CONFIG_COMMON_CLK_MT7629_HIFSYS) += clk-mt7629-hif.o

obj-$(CONFIG_COMMON_CLK_MT8135) += clk-mt8135.o

obj-$(CONFIG_COMMON_CLK_MT8167) += clk-mt8167.o

obj-$(CONFIG_COMMON_CLK_MT8167_IMGSYS) += clk-mt8167-img.o

obj-$(CONFIG_COMMON_CLK_MT8167_MFGCFG) += clk-mt8167-mfgcfg.o

obj-$(CONFIG_COMMON_CLK_MT8167_VDECSYS) += clk-mt8167-vdec.o

obj-$(CONFIG_COMMON_CLK_MT8173) += clk-mt8173.o

obj-$(CONFIG_COMMON_CLK_MT8183_AUDIOSYS) += clk-mt8183-audio.o

obj-$(CONFIG_COMMON_CLK_MT8183_IMGSYS) += clk-mt8183-img.o

obj-$(CONFIG_COMMON_CLK_MT8183_IPU_CORE1) += clk-mt8183-ipu1.o

obj-$(CONFIG_COMMON_CLK_MT8183_IPU_ADL) += clk-mt8183-ipu_adl.o

obj-$(CONFIG_COMMON_CLK_MT8183_IPU_CONN) += clk-mt8183-ipu_conn.o

obj-$(CONFIG_COMMON_CLK_MT8183_MFGCFG) += clk-mt8183-mfgcfg.o

obj-$(CONFIG_COMMON_CLK_MT8183_VDECSYS) += clk-mt8183-vdec.o

obj-$(CONFIG_COMMON_CLK_MT8192_AUDSYS) += clk-mt8192-aud.o

obj-$(CONFIG_COMMON_CLK_MT8192_IMGSYS) += clk-mt8192-img.o

obj-$(CONFIG_COMMON_CLK_MT8192_IMP_IIC_WRAP) += clk-mt8192-imp_iic_wrap.o

obj-$(CONFIG_COMMON_CLK_MT8192_MDPSYS) += clk-mt8192-mdp.o

obj-$(CONFIG_COMMON_CLK_MT8192_MMSYS) += clk-mt8192-mm.o

obj-$(CONFIG_COMMON_CLK_MT8192_MSDC) += clk-mt8192-msdc.o

obj-$(CONFIG_COMMON_CLK_MT8192_SCP_ADSP) += clk-mt8192-scp_adsp.o

obj-$(CONFIG_COMMON_CLK_MT8192_VENCSYS) += clk-mt8192-venc.o

				   clk-mt8195-ipe.o clk-mt8195-mfg.o clk-mt8195-scp_adsp.o \

				   clk-mt8195-venc.o clk-mt8195-vpp0.o clk-mt8195-vpp1.o \

				   clk-mt8195-wpe.o clk-mt8195-imp_iic_wrap.o \

obj-$(CONFIG_COMMON_CLK_MT8516_AUDSYS) += clk-mt8516-aud.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for mxs specific clk





obj-y += clk.o clk-pll.o clk-ref.o clk-div.o clk-frac.o clk-ssp.o

obj-$(CONFIG_SOC_IMX23) += clk-imx23.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for sunxi specific clk

#

obj-$(CONFIG_CLK_SUNXI) += clk-factors.o

obj-$(CONFIG_CLK_SUNXI_CLOCKS) += clk-a10-hosc.o

obj-$(CONFIG_CLK_SUNXI_CLOCKS) += clk-a10-pll2.o

obj-$(CONFIG_CLK_SUNXI_CLOCKS) += clk-a20-gmac.o

obj-$(CONFIG_CLK_SUNXI_CLOCKS) += clk-simple-gates.o

obj-$(CONFIG_CLK_SUNXI_CLOCKS) += clk-sun4i-display.o

obj-$(CONFIG_CLK_SUNXI_CLOCKS) += clk-sun4i-tcon-ch1.o

obj-$(CONFIG_CLK_SUNXI_CLOCKS) += clk-sun8i-bus-gates.o

obj-$(CONFIG_CLK_SUNXI_CLOCKS) += clk-sun9i-core.o

obj-$(CONFIG_CLK_SUNXI_CLOCKS) += clk-sun9i-mmc.o

obj-$(CONFIG_CLK_SUNXI_CLOCKS) += clk-usb.o

obj-$(CONFIG_CLK_SUNXI_CLOCKS) += clk-sun8i-apb0.o



obj-$(CONFIG_CLK_SUNXI_PRCM_SUN6I)	+= clk-sun6i-apb0-gates.o

obj-$(CONFIG_CLK_SUNXI_PRCM_SUN6I)	+= clk-sun6i-ar100.o

obj-$(CONFIG_CLK_SUNXI_PRCM_SUN8I)	+= clk-sun8i-apb0.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for at91 specific clk





obj-y += pmc.o sckc.o dt-compat.o



obj-$(CONFIG_HAVE_AT91_GENERATED_CLK)	+= clk-generated.o

obj-$(CONFIG_HAVE_AT91_SAM9X60_PLL)	+= clk-sam9x60-pll.o

obj-$(CONFIG_SOC_AT91SAM9) += at91sam9n12.o at91sam9x5.o

obj-$(CONFIG_SOC_SAMA5D3) += sama5d3.o

obj-$(CONFIG_SOC_SAMA5D2) += sama5d2.o

# SPDX-License-Identifier: GPL-2.0

#

# SPEAr Clock specific Makefile

#



obj-$(CONFIG_ARCH_SPEAR3XX)	+= spear3xx_clock.o

obj-$(CONFIG_ARCH_SPEAR6XX)	+= spear6xx_clock.o

obj-$(CONFIG_MACH_SPEAR1310)	+= spear1310_clock.o

obj-$(CONFIG_MACH_SPEAR1340)	+= spear1340_clock.o

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for Versatile-specific clocks

obj-$(CONFIG_CLK_VEXPRESS_OSC)	+= clk-vexpress-osc.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ux500 clocks

#

 Clock types

obj-y += clk-prcmu.o



# Reset control

obj-y += reset-prcc.o

 Clock definitions



# ABX500 clock driver

obj-y += abx500-clk.o

# SPDX-License-Identifier: GPL-2.0

obj-y					+= clk-divider.o

obj-y					+= clk-periph.o

obj-y					+= clk-periph-fixed.o

obj-y					+= clk-pll.o

obj-y					+= clk-sdmmc-mux.o

obj-y					+= clk-tegra-audio.o

obj-y					+= clk-tegra-periph.o

obj-$(CONFIG_ARCH_TEGRA_2x_SOC)         += clk-tegra20.o

obj-$(CONFIG_ARCH_TEGRA_2x_SOC)		+= clk-tegra20-emc.o

obj-$(CONFIG_ARCH_TEGRA_114_SOC)	+= clk-tegra114.o

obj-$(CONFIG_ARCH_TEGRA_132_SOC)	+= clk-tegra124.o

obj-$(CONFIG_ARCH_TEGRA_210_SOC)	+= clk-tegra210.o

obj-y					+= clk-utils.o

# SPDX-License-Identifier: GPL-2.0



obj-y					+= clk.o autoidle.o clockdomain.o

clk-common				= dpll.o composite.o divider.o gate.o \

					  clkt_dpll.o clkt_iclk.o clkt_dflt.o \

obj-$(CONFIG_SOC_AM33XX)		+= $(clk-common) clk-33xx.o dpll3xxx.o \

obj-$(CONFIG_SOC_TI81XX)		+= $(clk-common) fapll.o clk-814x.o clk-816x.o

obj-$(CONFIG_ARCH_OMAP2)		+= $(clk-common) interface.o clk-2xxx.o

obj-$(CONFIG_SOC_DRA7XX)		+= $(clk-common) clk-7xx.o \

					   clk-dra7-atl.o dpll3xxx.o \

					   dpll44xx.o clk-7xx-compat.o



endif	# CONFIG_ARCH_OMAP2PLUS

obj-$(CONFIG_COMMON_CLK_TI_ADPLL)	+= adpll.o

# SPDX-License-Identifier: GPL-2.0

mxc-clk-objs += clk-busy.o

mxc-clk-objs += clk-composite-8m.o

mxc-clk-objs += clk-cpu.o

mxc-clk-objs += clk-frac-pll.o

mxc-clk-objs += clk-gate2.o

mxc-clk-objs += clk-sscg-pll.o



obj-$(CONFIG_CLK_IMX8MN) += clk-imx8mn.o

obj-$(CONFIG_CLK_IMX8MQ) += clk-imx8mq.o

clk-imx-scu-$(CONFIG_CLK_IMX8QXP) += clk-scu.o clk-imx8qxp.o \

				     clk-imx8qxp-rsrc.o clk-imx8qm-rsrc.o

clk-imx-lpcg-scu-$(CONFIG_CLK_IMX8QXP) += clk-lpcg-scu.o clk-imx8qxp-lpcg.o

obj-$(CONFIG_CLK_IMX8ULP) += clk-imx8ulp.o

obj-$(CONFIG_CLK_IMX1)   += clk-imx1.o

obj-$(CONFIG_CLK_IMX25)  += clk-imx25.o

obj-$(CONFIG_CLK_IMX27)  += clk-imx27.o

obj-$(CONFIG_CLK_IMX31)  += clk-imx31.o

obj-$(CONFIG_CLK_IMX35)  += clk-imx35.o

obj-$(CONFIG_CLK_IMX6SL) += clk-imx6sl.o

obj-$(CONFIG_CLK_IMX6SX) += clk-imx6sx.o

obj-$(CONFIG_CLK_IMX7ULP) += clk-imx7ulp.o

obj-$(CONFIG_CLK_VF610)  += clk-vf610.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y += clkgen-mux.o clkgen-pll.o clkgen-fsyn.o clk-flexgen.o

# SPDX-License-Identifier: GPL-2.0

 Common objects

obj-y				+= ccu_common.o



 Base clock types

obj-y				+= ccu_frac.o

obj-y				+= ccu_mult.o

obj-y				+= ccu_phase.o

obj-y				+= ccu_sdm.o

 Multi-factor clocks

obj-y				+= ccu_nk.o

obj-y				+= ccu_nkm.o

obj-y				+= ccu_nm.o



# SoC support

obj-$(CONFIG_SUN50I_A64_CCU)	+= ccu-sun50i-a64.o

obj-$(CONFIG_SUN50I_A100_R_CCU)	+= ccu-sun50i-a100-r.o

obj-$(CONFIG_SUN50I_H616_CCU)	+= ccu-sun50i-h616.o

obj-$(CONFIG_SUN4I_A10_CCU)	+= ccu-sun4i-a10.o

obj-$(CONFIG_SUN5I_CCU)		+= ccu-sun5i.o

obj-$(CONFIG_SUN8I_A23_CCU)	+= ccu-sun8i-a23.o

obj-$(CONFIG_SUN8I_A83T_CCU)	+= ccu-sun8i-a83t.o

obj-$(CONFIG_SUN8I_V3S_CCU)	+= ccu-sun8i-v3s.o

obj-$(CONFIG_SUN8I_R_CCU)	+= ccu-sun8i-r.o

obj-$(CONFIG_SUN9I_A80_CCU)	+= ccu-sun9i-a80.o

obj-$(CONFIG_SUN9I_A80_CCU)	+= ccu-sun9i-a80-de.o

# SPDX-License-Identifier: GPL-2.0

				     clk-pll-a10.o clk-periph-a10.o clk-gate-a10.o

				     clk-pll-s10.o clk-periph-s10.o clk-gate-s10.o \

				     clk-agilex.o

 SPDX-License-Identifier: GPL-2.0-only



clk-sprd-y	+= gate.o

clk-sprd-y	+= mux.o

clk-sprd-y	+= div.o

clk-sprd-y	+= composite.o

clk-sprd-y	+= pll.o

## SoC support

obj-$(CONFIG_SPRD_SC9860_CLK)	+= sc9860-clk.o

obj-$(CONFIG_SPRD_SC9863A_CLK)	+= sc9863a-clk.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_VGASTATE)            += vgastate.o

obj-$(CONFIG_HDMI)                += hdmi.o

obj-$(CONFIG_LOGO)		  += logo/





obj-$(CONFIG_VIDEOMODE_HELPERS) += display_timing.o videomode.o

ifeq ($(CONFIG_OF),y)

obj-$(CONFIG_VIDEOMODE_HELPERS) += of_display_timing.o of_videomode.o

endif

# SPDX-License-Identifier: GPL-2.0

# Backlight & LCD drivers

obj-$(CONFIG_LCD_CLASS_DEVICE)		+= lcd.o

obj-$(CONFIG_LCD_TOSA)			+= tosa_lcd.o

obj-$(CONFIG_LCD_VGG2432A4)		+= vgg2432a4.o

obj-$(CONFIG_BACKLIGHT_AAT2870)		+= aat2870_bl.o

obj-$(CONFIG_BACKLIGHT_ADP8860)		+= adp8860_bl.o

obj-$(CONFIG_BACKLIGHT_APPLE)		+= apple_bl.o

obj-$(CONFIG_BACKLIGHT_DA903X)		+= da903x_bl.o

obj-$(CONFIG_BACKLIGHT_EP93XX)		+= ep93xx_bl.o

obj-$(CONFIG_BACKLIGHT_GPIO)		+= gpio_backlight.o

obj-$(CONFIG_BACKLIGHT_LM3533)		+= lm3533_bl.o

obj-$(CONFIG_BACKLIGHT_LM3639)		+= lm3639_bl.o

obj-$(CONFIG_BACKLIGHT_LP855X)		+= lp855x_bl.o

obj-$(CONFIG_BACKLIGHT_LV5207LP)	+= lv5207lp.o

obj-$(CONFIG_BACKLIGHT_OMAP1)		+= omap1_bl.o

obj-$(CONFIG_BACKLIGHT_PCF50633)	+= pcf50633-backlight.o

obj-$(CONFIG_BACKLIGHT_QCOM_WLED)	+= qcom-wled.o

obj-$(CONFIG_BACKLIGHT_RT4831)		+= rt4831-backlight.o

obj-$(CONFIG_BACKLIGHT_SKY81452)	+= sky81452-backlight.o

obj-$(CONFIG_BACKLIGHT_WM831X)		+= wm831x_bl.o

obj-$(CONFIG_BACKLIGHT_LED)		+= led_bl.o

# SPDX-License-Identifier: GPL-2.0

# Makefile for the Linux graphics to console drivers.

# 5 Aug 1999, James Simmons, <mailto:jsimmons@users.sf.net>

 Rewritten to use lists instead of if-statements.



obj-$(CONFIG_DUMMY_CONSOLE)       += dummycon.o



# SPDX-License-Identifier: GPL-2.0

 Makefile for the Linux logos



obj-$(CONFIG_LOGO_LINUX_CLUT224)	+= logo_linux_clut224.o

obj-$(CONFIG_LOGO_DEC_CLUT224)		+= logo_dec_clut224.o

obj-$(CONFIG_LOGO_MAC_CLUT224)		+= logo_mac_clut224.o

obj-$(CONFIG_LOGO_SUPERH_CLUT224)	+= logo_superh_clut224.o

obj-$(CONFIG_SPU_BASE)			+= logo_spe_clut224.o

# How to generate logo's

hostprogs := pnmtologo

# Create commands like "pnmtologo -t mono -n logo_mac_mono -o ..."

quiet_cmd_logo = LOGO    $@

      cmd_logo = $(obj)/pnmtologo -t $(lastword $(subst _, ,$*)) -n $* -o $@ $<

	$(call if_changed,logo)

	$(call if_changed,logo)

	$(call if_changed,logo)

 generated C files

# SPDX-License-Identifier: GPL-2.0

# Makefile for the Linux video drivers.

# 5 Aug 1999, James Simmons, <mailto:jsimmons@users.sf.net>

 Rewritten to use lists instead of if-statements.



 Each configuration option enables a list of files.



obj-y				+= core/

obj-$(CONFIG_FB_MACMODES)      += macmodes.o

obj-$(CONFIG_FB_WMT_GE_ROPS)   += wmt_ge_rops.o

# Hardware specific drivers go first

obj-$(CONFIG_FB_AMIGA)            += amifb.o c2p_planar.o

obj-$(CONFIG_FB_CLPS711X)	  += clps711x-fb.o

obj-$(CONFIG_FB_GRVGA)            += grvga.o

obj-$(CONFIG_FB_PM3)		  += pm3fb.o

obj-$(CONFIG_FB_I740)		  += i740fb.o

obj-$(CONFIG_FB_MATROX)		  += matrox/

obj-$(CONFIG_FB_RIVA)		  += riva/

obj-$(CONFIG_FB_NVIDIA)		  += nvidia/

obj-$(CONFIG_FB_RADEON)		  += aty/

obj-$(CONFIG_FB_SIS)		  += sis/

obj-$(CONFIG_FB_VIA)		  += via/

obj-$(CONFIG_FB_NEOMAGIC)         += neofb.o

obj-$(CONFIG_FB_3DFX)             += tdfxfb.o

obj-$(CONFIG_FB_CT65550)          += chipsfb.o

obj-$(CONFIG_FB_FM2)              += fm2fb.o

obj-$(CONFIG_FB_VT8623)           += vt8623fb.o

obj-$(CONFIG_FB_ARK)              += arkfb.o

obj-$(CONFIG_FB_FFB)              += ffb.o sbuslib.o

obj-$(CONFIG_FB_CG3)              += cg3.o sbuslib.o

obj-$(CONFIG_FB_P9100)            += p9100.o sbuslib.o

obj-$(CONFIG_FB_LEO)              += leo.o sbuslib.o

obj-$(CONFIG_FB_MAC)              += macfb.o

obj-$(CONFIG_FB_HECUBA)           += hecubafb.o

obj-$(CONFIG_FB_N411)             += n411.o

obj-$(CONFIG_FB_XVR500)           += sunxvr500.o

obj-$(CONFIG_FB_XVR2500)          += sunxvr2500.o

obj-$(CONFIG_FB_XVR1000)          += sunxvr1000.o

obj-$(CONFIG_FB_APOLLO)           += dnfb.o

obj-$(CONFIG_FB_TGA)              += tgafb.o

obj-$(CONFIG_FB_HP300)            += hpfb.o

obj-$(CONFIG_FB_G364)             += g364fb.o

obj-$(CONFIG_FB_EP93XX)		  += ep93xx-fb.o

obj-$(CONFIG_FB_SA1100)           += sa1100fb.o

obj-$(CONFIG_FB_ATMEL)		  += atmel_lcdfb.o

obj-$(CONFIG_FB_PVR2)             += pvr2fb.o

obj-$(CONFIG_FB_68328)            += 68328fb.o

obj-$(CONFIG_FB_CIRRUS)		  += cirrusfb.o

obj-$(CONFIG_FB_ASILIANT)	  += asiliantfb.o

obj-$(CONFIG_FB_PXA168)		  += pxa168fb.o

obj-$(CONFIG_MMP_DISP)           += mmp/

obj-$(CONFIG_FB_TMIO)		  += tmiofb.o

obj-$(CONFIG_FB_AU1200)		  += au1200fb.o

obj-$(CONFIG_FB_VT8500)		  += vt8500lcdfb.o

obj-$(CONFIG_FB_PMAG_AA)	  += pmag-aa-fb.o

obj-$(CONFIG_FB_PMAGB_B)	  += pmagb-b-fb.o

obj-$(CONFIG_FB_METRONOME)        += metronomefb.o

obj-$(CONFIG_FB_BROADSHEET)       += broadsheetfb.o

obj-$(CONFIG_FB_S1D13XXX)	  += s1d13xxxfb.o

obj-$(CONFIG_FB_IMX)              += imxfb.o

obj-$(CONFIG_FB_S3C)		  += s3c-fb.o

obj-$(CONFIG_FB_S3C2410)	  += s3c2410fb.o

obj-$(CONFIG_FB_PS3)		  += ps3fb.o

obj-$(CONFIG_FB_UDL)		  += udlfb.o

obj-$(CONFIG_FB_SMSCUFX)	  += smscufx.o

obj-$(CONFIG_FB_XILINX)           += xilinxfb.o

obj-$(CONFIG_FB_SH_MOBILE_LCDC)	  += sh_mobile_lcdcfb.o

obj-$(CONFIG_XEN_FBDEV_FRONTEND)  += xen-fbfront.o

obj-$(CONFIG_FB_MB862XX)	  += mb862xx/

obj-$(CONFIG_FB_HYPERV)		  += hyperv_fb.o

obj-$(CONFIG_FB_SM712)		  += sm712fb.o

# Platform or fallback drivers go here

obj-$(CONFIG_FB_EFI)              += efifb.o

obj-$(CONFIG_FB_MX3)		  += mx3fb.o

obj-$(CONFIG_FB_DA8XX)		  += da8xx-fb.o

obj-$(CONFIG_FB_SSD1307)	  += ssd1307fb.o

obj-$(CONFIG_FB_SIMPLE)           += simplefb.o

# the test framebuffer is last

 SPDX-License-Identifier: GPL-2.0-only

obj-y += omapfb/

# SPDX-License-Identifier: GPL-2.0

obj-y += displays/

obj-$(CONFIG_FB_OMAP2) += omap2fb.o

# SPDX-License-Identifier: GPL-2.0

# Core DSS files

	output.o dss-of.o pll.o video-pll.o

 DSS compat layer files

omapdss-y += manager.o manager-sysfs.o overlay.o overlay-sysfs.o apply.o \

	dispc-compat.o display-sysfs.o

omapdss-$(CONFIG_FB_OMAP2_DSS_DPI) += dpi.o

omapdss-$(CONFIG_FB_OMAP2_DSS_VENC) += venc.o

omapdss-$(CONFIG_FB_OMAP2_DSS_SDI) += sdi.o

omapdss-$(CONFIG_FB_OMAP2_DSS_DSI) += dsi.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_FB_OMAP2_ENCODER_OPA362) += encoder-opa362.o

obj-$(CONFIG_FB_OMAP2_ENCODER_TFP410) += encoder-tfp410.o

obj-$(CONFIG_FB_OMAP2_ENCODER_TPD12S015) += encoder-tpd12s015.o

obj-$(CONFIG_FB_OMAP2_CONNECTOR_DVI) += connector-dvi.o

obj-$(CONFIG_FB_OMAP2_CONNECTOR_HDMI) += connector-hdmi.o

obj-$(CONFIG_FB_OMAP2_CONNECTOR_ANALOG_TV) += connector-analog-tv.o

obj-$(CONFIG_FB_OMAP2_PANEL_DPI) += panel-dpi.o

obj-$(CONFIG_FB_OMAP2_PANEL_DSI_CM) += panel-dsi-cm.o

obj-$(CONFIG_FB_OMAP2_PANEL_SONY_ACX565AKM) += panel-sony-acx565akm.o

obj-$(CONFIG_FB_OMAP2_PANEL_LGPHILIPS_LB035Q02) += panel-lgphilips-lb035q02.o

obj-$(CONFIG_FB_OMAP2_PANEL_SHARP_LS037V7DW01) += panel-sharp-ls037v7dw01.o

obj-$(CONFIG_FB_OMAP2_PANEL_TPO_TD028TTEC1) += panel-tpo-td028ttec1.o

obj-$(CONFIG_FB_OMAP2_PANEL_TPO_TD043MTEA1) += panel-tpo-td043mtea1.o

obj-$(CONFIG_FB_OMAP2_PANEL_NEC_NL8048HL11) += panel-nec-nl8048hl11.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the SiS framebuffer device driver

#



# SPDX-License-Identifier: GPL-2.0

# Makefile for the Geode family framebuffer drivers

obj-$(CONFIG_FB_GEODE_GX)  += gxfb.o



gx1fb-objs := gx1fb_core.o display_gx1.o video_cs5530.o

lxfb-objs  := lxfb_core.o lxfb_ops.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the OMAP1 framebuffer device driver





obj-$(CONFIG_FB_OMAP) += omapfb.o





objs-y$(CONFIG_FB_OMAP_LCDC_HWA742) += hwa742.o

lcds-y$(CONFIG_FB_OMAP_LCD_H3) += lcd_h3.o

lcds-y$(CONFIG_MACH_OMAP_PALMTT) += lcd_palmtt.o

lcds-$(CONFIG_ARCH_OMAP16XX)$(CONFIG_MACH_OMAP_INNOVATOR) += lcd_inn1610.o

lcds-y$(CONFIG_MACH_OMAP_OSK) += lcd_osk.o

lcds-y$(CONFIG_FB_OMAP_LCD_MIPID) += lcd_mipid.o



omapfb-objs := $(objs-yy)

 SPDX-License-Identifier: GPL-2.0-only



mmp_disp-y		+= core.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MMP_FB)  += mmpfb.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MMP_DISP_CONTROLLER)  += mmp_ctrl.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_FB_ATY) += atyfb.o

obj-$(CONFIG_FB_ATY128) += aty128fb.o

obj-$(CONFIG_FB_RADEON) += radeonfb.o

atyfb-$(CONFIG_FB_ATY_GX)	+= mach64_gx.o





radeonfb-y			:= radeon_base.o radeon_pm.o radeon_monitor.o radeon_accel.o

radeonfb-$(CONFIG_FB_RADEON_BACKLIGHT)	+= radeon_backlight.o



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the MB862xx framebuffer driver





obj-$(CONFIG_FB_MB862XX) += mb862xxfb.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_FB_CMDLINE)          += fb_cmdline.o



ifeq ($(CONFIG_FB_TILEBLITTING),y)

fb-y				  += tileblit.o

endif

ifeq ($(CONFIG_FRAMEBUFFER_CONSOLE_ROTATION),y)

fb-y				  += fbcon_rotate.o fbcon_cw.o fbcon_ud.o \



obj-$(CONFIG_FB_CFB_FILLRECT)  += cfbfillrect.o

obj-$(CONFIG_FB_CFB_COPYAREA)  += cfbcopyarea.o

obj-$(CONFIG_FB_CFB_IMAGEBLIT) += cfbimgblt.o

obj-$(CONFIG_FB_SYS_FILLRECT)  += sysfillrect.o

obj-$(CONFIG_FB_SYS_COPYAREA)  += syscopyarea.o

obj-$(CONFIG_FB_SYS_IMAGEBLIT) += sysimgblt.o

obj-$(CONFIG_FB_SYS_FOPS)      += fb_sys_fops.o

obj-$(CONFIG_FB_SVGALIB)       += svgalib.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Riva framebuffer driver





obj-$(CONFIG_FB_RIVA)     += rivafb.o

rivafb-objs               := fbdev.o riva_hw.o nv_driver.o

ifdef CONFIG_FB_RIVA_I2C

 SPDX-License-Identifier: GPL-2.0-only



vmlfb-objs := vermilion.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the S3 Savage framebuffer driver





obj-$(CONFIG_FB_SAVAGE)			+= savagefb.o

savagefb-y				+= savagefb_driver.o

savagefb-$(CONFIG_FB_SAVAGE_ACCEL)	+= savagefb_accel.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the nVidia framebuffer driver







nvidiafb-y                       := nvidia.o nv_hw.o nv_setup.o \

			            nv_accel.o nv_of.o



nvidiafb-objs                    := $(nvidiafb-y)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Intel 810/815 framebuffer driver

#

obj-$(CONFIG_FB_I810)		+= i810fb.o



else

i810fb-objs                     += i810_dvt.o

endif

ifdef CONFIG_FB_I810_I2C

i810fb-objs += i810-i2c.o

endif

 SPDX-License-Identifier: GPL-2.0-only

 Makefile for the Linux video drivers.

 5 Aug 1999, James Simmons, <mailto:jsimmons@edgeglobal.com>

# Rewritten to use lists instead of if-statements.

# Each configuration option enables a list of files.

my-obj-$(CONFIG_FB_MATROX_G)      += g450_pll.o matroxfb_g450.o matroxfb_crtc2.o

obj-$(CONFIG_FB_MATROX)           += matroxfb_base.o matroxfb_accel.o matroxfb_DAC1064.o matroxfb_Ti3026.o matroxfb_misc.o $(my-obj-y)

obj-$(CONFIG_FB_MATROX_I2C)       += i2c-matroxfb.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the VIA framebuffer driver (for Linux Kernel 2.6)





obj-$(CONFIG_FB_VIA) += viafb.o

	via_utility.o vt1636.o global.o tblDPASetting.o viamode.o \

	via_aux_vt1631.o via_aux_vt1625.o via_aux_vt1622.o via_aux_vt1621.o \

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Kyro framebuffer driver

#



		   STG4000InitDevice.o fbdev.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_FB_INTEL) += intelfb.o

intelfb-objs := $(intelfb-y)

# SPDX-License-Identifier: GPL-2.0

target_core_mod-y		:= target_core_configfs.o \

				   target_core_device.o \

				   target_core_hba.o \

				   target_core_pr.o \

				   target_core_alua.o \

				   target_core_tpg.o \

				   target_core_sbc.o \

				   target_core_xcopy.o

obj-$(CONFIG_TARGET_CORE)	+= target_core_mod.o

 Subsystem modules

obj-$(CONFIG_TCM_IBLOCK)	+= target_core_iblock.o

obj-$(CONFIG_TCM_USER2)		+= target_core_user.o

# Fabric modules

obj-$(CONFIG_TCM_FC)		+= tcm_fc/

obj-$(CONFIG_SBP_TARGET)	+= sbp/

# SPDX-License-Identifier: GPL-2.0

				iscsi_target_datain_values.o \

				iscsi_target_device.o \

				iscsi_target_erl0.o \

				iscsi_target_erl1.o \

				iscsi_target_erl2.o \

				iscsi_target_tmr.o \

				iscsi_target.o \

				iscsi_target_configfs.o \

				iscsi_target_stat.o \



# SPDX-License-Identifier: GPL-2.0

ccflags-y := -I $(srctree)/drivers/net/ethernet/chelsio/cxgb4

ccflags-y += -I $(srctree)/drivers/net/ethernet/chelsio/libcxgb

ccflags-y += -I $(srctree)/drivers/target/iscsi



cxgbit-y  := cxgbit_main.o cxgbit_cm.o cxgbit_target.o cxgbit_ddp.o

# SPDX-License-Identifier: GPL-2.0



 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SBP_TARGET) += sbp_target.o

# SPDX-License-Identifier: GPL-2.0

i3c-y				:= device.o master.o

obj-$(CONFIG_I3C)		+= i3c.o

obj-$(CONFIG_I3C)		+= master/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MIPI_I3C_HCI)		+= mipi-i3c-hci/

 SPDX-License-Identifier: BSD-3-Clause



obj-$(CONFIG_MIPI_I3C_HCI)		+= mipi-i3c-hci.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux network (ATM) device drivers.





fore_200e-y	:= fore200e.o

obj-$(CONFIG_ATM_ZATM)		+= zatm.o uPD98402.o

obj-$(CONFIG_ATM_AMBASSADOR)	+= ambassador.o

obj-$(CONFIG_ATM_IA)		+= iphase.o suni.o

obj-$(CONFIG_ATM_FORE200E)	+= fore_200e.o

obj-$(CONFIG_ATM_IDT77252)	+= idt77252.o

obj-$(CONFIG_ATM_SOLOS)		+= solos-pci.o

ifeq ($(CONFIG_ATM_IDT77252_USE_SUNI),y)



obj-$(CONFIG_ATM_TCP)		+= atmtcp.o



obj-$(CONFIG_ATM_HE)		+= he.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for sensor chip drivers.

#



 APCI drivers

obj-$(CONFIG_SENSORS_ACPI_POWER) += acpi_power_meter.o

obj-$(CONFIG_SENSORS_ATK0110)	+= asus_atk0110.o

# Native drivers

# asb100, then w83781d go first, as they can override other drivers' addresses.

obj-$(CONFIG_SENSORS_W83627HF)	+= w83627hf.o

obj-$(CONFIG_SENSORS_W83792D)	+= w83792d.o

obj-$(CONFIG_SENSORS_W83795)	+= w83795.o

obj-$(CONFIG_SENSORS_W83791D)	+= w83791d.o

obj-$(CONFIG_SENSORS_ABITUGURU)	+= abituguru.o

obj-$(CONFIG_SENSORS_ABITUGURU3)+= abituguru3.o

obj-$(CONFIG_SENSORS_AD7414)	+= ad7414.o

obj-$(CONFIG_SENSORS_ADC128D818) += adc128d818.o

obj-$(CONFIG_SENSORS_ADM1021)	+= adm1021.o

obj-$(CONFIG_SENSORS_ADM1026)	+= adm1026.o

obj-$(CONFIG_SENSORS_ADM1031)	+= adm1031.o

obj-$(CONFIG_SENSORS_ADM9240)	+= adm9240.o

obj-$(CONFIG_SENSORS_ADS7871)	+= ads7871.o

obj-$(CONFIG_SENSORS_ADT7310)	+= adt7310.o

obj-$(CONFIG_SENSORS_ADT7411)	+= adt7411.o

obj-$(CONFIG_SENSORS_ADT7470)	+= adt7470.o

obj-$(CONFIG_SENSORS_AHT10)	+= aht10.o

obj-$(CONFIG_SENSORS_AQUACOMPUTER_D5NEXT) += aquacomputer_d5next.o

obj-$(CONFIG_SENSORS_ARM_SCPI)	+= scpi-hwmon.o

obj-$(CONFIG_SENSORS_ASC7621)	+= asc7621.o

obj-$(CONFIG_SENSORS_ATXP1)	+= atxp1.o

obj-$(CONFIG_SENSORS_BT1_PVT)	+= bt1-pvt.o

obj-$(CONFIG_SENSORS_CORSAIR_CPRO) += corsair-cpro.o

obj-$(CONFIG_SENSORS_DELL_SMM)	+= dell-smm-hwmon.o

obj-$(CONFIG_SENSORS_DRIVETEMP)	+= drivetemp.o

obj-$(CONFIG_SENSORS_DS1621)	+= ds1621.o

obj-$(CONFIG_SENSORS_EMC2103)	+= emc2103.o

obj-$(CONFIG_SENSORS_F71805F)	+= f71805f.o

obj-$(CONFIG_SENSORS_F75375S)	+= f75375s.o

obj-$(CONFIG_SENSORS_FSCHMD)	+= fschmd.o

obj-$(CONFIG_SENSORS_G760A)	+= g760a.o

obj-$(CONFIG_SENSORS_GL518SM)	+= gl518sm.o

obj-$(CONFIG_SENSORS_GSC)	+= gsc-hwmon.o

obj-$(CONFIG_SENSORS_HIH6130)	+= hih6130.o

obj-$(CONFIG_SENSORS_I5K_AMB)	+= i5k_amb.o

obj-$(CONFIG_SENSORS_IBMPEX)	+= ibmpex.o

obj-$(CONFIG_SENSORS_IBMPOWERNV)+= ibmpowernv.o

obj-$(CONFIG_SENSORS_INA209)	+= ina209.o

obj-$(CONFIG_SENSORS_INA3221)	+= ina3221.o

obj-$(CONFIG_SENSORS_IT87)	+= it87.o

obj-$(CONFIG_SENSORS_K8TEMP)	+= k8temp.o

obj-$(CONFIG_SENSORS_LINEAGE)	+= lineage-pem.o

obj-$(CONFIG_SENSORS_LM63)	+= lm63.o

obj-$(CONFIG_SENSORS_LM73)	+= lm73.o

obj-$(CONFIG_SENSORS_LM77)	+= lm77.o

obj-$(CONFIG_SENSORS_LM80)	+= lm80.o

obj-$(CONFIG_SENSORS_LM85)	+= lm85.o

obj-$(CONFIG_SENSORS_LM90)	+= lm90.o

obj-$(CONFIG_SENSORS_LM93)	+= lm93.o

obj-$(CONFIG_SENSORS_LM95241)	+= lm95241.o

obj-$(CONFIG_SENSORS_LTC2945)	+= ltc2945.o

obj-$(CONFIG_SENSORS_LTC2947)	+= ltc2947-core.o

obj-$(CONFIG_SENSORS_LTC2947_SPI) += ltc2947-spi.o

obj-$(CONFIG_SENSORS_LTC2992)	+= ltc2992.o

obj-$(CONFIG_SENSORS_LTC4215)	+= ltc4215.o

obj-$(CONFIG_SENSORS_LTC4245)	+= ltc4245.o

obj-$(CONFIG_SENSORS_LTC4261)	+= ltc4261.o

obj-$(CONFIG_SENSORS_MAX1111)	+= max1111.o

obj-$(CONFIG_SENSORS_MAX16065)	+= max16065.o

obj-$(CONFIG_SENSORS_MAX1668)	+= max1668.o

obj-$(CONFIG_SENSORS_MAX31722)	+= max31722.o

obj-$(CONFIG_SENSORS_MAX6620)	+= max6620.o

obj-$(CONFIG_SENSORS_MAX6639)	+= max6639.o

obj-$(CONFIG_SENSORS_MAX6650)	+= max6650.o

obj-$(CONFIG_SENSORS_MAX31790)	+= max31790.o

obj-$(CONFIG_SENSORS_MC13783_ADC)+= mc13783-adc.o

obj-$(CONFIG_SENSORS_TC654)	+= tc654.o

obj-$(CONFIG_SENSORS_MLXREG_FAN) += mlxreg-fan.o

obj-$(CONFIG_SENSORS_MR75203)	+= mr75203.o

obj-$(CONFIG_SENSORS_NCT6775)	+= nct6775.o

obj-$(CONFIG_SENSORS_NCT7904)	+= nct7904.o

obj-$(CONFIG_SENSORS_NSA320)	+= nsa320-hwmon.o

obj-$(CONFIG_SENSORS_NZXT_KRAKEN2) += nzxt-kraken2.o

obj-$(CONFIG_SENSORS_PC87427)	+= pc87427.o

obj-$(CONFIG_SENSORS_PWM_FAN)	+= pwm-fan.o

obj-$(CONFIG_SENSORS_S3C)	+= s3c-hwmon.o

obj-$(CONFIG_SENSORS_SBTSI)	+= sbtsi_temp.o

obj-$(CONFIG_SENSORS_SCH5627)	+= sch5627.o

obj-$(CONFIG_SENSORS_SL28CPLD)	+= sl28cpld-hwmon.o

obj-$(CONFIG_SENSORS_SHT21)	+= sht21.o

obj-$(CONFIG_SENSORS_SHT4x)	+= sht4x.o

obj-$(CONFIG_SENSORS_SIS5595)	+= sis5595.o

obj-$(CONFIG_SENSORS_SMSC47M1)	+= smsc47m1.o

obj-$(CONFIG_SENSORS_SMSC47M192)+= smsc47m192.o

obj-$(CONFIG_SENSORS_SPARX5)	+= sparx5-temp.o

obj-$(CONFIG_SENSORS_AMC6821)	+= amc6821.o

obj-$(CONFIG_SENSORS_THMC50)	+= thmc50.o

obj-$(CONFIG_SENSORS_TMP103)	+= tmp103.o

obj-$(CONFIG_SENSORS_TMP401)	+= tmp401.o

obj-$(CONFIG_SENSORS_TMP513)	+= tmp513.o

obj-$(CONFIG_SENSORS_VIA686A)	+= via686a.o

obj-$(CONFIG_SENSORS_VT8231)	+= vt8231.o

obj-$(CONFIG_SENSORS_W83L785TS)	+= w83l785ts.o

obj-$(CONFIG_SENSORS_WM831X)	+= wm831x-hwmon.o

obj-$(CONFIG_SENSORS_XGENE)	+= xgene-hwmon.o

obj-$(CONFIG_PMBUS)		+= pmbus/



 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_SENSORS_OCC) += occ-hwmon-common.o

obj-$(CONFIG_SENSORS_OCC_P9_SBE) += occ-p9-hwmon.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for PMBus chip drivers.





obj-$(CONFIG_SENSORS_PMBUS)	+= pmbus.o

obj-$(CONFIG_SENSORS_ADM1275)	+= adm1275.o

obj-$(CONFIG_SENSORS_BPA_RS600)	+= bpa-rs600.o

obj-$(CONFIG_SENSORS_IBM_CFFPS)	+= ibm-cffps.o

obj-$(CONFIG_SENSORS_INSPUR_IPSPS) += inspur-ipsps.o

obj-$(CONFIG_SENSORS_IR36021)	+= ir36021.o

obj-$(CONFIG_SENSORS_IRPS5401)	+= irps5401.o

obj-$(CONFIG_SENSORS_LM25066)	+= lm25066.o

obj-$(CONFIG_SENSORS_LTC3815)	+= ltc3815.o

obj-$(CONFIG_SENSORS_MAX16064)	+= max16064.o

obj-$(CONFIG_SENSORS_MAX20730)	+= max20730.o

obj-$(CONFIG_SENSORS_MAX31785)	+= max31785.o

obj-$(CONFIG_SENSORS_MAX8688)	+= max8688.o

obj-$(CONFIG_SENSORS_MP2975)	+= mp2975.o

obj-$(CONFIG_SENSORS_PXE1610)	+= pxe1610.o

obj-$(CONFIG_SENSORS_STPDDC60)	+= stpddc60.o

obj-$(CONFIG_SENSORS_TPS53679)	+= tps53679.o

obj-$(CONFIG_SENSORS_UCD9200)	+= ucd9200.o

obj-$(CONFIG_SENSORS_ZL6100)	+= zl6100.o

# SPDX-License-Identifier: GPL-2.0

# Generic MAILBOX API





obj-$(CONFIG_ARM_MHU)	+= arm_mhu.o arm_mhu_db.o



obj-$(CONFIG_IMX_MBOX)	+= imx-mailbox.o





obj-$(CONFIG_PL320_MBOX)	+= pl320-ipc.o

obj-$(CONFIG_OMAP2PLUS_MBOX)	+= omap-mailbox.o



obj-$(CONFIG_PCC)		+= pcc.o



obj-$(CONFIG_BCM2835_MBOX)	+= bcm2835-mailbox.o

obj-$(CONFIG_STI_MBOX)		+= mailbox-sti.o



obj-$(CONFIG_XGENE_SLIMPRO_MBOX) += mailbox-xgene-slimpro.o



obj-$(CONFIG_HI6220_MBOX)	+= hi6220-mailbox.o



obj-$(CONFIG_BCM_FLEXRM_MBOX)	+= bcm-flexrm-mailbox.o





obj-$(CONFIG_TEGRA_HSP_MBOX)	+= tegra-hsp.o



obj-$(CONFIG_MTK_CMDQ_MBOX)	+= mtk-cmdq-mailbox.o







obj-$(CONFIG_QCOM_IPCC)		+= qcom-ipcc.o

obj-$(CONFIG_APPLE_MAILBOX)	+= apple-mailbox.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_INTEL_IDLE)			+= intel_idle.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the kernel multimedia device drivers.





#

 I2C drivers should come before other drivers, otherwise they'll fail

# when compiled as builtin drivers

#

obj-y += i2c/ tuners/

obj-$(CONFIG_DVB_CORE)  += dvb-frontends/



# Now, let's link-in the media controller core

#

ifeq ($(CONFIG_MEDIA_CONTROLLER),y)



obj-$(CONFIG_VIDEO_DEV) += v4l2-core/



 There are both core and drivers at RC subtree - merge before drivers

obj-y += rc/

obj-$(CONFIG_CEC_CORE) += cec/



# Finally, merge the drivers that require the core

#

obj-y += common/ platform/ pci/ usb/ mmc/ firewire/ spi/ test-drivers/

obj-$(CONFIG_VIDEO_DEV) += radio/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VIDEO_CX2341X) += cx2341x.o

obj-$(CONFIG_CYPRESS_FIRMWARE) += cypress_firmware.o

# SPDX-License-Identifier: GPL-2.0

videobuf2-common-objs := videobuf2-core.o

videobuf2-common-objs += frame_vector.o

ifeq ($(CONFIG_TRACEPOINTS),y)



obj-$(CONFIG_VIDEOBUF2_V4L2) += videobuf2-v4l2.o

obj-$(CONFIG_VIDEOBUF2_VMALLOC) += videobuf2-vmalloc.o

obj-$(CONFIG_VIDEOBUF2_DMA_SG) += videobuf2-dma-sg.o

# SPDX-License-Identifier: GPL-2.0

smsdvb-objs := smsdvb-main.o

obj-$(CONFIG_SMS_SIANO_MDTV) += smsmdtv.o smsdvb.o



# SPDX-License-Identifier: GPL-2.0

b2c2-flexcop-objs += flexcop.o flexcop-fe-tuner.o flexcop-i2c.o

b2c2-flexcop-objs += flexcop-sram.o flexcop-eeprom.o flexcop-misc.o

obj-$(CONFIG_DVB_B2C2_FLEXCOP) += b2c2-flexcop.o

ccflags-y += -I $(srctree)/drivers/media/tuners/

 SPDX-License-Identifier: GPL-2.0-only

v4l2-tpg-objs := v4l2-tpg-core.o v4l2-tpg-colors.o

obj-$(CONFIG_VIDEO_V4L2_TPG) += v4l2-tpg.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_VIDEO_SAA7146_VV) += saa7146_vv.o

# SPDX-License-Identifier: GPL-2.0

obj-y += siano/

 SPDX-License-Identifier: GPL-2.0-only



ccflags-y += -I $(srctree)/drivers/media/common/siano

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the V4L2 core







videodev-$(CONFIG_COMPAT) += v4l2-compat-ioctl32.o

videodev-$(CONFIG_MEDIA_CONTROLLER) += v4l2-mc.o



obj-$(CONFIG_V4L2_FWNODE) += v4l2-fwnode.o





obj-$(CONFIG_V4L2_H264) += v4l2-h264.o

obj-$(CONFIG_V4L2_FLASH_LED_CLASS) += v4l2-flash-led-class.o



obj-$(CONFIG_VIDEOBUF_GEN) += videobuf-core.o

obj-$(CONFIG_VIDEOBUF_DMA_CONTIG) += videobuf-dma-contig.o



ccflags-y += -I$(srctree)/drivers/media/dvb-frontends

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the USB media device drivers

#

# DVB USB-only drivers

obj-y += ttusb-dec/ ttusb-budget/ dvb-usb/ dvb-usb-v2/ siano/ b2c2/

obj-y += zr364xx/ stkwebcam/ s2255/

obj-$(CONFIG_USB_AIRSPY)        += airspy/

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_VIDEO_GO7007_USB) += go7007-usb.o



		snd-go7007.o

s2250-y := s2250-board.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_USB_S2255)		+= s2255drv.o

# SPDX-License-Identifier: GPL-2.0

cx231xx-y += cx231xx-video.o cx231xx-i2c.o cx231xx-cards.o cx231xx-core.o

cx231xx-y += cx231xx-avcore.o cx231xx-417.o cx231xx-pcb-cfg.o cx231xx-vbi.o

cx231xx-$(CONFIG_VIDEO_CX231XX_RC) += cx231xx-input.o

cx231xx-alsa-objs := cx231xx-audio.o

obj-$(CONFIG_VIDEO_CX231XX) += cx231xx.o

obj-$(CONFIG_VIDEO_CX231XX_DVB) += cx231xx-dvb.o

ccflags-y += -I $(srctree)/drivers/media/dvb-frontends

 SPDX-License-Identifier: GPL-2.0-only

	usbtv-video.o \



# SPDX-License-Identifier: GPL-2.0

		   tm6000-stds.o \

		   tm6000-input.o

obj-$(CONFIG_VIDEO_TM6000) += tm6000.o

obj-$(CONFIG_VIDEO_TM6000_DVB) += tm6000-dvb.o

ccflags-y += -I $(srctree)/drivers/media/dvb-frontends

 SPDX-License-Identifier: GPL-2.0-only

pwc-objs	+= pwc-dec1.o pwc-dec23.o pwc-kiara.o pwc-timon.o

obj-$(CONFIG_USB_PWC) += pwc.o

 SPDX-License-Identifier: GPL-2.0-only





# SPDX-License-Identifier: GPL-2.0

au0828-objs	:= au0828-core.o au0828-i2c.o au0828-cards.o au0828-dvb.o

ifeq ($(CONFIG_VIDEO_AU0828_V4L2),y)







ccflags-y += -I $(srctree)/drivers/media/tuners



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_USB_GSPCA_BENQ)     += gspca_benq.o

obj-$(CONFIG_USB_GSPCA_CONEX)    += gspca_conex.o

obj-$(CONFIG_USB_GSPCA_CPIA1)    += gspca_cpia1.o

obj-$(CONFIG_USB_GSPCA_DTCS033)  += gspca_dtcs033.o

obj-$(CONFIG_USB_GSPCA_ETOMS)    += gspca_etoms.o

obj-$(CONFIG_USB_GSPCA_FINEPIX)  += gspca_finepix.o

obj-$(CONFIG_USB_GSPCA_JEILINJ)  += gspca_jeilinj.o

obj-$(CONFIG_USB_GSPCA_KINECT)   += gspca_kinect.o

obj-$(CONFIG_USB_GSPCA_MARS)     += gspca_mars.o

obj-$(CONFIG_USB_GSPCA_PAC207)   += gspca_pac207.o

obj-$(CONFIG_USB_GSPCA_PAC7302)  += gspca_pac7302.o

obj-$(CONFIG_USB_GSPCA_PAC7311)  += gspca_pac7311.o

obj-$(CONFIG_USB_GSPCA_SE401)    += gspca_se401.o

obj-$(CONFIG_USB_GSPCA_SONIXB)   += gspca_sonixb.o

obj-$(CONFIG_USB_GSPCA_SPCA1528) += gspca_spca1528.o

obj-$(CONFIG_USB_GSPCA_SQ905)    += gspca_sq905.o

obj-$(CONFIG_USB_GSPCA_SQ930X)   += gspca_sq930x.o

obj-$(CONFIG_USB_GSPCA_SUNPLUS)  += gspca_sunplus.o

obj-$(CONFIG_USB_GSPCA_T613)     += gspca_t613.o

obj-$(CONFIG_USB_GSPCA_TOPRO)    += gspca_topro.o

obj-$(CONFIG_USB_GSPCA_TOUPTEK)  += gspca_touptek.o

obj-$(CONFIG_USB_GSPCA_VC032X)   += gspca_vc032x.o

obj-$(CONFIG_USB_GSPCA_VICAM)    += gspca_vicam.o



gspca_main-objs     := gspca.o autogain_functions.o

gspca_benq-objs     := benq.o

gspca_cpia1-objs    := cpia1.o

gspca_etoms-objs    := etoms.o

gspca_jeilinj-objs  := jeilinj.o

gspca_nw80x-objs    := nw80x.o

gspca_ov534-objs    := ov534.o

gspca_pac7302-objs  := pac7302.o

gspca_se401-objs    := se401.o

gspca_sn9c2028-objs := sn9c2028.o

gspca_spca500-objs  := spca500.o

gspca_spca505-objs  := spca505.o

gspca_spca508-objs  := spca508.o

gspca_sq905-objs    := sq905.o

gspca_sq905c-objs   := sq905c.o

gspca_sq930x-objs   := sq930x.o

gspca_stk014-objs   := stk014.o

gspca_stv0680-objs  := stv0680.o

gspca_topro-objs    := topro.o

gspca_vicam-objs    := vicam.o

gspca_xirlink_cit-objs := xirlink_cit.o



obj-$(CONFIG_USB_M5602)   += m5602/

obj-$(CONFIG_USB_STV06XX) += stv06xx/

obj-$(CONFIG_USB_GL860)   += gl860/

# SPDX-License-Identifier: GPL-2.0



gspca_gl860-objs := gl860.o \

		    gl860-ov2640.o \

		    gl860-mi2020.o



# SPDX-License-Identifier: GPL-2.0



gspca_stv06xx-objs := stv06xx.o \

		      stv06xx_hdcs.o \

		      stv06xx_st6422.o



# SPDX-License-Identifier: GPL-2.0



		    m5602_ov9650.o \

		    m5602_po1030.o \

		    m5602_s5k4aa.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_USB_ZR364XX)       += zr364xx.o

# SPDX-License-Identifier: GPL-2.0

dvb-as102-objs := as102_drv.o as102_fw.o as10x_cmd.o as10x_cmd_stream.o \

		  as102_usb_drv.o as10x_cmd_cfg.o

obj-$(CONFIG_DVB_AS102) += dvb-as102.o

ccflags-y += -I $(srctree)/drivers/media/dvb-frontends

# SPDX-License-Identifier: GPL-2.0

dvb_usb_v2-objs := dvb_usb_core.o dvb_usb_urb.o usb_urb.o



dvb-usb-af9015-objs := af9015.o



dvb-usb-af9035-objs := af9035.o



dvb-usb-anysee-objs := anysee.o



dvb-usb-au6610-objs := au6610.o



dvb-usb-az6007-objs := az6007.o



dvb-usb-ce6230-objs := ce6230.o



dvb-usb-ec168-objs := ec168.o



dvb-usb-lmedm04-objs := lmedm04.o



dvb-usb-gl861-objs := gl861.o



dvb-usb-mxl111sf-objs += mxl111sf.o mxl111sf-phy.o mxl111sf-i2c.o

obj-$(CONFIG_DVB_USB_MXL111SF) += dvb-usb-mxl111sf.o

obj-$(CONFIG_DVB_USB_MXL111SF) += mxl111sf-tuner.o

obj-$(CONFIG_DVB_USB_RTL28XXU) += dvb-usb-rtl28xxu.o

obj-$(CONFIG_DVB_USB_DVBSKY) += dvb-usb-dvbsky.o

obj-$(CONFIG_DVB_USB_ZD1301) += zd1301.o

ccflags-y += -I$(srctree)/drivers/media/tuners

 SPDX-License-Identifier: GPL-2.0-only



ccflags-y += -I $(srctree)/drivers/media/common/siano



# SPDX-License-Identifier: GPL-2.0

dvb-usb-objs += dvb-usb-firmware.o dvb-usb-init.o dvb-usb-urb.o dvb-usb-i2c.o

obj-$(CONFIG_DVB_USB) += dvb-usb.o

obj-$(CONFIG_DVB_USB_VP7045) += dvb-usb-vp7045.o

obj-$(CONFIG_DVB_USB_VP702X) += dvb-usb-vp702x.o

obj-$(CONFIG_DVB_USB_GP8PSK) += dvb-usb-gp8psk.o

dvb-usb-dtt200u-objs := dtt200u.o dtt200u-fe.o



dvb-usb-dibusb-common-objs := dibusb-common.o



dvb-usb-a800-objs := a800.o



dvb-usb-dibusb-mb-objs := dibusb-mb.o



dvb-usb-dibusb-mc-objs := dibusb-mc.o



dvb-usb-nova-t-usb2-objs := nova-t-usb2.o



dvb-usb-umt-010-objs := umt-010.o



dvb-usb-m920x-objs := m920x.o



dvb-usb-digitv-objs := digitv.o



dvb-usb-cxusb-objs := cxusb.o

ifeq ($(CONFIG_DVB_USB_CXUSB_ANALOG),y)

obj-$(CONFIG_DVB_USB_CXUSB) += dvb-usb-cxusb.o

obj-$(CONFIG_DVB_USB_TTUSB2) += dvb-usb-ttusb2.o

dvb-usb-dib0700-objs := dib0700_core.o dib0700_devices.o





dvb-usb-af9005-objs := af9005.o af9005-fe.o



dvb-usb-af9005-remote-objs := af9005-remote.o



dvb-usb-pctv452e-objs := pctv452e.o



dvb-usb-dw2102-objs := dw2102.o



dvb-usb-dtv5100-objs := dtv5100.o



dvb-usb-cinergyT2-objs := cinergyT2-core.o cinergyT2-fe.o

obj-$(CONFIG_DVB_USB_CINERGY_T2) += dvb-usb-cinergyT2.o

obj-$(CONFIG_DVB_USB_AZ6027) += dvb-usb-az6027.o

obj-$(CONFIG_DVB_USB_TECHNISAT_USB2) += dvb-usb-technisat-usb2.o

ccflags-y += -I$(srctree)/drivers/media/dvb-frontends/

# due to tuner-xc3028

ccflags-y += -I$(srctree)/drivers/media/common

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_USB_MSI2500)             += msi2500.o

# SPDX-License-Identifier: GPL-2.0

em28xx-y +=	em28xx-core.o em28xx-i2c.o em28xx-cards.o em28xx-camera.o

em28xx-v4l-objs := em28xx-video.o em28xx-vbi.o

em28xx-rc-objs := em28xx-input.o

obj-$(CONFIG_VIDEO_EM28XX) += em28xx.o

obj-$(CONFIG_VIDEO_EM28XX_V4L2) += em28xx-v4l.o

obj-$(CONFIG_VIDEO_EM28XX_DVB) += em28xx-dvb.o



ccflags-y += -I $(srctree)/drivers/media/tuners

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

cpia2-objs	:= cpia2_v4l.o cpia2_usb.o cpia2_core.o

obj-$(CONFIG_VIDEO_CPIA2) += cpia2.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

b2c2-flexcop-usb-objs := flexcop-usb.o



ccflags-y += -I $(srctree)/drivers/media/common/b2c2/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_DVB_TTUSB_BUDGET) += dvb-ttusb-budget.o

ccflags-y += -I $(srctree)/drivers/media/dvb-frontends

# SPDX-License-Identifier: GPL-2.0

obj-pvrusb2-dvb-$(CONFIG_VIDEO_PVRUSB2_DVB) := pvrusb2-dvb.o

pvrusb2-objs	:= pvrusb2-i2c-core.o \

		   pvrusb2-encoder.o pvrusb2-video-v4l.o \

		   pvrusb2-eeprom.o \

		   pvrusb2-context.o pvrusb2-io.o pvrusb2-ioread.o \

		   pvrusb2-cx2584x-v4l.o pvrusb2-wm8775.o \

		   pvrusb2-cs53l32a.o \

		   $(obj-pvrusb2-dvb-y) \

		   $(obj-pvrusb2-sysfs-y) $(obj-pvrusb2-debugifc-y)

obj-$(CONFIG_VIDEO_PVRUSB2) += pvrusb2.o

ccflags-y += -I $(srctree)/drivers/media/dvb-frontends

 SPDX-License-Identifier: GPL-2.0-only

hdpvr-objs	:= hdpvr-control.o hdpvr-core.o hdpvr-video.o hdpvr-i2c.o

obj-$(CONFIG_VIDEO_HDPVR) += hdpvr.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

		  uvc_status.o uvc_isight.o uvc_debugfs.o uvc_metadata.o

ifeq ($(CONFIG_MEDIA_CONTROLLER),y)

# SPDX-License-Identifier: GPL-2.0

stk1160-y :=	stk1160-core.o \

		stk1160-v4l.o \

		stk1160-video.o \

		stk1160-i2c.o \



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the test drivers.





obj-$(CONFIG_VIDEO_VIVID)		+= vivid/

obj-$(CONFIG_VIDEO_VIM2M)		+= vim2m.o

# SPDX-License-Identifier: GPL-2.0



			   dvb-vidtv-bridge.o

# SPDX-License-Identifier: GPL-2.0

vicodec-objs := vicodec-core.o codec-fwht.o codec-v4l2-fwht.o

obj-$(CONFIG_VIDEO_VICODEC) += vicodec.o

# SPDX-License-Identifier: GPL-2.0

		vimc-debayer.o vimc-scaler.o vimc-sensor.o

obj-$(CONFIG_VIDEO_VIMC) += vimc.o

# SPDX-License-Identifier: GPL-2.0

vivid-objs := vivid-core.o vivid-ctrls.o vivid-vid-common.o vivid-vbi-gen.o \

		vivid-vid-cap.o vivid-vid-out.o vivid-kthread-cap.o vivid-kthread-out.o \

ifeq ($(CONFIG_VIDEO_VIVID_CEC),y)

  vivid-objs += vivid-cec.o

endif

obj-$(CONFIG_VIDEO_VIVID) += vivid.o

# SPDX-License-Identifier: GPL-2.0

	   mc-request.o

ifneq ($(CONFIG_USB),)



obj-$(CONFIG_MEDIA_SUPPORT) += mc.o

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the CEC USB device drivers.



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_USB_PULSE8_CEC) += pulse8-cec.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_USB_RAINSHADOW_CEC) += rainshadow-cec.o

# SPDX-License-Identifier: GPL-2.0

cec-objs := cec-core.o cec-adap.o cec-api.o

  cec-objs += cec-notifier.o

endif

ifeq ($(CONFIG_CEC_PIN),y)

  cec-objs += cec-pin.o

endif

ifeq ($(CONFIG_CEC_PIN_ERROR_INJ),y)

  cec-objs += cec-pin-error-inj.o

endif

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the CEC I2C device drivers.



obj-$(CONFIG_CEC_CH7322) += ch7322.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the CEC platform device drivers.

#

# Please keep it in alphabetic order

obj-$(CONFIG_CEC_CROS_EC)	+= cros-ec/

obj-$(CONFIG_CEC_MESON_AO)	+= meson/

obj-$(CONFIG_CEC_SAMSUNG_S5P)	+= s5p/

obj-$(CONFIG_CEC_STI)		+= sti/

obj-$(CONFIG_CEC_TEGRA)		+= tegra/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CEC_MESON_AO)	+= ao-cec.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CEC_GPIO) += cec-gpio.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CEC_SAMSUNG_S5P)	+= s5p-cec.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CEC_SECO) += seco-cec.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CEC_STM32) += stm32-cec.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CEC_CROS_EC) += cros-ec-cec.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CEC_TEGRA)	+= tegra_cec.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for common V4L/DVB tuners







obj-$(CONFIG_MEDIA_TUNER_SIMPLE) += tuner-simple.o

# tuner-types will be merged into tuner-simple, in the future

obj-$(CONFIG_MEDIA_TUNER_SIMPLE) += tuner-types.o

obj-$(CONFIG_MEDIA_TUNER_TDA8290) += tda8290.o

obj-$(CONFIG_MEDIA_TUNER_TEA5761) += tea5761.o

obj-$(CONFIG_MEDIA_TUNER_TDA827X) += tda827x.o

obj-$(CONFIG_MEDIA_TUNER_XC5000) += xc5000.o

obj-$(CONFIG_MEDIA_TUNER_MSI001) += msi001.o

obj-$(CONFIG_MEDIA_TUNER_MT2063) += mt2063.o

obj-$(CONFIG_MEDIA_TUNER_QT1010) += qt1010.o

obj-$(CONFIG_MEDIA_TUNER_MXL5005S) += mxl5005s.o

obj-$(CONFIG_MEDIA_TUNER_MC44S803) += mc44s803.o

obj-$(CONFIG_MEDIA_TUNER_TDA18218) += tda18218.o

obj-$(CONFIG_MEDIA_TUNER_E4000) += e4000.o

obj-$(CONFIG_MEDIA_TUNER_TUA9001) += tua9001.o

obj-$(CONFIG_MEDIA_TUNER_FC0011) += fc0011.o

obj-$(CONFIG_MEDIA_TUNER_FC0013) += fc0013.o

obj-$(CONFIG_MEDIA_TUNER_R820T) += r820t.o

obj-$(CONFIG_MEDIA_TUNER_QM1D1C0042) += qm1d1c0042.o

obj-$(CONFIG_MEDIA_TUNER_M88RS6000T) += m88rs6000t.o



ccflags-y += -I$(srctree)/drivers/media/dvb-frontends

# SPDX-License-Identifier: GPL-2.0

msp3400-objs	:=	msp3400-driver.o msp3400-kthreads.o





obj-$(CONFIG_VIDEO_TVAUDIO) += tvaudio.o

obj-$(CONFIG_VIDEO_SAA6588) += saa6588.o

obj-$(CONFIG_VIDEO_TDA1997X) += tda1997x.o

obj-$(CONFIG_VIDEO_TEA6420) += tea6420.o

obj-$(CONFIG_VIDEO_SAA711X) += saa7115.o

obj-$(CONFIG_VIDEO_SAA7127) += saa7127.o

obj-$(CONFIG_VIDEO_SAA6752HS) += saa6752hs.o

obj-$(CONFIG_VIDEO_AD5820)  += ad5820.o

obj-$(CONFIG_VIDEO_AK7375)  += ak7375.o

obj-$(CONFIG_VIDEO_DW9714)  += dw9714.o

obj-$(CONFIG_VIDEO_DW9768)  += dw9768.o

obj-$(CONFIG_VIDEO_DW9807_VCM)  += dw9807-vcm.o

obj-$(CONFIG_VIDEO_ADV7175) += adv7175.o

obj-$(CONFIG_VIDEO_ADV7183) += adv7183.o

obj-$(CONFIG_VIDEO_ADV7393) += adv7393.o

obj-$(CONFIG_VIDEO_ADV748X) += adv748x/

obj-$(CONFIG_VIDEO_ADV7842) += adv7842.o

obj-$(CONFIG_VIDEO_VPX3220) += vpx3220.o

obj-$(CONFIG_VIDEO_VS6624)  += vs6624.o

obj-$(CONFIG_VIDEO_BT856) += bt856.o

obj-$(CONFIG_VIDEO_KS0127) += ks0127.o

obj-$(CONFIG_VIDEO_THS8200) += ths8200.o

obj-$(CONFIG_VIDEO_TVP514X) += tvp514x.o

obj-$(CONFIG_VIDEO_TW2804) += tw2804.o

obj-$(CONFIG_VIDEO_TW9906) += tw9906.o

obj-$(CONFIG_VIDEO_CS3308) += cs3308.o

obj-$(CONFIG_VIDEO_CS53L32A) += cs53l32a.o

obj-$(CONFIG_VIDEO_TLV320AIC23B) += tlv320aic23b.o

obj-$(CONFIG_VIDEO_WM8775) += wm8775.o

obj-$(CONFIG_VIDEO_VP27SMPX) += vp27smpx.o

obj-$(CONFIG_VIDEO_UPD64031A) += upd64031a.o

obj-$(CONFIG_VIDEO_OV02A10) += ov02a10.o

obj-$(CONFIG_VIDEO_OV2680) += ov2680.o

obj-$(CONFIG_VIDEO_OV2740) += ov2740.o

obj-$(CONFIG_VIDEO_OV5645) += ov5645.o

obj-$(CONFIG_VIDEO_OV5648) += ov5648.o

obj-$(CONFIG_VIDEO_OV5675) += ov5675.o

obj-$(CONFIG_VIDEO_OV6650) += ov6650.o

obj-$(CONFIG_VIDEO_OV7640) += ov7640.o

obj-$(CONFIG_VIDEO_OV772X) += ov772x.o

obj-$(CONFIG_VIDEO_OV8856) += ov8856.o

obj-$(CONFIG_VIDEO_OV9282) += ov9282.o

obj-$(CONFIG_VIDEO_OV9650) += ov9650.o

obj-$(CONFIG_VIDEO_OV13858) += ov13858.o

obj-$(CONFIG_VIDEO_MT9M001) += mt9m001.o

obj-$(CONFIG_VIDEO_MT9M111) += mt9m111.o

obj-$(CONFIG_VIDEO_MT9T001) += mt9t001.o

obj-$(CONFIG_VIDEO_MT9V011) += mt9v011.o

obj-$(CONFIG_VIDEO_MT9V111) += mt9v111.o

obj-$(CONFIG_VIDEO_NOON010PC30)	+= noon010pc30.o

obj-$(CONFIG_VIDEO_S5K6AA)	+= s5k6aa.o

obj-$(CONFIG_VIDEO_S5K4ECGX)	+= s5k4ecgx.o

obj-$(CONFIG_VIDEO_ADP1653)	+= adp1653.o

obj-$(CONFIG_VIDEO_LM3646)	+= lm3646.o

obj-$(CONFIG_VIDEO_ML86V7667)	+= ml86v7667.o

obj-$(CONFIG_VIDEO_TC358743)	+= tc358743.o

obj-$(CONFIG_VIDEO_HI846)	+= hi846.o

obj-$(CONFIG_VIDEO_IMX214)	+= imx214.o

obj-$(CONFIG_VIDEO_IMX258)	+= imx258.o

obj-$(CONFIG_VIDEO_IMX290)	+= imx290.o

obj-$(CONFIG_VIDEO_IMX334)	+= imx334.o

obj-$(CONFIG_VIDEO_IMX355)	+= imx355.o

obj-$(CONFIG_VIDEO_MAX9286)	+= max9286.o

obj-$(CONFIG_VIDEO_RDACM20)	+= rdacm20.o

obj-$(CONFIG_VIDEO_ST_MIPID02) += st-mipid02.o

 SPDX-License-Identifier: GPL-2.0-only

cx25840-objs    := cx25840-core.o cx25840-audio.o cx25840-firmware.o \

		   cx25840-vbi.o cx25840-ir.o

obj-$(CONFIG_VIDEO_CX25840) += cx25840.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_VIDEO_M5MOLS)		+= m5mols.o

 SPDX-License-Identifier: GPL-2.0-only

		adv748x-core.o \

		adv748x-hdmi.o

obj-$(CONFIG_VIDEO_ADV748X)	+= adv748x.o

 SPDX-License-Identifier: GPL-2.0-only

				   ccs-quirk.o ccs-limits.o ccs-data.o

obj-$(CONFIG_VIDEO_CCS)		+= ccs.o

ccflags-y += -I $(srctree)/drivers/media/i2c

 SPDX-License-Identifier: GPL-2.0-only

et8ek8-objs			+= et8ek8_mode.o et8ek8_driver.o

 SPDX-License-Identifier: GPL-2.0-only

s5c73m3-objs			:= s5c73m3-core.o s5c73m3-spi.o s5c73m3-ctrls.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the kernel DVB frontend device drivers.





ccflags-y += -I$(srctree)/drivers/media/tuners/

 FIXME: RTL2832 SDR driver uses power management directly from USB IF driver

ifdef CONFIG_DVB_RTL2832_SDR

	ccflags-y += -I$(srctree)/drivers/media/usb/dvb-usb-v2

endif

stb0899-objs := stb0899_drv.o stb0899_algo.o

stv0900-objs := stv0900_core.o stv0900_sw.o

cxd2820r-objs := cxd2820r_core.o cxd2820r_c.o cxd2820r_t.o cxd2820r_t2.o



obj-$(CONFIG_DVB_STV0299) += stv0299.o

obj-$(CONFIG_DVB_STB6100) += stb6100.o

obj-$(CONFIG_DVB_S5H1432) += s5h1432.o

obj-$(CONFIG_DVB_TDA8083) += tda8083.o

obj-$(CONFIG_DVB_DIB3000MB) += dib3000mb.o

obj-$(CONFIG_DVB_DIB3000MC) += dib3000mc.o dibx000_common.o

obj-$(CONFIG_DVB_DIB7000M) += dib7000m.o dibx000_common.o

obj-$(CONFIG_DVB_DIB7000P) += dib7000p.o dibx000_common.o

obj-$(CONFIG_DVB_DIB8000) += dib8000.o dibx000_common.o

obj-$(CONFIG_DVB_DIB9000) += dib9000.o dibx000_common.o

obj-$(CONFIG_DVB_VES1820) += ves1820.o

obj-$(CONFIG_DVB_TDA1004X) += tda1004x.o

obj-$(CONFIG_DVB_NXT6000) += nxt6000.o

obj-$(CONFIG_DVB_ZL10036) += zl10036.o

obj-$(CONFIG_DVB_ZL10353) += zl10353.o

obj-$(CONFIG_DVB_DRXD) += drxd.o

obj-$(CONFIG_DVB_TDA10023) += tda10023.o

obj-$(CONFIG_DVB_NXT200X) += nxt200x.o

obj-$(CONFIG_DVB_OR51132) += or51132.o

obj-$(CONFIG_DVB_S5H1420) += s5h1420.o

obj-$(CONFIG_DVB_LGDT3305) += lgdt3305.o

obj-$(CONFIG_DVB_MXL692) += mxl692.o

obj-$(CONFIG_DVB_CX24123) += cx24123.o

obj-$(CONFIG_DVB_LNBH29) += lnbh29.o

obj-$(CONFIG_DVB_LNBP22) += lnbp22.o

obj-$(CONFIG_DVB_ISL6421) += isl6421.o

obj-$(CONFIG_DVB_TDA826X) += tda826x.o

obj-$(CONFIG_DVB_TUNER_DIB0070) += dib0070.o

obj-$(CONFIG_DVB_TUA6100) += tua6100.o

obj-$(CONFIG_DVB_TUNER_ITD1000) += itd1000.o

obj-$(CONFIG_DVB_AU8522) += au8522_common.o

obj-$(CONFIG_DVB_AU8522_V4L) += au8522_decoder.o

obj-$(CONFIG_DVB_TUNER_CX24113) += cx24113.o

obj-$(CONFIG_DVB_LGS8GL5) += lgs8gl5.o

obj-$(CONFIG_DVB_LGS8GXX) += lgs8gxx.o

obj-$(CONFIG_DVB_DUMMY_FE) += dvb_dummy_fe.o

obj-$(CONFIG_DVB_CX24116) += cx24116.o

obj-$(CONFIG_DVB_CX24120) += cx24120.o

obj-$(CONFIG_DVB_SI2168) += si2168.o

obj-$(CONFIG_DVB_STB6000) += stb6000.o

obj-$(CONFIG_DVB_STV6110) += stv6110.o

obj-$(CONFIG_DVB_STV090x) += stv090x.o

obj-$(CONFIG_DVB_M88DS3103) += m88ds3103.o

obj-$(CONFIG_DVB_MN88473) += mn88473.o

obj-$(CONFIG_DVB_EC100) += ec100.o

obj-$(CONFIG_DVB_TS2020) += ts2020.o

obj-$(CONFIG_DVB_MB86A20S) += mb86a20s.o

obj-$(CONFIG_DVB_STV0367) += stv0367.o

obj-$(CONFIG_DVB_CXD2841ER) += cxd2841er.o

obj-$(CONFIG_DVB_TDA18271C2DD) += tda18271c2dd.o

obj-$(CONFIG_DVB_STV6111) += stv6111.o

obj-$(CONFIG_DVB_SI2165) += si2165.o

obj-$(CONFIG_DVB_SP2) += sp2.o

obj-$(CONFIG_DVB_RTL2830) += rtl2830.o

obj-$(CONFIG_DVB_RTL2832_SDR) += rtl2832_sdr.o

obj-$(CONFIG_DVB_AF9033) += af9033.o

obj-$(CONFIG_DVB_GP8PSK_FE) += gp8psk-fe.o

obj-$(CONFIG_DVB_MN88443X) += mn88443x.o

obj-$(CONFIG_DVB_ASCOT2E) += ascot2e.o

obj-$(CONFIG_DVB_ZD1301_DEMOD) += zd1301_demod.o

 SPDX-License-Identifier: GPL-2.0-only





ccflags-y += -I$(srctree)/drivers/media/tuners/

# SPDX-License-Identifier: GPL-2.0

cxd2880-objs := cxd2880_common.o \

		cxd2880_devio_spi.o \

		cxd2880_integ.o \

		cxd2880_spi_device.o \

		cxd2880_tnrdmd_dvbt2.o \

		cxd2880_tnrdmd_dvbt_mon.o\

		cxd2880_tnrdmd_mon.o\

		cxd2880_top.o

obj-$(CONFIG_DVB_CXD2880) += cxd2880.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel DVB device drivers.

#

dvb-net-$(CONFIG_DVB_NET) := dvb_net.o

dvb-vb2-$(CONFIG_DVB_MMAP) := dvb_vb2.o

dvb-core-objs := dvbdev.o dmxdev.o dvb_demux.o			\

		 dvb_ca_en50221.o dvb_frontend.o		\



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the video capture/playback device drivers.

#

obj-$(CONFIG_VIDEO_ALLEGRO_DVT)		+= allegro-dvt/

obj-$(CONFIG_VIDEO_ASPEED)		+= aspeed-video.o

obj-$(CONFIG_VIDEO_VIA_CAMERA) += via-camera.o



obj-$(CONFIG_VIDEO_PXA27x)	+= pxa_camera.o

obj-$(CONFIG_VIDEO_VIU) += fsl-viu.o

obj-y	+= ti-vpe/

obj-$(CONFIG_VIDEO_CODA)		+= coda/









obj-$(CONFIG_VIDEO_SAMSUNG_S5P_G2D)	+= s5p-g2d/

obj-$(CONFIG_VIDEO_SAMSUNG_EXYNOS_GSC)	+= exynos-gsc/

obj-$(CONFIG_VIDEO_STI_BDISP)		+= sti/bdisp/

obj-$(CONFIG_DVB_C8SECTPFE)		+= sti/c8sectpfe/

obj-$(CONFIG_VIDEO_STI_DELTA)		+= sti/delta/



obj-y					+= davinci/



obj-$(CONFIG_VIDEO_RCAR_DRIF)		+= rcar_drif.o

obj-$(CONFIG_VIDEO_RENESAS_CEU)		+= renesas-ceu.o

obj-$(CONFIG_VIDEO_RENESAS_JPU)		+= rcar_jpu.o

obj-$(CONFIG_VIDEO_RENESAS_VSP1)	+= vsp1/





obj-$(CONFIG_VIDEO_AM437X_VPFE)		+= am437x/

obj-$(CONFIG_VIDEO_XILINX)		+= xilinx/

obj-$(CONFIG_VIDEO_RCAR_VIN)		+= rcar-vin/

obj-$(CONFIG_VIDEO_ATMEL_ISC)		+= atmel/



obj-$(CONFIG_VIDEO_STM32_DCMI)		+= stm32/

obj-$(CONFIG_VIDEO_MEDIATEK_VPU)	+= mtk-vpu/

obj-$(CONFIG_VIDEO_MEDIATEK_VCODEC)	+= mtk-vcodec/

obj-$(CONFIG_VIDEO_MEDIATEK_MDP)	+= mtk-mdp/

obj-$(CONFIG_VIDEO_MEDIATEK_JPEG)	+= mtk-jpeg/

obj-$(CONFIG_VIDEO_QCOM_CAMSS)		+= qcom/camss/

obj-$(CONFIG_VIDEO_QCOM_VENUS)		+= qcom/venus/



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_VIDEO_TI_VPDMA) += ti-vpdma.o

obj-$(CONFIG_VIDEO_TI_CSC) += ti-csc.o



ccflags-$(CONFIG_VIDEO_TI_VPE_DEBUG) += -DDEBUG

obj-$(CONFIG_VIDEO_TI_CAL) += ti-cal.o

ti-cal-y := cal.o cal-camerarx.o cal-video.o

# SPDX-License-Identifier: GPL-2.0

 Makefile for Qualcomm Venus driver



		   hfi_venus.o hfi_msgs.o hfi_cmds.o hfi.o \



venus-dec-objs += vdec.o vdec_ctrls.o

venus-enc-objs += venc.o venc_ctrls.o

obj-$(CONFIG_VIDEO_QCOM_VENUS) += venus-core.o

obj-$(CONFIG_VIDEO_QCOM_VENUS) += venus-dec.o

obj-$(CONFIG_VIDEO_QCOM_VENUS) += venus-enc.o

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for Qualcomm CAMSS driver

qcom-camss-objs += \

		camss.o \

		camss-csid-4-1.o \

		camss-csid-170.o \

		camss-csiphy-3ph-1-0.o \

		camss-vfe-gen1.o \

		camss-vfe.o \

		camss-video.o \

obj-$(CONFIG_VIDEO_QCOM_CAMSS) += qcom-camss.o

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_VIDEO_RCAR_VIN) += rcar-vin.o

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

xilinx-video-objs += xilinx-dma.o xilinx-vip.o xilinx-vipp.o

obj-$(CONFIG_VIDEO_XILINX) += xilinx-video.o

obj-$(CONFIG_VIDEO_XILINX_TPG) += xilinx-tpg.o

# SPDX-License-Identifier: GPL-2.0

mtk-mdp-y += mtk_mdp_core.o

mtk-mdp-y += mtk_mdp_comp.o

mtk-mdp-y += mtk_mdp_vpu.o



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the omap video device drivers.





 OMAP2/3 Display driver

# SPDX-License-Identifier: GPL-2.0

# Makefile for OMAP3 ISP driver

ccflags-$(CONFIG_VIDEO_OMAP3_DEBUG) += -DDEBUG

	ispcsiphy.o ispccp2.o ispcsi2.o \

	ispstat.o isph3a_aewb.o isph3a_af.o isphist.o

obj-$(CONFIG_VIDEO_OMAP3) += omap3-isp.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VIDEO_SAMSUNG_S5P_JPEG) += s5p-jpeg.o

 SPDX-License-Identifier: GPL-2.0-only

exynos-gsc-objs := gsc-core.o gsc-m2m.o gsc-regs.o

obj-$(CONFIG_VIDEO_SAMSUNG_EXYNOS_GSC)	+= exynos-gsc.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VIDEO_CAFE_CCIC) += cafe_ccic.o mcam-core.o



mmp_camera-y := mmp-driver.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the davinci video device drivers.





VPIF Display driver

#VPIF Capture driver

obj-$(CONFIG_VIDEO_DAVINCI_VPIF_CAPTURE) += vpif.o vpif_capture.o

 Capture: DM6446 and DM355

obj-$(CONFIG_VIDEO_DM6446_CCDC) += vpfe_capture.o vpss.o dm644x_ccdc.o

obj-$(CONFIG_VIDEO_DM365_ISIF) += vpfe_capture.o vpss.o isif.o

# SPDX-License-Identifier: GPL-2.0

s5p-mfc-y += s5p_mfc_dec.o s5p_mfc_enc.o

s5p-mfc-y += s5p_mfc_opr.o s5p_mfc_opr_v5.o s5p_mfc_opr_v6.o

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_VIDEO_ROCKCHIP_ISP1) += rockchip-isp1.o

rockchip-isp1-objs += 	rkisp1-capture.o \

			rkisp1-params.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VIDEO_STM32_DCMI) += stm32-dcmi.o

 SPDX-License-Identifier: GPL-2.0-only

 Makefile for s3c244x/s3c64xx CAMIF driver



s3c-camif-objs := camif-core.o camif-capture.o camif-regs.o

obj-$(CONFIG_VIDEO_S3C_CAMIF) += s3c-camif.o

 SPDX-License-Identifier: GPL-2.0-only

atmel-isc-objs = atmel-sama5d2-isc.o

atmel-xisc-objs = atmel-sama7g5-isc.o

obj-$(CONFIG_VIDEO_ATMEL_ISI) += atmel-isi.o

obj-$(CONFIG_VIDEO_ATMEL_ISC) += atmel-isc.o

 SPDX-License-Identifier: GPL-2.0-only

s5p-g2d-objs := g2d.o g2d-hw.o

obj-$(CONFIG_VIDEO_SAMSUNG_S5P_G2D)	+= s5p-g2d.o

 SPDX-License-Identifier: GPL-2.0-only

mtk-vpu-y += mtk_vpu.o

# SPDX-License-Identifier: GPL-2.0

allegro-objs += nal-rbsp.o nal-h264.o nal-hevc.o

obj-$(CONFIG_VIDEO_ALLEGRO_DVT) += allegro.o

 SPDX-License-Identifier: GPL-2.0-only

st-hva-y := hva-v4l2.o hva-hw.o hva-mem.o hva-h264.o

st-hva-$(CONFIG_VIDEO_STI_HVA_DEBUGFS) += hva-debugfs.o

# SPDX-License-Identifier: GPL-2.0





ccflags-y += -I $(srctree)/drivers/media/dvb-frontends/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VIDEO_STI_DELTA_DRIVER) += st-delta.o



# MJPEG support

st-delta-$(CONFIG_VIDEO_STI_DELTA_MJPEG) += delta-mjpeg-hdr.o

st-delta-$(CONFIG_VIDEO_STI_DELTA_MJPEG) += delta-mjpeg-dec.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VIDEO_STI_BDISP) += bdisp.o

# SPDX-License-Identifier: GPL-2.0

vsp1-y					+= vsp1_brx.o vsp1_sru.o vsp1_uds.o



 SPDX-License-Identifier: GPL-2.0-only

mtk_jpeg-objs := mtk_jpeg_core.o \

		 mtk_jpeg_enc_hw.o

obj-$(CONFIG_VIDEO_MEDIATEK_JPEG) += mtk_jpeg.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_VIDEO_IMX8_JPEG) += mxc-jpeg-encdec.o

 SPDX-License-Identifier: GPL-2.0-only





obj-$(CONFIG_VIDEO_IMX_VDOA) += imx-vdoa.o

# SPDX-License-Identifier: GPL-2.0

obj-y		+= sun4i-csi/

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_VIDEO_SUN8I_DEINTERLACE) += sun8i-di.o

 SPDX-License-Identifier: GPL-2.0-only

sun6i-csi-y += sun6i_video.o sun6i_csi.o

obj-$(CONFIG_VIDEO_SUN6I_CSI) += sun6i-csi.o

# SPDX-License-Identifier: GPL-2.0

sun4i-csi-y += sun4i_csi.o



# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0

s5p-fimc-objs := fimc-core.o fimc-reg.o fimc-m2m.o fimc-capture.o media-dev.o

s5p-csis-objs := mipi-csis.o



exynos-fimc-is-objs := fimc-is.o fimc-isp.o fimc-is-sensor.o fimc-is-regs.o





obj-$(CONFIG_VIDEO_S5P_MIPI_CSIS)	+= s5p-csis.o

obj-$(CONFIG_VIDEO_EXYNOS4_IS_COMMON)	+= exynos4-is-common.o

# SPDX-License-Identifier: GPL-2.0

				       mtk-vcodec-common.o

		vdec/vdec_vp8_if.o \

		mtk_vcodec_dec_drv.o \

		vdec_drv_if.o \

		vdec_vpu_if.o \

		mtk_vcodec_dec_stateless.o \

		mtk_vcodec_dec_pm.o \

mtk-vcodec-enc-y := venc/venc_vp8_if.o \

		venc/venc_h264_if.o \

		mtk_vcodec_enc_drv.o \

		mtk_vcodec_enc_pm.o \

		venc_drv_if.o \

		venc_vpu_if.o \





mtk-vcodec-common-y += mtk_vcodec_fw_vpu.o

endif

ifneq ($(CONFIG_VIDEO_MEDIATEK_VCODEC_SCP),)

# SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-only

 Makefile for AM437x VPFE driver



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel character device drivers.

#

obj-$(CONFIG_RADIO_ISA) += radio-isa.o

obj-$(CONFIG_RADIO_RTRACK2) += radio-rtrack2.o

obj-$(CONFIG_RADIO_SF16FMR2) += radio-sf16fmr2.o

obj-$(CONFIG_RADIO_TYPHOON) += radio-typhoon.o

obj-$(CONFIG_RADIO_MAXIRADIO) += radio-maxiradio.o

obj-$(CONFIG_RADIO_SHARK2) += shark2.o

obj-$(CONFIG_RADIO_RTRACK) += radio-aimslab.o

obj-$(CONFIG_RADIO_GEMTEK) += radio-gemtek.o

obj-$(CONFIG_RADIO_SI476X) += radio-si476x.o

obj-$(CONFIG_USB_MR800) += radio-mr800.o

obj-$(CONFIG_USB_MA901) += radio-ma901.o

obj-$(CONFIG_RADIO_SAA7706H) += saa7706h.o

obj-$(CONFIG_RADIO_TIMBERDALE) += radio-timb.o

obj-$(CONFIG_RADIO_TEA575X) += tea575x.o



shark2-objs := radio-shark2.o radio-tea5777.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for radios with Silicon Labs Si470x FM Radio Receivers





obj-$(CONFIG_RADIO_SI470X) += radio-si470x-common.o

obj-$(CONFIG_I2C_SI470X) += radio-si470x-i2c.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for radios with Silicon Labs Si4713 FM Radio Transmitters

#

obj-$(CONFIG_I2C_SI4713) += si4713.o

obj-$(CONFIG_PLATFORM_SI4713) += radio-platform-si4713.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for TI's shared transport driver based wl128x

# FM radio.

#

# SPDX-License-Identifier: GPL-2.0



rc-core-y := rc-main.o rc-ir-raw.o

rc-core-$(CONFIG_MEDIA_CEC_RC) += keymaps/rc-cec.o

obj-$(CONFIG_IR_NEC_DECODER) += ir-nec-decoder.o

obj-$(CONFIG_IR_RC6_DECODER) += ir-rc6-decoder.o

obj-$(CONFIG_IR_SONY_DECODER) += ir-sony-decoder.o

obj-$(CONFIG_IR_SHARP_DECODER) += ir-sharp-decoder.o

obj-$(CONFIG_IR_XMP_DECODER) += ir-xmp-decoder.o

obj-$(CONFIG_IR_RCMM_DECODER) += ir-rcmm-decoder.o

 stand-alone IR receivers/transmitters

obj-$(CONFIG_IR_HIX5HD2) += ir-hix5hd2.o

obj-$(CONFIG_IR_IMON) += imon.o

obj-$(CONFIG_IR_IMON_RAW) += imon_raw.o

obj-$(CONFIG_IR_ITE_CIR) += ite-cir.o

obj-$(CONFIG_IR_MCEUSB) += mceusb.o

obj-$(CONFIG_IR_FINTEK) += fintek-cir.o

obj-$(CONFIG_IR_MESON_TX) += meson-ir-tx.o

obj-$(CONFIG_IR_NUVOTON) += nuvoton-cir.o

obj-$(CONFIG_IR_RX51) += ir-rx51.o

obj-$(CONFIG_RC_LOOPBACK) += rc-loopback.o

obj-$(CONFIG_IR_GPIO_CIR) += gpio-ir-recv.o

obj-$(CONFIG_IR_PWM_TX) += pwm-ir-tx.o

obj-$(CONFIG_IR_IGORPLUGUSB) += igorplugusb.o

obj-$(CONFIG_IR_IGUANA) += iguanair.o

obj-$(CONFIG_IR_TTUSBIR) += ttusbir.o

obj-$(CONFIG_IR_SERIAL) += serial_ir.o

obj-$(CONFIG_IR_MTK) += mtk-cir.o

obj-$(CONFIG_IR_TOY) += ir_toy.o

# SPDX-License-Identifier: GPL-2.0

img-ir-y			:= img-ir-core.o

img-ir-$(CONFIG_IR_IMG_RAW)	+= img-ir-raw.o

img-ir-$(CONFIG_IR_IMG_HW)	+= img-ir-hw.o

img-ir-$(CONFIG_IR_IMG_NEC)	+= img-ir-nec.o

img-ir-$(CONFIG_IR_IMG_JVC)	+= img-ir-jvc.o

img-ir-$(CONFIG_IR_IMG_SONY)	+= img-ir-sony.o

img-ir-$(CONFIG_IR_IMG_SHARP)	+= img-ir-sharp.o

img-ir-$(CONFIG_IR_IMG_SANYO)	+= img-ir-sanyo.o

img-ir-$(CONFIG_IR_IMG_RC5)	+= img-ir-rc5.o

img-ir-$(CONFIG_IR_IMG_RC6)	+= img-ir-rc6.o



obj-$(CONFIG_IR_IMG)		+= img-ir.o

# SPDX-License-Identifier: GPL-2.0

			rc-anysee.o \

			rc-apac-viewcomp.o \

			rc-asus-ps3-100.o \

			rc-avermedia-a16d.o \

			rc-avermedia.o \

			rc-avermedia-cardbus.o \

			rc-avertv-303.o \

			rc-behold.o \

			rc-behold-columbus.o \

			rc-budget-ci-old.o \

			rc-ct-90405.o \

			rc-delock-61959.o \

			rc-dib0700-nec.o \

			rc-dib0700-rc5.o \

			rc-digitalnow-tinytwin.o \

			rc-dm1105-nec.o \

			rc-dntv-live-dvb-t.o \

			rc-dvbsky.o \

			rc-dvico-mce.o \

			rc-encore-enltv.o \

			rc-encore-enltv-fm53.o \

			rc-eztv.o \

			rc-flyvideo.o \

			rc-genius-tvgo-a11mce.o \

			rc-gotview7135.o \

			rc-hisi-poplar.o \

			rc-imon-mce.o \

			rc-imon-rsc.o \

			rc-iodata-bctv7e.o \

			rc-it913x-v1.o \

			rc-it913x-v2.o \

			rc-khadas.o \

			rc-khamsin.o \

			rc-kworld-315u.o \

			rc-kworld-pc150u.o \

			rc-kworld-plus-tv-analog.o \

			rc-mecool-kii-pro.o \

			rc-mecool-kiii-pro.o \

			rc-msi-digivox-ii.o \

			rc-msi-digivox-iii.o \

			rc-nebula.o \

			rc-nec-terratec-cinergy-xs.o \

			rc-norwood.o \

			rc-npgtech.o \

			rc-pctv-sedna.o \

			rc-pinnacle-color.o \

			rc-pinnacle-grey.o \

			rc-pixelview-mk12.o \

			rc-proteus-2309.o \

			rc-real-audio-220-32-keys.o \

			rc-reddo.o \

			rc-tanix-tx5max.o \

			rc-tbs-nec.o \

			rc-technisat-usb2.o \

			rc-terratec-cinergy-s2-hd.o \

			rc-terratec-cinergy-xs.o \

			rc-terratec-slim.o \

			rc-terratec-slim-2.o \

			rc-tevii-nec.o \

			rc-total-media-in-hand-02.o \

			rc-twinhan-dtv-cab-ci.o \

			rc-twinhan1027.o \

			rc-videomate-s350.o \

			rc-winfast-usbii-deluxe.o \

			rc-xbox-360.o \

			rc-x96max.o \

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_DVB_FIREDTV) += firedtv.o

firedtv-$(CONFIG_DVB_FIREDTV_INPUT)    += firedtv-rc.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VIDEO_GS1662) += gs1662.o



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the kernel multimedia device drivers.





obj-y        +=	ttpci/		\

		pluto2/		\

		mantis/		\

		ngene/		\

		ddbridge/	\

		smipcie/	\

		netup_unidvb/	\



obj-$(CONFIG_VIDEO_IVTV) += ivtv/

obj-$(CONFIG_VIDEO_CX18) += cx18/

obj-$(CONFIG_VIDEO_CX23885) += cx23885/

obj-$(CONFIG_VIDEO_CX25821) += cx25821/

obj-$(CONFIG_VIDEO_CX88) += cx88/

obj-$(CONFIG_VIDEO_BT848) += bt8xx/

obj-$(CONFIG_VIDEO_SAA7134) += saa7134/

obj-$(CONFIG_VIDEO_SAA7164) += saa7164/

obj-$(CONFIG_VIDEO_TW68) += tw68/

obj-$(CONFIG_VIDEO_TW686X) += tw686x/

obj-$(CONFIG_VIDEO_DT3155) += dt3155/

obj-$(CONFIG_VIDEO_MEYE) += meye/

obj-$(CONFIG_STA2X11_VIP) += sta2x11/

obj-$(CONFIG_VIDEO_SOLO6X10) += solo6x10/

obj-$(CONFIG_VIDEO_COBALT) += cobalt/

obj-$(CONFIG_VIDEO_TW5864) += tw5864/

# SPDX-License-Identifier: GPL-2.0

			mantis_uart.o	\

			mantis_dma.o	\

			mantis_pci.o	\

			mantis_i2c.o	\

			mantis_dvb.o	\

			mantis_evm.o	\

			mantis_hif.o	\

			mantis_pcmcia.o	\

			mantis_input.o

			mantis_vp1033.o	\

			mantis_vp1041.o	\

			mantis_vp2040.o	\



hopper-objs	:=	hopper_cards.o	\



obj-$(CONFIG_DVB_MANTIS)	+= mantis.o



ccflags-y += -I $(srctree)/drivers/media/dvb-frontends/

# SPDX-License-Identifier: GPL-2.0

		  cobalt-i2c.o cobalt-omnitek.o cobalt-flash.o cobalt-cpld.o \



 SPDX-License-Identifier: GPL-2.0-only





 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VIDEO_DT3155)	+= dt3155.o

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

netup-unidvb-objs += netup_unidvb_ci.o

netup-unidvb-objs += netup_unidvb_spi.o

obj-$(CONFIG_DVB_NETUP_UNIDVB) += netup-unidvb.o

ccflags-y += -I $(srctree)/drivers/media/dvb-frontends

# SPDX-License-Identifier: GPL-2.0

		   ivtv-vbi.o ivtv-yuv.o



obj-$(CONFIG_VIDEO_IVTV_ALSA) += ivtv-alsa.o

obj-$(CONFIG_VIDEO_FB_IVTV) += ivtvfb.o

ccflags-y += -I$(srctree)/drivers/media/tuners

ccflags-y += -I$(srctree)/drivers/media/dvb-frontends

# SPDX-License-Identifier: GPL-2.0

cx25821-y   := cx25821-core.o cx25821-cards.o cx25821-i2c.o \

		       cx25821-video.o

obj-$(CONFIG_VIDEO_CX25821) += cx25821.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel SAA7146 FULL TS DVB device driver

#

obj-$(CONFIG_DVB_BUDGET_CORE) += budget-core.o

obj-$(CONFIG_DVB_BUDGET_AV) += budget-av.o



ccflags-y += -I $(srctree)/drivers/media/dvb-frontends/

ccflags-y += -I $(srctree)/drivers/media/tuners

ccflags-y += -I $(srctree)/drivers/media/common

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_STA2X11_VIP) += sta2x11_vip.o

# SPDX-License-Identifier: GPL-2.0





ccflags-y += -I $(srctree)/drivers/media/tuners

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_DVB_PLUTO2) += pluto2.o

# SPDX-License-Identifier: GPL-2.0

cx23885-objs	:= cx23885-cards.o cx23885-video.o cx23885-vbi.o \



obj-$(CONFIG_MEDIA_ALTERA_CI) += altera-ci.o

ccflags-y += -I $(srctree)/drivers/media/dvb-frontends

ccflags-y += $(extra-cflags-y) $(extra-cflags-m)

 SPDX-License-Identifier: GPL-2.0-only

tw686x-objs := tw686x-core.o tw686x-video.o tw686x-audio.o

obj-$(CONFIG_VIDEO_TW686X) += tw686x.o

# SPDX-License-Identifier: GPL-2.0

cx18-objs    := cx18-driver.o cx18-cards.o cx18-i2c.o cx18-firmware.o cx18-gpio.o \

cx18-alsa-objs := cx18-alsa-main.o cx18-alsa-pcm.o

obj-$(CONFIG_VIDEO_CX18) += cx18.o



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the IPU3 cio2 and ImGU drivers





 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VIDEO_IPU3_CIO2) += ipu3-cio2.o

ipu3-cio2-$(CONFIG_CIO2_BRIDGE) += cio2-bridge.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the ddbridge device driver

#

ddbridge-objs := ddbridge-main.o ddbridge-core.o ddbridge-ci.o \

		ddbridge-sx8.o

obj-$(CONFIG_DVB_DDBRIDGE) += ddbridge.o ddbridge-dummy-fe.o

ccflags-y += -I $(srctree)/drivers/media/tuners/

# SPDX-License-Identifier: GPL-2.0





# SPDX-License-Identifier: GPL-2.0

bttv-objs      :=      bttv-driver.o bttv-cards.o bttv-if.o \



obj-$(CONFIG_VIDEO_BT848) += bttv.o

obj-$(CONFIG_DVB_BT8XX) += bt878.o dvb-bt8xx.o dst.o dst_ca.o

ccflags-y += -I $(srctree)/drivers/media/dvb-frontends

ccflags-y += -I $(srctree)/drivers/media/tuners

# SPDX-License-Identifier: GPL-2.0

ifneq ($(CONFIG_DVB_B2C2_FLEXCOP_PCI),)



obj-$(CONFIG_DVB_B2C2_FLEXCOP_PCI) += b2c2-flexcop-pci.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the nGene device driver









ccflags-y += -I $(srctree)/drivers/media/dvb-frontends/

 SPDX-License-Identifier: GPL-2.0-only

		solo6x10-tw28.o solo6x10-gpio.o solo6x10-disp.o solo6x10-enc.o \

		solo6x10-v4l2-enc.o solo6x10-g723.o solo6x10-eeprom.o

obj-$(CONFIG_VIDEO_SOLO6X10) += solo6x10.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VIDEO_MXB) += mxb.o

obj-$(CONFIG_VIDEO_HEXIUM_GEMINI) += hexium_gemini.o

# SPDX-License-Identifier: GPL-2.0

cx88xx-objs	:= cx88-cards.o cx88-core.o cx88-i2c.o cx88-tvaudio.o \

cx8800-objs	:= cx88-video.o cx88-vbi.o



obj-$(CONFIG_VIDEO_CX88) += cx88xx.o cx8800.o

obj-$(CONFIG_VIDEO_CX88_MPEG) += cx8802.o

obj-$(CONFIG_VIDEO_CX88_BLACKBIRD) += cx88-blackbird.o

obj-$(CONFIG_VIDEO_CX88_VP3054) += cx88-vp3054-i2c.o

ccflags-y += -I $(srctree)/drivers/media/tuners

# SPDX-License-Identifier: GPL-2.0





 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_DVB_DM1105) += dm1105.o

ccflags-y += -I $(srctree)/drivers/media/dvb-frontends

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VIDEO_MEYE) += meye.o

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

saa7134-y +=	saa7134-video.o

saa7134-$(CONFIG_VIDEO_SAA7134_RC) += saa7134-input.o

obj-$(CONFIG_VIDEO_SAA7134_GO7007) += saa7134-go7007.o

obj-$(CONFIG_VIDEO_SAA7134_ALSA) += saa7134-alsa.o

obj-$(CONFIG_VIDEO_SAA7134_DVB) += saa7134-dvb.o

ccflags-y += -I$(srctree)/drivers/media/tuners

ccflags-y += -I$(srctree)/drivers/media/dvb-frontends

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Dallas's 1-wire bus.





wire-objs		:= w1.o w1_int.o w1_family.o w1_netlink.o w1_io.o



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for 1-wire bus master drivers.

#

obj-$(CONFIG_W1_MASTER_MATROX)		+= matrox_w1.o

obj-$(CONFIG_W1_MASTER_DS2490)		+= ds2490.o

obj-$(CONFIG_W1_MASTER_DS2482)		+= ds2482.o



obj-$(CONFIG_W1_MASTER_DS1WM)		+= ds1wm.o

obj-$(CONFIG_HDQ_MASTER_OMAP)		+= omap_hdq.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Dallas's 1-wire slaves.





obj-$(CONFIG_W1_SLAVE_SMEM)	+= w1_smem.o

obj-$(CONFIG_W1_SLAVE_DS2408)	+= w1_ds2408.o

obj-$(CONFIG_W1_SLAVE_DS2406)	+= w1_ds2406.o

obj-$(CONFIG_W1_SLAVE_DS2430)	+= w1_ds2430.o

obj-$(CONFIG_W1_SLAVE_DS2805)	+= w1_ds2805.o

obj-$(CONFIG_W1_SLAVE_DS2438)	+= w1_ds2438.o

obj-$(CONFIG_W1_SLAVE_DS2780)	+= w1_ds2780.o

obj-$(CONFIG_W1_SLAVE_DS28E04)	+= w1_ds28e04.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for soundwire core





#Bus Objs

soundwire-bus-y := bus_type.o bus.o master.o slave.o mipi_disco.o stream.o  \

obj-$(CONFIG_SOUNDWIRE) += soundwire-bus.o

obj-$(CONFIG_SOUNDWIRE_GENERIC_ALLOCATION) += soundwire-generic-allocation.o

soundwire-bus-y += debugfs.o

endif

Cadence Objs

obj-$(CONFIG_SOUNDWIRE_CADENCE) += soundwire-cadence.o

Intel driver

soundwire-intel-y :=	intel.o intel_init.o dmi-quirks.o



Qualcomm driver

soundwire-qcom-y :=	qcom.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_RPMSG_CHAR)	+= rpmsg_char.o

obj-$(CONFIG_RPMSG_NS)		+= rpmsg_ns.o

obj-$(CONFIG_RPMSG_QCOM_GLINK) += qcom_glink.o

obj-$(CONFIG_RPMSG_QCOM_GLINK_SMEM) += qcom_glink_smem.o

obj-$(CONFIG_RPMSG_VIRTIO)	+= virtio_rpmsg_bus.o

# SPDX-License-Identifier: GPL-2.0

CFLAGS_core.o				:= -I$(src)

icc-core-objs				:= core.o bulk.o

obj-$(CONFIG_INTERCONNECT_SAMSUNG)	+= samsung/

# SPDX-License-Identifier: GPL-2.0

qnoc-msm8916-objs			:= msm8916.o

qnoc-msm8974-objs			:= msm8974.o

qnoc-qcs404-objs			:= qcs404.o

icc-rpmh-obj				:= icc-rpmh.o

qnoc-sc8180x-objs			:= sc8180x.o

qnoc-sdm845-objs			:= sdm845.o

qnoc-sdx55-objs				:= sdx55.o

qnoc-sm8250-objs			:= sm8250.o



obj-$(CONFIG_INTERCONNECT_QCOM_OSM_L3) += icc-osm-l3.o

obj-$(CONFIG_INTERCONNECT_QCOM_QCS404) += qnoc-qcs404.o

obj-$(CONFIG_INTERCONNECT_QCOM_SMD_RPM) += icc-smd-rpm.o

# SPDX-License-Identifier: GPL-2.0

exynos-interconnect-objs		:= exynos.o

obj-$(CONFIG_INTERCONNECT_EXYNOS)	+= exynos-interconnect.o

imx-interconnect-objs			:= imx.o

imx8mq-interconnect-objs       		:= imx8mq.o



obj-$(CONFIG_INTERCONNECT_IMX)		+= imx-interconnect.o

obj-$(CONFIG_INTERCONNECT_IMX8MQ)	+= imx8mq-interconnect.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel character device drivers.

#

obj-y				+= mem.o random.o

obj-$(CONFIG_TTY_PRINTK)	+= ttyprintk.o

obj-$(CONFIG_ATARI_DSP56K)	+= dsp56k.o

obj-$(CONFIG_UV_MMTIMER)	+= uv_mmtimer.o

obj-$(CONFIG_IBM_BSR)		+= bsr.o

obj-$(CONFIG_PRINTER)		+= lp.o

obj-$(CONFIG_APM_EMULATION)	+= apm-emulation.o

obj-$(CONFIG_HW_RANDOM)		+= hw_random/

obj-$(CONFIG_PPDEV)		+= ppdev.o

obj-$(CONFIG_NWBUTTON)		+= nwbutton.o

obj-$(CONFIG_NWFLASH)		+= nwflash.o

obj-$(CONFIG_PC8736x_GPIO)	+= pc8736x_gpio.o

obj-$(CONFIG_NSC_GPIO)		+= nsc_gpio.o

obj-$(CONFIG_GPIO_TB0219)	+= tb0219.o



obj-y				+= agp/



obj-$(CONFIG_TCG_TPM)		+= tpm/

obj-$(CONFIG_PS3_FLASH)		+= ps3flash.o

obj-$(CONFIG_POWERNV_OP_PANEL)	+= powernv-op-panel.o

obj-$(CONFIG_ADI)		+= adi.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Xillybus driver

#

obj-$(CONFIG_XILLYBUS_CLASS)	+= xillybus_class.o

obj-$(CONFIG_XILLYBUS_PCIE)	+= xillybus_pcie.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel tpm device drivers.

#

tpm-y += tpm-dev.o

tpm-y += tpmrm-dev.o

tpm-y += tpm2-space.o

tpm-y += eventlog/common.o

tpm-y += eventlog/tpm2.o

obj-$(CONFIG_TCG_TIS_CORE) += tpm_tis_core.o

obj-$(CONFIG_TCG_TIS_SYNQUACER) += tpm_tis_synquacer.o

obj-$(CONFIG_TCG_TIS_SPI) += tpm_tis_spi.o

tpm_tis_spi-y := tpm_tis_spi_main.o





obj-$(CONFIG_TCG_TIS_I2C_INFINEON) += tpm_i2c_infineon.o

obj-$(CONFIG_TCG_NSC) += tpm_nsc.o

obj-$(CONFIG_TCG_INFINEON) += tpm_infineon.o

obj-$(CONFIG_TCG_CRB) += tpm_crb.o

obj-$(CONFIG_TCG_FTPM_TEE) += tpm_ftpm_tee.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for ST33ZP24 TPM 1.2 driver





obj-$(CONFIG_TCG_TIS_ST33ZP24) += tpm_st33zp24.o

obj-$(CONFIG_TCG_TIS_ST33ZP24_I2C) += tpm_st33zp24_i2c.o

obj-$(CONFIG_TCG_TIS_ST33ZP24_SPI) += tpm_st33zp24_spi.o

 SPDX-License-Identifier: GPL-2.0-only



# drivers/char/pcmcia/Makefile

#

 Makefile for the Linux PCMCIA char device drivers.





# SPDX-License-Identifier: GPL-2.0

#

# Makefile for HW Random Number Generator (RNG) device drivers.

#

rng-core-y := core.o

obj-$(CONFIG_HW_RANDOM_INTEL) += intel-rng.o

obj-$(CONFIG_HW_RANDOM_ATMEL) += atmel-rng.o

obj-$(CONFIG_HW_RANDOM_GEODE) += geode-rng.o

obj-$(CONFIG_HW_RANDOM_N2RNG) += n2-rng.o

n2-rng-y := n2-drv.o n2-asm.o

obj-$(CONFIG_HW_RANDOM_IXP4XX) += ixp4xx-rng.o

obj-$(CONFIG_HW_RANDOM_OMAP3_ROM) += omap3-rom-rng.o

obj-$(CONFIG_HW_RANDOM_VIRTIO) += virtio-rng.o

obj-$(CONFIG_HW_RANDOM_MXC_RNGA) += mxc-rnga.o

obj-$(CONFIG_HW_RANDOM_INGENIC_RNG) += ingenic-rng.o

obj-$(CONFIG_HW_RANDOM_OCTEON) += octeon-rng.o

obj-$(CONFIG_HW_RANDOM_PSERIES) += pseries-rng.o

obj-$(CONFIG_HW_RANDOM_HISI)	+= hisi-rng.o

obj-$(CONFIG_HW_RANDOM_IPROC_RNG200) += iproc-rng200.o

obj-$(CONFIG_HW_RANDOM_XGENE) += xgene-rng.o

obj-$(CONFIG_HW_RANDOM_PIC32) += pic32-rng.o

obj-$(CONFIG_HW_RANDOM_CAVIUM) += cavium-rng.o cavium-rng-vf.o

obj-$(CONFIG_HW_RANDOM_OPTEE) += optee-rng.o

obj-$(CONFIG_HW_RANDOM_CCTRNG) += cctrng.o

obj-$(CONFIG_HW_RANDOM_XIPHERA) += xiphera-trng.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ACP Modem (Mwave).



 See the README file in this directory for more info. <paulsch@us.ibm.com>









# To have the mwave driver disable other uarts if necessary

 ccflags-y := -DMWAVE_FUTZ_WITH_OTHER_DEVICES



# To compile in lots (~20 KiB) of run-time enablable printk()s for debugging:

ccflags-y += -DMW_TRACE

# SPDX-License-Identifier: GPL-2.0



ifeq ($(CONFIG_DRM_LEGACY),y)



obj-$(CONFIG_AGP_AMD)		+= amd-k7-agp.o

obj-$(CONFIG_AGP_AMD64)		+= amd64-agp.o

obj-$(CONFIG_AGP_ALPHA_CORE)	+= alpha-agp.o

obj-$(CONFIG_AGP_HP_ZX1)	+= hp-agp.o

obj-$(CONFIG_AGP_NVIDIA)	+= nvidia-agp.o

obj-$(CONFIG_AGP_SIS)		+= sis-agp.o

obj-$(CONFIG_AGP_UNINORTH)	+= uninorth-agp.o

obj-$(CONFIG_AGP_VIA)		+= via-agp.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Xilinx OPB hwicap driver





obj-$(CONFIG_XILINX_HWICAP) += xilinx_hwicap_m.o 

 

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the ipmi drivers.





ipmi_si-y := ipmi_si_intf.o ipmi_kcs_sm.o ipmi_smic_sm.o ipmi_bt_sm.o \

	ipmi_si_hotmod.o ipmi_si_hardcode.o ipmi_si_platform.o \

	ipmi_si_port_io.o ipmi_si_mem_io.o

ipmi_si-y += ipmi_si_pci.o

endif

ifdef CONFIG_PARISC

ipmi_si-y += ipmi_si_parisc.o

endif

obj-$(CONFIG_IPMI_SI) += ipmi_si.o

obj-$(CONFIG_IPMI_DMI_DECODE) += ipmi_dmi.o

obj-$(CONFIG_IPMI_SSIF) += ipmi_ssif.o

obj-$(CONFIG_IPMI_POWERNV) += ipmi_powernv.o

obj-$(CONFIG_IPMI_POWEROFF) += ipmi_poweroff.o

obj-$(CONFIG_IPMI_KCS_BMC) += kcs_bmc.o

obj-$(CONFIG_IPMI_KCS_BMC_SERIO) += kcs_bmc_serio.o

obj-$(CONFIG_IPMI_KCS_BMC_CDEV_IPMI) += kcs_bmc_cdev_ipmi.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_DCA) += dca.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_FSI) += fsi-core.o

obj-$(CONFIG_FSI_MASTER_ASPEED) += fsi-master-aspeed.o

obj-$(CONFIG_FSI_MASTER_AST_CF) += fsi-master-ast-cf.o

obj-$(CONFIG_FSI_SBEFIFO) += fsi-sbefifo.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the kernel software RAID and LVM drivers.





dm-mod-y	+= dm.o dm-table.o dm-target.o dm-linear.o dm-stripe.o \

		   dm-ioctl.o dm-io.o dm-kcopyd.o dm-sysfs.o dm-stats.o \

		    dm-snap-persistent.o

dm-mirror-y	+= dm-raid1.o

dm-log-userspace-y += dm-log-userspace-base.o dm-log-userspace-transfer.o

dm-thin-pool-y	+= dm-thin.o dm-thin-metadata.o

dm-cache-y	+= dm-cache-target.o dm-cache-metadata.o dm-cache-policy.o \

		    dm-cache-background-tracker.o

dm-cache-smq-y	+= dm-cache-policy-smq.o

dm-ebs-y	+= dm-ebs-target.o

dm-era-y	+= dm-era-target.o

dm-clone-y	+= dm-clone-target.o dm-clone-metadata.o

dm-verity-y	+= dm-verity-target.o



raid456-y	+= raid5.o raid5-cache.o raid5-ppl.o

linear-y	+= md-linear.o

multipath-y	+= md-multipath.o

faulty-y	+= md-faulty.o

# Note: link order is important.  All raid personalities

# and must come before md.o, as they each initialise 

# themselves, and md.o may use the personalities when it 

# auto-initialised.

obj-$(CONFIG_MD_LINEAR)		+= linear.o

obj-$(CONFIG_MD_RAID1)		+= raid1.o

obj-$(CONFIG_MD_FAULTY)		+= faulty.o

obj-$(CONFIG_BCACHE)		+= bcache/

obj-$(CONFIG_BLK_DEV_DM)	+= dm-mod.o

obj-$(CONFIG_DM_BIO_PRISON)	+= dm-bio-prison.o

obj-$(CONFIG_DM_CRYPT)		+= dm-crypt.o

obj-$(CONFIG_DM_DELAY)		+= dm-delay.o

obj-$(CONFIG_DM_DUST)		+= dm-dust.o

obj-$(CONFIG_DM_FLAKEY)		+= dm-flakey.o

obj-$(CONFIG_DM_MULTIPATH)	+= dm-multipath.o dm-round-robin.o

obj-$(CONFIG_DM_MULTIPATH_ST)	+= dm-service-time.o

obj-$(CONFIG_DM_MULTIPATH_IOA)	+= dm-io-affinity.o

obj-$(CONFIG_DM_SWITCH)		+= dm-switch.o

obj-$(CONFIG_DM_PERSISTENT_DATA) += persistent-data/

obj-$(CONFIG_DM_MIRROR)		+= dm-mirror.o dm-log.o dm-region-hash.o

obj-$(CONFIG_DM_THIN_PROVISIONING) += dm-thin-pool.o

obj-$(CONFIG_DM_VERITY)		+= dm-verity.o

obj-$(CONFIG_DM_CACHE)		+= dm-cache.o

obj-$(CONFIG_DM_LOG_WRITES)	+= dm-log-writes.o

obj-$(CONFIG_DM_WRITECACHE)	+= dm-writecache.o

ifeq ($(CONFIG_DM_INIT),y)



dm-mod-objs			+= dm-uevent.o

endif

ifeq ($(CONFIG_BLK_DEV_ZONED),y)







dm-verity-objs			+= dm-verity-verify-sig.o

endif

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_BCACHE)	+= bcache.o

bcache-y		:= alloc.o bset.o btree.o closure.o debug.o extents.o\

	io.o journal.o movinggc.o request.o stats.o super.o sysfs.o trace.o\

# SPDX-License-Identifier: GPL-2.0

dm-persistent-data-objs := \

	dm-array.o \

	dm-space-map-common.o \

	dm-space-map-metadata.o \

	dm-transaction-manager.o \

	dm-btree.o \

# SPDX-License-Identifier: GPL-2.0

# Makefile for external connector class (extcon) devices

#

obj-$(CONFIG_EXTCON)		+= extcon-core.o

obj-$(CONFIG_EXTCON_ADC_JACK)	+= extcon-adc-jack.o

obj-$(CONFIG_EXTCON_FSA9480)	+= extcon-fsa9480.o

obj-$(CONFIG_EXTCON_INTEL_INT3496) += extcon-intel-int3496.o

obj-$(CONFIG_EXTCON_INTEL_MRFLD) += extcon-intel-mrfld.o

obj-$(CONFIG_EXTCON_MAX3355)	+= extcon-max3355.o

obj-$(CONFIG_EXTCON_MAX77843)	+= extcon-max77843.o

obj-$(CONFIG_EXTCON_PALMAS)	+= extcon-palmas.o

obj-$(CONFIG_EXTCON_QCOM_SPMI_MISC) += extcon-qcom-spmi-misc.o

obj-$(CONFIG_EXTCON_SM5502)	+= extcon-sm5502.o

obj-$(CONFIG_EXTCON_USBC_CROS_EC) += extcon-usbc-cros-ec.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the kernel auxiliary displays device drivers.





obj-$(CONFIG_CHARLCD)		+= charlcd.o

obj-$(CONFIG_ARM_CHARLCD)	+= arm-charlcd.o

obj-$(CONFIG_KS0108)		+= ks0108.o

obj-$(CONFIG_CFAG12864B)	+= cfag12864b.o cfag12864bfb.o

obj-$(CONFIG_PARPORT_PANEL)	+= panel.o

obj-$(CONFIG_LCD2S)		+= lcd2s.o

obj-$(CONFIG_LINEDISP)		+= line-display.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Macintosh-specific device drivers.

#

# Each configuration option enables a list of files.



obj-$(CONFIG_PMAC_MEDIABAY)	+= mediabay.o

obj-$(CONFIG_INPUT_ADBHID)	+= adbhid.o



obj-$(CONFIG_ADB_PMU)		+= via-pmu.o via-pmu-event.o

obj-$(CONFIG_PMAC_SMU)		+= smu.o



obj-$(CONFIG_THERM_ADT746X)	+= therm_adt746x.o

obj-$(CONFIG_WINDFARM)	        += windfarm_core.o

				   windfarm_max6690_sensor.o \

				   windfarm_pid.o \

				   windfarm_cpufreq_clamp.o \

obj-$(CONFIG_WINDFARM_RM31)     += windfarm_fcu_controls.o \

				   windfarm_ad7417_sensor.o \

				   windfarm_lm75_sensor.o \

				   windfarm_lm87_sensor.o \

				   windfarm_rm31.o

				   windfarm_lm75_sensor.o windfarm_pid.o \

				   windfarm_cpufreq_clamp.o windfarm_pm81.o

				   windfarm_lm75_sensor.o windfarm_pid.o \

				   windfarm_cpufreq_clamp.o windfarm_pm91.o

obj-$(CONFIG_WINDFARM_PM112)	+= windfarm_pm112.o windfarm_smu_sat.o \

				   windfarm_max6690_sensor.o \

				   windfarm_smu_controls.o \

				   windfarm_smu_sensors.o \

				   windfarm_lm75_sensor.o windfarm_pid.o



obj-$(CONFIG_SENSORS_AMS)	+= ams/

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Apple Motion Sensor driver





ams-y					:= ams-core.o ams-input.o

ams-$(CONFIG_SENSORS_AMS_PMU)		+= ams-pmu.o

ams-$(CONFIG_SENSORS_AMS_I2C)		+= ams-i2c.o

obj-$(CONFIG_SENSORS_AMS)		+= ams.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the VME bridge device drivers.





 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_VME_CA91CX42)	+= vme_ca91cx42.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the VME board drivers.





obj-$(CONFIG_VMIVME_7805)	+= vme_vmivme7805.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for kernel SPMI framework.



obj-$(CONFIG_SPMI)	+= spmi.o

obj-$(CONFIG_SPMI_MSM_PMIC_ARB)	+= spmi-pmic-arb.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Counter devices

#

obj-$(CONFIG_COUNTER) += counter.o



obj-$(CONFIG_STM32_TIMER_CNT)	+= stm32-timer-cnt.o

obj-$(CONFIG_FTM_QUADDEC)	+= ftm-quaddec.o

# SPDX-License-Identifier: GPL-2.0

 Makefile for the Linux device tree





# virtual_root.o should be the last EISA root device to initialize,

# so leave it at the end of the list.

obj-${CONFIG_EISA_VIRTUAL_ROOT} += virtual_root.o



 Ugly hack to get DEVICE_NAME_SIZE value...



$(obj)/eisa-bus.o: $(obj)/devlist.h

/D' -e 's/^\([[:alnum:]]\{7\}\) \+"\([^"]\{1,$(DEVICE_NAME_SIZE)\}\).*"/EISA_DEVINFO ("\1", "\2"),/' $< > $@



$(obj)/devlist.h: $(src)/eisa.ids include/linux/device.h

	$(call cmd,eisaid)

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_VIRTIO_PCI_LIB_LEGACY) += virtio_pci_legacy_dev.o

obj-$(CONFIG_VIRTIO_PCI) += virtio_pci.o

virtio_pci-y := virtio_pci_modern.o virtio_pci_common.o

virtio_pci-$(CONFIG_VIRTIO_PCI_LEGACY) += virtio_pci_legacy.o

obj-$(CONFIG_VIRTIO_INPUT) += virtio_input.o

obj-$(CONFIG_VIRTIO_MEM) += virtio_mem.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for CoreSight drivers.

#

coresight-y := coresight-core.o  coresight-etm-perf.o coresight-platform.o \

		coresight-sysfs.o coresight-syscfg.o coresight-config.o \

obj-$(CONFIG_CORESIGHT_LINK_AND_SINK_TMC) += coresight-tmc.o

coresight-tmc-y := coresight-tmc-core.o coresight-tmc-etf.o \

		      coresight-tmc-etr.o

obj-$(CONFIG_CORESIGHT_SINK_TPIU) += coresight-tpiu.o

					   coresight-replicator.o

obj-$(CONFIG_CORESIGHT_SOURCE_ETM3X) += coresight-etm3x.o

		     coresight-etm3x-sysfs.o

obj-$(CONFIG_CORESIGHT_SOURCE_ETM4X) += coresight-etm4x.o

coresight-etm4x-y := coresight-etm4x-core.o coresight-etm4x-sysfs.o \

obj-$(CONFIG_CORESIGHT_STM) += coresight-stm.o

obj-$(CONFIG_CORESIGHT_CATU) += coresight-catu.o

obj-$(CONFIG_CORESIGHT_TRBE) += coresight-trbe.o

		   coresight-cti-sysfs.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_STM)	+= stm_core.o

stm_core-y		:= core.o policy.o

obj-$(CONFIG_STM_PROTO_BASIC) += stm_p_basic.o



stm_p_basic-y		:= p_basic.o

stm_p_sys-t-y		:= p_sys-t.o

obj-$(CONFIG_STM_DUMMY)	+= dummy_stm.o

obj-$(CONFIG_STM_SOURCE_FTRACE)		+= stm_ftrace.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_INTEL_TH)		+= intel_th.o

intel_th-$(CONFIG_INTEL_TH_DEBUG) += debug.o

obj-$(CONFIG_INTEL_TH_PCI)	+= intel_th_pci.o

intel_th_pci-y			:= pci.o

obj-$(CONFIG_INTEL_TH_ACPI)	+= intel_th_acpi.o

intel_th_acpi-y			:= acpi.o

obj-$(CONFIG_INTEL_TH_GTH)	+= intel_th_gth.o

intel_th_gth-y			:= gth.o

obj-$(CONFIG_INTEL_TH_STH)	+= intel_th_sth.o

intel_th_sth-y			:= sth.o

obj-$(CONFIG_INTEL_TH_MSU)	+= intel_th_msu.o

intel_th_msu-y			:= msu.o

obj-$(CONFIG_INTEL_TH_PTI)	+= intel_th_pti.o

intel_th_pti-y			:= pti.o

intel_th_msu_sink-y		:= msu-sink.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y := dma-buf.o dma-fence.o dma-fence-array.o dma-fence-chain.o \

obj-$(CONFIG_DMABUF_HEAPS)	+= dma-heap.o

obj-$(CONFIG_SW_SYNC)		+= sw_sync.o sync_debug.o

obj-$(CONFIG_UDMABUF)		+= udmabuf.o

obj-$(CONFIG_DMABUF_SYSFS_STATS) += dma-buf-sysfs-stats.o



# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

obj-y += amd/ intel/ arm/

obj-$(CONFIG_IOMMU_API) += iommu-sysfs.o

obj-$(CONFIG_IOMMU_DMA) += dma-iommu.o

obj-$(CONFIG_IOASID) += ioasid.o

obj-$(CONFIG_OF_IOMMU)	+= of_iommu.o

obj-$(CONFIG_IPMMU_VMSA) += ipmmu-vmsa.o

obj-$(CONFIG_MTK_IOMMU) += mtk_iommu.o

obj-$(CONFIG_OMAP_IOMMU) += omap-iommu.o

obj-$(CONFIG_ROCKCHIP_IOMMU) += rockchip-iommu.o

obj-$(CONFIG_TEGRA_IOMMU_GART) += tegra-gart.o

obj-$(CONFIG_EXYNOS_IOMMU) += exynos-iommu.o

obj-$(CONFIG_S390_IOMMU) += s390-iommu.o

obj-$(CONFIG_VIRTIO_IOMMU) += virtio-iommu.o

obj-$(CONFIG_IOMMU_SVA_LIB) += iommu-sva-lib.o io-pgfault.o

obj-$(CONFIG_APPLE_DART) += apple-dart.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_INTEL_IOMMU) += iommu.o pasid.o

obj-$(CONFIG_DMAR_TABLE) += trace.o cap_audit.o

obj-$(CONFIG_DMAR_PERF) += perf.o

obj-$(CONFIG_INTEL_IOMMU_SVM) += svm.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_AMD_IOMMU_DEBUGFS) += debugfs.o

# SPDX-License-Identifier: GPL-2.0

obj-y += arm-smmu/ arm-smmu-v3/

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_ARM_SMMU) += arm_smmu.o

arm_smmu-objs += arm-smmu.o arm-smmu-impl.o arm-smmu-nvidia.o

arm_smmu-$(CONFIG_ARM_SMMU_QCOM) += arm-smmu-qcom.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux ACPI interpreter

#



#

 ACPI Boot-Time Table Parsing



tables.o: $(src)/../../include/$(subst $\",,$(CONFIG_ACPI_CUSTOM_DSDT_FILE)) ;



obj-$(CONFIG_ACPI)		+= tables.o

obj-$(CONFIG_X86)		+= blacklist.o



 ACPI Core Subsystem (Interpreter)



					acpica/

# All the builtin files are in the "acpi." module_param namespace.

acpi-y				+= osi.o osl.o utils.o reboot.o



 Power management related files

acpi-$(CONFIG_ACPI_SYSTEM_POWER_STATES_SUPPORT) += sleep.o

acpi-y				+= device_sysfs.o device_pm.o

acpi-$(CONFIG_ACPI_SLEEP)	+= proc.o



#

# ACPI Bus and Device Drivers

#

acpi-y				+= bus.o glue.o

acpi-y				+= scan.o

acpi-y				+= resource.o

acpi-y				+= acpi_processor.o

acpi-y				+= processor_core.o

acpi-$(CONFIG_ACPI_DOCK)	+= dock.o

obj-$(CONFIG_ACPI_MCFG)		+= pci_mcfg.o

acpi-y				+= acpi_platform.o

acpi-y				+= acpi_pnp.o

acpi-y				+= power.o

acpi-y				+= evged.o

acpi-$(CONFIG_X86)		+= acpi_cmos_rtc.o

acpi-$(CONFIG_X86)		+= x86/utils.o

acpi-$(CONFIG_X86)		+= x86/s2idle.o

acpi-$(CONFIG_DEBUG_FS)		+= debugfs.o

acpi-$(CONFIG_ACPI_GENERIC_GSI) += irq.o

acpi-$(CONFIG_ACPI_WATCHDOG)	+= acpi_watchdog.o



# Address translation

acpi-$(CONFIG_ACPI_ADXL)	+= acpi_adxl.o

# These are (potentially) separate modules

# IPMI may be used by other drivers, so it has to initialise before them

obj-$(CONFIG_ACPI_IPMI)		+= acpi_ipmi.o

obj-$(CONFIG_ACPI_FAN)		+= fan.o

obj-$(CONFIG_ACPI_VIDEO)	+= video.o

obj-$(CONFIG_ACPI_TAD)		+= acpi_tad.o

obj-$(CONFIG_ACPI_PCI_SLOT)	+= pci_slot.o

obj-$(CONFIG_ACPI_PROCESSOR)	+= processor.o

obj-$(CONFIG_ACPI_PLATFORM_PROFILE) 	+= platform_profile.o

obj-$(CONFIG_ACPI_NFIT)		+= nfit/

obj-$(CONFIG_ACPI_NUMA)		+= numa/

obj-$(CONFIG_ACPI_SBS)		+= sbshc.o

obj-$(CONFIG_ACPI_HED)		+= hed.o

obj-$(CONFIG_ACPI_EC_DEBUGFS)	+= ec_sys.o

obj-$(CONFIG_ACPI_BGRT)		+= bgrt.o

obj-$(CONFIG_ACPI_DEBUGGER_USER) += acpi_dbg.o



# processor has its own "processor." module_param namespace

processor-y			:= processor_driver.o

processor-$(CONFIG_ACPI_PROCESSOR_IDLE) += processor_idle.o

processor-$(CONFIG_ACPI_CPU_FREQ_PSS)	+= processor_throttling.o	\



obj-$(CONFIG_ACPI_PROCESSOR_AGGREGATOR) += acpi_pad.o







obj-y				+= pmic/





 SPDX-License-Identifier: GPL-2.0-only

nfit-y := core.o

nfit-y += intel.o

nfit-$(CONFIG_X86_MCE) += mce.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_ACPI_APEI_GHES)	+= ghes.o

obj-$(CONFIG_ACPI_APEI_ERST_DEBUG) += erst-dbg.o

apei-y := apei-base.o hest.o erst.o bert.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_DPTF_POWER)	+= dptf_power.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ACPI_IORT) 	+= iort.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PMIC_OPREGION)		+= intel_pmic.o

obj-$(CONFIG_BYTCRC_PMIC_OPREGION)	+= intel_pmic_bytcrc.o

obj-$(CONFIG_CHTCRC_PMIC_OPREGION)	+= intel_pmic_chtcrc.o

obj-$(CONFIG_XPOWER_PMIC_OPREGION)	+= intel_pmic_xpower.o

obj-$(CONFIG_CHT_WC_PMIC_OPREGION)	+= intel_pmic_chtwc.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for ACPICA Core interpreter





ccflags-y			:= -Os -D_LINUX -DBUILDING_ACPICA

ccflags-$(CONFIG_ACPI_DEBUG)	+= -DACPI_DEBUG_OUTPUT

 use acpi.o to put all files here into acpi.o modparam namespace



	dscontrol.o	\

	dsfield.o	\

	dsinit.o	\

	dsmethod.o	\

	dsmthdat.o	\

	dsobject.o	\

	dsopcode.o	\

	dsutils.o	\

	dswload.o	\

	dswload2.o	\

	dswscope.o	\

	dswstate.o

acpi-y +=		\

	evgpeinit.o	\

	evglock.o	\

	evxface.o	\

	evxfevnt.o	\



	exdebug.o	\

	exdump.o	\

	exfldio.o	\

	exmisc.o	\

	exnames.o	\

	exoparg1.o	\

	exoparg2.o	\

	exoparg3.o	\

	exoparg6.o	\

	exprep.o	\

	exregion.o	\

	exresnte.o	\

	exresolv.o	\

	exstore.o	\

	exstoren.o	\

	exstorob.o	\

	exsystem.o	\

	exutils.o

acpi-y +=		\

	hwacpi.o	\

	hwesleep.o	\

	hwgpe.o		\

	hwregs.o	\

	hwvalid.o	\

	hwxfsleep.o

acpi-$(ACPI_FUTURE_USAGE) += hwtimer.o

acpi-y +=		\

	nsaccess.o	\

	nsarguments.o	\

	nsnames.o	\

	nsobject.o	\

	nsrepair2.o	\

	nssearch.o	\

	nsxfobj.o



	psparse.o	\

	psutils.o	\

	pswalk.o	\



	rsio.o		\

	rsirq.o		\

	rslist.o	\

	rsmemory.o	\

	rsmisc.o	\

	rsserial.o	\

	rsxface.o

acpi-y +=		\

	tbdata.o	\

	tbfadt.o	\

	tbfind.o	\

	tbinstal.o	\

	tbutils.o	\



	utaddress.o	\

	utascii.o	\

	utbuffer.o	\

	utcopy.o	\

	utdebug.o	\

	utdecode.o	\

	utdelete.o	\

	utmutex.o	\

	utownerid.o	\

	utpredef.o	\

	utresrc.o	\

	utstrtoul64.o	\

	utxferror.o	\



acpi-$(CONFIG_ACPI_DEBUGGER) +=	\

	dbdisply.o		\

	dbhistry.o		\

	dbinput.o		\

	dbobject.o		\

	dbstats.o		\

	dbutils.o		\

	dbxface.o		\



	dbfileio.o		\



 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel Parallel port device drivers.

#

parport-objs	:= share.o ieee1284.o ieee1284_ops.o procfs.o

	parport-objs	+= daisy.o probe.o

endif

obj-$(CONFIG_PARPORT_PC)	+= parport_pc.o

obj-$(CONFIG_PARPORT_AMIGA)	+= parport_amiga.o

obj-$(CONFIG_PARPORT_ATARI)	+= parport_atari.o

obj-$(CONFIG_PARPORT_GSC)	+= parport_gsc.o

obj-$(CONFIG_PARPORT_IP32)	+= parport_ip32.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the kernel MemoryStick device drivers.







obj-$(CONFIG_MEMSTICK)		+= host/

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the kernel MemoryStick core.





obj-$(CONFIG_MEMSTICK)		+= memstick.o

obj-$(CONFIG_MS_BLOCK)		+= ms_block.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for MemoryStick host controller drivers





obj-$(CONFIG_MEMSTICK_R592)		+= r592.o

obj-$(CONFIG_MEMSTICK_REALTEK_PCI)	+= rtsx_pci_ms.o

obj-$(CONFIG_MEMSTICK_REALTEK_USB)	+= rtsx_usb_ms.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux Plug-and-Play Support.

#





obj-$(CONFIG_PNPBIOS)		+= pnpbios/



# pnp_system_init goes after pnpacpi/pnpbios init

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the kernel PNPACPI driver.



obj-y += pnp.o

pnp-y := core.o rsparser.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the kernel PNPBIOS driver.



obj-y := pnp.o

pnp-y := core.o bioscalls.o rsparser.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the kernel ISAPNP driver.

#

pnp-y			:= core.o compat.o

 SPDX-License-Identifier: GPL-2.0-only

thunderbolt-objs := nhi.o nhi_ops.o ctl.o tb.o switch.o cap.o path.o tunnel.o eeprom.o

thunderbolt-objs += usb4_port.o nvm.o retimer.o quirks.o

thunderbolt-${CONFIG_ACPI} += acpi.o

thunderbolt-$(CONFIG_DEBUG_FS) += debugfs.o

thunderbolt-${CONFIG_USB4_KUNIT_TEST} += test.o

CFLAGS_test.o += $(DISABLE_STRUCTLEAK_PLUGIN)

thunderbolt_dma_test-${CONFIG_USB4_DMA_TEST} += dma_test.o

obj-$(CONFIG_USB4_DMA_TEST) += thunderbolt_dma_test.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for MPT based block devices

#

# SPDX-License-Identifier: GPL-2.0

# Fusion MPT drivers; recognized debug defines...

# enable verbose logging

 CONFIG_FUSION_LOGGING needs to be enabled in Kconfig

ccflags-y := -DMPT_DEBUG_VERBOSE



#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-} LSI_LOGIC

obj-$(CONFIG_FUSION_FC)		+= mptbase.o mptscsih.o mptfc.o

obj-$(CONFIG_FUSION_SAS)	+= mptbase.o mptscsih.o mptsas.o

obj-$(CONFIG_FUSION_LAN)	+= mptlan.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux network device drivers.





#

# Networking Core Drivers

#

obj-$(CONFIG_BONDING) += bonding/

obj-$(CONFIG_IPVLAN) += ipvlan/

obj-$(CONFIG_IPVTAP) += ipvlan/

obj-$(CONFIG_EQUALIZER) += eql.o

obj-$(CONFIG_MACSEC) += macsec.o

obj-$(CONFIG_MACVLAN) += macvlan.o

obj-$(CONFIG_MII) += mii.o

obj-$(CONFIG_NETCONSOLE) += netconsole.o

obj-y += phy/

obj-$(CONFIG_RIONET) += rionet.o

obj-$(CONFIG_NET_TEAM) += team/

obj-$(CONFIG_TAP) += tap.o

obj-$(CONFIG_VIRTIO_NET) += virtio_net.o

obj-$(CONFIG_GENEVE) += geneve.o

obj-$(CONFIG_GTP) += gtp.o

obj-$(CONFIG_NET_VRF) += vrf.o

obj-$(CONFIG_MHI_NET) += mhi_net.o



# Networking Drivers

#

obj-$(CONFIG_ARCNET) += arcnet/

obj-$(CONFIG_DEV_APPLETALK) += appletalk/

obj-$(CONFIG_CAIF) += caif/

obj-$(CONFIG_CAN) += can/

obj-$(CONFIG_NET_DSA) += dsa/

obj-$(CONFIG_ETHERNET) += ethernet/

obj-$(CONFIG_FDDI) += fddi/

obj-$(CONFIG_HIPPI) += hippi/

obj-$(CONFIG_HAMRADIO) += hamradio/

obj-$(CONFIG_PPP_MPPE) += ppp/

obj-$(CONFIG_PPPOL2TP) += ppp/

obj-$(CONFIG_NET_SB1000) += sb1000.o



obj-$(CONFIG_VMXNET3) += vmxnet3/

obj-$(CONFIG_XEN_NETDEV_FRONTEND) += xen-netfront.o



obj-$(CONFIG_USB_NET_DRIVERS) += usb/

obj-$(CONFIG_NTB_NETDEV) += ntb_netdev.o



obj-$(CONFIG_NET_FAILOVER) += net_failover.o

 SPDX-License-Identifier: GPL-2.0-only



xen-netback-y := netback.o xenbus.o interface.o hash.o rx.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the HIPPI network device drivers.

#

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the SLIP network device drivers.





obj-$(CONFIG_SLHC) += slhc.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Ethernet Ipvlan driver





obj-$(CONFIG_IPVTAP) += ipvtap.o

ipvlan-objs-$(CONFIG_IPVLAN_L3S) += ipvlan_l3s.o

ipvlan-objs := ipvlan_core.o ipvlan_main.o $(ipvlan-objs-y)

# SPDX-License-Identifier: GPL-2.0

# Makefile for Linux MDIO bus drivers

obj-$(CONFIG_FWNODE_MDIO)	+= fwnode_mdio.o

obj-$(CONFIG_OF_MDIO)		+= of_mdio.o

obj-$(CONFIG_MDIO_GPIO)			+= mdio-gpio.o

obj-$(CONFIG_MDIO_HISI_FEMAC)		+= mdio-hisi-femac.o



obj-$(CONFIG_MDIO_BUS_MUX)		+= mdio-mux.o

obj-$(CONFIG_MDIO_BUS_MUX_BCM_IPROC)	+= mdio-mux-bcm-iproc.o

obj-$(CONFIG_MDIO_BUS_MUX_GPIO)		+= mdio-mux-gpio.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the PLIP network device drivers.





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Ethernet Bonding driver

#

obj-$(CONFIG_BONDING) += bonding.o

bonding-objs := bond_main.o bond_3ad.o bond_alb.o bond_sysfs.o bond_sysfs_slave.o bond_debugfs.o bond_netlink.o bond_options.o



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux network (wan) device drivers.



 3 Aug 2000, Christoph Hellwig <hch@infradead.org>

# Rewritten to use lists instead of if-statements.

#

obj-$(CONFIG_HDLC_RAW_ETH)	+= hdlc_raw_eth.o



obj-$(CONFIG_HOSTESS_SV11)	+= z85230.o	hostess_sv11.o



obj-$(CONFIG_LANMEDIA)		+= lmc/

obj-$(CONFIG_IXP4XX_HSS)	+= ixp4xx_hss.o

obj-$(CONFIG_SLIC_DS26522)	+= slic_ds26522.o

clean-files := wanxlfw.inc





ifeq ($(CONFIG_WANXL_BUILD_FIRMWARE),y)

ifeq ($(ARCH),m68k)

  M68KLD = $(LD)

  M68KLD = $(CROSS_COMPILE_M68K)ld

endif

quiet_cmd_build_wanxlfw = BLDFW   $@





quiet_cmd_m68kld_bin_o = M68KLD  $@



	$(call if_changed,m68kld_bin_o)

      cmd_m68kas_o_S = $(M68KCC) -D__ASSEMBLY__ -Wp,-MD,$(depfile) -I$(srctree)/include/uapi -c -o $@ $<

$(obj)/wanxlfw.o: $(src)/wanxlfw.S FORCE

targets += wanxlfw.inc wanxlfw.bin wanxlfw.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Lan Media 21140 based WAN cards

 Specifically the 1000,1200,5200,5245





obj-$(CONFIG_LANMEDIA) += lmc.o

lmc-objs := lmc_debug.o lmc_media.o lmc_main.o lmc_proto.o

# Like above except every packet gets echoed to KERN_DEBUG

 in hex



 DBDEF = \

 -DDEBUG \

# -DLMC_PACKET_LOG

ccflags-y := $(DBGDEF)

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for drivers/net/appletalk

#

obj-$(CONFIG_IPDDP) += ipddp.o

obj-$(CONFIG_LTPC) += ltpc.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the network team driver





obj-$(CONFIG_NET_TEAM_MODE_BROADCAST) += team_mode_broadcast.o

obj-$(CONFIG_NET_TEAM_MODE_RANDOM) += team_mode_random.o

obj-$(CONFIG_NET_TEAM_MODE_LOADBALANCE) += team_mode_loadbalance.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for USB Network drivers





obj-$(CONFIG_USB_CATC)		+= catc.o

obj-$(CONFIG_USB_PEGASUS)	+= pegasus.o

obj-$(CONFIG_USB_RTL8152)	+= r8152.o

obj-$(CONFIG_USB_HSO)		+= hso.o

obj-$(CONFIG_USB_NET_CDC_EEM)	+= cdc_eem.o

obj-$(CONFIG_USB_NET_SR9700)	+= sr9700.o

obj-$(CONFIG_USB_NET_SMSC75XX)	+= smsc75xx.o

obj-$(CONFIG_USB_NET_GL620A)	+= gl620a.o

obj-$(CONFIG_USB_NET_PLUSB)	+= plusb.o

obj-$(CONFIG_USB_NET_ZAURUS)	+= zaurus.o

obj-$(CONFIG_USB_USBNET)	+= usbnet.o

obj-$(CONFIG_USB_CDC_PHONET)	+= cdc-phonet.o

obj-$(CONFIG_USB_IPHETH)	+= ipheth.o

obj-$(CONFIG_USB_NET_CX82310_ETH)	+= cx82310_eth.o

obj-$(CONFIG_USB_NET_HUAWEI_CDC_NCM)	+= huawei_cdc_ncm.o

obj-$(CONFIG_USB_NET_QMI_WWAN)	+= qmi_wwan.o

obj-$(CONFIG_USB_NET_CH9200)	+= ch9200.o

obj-$(CONFIG_USB_RTL8153_ECM)	+= r8153_ecm.o

ccflags-y := -D'pr_fmt(fmt)=KBUILD_MODNAME ": " fmt'

wireguard-y += noise.o

wireguard-y += device.o

wireguard-y += peer.o

wireguard-y += timers.o

wireguard-y += queueing.o

wireguard-y += send.o

wireguard-y += ratelimiter.o

wireguard-y += cookie.o

obj-$(CONFIG_WIREGUARD) := wireguard.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux network Ethernet device drivers.

#

obj-$(CONFIG_NET_VENDOR_3COM) += 3com/

obj-$(CONFIG_NET_VENDOR_ACTIONS) += actions/

obj-$(CONFIG_GRETH) += aeroflex/

obj-$(CONFIG_NET_VENDOR_ALACRITECH) += alacritech/

obj-$(CONFIG_NET_VENDOR_ALTEON) += alteon/

obj-$(CONFIG_ALTERA_TSE) += altera/

obj-$(CONFIG_NET_VENDOR_AMD) += amd/

obj-$(CONFIG_NET_XGENE) += apm/

obj-$(CONFIG_NET_VENDOR_AQUANTIA) += aquantia/

obj-$(CONFIG_NET_VENDOR_ASIX) += asix/

obj-$(CONFIG_NET_VENDOR_CADENCE) += cadence/

obj-$(CONFIG_NET_VENDOR_BROCADE) += brocade/

obj-$(CONFIG_NET_CALXEDA_XGMAC) += calxeda/

obj-$(CONFIG_NET_VENDOR_CHELSIO) += chelsio/

obj-$(CONFIG_NET_VENDOR_CISCO) += cisco/

obj-$(CONFIG_DM9000) += davicom/

obj-$(CONFIG_NET_VENDOR_DEC) += dec/

obj-$(CONFIG_NET_VENDOR_EMULEX) += emulex/

obj-$(CONFIG_NET_VENDOR_FARADAY) += faraday/

obj-$(CONFIG_NET_VENDOR_FUJITSU) += fujitsu/

obj-$(CONFIG_NET_VENDOR_HISILICON) += hisilicon/

obj-$(CONFIG_NET_VENDOR_IBM) += ibm/

obj-$(CONFIG_NET_VENDOR_I825XX) += i825xx/

obj-$(CONFIG_NET_VENDOR_XSCALE) += xscale/

obj-$(CONFIG_KORINA) += korina.o

obj-$(CONFIG_LANTIQ_XRX200) += lantiq_xrx200.o

obj-$(CONFIG_NET_VENDOR_MARVELL) += marvell/

obj-$(CONFIG_NET_VENDOR_MELLANOX) += mellanox/

obj-$(CONFIG_NET_VENDOR_MICROCHIP) += microchip/

obj-$(CONFIG_NET_VENDOR_MICROSEMI) += mscc/

obj-$(CONFIG_FEALNX) += fealnx.o

obj-$(CONFIG_NET_VENDOR_NETERION) += neterion/

obj-$(CONFIG_NET_VENDOR_NI) += ni/

obj-$(CONFIG_LPC_ENET) += nxp/

obj-$(CONFIG_NET_VENDOR_OKI) += oki-semi/

obj-$(CONFIG_NET_VENDOR_PASEMI) += pasemi/

obj-$(CONFIG_NET_VENDOR_QUALCOMM) += qualcomm/

obj-$(CONFIG_NET_VENDOR_RENESAS) += renesas/

obj-$(CONFIG_NET_VENDOR_ROCKER) += rocker/

obj-$(CONFIG_NET_VENDOR_SEEQ) += seeq/

obj-$(CONFIG_NET_VENDOR_SIS) += sis/

obj-$(CONFIG_NET_VENDOR_SOLARFLARE) += sfc/

obj-$(CONFIG_NET_VENDOR_SMSC) += smsc/

obj-$(CONFIG_NET_VENDOR_STMICRO) += stmicro/

obj-$(CONFIG_NET_VENDOR_TEHUTI) += tehuti/

obj-$(CONFIG_NET_VENDOR_TOSHIBA) += toshiba/

obj-$(CONFIG_NET_VENDOR_VIA) += via/

obj-$(CONFIG_NET_VENDOR_XILINX) += xilinx/

obj-$(CONFIG_NET_VENDOR_SYNOPSYS) += synopsys/

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Marvell device drivers.





obj-$(CONFIG_MV643XX_ETH) += mv643xx_eth.o

obj-$(CONFIG_MVNETA) += mvneta.o

obj-$(CONFIG_MVPP2) += mvpp2/

obj-$(CONFIG_SKGE) += skge.o

obj-y		+= octeontx2/

obj-y		+= prestera/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Marvell PPv2 driver.

#



mvpp2-y := mvpp2_main.o mvpp2_prs.o mvpp2_cls.o mvpp2_debugfs.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Marvell OcteonTX2 device drivers.





obj-$(CONFIG_OCTEONTX2_MBOX) += af/

obj-$(CONFIG_OCTEONTX2_AF) += af/

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Marvell's RVU Admin Function driver





ccflags-y += -I$(src)

obj-$(CONFIG_OCTEONTX2_AF) += rvu_af.o

rvu_mbox-y := mbox.o rvu_trace.o

rvu_af-y := cgx.o rvu.o rvu_cgx.o rvu_npa.o rvu_nix.o \

		  rvu_cpt.o rvu_devlink.o rpm.o rvu_cn10k.o rvu_switch.o \

		  rvu_sdp.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Marvell's RVU Ethernet device drivers





obj-$(CONFIG_OCTEONTX2_VF) += rvu_nicvf.o otx2_ptp.o



ccflags-y += -I$(srctree)/drivers/net/ethernet/marvell/octeontx2/af

# SPDX-License-Identifier: GPL-2.0

prestera-objs		:= prestera_main.o prestera_hw.o prestera_dsa.o \

			   prestera_rxtx.o prestera_devlink.o prestera_ethtool.o \

			   prestera_switchdev.o prestera_acl.o prestera_flow.o \

			   prestera_flower.o prestera_span.o

obj-$(CONFIG_PRESTERA_PCI)	+= prestera_pci.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Davicom device drivers.

#

obj-$(CONFIG_DM9000) += dm9000.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the STMicroelectronics device drivers.





obj-$(CONFIG_STMMAC_ETH) += stmmac/

# SPDX-License-Identifier: GPL-2.0

stmmac-objs:= stmmac_main.o stmmac_ethtool.o stmmac_mdio.o ring_mode.o	\

	      dwmac100_core.o dwmac100_dma.o enh_desc.o norm_desc.o	\

	      mmc_core.o stmmac_hwtstamp.o stmmac_ptp.o dwmac4_descs.o	\

	      stmmac_tc.o dwxgmac2_core.o dwxgmac2_dma.o dwxgmac2_descs.o \

	      stmmac_xdp.o \



stmmac-$(CONFIG_STMMAC_SELFTESTS) += stmmac_selftests.o

# Ordering matters. Generic driver must be last.

obj-$(CONFIG_DWMAC_ANARION)	+= dwmac-anarion.o

obj-$(CONFIG_DWMAC_IPQ806X)	+= dwmac-ipq806x.o

obj-$(CONFIG_DWMAC_MEDIATEK)	+= dwmac-mediatek.o

obj-$(CONFIG_DWMAC_OXNAS)	+= dwmac-oxnas.o

obj-$(CONFIG_DWMAC_ROCKCHIP)	+= dwmac-rk.o

obj-$(CONFIG_DWMAC_SOCFPGA)	+= dwmac-altr-socfpga.o

obj-$(CONFIG_DWMAC_STI)		+= dwmac-sti.o

obj-$(CONFIG_DWMAC_SUNXI)	+= dwmac-sunxi.o

obj-$(CONFIG_DWMAC_DWC_QOS_ETH)	+= dwmac-dwc-qos-eth.o

obj-$(CONFIG_DWMAC_GENERIC)	+= dwmac-generic.o

obj-$(CONFIG_DWMAC_IMX8)	+= dwmac-imx.o

stmmac-platform-objs:= stmmac_platform.o

dwmac-altr-socfpga-objs := altr_tse_pcs.o dwmac-socfpga.o

obj-$(CONFIG_STMMAC_PCI)	+= stmmac-pci.o

obj-$(CONFIG_DWMAC_LOONGSON)	+= dwmac-loongson.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Altera device drivers.





# SPDX-License-Identifier: GPL-2.0

			   farch.o siena.o ef10.o \

			   mcdi_functions.o mcdi_filters.o mcdi_mon.o \

sfc-$(CONFIG_SFC_MTD)	+= mtd.o

sfc-$(CONFIG_SFC_SRIOV)	+= sriov.o siena_sriov.o ef10_sriov.o

obj-$(CONFIG_SFC)	+= sfc.o

# SPDX-License-Identifier: GPL-2.0

			   txc43128_phy.o falcon_boards.o

sfc-falcon-$(CONFIG_SFC_FALCON_MTD)	+= mtd.o

obj-$(CONFIG_SFC_FALCON)		+= sfc-falcon.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_EZCHIP_NPS_MANAGEMENT_ENET) += nps_enet.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Exar network device drivers.





 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Exar Corp's X3100 Series 10 GbE PCIe I/O

 Virtualized Server Adapter linux driver





# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the National Semiconductor Sonic devices.





obj-$(CONFIG_MIPS_JAZZ_SONIC) += jazzsonic.o

obj-$(CONFIG_NS83820) += ns83820.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Broadcom network device drivers.

#

obj-$(CONFIG_B44) += b44.o

obj-$(CONFIG_BCM63XX_ENET) += bcm63xx_enet.o

obj-$(CONFIG_BNX2) += bnx2.o

obj-$(CONFIG_SB1250_MAC) += sb1250-mac.o

obj-$(CONFIG_TIGON3) += tg3.o

obj-$(CONFIG_BGMAC_BCMA) += bgmac-bcma.o bgmac-bcma-mdio.o

obj-$(CONFIG_SYSTEMPORT) += bcmsysport.o

obj-$(CONFIG_BNXT) += bnxt/

 SPDX-License-Identifier: GPL-2.0-only



bnxt_en-$(CONFIG_BNXT_FLOWER_OFFLOAD) += bnxt_tc.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Broadcom 10-Gigabit ethernet driver

#

obj-$(CONFIG_BNX2X) += bnx2x.o

 SPDX-License-Identifier: GPL-2.0-only

genet-objs := bcmgenet.o bcmmii.o bcmgenet_wol.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Adaptec network device drivers.

#

obj-$(CONFIG_ADAPTEC_STARFIRE) += starfire.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Qualcomm network device drivers.

#

obj-$(CONFIG_QCA7000) += qca_7k_common.o

obj-$(CONFIG_QCA7000_SPI) += qcaspi.o

qcaspi-objs := qca_7k.o qca_debug.o qca_spi.o

obj-$(CONFIG_QCA7000_UART) += qcauart.o





obj-$(CONFIG_RMNET) += rmnet/

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the RMNET module





rmnet-y		 := rmnet_config.o

rmnet-y		 += rmnet_map_command.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Qualcomm Technologies, Inc. EMAC Gigabit Ethernet driver







		  emac-sgmii-qdf2400.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Xilink network device drivers.

#

ll_temac-objs := ll_temac_main.o ll_temac_mdio.o

obj-$(CONFIG_XILINX_LL_TEMAC) += ll_temac.o

obj-$(CONFIG_XILINX_AXI_EMAC) += xilinx_emac.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Silicon Integrated Systems (SiS) network device drivers.





obj-$(CONFIG_SIS900) += sis900.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Tehuti network device drivers.





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Cavium ethernet device drivers.

#

obj-$(CONFIG_NET_VENDOR_CAVIUM) += liquidio/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CAVIUM_PTP) += cavium_ptp.o

# SPDX-License-Identifier: GPL-2.0

#

 Cavium Liquidio ethernet device driver





common-objs :=	lio_ethtool.o		\

		lio_core.o		\

		request_manager.o	\

		octeon_device.o		\

		cn68xx_device.o		\

		cn23xx_vf_device.o	\

		octeon_mem_ops.o	\

		octeon_nic.o

obj-$(CONFIG_LIQUIDIO) += liquidio.o

liquidio-y := lio_main.o octeon_console.o lio_vf_rep.o $(common-objs)

obj-$(CONFIG_LIQUIDIO_VF) += liquidio_vf.o

liquidio_vf-y := lio_vf_main.o $(common-objs)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Cavium's Thunder ethernet device

#

obj-$(CONFIG_THUNDER_NIC_RGX) += thunder_xcv.o



nicpf-y := nic_main.o

nicvf-y += nicvf_ethtool.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Cavium network device drivers.





obj-$(CONFIG_OCTEON_MGMT_ETHERNET)	+= octeon_mgmt.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the aQuantia device drivers.





obj-$(CONFIG_AQTION) += atlantic/

 SPDX-License-Identifier: GPL-2.0-only

################################################################################

#

 aQuantia Ethernet Controller AQtion Linux Driver

# Copyright(c) 2014-2017 aQuantia Corporation.

#







	aq_pci_func.o \

	aq_vec.o \

	aq_hw_utils.o \

	aq_ethtool.o \

	aq_drvinfo.o \

	aq_filters.o \

	aq_phy.o \

	hw_atl/hw_atl_a0.o \

	hw_atl/hw_atl_b0.o \

	hw_atl/hw_atl_llh.o \

	hw_atl2/hw_atl2_utils.o \

	hw_atl2/hw_atl2_utils_fw.o \

	macsec/macsec_api.o

atlantic-$(CONFIG_MACSEC) += aq_macsec.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Samsung Ethernet device drivers.





obj-$(CONFIG_SXGBE_ETH) += sxgbe/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SXGBE_ETH) += samsung-sxgbe.o

samsung-sxgbe-objs:= sxgbe_platform.o sxgbe_main.o sxgbe_desc.o \

		sxgbe_ethtool.o $(samsung-sxgbe-y)

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Myricom network device drivers.

#

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Myricom Myri-10G ethernet driver





 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Amazon network device drivers.





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Elastic Network Adapter (ENA) device drivers.

#



ena-y := ena_netdev.o ena_com.o ena_eth_com.o ena_ethtool.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the 3Com Ethernet device drivers

#

obj-$(CONFIG_EL3) += 3c509.o

obj-$(CONFIG_PCMCIA_3C589) += 3c589_cs.o

obj-$(CONFIG_TYPHOON) += typhoon.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Synopsys network device drivers.

#

obj-$(CONFIG_DWC_XLGMAC) += dwc-xlgmac.o

dwc-xlgmac-objs := dwc-xlgmac-net.o dwc-xlgmac-desc.o \



dwc-xlgmac-$(CONFIG_DWC_XLGMAC_PCI) += dwc-xlgmac-pci.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Cirrus network device drivers.





obj-$(CONFIG_EP93XX_ETH) += ep93xx_eth.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Netronome network device drivers





obj-$(CONFIG_NFP) += nfp/

# SPDX-License-Identifier: GPL-2.0



nfp-objs := \

	    nfpcore/nfp6000_pcie.o \

	    nfpcore/nfp_mip.o \

	    nfpcore/nfp_nsp.o \

	    nfpcore/nfp_nsp_cmds.o \

	    nfpcore/nfp_rtsym.o \

	    nfpcore/nfp_target.o \

	    devlink_param.o \

	    nfp_app.o \

	    nfp_devlink.o \

	    nfp_net_debugdump.o \

	    nfp_net_sriov.o \

	    nfp_netvf_main.o \

	    nfp_port.o \

	    nfp_shared_buf.o \

	    nic/main.o



ifeq ($(CONFIG_NFP_APP_FLOWER),y)

nfp-objs += \

	    flower/cmsg.o \

	    flower/main.o \

	    flower/match.o \

	    flower/qos_conf.o \

	    flower/conntrack.o

endif

ifeq ($(CONFIG_BPF_SYSCALL),y)

nfp-objs += \

	    bpf/cmsg.o \

	    bpf/main.o \

	    bpf/jit.o

endif

ifeq ($(CONFIG_NFP_APP_ABM_NIC),y)

nfp-objs += \

	    abm/qdisc.o \

	    abm/main.o

endif

nfp-$(CONFIG_NFP_DEBUG) += nfp_net_debugfs.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the SMSC network device drivers.

#

obj-$(CONFIG_SMC9194) += smc9194.o

obj-$(CONFIG_PCMCIA_SMC91C92) += smc91c92_cs.o

obj-$(CONFIG_SMSC9420) += smsc9420.o

obj-$(CONFIG_SMSC911X) += smsc911x.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Xircom network device drivers.





# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the HISILICON network device drivers.





obj-$(CONFIG_HIP04_ETH) += hip04_eth.o

obj-$(CONFIG_HISI_FEMAC) += hisi_femac.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the HISILICON network device drivers.





obj-$(CONFIG_HNS) += hnae.o

obj-$(CONFIG_HNS_DSAF) += hns_dsaf.o

hns_dsaf-objs = hns_ae_adapt.o hns_dsaf_gmac.o hns_dsaf_mac.o hns_dsaf_misc.o \

	hns_dsaf_main.o hns_dsaf_ppe.o hns_dsaf_rcb.o hns_dsaf_xgmac.o

obj-$(CONFIG_HNS_ENET) += hns_enet_drv.o

 SPDX-License-Identifier: GPL-2.0+



# Makefile for the HISILICON network device drivers.

#

ccflags-y += -I$(srctree)/$(src)



obj-$(CONFIG_HNS3) += hnae3.o



hns3-$(CONFIG_HNS3_DCB) += hns3_dcbnl.o

 SPDX-License-Identifier: GPL-2.0+



# Makefile for the HISILICON network device drivers.

#

ccflags-y := -I $(srctree)/drivers/net/ethernet/hisilicon/hns3

ccflags-y += -I $(srctree)/$(src)

hclge-objs = hclge_main.o hclge_cmd.o hclge_mdio.o hclge_tm.o hclge_mbx.o hclge_err.o  hclge_debugfs.o hclge_ptp.o hclge_devlink.o

 SPDX-License-Identifier: GPL-2.0+



# Makefile for the HISILICON network device drivers.

#

ccflags-y := -I $(srctree)/drivers/net/ethernet/hisilicon/hns3

ccflags-y += -I $(srctree)/$(src)

hclgevf-objs = hclgevf_main.o hclgevf_cmd.o hclgevf_mbx.o  hclgevf_devlink.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for all ethernet ip drivers on Socionext platforms

#

obj-$(CONFIG_SNI_NETSEC) += netsec.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Chelsio network device drivers.





obj-$(CONFIG_CHELSIO_T1) += cxgb/

obj-$(CONFIG_CHELSIO_T4) += cxgb4/

# SPDX-License-Identifier: GPL-2.0

#

# Chelsio T4 driver

#



cxgb4-objs := cxgb4_main.o l2t.o smt.o t4_hw.o sge.o clip_tbl.o cxgb4_ethtool.o \

	      cxgb4_ptp.o cxgb4_tc_flower.o cxgb4_cudbg.o cxgb4_mps.o \

	      cxgb4_tc_matchall.o

cxgb4-$(CONFIG_CHELSIO_T4_FCOE) +=  cxgb4_fcoe.o

cxgb4-$(CONFIG_DEBUG_FS) += cxgb4_debugfs.o

 SPDX-License-Identifier: GPL-2.0-only

ccflags-y := -I $(srctree)/$(src)/../cxgb4

obj-$(CONFIG_CHELSIO_LIB) += libcxgb.o

 SPDX-License-Identifier: GPL-2.0-only



 Chelsio T4 SR-IOV Virtual Function Driver





obj-$(CONFIG_CHELSIO_T4VF) += cxgb4vf.o

cxgb4vf-objs := cxgb4vf_main.o t4vf_hw.o sge.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CRYPTO_DEV_CHELSIO_TLS) += chtls/

obj-$(CONFIG_CHELSIO_IPSEC_INLINE) += ch_ipsec/

 SPDX-License-Identifier: GPL-2.0-only

	     -I $(srctree)/drivers/crypto/chelsio

 SPDX-License-Identifier: GPL-2.0-only





 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_CHELSIO_TLS_DEVICE) += ch_ktls.o

ch_ktls-objs := chcr_ktls.o

 SPDX-License-Identifier: GPL-2.0-only



 Chelsio T3 driver





obj-$(CONFIG_CHELSIO_T3) += cxgb3.o

cxgb3-objs := cxgb3_main.o ael1002.o vsc8211.o t3_hw.o mc5.o \

	      xgmac.o sge.o l2t.o cxgb3_offload.o aq100x.o

 SPDX-License-Identifier: GPL-2.0-only



 Chelsio T1 driver







cxgb-$(CONFIG_CHELSIO_T1_1G) += mv88e1xxx.o vsc7326.o

	     mv88x201x.o my3126.o $(cxgb-y)

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Faraday device drivers.

#

obj-$(CONFIG_FTGMAC100) += ftgmac100.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Actions Semi Owl SoCs built-in ethernet macs





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Agere ET-131x ethernet driver

#

obj-$(CONFIG_ET131X) += et131x.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Huawei device drivers.





obj-$(CONFIG_HINIC) += hinic/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_HINIC) += hinic.o

	   hinic_common.o hinic_ethtool.o hinic_devlink.o hinic_hw_mbox.o \

	   hinic_sriov.o hinic_debugfs.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Freescale network device drivers.







obj-$(CONFIG_FSL_PQ_MDIO) += fsl_pq_mdio.o

gianfar_driver-objs := gianfar.o \

		gianfar_ethtool.o

obj-$(CONFIG_UCC_GETH) += ucc_geth_driver.o

ucc_geth_driver-objs := ucc_geth.o ucc_geth_ethtool.o



obj-$(CONFIG_FSL_DPAA2_ETH) += dpaa2/

# SPDX-License-Identifier: GPL-2.0

subdir-ccflags-y +=  -I$(srctree)/drivers/net/ethernet/freescale/fman

obj-$(CONFIG_FSL_FMAN) += fsl_dpaa_fman_port.o



fsl_dpaa_fman-objs	:= fman_muram.o fman.o fman_sp.o fman_keygen.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Freescale DPAA Ethernet controllers





 Include FMan headers

FMAN        = $(srctree)/drivers/net/ethernet/freescale/fman



obj-$(CONFIG_FSL_DPAA_ETH) += fsl_dpa.o

fsl_dpa-objs += dpaa_eth.o dpaa_ethtool.o dpaa_eth_sysfs.o

CFLAGS_dpaa_eth.o := -I$(src)

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Freescale DPAA2 Ethernet controller





obj-$(CONFIG_FSL_DPAA2_ETH)		+= fsl-dpaa2-eth.o



fsl-dpaa2-eth-${CONFIG_FSL_DPAA2_ETH_DCB} += dpaa2-eth-dcb.o

fsl-dpaa2-eth-${CONFIG_DEBUG_FS} += dpaa2-eth-debugfs.o

fsl-dpaa2-ptp-objs	:= dpaa2-ptp.o dprtc.o

fsl-dpaa2-switch-objs	:= dpaa2-switch.o dpaa2-switch-ethtool.o dpsw.o dpaa2-switch-flower.o dpaa2-mac.o dpmac.o

 Needed by the tracing framework

CFLAGS_dpaa2-eth.o := -I$(src)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Freescale Ethernet controllers

#

obj-$(CONFIG_FS_ENET) += fs_enet.o

fs_enet-$(CONFIG_FS_ENET_HAS_SCC) += mac-scc.o

fs_enet-$(CONFIG_FS_ENET_HAS_FCC) += mac-fcc.o



fs_enet-objs := fs_enet-main.o $(fs_enet-m)

# SPDX-License-Identifier: GPL-2.0



fsl-enetc-y := enetc_pf.o $(common-objs)

fsl-enetc-$(CONFIG_FSL_ENETC_QOS) += enetc_qos.o

obj-$(CONFIG_FSL_ENETC_VF) += fsl-enetc-vf.o

fsl-enetc-vf-y := enetc_vf.o $(common-objs)

fsl-enetc-vf-$(CONFIG_FSL_ENETC_QOS) += enetc_qos.o

obj-$(CONFIG_FSL_ENETC_IERB) += fsl-enetc-ierb.o





fsl-enetc-ptp-y := enetc_ptp.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Sun network device drivers.





obj-$(CONFIG_HAPPYMEAL) += sunhme.o

obj-$(CONFIG_SUNBMAC) += sunbmac.o

obj-$(CONFIG_CASSINI) += cassini.o

obj-$(CONFIG_SUNVNET) += sunvnet.o

obj-$(CONFIG_NIU) += niu.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Allwinner device drivers.

#

obj-$(CONFIG_SUN4I_EMAC) += sun4i-emac.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Digital Equipment Inc. network device drivers.





obj-$(CONFIG_NET_TULIP) += tulip/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux "Tulip" family network device drivers.

#

ccflags-$(CONFIG_NET_TULIP)	:= -DDEBUG

obj-$(CONFIG_PCMCIA_XIRCOM)	+= xircom_cb.o

obj-$(CONFIG_DM9102)		+= dmfe.o



# Declare multi-part drivers.

tulip-objs			:= eeprom.o interrupt.o media.o \

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Rocker network device drivers.





 SPDX-License-Identifier: (GPL-2.0 OR MIT)

obj-$(CONFIG_MSCC_OCELOT_SWITCH_LIB) += mscc_ocelot_switch_lib.o

mscc_ocelot_switch_lib-y := \

	ocelot.o \

	ocelot_police.o \

	ocelot_flower.o \

	ocelot_ptp.o \

	ocelot_devlink.o

mscc_ocelot_switch_lib-$(CONFIG_BRIDGE_MRP) += ocelot_mrp.o

obj-$(CONFIG_MSCC_OCELOT_SWITCH) += mscc_ocelot.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the QLogic network device drivers.

#

obj-$(CONFIG_QLA3XXX) += qla3xxx.o

obj-$(CONFIG_QLCNIC) += qlcnic/

obj-$(CONFIG_NETXEN_NIC) += netxen/

obj-$(CONFIG_QED) += qed/

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)

# Copyright (c) 2019-2020 Marvell International Ltd.

obj-$(CONFIG_QED) := qed.o

qed-y :=			\

	qed_chain.o		\

	qed_cxt.o		\

	qed_hw.o		\

	qed_init_ops.o		\

	qed_int.o		\

	qed_main.o		\

	qed_mcp.o		\

	qed_mng_tlv.o		\

	qed_ptp.o		\

	qed_sp_commands.o	\



qed-$(CONFIG_QED_ISCSI) += qed_iscsi.o

qed-$(CONFIG_QED_OOO) += qed_ooo.o

qed-$(CONFIG_QED_NVMETCP) +=	\

	qed_nvmetcp.o		\

	qed_nvmetcp_fw_funcs.o	\



qed-$(CONFIG_QED_RDMA) +=	\

	qed_iwarp.o		\



 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)

# Copyright (c) 2019-2020 Marvell International Ltd.

obj-$(CONFIG_QEDE) := qede.o

qede-$(CONFIG_DCB) += qede_dcbnl.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Qlogic 1G/10G Ethernet Driver for CNA devices







qlcnic-y := qlcnic_hw.o qlcnic_main.o qlcnic_init.o \

	qlcnic_sysfs.o qlcnic_minidump.o qlcnic_83xx_hw.o \

	qlcnic_sriov_common.o

qlcnic-$(CONFIG_QLCNIC_SRIOV) += qlcnic_sriov_pf.o

 SPDX-License-Identifier: GPL-2.0-or-later

# Copyright (C) 2003 - 2009 NetXen, Inc.

 Copyright (C) 2009 - QLogic Corporation.

# All rights reserved.

#





netxen_nic-y := netxen_nic_hw.o netxen_nic_main.o netxen_nic_init.o \

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the QLogic BR-series device drivers.





obj-$(CONFIG_BNA) += bna/

 SPDX-License-Identifier: GPL-2.0-only



# Copyright (c) 2005-2014 Brocade Communications Systems, Inc.

# Copyright (c) 2014-2015 QLogic Corporation.

 All rights reserved.







bna-objs := bnad.o bnad_ethtool.o bnad_debugfs.o bna_enet.o bna_tx_rx.o

bna-objs += bfa_msgq.o bfa_ioc.o bfa_ioc_ct.o bfa_cee.o

bna-objs += cna_fwimg.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Fujitsu network device drivers.

#

obj-$(CONFIG_PCMCIA_FMVJ18X) += fmvj18x_cs.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Renesas device drivers.







ravb-objs := ravb_main.o ravb_ptp.o

obj-$(CONFIG_RAVB) += ravb.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Pensando network device drivers.

#

# SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2017 - 2019 Pensando Systems, Inc





ionic-y := ionic_main.o ionic_bus_pci.o ionic_devlink.o ionic_dev.o \

	   ionic_debugfs.o ionic_lif.o ionic_rx_filter.o ionic_ethtool.o \

	   ionic_txrx.o ionic_stats.o ionic_fw.o

ionic-$(CONFIG_PTP_1588_CLOCK) += ionic_phc.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the OKI Semiconductor device drivers.

#

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PCH_GBE) += pch_gbe.o

pch_gbe-y := pch_gbe_phy.o pch_gbe_ethtool.o pch_gbe_param.o

pch_gbe-y += pch_gbe_main.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the RDC network device drivers.

#

obj-$(CONFIG_R6040) += r6040.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Microchip network device drivers.

#

obj-$(CONFIG_ENC28J60) += enc28j60.o

obj-$(CONFIG_LAN743X) += lan743x.o

lan743x-objs := lan743x_main.o lan743x_ethtool.o lan743x_ptp.o

obj-$(CONFIG_SPARX5_SWITCH) += sparx5/

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Microchip Sparx5 network device drivers.







 sparx5_switchdev.o sparx5_calendar.o sparx5_ethtool.o sparx5_fdma.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the D-Link network device drivers.





obj-$(CONFIG_SUNDANCE) += sundance.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Intel network device drivers.





# SPDX-License-Identifier: GPL-2.0

# Copyright (c)  2018 Intel Corporation



# Intel(R) I225-LM/I225-V 2.5G Ethernet Controller

#

obj-$(CONFIG_IGC) += igc.o

igc-objs := igc_main.o igc_mac.o igc_i225.o igc_base.o igc_nvm.o igc_phy.o \

igc_diag.o igc_ethtool.o igc_ptp.o igc_dump.o igc_tsn.o igc_xdp.o

# SPDX-License-Identifier: GPL-2.0

# Copyright(c) 1999 - 2018 Intel Corporation.

#

 Makefile for the Intel(R) 82599 VF ethernet driver







                ixgbevf_main.o



# SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2018, Intel Corporation.



#

 Makefile for the Intel(R) Ethernet Connection E800 Series Linux Driver







ice-y := ice_main.o	\

	 ice_common.o	\

	 ice_nvm.o	\

	 ice_base.o	\

	 ice_lib.o	\

	 ice_txrx.o	\

	 ice_fdir.o	\

	 ice_flow.o	\

	 ice_idc.o	\

	 ice_devlink.o	\

	 ice_fw_update.o \

	 ice_lag.o	\

	 ice_repr.o	\

ice-$(CONFIG_PCI_IOV) += ice_virtchnl_pf.o ice_sriov.o ice_virtchnl_fdir.o

ice-$(CONFIG_XDP_SOCKETS) += ice_xsk.o

# SPDX-License-Identifier: GPL-2.0

# Copyright(c) 1999 - 2008 Intel Corporation.

#

# Makefile for the Intel(R) PRO/10GbE ethernet driver

#

obj-$(CONFIG_IXGB) += ixgb.o

ixgb-objs := ixgb_main.o ixgb_hw.o ixgb_ee.o ixgb_ethtool.o ixgb_param.o

# SPDX-License-Identifier: GPL-2.0

# Copyright(c) 1999 - 2018 Intel Corporation.

#

# Makefile for the Intel(R) 10GbE PCI Express ethernet driver

#

obj-$(CONFIG_IXGBE) += ixgbe.o



ixgbe-$(CONFIG_IXGBE_DCB) +=  ixgbe_dcb.o ixgbe_dcb_82598.o \



ixgbe-$(CONFIG_FCOE:m=y) += ixgbe_fcoe.o

# SPDX-License-Identifier: GPL-2.0

# Copyright(c) 1999 - 2018 Intel Corporation.



# Makefile for the Intel(R) PRO/1000 ethernet driver

#

obj-$(CONFIG_E1000E) += e1000e.o

e1000e-objs := 82571.o ich8lan.o 80003es2lan.o \

	       param.o ethtool.o netdev.o ptp.o

# SPDX-License-Identifier: GPL-2.0

# Copyright(c) 2009 - 2018 Intel Corporation.

#

 Makefile for the Intel(R) 82576 VF ethernet driver







              netdev.o

# SPDX-License-Identifier: GPL-2.0

# Copyright(c) 1999 - 2018 Intel Corporation.

#

# Makefile for the Intel(R) 82575 PCI-Express ethernet driver

#

obj-$(CONFIG_IGB) += igb.o

igb-objs := igb_main.o igb_ethtool.o e1000_82575.o \

# SPDX-License-Identifier: GPL-2.0

# Copyright(c) 2013 - 2018 Intel Corporation.



 Makefile for the Intel(R) Ethernet Switch Host Interface Driver







fm10k-y := fm10k_main.o \

	   fm10k_netdev.o \

	   fm10k_ethtool.o \

	   fm10k_vf.o \

	   fm10k_mbx.o \

	   fm10k_iov.o \

	   fm10k_tlv.o

fm10k-$(CONFIG_DCB) += fm10k_dcbnl.o

# SPDX-License-Identifier: GPL-2.0

# Copyright(c) 2013 - 2018 Intel Corporation.

#

# Makefile for the Intel(R) Ethernet Adaptive Virtual Function (iavf)

 driver







ccflags-y += -I$(src)





iavf-objs := iavf_main.o iavf_ethtool.o iavf_virtchnl.o iavf_fdir.o \

# SPDX-License-Identifier: GPL-2.0

# Copyright(c) 1999 - 2006 Intel Corporation.



# Makefile for the Intel(R) PRO/1000 ethernet driver

#

obj-$(CONFIG_E1000) += e1000.o

# SPDX-License-Identifier: GPL-2.0

# Copyright(c) 2013 - 2018 Intel Corporation.



# Makefile for the Intel(R) Ethernet Connection XL710 (i40e.ko) driver

#

subdir-ccflags-y += -I$(src)

obj-$(CONFIG_I40E) += i40e.o

i40e-objs := i40e_main.o \

	i40e_ethtool.o	\

	i40e_common.o	\

	i40e_hmc.o	\

	i40e_lan_hmc.o	\

	i40e_nvm.o	\

	i40e_debugfs.o	\

	i40e_txrx.o	\

	i40e_ptp.o	\

	i40e_ddp.o \



i40e-$(CONFIG_I40E_DCB) += i40e_dcb.o i40e_dcb_nl.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Apple network device drivers.

#

obj-$(CONFIG_MACE) += mace.o

obj-$(CONFIG_MACMACE) += macmace.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the A Semi network device drivers.





obj-$(CONFIG_PASEMI_MAC) += pasemi_mac_driver.o

pasemi_mac_driver-objs := pasemi_mac.o pasemi_mac_ethtool.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Emulex device drivers.





 SPDX-License-Identifier: GPL-2.0-only



# Makefile to build the network driver for ServerEngine's BladeEngine.

#

obj-$(CONFIG_BE2NET) += be2net.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Toshiba network device drivers.





spidernet-y += spider_net.o spider_net_ethtool.o

obj-$(CONFIG_SPIDER_NET) += spidernet.o



 Makefile for the Microsoft Azure network device driver.





obj-$(CONFIG_MICROSOFT_MANA) += mana/

# SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

#

# Makefile for the Microsoft Azure Network Adapter driver

obj-$(CONFIG_MICROSOFT_MANA) += mana.o

# SPDX-License-Identifier: GPL-2.0

# Makefile for the Cortina Gemini network device drivers.

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Micrel network device drivers.

#

obj-$(CONFIG_KS8842) += ks8842.o

obj-$(CONFIG_KS8851_MLL) += ks8851_common.o ks8851_par.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Realtek network device drivers.

#

obj-$(CONFIG_8139CP) += 8139cp.o

obj-$(CONFIG_ATP) += atp.o

obj-$(CONFIG_R8169) += r8169.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for APM X-GENE Ethernet driver.

#

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for APM X-Gene Ethernet v2 driver

#

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for APM X-Gene Ethernet Driver.

#

xgene-enet-objs := xgene_enet_hw.o xgene_enet_sgmac.o xgene_enet_xgmac.o \

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the 8390 network device drivers.

#

obj-$(CONFIG_MAC8390) += mac8390.o

obj-$(CONFIG_APNE) += apne.o 8390.o

obj-$(CONFIG_AX88796) += ax88796.o

obj-$(CONFIG_MCF8390) += mcf8390.o

obj-$(CONFIG_XSURF100) += xsurf100.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Alacritech Slicoss driver

#

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the NVIDIA network device drivers.







 Makefile for the Google network device drivers.





obj-$(CONFIG_GVE) += gve/

 Makefile for the Google virtual Ethernet (gve) driver



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the MOXART network device drivers.





 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Mediatek SoCs built-in ethernet macs





obj-$(CONFIG_NET_MEDIATEK_SOC) += mtk_eth.o

mtk_eth-y := mtk_eth_soc.o mtk_sgmii.o mtk_eth_path.o mtk_ppe.o mtk_ppe_debugfs.o mtk_ppe_offload.o

obj-$(CONFIG_NET_MEDIATEK_STAR_EMAC) += mtk_star_emac.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Intel 82586/82593/82596 chipset device drivers.





obj-$(CONFIG_SUN3_82586) += sun3_82586.o

obj-$(CONFIG_SNI_82596) += sni_82596.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Mellanox device drivers.





obj-$(CONFIG_MLXSW_CORE) += mlxsw/

obj-$(CONFIG_MLXFW) += mlxfw/

obj-$(CONFIG_MLXBF_GIGE) += mlxbf_gige/

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_MLX4_CORE)		+= mlx4_core.o

		main.o mcg.o mr.o pd.o port.o profile.o qp.o reset.o sense.o \

		srq.o resource_tracker.o crdump.o

obj-$(CONFIG_MLX4_EN)               += mlx4_en.o

mlx4_en-y := 	en_main.o en_tx.o en_rx.o en_ethtool.o en_port.o en_cq.o \

		en_resources.o en_netdev.o en_selftest.o en_clock.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MLXFW)	+= mlxfw.o

# SPDX-License-Identifier: GPL-2.0

mlxsw_core-objs			:= core.o core_acl_flex_keys.o \

				   core_acl_flex_actions.o core_env.o

mlxsw_core-$(CONFIG_MLXSW_CORE_HWMON) += core_hwmon.o

mlxsw_core-$(CONFIG_MLXSW_CORE_THERMAL) += core_thermal.o

obj-$(CONFIG_MLXSW_PCI)		+= mlxsw_pci.o

mlxsw_pci-objs			:= pci.o

obj-$(CONFIG_MLXSW_I2C)		+= mlxsw_i2c.o

mlxsw_i2c-objs			:= i2c.o

				   spectrum1_kvdl.o spectrum2_kvdl.o \

				   spectrum_acl_atcam.o spectrum_acl_erp.o \

				   spectrum_flow.o spectrum_matchall.o \

				   spectrum_flower.o spectrum_cnt.o \

				   spectrum_fid.o spectrum_ipip.o \

				   spectrum1_mr_tcam.o spectrum2_mr_tcam.o \

				   spectrum_mr_tcam.o spectrum_mr.o \

				   spectrum_qdisc.o spectrum_span.o \

				   spectrum_ethtool.o spectrum_policer.o

mlxsw_spectrum-$(CONFIG_MLXSW_SPECTRUM_DCB)	+= spectrum_dcb.o

obj-$(CONFIG_MLXSW_MINIMAL)	+= mlxsw_minimal.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Mellanox 5th generation network adapters

 (ConnectX series) core & netdev driver









#

# mlx5 core basic

#

mlx5_core-y :=	main.o cmd.o debugfs.o fw.o eq.o uar.o pagealloc.o \

		diag/fw_tracer.o diag/crdump.o devlink.o diag/rsc_dump.o \

		fw_reset.o qos.o lib/tout.o



# Netdev basic

#

		en/channels.o en_main.o en_common.o en_fs.o en_ethtool.o \

		en_selftest.o en/port.o en/monitor_stats.o en/health.o \

		en/reporter_tx.o en/reporter_rx.o en/params.o en/xsk/pool.o \

		en/qos.o en/trap.o en/fs_tt_redirect.o



# Netdev extra

#

mlx5_core-$(CONFIG_MLX5_EN_ARFS)     += en_arfs.o

mlx5_core-$(CONFIG_MLX5_EN_RXNFC)    += en_fs_ethtool.o

mlx5_core-$(CONFIG_MLX5_CORE_EN_DCB) += en_dcbnl.o en/port_buffer.o

					en_rep.o en/rep/bond.o en/mod_hdr.o \

					en/mapping.o

					lib/fs_chains.o en/tc_tun.o \

					en/tc/post_act.o en/tc/int_port.o

mlx5_core-$(CONFIG_MLX5_TC_CT)	     += en/tc_ct.o



#

 Core extra



				      ecpf.o rdma.o esw/legacy.o \

				      esw/devlink_port.o esw/vporttbl.o esw/qos.o

mlx5_core-$(CONFIG_MLX5_ESWITCH)   += esw/acl/helper.o \

				      esw/acl/egress_lgcy.o esw/acl/egress_ofld.o \

				      esw/acl/ingress_lgcy.o esw/acl/ingress_ofld.o

mlx5_core-$(CONFIG_MLX5_BRIDGE)    += esw/bridge.o en/rep/bridge.o

mlx5_core-$(CONFIG_MLX5_MPFS)      += lib/mpfs.o

mlx5_core-$(CONFIG_VXLAN)          += lib/vxlan.o

mlx5_core-$(CONFIG_PTP_1588_CLOCK) += lib/clock.o



#

 Ipoib netdev





#

 Accelerations & FPGA







mlx5_core-$(CONFIG_MLX5_EN_IPSEC) += en_accel/ipsec.o en_accel/ipsec_rxtx.o \

				     en_accel/ipsec_stats.o en_accel/ipsec_fs.o

mlx5_core-$(CONFIG_MLX5_EN_TLS) += en_accel/tls.o en_accel/tls_rxtx.o en_accel/tls_stats.o \

				   en_accel/fs_tcp.o en_accel/ktls.o en_accel/ktls_txrx.o \



					steering/dr_ste_v0.o steering/dr_ste_v1.o \

					steering/dr_cmd.o steering/dr_fw.o \



 SF device





#

 SF manager



mlx5_core-$(CONFIG_MLX5_SF_MANAGER) += sf/cmd.o sf/hw_table.o sf/devlink.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only OR BSD-3-Clause





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Cisco device drivers.

#

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ENIC) := enic.o

	enic_res.o enic_dev.o enic_pp.o vnic_dev.o vnic_rq.o vnic_vic.o \



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Alteon network device drivers.





# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the AMD network device drivers.





obj-$(CONFIG_ARIADNE) += ariadne.o

obj-$(CONFIG_DECLANCE) += declance.o

obj-$(CONFIG_HPLANCE) += hplance.o 7990.o

obj-$(CONFIG_MIPS_AU1X00_ENET) += au1000_eth.o

obj-$(CONFIG_MVME147_NET) += mvme147.o 7990.o

obj-$(CONFIG_NI65) += ni65.o

obj-$(CONFIG_SUN3LANCE) += sun3lance.o

# SPDX-License-Identifier: GPL-2.0



		 xgbe-platform.o

amd-xgbe-$(CONFIG_PCI) += xgbe-pci.o

amd-xgbe-$(CONFIG_AMD_XGBE_DCB) += xgbe-dcb.o

amd-xgbe-$(CONFIG_DEBUG_FS) += xgbe-debugfs.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the SEEQ network device drivers

#

obj-$(CONFIG_ARM_ETHER3) += ether3.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_NET_CALXEDA_XGMAC) += xgmac.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Atheros network device drivers.





 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ATL1)	+= atl1.o



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ATL1C) += atl1c.o

atl1c-objs := atl1c_main.o atl1c_hw.o atl1c_ethtool.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ATL1E)	+= atl1e.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ALX) += alx.o

alx-objs := main.o ethtool.o hw.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Intel XScale IXP device drivers.





 Keep this link order to avoid deferred probing

ifdef CONFIG_PTP_1588_CLOCK_IXP46X

obj-$(CONFIG_IXP4XX_ETH)		+= ptp_ixp46x.o

endif

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the SGI device drivers.

#

obj-$(CONFIG_SGI_O2MACE_ETH) += meth.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the TI network device drivers.

#

obj-$(CONFIG_TI_CPSW) += cpsw-common.o

obj-$(CONFIG_TI_CPSW_SWITCHDEV) += cpsw-common.o

obj-$(CONFIG_TLAN) += tlan.o

obj-$(CONFIG_TI_DAVINCI_EMAC) += ti_davinci_emac.o

ti_davinci_emac-y := davinci_emac.o davinci_cpdma.o

obj-$(CONFIG_TI_DAVINCI_MDIO) += davinci_mdio.o

obj-$(CONFIG_TI_CPSW_PHY_SEL) += cpsw-phy-sel.o

obj-$(CONFIG_TI_CPTS) += cpts.o

obj-$(CONFIG_TI_CPSW_SWITCHDEV) += ti_cpsw_new.o



obj-$(CONFIG_TI_KEYSTONE_NETCP) += keystone_netcp.o

keystone_netcp-y := netcp_core.o cpsw_ale.o

obj-$(CONFIG_TI_KEYSTONE_NETCP_ETHSS) += keystone_netcp_ethss.o

keystone_netcp_ethss-y := netcp_ethss.o netcp_sgmii.o netcp_xgbepcsr.o cpsw_ale.o

ti-am65-cpsw-nuss-y := am65-cpsw-nuss.o cpsw_sl.o am65-cpsw-ethtool.o cpsw_ale.o k3-cppi-desc-pool.o am65-cpsw-qos.o

obj-$(CONFIG_TI_K3_AM65_CPTS) += am65-cpts.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the ARC network device drivers.

#

arc_emac-objs := emac_main.o emac_mdio.o

obj-$(CONFIG_ARC_EMAC_CORE) += arc_emac.o

obj-$(CONFIG_EMAC_ROCKCHIP) += emac_rockchip.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the VIA device drivers.

#

obj-$(CONFIG_VIA_RHINE) += via-rhine.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Aeroflex Gaisler network device drivers.





# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Atmel network device drivers.





ifeq ($(CONFIG_MACB_USE_HWSTAMP),y)



obj-$(CONFIG_MACB_PCI) += macb_pci.o



 Makefile for the Asix network device drivers.





 SPDX-License-Identifier: GPL-2.0-only



 Makefile for th IBM network device drivers.





obj-$(CONFIG_IBMVNIC) += ibmvnic.o

obj-$(CONFIG_IBM_EMAC) += emac/

obj-$(CONFIG_EHEA) += ehea/

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the eHEA ethernet device driver for IBM eServer System p



ehea-y = ehea_main.o ehea_phyp.o ehea_qmr.o ehea_ethtool.o



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the PowerPC 4xx on-chip ethernet driver







ibm_emac-$(CONFIG_IBM_EMAC_ZMII) += zmii.o

ibm_emac-$(CONFIG_IBM_EMAC_TAH) += tah.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Tundra network device drivers.







# Makefile for the LiteX network device drivers.

#

obj-$(CONFIG_LITEX_LITEETH) += litex_liteeth.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Packet Engines network device drivers.





obj-$(CONFIG_YELLOWFIN) += yellowfin.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Silan network device drivers.

#

obj-$(CONFIG_SC92031) += sc92031.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux Wireless network device drivers.

#



# 16-bit wireless PCMCIA client drivers

obj-$(CONFIG_PCMCIA_WL3501)	+= wl3501_cs.o

obj-$(CONFIG_USB_NET_RNDIS_WLAN)	+= rndis_wlan.o

obj-$(CONFIG_MAC80211_HWSIM)	+= mac80211_hwsim.o

obj-$(CONFIG_VIRT_WIFI)	+= virt_wifi.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_LIBERTAS)		+= libertas/



# SPDX-License-Identifier: GPL-2.0

libertas-y += cfg.o

libertas-y += cmd.o

libertas-y += cmdresp.o

libertas-y += debugfs.o

libertas-y += ethtool.o

libertas-y += rx.o

libertas-y += firmware.o





obj-$(CONFIG_LIBERTAS_SDIO) += libertas_sdio.o

 SPDX-License-Identifier: GPL-2.0-only

libertas_tf-objs := main.o cmd.o

libertas_tf_usb-objs += if_usb.o

obj-$(CONFIG_LIBERTAS_THINFIRM) += libertas_tf.o



 Copyright 2011-2020 NXP



 This software file (the "File") is distributed by NXP

# under the terms of the GNU General Public License Version 2, June 1991

 (the "License").  You may use, redistribute and/or modify this File in

# accordance with the terms and conditions of the License, a copy of which

 is available by writing to the Free Software Foundation, Inc.,

# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.



# THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

# IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 this warranty disclaimer.



mwifiex-y += cfp.o

mwifiex-y += cmdevt.o

mwifiex-y += util.o

mwifiex-y += txrx.o

mwifiex-y += 11n.o

mwifiex-y += 11ac.o

mwifiex-y += 11n_aggr.o

mwifiex-y += sta_ioctl.o

mwifiex-y += uap_cmd.o

mwifiex-y += ie.o

mwifiex-y += sta_event.o

mwifiex-y += ethtool.o

obj-$(CONFIG_MWIFIEX) += mwifiex.o

mwifiex_sdio-y += sdio.o



obj-$(CONFIG_MWIFIEX_PCIE) += mwifiex_pcie.o

mwifiex_usb-y += usb.o



ccflags-y += -D__CHECK_ENDIAN

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_B43)		+= b43/



obj-$(CONFIG_BRCMSMAC)	+= brcm80211/

# SPDX-License-Identifier: GPL-2.0

b43-$(CONFIG_B43_PHY_G)		+= phy_g.o tables.o lo.o wa.o

b43-$(CONFIG_B43_PHY_N)		+= tables_nphy.o

b43-$(CONFIG_B43_PHY_N)		+= radio_2056.o

b43-y				+= phy_common.o

b43-$(CONFIG_B43_PHY_N)		+= phy_n.o

b43-$(CONFIG_B43_PHY_LP)	+= tables_lpphy.o

b43-$(CONFIG_B43_PHY_HT)	+= radio_2059.o

b43-$(CONFIG_B43_PHY_LCN)	+= phy_lcn.o tables_phy_lcn.o

b43-y				+= xmit.o

b43-y				+= dma.o

b43-y				+= pio.o



obj-$(CONFIG_B43)		+= b43.o

# SPDX-License-Identifier: GPL-2.0

 b43legacy core

b43legacy-y				+= main.o

b43legacy-y				+= ilt.o

b43legacy-y				+= phy.o

b43legacy-y				+= radio.o

b43legacy-y				+= sysfs.o

 b43 RFKILL button support

b43legacy-y				+= rfkill.o

# b43legacy LED support

 b43legacy debugging

b43legacy-$(CONFIG_B43LEGACY_DEBUG)	+= debugfs.o

# b43legacy DMA and PIO

b43legacy-$(CONFIG_B43LEGACY_PIO)	+= pio.o

obj-$(CONFIG_B43LEGACY)			+= b43legacy.o

# SPDX-License-Identifier: ISC

#

 Makefile fragment for Broadcom 802.11 Networking Device Driver



 Copyright (c) 2010 Broadcom Corporation





 common flags



obj-$(CONFIG_BRCMUTIL)	+= brcmutil/

obj-$(CONFIG_BRCMFMAC)	+= brcmfmac/

obj-$(CONFIG_BRCMSMAC)	+= brcmsmac/



 Makefile fragment for Broadcom 802.11n Networking Device Driver



 Copyright (c) 2010 Broadcom Corporation



# Permission to use, copy, modify, and/or distribute this software for any

 purpose with or without fee is hereby granted, provided that the above

 copyright notice and this permission notice appear in all copies.



# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

# SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.



	-I $(srctree)/$(src)/../include

	mac80211_if.o \

	ucode_loader.o \

	channel.o \

	main.o \

	phy_shim.o \

	stf.o \

	phy/phy_cmn.o \

	phy/phy_n.o \

	phy/phytbl_lcn.o \

	phy/phytbl_n.o \

	dma.o \

	brcms_trace_events.o \





# SPDX-License-Identifier: ISC

#

 Makefile fragment for Broadcom 802.11 Networking Device Driver



 Copyright (c) 2010 Broadcom Corporation





	-I $(srctree)/$(src)/../include

obj-$(CONFIG_BRCMFMAC) += brcmfmac.o

		cfg80211.o \

		fwil.o \

		common.o \

		firmware.o \

		feature.o \

		vendor.o \

		pno.o \

		bcdc.o \

		commonring.o \

		msgbuf.o

brcmfmac-$(CONFIG_BRCMFMAC_SDIO) += \

		bcmsdh.o

		pcie.o

brcmfmac-$(CONFIG_BRCMDBG) += \

		debug.o

		tracepoint.o

		of.o

brcmfmac-$(CONFIG_DMI) += \

		dmi.o

# SPDX-License-Identifier: ISC

#

# Makefile fragment for Broadcom 802.11n Networking Device Driver Utilities

#

# Copyright (c) 2011 Broadcom Corporation

#



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ADM8211)	+= adm8211.o

# SPDX-License-Identifier: ISC

obj-$(CONFIG_CARL9170)		+= carl9170/

obj-$(CONFIG_AR5523)		+= ar5523/

obj-$(CONFIG_ATH10K)		+= ath10k/

obj-$(CONFIG_ATH11K)		+= ath11k/



		regd.o \

		dfs_pattern_detector.o \



ath-$(CONFIG_ATH_TRACEPOINTS) += trace.o

CFLAGS_trace.o := -I$(src)

# SPDX-License-Identifier: ISC

ath9k-y +=	beacon.o \

		init.o \

		recv.o \

		link.o \

		antenna.o \

		channel.o

ath9k-$(CONFIG_ATH9K_PCI) += pci.o

ath9k-$(CONFIG_ATH9K_DFS_DEBUGFS) += dfs_debug.o

ath9k-$(CONFIG_ATH9K_TX99) += tx99.o

ath9k-$(CONFIG_ATH9K_HWRNG) += rng.o

ath9k-$(CONFIG_ATH9K_DEBUGFS) += debug.o





		hw.o \

		ar9002_phy.o \

		ar9002_calib.o \

		eeprom.o \

		ar9002_mac.o \

		ar9003_paprd.o

ath9k_hw-$(CONFIG_ATH9K_WOW) += ar9003_wow.o

					   ar9003_mci.o \





ath9k_hw-$(CONFIG_ATH9K_DYNACK) += dynack.o

obj-$(CONFIG_ATH9K_HW) += ath9k_hw.o

obj-$(CONFIG_ATH9K_COMMON) += ath9k_common.o

ath9k_common-y:=	common.o \

			common-beacon.o \



		htc_drv_txrx.o \

		htc_drv_beacon.o \

		htc_drv_gpio.o

ath9k_htc-$(CONFIG_ATH9K_HTC_DEBUGFS) += htc_drv_debug.o

obj-$(CONFIG_ATH9K_HTC) += ath9k_htc.o

# SPDX-License-Identifier: ISC

obj-$(CONFIG_ATH10K) += ath10k_core.o

		 debug.o \

		 core.o \

		 htt.o \

		 htt_rx.o \

		 htt_tx.o \

		 txrx.o \

		 wmi-tlv.o \

		 p2p.o \

		 swap.o

ath10k_core-$(CONFIG_NL80211_TESTMODE) += testmode.o

ath10k_core-$(CONFIG_ATH10K_TRACING) += trace.o

ath10k_core-$(CONFIG_DEV_COREDUMP) += coredump.o

ath10k_core-$(CONFIG_ATH10K_CE) += ce.o

obj-$(CONFIG_ATH10K_PCI) += ath10k_pci.o

ath10k_pci-y += pci.o

ath10k_pci-$(CONFIG_ATH10K_AHB) += ahb.o

obj-$(CONFIG_ATH10K_SDIO) += ath10k_sdio.o

ath10k_sdio-y += sdio.o

obj-$(CONFIG_ATH10K_USB) += ath10k_usb.o

ath10k_usb-y += usb.o

obj-$(CONFIG_ATH10K_SNOC) += ath10k_snoc.o



# for tracing framework to find trace.h

 SPDX-License-Identifier: BSD-3-Clause-Clear

obj-$(CONFIG_ATH11K) += ath11k.o

	    hal.o \

	    hal_tx.o \

	    hal_rx.o \

	    mac.o \

	    htc.o \

	    dp.o  \

	    dp_rx.o \

	    wow.o

ath11k-$(CONFIG_ATH11K_DEBUGFS) += debugfs.o debugfs_htt_stats.o debugfs_sta.o

ath11k-$(CONFIG_NL80211_TESTMODE) += testmode.o

ath11k-$(CONFIG_ATH11K_SPECTRAL) += spectral.o

obj-$(CONFIG_ATH11K_AHB) += ath11k_ahb.o

ath11k_ahb-y += ahb.o

obj-$(CONFIG_ATH11K_PCI) += ath11k_pci.o

ath11k_pci-y += mhi.o pci.o

 for tracing framework to find trace.h

CFLAGS_trace.o := -I$(src)

 SPDX-License-Identifier: GPL-2.0-only

carl9170-objs := main.o usb.o cmd.o mac.o phy.o led.o fw.o tx.o rx.o



# SPDX-License-Identifier: ISC



wil6210-y := main.o

wil6210-y += netdev.o

wil6210-y += cfg80211.o

wil6210-y += pcie_bus.o

wil6210-y += wmi.o

wil6210-y += txrx_edma.o

wil6210-y += pmc.o

wil6210-y += ethtool.o

wil6210-y += wil_crash_dump.o



# for tracing framework to find trace.h

------------------------------------------------------------------------------

 Copyright (c) 2004-2011 Atheros Communications Inc.

# Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 All rights reserved.







# Permission to use, copy, modify, and/or distribute this software for any

 purpose with or without fee is hereby granted, provided that the above

 copyright notice and this permission notice appear in all copies.



# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.







 Author(s): ="Atheros"

------------------------------------------------------------------------------



obj-$(CONFIG_ATH6KL) += ath6kl_core.o

ath6kl_core-y += hif.o

ath6kl_core-y += htc_mbox.o

ath6kl_core-y += htc_pipe.o

ath6kl_core-y += wmi.o

ath6kl_core-y += core.o

ath6kl_core-y += recovery.o

ath6kl_core-$(CONFIG_NL80211_TESTMODE) += testmode.o

ath6kl_core-$(CONFIG_ATH6KL_TRACING) += trace.o

obj-$(CONFIG_ATH6KL_SDIO) += ath6kl_sdio.o

ath6kl_sdio-y += sdio.o

obj-$(CONFIG_ATH6KL_USB) += ath6kl_usb.o

ath6kl_usb-y += usb.o

 for tracing framework to find trace.h

CFLAGS_trace.o := -I$(src)

# SPDX-License-Identifier: ISC

               dxe.o \

               txrx.o \

               pmc.o \



# SPDX-License-Identifier: ISC

# SPDX-License-Identifier: ISC

ath5k-y				+= initvals.o

ath5k-y				+= gpio.o

ath5k-y				+= attach.o

ath5k-y				+= rfkill.o

ath5k-y				+= ani.o

ath5k-y				+= sysfs.o

ath5k-$(CONFIG_ATH5K_DEBUG)	+= debug.o

ath5k-$(CONFIG_ATH5K_PCI)	+= pci.o

obj-$(CONFIG_ATH5K)		+= ath5k.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ZD1211RW)		+= zd1211rw/

obj-$(CONFIG_USB_ZD1201)	+= zd1201.o

# SPDX-License-Identifier: GPL-2.0



zd1211rw-objs := zd_chip.o zd_mac.o \

		zd_rf_al2230.o zd_rf_rf2959.o \

		zd_rf.o zd_usb.o



# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0



			hif.o wlan_cfg.o wlan.o

obj-$(CONFIG_WILC1000_SDIO) += wilc1000-sdio.o



wilc1000-spi-objs += spi.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_HOSTAP)		+= hostap/

obj-$(CONFIG_HERMES)		+= orinoco/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the orinoco wireless device drivers.

#



obj-$(CONFIG_APPLE_AIRPORT)	+= airport.o

obj-$(CONFIG_PLX_HERMES)	+= orinoco_plx.o

obj-$(CONFIG_PCI_HERMES)	+= orinoco_pci.o

obj-$(CONFIG_TMD_HERMES)	+= orinoco_tmd.o

obj-$(CONFIG_NORTEL_HERMES)	+= orinoco_nortel.o

obj-$(CONFIG_ORINOCO_USB)	+= orinoco_usb.o

# SPDX-License-Identifier: GPL-2.0

hostap-y := hostap_80211_rx.o hostap_80211_tx.o hostap_ap.o hostap_info.o \

            hostap_ioctl.o hostap_main.o hostap_proc.o 



obj-$(CONFIG_HOSTAP_PLX) += hostap_plx.o

# SPDX-License-Identifier: GPL-2.0

p54common-objs			:= eeprom.o fwio.o txrx.o main.o

p54common-$(CONFIG_P54_LEDS)	+= led.o

obj-$(CONFIG_P54_USB)		+= p54usb.o

obj-$(CONFIG_P54_SPI)		+= p54spi.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_IWLEGACY)	+= iwlegacy/

# SPDX-License-Identifier: GPL-2.0

 common

obj-$(CONFIG_IWLWIFI)	+= iwlwifi.o

iwlwifi-objs		+= iwl-io.o

iwlwifi-objs		+= iwl-debug.o

iwlwifi-objs		+= iwl-eeprom-read.o iwl-eeprom-parse.o

iwlwifi-objs		+= iwl-phy-db.o iwl-nvm-parse.o

iwlwifi-$(CONFIG_IWLMVM) += cfg/7000.o cfg/8000.o cfg/9000.o cfg/22000.o

iwlwifi-objs		+= iwl-trans.o

iwlwifi-objs		+= queue/tx.o

iwlwifi-$(CONFIG_EFI)	+= fw/uefi.o

iwlwifi-$(CONFIG_IWLWIFI_DEBUGFS) += fw/debugfs.o

iwlwifi-objs += $(iwlwifi-m)

iwlwifi-$(CONFIG_IWLWIFI_DEVICE_TRACING) += iwl-devtrace.o



obj-$(CONFIG_IWLMVM)	+= mvm/

# SPDX-License-Identifier: GPL-2.0

# DVM



iwldvm-objs		+= power.o

iwldvm-objs		+= rxon.o devices.o

iwldvm-$(CONFIG_IWLWIFI_LEDS) += led.o

iwldvm-$(CONFIG_IWLWIFI_DEBUGFS) += debugfs.o

# SPDX-License-Identifier: GPL-2.0

iwlmvm-y += scan.o time-event.o rs.o rs-fw.o

iwlmvm-y += tt.o offloading.o tdls.o

iwlmvm-y += ftm-responder.o ftm-initiator.o

iwlmvm-y += rfi.o

iwlmvm-$(CONFIG_IWLWIFI_DEBUGFS) += debugfs.o debugfs-vif.o



ccflags-y += -I $(srctree)/$(src)/../

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Intel Centrino wireless drivers





obj-$(CONFIG_IPW2200) += ipw2200.o

obj-$(CONFIG_LIBIPW) += libipw.o

	libipw_module.o \

	libipw_rx.o \

# SPDX-License-Identifier: GPL-2.0

iwlegacy-$(CONFIG_IWLEGACY_DEBUGFS) += debug.o

iwlegacy-objs += $(iwlegacy-m)

# 4965

iwl4965-$(CONFIG_IWLEGACY_DEBUGFS) += 4965-debug.o

# 3945

iwl3945-objs		:= 3945-mac.o 3945.o 3945-rs.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

rt2x00lib-y				+= rt2x00dev.o

rt2x00lib-y				+= rt2x00mac.o

rt2x00lib-y				+= rt2x00link.o

rt2x00lib-$(CONFIG_RT2X00_LIB_DEBUGFS)	+= rt2x00debug.o

rt2x00lib-$(CONFIG_RT2X00_LIB_CRYPTO)	+= rt2x00crypto.o

rt2x00lib-$(CONFIG_RT2X00_LIB_FIRMWARE)	+= rt2x00firmware.o

rt2x00lib-$(CONFIG_RT2X00_LIB_LEDS)	+= rt2x00leds.o

obj-$(CONFIG_RT2X00_LIB)		+= rt2x00lib.o

obj-$(CONFIG_RT2X00_LIB_PCI)		+= rt2x00pci.o

obj-$(CONFIG_RT2X00_LIB_USB)		+= rt2x00usb.o

obj-$(CONFIG_RT2800_LIB_MMIO)		+= rt2800mmio.o

obj-$(CONFIG_RT2500PCI)			+= rt2500pci.o

obj-$(CONFIG_RT2800PCI)			+= rt2800pci.o

obj-$(CONFIG_RT73USB)			+= rt73usb.o

obj-$(CONFIG_RT2800SOC)			+= rt2800soc.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ATMEL)             += atmel.o

obj-$(CONFIG_PCI_ATMEL)         += atmel_pci.o 

obj-$(CONFIG_PCMCIA_ATMEL)      += atmel_cs.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux Wireless network device drivers for Realtek units

#

obj-$(CONFIG_RTL8180)		+= rtl818x/

obj-$(CONFIG_RTLWIFI)		+= rtlwifi/

obj-$(CONFIG_RTW88)		+= rtw88/



# SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

obj-$(CONFIG_RTW88_CORE)	+= rtw88_core.o

	   mac80211.o \

	   tx.o \

	   coex.o \

	   efuse.o \

	   ps.o \

	   sec.o \

	   regd.o

rtw88_core-$(CONFIG_PM) += wow.o

obj-$(CONFIG_RTW88_8822B)	+= rtw88_8822b.o





rtw88_8822c-objs		:= rtw8822c.o rtw8822c_table.o

obj-$(CONFIG_RTW88_8822CE)	+= rtw88_8822ce.o

rtw88_8822ce-objs		:= rtw8822ce.o

obj-$(CONFIG_RTW88_8723D)	+= rtw88_8723d.o





rtw88_8821c-objs		:= rtw8821c.o rtw8821c_table.o

obj-$(CONFIG_RTW88_8821CE)	+= rtw88_8821ce.o

rtw88_8821ce-objs		:= rtw8821ce.o

# SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

obj-$(CONFIG_RTW89_CORE) += rtw89_core.o

		mac80211.o \

		mac.o \

		phy.o \

		rtw8852a.o \

		rtw8852a_rfk.o \

		regd.o \

		sar.o \

		ps.o \

		ser.o



rtw89_pci-y := pci.o

# SPDX-License-Identifier: GPL-2.0

rtlwifi-objs	:=		\

		base.o		\

		debug.o		\





rtl_pci-objs	:=		pci.o

obj-$(CONFIG_RTLWIFI_USB)	+= rtl_usb.o



obj-$(CONFIG_RTL8192CE)		+= rtl8192ce/

obj-$(CONFIG_RTL8192SE)		+= rtl8192se/

obj-$(CONFIG_RTL8723AE)		+= rtl8723ae/

obj-$(CONFIG_RTL8188EE)		+= rtl8188ee/

obj-$(CONFIG_RTL8821AE)		+= rtl8821ae/

# SPDX-License-Identifier: GPL-2.0

		led.o		\

		pwrseq.o	\

		rf.o		\

		sw.o		\

		trx.o		\



# SPDX-License-Identifier: GPL-2.0

		phy_common.o

obj-$(CONFIG_RTL8192C_COMMON) += rtl8192c-common.o

# SPDX-License-Identifier: GPL-2.0

		led.o		\

		table.o		\

		trx.o

obj-$(CONFIG_RTL8192CE) += rtl8192ce.o

# SPDX-License-Identifier: GPL-2.0

		led.o		\

		pwrseq.o	\

		rf.o		\

		sw.o		\

		trx.o		\



# SPDX-License-Identifier: GPL-2.0

		led.o		\

		pwrseq.o	\

		rf.o		\

		sw.o		\

		trx.o		\



# SPDX-License-Identifier: GPL-2.0

btcoexist-objs :=	halbtc8192e2ant.o	\

			halbtc8723b2ant.o	\

			halbtc8821a2ant.o	\

			rtl_btc.o

# SPDX-License-Identifier: GPL-2.0

		led.o		\

		phy.o		\

		rf.o		\

		sw.o		\



# SPDX-License-Identifier: GPL-2.0

		led.o		\

		pwrseq.o	\

		rf.o		\

		sw.o		\

		trx.o		\



# SPDX-License-Identifier: GPL-2.0

		led.o		\

		pwrseq.o	\

		rf.o		\

		sw.o		\



# SPDX-License-Identifier: GPL-2.0

		led.o		\

		table.o		\

		trx.o

obj-$(CONFIG_RTL8192DE) += rtl8192de.o

# SPDX-License-Identifier: GPL-2.0

rtl8723-common-objs :=		\

		main.o		\

		dm_common.o	\

		fw_common.o	\



# SPDX-License-Identifier: GPL-2.0

		led.o		\

		table.o		\

		trx.o

obj-$(CONFIG_RTL8192SE) += rtl8192se.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_RTL8XXXU)	+= rtl8xxxu.o

		   rtl8xxxu_8723a.o rtl8xxxu_8192c.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

rtl8187-objs		:= dev.o rtl8225.o leds.o rfkill.o

obj-$(CONFIG_RTL8187)	+= rtl8187.o

ccflags-y += -I $(srctree)/$(src)/..

 SPDX-License-Identifier: GPL-2.0-only

rtl818x_pci-objs	:= dev.o rtl8225.o sa2400.o max2820.o grf5101.o rtl8225se.o

obj-$(CONFIG_RTL8180)	+= rtl818x_pci.o

ccflags-y += -I $(srctree)/$(src)/..

# SPDX-License-Identifier: GPL-2.0

#

 Copyright (c) 2015-2016 Quantenna Communications, Inc.

# All rights reserved.

#

# SPDX-License-Identifier: GPL-2.0

#

 Copyright (c) 2015-2016 Quantenna Communications, Inc.

# All rights reserved.

#

ccflags-y += \

	-Idrivers/net/wireless/quantenna/qtnfmac

obj-$(CONFIG_QTNFMAC) += qtnfmac.o

qtnfmac-objs += \

	core.o \

	commands.o \

	event.o \

	util.o \

	qlink_util.o







	shm_ipc.o \

	pcie/pearl_pcie.o \



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MT76_CORE)	+= mt76/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MT7601U)	+= mt7601u.o

mt7601u-objs	= \

	mac.o util.o debugfs.o tx.o

CFLAGS_trace.o := -I$(src)

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MT76_USB) += mt76-usb.o

obj-$(CONFIG_MT76x02_LIB) += mt76x02-lib.o

obj-$(CONFIG_MT76_CONNAC_LIB) += mt76-connac-lib.o

	mmio.o util.o trace.o dma.o mac80211.o debugfs.o eeprom.o \



mt76-$(CONFIG_PCI) += pci.o

mt76-$(CONFIG_NL80211_TESTMODE) += testmode.o



CFLAGS_usb_trace.o := -I$(src)



mt76x02-lib-y := mt76x02_util.o mt76x02_mac.o mt76x02_mcu.o \



mt76x02-usb-y := mt76x02_usb_mcu.o mt76x02_usb_core.o

mt76-connac-lib-y := mt76_connac_mcu.o mt76_connac_mac.o

obj-$(CONFIG_MT76x0_COMMON) += mt76x0/

obj-$(CONFIG_MT7603E) += mt7603/

obj-$(CONFIG_MT7915E) += mt7915/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MT76x0U) += mt76x0u.o

obj-$(CONFIG_MT76x0_COMMON) += mt76x0-common.o



mt76x0e-y := pci.o pci_mcu.o

# ccflags-y := -DDEBUG

# SPDX-License-Identifier: ISC

obj-$(CONFIG_MT7915E) += mt7915e.o

	     debugfs.o mmio.o

mt7915e-$(CONFIG_NL80211_TESTMODE) += testmode.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MT7603E) += mt7603e.o

mt7603e-y := \

	core.o dma.o mac.o eeprom.o \

	beacon.o debugfs.o

# SPDX-License-Identifier: ISC

obj-$(CONFIG_MT7921_COMMON) += mt7921-common.o

obj-$(CONFIG_MT7921S) += mt7921s.o

CFLAGS_trace.o := -I$(src)

mt7921-common-y := mac.o mcu.o main.o init.o debugfs.o trace.o

mt7921e-y := pci.o pci_mac.o pci_mcu.o dma.o

mt7921s-y := sdio.o sdio_mac.o sdio_mcu.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MT76x2_COMMON) += mt76x2-common.o

obj-$(CONFIG_MT76x2U) += mt76x2u.o

mt76x2-common-y := \



	pci.o pci_main.o pci_init.o pci_mcu.o \



	usb.o usb_init.o usb_main.o usb_mac.o usb_mcu.o \

# SPDX-License-Identifier: ISC

obj-$(CONFIG_MT7615_COMMON) += mt7615-common.o

obj-$(CONFIG_MT7663_USB_SDIO_COMMON) += mt7663-usb-sdio-common.o

obj-$(CONFIG_MT7663S) += mt7663s.o

CFLAGS_trace.o := -I$(src)

		   debugfs.o trace.o



mt7615e-$(CONFIG_MT7622_WMAC) += soc.o

mt7663-usb-sdio-common-y := usb_sdio.o

mt7663s-y := sdio.o sdio_mcu.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_AIRO_CS)		+= airo_cs.o airo.o

# SPDX-License-Identifier: GPL-2.0

rsi_91x-y			+= rsi_91x_main.o

rsi_91x-y			+= rsi_91x_core.o

rsi_91x-y			+= rsi_91x_mac80211.o

rsi_91x-y			+= rsi_91x_mgmt.o

rsi_91x-$(CONFIG_RSI_COEX)	+= rsi_91x_coex.o



obj-$(CONFIG_RSI_91X) 		+= rsi_91x.o

obj-$(CONFIG_RSI_SDIO)		+= rsi_sdio.o

obj-$(CONFIG_RSI_USB)		+= rsi_usb.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_WLCORE)			+= wlcore/

obj-$(CONFIG_WL12XX)			+= wl12xx/

obj-$(CONFIG_WL1251)			+= wl1251/

obj-$(CONFIG_WL18XX)			+= wl18xx/

# small builtin driver bit

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_WL18XX)		+= wl18xx.o

# SPDX-License-Identifier: GPL-2.0

wl1251_sdio-objs	+= sdio.o

obj-$(CONFIG_WL1251_SPI)	+= wl1251_spi.o

# SPDX-License-Identifier: GPL-2.0

wlcore-objs		= main.o cmd.o io.o event.o tx.o rx.o ps.o acx.o \





wlcore-$(CONFIG_NL80211_TESTMODE)	+= testmode.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_WL12XX)		+= wl12xx.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

		fwio.o \

		main.o \

		queue.o \

		bh.o \

		wsm.o \

		sta.o \

cw1200_core-$(CONFIG_PM)	+= pm.o

 CFLAGS_sta.o += -DDEBUG



cw1200_wlan_sdio-y := cw1200_sdio.o

cw1200_wlan_spi-y := cw1200_spi.o

obj-$(CONFIG_CW1200_WLAN_SDIO) += cw1200_wlan_sdio.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux PPP network device drivers.





obj-$(CONFIG_PPP_ASYNC) += ppp_async.o

obj-$(CONFIG_PPP_BSDCOMP) += bsd_comp.o

obj-$(CONFIG_PPP_MPPE) += ppp_mppe.o

obj-$(CONFIG_PPP_SYNC_TTY) += ppp_synctty.o

obj-$(CONFIG_PPTP) += pppox.o pptp.o

################################################################################

#

# Linux driver for VMware's vmxnet3 ethernet NIC.

#

 Copyright (C) 2007-2021, VMware, Inc. All Rights Reserved.



 This program is free software; you can redistribute it and/or modify it

 under the terms of the GNU General Public License as published by the

# Free Software Foundation; version 2 of the License and no later version.

#

# This program is distributed in the hope that it will be useful, but

 WITHOUT ANY WARRANTY; without even the implied warranty of

# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or

 NON INFRINGEMENT.  See the GNU General Public License for more

# details.

#

# You should have received a copy of the GNU General Public License

# along with this program; if not, write to the Free Software

# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

#

# The full GNU General Public License is included in this distribution in

 the file called "COPYING".



# Maintained by: pv-drivers@vmware.com

#

#



#

# Makefile for the VMware vmxnet3 ethernet NIC driver

#

obj-$(CONFIG_VMXNET3) += vmxnet3.o

# SPDX-License-Identifier: GPL-2.0

# Makefile for linux/drivers/net/arcnet

#

obj-$(CONFIG_ARCNET) += arcnet.o

obj-$(CONFIG_ARCNET_1051) += rfc1051.o

obj-$(CONFIG_ARCNET_RAW) += arc-rawmode.o

obj-$(CONFIG_ARCNET_CAP) += capmode.o

obj-$(CONFIG_ARCNET_COM90xx) += com90xx.o

obj-$(CONFIG_ARCNET_COM90xxIO) += com90io.o

# SPDX-License-Identifier: GPL-2.0

#

  Makefile for the Linux Controller Area Network drivers.





obj-$(CONFIG_CAN_VCAN)		+= vcan.o

obj-$(CONFIG_CAN_VXCAN)		+= vxcan.o

obj-$(CONFIG_CAN_SLCAN)		+= slcan.o

obj-y				+= dev/

obj-y				+= rcar/

obj-y				+= usb/



obj-$(CONFIG_CAN_AT91)		+= at91_can.o

obj-$(CONFIG_CAN_C_CAN)		+= c_can/

obj-$(CONFIG_CAN_JANZ_ICAN3)	+= janz-ican3.o

obj-$(CONFIG_CAN_MSCAN)		+= mscan/

obj-$(CONFIG_CAN_PEAK_PCIEFD)	+= peak_canfd/

obj-$(CONFIG_CAN_SJA1000)	+= sja1000/

obj-$(CONFIG_CAN_SUN4I)		+= sun4i_can.o



subdir-ccflags-$(CONFIG_CAN_DEBUG_DEVICES) += -DDEBUG

 SPDX-License-Identifier: GPL-2.0-only



  Makefile for the Bosch CC770 CAN controller drivers.





obj-$(CONFIG_CAN_CC770_ISA) += cc770_isa.o

 SPDX-License-Identifier: GPL-2.0-only



#  Makefile for the IFI CANFD controller driver.

#

obj-$(CONFIG_CAN_IFI_CANFD) += ifi_canfd.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_CAN_SOFTING) += softing.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the PEAK-System CAN-FD IP module drivers



obj-$(CONFIG_CAN_PEAK_PCIEFD) += peak_pciefd.o

# SPDX-License-Identifier: GPL-2.0

#

#  Makefile for the Renesas R-Car CAN & CAN FD controller drivers

#

obj-$(CONFIG_CAN_RCAR_CANFD)	+= rcar_canfd.o

# SPDX-License-Identifier: GPL-2.0

#

  Makefile for the Linux Controller Area Network USB drivers.





obj-$(CONFIG_CAN_EMS_USB) += ems_usb.o

obj-$(CONFIG_CAN_GS_USB) += gs_usb.o

obj-$(CONFIG_CAN_KVASER_USB) += kvaser_usb/

obj-$(CONFIG_CAN_UCAN) += ucan.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CAN_PEAK_USB) += peak_usb.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CAN_KVASER_USB) += kvaser_usb.o

kvaser_usb-y = kvaser_usb_core.o kvaser_usb_leaf.o kvaser_usb_hydra.o

# SPDX-License-Identifier: GPL-2.0

etas_es58x-y = es58x_core.o es581_4.o es58x_fd.o

# SPDX-License-Identifier: GPL-2.0

#

#  Makefile for the SJA1000 CAN controller drivers.

#

obj-$(CONFIG_CAN_EMS_PCI) += ems_pci.o

obj-$(CONFIG_CAN_F81601) += f81601.o

obj-$(CONFIG_CAN_PEAK_PCI) += peak_pci.o

obj-$(CONFIG_CAN_PLX_PCI) += plx_pci.o

obj-$(CONFIG_CAN_SJA1000_ISA) += sja1000_isa.o

obj-$(CONFIG_CAN_TSCAN1) += tscan1.o

 SPDX-License-Identifier: GPL-2.0-only



  Makefile for the Bosch C_CAN controller drivers.







c_can-objs :=

c_can-objs += c_can_ethtool.o



obj-$(CONFIG_CAN_C_CAN_PCI) += c_can_pci.o

# SPDX-License-Identifier: GPL-2.0

can-dev-y			+= bittiming.o

can-dev-y			+= netlink.o

can-dev-y			+= rx-offload.o



can-dev-$(CONFIG_CAN_LEDS)	+= led.o

 SPDX-License-Identifier: GPL-2.0-only



#  Makefile for the Bosch M_CAN controller driver.

#

obj-$(CONFIG_CAN_M_CAN) += m_can.o

obj-$(CONFIG_CAN_M_CAN_PLATFORM) += m_can_platform.o



tcan4x5x-objs += tcan4x5x-core.o

 SPDX-License-Identifier: GPL-2.0-only



#  Makefile for the Linux Controller Area Network SPI drivers.

#



obj-$(CONFIG_CAN_MCP251X)	+= mcp251x.o

 SPDX-License-Identifier: GPL-2.0-only





mcp251xfd-objs :=

mcp251xfd-objs += mcp251xfd-regmap.o

mcp251xfd-objs += mcp251xfd-timestamp.o

mcp251xfd-$(CONFIG_DEV_COREDUMP) += mcp251xfd-dump.o

 SPDX-License-Identifier: GPL-2.0-only



mscan-mpc5xxx-objs		:= mscan.o mpc5xxx_can.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_NETDEVSIM) += netdevsim.o

	netdev.o dev.o ethtool.o fib.o bus.o health.o udp_tunnels.o

ifeq ($(CONFIG_BPF_SYSCALL),y)

netdevsim-objs += \



ifneq ($(CONFIG_XFRM_OFFLOAD),)

netdevsim-objs += ipsec.o

endif

ifneq ($(CONFIG_PSAMPLE),)

netdevsim-objs += psample.o

endif

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux FDDI network device drivers.





obj-$(CONFIG_DEFZA) += defza.o

obj-$(CONFIG_SKFP) += skfp/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the SysKonnect FDDI PCI adapter driver

#

obj-$(CONFIG_SKFP) += skfp.o

skfp-objs :=  skfddi.o    hwmtm.o    fplustm.o  smt.o      cfm.o     \



# NOTE:

   Compiling this driver produces some warnings (and some more are 

   switched off below), but I did not fix this, because the Hardware

#   Module source (see skfddi.c for details) is used for different

   drivers, and fixing it for Linux might bring problems on other

#   projects. To keep the source common for all those drivers (and

   thus simplify fixes to it), please do not clean it up!



ccflags-y := -DPCI -DMEM_MAPPED_IO -Wno-strict-prototypes

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux AX.25 and HFMODEM device drivers.





 19971130 	Moved the amateur radio related network drivers from 

		drivers/net/ to drivers/hamradio for easier maintenance.

#               Joerg Reuter DL1BKE <jreuter@yaina.de>

#

# 20000806	Rewritten to use lists instead of if-statements.

		Christoph Hellwig <hch@infradead.org>





obj-$(CONFIG_DMASCC)		+= dmascc.o

obj-$(CONFIG_SCC)		+= scc.o

obj-$(CONFIG_MKISS)		+= mkiss.o

obj-$(CONFIG_6PACK)		+= 6pack.o

obj-$(CONFIG_YAM)		+= yam.o

obj-$(CONFIG_BPQETHER)		+= bpqether.o

obj-$(CONFIG_BAYCOM_SER_HDX)	+= baycom_ser_hdx.o	hdlcdrv.o

obj-$(CONFIG_BAYCOM_PAR)	+= baycom_par.o		hdlcdrv.o

obj-$(CONFIG_BAYCOM_EPP)	+= baycom_epp.o		hdlcdrv.o

# SPDX-License-Identifier: GPL-2.0

ccflags-$(CONFIG_CAIF_DEBUG) := -DDEBUG

# Serial interface

obj-$(CONFIG_CAIF_TTY) += caif_serial.o

# Virtio interface

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux WWAN device drivers.

#

obj-$(CONFIG_WWAN) += wwan.o





obj-$(CONFIG_MHI_WWAN_MBIM) += mhi_wwan_mbim.o

 SPDX-License-Identifier: (GPL-2.0-only)



# Copyright (C) 2020-21 Intel Corporation.

#

iosm-y = \

	iosm_ipc_imem.o			\

	iosm_ipc_imem_ops.o		\

	iosm_ipc_port.o			\

	iosm_ipc_pm.o			\

	iosm_ipc_protocol_ops.o	\

	iosm_ipc_mux.o			\

	iosm_ipc_devlink.o		\

	iosm_ipc_coredump.o

obj-$(CONFIG_IOSM) := iosm.o



ipa-y			:=	ipa_main.o ipa_power.o ipa_reg.o ipa_mem.o \

				ipa_table.o ipa_interrupt.o gsi.o gsi_trans.o \

				ipa_endpoint.o ipa_cmd.o ipa_modem.o \



				ipa_data-v4.9.o ipa_data-v4.11.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_IEEE802154_FAKELB) += fakelb.o

obj-$(CONFIG_IEEE802154_AT86RF230) += at86rf230.o

obj-$(CONFIG_IEEE802154_MRF24J40) += mrf24j40.o

obj-$(CONFIG_IEEE802154_CC2520) += cc2520.o

obj-$(CONFIG_IEEE802154_ATUSB) += atusb.o

obj-$(CONFIG_IEEE802154_ADF7242) += adf7242.o

obj-$(CONFIG_IEEE802154_CA8210) += ca8210.o

obj-$(CONFIG_IEEE802154_MCR20A) += mcr20a.o

obj-$(CONFIG_IEEE802154_HWSIM) += mac802154_hwsim.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_NET_DSA_LOOP)	+= dsa_loop.o

ifdef CONFIG_NET_DSA_LOOP

obj-$(CONFIG_FIXED_PHY)		+= dsa_loop_bdinfo.o

endif

obj-$(CONFIG_NET_DSA_MT7530)	+= mt7530.o

obj-$(CONFIG_NET_DSA_QCA8K)	+= qca8k.o

obj-$(CONFIG_NET_DSA_SMSC_LAN9303) += lan9303-core.o

obj-$(CONFIG_NET_DSA_SMSC_LAN9303_I2C) += lan9303_i2c.o

obj-$(CONFIG_NET_DSA_SMSC_LAN9303_MDIO) += lan9303_mdio.o

obj-$(CONFIG_NET_DSA_VITESSE_VSC73XX) += vitesse-vsc73xx-core.o

obj-$(CONFIG_NET_DSA_VITESSE_VSC73XX_SPI) += vitesse-vsc73xx-spi.o

obj-y				+= microchip/

obj-y				+= qca/

obj-y				+= xrs700x/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_NET_DSA_AR9331)	+= ar9331.o

# SPDX-License-Identifier: GPL-2.0

hellcreek_sw-objs := hellcreek.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_NET_DSA_MSCC_FELIX) += mscc_felix.o



	felix.o \



	felix.o \

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_NET_DSA_MICROCHIP_KSZ_COMMON)	+= ksz_common.o

obj-$(CONFIG_NET_DSA_MICROCHIP_KSZ9477)		+= ksz9477.o

obj-$(CONFIG_NET_DSA_MICROCHIP_KSZ9477_SPI)	+= ksz9477_spi.o

obj-$(CONFIG_NET_DSA_MICROCHIP_KSZ8795)		+= ksz8795.o

obj-$(CONFIG_NET_DSA_MICROCHIP_KSZ8863_SMI)	+= ksz8863_smi.o

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_B53_SPI_DRIVER)	+= b53_spi.o

obj-$(CONFIG_B53_MDIO_DRIVER)	+= b53_mdio.o

obj-$(CONFIG_B53_MMAP_DRIVER)	+= b53_mmap.o

obj-$(CONFIG_B53_SRAB_DRIVER)	+= b53_srab.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_NET_DSA_SJA1105) += sja1105.o

    sja1105_main.o \

    sja1105_flower.o \

    sja1105_ethtool.o \

    sja1105_devlink.o \

    sja1105_dynamic_config.o \

ifdef CONFIG_NET_DSA_SJA1105_PTP

sja1105-objs += sja1105_ptp.o

endif

ifdef CONFIG_NET_DSA_SJA1105_TAS

sja1105-objs += sja1105_tas.o

endif

sja1105-objs += sja1105_vl.o

endif

# SPDX-License-Identifier: GPL-2.0

mv88e6xxx-objs := chip.o

mv88e6xxx-objs += devlink.o

mv88e6xxx-objs += global1.o

mv88e6xxx-objs += global1_atu.o

mv88e6xxx-objs += global1_vtu.o

mv88e6xxx-objs += global2.o

mv88e6xxx-objs += global2_avb.o

mv88e6xxx-objs += global2_scratch.o

mv88e6xxx-$(CONFIG_NET_DSA_MV88E6XXX_PTP) += hwtstamp.o

mv88e6xxx-objs += phy.o

mv88e6xxx-$(CONFIG_NET_DSA_MV88E6XXX_PTP) += ptp.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_NET_DSA_XRS700X) += xrs700x.o

obj-$(CONFIG_NET_DSA_XRS700X_MDIO) += xrs700x_mdio.o

 SPDX-License-Identifier: GPL-2.0-only



hv_netvsc-y := netvsc_drv.o netvsc.o rndis_filter.o netvsc_trace.o netvsc_bpf.o

# SPDX-License-Identifier: GPL-2.0

 Makefile for Linux PCS drivers





obj-$(CONFIG_PCS_XPCS)		+= pcs_xpcs.o

obj-$(CONFIG_PCS_LYNX)		+= pcs-lynx.o

 SPDX-License-Identifier: GPL-2.0-only

################################################################################

#

# FUJITSU Extended Socket Network Device driver

 Copyright (c) 2015 FUJITSU LIMITED



################################################################################



#

 Makefile for the FUJITSU Extended Socket network device driver







fjes-objs := fjes_main.o fjes_hw.o fjes_ethtool.o fjes_trace.o fjes_debugfs.o

# SPDX-License-Identifier: GPL-2.0

 Makefile for Linux PHY drivers



libphy-y			:= phy.o phy-c45.o phy-core.o phy_device.o \

				   linkmode.o



obj-y				+= mdio-boardinfo.o

endif

 PHYLIB implies MDIO_DEVICE, in that case, we have a bunch of circular

# dependencies that does not make it possible to split mdio-bus objects into a

 dedicated loadable module, so we bundle them all together into libphy.ko

else

obj-$(CONFIG_MDIO_DEVICE)	+= mdio-bus.o

endif

libphy-$(CONFIG_SWPHY)		+= swphy.o



obj-$(CONFIG_PHYLINK)		+= phylink.o

obj-$(CONFIG_PHYLIB)		+= libphy.o



obj-$(CONFIG_SFP)		+= sfp.o

sfp-obj-$(CONFIG_SFP)		+= sfp-bus.o

obj-y				+= $(sfp-obj-y) $(sfp-obj-m)

aquantia-objs			+= aquantia_main.o

obj-$(CONFIG_AQUANTIA_PHY)	+= aquantia.o

obj-$(CONFIG_AX88796B_PHY)	+= ax88796b.o

obj-$(CONFIG_BCM63XX_PHY)	+= bcm63xx.o

obj-$(CONFIG_BCM84881_PHY)	+= bcm84881.o

obj-$(CONFIG_BCM_CYGNUS_PHY)	+= bcm-cygnus.o

obj-$(CONFIG_BCM_NET_PHYLIB)	+= bcm-phy-lib.o

obj-$(CONFIG_CICADA_PHY)	+= cicada.o

obj-$(CONFIG_DAVICOM_PHY)	+= davicom.o

obj-$(CONFIG_DP83822_PHY)	+= dp83822.o

obj-$(CONFIG_DP83867_PHY)	+= dp83867.o

obj-$(CONFIG_DP83TC811_PHY)	+= dp83tc811.o

obj-$(CONFIG_FIXED_PHY)		+= fixed_phy.o

obj-$(CONFIG_INTEL_XWAY_PHY)	+= intel-xway.o

obj-$(CONFIG_MARVELL_PHY)	+= marvell.o

obj-$(CONFIG_MEDIATEK_GE_PHY)	+= mediatek-ge.o

obj-$(CONFIG_MICREL_PHY)	+= micrel.o

obj-$(CONFIG_MICROCHIP_T1_PHY)	+= microchip_t1.o

obj-$(CONFIG_MOTORCOMM_PHY)	+= motorcomm.o

obj-$(CONFIG_NXP_C45_TJA11XX_PHY)	+= nxp-c45-tja11xx.o

obj-$(CONFIG_REALTEK_PHY)	+= realtek.o

obj-$(CONFIG_RENESAS_PHY)	+= uPD60620.o

obj-$(CONFIG_TERANETICS_PHY)	+= teranetics.o

obj-$(CONFIG_XILINX_GMII2RGMII) += xilinx_gmii2rgmii.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for MSCC networking PHY driver

mscc-objs := mscc_main.o



ifdef CONFIG_MACSEC



ifdef CONFIG_NETWORK_PHY_TIMESTAMPING

mscc-objs += mscc_ptp.o

endif

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for linux/drivers/platform

#

obj-$(CONFIG_X86)		+= x86/

obj-$(CONFIG_MIPS)		+= mips/

obj-$(CONFIG_OLPC_EC)		+= olpc/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CPU_HWMON) += cpu_hwmon.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for linux/drivers/platform/x86

# x86 Platform-Specific Drivers

#

# Windows Management Interface



# WMI drivers

obj-$(CONFIG_HUAWEI_WMI)		+= huawei-wmi.o

obj-$(CONFIG_NVIDIA_WMI_EC_BACKLIGHT)	+= nvidia-wmi-ec-backlight.o



 Acer

obj-$(CONFIG_ACER_WIRELESS)	+= acer-wireless.o

obj-$(CONFIG_ACER_WMI)		+= acer-wmi.o

 AMD



# Advantech



# Apple



 ASUS

obj-$(CONFIG_ASUS_LAPTOP)	+= asus-laptop.o

obj-$(CONFIG_ASUS_NB_WMI)	+= asus-nb-wmi.o



 Cisco/Meraki

obj-$(CONFIG_MERAKI_MX100)	+= meraki-mx100.o

# Dell

obj-$(CONFIG_X86_PLATFORM_DRIVERS_DELL)		+= dell/

 Fujitsu

obj-$(CONFIG_AMILO_RFKILL)	+= amilo-rfkill.o

obj-$(CONFIG_FUJITSU_TABLET)	+= fujitsu-tablet.o

 GPD

obj-$(CONFIG_GPD_POCKET_FAN)	+= gpd-pocket-fan.o

 Hewlett Packard

obj-$(CONFIG_TC1100_WMI)	+= tc1100-wmi.o

# Hewlett Packard Enterprise



# IBM Thinkpad and Lenovo

obj-$(CONFIG_IBM_RTL)		+= ibm_rtl.o

obj-$(CONFIG_SENSORS_HDAPS)	+= hdaps.o



# Intel

obj-$(CONFIG_X86_PLATFORM_DRIVERS_INTEL)		+= intel/

 MSI

obj-$(CONFIG_MSI_LAPTOP)	+= msi-laptop.o

obj-$(CONFIG_MSI_WMI)		+= msi-wmi.o

# OLPC

obj-$(CONFIG_XO1_RFKILL)	+= xo1-rfkill.o

# PC Engines

obj-$(CONFIG_PCENGINES_APU2)	+= pcengines-apuv2.o

 Barco

obj-$(CONFIG_BARCO_P50_GPIO)	+= barco-p50-gpio.o

 Samsung

obj-$(CONFIG_SAMSUNG_LAPTOP)	+= samsung-laptop.o



# Toshiba

obj-$(CONFIG_TOSHIBA_HAPS)	+= toshiba_haps.o



# toshiba_acpi must link after wmi to ensure that wmi devices are found

# before toshiba_acpi initializes



 Laptop drivers

obj-$(CONFIG_ACPI_CMPC)		+= classmate-laptop.o

obj-$(CONFIG_PANASONIC_LAPTOP)	+= panasonic-laptop.o

obj-$(CONFIG_SYSTEM76_ACPI)	+= system76_acpi.o



 Platform drivers

obj-$(CONFIG_I2C_MULTI_INSTANTIATE)	+= i2c-multi-instantiate.o

obj-$(CONFIG_MLX_PLATFORM)		+= mlx-platform.o

obj-$(CONFIG_TOUCHSCREEN_DMI)		+= touchscreen_dmi.o

obj-$(CONFIG_WIRELESS_HOTKEY)		+= wireless-hotkey.o

# Intel uncore drivers

obj-$(CONFIG_INTEL_IPS)				+= intel_ips.o

 Intel PMIC / PMC / P-Unit devices

obj-$(CONFIG_INTEL_SCU_PCI)		+= intel_scu_pcidrv.o

obj-$(CONFIG_PMC_ATOM)			+= pmc_atom.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for drivers/platform/x86/intel

# Intel x86 Platform-Specific Drivers

#

obj-$(CONFIG_INTEL_SAR_INT1092)		+= int1092/

obj-$(CONFIG_INTEL_SKL_INT3472)		+= int3472/

obj-$(CONFIG_INTEL_PMC_CORE)		+= pmc/

obj-$(CONFIG_INTEL_SPEED_SELECT_INTERFACE) += speed_select_if/



# Intel input drivers

intel-hid-y				:= hid.o

obj-$(CONFIG_INTEL_HID_EVENT)		+= intel-hid.o

intel-vbtn-y				:= vbtn.o

obj-$(CONFIG_INTEL_VBTN)		+= intel-vbtn.o

 Intel miscellaneous drivers

obj-$(CONFIG_INTEL_ISHTP_ECLITE)	+= ishtp_eclite.o

obj-$(CONFIG_INTEL_INT0002_VGPIO)	+= intel_int0002_vgpio.o



# Intel PMIC / PMC / P-Unit drivers

intel_chtdc_ti_pwrbtn-y			:= chtdc_ti_pwrbtn.o

intel_mrfld_pwrbtn-y			:= mrfld_pwrbtn.o

intel_punit_ipc-y			:= punit_ipc.o

obj-$(CONFIG_INTEL_PUNIT_IPC)		+= intel_punit_ipc.o

# Intel Uncore drivers

intel-rst-y				:= rst.o

intel-smartconnect-y			:= smartconnect.o

intel_turbo_max_3-y			:= turbo_max_3.o

obj-$(CONFIG_INTEL_TURBO_MAX_3)		+= intel_turbo_max_3.o

intel-uncore-frequency-y		:= uncore-frequency.o

obj-$(CONFIG_INTEL_UNCORE_FREQ_CONTROL)	+= intel-uncore-frequency.o

 SPDX-License-Identifier: GPL-2.0-only



 Intel x86 Platform Specific Drivers





intel-wmi-sbl-fw-update-y				:= sbl-fw-update.o

intel-wmi-thunderbolt-y					:= thunderbolt.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile - Intel Speed Select Interface drivers

 Copyright (c) 2019, Intel Corporation.





obj-$(CONFIG_INTEL_SPEED_SELECT_INTERFACE) += isst_if_mmio.o

obj-$(CONFIG_INTEL_SPEED_SELECT_INTERFACE) += isst_if_mbox_msr.o

 SPDX-License-Identifier: GPL-2.0-only



 Intel x86 Platform Specific Drivers





intel_atomisp2_led-y			:= led.o

					   intel_skl_int3472_discrete.o \

# SPDX-License-Identifier: GPL-2.0

#

# Intel x86 Platform-Specific Drivers

#

intel_pmc_core-y			:= core.o

obj-$(CONFIG_INTEL_PMC_CORE)		+= intel_pmc_core.o

intel_pmc_core_pltdrv-y			:= pltdrv.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for linux/drivers/platform/x86/intel/pmt

 Intel Platform Monitoring Technology Drivers





obj-$(CONFIG_INTEL_PMT_CLASS)		+= pmt_class.o

pmt_class-y				:= class.o

obj-$(CONFIG_INTEL_PMT_CRASHLOG)	+= pmt_crashlog.o

pmt_crashlog-y				:= crashlog.o

 SPDX-License-Identifier: GPL-2.0-only

					   intel_cht_int33fe_microb.o

 SPDX-License-Identifier: GPL-2.0-only



 Intel x86 Platform Specific Drivers





obj-$(CONFIG_INTEL_TELEMETRY)		+= intel_telemetry_core.o

intel_telemetry_pltdrv-y		:= pltdrv.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for linux/drivers/platform/x86/dell

# Dell x86 Platform-Specific Drivers

#

obj-$(CONFIG_DCDBAS)			+= dcdbas.o

obj-$(CONFIG_DELL_LAPTOP)		+= dell-laptop.o

obj-$(CONFIG_DELL_RBU)			+= dell_rbu.o

obj-$(CONFIG_DELL_SMBIOS)		+= dell-smbios.o

dell-smbios-$(CONFIG_DELL_SMBIOS_WMI)	+= dell-smbios-wmi.o

obj-$(CONFIG_DELL_WMI)			+= dell-wmi.o

dell-wmi-objs				:= dell-wmi-base.o

dell-wmi-$(CONFIG_DELL_WMI_PRIVACY)	+= dell-wmi-privacy.o

obj-$(CONFIG_DELL_WMI_AIO)		+= dell-wmi-aio.o

obj-$(CONFIG_DELL_WMI_SYSMAN)		+= dell-wmi-sysman/

dell-wmi-sysman-objs := 	sysman.o		\

				enum-attributes.o	\

				passobj-attributes.o	\

				passwordattr-interface.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for linux/drivers/platform/mellanox

# Mellanox Platform-Specific Drivers

#

obj-$(CONFIG_MLXBF_TMFIFO)	+= mlxbf-tmfifo.o

obj-$(CONFIG_MLXREG_IO) += mlxreg-io.o

 SPDX-License-Identifier: GPL-2.0-only



 OLPC XO platform-specific drivers



obj-$(CONFIG_OLPC_XO175_EC)	+= olpc-xo175-ec.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Goldfish platform specific drivers



obj-$(CONFIG_GOLDFISH_PIPE)	+= goldfish_pipe.o

# SPDX-License-Identifier: GPL-2.0

# tell define_trace.h where to find the cros ec trace header



obj-$(CONFIG_CHROMEOS_LAPTOP)		+= chromeos_laptop.o

obj-$(CONFIG_CHROMEOS_PSTORE)		+= chromeos_pstore.o

obj-$(CONFIG_CHROMEOS_TBMC)		+= chromeos_tbmc.o

cros_ec_lpcs-objs			:= cros_ec_lpc.o cros_ec_lpc_mec.o

obj-$(CONFIG_CROS_EC_TYPEC)		+= cros_ec_typec.o

obj-$(CONFIG_CROS_KBD_LED_BACKLIGHT)	+= cros_kbd_led_backlight.o

obj-$(CONFIG_CROS_EC_CHARDEV)		+= cros_ec_chardev.o

obj-$(CONFIG_CROS_EC_LIGHTBAR)		+= cros_ec_lightbar.o

obj-$(CONFIG_CROS_EC_VBC)		+= cros_ec_vbc.o

obj-$(CONFIG_CROS_EC_DEBUGFS)		+= cros_ec_debugfs.o



obj-$(CONFIG_WILCO_EC)			+= wilco_ec/

# SPDX-License-Identifier: GPL-2.0

wilco_ec-objs				:= core.o keyboard_leds.o mailbox.o \

obj-$(CONFIG_WILCO_EC)			+= wilco_ec.o

wilco_ec_telem-objs			:= telemetry.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for linux/drivers/platform/surface

# Microsoft Surface Platform-Specific Drivers

#

obj-$(CONFIG_SURFACE_3_BUTTON)		+= surface3_button.o

obj-$(CONFIG_SURFACE_ACPI_NOTIFY)	+= surface_acpi_notify.o

obj-$(CONFIG_SURFACE_AGGREGATOR)	+= aggregator/

obj-$(CONFIG_SURFACE_AGGREGATOR_REGISTRY) += surface_aggregator_registry.o

obj-$(CONFIG_SURFACE_DTX)		+= surface_dtx.o

obj-$(CONFIG_SURFACE_GPE)		+= surface_gpe.o

obj-$(CONFIG_SURFACE_HOTPLUG)		+= surface_hotplug.o

 SPDX-License-Identifier: GPL-2.0+

# Copyright (C) 2019-2021 Maximilian Luz <luzmaximilian@gmail.com>

 For include/trace/define_trace.h to include trace.h

CFLAGS_core.o = -I$(src)

obj-$(CONFIG_SURFACE_AGGREGATOR) += surface_aggregator.o

surface_aggregator-y := core.o

surface_aggregator-y += ssh_packet_layer.o

surface_aggregator-y += ssh_request_layer.o

surface_aggregator-y += controller.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y				+= core.o cpu.o

obj-$(CONFIG_OF)		+= of.o

# SPDX-License-Identifier: GPL-2.0

 generic pinmux support



subdir-ccflags-$(CONFIG_DEBUG_PINCTRL)	+= -DDEBUG

obj-y				+= core.o pinctrl-utils.o

obj-$(CONFIG_PINMUX)		+= pinmux.o

obj-$(CONFIG_PINCONF)		+= pinconf.o

obj-$(CONFIG_OF)		+= devicetree.o

obj-$(CONFIG_PINCTRL_APPLE_GPIO) += pinctrl-apple-gpio.o

obj-$(CONFIG_PINCTRL_AS3722)	+= pinctrl-as3722.o

obj-$(CONFIG_PINCTRL_AT91)	+= pinctrl-at91.o

obj-$(CONFIG_PINCTRL_AT91PIO4)	+= pinctrl-at91-pio4.o

obj-$(CONFIG_PINCTRL_BM1880)	+= pinctrl-bm1880.o

obj-$(CONFIG_PINCTRL_DA9062)	+= pinctrl-da9062.o

obj-$(CONFIG_PINCTRL_FALCON)	+= pinctrl-falcon.o

obj-$(CONFIG_PINCTRL_MAX77620)	+= pinctrl-max77620.o

obj-$(CONFIG_PINCTRL_MCP23S08_SPI)	+= pinctrl-mcp23s08_spi.o

obj-$(CONFIG_PINCTRL_OXNAS)	+= pinctrl-oxnas.o

obj-$(CONFIG_PINCTRL_PIC32)	+= pinctrl-pic32.o

obj-$(CONFIG_PINCTRL_ROCKCHIP)	+= pinctrl-rockchip.o

obj-$(CONFIG_PINCTRL_SX150X)	+= pinctrl-sx150x.o

obj-$(CONFIG_PINCTRL_XWAY)	+= pinctrl-xway.o

obj-$(CONFIG_PINCTRL_LPC18XX)	+= pinctrl-lpc18xx.o

obj-$(CONFIG_PINCTRL_ZYNQ)	+= pinctrl-zynq.o

obj-$(CONFIG_PINCTRL_INGENIC)	+= pinctrl-ingenic.o

obj-$(CONFIG_PINCTRL_OCELOT)	+= pinctrl-ocelot.o

obj-$(CONFIG_PINCTRL_EQUILIBRIUM)   += pinctrl-equilibrium.o

obj-$(CONFIG_PINCTRL_KEEMBAY)	+= pinctrl-keembay.o

obj-y				+= actions/

obj-y				+= bcm/

obj-$(CONFIG_PINCTRL_BERLIN)	+= berlin/

obj-$(CONFIG_X86)		+= intel/

obj-y				+= nomadik/

obj-$(CONFIG_ARCH_VT8500)	+= vt8500/

obj-y				+= mediatek/

obj-y				+= cirrus/

obj-$(CONFIG_PINCTRL_VISCONTI)	+= visconti/

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PINCTRL_DOVE)	+= pinctrl-dove.o

obj-$(CONFIG_PINCTRL_ARMADA_370) += pinctrl-armada-370.o

obj-$(CONFIG_PINCTRL_ARMADA_38X) += pinctrl-armada-38x.o

obj-$(CONFIG_PINCTRL_ARMADA_AP806) += pinctrl-armada-ap806.o

# SPDX-License-Identifier: GPL-2.0

 Qualcomm pin control drivers

obj-$(CONFIG_PINCTRL_MSM)	+= pinctrl-msm.o

obj-$(CONFIG_PINCTRL_APQ8084)	+= pinctrl-apq8084.o

obj-$(CONFIG_PINCTRL_IPQ8064)	+= pinctrl-ipq8064.o

obj-$(CONFIG_PINCTRL_IPQ6018)	+= pinctrl-ipq6018.o

obj-$(CONFIG_PINCTRL_MSM8660)	+= pinctrl-msm8660.o

obj-$(CONFIG_PINCTRL_MSM8X74)	+= pinctrl-msm8x74.o

obj-$(CONFIG_PINCTRL_MSM8953)	+= pinctrl-msm8953.o

obj-$(CONFIG_PINCTRL_MSM8994)   += pinctrl-msm8994.o

obj-$(CONFIG_PINCTRL_MSM8998)   += pinctrl-msm8998.o

obj-$(CONFIG_PINCTRL_QCS404)	+= pinctrl-qcs404.o

obj-$(CONFIG_PINCTRL_MDM9607)	+= pinctrl-mdm9607.o

obj-$(CONFIG_PINCTRL_QCOM_SPMI_PMIC) += pinctrl-spmi-mpp.o

obj-$(CONFIG_PINCTRL_QCOM_SSBI_PMIC) += pinctrl-ssbi-gpio.o

obj-$(CONFIG_PINCTRL_SC7180)	+= pinctrl-sc7180.o

obj-$(CONFIG_PINCTRL_SC8180X)	+= pinctrl-sc8180x.o

obj-$(CONFIG_PINCTRL_SDM845) += pinctrl-sdm845.o

obj-$(CONFIG_PINCTRL_SM6115) += pinctrl-sm6115.o

obj-$(CONFIG_PINCTRL_SM6350) += pinctrl-sm6350.o

obj-$(CONFIG_PINCTRL_SM8250) += pinctrl-sm8250.o

obj-$(CONFIG_PINCTRL_LPASS_LPI) += pinctrl-lpass-lpi.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PINCTRL_MESON) += pinctrl-meson.o

obj-$(CONFIG_PINCTRL_MESON8) += pinctrl-meson8.o

obj-$(CONFIG_PINCTRL_MESON_GXBB) += pinctrl-meson-gxbb.o

obj-$(CONFIG_PINCTRL_MESON_AXG_PMX) += pinctrl-meson-axg-pmx.o

obj-$(CONFIG_PINCTRL_MESON_G12A) += pinctrl-meson-g12a.o

 SPDX-License-Identifier: GPL-2.0-only

 Marvell PXA pin control drivers

# SPDX-License-Identifier: GPL-2.0

# Samsung pin control drivers

obj-$(CONFIG_PINCTRL_SAMSUNG)	+= pinctrl-samsung.o

obj-$(CONFIG_PINCTRL_EXYNOS_ARM)	+= pinctrl-exynos-arm.o

obj-$(CONFIG_PINCTRL_S3C24XX)	+= pinctrl-s3c24xx.o

 SPDX-License-Identifier: GPL-2.0-only

# Aspeed pinctrl support

ccflags-y += $(call cc-option,-Woverride-init)

obj-$(CONFIG_PINCTRL_ASPEED_G4)	+= pinctrl-aspeed-g4.o

obj-$(CONFIG_PINCTRL_ASPEED_G6)	+= pinctrl-aspeed-g6.o

 SPDX-License-Identifier: GPL-2.0-only

# Cirrus Logic pinctrl drivers



pinctrl-madera-objs		:= pinctrl-madera-core.o

ifeq ($(CONFIG_PINCTRL_CS47L35),y)

pinctrl-madera-objs		+= pinctrl-cs47l35.o

endif

ifeq ($(CONFIG_PINCTRL_CS47L90),y)

pinctrl-madera-objs		+= pinctrl-cs47l90.o

endif



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PINCTRL_OWL)	+= pinctrl-owl.o

obj-$(CONFIG_PINCTRL_S500) 	+= pinctrl-s500.o

obj-$(CONFIG_PINCTRL_S700) 	+= pinctrl-s700.o

obj-$(CONFIG_PINCTRL_S900) 	+= pinctrl-s900.o

# SPDX-License-Identifier: GPL-2.0

# Freescale pin control drivers

obj-$(CONFIG_PINCTRL_IMX_SCU)	+= pinctrl-scu.o

obj-$(CONFIG_PINCTRL_IMX1)	+= pinctrl-imx1.o

obj-$(CONFIG_PINCTRL_IMX35)	+= pinctrl-imx35.o

obj-$(CONFIG_PINCTRL_IMX51)	+= pinctrl-imx51.o

obj-$(CONFIG_PINCTRL_IMX6Q)	+= pinctrl-imx6q.o

obj-$(CONFIG_PINCTRL_IMX6Q)	+= pinctrl-imx6dl.o

obj-$(CONFIG_PINCTRL_IMX6SLL)	+= pinctrl-imx6sll.o

obj-$(CONFIG_PINCTRL_IMX6UL)	+= pinctrl-imx6ul.o

obj-$(CONFIG_PINCTRL_IMX7ULP)	+= pinctrl-imx7ulp.o

obj-$(CONFIG_PINCTRL_IMX8MN)	+= pinctrl-imx8mn.o

obj-$(CONFIG_PINCTRL_IMX8MQ)	+= pinctrl-imx8mq.o

obj-$(CONFIG_PINCTRL_IMX8QXP)	+= pinctrl-imx8qxp.o

obj-$(CONFIG_PINCTRL_IMX8ULP)	+= pinctrl-imx8ulp.o

obj-$(CONFIG_PINCTRL_MXS)	+= pinctrl-mxs.o

obj-$(CONFIG_PINCTRL_IMX25)	+= pinctrl-imx25.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PINCTRL_BERLIN_BG2)	+= berlin-bg2.o

obj-$(CONFIG_PINCTRL_BERLIN_BG2Q)	+= berlin-bg2q.o

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_PINCTRL_UNIPHIER_PRO4)	+= pinctrl-uniphier-pro4.o

obj-$(CONFIG_PINCTRL_UNIPHIER_PRO5)	+= pinctrl-uniphier-pro5.o

obj-$(CONFIG_PINCTRL_UNIPHIER_LD6B)	+= pinctrl-uniphier-ld6b.o

obj-$(CONFIG_PINCTRL_UNIPHIER_LD20)	+= pinctrl-uniphier-ld20.o

obj-$(CONFIG_PINCTRL_UNIPHIER_NX1)	+= pinctrl-uniphier-nx1.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PINCTRL_SH_PFC)		+= core.o pinctrl.o

obj-$(CONFIG_PINCTRL_SH_PFC_GPIO)	+= gpio.o

obj-$(CONFIG_PINCTRL_PFC_EMEV2)		+= pfc-emev2.o

obj-$(CONFIG_PINCTRL_PFC_R8A7740)	+= pfc-r8a7740.o

obj-$(CONFIG_PINCTRL_PFC_R8A7743)	+= pfc-r8a7791.o

obj-$(CONFIG_PINCTRL_PFC_R8A7745)	+= pfc-r8a7794.o

obj-$(CONFIG_PINCTRL_PFC_R8A774B1)	+= pfc-r8a77965.o

obj-$(CONFIG_PINCTRL_PFC_R8A774E1)	+= pfc-r8a77951.o

obj-$(CONFIG_PINCTRL_PFC_R8A7779)	+= pfc-r8a7779.o

obj-$(CONFIG_PINCTRL_PFC_R8A7791)	+= pfc-r8a7791.o

obj-$(CONFIG_PINCTRL_PFC_R8A7793)	+= pfc-r8a7791.o

obj-$(CONFIG_PINCTRL_PFC_R8A77950)	+= pfc-r8a77950.o

obj-$(CONFIG_PINCTRL_PFC_R8A77965)	+= pfc-r8a77965.o

obj-$(CONFIG_PINCTRL_PFC_R8A77980)	+= pfc-r8a77980.o

obj-$(CONFIG_PINCTRL_PFC_R8A77995)	+= pfc-r8a77995.o

obj-$(CONFIG_PINCTRL_PFC_SH7203)	+= pfc-sh7203.o

obj-$(CONFIG_PINCTRL_PFC_SH7269)	+= pfc-sh7269.o

obj-$(CONFIG_PINCTRL_PFC_SH7720)	+= pfc-sh7720.o

obj-$(CONFIG_PINCTRL_PFC_SH7723)	+= pfc-sh7723.o

obj-$(CONFIG_PINCTRL_PFC_SH7734)	+= pfc-sh7734.o

obj-$(CONFIG_PINCTRL_PFC_SH7785)	+= pfc-sh7785.o



obj-$(CONFIG_PINCTRL_RZA2)	+= pinctrl-rza2.o

obj-$(CONFIG_PINCTRL_RZN1)	+= pinctrl-rzn1.o

CFLAGS_pfc-sh7203.o	+= -I$(srctree)/arch/sh/include/cpu-sh2a

CFLAGS_pfc-sh7269.o	+= -I$(srctree)/arch/sh/include/cpu-sh2a

CFLAGS_pfc-sh7720.o	+= -I$(srctree)/arch/sh/include/cpu-sh3

CFLAGS_pfc-sh7722.o	+= -I$(srctree)/arch/sh/include/cpu-sh4

CFLAGS_pfc-sh7723.o	+= -I$(srctree)/arch/sh/include/cpu-sh4

CFLAGS_pfc-sh7724.o	+= -I$(srctree)/arch/sh/include/cpu-sh4

CFLAGS_pfc-sh7734.o	+= -I$(srctree)/arch/sh/include/cpu-sh4

CFLAGS_pfc-sh7757.o	+= -I$(srctree)/arch/sh/include/cpu-sh4

CFLAGS_pfc-sh7785.o	+= -I$(srctree)/arch/sh/include/cpu-sh4

CFLAGS_pfc-sh7786.o	+= -I$(srctree)/arch/sh/include/cpu-sh4

CFLAGS_pfc-shx3.o	+= -I$(srctree)/arch/sh/include/cpu-sh4

endif

# SPDX-License-Identifier: GPL-2.0

 Nomadik family pin control drivers

obj-$(CONFIG_PINCTRL_ABX500)	+= pinctrl-abx500.o

obj-$(CONFIG_PINCTRL_AB8505)	+= pinctrl-ab8505.o

obj-$(CONFIG_PINCTRL_STN8815)	+= pinctrl-nomadik-stn8815.o

# SPDX-License-Identifier: GPL-2.0

 Core

obj-$(CONFIG_PINCTRL_STM32) += pinctrl-stm32.o

 SoC Drivers

obj-$(CONFIG_PINCTRL_STM32F429)	+= pinctrl-stm32f429.o

obj-$(CONFIG_PINCTRL_STM32F746)	+= pinctrl-stm32f746.o

obj-$(CONFIG_PINCTRL_STM32H743)	+= pinctrl-stm32h743.o

obj-$(CONFIG_PINCTRL_STM32MP157) += pinctrl-stm32mp157.o

# SPDX-License-Identifier: GPL-2.0

# Intel pin control drivers

obj-$(CONFIG_PINCTRL_CHERRYVIEW)	+= pinctrl-cherryview.o

obj-$(CONFIG_PINCTRL_LYNXPOINT)		+= pinctrl-lynxpoint.o

obj-$(CONFIG_PINCTRL_CANNONLAKE)	+= pinctrl-cannonlake.o

obj-$(CONFIG_PINCTRL_CEDARFORK)		+= pinctrl-cedarfork.o

obj-$(CONFIG_PINCTRL_DENVERTON)		+= pinctrl-denverton.o

obj-$(CONFIG_PINCTRL_EMMITSBURG)	+= pinctrl-emmitsburg.o

obj-$(CONFIG_PINCTRL_JASPERLAKE)	+= pinctrl-jasperlake.o

obj-$(CONFIG_PINCTRL_LAKEFIELD)		+= pinctrl-lakefield.o

obj-$(CONFIG_PINCTRL_LEWISBURG)		+= pinctrl-lewisburg.o

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_PINCTRL_MT7621)   += pinctrl-mt7621.o

obj-$(CONFIG_PINCTRL_RT305X)   += pinctrl-rt305x.o

# SPDX-License-Identifier: GPL-2.0

 Broadcom pinctrl support



obj-$(CONFIG_PINCTRL_BCM281XX)		+= pinctrl-bcm281xx.o

obj-$(CONFIG_PINCTRL_BCM2835)		+= pinctrl-bcm2835.o

obj-$(CONFIG_PINCTRL_BCM63XX)		+= pinctrl-bcm63xx.o

obj-$(CONFIG_PINCTRL_BCM6318)		+= pinctrl-bcm6318.o

obj-$(CONFIG_PINCTRL_BCM6328)		+= pinctrl-bcm6328.o

obj-$(CONFIG_PINCTRL_BCM6358)		+= pinctrl-bcm6358.o

obj-$(CONFIG_PINCTRL_BCM6362)		+= pinctrl-bcm6362.o

obj-$(CONFIG_PINCTRL_BCM6368)		+= pinctrl-bcm6368.o

obj-$(CONFIG_PINCTRL_BCM63268)		+= pinctrl-bcm63268.o

obj-$(CONFIG_PINCTRL_CYGNUS_MUX)	+= pinctrl-cygnus-mux.o

obj-$(CONFIG_PINCTRL_NS)		+= pinctrl-ns.o

obj-$(CONFIG_PINCTRL_NSP_GPIO)		+= pinctrl-nsp-gpio.o

obj-$(CONFIG_PINCTRL_NS2_MUX)		+= pinctrl-ns2-mux.o

obj-$(CONFIG_PINCTRL_NSP_MUX)		+= pinctrl-nsp-mux.o

# SPDX-License-Identifier: GPL-2.0

 Core

obj-$(CONFIG_PINCTRL_MTK_MOORE) += pinctrl-moore.o



# SoC Drivers

obj-$(CONFIG_PINCTRL_MT2712)	+= pinctrl-mt2712.o

obj-$(CONFIG_PINCTRL_MT8127)	+= pinctrl-mt8127.o

obj-$(CONFIG_PINCTRL_MT6779)	+= pinctrl-mt6779.o

obj-$(CONFIG_PINCTRL_MT7622)	+= pinctrl-mt7622.o

obj-$(CONFIG_PINCTRL_MT7629)	+= pinctrl-mt7629.o

obj-$(CONFIG_PINCTRL_MT8167)	+= pinctrl-mt8167.o

obj-$(CONFIG_PINCTRL_MT8183)	+= pinctrl-mt8183.o

obj-$(CONFIG_PINCTRL_MT8365)	+= pinctrl-mt8365.o

obj-$(CONFIG_PINCTRL_MT6397)	+= pinctrl-mt6397.o

# SPDX-License-Identifier: GPL-2.0

 Core

obj-y					+= pinctrl-sunxi.o

 SoC Drivers

obj-$(CONFIG_PINCTRL_SUNIV_F1C100S)	+= pinctrl-suniv-f1c100s.o

obj-$(CONFIG_PINCTRL_SUN4I_A10)		+= pinctrl-sun4i-a10.o

obj-$(CONFIG_PINCTRL_SUN5I)		+= pinctrl-sun5i.o

obj-$(CONFIG_PINCTRL_SUN6I_A31)		+= pinctrl-sun6i-a31.o

obj-$(CONFIG_PINCTRL_SUN8I_A23_R)	+= pinctrl-sun8i-a23-r.o

obj-$(CONFIG_PINCTRL_SUN8I_A33)		+= pinctrl-sun8i-a33.o

obj-$(CONFIG_PINCTRL_SUN50I_A64_R)	+= pinctrl-sun50i-a64-r.o

obj-$(CONFIG_PINCTRL_SUN50I_A100_R)	+= pinctrl-sun50i-a100-r.o

obj-$(CONFIG_PINCTRL_SUN8I_A83T_R)	+= pinctrl-sun8i-a83t-r.o

obj-$(CONFIG_PINCTRL_SUN8I_H3)		+= pinctrl-sun8i-h3.o

obj-$(CONFIG_PINCTRL_SUN50I_H6_R)	+= pinctrl-sun50i-h6-r.o

obj-$(CONFIG_PINCTRL_SUN50I_H616_R)	+= pinctrl-sun50i-h616-r.o

obj-$(CONFIG_PINCTRL_SUN9I_A80)		+= pinctrl-sun9i-a80.o

# SPDX-License-Identifier: GPL-2.0

 SPEAr pinmux support



obj-$(CONFIG_PINCTRL_SPEAR3XX)	+= pinctrl-spear3xx.o

obj-$(CONFIG_PINCTRL_SPEAR310)	+= pinctrl-spear310.o

obj-$(CONFIG_PINCTRL_SPEAR1310)	+= pinctrl-spear1310.o

# SPDX-License-Identifier: GPL-2.0

# VIA/Wondermedia pinctrl support

obj-$(CONFIG_PINCTRL_WMT)	+= pinctrl-wmt.o

obj-$(CONFIG_PINCTRL_WM8505)	+= pinctrl-wm8505.o

obj-$(CONFIG_PINCTRL_WM8750)	+= pinctrl-wm8750.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PINCTRL_TEGRA)		+= pinctrl-tegra.o

obj-$(CONFIG_PINCTRL_TEGRA20)		+= pinctrl-tegra20.o

obj-$(CONFIG_PINCTRL_TEGRA30)		+= pinctrl-tegra30.o

obj-$(CONFIG_PINCTRL_TEGRA114)		+= pinctrl-tegra114.o

obj-$(CONFIG_PINCTRL_TEGRA124)		+= pinctrl-tegra124.o

obj-$(CONFIG_PINCTRL_TEGRA210)		+= pinctrl-tegra210.o

obj-$(CONFIG_PINCTRL_TEGRA194)		+= pinctrl-tegra194.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PINCTRL_TI_IODELAY)	+= pinctrl-ti-iodelay.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PINCTRL_TMPV7700)	+= pinctrl-tmpv7700.o

# SPDX-License-Identifier: GPL-2.0

# Nuvoton pinctrl support

obj-$(CONFIG_PINCTRL_NPCM7XX)	+= pinctrl-npcm7xx.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PINCTRL_SPRD_SC9860)	+= pinctrl-sprd-sc9860.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for PTP 1588 clock support.





ptp-y					:= ptp_clock.o ptp_chardev.o ptp_sysfs.o ptp_vclock.o

ptp_kvm-$(CONFIG_X86)			:= ptp_kvm_x86.o ptp_kvm_common.o

obj-$(CONFIG_PTP_1588_CLOCK)		+= ptp.o

obj-$(CONFIG_PTP_1588_CLOCK_DTE)	+= ptp_dte.o

obj-$(CONFIG_PTP_1588_CLOCK_INES)	+= ptp_ines.o

obj-$(CONFIG_PTP_1588_CLOCK_PCH)	+= ptp_pch.o

obj-$(CONFIG_PTP_1588_CLOCK_KVM)	+= ptp_kvm.o

obj-$(CONFIG_PTP_1588_CLOCK_QORIQ)	+= ptp-qoriq.o

ptp-qoriq-y				+= ptp_qoriq.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for nvmem drivers.

#

obj-$(CONFIG_NVMEM)		+= nvmem_core.o



# Devices

obj-$(CONFIG_NVMEM_IMX_IIM)	+= nvmem-imx-iim.o

obj-$(CONFIG_NVMEM_IMX_OCOTP)	+= nvmem-imx-ocotp.o

nvmem-imx-ocotp-y		:= imx-ocotp.o

obj-$(CONFIG_NVMEM_LPC18XX_EEPROM)	+= nvmem_lpc18xx_eeprom.o

obj-$(CONFIG_NVMEM_LPC18XX_OTP)	+= nvmem_lpc18xx_otp.o

nvmem_lpc18xx_otp-y		:= lpc18xx_otp.o

obj-$(CONFIG_NVMEM_NINTENDO_OTP)	+= nvmem-nintendo-otp.o

nvmem-nintendo-otp-y		:= nintendo-otp.o

obj-$(CONFIG_MTK_EFUSE)		+= nvmem_mtk-efuse.o

nvmem_mtk-efuse-y		:= mtk-efuse.o

obj-$(CONFIG_QCOM_QFPROM)	+= nvmem_qfprom.o

obj-$(CONFIG_ROCKCHIP_EFUSE)	+= nvmem_rockchip_efuse.o

nvmem_rockchip_efuse-y		:= rockchip-efuse.o

obj-$(CONFIG_NVMEM_SUNXI_SID)	+= nvmem_sunxi_sid.o

obj-$(CONFIG_NVMEM_STM32_ROMEM) += nvmem_stm32_romem.o

nvmem_sunxi_sid-y		:= sunxi_sid.o

obj-$(CONFIG_NVMEM_VF610_OCOTP)	+= nvmem-vf610-ocotp.o

nvmem-vf610-ocotp-y		:= vf610-ocotp.o

obj-$(CONFIG_MESON_MX_EFUSE)	+= nvmem_meson_mx_efuse.o

nvmem_meson_mx_efuse-y		:= meson-mx-efuse.o

obj-$(CONFIG_RAVE_SP_EEPROM)	+= nvmem-rave-sp-eeprom.o

nvmem-rave-sp-eeprom-y		:= rave-sp-eeprom.o

obj-$(CONFIG_NVMEM_ZYNQMP)	+= nvmem_zynqmp_nvmem.o

nvmem_zynqmp_nvmem-y		:= zynqmp_nvmem.o

nvmem-rmem-y			:= rmem.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_IFCVF)    += ifcvf/

obj-$(CONFIG_ALIBABA_ENI_VDPA) += alibaba/

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_VDPA_SIM_NET) += vdpa_sim_net.o

# SPDX-License-Identifier: GPL-2.0

vduse-y := vduse_dev.o iova_domain.o

obj-$(CONFIG_VDPA_USER) += vduse.o

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0

ifcvf-$(CONFIG_IFCVF) += ifcvf_main.o ifcvf_base.o



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PS3_VUART) += ps3-vuart.o

obj-$(CONFIG_PS3_SYS_MANAGER) += ps3-sys-manager.o

obj-$(CONFIG_PS3_LPM) += ps3-lpm.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_ND_BTT) += nd_btt.o

obj-$(CONFIG_X86_PMEM_LEGACY) += nd_e820.o

obj-$(CONFIG_VIRTIO_PMEM) += virtio_pmem.o nd_virtio.o



nd_btt-y := btt.o



nd_e820-y := e820.o

libnvdimm-y += bus.o

libnvdimm-y += region_devs.o

libnvdimm-y += region.o

libnvdimm-y += namespace_devs.o

libnvdimm-$(CONFIG_NVDIMM_PFN) += pfn_devs.o



TEST_SRC := $(TOOLS)/testing/nvdimm/test

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_INFINIBAND)		+= core/

obj-$(CONFIG_INFINIBAND)		+= sw/

# SPDX-License-Identifier: GPL-2.0

infiniband-$(CONFIG_INFINIBAND_ADDR_TRANS)	:= rdma_cm.o

user_access-$(CONFIG_INFINIBAND_ADDR_TRANS)	:= rdma_ucm.o

obj-$(CONFIG_INFINIBAND) +=		ib_core.o ib_cm.o iw_cm.o \

obj-$(CONFIG_INFINIBAND_USER_MAD) +=	ib_umad.o



ib_core-y :=			packer.o ud_header.o verbs.o cq.o rw.o sysfs.o \

				multicast.o mad.o smi.o agent.o mad_rmpp.o \



ib_core-$(CONFIG_SECURITY_INFINIBAND) += security.o

ib_core-$(CONFIG_CGROUP_RDMA) += cgroup.o

ib_cm-y :=			cm.o cm_trace.o

iw_cm-y :=			iwcm.o iwpm_util.o iwpm_msg.o

rdma_cm-y :=			cma.o cma_trace.o

rdma_cm-$(CONFIG_INFINIBAND_ADDR_TRANS_CONFIGFS) += cma_configfs.o

rdma_ucm-y :=			ucma.o



ib_uverbs-y :=			uverbs_main.o uverbs_cmd.o uverbs_marshall.o \

				rdma_core.o uverbs_std_types.o uverbs_ioctl.o \

				uverbs_std_types_cq.o \

				uverbs_std_types_srq.o \

				uverbs_std_types_wq.o \

				uverbs_std_types_qp.o

ib_uverbs-$(CONFIG_INFINIBAND_USER_MEM) += umem.o umem_dmabuf.o

ib_uverbs-$(CONFIG_INFINIBAND_ON_DEMAND_PAGING) += umem_odp.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_RDMA_RXE)			+= rxe/



	siw_mem.o \

	siw_qp.o \

	siw_qp_rx.o \

# SPDX-License-Identifier: GPL-2.0



rdma_rxe-y := \

	rxe_req.o \

	rxe_resp.o \

	rxe_recv.o \

	rxe_pool.o \

	rxe_verbs.o \

	rxe_av.o \

	rxe_mcast.o \

	rxe_task.o \

	rxe_sysfs.o \

 SPDX-License-Identifier: GPL-2.0-only



 rdmavt driver







 Called from the kernel module build system.







CFLAGS_trace.o = -I$(src)

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_INFINIBAND_IPOIB)		+= ipoib/

obj-$(CONFIG_INFINIBAND_SRP)		+= srp/

obj-$(CONFIG_INFINIBAND_SRPT)		+= srpt/

obj-$(CONFIG_INFINIBAND_ISER)		+= iser/

obj-$(CONFIG_INFINIBAND_ISERT)		+= isert/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_INFINIBAND_ISER)	+= ib_iser.o

ib_iser-y			:= iser_verbs.o iser_initiator.o iser_memory.o \

				   iscsi_iser.o

# SPDX-License-Identifier: GPL-2.0



						   ipoib_multicast.o \

						   ipoib_ethtool.o \



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_INFINIBAND_SRPT)	+= ib_srpt.o

 SPDX-License-Identifier: GPL-2.0-or-later



rtrs-client-y := rtrs-clt.o \

		  rtrs-clt-sysfs.o

		  rtrs-srv-stats.o \



rtrs-core-y := rtrs.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_INFINIBAND_ISERT)	+= ib_isert.o

 SPDX-License-Identifier: GPL-2.0-only

 Makefile - Cornelis Omni-Path Express Virtual Network Controller driver

 Copyright(c) 2017, Intel Corporation.

 Copyright(c) 2021, Cornelis Networks.





opa_vnic-y := opa_vnic_netdev.o opa_vnic_encap.o opa_vnic_ethtool.o \

              opa_vnic_vema.o opa_vnic_vema_iface.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_INFINIBAND_MTHCA)		+= mthca/

obj-$(CONFIG_INFINIBAND_QIB)		+= qib/

obj-$(CONFIG_INFINIBAND_CXGB4)		+= cxgb4/

obj-$(CONFIG_INFINIBAND_EFA)		+= efa/

obj-$(CONFIG_INFINIBAND_IRDMA)		+= irdma/

obj-$(CONFIG_MLX4_INFINIBAND)		+= mlx4/

obj-$(CONFIG_MLX5_INFINIBAND)		+= mlx5/

obj-$(CONFIG_INFINIBAND_OCRDMA)		+= ocrdma/

obj-$(CONFIG_INFINIBAND_VMWARE_PVRDMA)	+= vmw_pvrdma/

obj-$(CONFIG_INFINIBAND_USNIC)		+= usnic/

obj-$(CONFIG_INFINIBAND_HFI1)		+= hfi1/

obj-$(CONFIG_INFINIBAND_HNS)		+= hns/

obj-$(CONFIG_INFINIBAND_QEDR)		+= qedr/

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Hisilicon RoCE drivers.

#



hns-roce-objs := hns_roce_main.o hns_roce_cmd.o hns_roce_pd.o \

	hns_roce_ah.o hns_roce_hem.o hns_roce_mr.o hns_roce_qp.o \



ifdef CONFIG_INFINIBAND_HNS_HIP06

obj-$(CONFIG_INFINIBAND_HNS) += hns-roce-hw-v1.o

endif

obj-$(CONFIG_INFINIBAND_HNS) += hns-roce-hw-v2.o

endif

# SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019, Intel Corporation.



#

# Makefile for the Intel(R) Ethernet Connection RDMA Linux Driver

#



irdma-objs := cm.o        \

              ctrl.o      \

              hmc.o       \

              hw.o        \

              i40iw_hw.o  \

              i40iw_if.o  \

              icrdma_hw.o \

              main.o      \

              pble.o      \

              puda.o      \

              trace.o     \

              uda.o       \

              uk.o        \

              utils.o     \

              verbs.o     \

              ws.o        \

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MLX4_INFINIBAND)	+= mlx4_ib.o

mlx4_ib-y :=	ah.o cq.o doorbell.o mad.o main.o mr.o qp.o srq.o mcg.o cm.o alias_GUID.o sysfs.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_INFINIBAND_VMWARE_PVRDMA) += vmw_pvrdma.o

vmw_pvrdma-y := pvrdma_cmd.o pvrdma_cq.o pvrdma_doorbell.o pvrdma_main.o pvrdma_misc.o pvrdma_mr.o pvrdma_qp.o pvrdma_srq.o pvrdma_verbs.o

 SPDX-License-Identifier: GPL-2.0-only

ccflags-y := -I $(srctree)/drivers/net/ethernet/emulex/benet



ocrdma-y :=	ocrdma_main.o ocrdma_verbs.o ocrdma_hw.o ocrdma_ah.o ocrdma_stats.o

# SPDX-License-Identifier: GPL-2.0





usnic_verbs-y=\

usnic_fwd.o \

usnic_transport.o \

usnic_uiom_interval_tree.o \

usnic_ib_sysfs.o \

 SPDX-License-Identifier: GPL-2.0-only





	       restrack.o

# SPDX-License-Identifier: GPL-2.0

#

 HFI driver







 Called from the kernel module build system.





hfi1-y := \

	affinity.o \

	aspm.o \

	chip.o \

	device.o \

	driver.o \

	efivar.o \

	exp_rcv.o \

	file_ops.o \

	firmware.o \

	init.o \

	intr.o \

	iowait.o \

	ipoib_main.o \

	ipoib_rx.o \

	ipoib_tx.o \

	netdev_rx.o \

	opfn.o \

	pcie.o \

	ruc.o \

	sdma.o \

	trace.o \

	uc.o \

	ud.o \

	user_exp_rcv.o \

	user_pages.o \

	verbs.o \

	vnic_main.o \



ifdef CONFIG_DEBUG_FS

hfi1-y += debugfs.o



CFLAGS_trace.o = -I$(src)

# SPDX-License-Identifier: GPL-2.0



		mthca_allocator.o mthca_eq.o mthca_pd.o mthca_cq.o \

		mthca_provider.o mthca_memfree.o mthca_uar.o mthca_srq.o \

		mthca_catas.o

# SPDX-License-Identifier: GPL-2.0



	qib_file_ops.o qib_fs.o qib_init.o qib_intr.o \

	qib_qp.o qib_qsfp.o qib_rc.o qib_ruc.o qib_sdma.o \



# 6120 has no fallback if no MSI interrupts, others can do INTx

ib_qib-$(CONFIG_PCI_MSI) += qib_iba6120.o

ib_qib-$(CONFIG_X86_64) += qib_wc_x86_64.o

ib_qib-$(CONFIG_DEBUG_FS) += qib_debugfs.o

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

bnxt_re-y := main.o ib_verbs.o \

	     qplib_sp.o qplib_fp.o  hw_counters.o

# SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause

 Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All rights reserved.



 Makefile for Amazon Elastic Fabric Adapter (EFA) device driver.





obj-$(CONFIG_INFINIBAND_EFA) += efa.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MLX5_INFINIBAND) += mlx5_ib.o

	     cong.o \

	     cq.o \

	     doorbell.o \

	     gsi.o \

	     ib_virt.o \

	     mad.o \

	     mr.o \

	     restrack.o \

	     srq.o \

	     srq_cmd.o \



mlx5_ib-$(CONFIG_MLX5_ESWITCH) += ib_rep.o

					    qos.o \

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for kernel SLIMbus framework.



obj-$(CONFIG_SLIMBUS)			+= slimbus.o

slimbus-y				:= core.o messaging.o sched.o stream.o

#Controllers

obj-$(CONFIG_SLIM_QCOM_CTRL)		+= slim-qcom-ctrl.o

slim-qcom-ctrl-y			:= qcom-ctrl.o

obj-$(CONFIG_SLIM_QCOM_NGD_CTRL)	+= slim-qcom-ngd-ctrl.o

slim-qcom-ngd-ctrl-y			:= qcom-ngd-ctrl.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for most of the non-PCI devices in PA-RISC machines





 I/O SAPIC is also on IA64 platforms.

# The two could be merged into a common source some day.

obj-$(CONFIG_IOSAPIC)		+= iosapic.o

obj-$(CONFIG_IOMMU_SBA)		+= sba_iommu.o

obj-$(CONFIG_PCI_LBA)		+= lba_pci.o



obj-$(CONFIG_GSC)		+= gsc.o



obj-$(CONFIG_SUPERIO)		+= superio.o

obj-$(CONFIG_PDC_STABLE)	+= pdc_stable.o

obj-y				+= power.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PM_DEVFREQ)	+= devfreq.o

obj-$(CONFIG_PM_DEVFREQ_EVENT)	+= devfreq-event.o



# DEVFREQ Drivers

obj-$(CONFIG_ARM_IMX_BUS_DEVFREQ)	+= imx-bus.o

obj-$(CONFIG_ARM_RK3399_DMC_DEVFREQ)	+= rk3399_dmc.o

obj-$(CONFIG_ARM_TEGRA_DEVFREQ)		+= tegra30-devfreq.o

 DEVFREQ Event Drivers

 SPDX-License-Identifier: GPL-2.0-only

# Exynos DEVFREQ Event Drivers

obj-$(CONFIG_DEVFREQ_EVENT_EXYNOS_NOCP) += exynos-nocp.o

obj-$(CONFIG_DEVFREQ_EVENT_ROCKCHIP_DFI) += rockchip-dfi.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the industrial I/O core.

#

industrialio-$(CONFIG_IIO_BUFFER) += industrialio-buffer.o



obj-$(CONFIG_IIO_CONFIGFS) += industrialio-configfs.o

obj-$(CONFIG_IIO_SW_DEVICE) += industrialio-sw-device.o

obj-$(CONFIG_IIO_SW_TRIGGER) += industrialio-sw-trigger.o

obj-$(CONFIG_IIO_TRIGGERED_EVENT) += industrialio-triggered-event.o

obj-y += amplifiers/

obj-y += chemical/

obj-y += gyro/

obj-y += frequency/

obj-y += humidity/

obj-y += imu/

obj-y += light/

obj-y += position/

obj-y += potentiometer/

obj-y += pressure/

obj-y += proximity/

obj-y += test/

obj-y += trigger/

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the IIO common modules.

 Common modules contains modules, which can be shared among multiple

# IIO modules. For example if the trigger processing is common for

 multiple IIO modules then this can be moved to a common module

# instead of duplicating in each module.

#

 When adding new entries keep the list in alphabetical order

obj-y += ms_sensors/

obj-y += st_sensors/

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for SSP sensor drivers and commons.

#

sensorhub-objs				:= ssp_dev.o ssp_spi.o

obj-$(CONFIG_IIO_SSP_SENSORHUB)		+= sensorhub.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Measurement Specialties sensor common modules.





# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the STMicroelectronics sensor common modules.





obj-$(CONFIG_IIO_ST_SENSORS_SPI) += st_sensors_spi.o

obj-$(CONFIG_IIO_ST_SENSORS_CORE) += st_sensors.o

st_sensors-y := st_sensors_core.o

st_sensors-$(CONFIG_IIO_TRIGGER) += st_sensors_trigger.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Hid sensor common modules.





obj-$(CONFIG_HID_SENSOR_IIO_TRIGGER) += hid-sensor-trigger.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the IIO over SCMI

#

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for sensors seen through the ChromeOS EC sensor hub.





obj-$(CONFIG_IIO_CROS_EC_SENSORS) += cros_ec_sensors.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for industrial I/O capacitance to digital converter (CDC) drivers





# SPDX-License-Identifier: GPL-2.0

#

# Makefile for industrial I/O potentiometer drivers

#

 When adding new entries keep the list in alphabetical order

obj-$(CONFIG_AD5110) += ad5110.o

obj-$(CONFIG_DS1803) += ds1803.o

obj-$(CONFIG_MAX5481) += max5481.o

obj-$(CONFIG_MCP4018) += mcp4018.o

obj-$(CONFIG_MCP4531) += mcp4531.o

obj-$(CONFIG_TPL0102) += tpl0102.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for IIO humidity sensor drivers





obj-$(CONFIG_DHT11) += dht11.o

obj-$(CONFIG_HDC2010) += hdc2010.o



hts221-y := hts221_core.o \

obj-$(CONFIG_HTS221) += hts221.o

obj-$(CONFIG_HTS221_SPI) += hts221_spi.o

obj-$(CONFIG_HTU21) += htu21.o

obj-$(CONFIG_SI7020) += si7020.o

ccflags-y += -I$(srctree)/drivers/iio/common/hid-sensors

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for industrial I/O gyroscope sensor drivers





# When adding new entries keep the list in alphabetical order

obj-$(CONFIG_ADIS16130) += adis16130.o

obj-$(CONFIG_ADIS16260) += adis16260.o

obj-$(CONFIG_ADXRS450) += adxrs450.o

obj-$(CONFIG_BMG160) += bmg160_core.o

obj-$(CONFIG_BMG160_SPI) += bmg160_spi.o

obj-$(CONFIG_FXAS21002C) += fxas21002c_core.o

obj-$(CONFIG_FXAS21002C_SPI) += fxas21002c_spi.o

obj-$(CONFIG_HID_SENSOR_GYRO_3D) += hid-sensor-gyro-3d.o

 Currently this is rolled into one module, split it if

# we ever create a separate SPI interface for MPU-3050

mpu3050-objs := mpu3050-core.o mpu3050-i2c.o

itg3200-$(CONFIG_IIO_BUFFER) += itg3200_buffer.o





st_gyro-$(CONFIG_IIO_BUFFER) += st_gyro_buffer.o

obj-$(CONFIG_IIO_ST_GYRO_I2C_3AXIS) += st_gyro_i2c.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for industrial I/O potentiostat drivers

#

 When adding new entries keep the list in alphabetical order

obj-$(CONFIG_LMP91000) += lmp91000.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile iio/amplifiers





# When adding new entries keep the list in alphabetical order

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for industrial I/O Inclinometer sensor drivers





# When adding new entries keep the list in alphabetical order

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the industrial I/O unit tests.

#

# Keep in alphabetical order

CFLAGS_iio-test-format.o += $(DISABLE_STRUCTLEAK_PLUGIN)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for industrial I/O Magnetometer sensor drivers

#

 When adding new entries keep the list in alphabetical order

obj-$(CONFIG_AK8974)	+= ak8974.o

obj-$(CONFIG_BMC150_MAGN) += bmc150_magn.o

obj-$(CONFIG_BMC150_MAGN_SPI) += bmc150_magn_spi.o

obj-$(CONFIG_MAG3110)	+= mag3110.o

obj-$(CONFIG_MMC35240)	+= mmc35240.o

obj-$(CONFIG_IIO_ST_MAGN_3AXIS) += st_magn.o

st_magn-y := st_magn_core.o



obj-$(CONFIG_IIO_ST_MAGN_SPI_3AXIS) += st_magn_spi.o

obj-$(CONFIG_SENSORS_HMC5843)		+= hmc5843_core.o

obj-$(CONFIG_SENSORS_HMC5843_SPI)	+= hmc5843_spi.o

obj-$(CONFIG_SENSORS_RM3100)		+= rm3100-core.o

obj-$(CONFIG_SENSORS_RM3100_SPI)	+= rm3100-spi.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for IIO Health sensors





# When adding new entries keep the list in alphabetical order

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for industrial I/O multiplexer drivers





# When adding new entries keep the list in alphabetical order

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for IIO Light sensors





# When adding new entries keep the list in alphabetical order

obj-$(CONFIG_ACPI_ALS)		+= acpi-als.o

obj-$(CONFIG_ADJD_S311)		+= adjd_s311.o

obj-$(CONFIG_ADUX1020)		+= adux1020.o

obj-$(CONFIG_AL3010)		+= al3010.o

obj-$(CONFIG_AL3320A)		+= al3320a.o

obj-$(CONFIG_APDS9300)		+= apds9300.o

obj-$(CONFIG_APDS9960)		+= apds9960.o

obj-$(CONFIG_AS73211)		+= as73211.o

obj-$(CONFIG_BH1750)		+= bh1750.o

obj-$(CONFIG_BH1780)		+= bh1780.o

obj-$(CONFIG_CM32181)		+= cm32181.o

obj-$(CONFIG_CM3232)		+= cm3232.o

obj-$(CONFIG_CM3323)		+= cm3323.o

obj-$(CONFIG_CM3605)		+= cm3605.o

obj-$(CONFIG_CM36651)		+= cm36651.o

obj-$(CONFIG_GP2AP020A00F)	+= gp2ap020a00f.o

obj-$(CONFIG_HID_SENSOR_PROX)	+= hid-sensor-prox.o

obj-$(CONFIG_SENSORS_ISL29018)	+= isl29018.o

obj-$(CONFIG_SENSORS_LM3533)	+= lm3533-als.o

obj-$(CONFIG_LTR501)		+= ltr501.o

obj-$(CONFIG_LV0104CS)		+= lv0104cs.o

obj-$(CONFIG_MAX44000)		+= max44000.o

obj-$(CONFIG_MAX44009)		+= max44009.o

obj-$(CONFIG_NOA1305)		+= noa1305.o

obj-$(CONFIG_OPT3001)		+= opt3001.o

obj-$(CONFIG_SENSORS_TSL2563)	+= tsl2563.o

obj-$(CONFIG_SI1133)		+= si1133.o

obj-$(CONFIG_SI1145)		+= si1145.o

obj-$(CONFIG_STK3310)          += stk3310.o

obj-$(CONFIG_ST_UVIS25_I2C)	+= st_uvis25_i2c.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the industrial I/O buffer implementations





# When adding new entries keep the list in alphabetical order

obj-$(CONFIG_IIO_BUFFER_CB) += industrialio-buffer-cb.o

obj-$(CONFIG_IIO_BUFFER_DMA) += industrialio-buffer-dma.o

obj-$(CONFIG_IIO_BUFFER_DMAENGINE) += industrialio-buffer-dmaengine.o

obj-$(CONFIG_IIO_KFIFO_BUF) += kfifo_buf.o



# Makefile for IIO linear and angular position sensors

#

 When adding new entries keep the list in alphabetical order



obj-$(CONFIG_IQS624_POS)	+= iqs624-pos.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for IIO chemical sensors





# When adding new entries keep the list in alphabetical order

obj-$(CONFIG_ATLAS_PH_SENSOR)	+= atlas-sensor.o

obj-$(CONFIG_BME680_I2C) += bme680_i2c.o

obj-$(CONFIG_IAQCORE)		+= ams-iaq-core.o

obj-$(CONFIG_SCD30_CORE) += scd30_core.o

obj-$(CONFIG_SCD30_SERIAL) += scd30_serial.o

obj-$(CONFIG_SENSIRION_SGP30)	+= sgp30.o

obj-$(CONFIG_SPS30) += sps30.o

obj-$(CONFIG_SPS30_SERIAL) += sps30_serial.o

obj-$(CONFIG_VZ89X)		+= vz89x.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for industrial I/O DAC drivers

#

 When adding new entries keep the list in alphabetical order

obj-$(CONFIG_AD5360) += ad5360.o

obj-$(CONFIG_AD5421) += ad5421.o

obj-$(CONFIG_AD5064) += ad5064.o

obj-$(CONFIG_AD5446) += ad5446.o

obj-$(CONFIG_AD5592R_BASE) += ad5592r-base.o

obj-$(CONFIG_AD5593R) += ad5593r.o

obj-$(CONFIG_AD5755) += ad5758.o

obj-$(CONFIG_AD5764) += ad5764.o

obj-$(CONFIG_AD5770R) += ad5770r.o

obj-$(CONFIG_AD5686) += ad5686.o

obj-$(CONFIG_AD5696_I2C) += ad5696-i2c.o

obj-$(CONFIG_AD8801) += ad8801.o

obj-$(CONFIG_DPOT_DAC) += dpot-dac.o

obj-$(CONFIG_LPC18XX_DAC) += lpc18xx_dac.o

obj-$(CONFIG_LTC2632) += ltc2632.o

obj-$(CONFIG_MAX517) += max517.o

obj-$(CONFIG_MCP4725) += mcp4725.o

obj-$(CONFIG_STM32_DAC_CORE) += stm32-dac-core.o

obj-$(CONFIG_TI_DAC082S085) += ti-dac082s085.o

obj-$(CONFIG_TI_DAC7311) += ti-dac7311.o

obj-$(CONFIG_VF610_DAC) += vf610_dac.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for industrial I/O accelerometer drivers

#

 When adding new entries keep the list in alphabetical order

obj-$(CONFIG_ADIS16201) += adis16201.o

obj-$(CONFIG_ADXL313_I2C) += adxl313_i2c.o

obj-$(CONFIG_ADXL345_I2C) += adxl345_i2c.o

obj-$(CONFIG_ADXL355_I2C) += adxl355_i2c.o

obj-$(CONFIG_ADXL372) += adxl372.o

obj-$(CONFIG_ADXL372_SPI) += adxl372_spi.o

obj-$(CONFIG_BMA220) += bma220_spi.o

obj-$(CONFIG_BMA400) += bma400_core.o

obj-$(CONFIG_BMA400_SPI) += bma400_spi.o

obj-$(CONFIG_BMC150_ACCEL) += bmc150-accel-core.o

obj-$(CONFIG_BMC150_ACCEL_SPI) += bmc150-accel-spi.o

obj-$(CONFIG_BMI088_ACCEL) += bmi088-accel-core.o

obj-$(CONFIG_DA280)	+= da280.o

obj-$(CONFIG_DMARD06)	+= dmard06.o

obj-$(CONFIG_DMARD10)	+= dmard10.o

obj-$(CONFIG_FXLS8962AF)	+= fxls8962af-core.o

obj-$(CONFIG_FXLS8962AF_SPI)	+= fxls8962af-spi.o

obj-$(CONFIG_KXSD9)	+= kxsd9.o

obj-$(CONFIG_KXSD9_I2C)	+= kxsd9-i2c.o



obj-$(CONFIG_MMA7455_I2C)	+= mma7455_i2c.o









obj-$(CONFIG_MXC4005)		+= mxc4005.o

obj-$(CONFIG_MXC6255)		+= mxc6255.o



obj-$(CONFIG_STK8312)		+= stk8312.o

obj-$(CONFIG_STK8BA50)		+= stk8ba50.o

obj-$(CONFIG_IIO_CROS_EC_ACCEL_LEGACY) += cros_ec_accel_legacy.o



st_accel-$(CONFIG_IIO_BUFFER) += st_accel_buffer.o

obj-$(CONFIG_IIO_ST_ACCEL_I2C_3AXIS) += st_accel_i2c.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for industrial I/O pressure drivers





# When adding new entries keep the list in alphabetical order

obj-$(CONFIG_BMP280) += bmp280.o

obj-$(CONFIG_BMP280_I2C) += bmp280-i2c.o

obj-$(CONFIG_DLHL60D) += dlhl60d.o

obj-$(CONFIG_IIO_CROS_EC_BARO) += cros_ec_baro.o

obj-$(CONFIG_HP03) += hp03.o

obj-$(CONFIG_MPL115) += mpl115.o

obj-$(CONFIG_MPL115_SPI) += mpl115_spi.o

obj-$(CONFIG_MS5611_I2C) += ms5611_i2c.o

obj-$(CONFIG_MS5637) += ms5637.o

obj-$(CONFIG_IIO_ST_PRESS) += st_pressure.o

st_pressure-y := st_pressure_core.o

obj-$(CONFIG_T5403) += t5403.o

obj-$(CONFIG_ZPA2326) += zpa2326.o

obj-$(CONFIG_ZPA2326_SPI) += zpa2326_spi.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for IIO proximity sensors





# When adding new entries keep the list in alphabetical order

obj-$(CONFIG_AS3935)		+= as3935.o

obj-$(CONFIG_LIDAR_LITE_V2)	+= pulsedlight-lidar-lite-v2.o

obj-$(CONFIG_MB1232)		+= mb1232.o

obj-$(CONFIG_PING)		+= ping.o

obj-$(CONFIG_RFD77402)		+= rfd77402.o

obj-$(CONFIG_SRF04)		+= srf04.o

obj-$(CONFIG_SRF08)		+= srf08.o

obj-$(CONFIG_SX9310)		+= sx9310.o

obj-$(CONFIG_SX9500)		+= sx9500.o

obj-$(CONFIG_VCNL3020)		+= vcnl3020.o



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Inertial Measurement Units

#

 When adding new entries keep the list in alphabetical order

obj-$(CONFIG_ADIS16400) += adis16400.o

obj-$(CONFIG_ADIS16475) += adis16475.o



adis_lib-$(CONFIG_IIO_ADIS_LIB_BUFFER) += adis_trigger.o

adis_lib-$(CONFIG_IIO_ADIS_LIB_BUFFER) += adis_buffer.o





obj-$(CONFIG_FXOS8700) += fxos8700_core.o

obj-$(CONFIG_FXOS8700_SPI) += fxos8700_spi.o

obj-y += inv_icm42600/

obj-y += inv_mpu6050/

obj-$(CONFIG_KMX61) += kmx61.o

obj-y += st_lsm6dsx/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_IIO_ST_LSM9DS0) += st_lsm9ds0.o

st_lsm9ds0-y := st_lsm9ds0_core.o

obj-$(CONFIG_IIO_ST_LSM9DS0_SPI) += st_lsm9ds0_spi.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Bosch BMI160 IMU



obj-$(CONFIG_BMI160_I2C) += bmi160_i2c.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_IIO_ST_LSM6DSX_I2C) += st_lsm6dsx_i2c.o

obj-$(CONFIG_IIO_ST_LSM6DSX_I3C) += st_lsm6dsx_i3c.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Invensense MPU6050 device.

#

obj-$(CONFIG_INV_MPU6050_IIO) += inv-mpu6050.o





inv-mpu6050-spi-y := inv_mpu_spi.o

 SPDX-License-Identifier: GPL-2.0-or-later



inv-icm42600-y += inv_icm42600_accel.o

inv-icm42600-y += inv_icm42600_temp.o

inv-icm42600-y += inv_icm42600_buffer.o



inv-icm42600-i2c-y += inv_icm42600_i2c.o

obj-$(CONFIG_INV_ICM42600_SPI) += inv-icm42600-spi.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the IIO Dummy Driver

#

iio_dummy-$(CONFIG_IIO_SIMPLE_DUMMY_EVENTS) += iio_simple_dummy_events.o



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for triggers not associated with iio-devices

#

 When adding new entries keep the list in alphabetical order



obj-$(CONFIG_IIO_HRTIMER_TRIGGER) += iio-trig-hrtimer.o

obj-$(CONFIG_IIO_INTERRUPT_TRIGGER) += iio-trig-interrupt.o

obj-$(CONFIG_IIO_STM32_TIMER_TRIGGER) += stm32-timer-trigger.o

obj-$(CONFIG_IIO_SYSFS_TRIGGER) += iio-trig-sysfs.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Resolver/Synchro drivers





obj-$(CONFIG_AD2S1200) += ad2s1200.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for IIO ADC drivers





# When adding new entries keep the list in alphabetical order

obj-$(CONFIG_AD_SIGMA_DELTA) += ad_sigma_delta.o

obj-$(CONFIG_AD7091R5) += ad7091r5.o ad7091r-base.o

obj-$(CONFIG_AD7192) += ad7192.o

obj-$(CONFIG_AD7291) += ad7291.o

obj-$(CONFIG_AD7298) += ad7298.o

obj-$(CONFIG_AD7476) += ad7476.o

obj-$(CONFIG_AD7606_IFACE_PARALLEL) += ad7606_par.o

obj-$(CONFIG_AD7606) += ad7606.o

obj-$(CONFIG_AD7768_1) += ad7768-1.o

obj-$(CONFIG_AD7791) += ad7791.o

obj-$(CONFIG_AD7887) += ad7887.o

obj-$(CONFIG_AD799X) += ad799x.o

obj-$(CONFIG_ADI_AXI_ADC) += adi-axi-adc.o

obj-$(CONFIG_AT91_ADC) += at91_adc.o

obj-$(CONFIG_AXP20X_ADC) += axp20x_adc.o

obj-$(CONFIG_BCM_IPROC_ADC) += bcm_iproc_adc.o

obj-$(CONFIG_CC10001_ADC) += cc10001_adc.o

obj-$(CONFIG_DA9150_GPADC) += da9150-gpadc.o

obj-$(CONFIG_ENVELOPE_DETECTOR) += envelope-detector.o

obj-$(CONFIG_EXYNOS_ADC) += exynos_adc.o

obj-$(CONFIG_FSL_MX25_ADC) += fsl-imx25-gcq.o

obj-$(CONFIG_HX711) += hx711.o

obj-$(CONFIG_IMX8QXP_ADC) += imx8qxp-adc.o

obj-$(CONFIG_INGENIC_ADC) += ingenic-adc.o

obj-$(CONFIG_LP8788_ADC) += lp8788_adc.o

obj-$(CONFIG_LPC32XX_ADC) += lpc32xx_adc.o

obj-$(CONFIG_LTC2485) += ltc2485.o

obj-$(CONFIG_LTC2496) += ltc2496.o ltc2497-core.o

obj-$(CONFIG_LTC2497) += ltc2497.o ltc2497-core.o

obj-$(CONFIG_MAX11100) += max11100.o

obj-$(CONFIG_MAX1241) += max1241.o

obj-$(CONFIG_MAX9611) += max9611.o

obj-$(CONFIG_MCP3422) += mcp3422.o

obj-$(CONFIG_MEN_Z188_ADC) += men_z188_adc.o

obj-$(CONFIG_MP2629_ADC) += mp2629_adc.o

obj-$(CONFIG_NAU7802) += nau7802.o

obj-$(CONFIG_PALMAS_GPADC) += palmas_gpadc.o

obj-$(CONFIG_QCOM_SPMI_IADC) += qcom-spmi-iadc.o

obj-$(CONFIG_QCOM_SPMI_VADC) += qcom-spmi-vadc.o

obj-$(CONFIG_RN5T618_ADC) += rn5t618-adc.o

obj-$(CONFIG_RZG2L_ADC) += rzg2l_adc.o

obj-$(CONFIG_SPEAR_ADC) += spear_adc.o

obj-$(CONFIG_SUN4I_GPADC) += sun4i-gpadc-iio.o

obj-$(CONFIG_STM32_ADC) += stm32-adc.o

obj-$(CONFIG_STM32_DFSDM_ADC) += stm32-dfsdm-adc.o

obj-$(CONFIG_TI_ADC081C) += ti-adc081c.o

obj-$(CONFIG_TI_ADC084S021) += ti-adc084s021.o

obj-$(CONFIG_TI_ADC108S102) += ti-adc108s102.o

obj-$(CONFIG_TI_ADC161S626) += ti-adc161s626.o

obj-$(CONFIG_TI_ADS7950) += ti-ads7950.o

obj-$(CONFIG_TI_ADS8688) += ti-ads8688.o

obj-$(CONFIG_TI_ADS131E08) += ti-ads131e08.o

obj-$(CONFIG_TI_TLC4541) += ti-tlc4541.o

obj-$(CONFIG_TWL4030_MADC) += twl4030-madc.o

obj-$(CONFIG_VF610_ADC) += vf610_adc.o

xilinx-xadc-y := xilinx-xadc-core.o xilinx-xadc-events.o

obj-$(CONFIG_SD_ADC_MODULATOR) += sd_adc_modulator.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile iio/frequency

#

 When adding new entries keep the list in alphabetical order

obj-$(CONFIG_AD9523) += ad9523.o

obj-$(CONFIG_ADF4371) += adf4371.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for industrial I/O temperature drivers

#

obj-$(CONFIG_IQS620AT_TEMP) += iqs620at-temp.o

obj-$(CONFIG_MAXIM_THERMOCOUPLE) += maxim_thermocouple.o

obj-$(CONFIG_MAX31865) += max31865.o

obj-$(CONFIG_MLX90632) += mlx90632.o

obj-$(CONFIG_TMP007) += tmp007.o

obj-$(CONFIG_TSYS01) += tsys01.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for industrial I/O Analog Front Ends (AFE)





# When adding new entries keep the list in alphabetical order

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for linux/drivers/scsi

#

 30 May 2000, Christoph Hellwig <hch@infradead.org>

# Rewritten to use lists instead of if-statements.

#

 20 Sep 2000, Torben Mathiasen <tmm@image.dk>

# Changed link order to reflect new scsi initialization.

#

 *!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!

# The link order must be, SCSI Core, SCSI HBA drivers, and

 lastly SCSI peripheral drivers (disk/tape/cdrom/etc.) to

 satisfy certain initialization assumptions in the SCSI layer.

# *!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!







obj-$(CONFIG_SCSI)		+= scsi_mod.o





 --- NOTE ORDERING HERE ---

 For kernel non-modular link, transport attributes need to

 be initialised before drivers

# --------------------------

obj-$(CONFIG_SCSI_ISCSI_ATTRS)	+= scsi_transport_iscsi.o

obj-$(CONFIG_SCSI_SAS_LIBSAS)	+= libsas/



obj-$(CONFIG_FCOE)		+= fcoe/

obj-$(CONFIG_FCOE_FNIC)		+= fnic/

obj-$(CONFIG_SCSI_SNIC)		+= snic/

obj-$(CONFIG_SCSI_BNX2X_FCOE)	+= libfc/ fcoe/ bnx2fc/

obj-$(CONFIG_INFINIBAND_ISER) 	+= libiscsi.o

obj-$(CONFIG_SCSI_A4000T)	+= 53c700.o	a4000t.o

obj-$(CONFIG_SCSI_ZORRO_ESP)	+= esp_scsi.o	zorro_esp.o

obj-$(CONFIG_A3000_SCSI)	+= a3000.o	wd33c93.o

obj-$(CONFIG_A2091_SCSI)	+= a2091.o	wd33c93.o

obj-$(CONFIG_GVP11_SCSI)	+= gvp11.o	wd33c93.o

obj-$(CONFIG_MVME147_SCSI)	+= mvme147.o	wd33c93.o

obj-$(CONFIG_SGIWD93_SCSI)	+= sgiwd93.o	wd33c93.o

obj-$(CONFIG_SCSI_MAC_ESP)	+= esp_scsi.o	mac_esp.o

obj-$(CONFIG_SCSI_SIM710)	+= 53c700.o	sim710.o

obj-$(CONFIG_SCSI_ADVANSYS)	+= advansys.o

obj-$(CONFIG_SCSI_BUSLOGIC)	+= BusLogic.o

obj-$(CONFIG_SCSI_DPT_I2O)	+= dpt_i2o.o

obj-$(CONFIG_SCSI_AIC7XXX)	+= aic7xxx/

obj-$(CONFIG_SCSI_AACRAID)	+= aacraid/

obj-$(CONFIG_SCSI_PM8001)	+= pm8001/

obj-$(CONFIG_SCSI_ISCI)		+= isci/

obj-$(CONFIG_SCSI_QLOGIC_1280)	+= qla1280.o 

obj-$(CONFIG_SCSI_QLA_FC)	+= qla2xxx/

obj-$(CONFIG_SCSI_QLA_ISCSI)	+= libiscsi.o qla4xxx/

obj-$(CONFIG_SCSI_LPFC)		+= lpfc/

obj-$(CONFIG_SCSI_CHELSIO_FCOE)	+= csiostor/

obj-$(CONFIG_SCSI_DMX3191D)	+= dmx3191d.o

obj-$(CONFIG_SCSI_SMARTPQI)	+= smartpqi/

obj-$(CONFIG_SCSI_ZALON)	+= zalon7xx.o

obj-$(CONFIG_SCSI_DC395x)	+= dc395x.o

obj-$(CONFIG_CXLFLASH)		+= cxlflash/

obj-$(CONFIG_MEGARAID_LEGACY)	+= megaraid.o

obj-$(CONFIG_SCSI_MPT3SAS)	+= mpt3sas/

obj-$(CONFIG_SCSI_MESH)		+= mesh.o

obj-$(CONFIG_SCSI_MAC53C94)	+= mac53c94.o

obj-$(CONFIG_SCSI_MYRS)		+= myrs.o

obj-$(CONFIG_BLK_DEV_3W_XXXX_RAID) += 3w-xxxx.o

obj-$(CONFIG_SCSI_3W_9XXX)	+= 3w-9xxx.o

obj-$(CONFIG_SCSI_3W_SAS)	+= 3w-sas.o

obj-$(CONFIG_SCSI_IMM)		+= imm.o

obj-$(CONFIG_SUN3X_ESP)		+= esp_scsi.o	sun3x_esp.o

obj-$(CONFIG_SCSI_SNI_53C710)	+= 53c700.o sni_53c710.o

obj-$(CONFIG_SCSI_NSP32)	+= nsp32.o

obj-$(CONFIG_SCSI_IBMVSCSI)	+= ibmvscsi/

obj-$(CONFIG_SCSI_IBMVSCSIS)	+= ibmvscsi_tgt/

obj-$(CONFIG_SCSI_STEX)		+= stex.o

obj-$(CONFIG_PS3_ROM)		+= ps3rom.o

obj-$(CONFIG_SCSI_CXGB4_ISCSI)	+= libiscsi.o libiscsi_tcp.o cxgbi/

obj-$(CONFIG_SCSI_ESAS2R)	+= esas2r/

obj-$(CONFIG_SCSI_PMCRAID)	+= pmcraid.o

obj-$(CONFIG_XEN_SCSI_FRONTEND)	+= xen-scsifront.o





obj-$(CONFIG_BLK_DEV_SD)	+= sd_mod.o

obj-$(CONFIG_CHR_DEV_SG)	+= sg.o

obj-$(CONFIG_CHR_DEV_SCH)	+= ch.o

obj-$(CONFIG_SCSI_ENCLOSURE)	+= ses.o

obj-$(CONFIG_SCSI_HISI_SAS) += hisi_sas/

 This goes last, so that "real" scsi devices probe earlier

obj-$(CONFIG_SCSI_DEBUG)	+= scsi_debug.o

scsi_mod-y			+= scsi.o hosts.o scsi_ioctl.o \

scsi_mod-$(CONFIG_SCSI_CONSTANTS) += constants.o

scsi_mod-$(CONFIG_SCSI_DMA)	+= scsi_lib_dma.o

scsi_mod-y			+= scsi_scan.o scsi_sysfs.o scsi_devinfo.o

scsi_mod-$(CONFIG_SCSI_NETLINK)	+= scsi_netlink.o

scsi_mod-$(CONFIG_SCSI_PROC_FS)	+= scsi_proc.o

scsi_mod-$(CONFIG_BLK_DEBUG_FS)	+= scsi_debugfs.o

scsi_mod-y			+= scsi_trace.o scsi_logging.o

scsi_mod-$(CONFIG_PM)		+= scsi_pm.o

scsi_mod-$(CONFIG_SCSI_DH)	+= scsi_dh.o



hv_storvsc-y			:= storvsc_drv.o

sd_mod-$(CONFIG_BLK_DEV_INTEGRITY) += sd_dif.o



ncr53c8xx-flags-$(CONFIG_SCSI_ZALON) \

			-DCONFIG_SCSI_NCR53C8XX_NO_WORD_TRANSFERS

CFLAGS_ncr53c8xx.o	:= $(ncr53c8xx-flags-y) $(ncr53c8xx-flags-m)



# Files generated that shall be removed upon make clean







quiet_cmd_bflags = GEN     $@



	$(call if_changed,bflags)

targets +=  scsi_devinfo_tbl.c

# If you want to play with the firmware, uncomment

 GENERATE_FIRMWARE := 1



ifdef GENERATE_FIRMWARE

	$(PERL) -s $(src)/script_asm.pl -ncr7x0_family $@ $(@:_d.h=_u.h) < $<

 SPDX-License-Identifier: GPL-2.0-only



 Makefile to build the iSCSI driver for Emulex OneConnect.









 SPDX-License-Identifier: GPL-2.0-only

 File: drivers/arcmsr/Makefile

 Makefile for the ARECA PCI-X PCI-EXPRESS SATA RAID controllers SCSI driver.



arcmsr-objs := arcmsr_attr.o arcmsr_hba.o

/*******************************************************************

 * This file is part of the Emulex Linux Device Driver for         *

 * Fibre Channel Host Bus Adapters.                                *

 * Copyright (C) 2017-2018 Broadcom. All Rights Reserved. The term *

 * “Broadcom” refers to Broadcom Inc. and/or its subsidiaries.     *

 * Copyright (C) 2004-2012 Emulex.  All rights reserved.           *

 * EMULEX and SLI are trademarks of Emulex.                        *

 * www.broadcom.com                                                *

 *                                                                 *

 * This program is free software; you can redistribute it and/or   *

 * modify it under the terms of version 2 of the GNU General       *

 * Public License as published by the Free Software Foundation.    *

 * This program is distributed in the hope that it will be useful. *

 * ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND          *

 * WARRANTIES, INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,  *

 * FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT, ARE      *

 * DISCLAIMED, EXCEPT TO THE EXTENT THAT SUCH DISCLAIMERS ARE HELD *

 * TO BE LEGALLY INVALID.  See the GNU General Public License for  *

 * more details, a copy of which can be found in the file COPYING  *

 * included with this package.                                     *

# *******************************************************************/



ccflags-$(GCOV) := -fprofile-arcs -ftest-coverage



ccflags-y += -Werror

endif



lpfc-objs := lpfc_mem.o lpfc_sli.o lpfc_ct.o lpfc_els.o \

# SPDX-License-Identifier: GPL-2.0

ccflags-y		:= -I $(srctree)/drivers/scsi

 16-bit client drivers

obj-$(CONFIG_PCMCIA_QLOGIC)	+= qlogic_cs.o

obj-$(CONFIG_PCMCIA_AHA152X)	+= aha152x_cs.o

obj-$(CONFIG_PCMCIA_NINJA_SCSI)	+= nsp_cs.o



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Marvell 88SE64xx/88SE84xx SAS/SATA driver.



# Copyright 2007 Red Hat, Inc.

# Copyright 2008 Marvell. <kewei@marvell.com>

# Copyright 2009-2011 Marvell. <yuxiangl@marvell.com>

#

ccflags-$(CONFIG_SCSI_MVSAS_DEBUG) := -DMV_DEBUG

mvsas-y +=  mv_init.o  \

           mv_sas.o   \

           mv_64xx.o  \

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SCSI_SMARTPQI) += smartpqi.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_FCOE) += fcoe.o



libfcoe-objs := fcoe_ctlr.o fcoe_transport.o fcoe_sysfs.o

#// SPDX-License-Identifier: GPL-2.0

#/*

 * Copyright (C) 2021 Broadcom. All Rights Reserved. The term

 * “Broadcom” refers to Broadcom Inc. and/or its subsidiaries.

# */



obj-$(CONFIG_SCSI_EFCT) := efct.o

	     efct/efct_xport.o efct/efct_hw.o efct/efct_hw_queues.o \

	     efct/efct_lio.o efct/efct_unsol.o

efct-objs += libefc/efc_cmds.o libefc/efc_domain.o libefc/efc_fabric.o \

	     libefc/efclib.o libefc/efc_sm.o libefc/efc_els.o

efct-objs += libefc_sli/sli4.o

 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_QEDI) := qedi.o

qedi-y := qedi_main.o qedi_iscsi.o qedi_fw.o qedi_sysfs.o \

	    qedi_dbg.o qedi_fw_api.o

# SPDX-License-Identifier: GPL-2.0

 mpt3sas makefile

mpt3sas-y +=  mpt3sas_base.o     \

		mpt3sas_scsih.o      \

		mpt3sas_transport.o     \

		mpt3sas_ctl.o	\

 SPDX-License-Identifier: GPL-2.0-only



	 esas2r_vda.o esas2r_main.o

# SPDX-License-Identifier: GPL-2.0

#



##

ccflags-y += -I$(srctree)/drivers/net/ethernet/chelsio/cxgb4



csiostor-objs := csio_attr.o csio_init.o csio_lnode.o csio_scsi.o \

		csio_hw.o csio_hw_t5.o csio_isr.o \

 SPDX-License-Identifier: GPL-2.0-only

 Adaptec aacraid



obj-$(CONFIG_SCSI_AACRAID) := aacraid.o

aacraid-objs	:= linit.o aachba.o commctrl.o comminit.o commsup.o \

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for the NCR/SYMBIOS/LSI 53C8XX PCI SCSI controllers driver.

 mpi3mr makefile

mpi3mr-y +=  mpi3mr_os.o     \

		mpi3mr_fw.o \

 SPDX-License-Identifier: GPL-2.0-only



 SCSI Device Handler



obj-$(CONFIG_SCSI_DH_RDAC)	+= scsi_dh_rdac.o

obj-$(CONFIG_SCSI_DH_EMC)	+= scsi_dh_emc.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CXLFLASH) += cxlflash.o

cxlflash-$(CONFIG_CXL) += cxl_hw.o

# SPDX-License-Identifier: GPL-2.0

#

# Kernel configuration file for the PM8001 SAS/SATA 8x6G based HBA driver

#

 Copyright (C) 2008-2009  USI Co., Ltd.



		pm80xx_hwi.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SCSI_HISI_SAS_PCI)		+= hisi_sas_v3_hw.o

# SPDX-License-Identifier: GPL-2.0

		qla_dbg.o qla_sup.o qla_attr.o qla_mid.o qla_dfs.o qla_bsg.o \

		qla_edif.o

obj-$(CONFIG_SCSI_QLA_FC) += qla2xxx.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_MEGARAID_SAS)	+= megaraid_sas.o

 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only



# Kernel Makefile for the libsas helpers

#

 Copyright (C) 2005 Adaptec, Inc.  All rights reserved.

# Copyright (C) 2005 Luben Tuikov <luben_tuikov@adaptec.com>

#

		sas_phy.o      \

		sas_event.o    \

		sas_expander.o \

		sas_scsi_host.o \

libsas-$(CONFIG_SCSI_SAS_ATA) +=	sas_ata.o



 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_SCSI_CXGB4_ISCSI)	+= libcxgbi.o cxgb4i/

# SPDX-License-Identifier: GPL-2.0

# UFSHCD makefile

 The link order is important here. ufshcd-core must initialize

# before vendor drivers.

obj-$(CONFIG_SCSI_UFSHCD)		+= ufshcd-core.o

ufshcd-core-$(CONFIG_DEBUG_FS)		+= ufs-debugfs.o

ufshcd-core-$(CONFIG_SCSI_UFS_BSG)	+= ufs_bsg.o

ufshcd-core-$(CONFIG_SCSI_UFS_HPB)	+= ufshpb.o

ufshcd-core-$(CONFIG_SCSI_UFS_FAULT_INJECTION) += ufs-fault-injection.o

ufshcd-core-$(CONFIG_SCSI_UFS_HWMON) += ufs-hwmon.o

ufs_qcom-y += ufs-qcom.o

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0



bfa-y := bfad.o bfad_im.o bfad_attr.o bfad_debugfs.o bfad_bsg.o

bfa-y += bfa_fcs.o bfa_fcs_lport.o bfa_fcs_rport.o bfa_fcs_fcpim.o bfa_fcbuild.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SCSI_ISCI) += isci.o

isci-objs := init.o phy.o request.o \

	     host.o task.o probe_roms.o \

	     remote_node_context.o \

	     remote_node_table.o \

	     unsolicited_frame_control.o \

	     port_config.o \

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_FCOE_FNIC) += fnic.o

	fnic_main.o \

	fnic_res.o \

	fnic_fcs.o \

	vnic_cq.o \

	vnic_dev.o \

	vnic_rq.o \

	vnic_wq_copy.o \

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

# $Id: Makefile

obj-$(CONFIG_LIBFC) += libfc.o

	fc_disc.o \

	fc_npiv.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Adaptec aic94xx SAS/SATA driver.



# Copyright (C) 2005 Adaptec, Inc.  All rights reserved.

 Copyright (C) 2005 Luben Tuikov <luben_tuikov@adaptec.com>





ccflags-$(CONFIG_AIC94XX_DEBUG) := -DASD_DEBUG -DASD_ENTER_EXIT

	     aic94xx_hwi.o  \

	     aic94xx_sds.o  \

	     aic94xx_dump.o \

	     aic94xx_dev.o  \

	     aic94xx_task.o

 SPDX-License-Identifier: GPL-2.0-only

		ql4_nx.o ql4_nvram.o ql4_dbg.o ql4_attr.o ql4_bsg.o ql4_83xx.o



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SCSI_SNIC) += snic.o

	snic_main.o \

	snic_res.o \

	snic_isr.o \

	snic_ctl.o \

	snic_scsi.o \

	vnic_cq.o \

	vnic_wq.o

snic-$(CONFIG_SCSI_SNIC_DEBUG_FS) += snic_debugfs.o snic_trc.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_QEDF) := qedf.o

	 qedf_attr.o qedf_els.o drv_scsi_fw_funcs.o drv_fcoe_fw_funcs.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux aic7xxx SCSI driver.

#

 $Id: //depot/linux-aic79xx-2.5.0/drivers/scsi/aic7xxx/Makefile




 Let kbuild descend into aicasm when cleaning

subdir-				+= aicasm



# Core Fast -> U160 files

aic7xxx-y					+= aic7xxx_core.o	\

aic7xxx-$(CONFIG_EISA)				+= aic7770.o

aic7xxx-$(CONFIG_PCI)				+= aic7xxx_pci.o

aic7xxx-$(CONFIG_AIC7XXX_REG_PRETTY_PRINT)	+= aic7xxx_reg_print.o

# Platform Specific Fast -> U160 Files

aic7xxx-$(CONFIG_EISA)				+= aic7770_osm.o

aic7xxx-$(CONFIG_PCI)				+= aic7xxx_osm_pci.o

 Core U320 files

						   aic79xx_pci.o

aic79xx-$(CONFIG_AIC79XX_REG_PRETTY_PRINT)	+= aic79xx_reg_print.o

# Platform Specific U320 Files

						   aic79xx_osm_pci.o

ifdef WARNINGS_BECOME_ERRORS



# Files generated that shall be removed upon make clean

clean-files += aic79xx_seq.h aic79xx_reg.h aic79xx_reg_print.c

 Dependencies for generated files need to be listed explicitly



$(addprefix $(obj)/,$(aic79xx-y)): $(obj)/aic79xx_seq.h $(obj)/aic79xx_reg.h

aic7xxx-gen-$(CONFIG_AIC7XXX_BUILD_FIRMWARE)	:= $(obj)/aic7xxx_reg.h





ifeq ($(CONFIG_AIC7XXX_BUILD_FIRMWARE),y)

			      $(aicasm-7xxx-opts-y) -o $(obj)/aic7xxx_seq.h \



$(aic7xxx-gen-y): $(objtree)/$(obj)/aic7xxx_seq.h

else



aic79xx-gen-$(CONFIG_AIC79XX_REG_PRETTY_PRINT)	+= $(obj)/aic79xx_reg_print.c

aicasm-79xx-opts-$(CONFIG_AIC79XX_REG_PRETTY_PRINT) := \

	-p $(obj)/aic79xx_reg_print.c -i aic79xx_osm.h

$(obj)/aic79xx_seq.h: $(src)/aic79xx.seq $(src)/aic79xx.reg $(obj)/aicasm/aicasm

	$(obj)/aicasm/aicasm -I$(srctree)/$(src) -r $(obj)/aic79xx_reg.h \

			      $(srctree)/$(src)/aic79xx.seq

	@true

$(obj)/aic79xx_reg_print.c: $(src)/aic79xx_reg_print.c_shipped

endif

# SPDX-License-Identifier: GPL-2.0







CSRCS=	aicasm.c aicasm_symbol.c

LSRCS=	aicasm_scan.l aicasm_macro_scan.l

GENSRCS=	$(addprefix ${OUTDIR}/,$(YSRCS:.y=.c) $(LSRCS:.l=.c))

LIBS=	-ldb

clean-files:= ${GENSRCS} ${GENHDRS} $(YSRCS:.y=.output) $(PROG)

 Override default kernel CFLAGS.  This is a userland app.

AICASM_CFLAGS:= -I/usr/include -I. -I$(OUTDIR)

LEX= flex

YACC= bison





AICASM_CC= $(HOSTCC)

AICASM_CC= $(CC)

endif

YFLAGS+= -t -v







	@if [ -e "/usr/include/db4/db_185.h" ]; then		\

include <db4/db_185.h>" > $@;	\

	 elif [ -e "/usr/include/db3/db_185.h" ]; then		\

include <db3/db_185.h>" > $@;	\

	 elif [ -e "/usr/include/db2/db_185.h" ]; then		\

include <db2/db_185.h>" > $@;	\

	 elif [ -e "/usr/include/db1/db_185.h" ]; then		\

include <db1/db_185.h>" > $@;	\

include <db/db_185.h>" > $@;	\

	 elif [ -e "/usr/include/db_185.h" ]; then		\

		echo "#include <db_185.h>" > $@;		\

		echo "*** Install db development libraries";	\





 Create a dependency chain in generated files

 to avoid concurrent invocations of the single

# rule that builds them all.

$(OUTDIR)/aicasm_gram.c $(OUTDIR)/aicasm_gram.h: aicasm_gram.y

	$(YACC) $(YFLAGS) -b $(<:.y=) $<

	mv $(<:.y=).tab.c $(OUTDIR)/$(<:.y=.c)

	mv $(<:.y=).tab.h $(OUTDIR)/$(<:.y=.h)

# Create a dependency chain in generated files

# to avoid concurrent invocations of the single

 rule that builds them all.

$(OUTDIR)/aicasm_macro_gram.c: $(OUTDIR)/aicasm_macro_gram.h



	$(LEX) $(LFLAGS) -o $@ $<

$(OUTDIR)/aicasm_macro_scan.c: aicasm_macro_scan.l

	$(LEX) $(LFLAGS) -Pmm -o $@ $<

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for drivers/scsi/arm

#

acornscsi_mod-objs	:= acornscsi.o acornscsi-io.o

obj-$(CONFIG_SCSI_ACORNSCSI_3)	+= acornscsi_mod.o queue.o msgqueue.o

obj-$(CONFIG_SCSI_ARXESCSI)	+= arxescsi.o fas216.o queue.o msgqueue.o

obj-$(CONFIG_SCSI_CUMANA_1)	+= cumana_1.o

obj-$(CONFIG_SCSI_CUMANA_2)	+= cumana_2.o fas216.o queue.o msgqueue.o

obj-$(CONFIG_SCSI_OAK1)		+= oak.o

obj-$(CONFIG_SCSI_POWERTECSCSI)	+= powertec.o fas216.o queue.o msgqueue.o

obj-$(CONFIG_SCSI_EESOXSCSI)	+= eesox.o fas216.o queue.o msgqueue.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_RAS)	+= ras.o

obj-$(CONFIG_DEBUG_FS)	+= debugfs.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for cpuidle.

#

obj-$(CONFIG_ARCH_NEEDS_CPU_IDLE_COUPLED) += coupled.o

obj-$(CONFIG_DT_IDLE_STATES)		  += dt_idle_states.o



 ARM SoC drivers

obj-$(CONFIG_ARM_MVEBU_V7_CPUIDLE) += cpuidle-mvebu-v7.o

obj-$(CONFIG_ARM_CLPS711X_CPUIDLE)	+= cpuidle-clps711x.o

obj-$(CONFIG_ARM_HIGHBANK_CPUIDLE)	+= cpuidle-calxeda.o

obj-$(CONFIG_ARM_U8500_CPUIDLE)         += cpuidle-ux500.o

obj-$(CONFIG_ARM_AT91_CPUIDLE)          += cpuidle-at91.o

obj-$(CONFIG_ARM_EXYNOS_CPUIDLE)        += cpuidle-exynos.o

obj-$(CONFIG_ARM_CPUIDLE)		+= cpuidle-arm.o

obj-$(CONFIG_ARM_PSCI_CPUIDLE)		+= cpuidle-psci.o

obj-$(CONFIG_ARM_QCOM_SPM_CPUIDLE)	+= cpuidle-qcom-spm.o



# MIPS drivers



###############################################################################

# POWERPC drivers

obj-$(CONFIG_PSERIES_CPUIDLE)		+= cpuidle-pseries.o

obj-$(CONFIG_POWERNV_CPUIDLE)		+= cpuidle-powernv.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for cpuidle governors.





obj-$(CONFIG_CPU_IDLE_GOV_LADDER) += ladder.o

obj-$(CONFIG_CPU_IDLE_GOV_MENU) += menu.o

obj-$(CONFIG_CPU_IDLE_GOV_TEO) += teo.o

obj-$(CONFIG_CPU_IDLE_GOV_HALTPOLL) += haltpoll.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux IEEE 1394 implementation

#

firewire-core-y += core-card.o core-cdev.o core-device.o \

firewire-net-y  += net.o

obj-$(CONFIG_FIREWIRE)      += firewire-core.o

obj-$(CONFIG_FIREWIRE_SBP2) += firewire-sbp2.o

obj-$(CONFIG_FIREWIRE_NET)  += firewire-net.o

obj-$(CONFIG_FIREWIRE_NOSY) += nosy.o

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_ATH79)			+= irq-ath79-cpu.o

obj-$(CONFIG_ATH79)			+= irq-ath79-misc.o

obj-$(CONFIG_ARCH_BCM2835)		+= irq-bcm2836.o

obj-$(CONFIG_ARCH_ACTIONS)		+= irq-owl-sirq.o

obj-$(CONFIG_DAVINCI_AINTC)		+= irq-davinci-aintc.o

obj-$(CONFIG_DAVINCI_CP_INTC)		+= irq-davinci-cp-intc.o

obj-$(CONFIG_ARCH_HIP04)		+= irq-hip04.o

obj-$(CONFIG_IRQ_MXS)			+= irq-mxs.o

obj-$(CONFIG_OMPIC)			+= irq-ompic.o

obj-$(CONFIG_OMAP_IRQCHIP)		+= irq-omap-intc.o

obj-$(CONFIG_ARCH_SUNXI)		+= irq-sun6i-r.o

obj-$(CONFIG_ARCH_REALVIEW)		+= irq-gic-realview.o

obj-$(CONFIG_ARM_GIC_V2M)		+= irq-gic-v2m.o

obj-$(CONFIG_ARM_GIC_V3)		+= irq-gic-v3.o irq-gic-v3-mbi.o irq-gic-common.o

obj-$(CONFIG_ARM_GIC_V3_ITS_PCI)	+= irq-gic-v3-its-pci-msi.o

obj-$(CONFIG_HISILICON_IRQ_MBIGEN)	+= irq-mbigen.o

obj-$(CONFIG_ARM_VIC)			+= irq-vic.o

obj-$(CONFIG_ARMADA_370_XP_IRQ)		+= irq-armada-370-xp.o

obj-$(CONFIG_I8259)			+= irq-i8259.o

obj-$(CONFIG_IMGPDC_IRQ)		+= irq-imgpdc.o

obj-$(CONFIG_IRQ_MIPS_CPU)		+= irq-mips-cpu.o

obj-$(CONFIG_IXP4XX_IRQ)		+= irq-ixp4xx.o

obj-$(CONFIG_RDA_INTC)			+= irq-rda-intc.o

obj-$(CONFIG_RENESAS_RZA1_IRQC)		+= irq-renesas-rza1.o

obj-$(CONFIG_ARCH_VT8500)		+= irq-vt8500.o

obj-$(CONFIG_ST_IRQCHIP)		+= irq-st.o

obj-$(CONFIG_XTENSA)			+= irq-xtensa-pic.o

obj-$(CONFIG_SOC_VF610)			+= irq-vf610-mscm-ir.o

obj-$(CONFIG_BCM6345_L1_IRQ)		+= irq-bcm6345-l1.o

obj-$(CONFIG_BCM7038_L1_IRQ)		+= irq-bcm7038-l1.o

obj-$(CONFIG_BCM7120_L2_IRQ)		+= irq-bcm7120-l2.o

obj-$(CONFIG_BRCMSTB_L2_IRQ)		+= irq-brcmstb-l2.o

obj-$(CONFIG_KEYSTONE_IRQ)		+= irq-keystone.o

obj-$(CONFIG_ARCH_DIGICOLOR)		+= irq-digicolor.o

obj-$(CONFIG_RENESAS_H8300H_INTC)	+= irq-renesas-h8300h.o

obj-$(CONFIG_ARCH_SA1100)		+= irq-sa11x0.o

obj-$(CONFIG_INGENIC_IRQ)		+= irq-ingenic.o

obj-$(CONFIG_INGENIC_TCU_IRQ)		+= irq-ingenic-tcu.o

obj-$(CONFIG_MVEBU_ICU)			+= irq-mvebu-icu.o

obj-$(CONFIG_MVEBU_ODMI)		+= irq-mvebu-odmi.o

obj-$(CONFIG_MVEBU_SEI)			+= irq-mvebu-sei.o

obj-$(CONFIG_ARCH_ASPEED)		+= irq-aspeed-vic.o irq-aspeed-i2c-ic.o irq-aspeed-scu-ic.o

obj-$(CONFIG_IRQ_UNIPHIER_AIDET)	+= irq-uniphier-aidet.o

obj-$(CONFIG_ARCH_SYNQUACER)		+= irq-sni-exiu.o

obj-$(CONFIG_MESON_IRQ_GPIO)		+= irq-meson-gpio.o

obj-$(CONFIG_QCOM_PDC)			+= qcom-pdc.o

obj-$(CONFIG_CSKY_MPINTC)		+= irq-csky-mpintc.o

obj-$(CONFIG_CSKY_APB_INTC)		+= irq-csky-apb-intc.o

obj-$(CONFIG_RISCV_INTC)		+= irq-riscv-intc.o

obj-$(CONFIG_SIFIVE_PLIC)		+= irq-sifive-plic.o

obj-$(CONFIG_IMX_IRQSTEER)		+= irq-imx-irqsteer.o

obj-$(CONFIG_IMX_INTMUX)		+= irq-imx-intmux.o

obj-$(CONFIG_MADERA_IRQ)		+= irq-madera.o

obj-$(CONFIG_TI_SCI_INTR_IRQCHIP)	+= irq-ti-sci-intr.o

obj-$(CONFIG_TI_PRUSS_INTC)		+= irq-pruss-intc.o

obj-$(CONFIG_LOONGSON_LIOINTC)		+= irq-loongson-liointc.o

obj-$(CONFIG_LOONGSON_HTPIC)		+= irq-loongson-htpic.o

obj-$(CONFIG_LOONGSON_HTVEC)		+= irq-loongson-htvec.o

obj-$(CONFIG_LOONGSON_PCH_PIC)		+= irq-loongson-pch-pic.o

obj-$(CONFIG_LOONGSON_PCH_MSI)		+= irq-loongson-pch-msi.o

obj-$(CONFIG_MST_IRQ)			+= irq-mst-intc.o

obj-$(CONFIG_MACH_REALTEK_RTL)		+= irq-realtek-rtl.o

obj-$(CONFIG_WPCM450_AIC)		+= irq-wpcm450-aic.o

obj-$(CONFIG_IRQ_IDT3243X)		+= irq-idt3243x.o

obj-$(CONFIG_MCHP_EIC)			+= irq-mchp-eic.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for kernel SPI drivers.







# small core, mostly translating board-specific

 config declarations into driver model code

obj-$(CONFIG_SPI_MASTER)		+= spi.o

obj-$(CONFIG_SPI_MUX)			+= spi-mux.o

obj-$(CONFIG_SPI_SPIDEV)		+= spidev.o

obj-$(CONFIG_SPI_LOOPBACK_TEST)		+= spi-loopback-test.o

 SPI master controller drivers (bus)

obj-$(CONFIG_SPI_ALTERA)		+= spi-altera-platform.o

obj-$(CONFIG_SPI_ALTERA_CORE)		+= spi-altera-core.o

obj-$(CONFIG_SPI_ALTERA_DFL)		+= spi-altera-dfl.o

obj-$(CONFIG_SPI_AR934X)		+= spi-ar934x.o

obj-$(CONFIG_SPI_ARMADA_3700)		+= spi-armada-3700.o

obj-$(CONFIG_SPI_ATH79)			+= spi-ath79.o

obj-$(CONFIG_SPI_AU1550)		+= spi-au1550.o

obj-$(CONFIG_SPI_CADENCE_QUADSPI)	+= spi-cadence-quadspi.o

obj-$(CONFIG_SPI_CADENCE_XSPI)		+= spi-cadence-xspi.o

obj-$(CONFIG_SPI_CLPS711X)		+= spi-clps711x.o

obj-$(CONFIG_SPI_COLDFIRE_QSPI)		+= spi-coldfire-qspi.o

obj-$(CONFIG_SPI_DAVINCI)		+= spi-davinci.o

spi-dw-y				:= spi-dw-core.o

obj-$(CONFIG_SPI_FSI)			+= spi-fsi.o

obj-$(CONFIG_SPI_FSL_CPM)		+= spi-fsl-cpm.o

obj-$(CONFIG_SPI_FSL_DSPI)		+= spi-fsl-dspi.o

obj-$(CONFIG_SPI_FSL_LIB)		+= spi-fsl-lib.o

obj-$(CONFIG_SPI_FSL_ESPI)		+= spi-fsl-espi.o

obj-$(CONFIG_SPI_FSL_LPSPI)		+= spi-fsl-lpspi.o

obj-$(CONFIG_SPI_GPIO)			+= spi-gpio.o

obj-$(CONFIG_SPI_HISI_KUNPENG)		+= spi-hisi-kunpeng.o

obj-$(CONFIG_SPI_HISI_SFC_V3XX)		+= spi-hisi-sfc-v3xx.o

obj-$(CONFIG_SPI_IMG_SPFI)		+= spi-img-spfi.o

obj-$(CONFIG_SPI_JCORE)			+= spi-jcore.o

obj-$(CONFIG_SPI_MXIC)			+= spi-mxic.o

obj-$(CONFIG_SPI_NXP_FLEXSPI)		+= spi-nxp-fspi.o

obj-$(CONFIG_SPI_OC_TINY)		+= spi-oc-tiny.o

obj-$(CONFIG_SPI_OMAP24XX)		+= spi-omap2-mcspi.o

obj-$(CONFIG_SPI_TI_QSPI)		+= spi-ti-qspi.o

obj-$(CONFIG_SPI_PIC32)			+= spi-pic32.o

obj-$(CONFIG_SPI_PIC32_SQI)		+= spi-pic32-sqi.o

spi-pxa2xx-platform-objs		:= spi-pxa2xx.o spi-pxa2xx-dma.o

obj-$(CONFIG_SPI_QUP)			+= spi-qup.o

obj-$(CONFIG_SPI_ROCKCHIP)		+= spi-rockchip.o

obj-$(CONFIG_SPI_ROCKCHIP_SFC)		+= spi-rockchip-sfc.o

obj-$(CONFIG_MACH_REALTEK_RTL)		+= spi-realtek-rtl.o

obj-$(CONFIG_SPI_RPCIF)			+= spi-rpc-if.o

obj-$(CONFIG_SPI_S3C24XX)		+= spi-s3c24xx-hw.o

spi-s3c24xx-hw-y			:= spi-s3c24xx.o

obj-$(CONFIG_SPI_S3C64XX)		+= spi-s3c64xx.o

obj-$(CONFIG_SPI_SC18IS602)		+= spi-sc18is602.o

obj-$(CONFIG_SPI_SPRD)			+= spi-sprd.o

obj-$(CONFIG_SPI_SPRD_ADI)		+= spi-sprd-adi.o

obj-$(CONFIG_SPI_STM32_QSPI) 		+= spi-stm32-qspi.o

obj-$(CONFIG_SPI_ST_SSC4)		+= spi-st-ssc4.o

obj-$(CONFIG_SPI_SUN6I)			+= spi-sun6i.o

obj-$(CONFIG_SPI_SYNQUACER)		+= spi-synquacer.o

obj-$(CONFIG_SPI_TEGRA210_QUAD)		+= spi-tegra210-quad.o

obj-$(CONFIG_SPI_TEGRA114)		+= spi-tegra114.o

obj-$(CONFIG_SPI_XLP)			+= spi-xlp.o

obj-$(CONFIG_SPI_XTENSA_XTFPGA)		+= spi-xtensa-xtfpga.o

obj-$(CONFIG_SPI_ZYNQ_QSPI)		+= spi-zynq-qspi.o

obj-$(CONFIG_SPI_ZYNQMP_GQSPI)		+= spi-zynqmp-gqspi.o



# SPI slave protocol handlers

obj-$(CONFIG_SPI_SLAVE_TIME)		+= spi-slave-time.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y				+= braille/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_A11Y_BRAILLE_CONSOLE)		+= braille_console.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SPEAKUP_SYNTH_ACNTPC) += speakup_acntpc.o

obj-$(CONFIG_SPEAKUP_SYNTH_AUDPTR) += speakup_audptr.o

obj-$(CONFIG_SPEAKUP_SYNTH_DECTLK) += speakup_dectlk.o

obj-$(CONFIG_SPEAKUP_SYNTH_DECPC) += speakup_decpc.o

obj-$(CONFIG_SPEAKUP_SYNTH_KEYPC) += speakup_keypc.o

obj-$(CONFIG_SPEAKUP_SYNTH_SOFT) += speakup_soft.o

obj-$(CONFIG_SPEAKUP_SYNTH_TXPRT) += speakup_txprt.o



speakup-y := \

	fakekey.o \

	main.o \

	selection.o \

	synth.o \

	thread.o \

speakup-$(CONFIG_SPEAKUP_SERIALIO) += serialio.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for kernel vlynq drivers





 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_POWER_RESET_AS3722) += as3722-poweroff.o

obj-$(CONFIG_POWER_RESET_AT91_RESET) += at91-reset.o

obj-$(CONFIG_POWER_RESET_AXXIA) += axxia-reset.o

obj-$(CONFIG_POWER_RESET_BRCMKONA) += brcm-kona-reset.o

obj-$(CONFIG_POWER_RESET_BRCMSTB) += brcmstb-reboot.o

obj-$(CONFIG_POWER_RESET_GPIO_RESTART) += gpio-restart.o

obj-$(CONFIG_POWER_RESET_HISI) += hisi-reboot.o

obj-$(CONFIG_POWER_RESET_LINKSTATION) += linkstation-poweroff.o

obj-$(CONFIG_POWER_RESET_MSM) += msm-poweroff.o

obj-$(CONFIG_POWER_RESET_MT6323) += mt6323-poweroff.o

obj-$(CONFIG_POWER_RESET_QCOM_PON) += qcom-pon.o

obj-$(CONFIG_POWER_RESET_PIIX4_POWEROFF) += piix4-poweroff.o

obj-$(CONFIG_POWER_RESET_LTC2952) += ltc2952-poweroff.o

obj-$(CONFIG_POWER_RESET_QNAP) += qnap-poweroff.o

obj-$(CONFIG_POWER_RESET_REGULATOR) += regulator-poweroff.o

obj-$(CONFIG_POWER_RESET_RESTART) += restart-poweroff.o

obj-$(CONFIG_POWER_RESET_ST) += st-poweroff.o

obj-$(CONFIG_POWER_RESET_KEYSTONE) += keystone-reset.o

obj-$(CONFIG_POWER_RESET_SYSCON) += syscon-reboot.o

obj-$(CONFIG_POWER_RESET_RMOBILE) += rmobile-reset.o

obj-$(CONFIG_SYSCON_REBOOT_MODE) += syscon-reboot-mode.o

obj-$(CONFIG_POWER_RESET_SC27XX) += sc27xx-poweroff.o

# SPDX-License-Identifier: GPL-2.0





obj-$(CONFIG_POWER_SUPPLY_HWMON) += power_supply_hwmon.o



obj-$(CONFIG_PDA_POWER)		+= pda_power.o

obj-$(CONFIG_APM_POWER)		+= apm_power.o

obj-$(CONFIG_MAX8925_POWER)	+= max8925_power.o

obj-$(CONFIG_WM831X_POWER)	+= wm831x_power.o

obj-$(CONFIG_TEST_POWER)	+= test_power.o

obj-$(CONFIG_BATTERY_88PM860X)	+= 88pm860x_battery.o

obj-$(CONFIG_BATTERY_ACT8945A)	+= act8945a_charger.o

obj-$(CONFIG_BATTERY_CPCAP)	+= cpcap-battery.o

obj-$(CONFIG_BATTERY_DS2760)	+= ds2760_battery.o

obj-$(CONFIG_BATTERY_DS2781)	+= ds2781_battery.o

obj-$(CONFIG_BATTERY_GAUGE_LTC2941)	+= ltc2941-battery-gauge.o

obj-$(CONFIG_BATTERY_LEGO_EV3)	+= lego_ev3_battery.o

obj-$(CONFIG_BATTERY_OLPC)	+= olpc_battery.o

obj-$(CONFIG_BATTERY_COLLIE)	+= collie_battery.o

obj-$(CONFIG_BATTERY_IPAQ_MICRO) += ipaq_micro_battery.o

obj-$(CONFIG_BATTERY_SBS)	+= sbs-battery.o

obj-$(CONFIG_MANAGER_SBS)	+= sbs-manager.o

obj-$(CONFIG_BATTERY_BQ27XXX_I2C) += bq27xxx_battery_i2c.o

obj-$(CONFIG_BATTERY_DA9030)	+= da9030_battery.o

obj-$(CONFIG_CHARGER_DA9150)	+= da9150-charger.o

obj-$(CONFIG_BATTERY_DA9150)	+= da9150-fg.o

obj-$(CONFIG_BATTERY_MAX17042)	+= max17042_battery.o

obj-$(CONFIG_BATTERY_Z2)	+= z2_battery.o

obj-$(CONFIG_CHARGER_RT9455)	+= rt9455_charger.o

obj-$(CONFIG_BATTERY_TWL4030_MADC)	+= twl4030_madc_battery.o

obj-$(CONFIG_CHARGER_PCF50633)	+= pcf50633-charger.o

obj-$(CONFIG_CHARGER_CPCAP)	+= cpcap-charger.o

obj-$(CONFIG_CHARGER_MAX8903)	+= max8903_charger.o

obj-$(CONFIG_CHARGER_LP8727)	+= lp8727_charger.o

obj-$(CONFIG_CHARGER_GPIO)	+= gpio-charger.o

obj-$(CONFIG_CHARGER_LT3651)	+= lt3651-charger.o

obj-$(CONFIG_CHARGER_LTC4162L)	+= ltc4162-l-charger.o

obj-$(CONFIG_CHARGER_DETECTOR_MAX14656)	+= max14656_charger_detector.o

obj-$(CONFIG_CHARGER_MAX77693)	+= max77693_charger.o

obj-$(CONFIG_CHARGER_MAX8998)	+= max8998_charger.o

obj-$(CONFIG_CHARGER_MT6360)	+= mt6360_charger.o

obj-$(CONFIG_CHARGER_BQ2415X)	+= bq2415x_charger.o

obj-$(CONFIG_CHARGER_BQ24257)	+= bq24257_charger.o

obj-$(CONFIG_CHARGER_BQ2515X)	+= bq2515x_charger.o

obj-$(CONFIG_CHARGER_BQ25980)	+= bq25980_charger.o

obj-$(CONFIG_CHARGER_SMB347)	+= smb347-charger.o

obj-$(CONFIG_CHARGER_TPS65217)	+= tps65217_charger.o

obj-$(CONFIG_AXP288_CHARGER)	+= axp288_charger.o

obj-$(CONFIG_CHARGER_CROS_PCHG)	+= cros_peripheral_charger.o

obj-$(CONFIG_FUEL_GAUGE_SC27XX)	+= sc27xx_fuel_gauge.o

obj-$(CONFIG_CHARGER_BD99954)	+= bd99954-charger.o

obj-$(CONFIG_RN5T618_POWER)	+= rn5t618_power.o

obj-$(CONFIG_BATTERY_SURFACE)	+= surface_battery.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_DEV_DAX_KMEM) += kmem.o

dax-y := super.o

device_dax-y := device.o

obj-y += pmem/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_DEV_DAX_PMEM) += dax_pmem.o

obj-$(CONFIG_DEV_DAX_PMEM) += dax_pmem_core.o



# SPDX-License-Identifier: GPL-2.0



device_hmem-y := device.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel block device drivers.

#

# 12 June 2000, Christoph Hellwig <hch@infradead.org>

 Rewritten to use lists instead of if-statements.

# 

 needed for trace events

ccflags-y				+= -I$(src)

obj-$(CONFIG_BLK_DEV_SWIM)	+= swim_mod.o

obj-$(CONFIG_PS3_DISK)		+= ps3disk.o

obj-$(CONFIG_AMIGA_Z2RAM)	+= z2ram.o

obj-$(CONFIG_N64CART)		+= n64cart.o

obj-$(CONFIG_BLK_DEV_LOOP)	+= loop.o



obj-$(CONFIG_VIRTIO_BLK)	+= virtio_blk.o

obj-$(CONFIG_BLK_DEV_SX8)	+= sx8.o

obj-$(CONFIG_XEN_BLKDEV_BACKEND)	+= xen-blkback/

obj-$(CONFIG_BLK_DEV_DRBD)     += drbd/



obj-$(CONFIG_BLK_DEV_RSXX) += rsxx/

obj-$(CONFIG_ZRAM) += zram/

obj-$(CONFIG_BLK_DEV_RNBD)	+= rnbd/



swim_mod-y	:= swim.o swim_asm.o

# SPDX-License-Identifier: GPL-2.0

drbd-y := drbd_bitmap.o drbd_proc.o

drbd-y += drbd_main.o drbd_strings.o drbd_nl.o

drbd-y += drbd_nla.o

drbd-$(CONFIG_DEBUG_FS) += drbd_debugfs.o

obj-$(CONFIG_BLK_DEV_DRBD)     += drbd.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for ATA over Ethernet

#

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Parallel port IDE device drivers.



 7 October 2000, Bartlomiej Zolnierkiewicz <bkz@linux-ide.org>

# Rewritten to use lists instead of if-statements.

#

obj-$(CONFIG_PARIDE_PD)		+= pd.o

obj-$(CONFIG_PARIDE_PCD)	+= pcd.o

obj-$(CONFIG_PARIDE_PT)		+= pt.o

 SPDX-License-Identifier: GPL-2.0-or-later



ccflags-y := -I$(srctree)/drivers/infiniband/ulp/rtrs

		  rnbd-clt-sysfs.o \

		  rnbd-common.o

rnbd-server-y := rnbd-common.o \

		  rnbd-srv-dev.o \



obj-$(CONFIG_BLK_DEV_RNBD_SERVER) += rnbd-server.o

 SPDX-License-Identifier: GPL-2.0-only

zram-y	:=	zcomp.o zram_drv.o

obj-$(CONFIG_ZRAM)	+=	zram.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_BLK_DEV_RSXX) += rsxx.o

 SPDX-License-Identifier: GPL-2.0-only



xen-blkback-y	:= blkback.o xenbus.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for  Block device driver for Micron PCIe SSD





# SPDX-License-Identifier: GPL-2.0

 needed for trace events



null_blk-$(CONFIG_TRACING) 	+= trace.o

endif

null_blk-$(CONFIG_BLK_DEV_ZONED) += zoned.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#

# Object file lists.

obj-$(CONFIG_TC) += tc.o tc-driver.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux Bluetooth HCI device drivers.





obj-$(CONFIG_BT_HCIUART)	+= hci_uart.o

obj-$(CONFIG_BT_HCIBPA10X)	+= bpa10x.o



obj-$(CONFIG_BT_HCIBTSDIO)	+= btsdio.o

obj-$(CONFIG_BT_INTEL)		+= btintel.o

obj-$(CONFIG_BT_MRVL)		+= btmrvl.o

obj-$(CONFIG_BT_MRVL_SDIO)	+= btmrvl_sdio.o

obj-$(CONFIG_BT_MTKSDIO)	+= btmtksdio.o

obj-$(CONFIG_BT_MTKUART)	+= btmtkuart.o

obj-$(CONFIG_BT_QCOMSMD)	+= btqcomsmd.o

obj-$(CONFIG_BT_RTL)		+= btrtl.o



obj-$(CONFIG_BT_VIRTIO)		+= virtio_bt.o



obj-$(CONFIG_BT_HCIRSI)		+= btrsi.o



hci_uart-$(CONFIG_BT_HCIUART_SERDEV)	+= hci_serdev.o

hci_uart-$(CONFIG_BT_HCIUART_BCSP)	+= hci_bcsp.o

hci_uart-$(CONFIG_BT_HCIUART_ATH3K)	+= hci_ath.o

hci_uart-$(CONFIG_BT_HCIUART_3WIRE)	+= hci_h5.o

hci_uart-$(CONFIG_BT_HCIUART_BCM)	+= hci_bcm.o

hci_uart-$(CONFIG_BT_HCIUART_AG6XX)	+= hci_ag6xx.o

# SPDX-License-Identifier: GPL-2.0

				   tty_buffer.o tty_port.o tty_mutex.o \

				   tty_ldsem.o tty_baudrate.o tty_jobctrl.o \

				   n_null.o

obj-$(CONFIG_UNIX98_PTYS)	+= pty.o

obj-$(CONFIG_AUDIT)		+= tty_audit.o



obj-y				+= vt/



# tty drivers

obj-$(CONFIG_AMIGA_BUILTIN_SERIAL) += amiserial.o

obj-$(CONFIG_MOXA_INTELLIO)	+= moxa.o

obj-$(CONFIG_MOXA_SMARTIO)	+= mxser.o

obj-$(CONFIG_NOZOMI)		+= nozomi.o

obj-$(CONFIG_NULL_TTY)	        += ttynull.o

obj-$(CONFIG_GOLDFISH_TTY)	+= goldfish.o



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_HVC_CONSOLE)	+= hvc_vio.o hvsi_lib.o

obj-$(CONFIG_HVC_OLD_HVSI)	+= hvsi.o

obj-$(CONFIG_HVC_RTAS)		+= hvc_rtas.o

obj-$(CONFIG_HVC_DCC)		+= hvc_dcc.o

obj-$(CONFIG_HVC_DRIVER)	+= hvc_console.o

obj-$(CONFIG_HVC_IRQ)		+= hvc_irq.o

obj-$(CONFIG_HVC_XEN)		+= hvc_xen.o

obj-$(CONFIG_HVC_IUCV)		+= hvc_iucv.o

obj-$(CONFIG_HVC_UDBG)		+= hvc_udbg.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the kernel serial device drivers.







obj-$(CONFIG_SERIAL_EARLYCON) += earlycon.o

obj-$(CONFIG_SERIAL_EARLYCON_ARM_SEMIHOST) += earlycon-arm-semihost.o

obj-$(CONFIG_SERIAL_EARLYCON_RISCV_SBI) += earlycon-riscv-sbi.o

 These Sparc drivers have to appear before others such as 8250

 which share ttySx minor node space.  Otherwise console device

 names change and other unplesantries.



obj-$(CONFIG_SERIAL_21285) += 21285.o

 Now bring in any enabled 8250/16450/16550 type drivers.

obj-$(CONFIG_SERIAL_8250) += 8250/

obj-$(CONFIG_SERIAL_BCM63XX) += bcm63xx_uart.o

obj-$(CONFIG_SERIAL_SAMSUNG) += samsung_tty.o

obj-$(CONFIG_SERIAL_MAX3100) += max3100.o

obj-$(CONFIG_SERIAL_MAX310X) += max310x.o

obj-$(CONFIG_SERIAL_PMACZILOG) += pmac_zilog.o

obj-$(CONFIG_SERIAL_HS_LPC32XX) += lpc32xx_hs.o

obj-$(CONFIG_SERIAL_DZ) += dz.o

obj-$(CONFIG_SERIAL_ZS) += zs.o

obj-$(CONFIG_SERIAL_SH_SCI) += sh-sci.o

obj-$(CONFIG_SERIAL_CPM) += cpm_uart/

obj-$(CONFIG_SERIAL_IMX) += imx.o

obj-$(CONFIG_SERIAL_IMX_EARLYCON) += imx_earlycon.o

obj-$(CONFIG_SERIAL_MESON) += meson_uart.o

obj-$(CONFIG_SERIAL_SB1250_DUART) += sb1250-duart.o

obj-$(CONFIG_SERIAL_SCCNXP) += sccnxp.o

obj-$(CONFIG_SERIAL_JSM) += jsm/

obj-$(CONFIG_SERIAL_ATMEL) += atmel_serial.o

obj-$(CONFIG_SERIAL_UARTLITE) += uartlite.o

obj-$(CONFIG_SERIAL_QCOM_GENI) += qcom_geni_serial.o

obj-$(CONFIG_SERIAL_VT8500) += vt8500_serial.o

obj-$(CONFIG_SERIAL_PCH_UART)	+= pch_uart.o

obj-$(CONFIG_SERIAL_MXS_AUART) += mxs-auart.o

obj-$(CONFIG_SERIAL_LANTIQ)	+= lantiq.o

obj-$(CONFIG_SERIAL_TEGRA) += serial-tegra.o

obj-$(CONFIG_SERIAL_TEGRA_TCU) += tegra-tcu.o

obj-$(CONFIG_SERIAL_ARC)	+= arc_uart.o

obj-$(CONFIG_SERIAL_RP2)	+= rp2.o

obj-$(CONFIG_SERIAL_FSL_LPUART)	+= fsl_lpuart.o

obj-$(CONFIG_SERIAL_FSL_LINFLEXUART)	+= fsl_linflexuart.o

obj-$(CONFIG_SERIAL_MEN_Z135)	+= men_z135_uart.o

obj-$(CONFIG_SERIAL_PIC32)	+= pic32_uart.o

obj-$(CONFIG_SERIAL_MPS2_UART)	+= mps2-uart.o

obj-$(CONFIG_SERIAL_RDA)	+= rda-uart.o

obj-$(CONFIG_SERIAL_MILBEAUT_USIO) += milbeaut_usio.o

obj-$(CONFIG_SERIAL_SIFIVE)	+= sifive.o

obj-$(CONFIG_SERIAL_LITEUART) += liteuart.o

 GPIOLIB helpers for modem control lines

obj-$(CONFIG_SERIAL_MCTRL_GPIO)	+= serial_mctrl_gpio.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Motorola 8xx FEC ethernet controller

#

obj-$(CONFIG_SERIAL_CPM) += cpm_uart.o

# Select the correct platform objects.

cpm_uart-objs-$(CONFIG_CPM2)	+= cpm_uart_cpm2.o

cpm_uart-objs-$(CONFIG_CPM1)	+= cpm_uart_cpm1.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Jasmine adapter





obj-$(CONFIG_SERIAL_JSM) += jsm.o



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the 8250 serial device drivers.





obj-$(CONFIG_SERIAL_8250_GSC)		+= 8250_gsc.o

obj-$(CONFIG_SERIAL_8250_EXAR)		+= 8250_exar.o

obj-$(CONFIG_SERIAL_8250_CS)		+= serial_cs.o

obj-$(CONFIG_SERIAL_8250_BOCA)		+= 8250_boca.o

obj-$(CONFIG_SERIAL_8250_EXAR_ST16C554)	+= 8250_exar_st16c554.o

obj-$(CONFIG_SERIAL_8250_FSL)		+= 8250_fsl.o

obj-$(CONFIG_SERIAL_8250_MEN_MCB)	+= 8250_men_mcb.o

obj-$(CONFIG_SERIAL_8250_EM)		+= 8250_em.o

obj-$(CONFIG_SERIAL_8250_OMAP)		+= 8250_omap.o

obj-$(CONFIG_SERIAL_8250_LPC18XX)	+= 8250_lpc18xx.o

obj-$(CONFIG_SERIAL_8250_LPSS)		+= 8250_lpss.o

obj-$(CONFIG_SERIAL_8250_PXA)		+= 8250_pxa.o



# SPDX-License-Identifier: GPL-2.0

#

# This file contains the font map for the default (hardware) font

#

FONTMAPFILE = cp437.uni

obj-$(CONFIG_VT)			+= vt_ioctl.o vc_screen.o \

obj-$(CONFIG_CONSOLE_TRANSLATIONS)	+= consolemap.o consolemap_deftbl.o

obj-$(CONFIG_HW_CONSOLE)		+= vt.o defkeymap.o

 Files generated that shall be removed upon make clean

clean-files := consolemap_deftbl.c defkeymap.c

hostprogs += conmakehash

quiet_cmd_conmk = CONMK   $@



	$(call cmd,conmk)



# Uncomment if you're changing the keymap and have an appropriate

# loadkeys version for the map. By default, we'll use the shipped

# versions.

 GENERATE_KEYMAP := 1



ifdef GENERATE_KEYMAP

$(obj)/defkeymap.c: $(obj)/%.c: $(src)/%.map

	loadkeys --mktable $< > $@

# SPDX-License-Identifier: GPL-2.0

serdev-objs := core.o

obj-$(CONFIG_SERIAL_DEV_BUS) += serdev.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the IPWireless driver







ipwireless-y := hardware.o main.o network.o tty.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for nfc devices





obj-$(CONFIG_NFC_PN544)		+= pn544/

obj-$(CONFIG_NFC_MICROREAD)	+= microread/

obj-$(CONFIG_NFC_MEI_PHY)	+= mei_phy.o

obj-$(CONFIG_NFC_PORT100)	+= port100.o

obj-$(CONFIG_NFC_MRVL)		+= nfcmrvl/

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Samsung S3FWRN5 NFC driver





s3fwrn5-objs = core.o firmware.o nci.o phy_common.o



obj-$(CONFIG_NFC_S3FWRN5_I2C) += s3fwrn5_i2c.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for PN533 NFC driver





obj-$(CONFIG_NFC_PN533_USB) += pn533_usb.o

obj-$(CONFIG_NFC_PN532_UART) += pn532_uart.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for PN544 HCI based NFC driver





pn544_i2c-objs  = i2c.o

pn544_mei-objs  = mei.o

obj-$(CONFIG_NFC_PN544)     += pn544.o

obj-$(CONFIG_NFC_PN544_MEI) += pn544_mei.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for FDP NCI based NFC driver





obj-$(CONFIG_NFC_FDP_I2C) += fdp_i2c.o



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Microread HCI based NFC driver

#



obj-$(CONFIG_NFC_MICROREAD_I2C) += microread_i2c.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for ST_NCI NCI based NFC driver





obj-$(CONFIG_NFC_ST_NCI)     += st-nci.o

obj-$(CONFIG_NFC_ST_NCI_I2C) += st-nci_i2c.o

obj-$(CONFIG_NFC_ST_NCI_SPI) += st-nci_spi.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for ST21NFCA HCI based NFC driver

#

obj-$(CONFIG_NFC_ST21NFCA)     += st21nfca_hci.o

st21nfca_i2c-objs  = i2c.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for STMicroelectronics NFC transceiver ST95HF

#

obj-$(CONFIG_NFC_ST95HF)	+= st95hf.o

st95hf-objs			:= spi.o core.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for NFCMRVL NCI based NFC driver

#









 SPDX-License-Identifier: GPL-2.0-only



 Makefile for NXP-NCI NFC driver





nxp-nci_i2c-objs = i2c.o

obj-$(CONFIG_NFC_NXP_NCI) += nxp-nci.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_GDROM)	+= gdrom.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for memory devices

#

obj-$(CONFIG_DDR)		+= jedec_ddr_data.o

obj-$(CONFIG_OF)		+= of_memory.o

endif

obj-$(CONFIG_ARM_PL172_MPMC)	+= pl172.o

obj-$(CONFIG_BRCMSTB_DPFE)	+= brcmstb_dpfe.o

obj-$(CONFIG_TI_EMIF)		+= emif.o

obj-$(CONFIG_OMAP_GPMC)		+= omap-gpmc.o

obj-$(CONFIG_MVEBU_DEVBUS)	+= mvebu-devbus.o

obj-$(CONFIG_DA8XX_DDRCTL)	+= da8xx-ddrctl.o

obj-$(CONFIG_PL353_SMC)		+= pl353-smc.o

obj-$(CONFIG_RENESAS_RPCIF)	+= renesas-rpc-if.o



obj-$(CONFIG_TI_EMIF_SRAM)	+= ti-emif-sram.o

obj-$(CONFIG_FPGA_DFL_EMIF)	+= dfl-emif.o

ti-emif-sram-objs		:= ti-emif-pm.o ti-emif-sram-pm.o





$(obj)/ti-emif-asm-offsets.h: $(obj)/emif-asm-offsets.s FORCE



targets += emif-asm-offsets.s

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_EXYNOS_SROM)	+= exynos-srom.o

# SPDX-License-Identifier: GPL-2.0



tegra-mc-$(CONFIG_ARCH_TEGRA_3x_SOC)  += tegra30.o

tegra-mc-$(CONFIG_ARCH_TEGRA_114_SOC) += tegra114.o

tegra-mc-$(CONFIG_ARCH_TEGRA_124_SOC) += tegra124.o

tegra-mc-$(CONFIG_ARCH_TEGRA_132_SOC) += tegra124.o

tegra-mc-$(CONFIG_ARCH_TEGRA_210_SOC) += tegra210.o

tegra-mc-$(CONFIG_ARCH_TEGRA_186_SOC) += tegra186.o





obj-$(CONFIG_TEGRA20_EMC)  += tegra20-emc.o

obj-$(CONFIG_TEGRA30_EMC)  += tegra30-emc.o

obj-$(CONFIG_TEGRA210_EMC_TABLE) += tegra210-emc-table.o

obj-$(CONFIG_ARCH_TEGRA_186_SOC) += tegra186-emc.o



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for multiplexer devices.

#

mux-adg792a-objs		:= adg792a.o



obj-$(CONFIG_MULTIPLEXER)	+= mux-core.o

obj-$(CONFIG_MUX_ADGS1408)	+= mux-adgs1408.o

obj-$(CONFIG_MUX_GPIO)		+= mux-gpio.o

obj-$(CONFIG_MUX_MMIO)		+= mux-mmio.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for RTC class/drivers.

#

ccflags-$(CONFIG_RTC_DEBUG)	:= -DDEBUG

obj-$(CONFIG_RTC_CLASS)		+= rtc-core.o



rtc-core-$(CONFIG_RTC_INTF_PROC)	+= proc.o





 Keep the list ordered.



obj-$(CONFIG_RTC_DRV_88PM860X)	+= rtc-88pm860x.o

obj-$(CONFIG_RTC_DRV_ABB5ZES3)	+= rtc-ab-b5ze-s3.o

obj-$(CONFIG_RTC_DRV_ABEOZ9)	+= rtc-ab-eoz9.o

obj-$(CONFIG_RTC_DRV_AC100)	+= rtc-ac100.o

obj-$(CONFIG_RTC_DRV_AS3722)	+= rtc-as3722.o

obj-$(CONFIG_RTC_DRV_ASPEED)	+= rtc-aspeed.o

obj-$(CONFIG_RTC_DRV_AT91RM9200)+= rtc-at91rm9200.o

obj-$(CONFIG_RTC_DRV_AU1XXX)	+= rtc-au1xxx.o

obj-$(CONFIG_RTC_DRV_BQ32K)	+= rtc-bq32k.o

obj-$(CONFIG_RTC_DRV_BRCMSTB)	+= rtc-brcmstb-waketimer.o

obj-$(CONFIG_RTC_DRV_CMOS)	+= rtc-cmos.o

obj-$(CONFIG_RTC_DRV_CROS_EC)	+= rtc-cros-ec.o

obj-$(CONFIG_RTC_DRV_DA9055)	+= rtc-da9055.o

obj-$(CONFIG_RTC_DRV_DAVINCI)	+= rtc-davinci.o

obj-$(CONFIG_RTC_DRV_DM355EVM)	+= rtc-dm355evm.o

obj-$(CONFIG_RTC_DRV_DS1286)	+= rtc-ds1286.o

obj-$(CONFIG_RTC_DRV_DS1305)	+= rtc-ds1305.o

obj-$(CONFIG_RTC_DRV_DS1343)	+= rtc-ds1343.o

obj-$(CONFIG_RTC_DRV_DS1374)	+= rtc-ds1374.o

obj-$(CONFIG_RTC_DRV_DS1511)	+= rtc-ds1511.o

obj-$(CONFIG_RTC_DRV_DS1672)	+= rtc-ds1672.o

obj-$(CONFIG_RTC_DRV_DS1685_FAMILY)	+= rtc-ds1685.o

obj-$(CONFIG_RTC_DRV_DS2404)	+= rtc-ds2404.o

obj-$(CONFIG_RTC_DRV_EFI)	+= rtc-efi.o

obj-$(CONFIG_RTC_DRV_EP93XX)	+= rtc-ep93xx.o

obj-$(CONFIG_RTC_DRV_FSL_FTM_ALARM)	+= rtc-fsl-ftm-alarm.o

obj-$(CONFIG_RTC_DRV_GENERIC)	+= rtc-generic.o

obj-$(CONFIG_RTC_DRV_HID_SENSOR_TIME) += rtc-hid-sensor-time.o

obj-$(CONFIG_RTC_DRV_IMXDI)	+= rtc-imxdi.o

obj-$(CONFIG_RTC_DRV_ISL12022)	+= rtc-isl12022.o

obj-$(CONFIG_RTC_DRV_ISL1208)	+= rtc-isl1208.o

obj-$(CONFIG_RTC_DRV_LP8788)	+= rtc-lp8788.o

obj-$(CONFIG_RTC_DRV_LPC32XX)	+= rtc-lpc32xx.o

obj-$(CONFIG_RTC_DRV_M41T93)	+= rtc-m41t93.o

obj-$(CONFIG_RTC_DRV_M48T35)	+= rtc-m48t35.o

obj-$(CONFIG_RTC_DRV_M48T86)	+= rtc-m48t86.o

obj-$(CONFIG_RTC_DRV_MAX6902)	+= rtc-max6902.o

obj-$(CONFIG_RTC_DRV_MAX77686)	+= rtc-max77686.o

obj-$(CONFIG_RTC_DRV_MAX8925)	+= rtc-max8925.o

obj-$(CONFIG_RTC_DRV_MAX8998)	+= rtc-max8998.o

obj-$(CONFIG_RTC_DRV_MESON_VRTC)+= rtc-meson-vrtc.o

obj-$(CONFIG_RTC_DRV_MCP795)	+= rtc-mcp795.o

obj-$(CONFIG_RTC_DRV_MOXART)	+= rtc-moxart.o

obj-$(CONFIG_RTC_DRV_MSC313)	+= rtc-msc313.o

obj-$(CONFIG_RTC_DRV_MT2712)	+= rtc-mt2712.o

obj-$(CONFIG_RTC_DRV_MT7622)	+= rtc-mt7622.o

obj-$(CONFIG_RTC_DRV_MXC)	+= rtc-mxc.o

obj-$(CONFIG_RTC_DRV_NTXEC)	+= rtc-ntxec.o

obj-$(CONFIG_RTC_DRV_OPAL)	+= rtc-opal.o

obj-$(CONFIG_RTC_DRV_PCAP)	+= rtc-pcap.o

obj-$(CONFIG_RTC_DRV_PCF2127)	+= rtc-pcf2127.o

obj-$(CONFIG_RTC_DRV_PCF85063)	+= rtc-pcf85063.o

obj-$(CONFIG_RTC_DRV_PCF85363)	+= rtc-pcf85363.o

obj-$(CONFIG_RTC_DRV_PCF8583)	+= rtc-pcf8583.o

obj-$(CONFIG_RTC_DRV_PL030)	+= rtc-pl030.o

obj-$(CONFIG_RTC_DRV_PM8XXX)	+= rtc-pm8xxx.o

obj-$(CONFIG_RTC_DRV_PXA)	+= rtc-pxa.o

obj-$(CONFIG_RTC_DRV_R9701)	+= rtc-r9701.o

obj-$(CONFIG_RTC_DRV_RC5T619)	+= rtc-rc5t619.o

obj-$(CONFIG_RTC_DRV_RP5C01)	+= rtc-rp5c01.o

obj-$(CONFIG_RTC_DRV_RS5C348)	+= rtc-rs5c348.o

obj-$(CONFIG_RTC_DRV_RTD119X)	+= rtc-rtd119x.o

obj-$(CONFIG_RTC_DRV_RV3029C2)	+= rtc-rv3029c2.o

obj-$(CONFIG_RTC_DRV_RV8803)	+= rtc-rv8803.o

obj-$(CONFIG_RTC_DRV_RX6110)	+= rtc-rx6110.o

obj-$(CONFIG_RTC_DRV_RX8025)	+= rtc-rx8025.o

obj-$(CONFIG_RTC_DRV_S35390A)	+= rtc-s35390a.o

obj-$(CONFIG_RTC_DRV_S5M)	+= rtc-s5m.o

obj-$(CONFIG_RTC_DRV_SC27XX)	+= rtc-sc27xx.o

obj-$(CONFIG_RTC_DRV_SH)	+= rtc-sh.o

obj-$(CONFIG_RTC_DRV_SPEAR)	+= rtc-spear.o

obj-$(CONFIG_RTC_DRV_STK17TA8)	+= rtc-stk17ta8.o

obj-$(CONFIG_RTC_DRV_STMP)	+= rtc-stmp3xxx.o

obj-$(CONFIG_RTC_DRV_SUN6I)	+= rtc-sun6i.o

obj-$(CONFIG_RTC_DRV_TEGRA)	+= rtc-tegra.o

obj-$(CONFIG_RTC_DRV_TPS6586X)	+= rtc-tps6586x.o

obj-$(CONFIG_RTC_DRV_TWL4030)	+= rtc-twl.o

obj-$(CONFIG_RTC_DRV_VR41XX)	+= rtc-vr41xx.o

obj-$(CONFIG_RTC_DRV_WILCO_EC)	+= rtc-wilco-ec.o

obj-$(CONFIG_RTC_DRV_WM8350)	+= rtc-wm8350.o

obj-$(CONFIG_RTC_DRV_XGENE)	+= rtc-xgene.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CRYPTO_DEV_CAVIUM_ZIP) += cavium/

obj-$(CONFIG_CRYPTO_DEV_CCREE) += ccree/

obj-$(CONFIG_CRYPTO_DEV_IMGTEC_HASH) += img-hash.o

obj-$(CONFIG_CRYPTO_DEV_MARVELL) += marvell/

obj-$(CONFIG_CRYPTO_DEV_MXS_DCP) += mxs-dcp.o

obj-$(CONFIG_CRYPTO_DEV_NX) += nx/

obj-$(CONFIG_CRYPTO_DEV_OMAP_AES) += omap-aes-driver.o

omap-aes-driver-objs := omap-aes.o omap-aes-gcm.o

obj-$(CONFIG_CRYPTO_DEV_OMAP_DES) += omap-des.o

obj-$(CONFIG_CRYPTO_DEV_OMAP_SHAM) += omap-sham.o

obj-$(CONFIG_CRYPTO_DEV_PADLOCK_AES) += padlock-aes.o

obj-$(CONFIG_CRYPTO_DEV_PADLOCK_SHA) += padlock-sha.o

obj-$(CONFIG_CRYPTO_DEV_QAT) += qat/

obj-$(CONFIG_CRYPTO_DEV_ROCKCHIP) += rockchip/

obj-$(CONFIG_CRYPTO_DEV_S5P) += s5p-sss.o

obj-$(CONFIG_CRYPTO_DEV_SA2UL) += sa2ul.o

obj-$(CONFIG_CRYPTO_DEV_SAHARA) += sahara.o

obj-$(CONFIG_ARCH_STM32) += stm32/

obj-$(CONFIG_CRYPTO_DEV_TALITOS) += talitos.o

obj-$(CONFIG_CRYPTO_DEV_VIRTIO) += virtio/

obj-$(CONFIG_CRYPTO_DEV_BCM_SPU) += bcm/

obj-$(CONFIG_CRYPTO_DEV_SAFEXCEL) += inside-secure/

obj-$(CONFIG_CRYPTO_DEV_ARTPEC6) += axis/

obj-$(CONFIG_CRYPTO_DEV_AMLOGIC_GXL) += amlogic/

obj-y += keembay/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CRYPTO_DEV_PPC4XX) += crypto4xx.o

crypto4xx-$(CONFIG_HW_RANDOM_PPC4XX) += crypto4xx_trng.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CRYPTO_DEV_ARTPEC6) := artpec6_crypto.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CRYPTO_DEV_MARVELL_CESA) += cesa/

obj-$(CONFIG_CRYPTO_DEV_OCTEONTX2_CPT) += octeontx2/

# SPDX-License-Identifier: GPL-2.0



 SPDX-License-Identifier: GPL-2.0-only

marvell-cesa-objs := cesa.o cipher.o hash.o tdma.o

 SPDX-License-Identifier: GPL-2.0-only



rvu_cptpf-objs := otx2_cptpf_main.o otx2_cptpf_mbox.o \

rvu_cptvf-objs := otx2_cptvf_main.o otx2_cptvf_mbox.o otx2_cptlf.o \



ccflags-y += -I$(srctree)/drivers/net/ethernet/marvell/octeontx2/af

obj-$(CONFIG_CRYPTO_DEV_AMLOGIC_GXL) += amlogic-gxl-crypto.o

amlogic-gxl-crypto-y := amlogic-gxl-core.o amlogic-gxl-cipher.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CRYPTO_DEV_QAT) += qat_common/

obj-$(CONFIG_CRYPTO_DEV_QAT_C3XXX) += qat_c3xxx/

obj-$(CONFIG_CRYPTO_DEV_QAT_4XXX) += qat_4xxx/

obj-$(CONFIG_CRYPTO_DEV_QAT_C3XXXVF) += qat_c3xxxvf/

 SPDX-License-Identifier: (BSD-3-Clause OR GPL-2.0-only)

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CRYPTO_DEV_QAT) += intel_qat.o

intel_qat-objs := adf_cfg.o \

	adf_ctl_drv.o \

	adf_aer.o \

	adf_admin.o \

	adf_hw_arbiter.o \

	adf_gen2_hw_data.o \

	adf_gen4_hw_data.o \

	qat_crypto.o \

	qat_algs.o \

	qat_hal.o

intel_qat-$(CONFIG_PCI_IOV) += adf_sriov.o adf_pf2vf_msg.o \

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Cavium crypto device drivers



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CRYPTO_DEV_NITROX_CNN55XX) += n5pf.o

n5pf-objs := nitrox_main.o \

	nitrox_isr.o \

	nitrox_lib.o \

	nitrox_hal.o \

	nitrox_algs.o	\

	nitrox_mbx.o	\

	nitrox_aead.o

n5pf-$(CONFIG_PCI_IOV) += nitrox_sriov.o

n5pf-$(CONFIG_DEBUG_FS) += nitrox_debugfs.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Cavium's ZIP Driver.

#

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CRYPTO_DEV_HISI_HPRE) += hpre/

obj-$(CONFIG_CRYPTO_DEV_HISI_SEC) += sec/

obj-$(CONFIG_CRYPTO_DEV_HISI_SEC2) += sec2/

obj-$(CONFIG_CRYPTO_DEV_HISI_QM) += hisi_qm.o

hisi_qm-objs = qm.o sgl.o

obj-$(CONFIG_CRYPTO_DEV_HISI_ZIP) += zip/

obj-$(CONFIG_CRYPTO_DEV_HISI_TRNG) += trng/

hisi_hpre-objs = hpre_main.o hpre_crypto.o

hisi_sec2-objs = sec_main.o sec_crypto.o

obj-$(CONFIG_CRYPTO_DEV_HISI_TRNG) += hisi-trng-v2.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CRYPTO_DEV_HISI_SEC) += hisi_sec.o

hisi_sec-y = sec_algs.o sec_drv.o

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the CAAM backend and dependent components





ccflags-y += -DVERSION=\"\"



caam_jr-$(CONFIG_CRYPTO_DEV_FSL_CAAM_RNG_API) += caamrng.o

caam_jr-$(CONFIG_CRYPTO_DEV_FSL_CAAM_PKC_API) += caampkc.o pkc_desc.o

caam-$(CONFIG_CRYPTO_DEV_FSL_CAAM_CRYPTO_API_QI) += qi.o

	ccflags-y += -DCONFIG_CAAM_QI

endif

caam-$(CONFIG_DEBUG_FS) += debugfs.o



dpaa2_caam-y    := caamalg_qi2.o dpseci.o

dpaa2_caam-$(CONFIG_DEBUG_FS) += dpseci-debugfs.o

obj-$(CONFIG_CRYPTO_DEV_SUN4I_SS) += sun4i-ss/

obj-$(CONFIG_CRYPTO_DEV_SUN8I_SS) += sun8i-ss/

sun8i-ss-$(CONFIG_CRYPTO_DEV_SUN8I_SS_PRNG) += sun8i-ss-prng.o

sun8i-ce-$(CONFIG_CRYPTO_DEV_SUN8I_CE_HASH) += sun8i-ce-hash.o

sun8i-ce-$(CONFIG_CRYPTO_DEV_SUN8I_CE_TRNG) += sun8i-ce-trng.o

 SPDX-License-Identifier: GPL-2.0-only

sun4i-ss-$(CONFIG_CRYPTO_DEV_SUN4I_SS_PRNG) += sun4i-ss-prng.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CRYPTO_DEV_ROCKCHIP) += rk_crypto.o

rk_crypto-objs := rk3288_crypto.o \

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 File: drivers/crypto/bcm/Makefile



# Makefile for crypto acceleration files for Broadcom SPU driver

#

 Uncomment to enable debug tracing in the SPU driver.

# CFLAGS_util.o := -DDEBUG

 CFLAGS_cipher.o := -DDEBUG

 CFLAGS_spu.o := -DDEBUG

# CFLAGS_spu2.o := -DDEBUG

obj-$(CONFIG_CRYPTO_DEV_BCM_SPU) := bcm_crypto_spu.o

bcm_crypto_spu-objs :=  util.o spu.o spu2.o cipher.o

# SPDX-License-Identifier: GPL-2.0

nx-crypto-objs := nx.o \

		  nx-aes-cbc.o \

		  nx-aes-gcm.o \

		  nx-aes-ctr.o \

		  nx-aes-xcbc.o \

		  nx-sha256.o \

		  nx-sha512.o

nx-compress-objs := nx-842.o

nx-compress-pseries-objs := nx-common-pseries.o

nx-compress-powernv-objs := nx-common-powernv.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CRYPTO_DEV_QCE) += qcrypto.o

		common.o \

		dma.o

obj-$(CONFIG_CRYPTO_DEV_SL3516) += sl3516-ce.o

# SPDX-License-Identifier: GPL-2.0

vmx-crypto-objs := vmx.o aesp8-ppc.o ghashp8-ppc.o aes.o aes_cbc.o aes_ctr.o aes_xts.o ghash.o

ifeq ($(CONFIG_CPU_LITTLE_ENDIAN),y)

override flavour := linux-ppc64le







$(obj)/aesp8-ppc.S: $(src)/aesp8-ppc.pl FORCE

  

$(obj)/ghashp8-ppc.S: $(src)/ghashp8-ppc.pl FORCE



# SPDX-License-Identifier: GPL-2.0

	virtio_crypto_mgr.o \

	virtio_crypto_core.o

# SPDX-License-Identifier: GPL-2.0

ccp-$(CONFIG_CRYPTO_DEV_SP_CCP) += ccp-dev.o \

	    ccp-dmaengine.o

ccp-$(CONFIG_CRYPTO_DEV_CCP_DEBUGFS) += ccp-debugfs.o

ccp-$(CONFIG_PCI) += sp-pci.o

                                   sev-dev.o \



obj-$(CONFIG_CRYPTO_DEV_CCP_CRYPTO) += ccp-crypto.o

		   ccp-crypto-aes-cmac.o \

		   ccp-crypto-aes-xts.o \

		   ccp-crypto-des3.o \

		   ccp-crypto-rsa.o \

		   ccp-crypto-sha.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_CRYPTO_DEV_SAFEXCEL) += crypto_safexcel.o



# Makefile for Intel Keem Bay OCS Crypto API Linux drivers

#

obj-$(CONFIG_CRYPTO_DEV_KEEMBAY_OCS_AES_SM4) += keembay-ocs-aes.o



obj-$(CONFIG_CRYPTO_DEV_KEEMBAY_OCS_ECC) += keembay-ocs-ecc.o

keembay-ocs-hcu-objs := keembay-ocs-hcu-core.o ocs-hcu.o

 SPDX-License-Identifier: GPL-2.0-only



 Copyright (C) ST-Ericsson SA 2010

# Author: Shujuan Chen (shujuan.chen@stericsson.com)

#

obj-$(CONFIG_CRYPTO_DEV_UX500_HASH) += hash/

 SPDX-License-Identifier: GPL-2.0-only



 Copyright (C) ST-Ericsson SA 2010

# Author: Shujuan Chen (shujuan.chen@stericsson.com)

#

ifdef CONFIG_CRYPTO_DEV_UX500_DEBUG

CFLAGS_hash_core.o := -DDEBUG

endif

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2010

# * Author: shujuan.chen@stericsson.com for ST-Ericsson.

 */



ccflags-$(CONFIG_CRYPTO_DEV_UX500_DEBUG) += -DDEBUG

# SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2012-2019 ARM Limited (or its affiliates).



obj-$(CONFIG_CRYPTO_DEV_CCREE) := ccree.o

ccree-y := cc_driver.o cc_buffer_mgr.o cc_request_mgr.o cc_cipher.o cc_hash.o cc_aead.o cc_sram_mgr.o

ccree-$(CONFIG_DEBUG_FS) += cc_debugfs.o

ccree-$(CONFIG_PM) += cc_pm.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux Kernel SOC specific device drivers.





obj-$(CONFIG_ARCH_AT91)		+= atmel/

obj-y				+= fsl/

obj-y				+= imx/

obj-y				+= ixp4xx/

obj-$(CONFIG_LITEX_SOC_CONTROLLER) += litex/

obj-y				+= mediatek/

obj-y				+= renesas/

obj-y				+= sunxi/

obj-$(CONFIG_ARCH_U8500)	+= ux500/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MESON_CANVAS) += meson-canvas.o

obj-$(CONFIG_MESON_GX_SOCINFO) += meson-gx-socinfo.o

obj-$(CONFIG_MESON_MX_SOCINFO) += meson-mx-socinfo.o

obj-$(CONFIG_MESON_SECURE_PM_DOMAINS) += meson-secure-pwrc.o

# SPDX-License-Identifier: GPL-2.0

CFLAGS_rpmh-rsc.o := -I$(src)

obj-$(CONFIG_QCOM_GENI_SE) +=	qcom-geni-se.o

obj-$(CONFIG_QCOM_COMMAND_DB) += cmd-db.o

obj-$(CONFIG_QCOM_GSBI)	+=	qcom_gsbi.o

obj-$(CONFIG_QCOM_MDT_LOADER)	+= mdt_loader.o

obj-$(CONFIG_QCOM_OCMEM)	+= ocmem.o

obj-$(CONFIG_QCOM_PDR_HELPERS)	+= pdr_interface.o

obj-$(CONFIG_QCOM_QMI_HELPERS)	+= qmi_helpers.o

qmi_helpers-y	+= qmi_encdec.o qmi_interface.o

obj-$(CONFIG_QCOM_RMTFS_MEM)	+= rmtfs_mem.o

obj-$(CONFIG_QCOM_RPMH)		+= qcom_rpmh.o

qcom_rpmh-y			+= rpmh-rsc.o

qcom_rpmh-y			+= rpmh.o

obj-$(CONFIG_QCOM_SMD_RPM)	+= smd-rpm.o

obj-$(CONFIG_QCOM_SMEM) +=	smem.o

obj-$(CONFIG_QCOM_SMEM_STATE) += smem_state.o

obj-$(CONFIG_QCOM_SMP2P)	+= smp2p.o

obj-$(CONFIG_QCOM_SMSM)	+= smsm.o

obj-$(CONFIG_QCOM_SOCINFO)	+= socinfo.o

obj-$(CONFIG_QCOM_STATS)	+= qcom_stats.o

obj-$(CONFIG_QCOM_WCNSS_CTRL) += wcnss_ctrl.o

obj-$(CONFIG_QCOM_APR) += apr.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_ZYNQMP_PM_DOMAINS) += zynqmp_pm_domains.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_EXYNOS_ASV_ARM)	+= exynos5422-asv.o





					exynos5250-pmu.o exynos5420-pmu.o

obj-$(CONFIG_EXYNOS_PM_DOMAINS) += pm_domains.o



obj-$(CONFIG_SAMSUNG_PM_DEBUG)	+= s3c-pm-debug.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ASPEED_UART_ROUTING)	+= aspeed-uart-routing.o

obj-$(CONFIG_ASPEED_P2A_CTRL)		+= aspeed-p2a-ctrl.o

obj-$(CONFIG_ASPEED_SOCINFO)		+= aspeed-socinfo.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SIFIVE_L2)	+= sifive_l2_cache.o

 SPDX-License-Identifier: GPL-2.0+



obj-$(CONFIG_OWL_PM_DOMAINS_HELPER) += owl-sps-helper.o

obj-$(CONFIG_OWL_PM_DOMAINS) += owl-sps.o

# SPDX-License-Identifier: GPL-2.0

# Generic, must be first because of soc_device_register()



# SoC

obj-$(CONFIG_SYSC_R8A7743)	+= r8a7743-sysc.o

obj-$(CONFIG_SYSC_R8A77470)	+= r8a77470-sysc.o

obj-$(CONFIG_SYSC_R8A774B1)	+= r8a774b1-sysc.o

obj-$(CONFIG_SYSC_R8A774E1)	+= r8a774e1-sysc.o

obj-$(CONFIG_SYSC_R8A7790)	+= r8a7790-sysc.o

obj-$(CONFIG_SYSC_R8A7792)	+= r8a7792-sysc.o

obj-$(CONFIG_SYSC_R8A7795)	+= r8a7795-sysc.o

obj-$(CONFIG_SYSC_R8A77960)	+= r8a7796-sysc.o

obj-$(CONFIG_SYSC_R8A77961)	+= r8a7796-sysc.o

obj-$(CONFIG_SYSC_R8A77970)	+= r8a77970-sysc.o

obj-$(CONFIG_SYSC_R8A77990)	+= r8a77990-sysc.o

obj-$(CONFIG_SYSC_R8A779A0)	+= r8a779a0-sysc.o



 Family

obj-$(CONFIG_SYSC_RMOBILE)	+= rmobile-sysc.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SOC_K210_SYSCTL)	+= k210-sysctl.o

 SPDX-License-Identifier: GPL-2.0-only



# Rockchip Soc drivers

#

obj-$(CONFIG_ROCKCHIP_GRF) += grf.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_IXP4XX_QMGR)	+= ixp4xx-qmgr.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_AT91_SOC_ID) += soc.o

obj-$(CONFIG_AT91_SOC_SFR) += sfr.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_BCM2835_POWER)	+= bcm2835-power.o

obj-y				+= bcm63xx/

obj-$(CONFIG_SOC_BRCMSTB)	+= brcmstb/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_BCM63XX_POWER) += bcm63xx-power.o

obj-$(CONFIG_BCM_PMB)		+= bcm-pmb.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y				+= common.o biuctrl.o

obj-$(CONFIG_BRCMSTB_PM)	+= pm/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_BMIPS_GENERIC)	+= s2-mips.o s3-mips.o pm-mips.o

# SPDX-License-Identifier: GPL-2.0

obj-y	+= soc-gemini.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MTK_DEVAPC) += mtk-devapc.o

obj-$(CONFIG_MTK_PMIC_WRAP) += mtk-pmic-wrap.o

obj-$(CONFIG_MTK_MMSYS) += mtk-mmsys.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SUNXI_MBUS) +=	sunxi_mbus.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux Kernel SOC fsl specific device drivers





obj-$(CONFIG_QUICC_ENGINE)		+= qe/

obj-$(CONFIG_FSL_RCPM)			+= rcpm.o

obj-$(CONFIG_FSL_MC_DPIO) 		+= dpio/

obj-$(CONFIG_DPAA2_CONSOLE)		+= dpaa2-console.o

# SPDX-License-Identifier: GPL-2.0

#

# QorIQ DPAA2 DPIO driver

#

obj-$(CONFIG_FSL_MC_DPIO) += fsl-mc-dpio.o

fsl-mc-dpio-objs := dpio.o qbman-portal.o dpio-service.o dpio-driver.o

# SPDX-License-Identifier: GPL-2.0

						   bman_portal.o qman_portal.o \

						   bman.o qman.o dpaa_sys.o

obj-$(CONFIG_FSL_BMAN_TEST)                     += bman-test.o

bman-test-$(CONFIG_FSL_BMAN_TEST_API)           += bman_test_api.o

obj-$(CONFIG_FSL_QMAN_TEST)			+= qman-test.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the linux ppc-specific parts of QE

#

obj-$(CONFIG_QUICC_ENGINE)+= qe.o qe_common.o qe_ic.o qe_io.o

obj-$(CONFIG_UCC)	+= ucc.o

obj-$(CONFIG_UCC_FAST)	+= ucc_fast.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SOC_REALVIEW)	+= soc-realview.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_UX500_SOC_ID) += ux500-soc-id.o

# SPDX-License-Identifier: GPL-2.0



obj-y += common.o

obj-$(CONFIG_SOC_TEGRA_PMC) += pmc.o

obj-$(CONFIG_ARCH_TEGRA_186_SOC) += ari-tegra186.o

# SPDX-License-Identifier: GPL-2.0

obj-y					+= fuse-tegra.o

obj-y					+= fuse-tegra30.o

obj-$(CONFIG_ARCH_TEGRA_2x_SOC)		+= fuse-tegra20.o

obj-$(CONFIG_ARCH_TEGRA_3x_SOC)		+= speedo-tegra30.o

obj-$(CONFIG_ARCH_TEGRA_114_SOC)	+= speedo-tegra114.o

obj-$(CONFIG_ARCH_TEGRA_124_SOC)	+= speedo-tegra124.o

obj-$(CONFIG_ARCH_TEGRA_132_SOC)	+= speedo-tegra124.o

obj-$(CONFIG_ARCH_TEGRA_210_SOC)	+= speedo-tegra210.o

# SPDX-License-Identifier: GPL-2.0

#

# TI Keystone SOC drivers

#

knav_qmss-y := knav_qmss_queue.o knav_qmss_acc.o

obj-$(CONFIG_TI_K3_RINGACC)		+= k3-ringacc.o

obj-$(CONFIG_POWER_AVS_OMAP)		+= smartreflex.o

 SPDX-License-Identifier: GPL-2.0-only

ifeq ($(CONFIG_ARM),y)

obj-$(CONFIG_ARCH_MXC) += soc-imx.o

endif

obj-$(CONFIG_HAVE_IMX_GPC) += gpc.o

obj-$(CONFIG_IMX_GPCV2_PM_DOMAINS) += gpcv2.o

# SPDX-License_Identifier: GPL-2.0

obj-$(CONFIG_LITEX_SOC_CONTROLLER)	+= litex_soc_ctrl.o

# SPDX-License-Identifier: GPL-2.0

 Greybus core

greybus-y :=	core.o		\

		debugfs.o	\

		hd.o		\

		module.o	\

		interface.o	\

		connection.o	\

		control.o	\

		svc_watchdog.o	\

		operation.o



# needed for trace events

ccflags-y += -I$(src)

 Greybus Host controller drivers



obj-$(CONFIG_GREYBUS_ES2)	+= gb-es2.o



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the PCI bus specific drivers.



				   pci-sysfs.o rom.o setup-res.o irq.o vpd.o \



obj-$(CONFIG_PCI)		+= pcie/

ifdef CONFIG_PCI

obj-$(CONFIG_SYSFS)		+= slot.o

obj-$(CONFIG_ACPI)		+= pci-acpi.o

endif

obj-$(CONFIG_PCI_QUIRKS)	+= quirks.o

obj-$(CONFIG_HOTPLUG_PCI)	+= hotplug/

obj-$(CONFIG_PCI_ATS)		+= ats.o

obj-$(CONFIG_PCI_IOV)		+= iov.o

obj-$(CONFIG_X86_INTEL_MID)	+= pci-mid.o

obj-$(CONFIG_PCI_PF_STUB)	+= pci-pf-stub.o

obj-$(CONFIG_PCI_ECAM)		+= ecam.o



# Endpoint library must be initialized before its users

obj-$(CONFIG_PCI_ENDPOINT)	+= endpoint/



subdir-ccflags-$(CONFIG_PCI_DEBUG) := -DDEBUG

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for PCI Express features and port driver

pcieportdrv-y			:= portdrv_core.o portdrv_pci.o rcec.o

obj-$(CONFIG_PCIEPORTBUS)	+= pcieportdrv.o

obj-$(CONFIG_PCIEAER_INJECT)	+= aer_inject.o

obj-$(CONFIG_PCIE_DPC)		+= dpc.o

obj-$(CONFIG_PCIE_EDR)		+= edr.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PCI_FTPCI100) += pci-ftpci100.o

obj-$(CONFIG_PCI_HYPERV) += pci-hyperv.o

obj-$(CONFIG_PCI_HYPERV_INTERFACE) += pci-hyperv-intf.o

obj-$(CONFIG_PCI_AARDVARK) += pci-aardvark.o

obj-$(CONFIG_PCI_RCAR_GEN2) += pci-rcar-gen2.o

obj-$(CONFIG_PCIE_RCAR_EP) += pcie-rcar.o pcie-rcar-ep.o

obj-$(CONFIG_PCI_HOST_GENERIC) += pci-host-generic.o

obj-$(CONFIG_PCI_HOST_THUNDER_ECAM) += pci-thunder-ecam.o

obj-$(CONFIG_PCI_HOST_THUNDER_PEM) += pci-thunder-pem.o

obj-$(CONFIG_PCIE_XILINX_NWL) += pcie-xilinx-nwl.o

obj-$(CONFIG_PCI_V3_SEMI) += pci-v3-semi.o

obj-$(CONFIG_PCI_XGENE_MSI) += pci-xgene-msi.o

obj-$(CONFIG_PCIE_IPROC) += pcie-iproc.o

obj-$(CONFIG_PCIE_IPROC_PLATFORM) += pcie-iproc-platform.o

obj-$(CONFIG_PCIE_ALTERA) += pcie-altera.o

obj-$(CONFIG_PCIE_ROCKCHIP) += pcie-rockchip.o

obj-$(CONFIG_PCIE_ROCKCHIP_HOST) += pcie-rockchip-host.o

obj-$(CONFIG_PCIE_MEDIATEK_GEN3) += pcie-mediatek-gen3.o

obj-$(CONFIG_VMD) += vmd.o

obj-$(CONFIG_PCI_LOONGSON) += pci-loongson.o

obj-$(CONFIG_PCIE_APPLE) += pcie-apple.o



# pcie-hisi.o quirks are needed even without CONFIG_PCIE_DW



 The following drivers are for devices that use the generic ACPI

# pci_root.c driver but don't support standard ECAM config access.

# They contain MCFG quirks to replace the generic ECAM accessors with

 device-specific ones that are shared with the DT driver.



# The ACPI driver is generic and should not require driver-specific

# config options to be enabled, so we always build these drivers on

 ARM64 and use internal ifdefs to only build the pieces we need

# depending on whether ACPI, the DT driver, or both are enabled.

obj-$(CONFIG_ARM64) += pci-thunder-pem.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PCIE_DW_HOST) += pcie-designware-host.o

obj-$(CONFIG_PCIE_DW_PLAT) += pcie-designware-plat.o

obj-$(CONFIG_PCI_EXYNOS) += pci-exynos.o

obj-$(CONFIG_PCI_IMX6) += pci-imx6.o

obj-$(CONFIG_PCI_KEYSTONE) += pci-keystone.o

obj-$(CONFIG_PCI_LAYERSCAPE_EP) += pci-layerscape-ep.o

obj-$(CONFIG_PCIE_QCOM_EP) += pcie-qcom-ep.o

obj-$(CONFIG_PCIE_ARMADA_8K) += pcie-armada8k.o

obj-$(CONFIG_PCIE_INTEL_GW) += pcie-intel-gw.o

obj-$(CONFIG_PCIE_KIRIN) += pcie-kirin.o

obj-$(CONFIG_PCIE_HISI_STB) += pcie-histb.o

obj-$(CONFIG_PCIE_TEGRA194) += pcie-tegra194.o

obj-$(CONFIG_PCIE_UNIPHIER_EP) += pcie-uniphier-ep.o

obj-$(CONFIG_PCIE_VISCONTI_HOST) += pcie-visconti.o

 The following drivers are for devices that use the generic ACPI

# pci_root.c driver but don't support standard ECAM config access.

# They contain MCFG quirks to replace the generic ECAM accessors with

 device-specific ones that are shared with the DT driver.



# The ACPI driver is generic and should not require driver-specific

# config options to be enabled, so we always build these drivers on

 ARM64 and use internal ifdefs to only build the pieces we need

# depending on whether ACPI, the DT driver, or both are enabled.

obj-$(CONFIG_PCIE_AL) += pcie-al.o

obj-$(CONFIG_PCI_HISI) += pcie-hisi.o

obj-$(CONFIG_ARM64) += pcie-al.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PCIE_MOBIVEIL_HOST) += pcie-mobiveil-host.o

obj-$(CONFIG_PCIE_LAYERSCAPE_GEN4) += pcie-layerscape-gen4.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PCIE_CADENCE_HOST) += pcie-cadence-host.o

obj-$(CONFIG_PCIE_CADENCE_PLAT) += pcie-cadence-plat.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for PCI Endpoint Support

#

					   pci-epc-mem.o functions/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for PCI Endpoint Functions

#

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux kernel pci hotplug controller drivers.

#

obj-$(CONFIG_HOTPLUG_PCI_COMPAQ)	+= cpqphp.o



 native drivers should be linked before acpiphp in order to allow the

# native driver to attempt to bind first. We can then fall back to

 generic support.



obj-$(CONFIG_HOTPLUG_PCI_PCIE)		+= pciehp.o

obj-$(CONFIG_HOTPLUG_PCI_CPCI_GENERIC)	+= cpcihp_generic.o

obj-$(CONFIG_HOTPLUG_PCI_SHPC)		+= shpchp.o

obj-$(CONFIG_HOTPLUG_PCI_RPA)		+= rpaphp.o

obj-$(CONFIG_HOTPLUG_PCI_ACPI)		+= acpiphp.o

obj-$(CONFIG_HOTPLUG_PCI_S390)		+= s390_pci_hpc.o

# acpiphp_ibm extends acpiphp, so should be linked afterwards.





ifdef CONFIG_HOTPLUG_PCI_CPCI

pci_hotplug-objs	+=	cpci_hotplug_core.o	\

pci_hotplug-objs	+=	acpi_pcihp.o

endif

				cpqphp_sysfs.o	\

cpqphp-objs += $(cpqphp-y)

				ibmphp_pci.o	\

				ibmphp_hpc.o

				acpiphp_glue.o

pnv-php-objs		:=	pnv_php.o

				rpaphp_pci.o	\

				rpaphp_slot.o

				rpadlpar_sysfs.o

				pciehp_pci.o	\



shpchp-objs		:=	shpchp_core.o	\

				shpchp_ctrl.o	\

				shpchp_sysfs.o	\

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PCI_SW_SWITCHTEC) += switchtec.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for multifunction miscellaneous devices





88pm860x-objs			:= 88pm860x-core.o 88pm860x-i2c.o

obj-$(CONFIG_MFD_88PM800)	+= 88pm800.o 88pm80x.o

obj-$(CONFIG_MFD_ACT8945A)	+= act8945a.o

obj-$(CONFIG_MFD_SM501)		+= sm501.o

obj-$(CONFIG_MFD_ASIC3)		+= asic3.o tmio_core.o

obj-$(CONFIG_MFD_BCM590XX)	+= bcm590xx.o

obj-$(CONFIG_MFD_CROS_EC_DEV)	+= cros_ec_dev.o

obj-$(CONFIG_MFD_EXYNOS_LPASS)	+= exynos-lpass.o



obj-$(CONFIG_HTC_I2CPLD)	+= htc-i2cpld.o



obj-$(CONFIG_MFD_DM355EVM_MSP)	+= dm355evm_msp.o



obj-$(CONFIG_MFD_SUN6I_PRCM)	+= sun6i-prcm.o

obj-$(CONFIG_MFD_T7L66XB)	+= t7l66xb.o tmio_core.o

obj-$(CONFIG_MFD_TC6393XB)	+= tc6393xb.o tmio_core.o





obj-$(CONFIG_MFD_ARIZONA)	+= arizona.o

obj-$(CONFIG_MFD_ARIZONA_SPI)	+= arizona-spi.o

ifeq ($(CONFIG_MFD_WM5102),y)

arizona-objs			+= wm5102-tables.o

endif

ifeq ($(CONFIG_MFD_WM5110),y)

arizona-objs			+= wm5110-tables.o

endif

ifeq ($(CONFIG_MFD_WM8997),y)

arizona-objs			+= wm8997-tables.o

endif

ifeq ($(CONFIG_MFD_WM8998),y)

arizona-objs			+= wm8998-tables.o

endif

arizona-objs			+= cs47l24-tables.o

endif

wm831x-objs			:= wm831x-core.o wm831x-irq.o wm831x-otp.o

obj-$(CONFIG_MFD_WM831X)	+= wm831x.o

obj-$(CONFIG_MFD_WM831X_SPI)	+= wm831x-spi.o

obj-$(CONFIG_MFD_WM8350)	+= wm8350.o

obj-$(CONFIG_MFD_WM8994)	+= wm8994.o

obj-$(CONFIG_MFD_WM97xx)	+= wm97xx-core.o

madera-objs			:= madera-core.o

ifeq ($(CONFIG_MFD_CS47L35),y)

madera-objs			+= cs47l35-tables.o

endif

ifeq ($(CONFIG_MFD_CS47L90),y)

madera-objs			+= cs47l90-tables.o

endif

obj-$(CONFIG_MFD_MADERA)	+= madera.o

obj-$(CONFIG_MFD_MADERA_SPI)	+= madera-spi.o

obj-$(CONFIG_MFD_TPS65086)	+= tps65086.o

obj-$(CONFIG_MFD_TPS65218)	+= tps65218.o

obj-$(CONFIG_MFD_TPS65912_I2C)	+= tps65912-i2c.o

obj-$(CONFIG_MFD_TPS65912_SPI)  += tps65912-spi.o

obj-$(CONFIG_MENELAUS)		+= menelaus.o

obj-$(CONFIG_TWL4030_CORE)	+= twl-core.o twl4030-irq.o twl6030-irq.o

obj-$(CONFIG_TWL4030_POWER)    += twl4030-power.o



obj-$(CONFIG_MFD_MX25_TSADC)	+= fsl-imx25-tsadc.o

obj-$(CONFIG_MFD_MC13XXX_SPI)	+= mc13xxx-spi.o



obj-$(CONFIG_MFD_CORE)		+= mfd-core.o

obj-$(CONFIG_MFD_CPCAP)		+= motorola-cpcap.o

obj-$(CONFIG_MCP)		+= mcp-core.o

obj-$(CONFIG_MCP_UCB1200_TS)	+= ucb1x00-ts.o

obj-$(CONFIG_MCP_UCB1200)	+= ucb1x00-assabet.o

endif



obj-$(CONFIG_PMIC_DA903X)	+= da903x.o

obj-$(CONFIG_PMIC_DA9052)	+= da9052-core.o

obj-$(CONFIG_MFD_DA9052_I2C)	+= da9052-i2c.o

obj-$(CONFIG_MFD_AXP20X)	+= axp20x.o

obj-$(CONFIG_MFD_AXP20X_RSB)	+= axp20x-rsb.o

obj-$(CONFIG_MFD_LP3943)	+= lp3943.o

obj-$(CONFIG_MFD_LP8788)	+= lp8788.o lp8788-irq.o

obj-$(CONFIG_MFD_TI_LMU)	+= ti-lmu.o

obj-$(CONFIG_MFD_DA9055)	+= da9055.o

obj-$(CONFIG_MFD_DA9062)	+= da9062-core.o

obj-$(CONFIG_MFD_DA9063)	+= da9063.o

obj-$(CONFIG_MFD_DA9150)	+= da9150-core.o

obj-$(CONFIG_MFD_MAX14577)	+= max14577.o

obj-$(CONFIG_MFD_MAX77650)	+= max77650.o

obj-$(CONFIG_MFD_MAX77693)	+= max77693.o

obj-$(CONFIG_MFD_MAX8907)	+= max8907.o

obj-$(CONFIG_MFD_MAX8925)	+= max8925.o

obj-$(CONFIG_MFD_MAX8998)	+= max8998.o max8998-irq.o

obj-$(CONFIG_MFD_MP2629)	+= mp2629.o

obj-$(CONFIG_MFD_PCF50633)	+= pcf50633.o

obj-$(CONFIG_PCF50633_GPIO)	+= pcf50633-gpio.o

obj-$(CONFIG_AB8500_DEBUG)	+= ab8500-debugfs.o

# ab8500-core need to come after db8500-prcmu (which provides the channel)

obj-$(CONFIG_AB8500_CORE)	+= ab8500-core.o ab8500-sysctrl.o

obj-$(CONFIG_MFD_TIMBERDALE)    += timberdale.o

obj-$(CONFIG_PMIC_ADP5520)	+= adp5520.o

obj-$(CONFIG_MFD_KEMPLD)	+= kempld-core.o

obj-$(CONFIG_MFD_RDC321X)	+= rdc321x-southbridge.o

obj-$(CONFIG_MFD_TPS6586X)	+= tps6586x.o

obj-$(CONFIG_MFD_VX855)		+= vx855.o



obj-$(CONFIG_MFD_SI476X_CORE)	+= si476x-core.o

obj-$(CONFIG_MFD_CS5535)	+= cs5535-mfd.o

obj-$(CONFIG_MFD_OMAP_USB_HOST)	+= omap-usb-host.o omap-usb-tll.o

obj-$(CONFIG_MFD_PM8XXX) 	+= qcom-pm8xxx.o ssbi.o

obj-$(CONFIG_TPS65911_COMPARATOR)	+= tps65911-comparator.o

obj-$(CONFIG_MFD_AAT2870_CORE)	+= aat2870-core.o

obj-$(CONFIG_MFD_ATMEL_FLEXCOM)	+= atmel-flexcom.o

obj-$(CONFIG_MFD_ATMEL_SMC)	+= atmel-smc.o

obj-$(CONFIG_MFD_INTEL_LPSS_PCI)	+= intel-lpss-pci.o

obj-$(CONFIG_MFD_INTEL_PMC_BXT)	+= intel_pmc_bxt.o

obj-$(CONFIG_MFD_PALMAS)	+= palmas.o

obj-$(CONFIG_MFD_VIPERBOARD)    += viperboard.o

obj-$(CONFIG_MFD_NTXEC)		+= ntxec.o

obj-$(CONFIG_MFD_RN5T618)	+= rn5t618.o

obj-$(CONFIG_MFD_SYSCON)	+= syscon.o

obj-$(CONFIG_MFD_LM3533)	+= lm3533-core.o lm3533-ctrlbank.o

obj-$(CONFIG_MFD_AS3711)	+= as3711.o

obj-$(CONFIG_MFD_STW481X)	+= stw481x.o

obj-$(CONFIG_MFD_IQS62X)	+= iqs62x.o

obj-$(CONFIG_MFD_HI655X_PMIC)   += hi655x-pmic.o

obj-$(CONFIG_MFD_DLN2)		+= dln2.o

obj-$(CONFIG_MFD_RT5033)	+= rt5033.o



obj-$(CONFIG_INTEL_SOC_PMIC)	+= intel-soc-pmic.o

obj-$(CONFIG_INTEL_SOC_PMIC_CHTWC)	+= intel_soc_pmic_chtwc.o

mt6397-objs			:= mt6397-core.o mt6397-irq.o mt6358-irq.o

obj-$(CONFIG_INTEL_SOC_PMIC_MRFLD)	+= intel_soc_pmic_mrfld.o

obj-$(CONFIG_MFD_ALTERA_A10SR)	+= altera-a10sr.o

obj-$(CONFIG_MFD_STPMIC1)	+= stpmic1.o



obj-$(CONFIG_MFD_MXS_LRADC)     += mxs-lradc.o

obj-$(CONFIG_MFD_ROHM_BD70528)	+= rohm-bd70528.o

obj-$(CONFIG_MFD_ROHM_BD718XX)	+= rohm-bd718x7.o

obj-$(CONFIG_MFD_ROHM_BD957XMUF)	+= rohm-bd9576.o

obj-$(CONFIG_MFD_STMFX) 	+= stmfx.o

obj-$(CONFIG_MFD_KHADAS_MCU) 	+= khadas-mcu.o

obj-$(CONFIG_MFD_QCOM_PM8008)	+= qcom-pm8008.o

obj-$(CONFIG_SGI_MFD_IOC3)	+= ioc3.o

obj-$(CONFIG_MFD_INTEL_M10_BMC)   += intel-m10-bmc.o

obj-$(CONFIG_MFD_ATC260X_I2C)	+= atc260x-i2c.o

obj-$(CONFIG_MFD_RSMU_I2C)	+= rsmu-i2c.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the nubus specific drivers.

#

obj-y := nubus.o bus.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the phy drivers.

#

obj-$(CONFIG_GENERIC_PHY)		+= phy-core.o

obj-$(CONFIG_GENERIC_PHY_MIPI_DPHY)	+= phy-core-mipi-dphy.o

obj-$(CONFIG_PHY_LPC18XX_USB_OTG)	+= phy-lpc18xx-usb-otg.o

					   amlogic/	\

					   broadcom/	\

					   freescale/	\

					   ingenic/	\

					   marvell/	\

					   mediatek/	\

					   renesas/	\

					   rockchip/	\

					   socionext/	\

					   tegra/	\

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PHY_MVEBU_A3700_COMPHY)	+= phy-mvebu-a3700-comphy.o

obj-$(CONFIG_PHY_MVEBU_CP110_COMPHY)	+= phy-mvebu-cp110-comphy.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PHY_MESON8B_USB2)			+= phy-meson8b-usb2.o

obj-$(CONFIG_PHY_MESON_GXL_USB2)		+= phy-meson-gxl-usb2.o

obj-$(CONFIG_PHY_MESON_G12A_USB2)		+= phy-meson-g12a-usb2.o

obj-$(CONFIG_PHY_MESON_G12A_USB3_PCIE)		+= phy-meson-g12a-usb3-pcie.o

obj-$(CONFIG_PHY_MESON_AXG_PCIE)		+= phy-meson-axg-pcie.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PHY_BCM63XX_USBH)		+= phy-bcm63xx-usbh.o

obj-$(CONFIG_PHY_CYGNUS_PCIE)		+= phy-bcm-cygnus-pcie.o

obj-$(CONFIG_BCM_KONA_USB2_PHY)		+= phy-bcm-kona-usb2.o

obj-$(CONFIG_PHY_BCM_NS_USB2)		+= phy-bcm-ns-usb2.o

obj-$(CONFIG_PHY_BCM_NS_USB3)		+= phy-bcm-ns-usb3.o

obj-$(CONFIG_PHY_NS2_PCIE)		+= phy-bcm-ns2-pcie.o





obj-$(CONFIG_PHY_BCM_SR_PCIE)		+= phy-bcm-sr-pcie.o

obj-$(CONFIG_PHY_BCM_SR_USB)		+= phy-bcm-sr-usb.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PHY_INGENIC_USB)		+= phy-ingenic-usb.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PHY_ATH79_USB)		+= phy-ath79-usb.o

obj-$(CONFIG_PHY_QCOM_IPQ4019_USB)	+= phy-qcom-ipq4019-usb.o

obj-$(CONFIG_PHY_QCOM_USB_HS) 		+= phy-qcom-usb-hs.o

obj-$(CONFIG_PHY_QCOM_USB_HSIC) 	+= phy-qcom-usb-hsic.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PHY_XILINX_ZYNQMP)		+= phy-zynqmp.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PHY_EXYNOS_MIPI_VIDEO)	+= phy-exynos-mipi-video.o

obj-$(CONFIG_PHY_EXYNOS_PCIE)		+= phy-exynos-pcie.o

phy-exynos-ufs-y			+= phy-exynosautov9-ufs.o

phy-exynos-usb2-$(CONFIG_PHY_EXYNOS4210_USB2)	+= phy-exynos4210-usb2.o

phy-exynos-usb2-$(CONFIG_PHY_EXYNOS5250_USB2)	+= phy-exynos5250-usb2.o

obj-$(CONFIG_PHY_EXYNOS5_USBDRD)	+= phy-exynos5-usbdrd.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PHY_HI3660_USB)		+= phy-hi3660-usb3.o

obj-$(CONFIG_PHY_HISI_INNO_USB2)	+= phy-hisi-inno-usb2.o

obj-$(CONFIG_PHY_HIX5HD2_SATA)		+= phy-hix5hd2-sata.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the phy drivers.

#

obj-$(CONFIG_PHY_UNIPHIER_USB2)	+= phy-uniphier-usb2.o

obj-$(CONFIG_PHY_UNIPHIER_PCIE)	+= phy-uniphier-pcie.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PHY_FSL_IMX8MQ_USB)	+= phy-fsl-imx8mq-usb.o

obj-$(CONFIG_PHY_MIXEL_MIPI_DPHY)	+= phy-fsl-imx8-mipi-dphy.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PHY_SUN6I_MIPI_DPHY)	+= phy-sun6i-mipi-dphy.o

obj-$(CONFIG_PHY_SUN9I_USB)		+= phy-sun9i-usb.o

obj-$(CONFIG_PHY_SUN50I_USB3)		+= phy-sun50i-usb3.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Microsemi phy drivers.





# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PHY_RCAR_GEN2)		+= phy-rcar-gen2.o

obj-$(CONFIG_PHY_RCAR_GEN3_USB2)	+= phy-rcar-gen3-usb2.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PHY_ROCKCHIP_DP)		+= phy-rockchip-dp.o

obj-$(CONFIG_PHY_ROCKCHIP_INNO_CSIDPHY)	+= phy-rockchip-inno-csidphy.o

obj-$(CONFIG_PHY_ROCKCHIP_INNO_HDMI)	+= phy-rockchip-inno-hdmi.o

obj-$(CONFIG_PHY_ROCKCHIP_TYPEC)	+= phy-rockchip-typec.o

obj-$(CONFIG_PHY_ROCKCHIP_USB)		+= phy-rockchip-usb.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Microchip phy drivers.





# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PHY_INTEL_KEEMBAY_USB)	+= phy-intel-keembay-usb.o

obj-$(CONFIG_PHY_INTEL_LGM_EMMC)	+= phy-intel-lgm-emmc.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PHY_MT7621_PCI)	+= phy-mt7621-pci.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PHY_LANTIQ_RCU_USB2)	+= phy-lantiq-rcu-usb2.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the phy drivers.

#





 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PHY_TEGRA_XUSB) += phy-tegra-xusb.o

phy-tegra-xusb-y += xusb.o

phy-tegra-xusb-$(CONFIG_ARCH_TEGRA_132_SOC) += xusb-tegra124.o

phy-tegra-xusb-$(CONFIG_ARCH_TEGRA_186_SOC) += xusb-tegra186.o

obj-$(CONFIG_PHY_TEGRA194_P2U) += phy-tegra194-p2u.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PHY_DA8XX_USB)		+= phy-da8xx-usb.o

obj-$(CONFIG_PHY_DM816X_USB)		+= phy-dm816x-usb.o

obj-$(CONFIG_OMAP_CONTROL_PHY)		+= phy-omap-control.o

obj-$(CONFIG_TI_PIPE3)			+= phy-ti-pipe3.o

obj-$(CONFIG_PHY_TUSB1210)		+= phy-tusb1210.o

obj-$(CONFIG_TWL4030_USB)		+= phy-twl4030-usb.o

obj-$(CONFIG_PHY_AM654_SERDES)		+= phy-am654-serdes.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PHY_MIPHY28LP) 		+= phy-miphy28lp.o

obj-$(CONFIG_PHY_ST_SPEAR1310_MIPHY)	+= phy-spear1310-miphy.o

obj-$(CONFIG_PHY_ST_SPEAR1340_MIPHY)	+= phy-spear1340-miphy.o

obj-$(CONFIG_PHY_STIH407_USB)		+= phy-stih407-usb.o

obj-$(CONFIG_PHY_STM32_USBPHYC) 	+= phy-stm32-usbphyc.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PHY_CADENCE_TORRENT)	+= phy-cadence-torrent.o

obj-$(CONFIG_PHY_CADENCE_DPHY)	+= cdns-dphy.o

obj-$(CONFIG_PHY_CADENCE_SALVO)	+= phy-cadence-salvo.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the phy drivers.





obj-$(CONFIG_PHY_CPCAP_USB)		+= phy-cpcap-usb.o

# SPDX-License-Identifier: GPL-2.0

# Makefile for Linux samples code

subdir-$(CONFIG_SAMPLE_AUXDISPLAY)	+= auxdisplay

obj-$(CONFIG_SAMPLE_FANOTIFY_ERROR)	+= fanotify/

subdir-$(CONFIG_SAMPLE_HIDRAW)		+= hidraw

subdir-$(CONFIG_SAMPLE_LANDLOCK)	+= landlock

obj-$(CONFIG_SAMPLE_LIVEPATCH)		+= livepatch/

subdir-$(CONFIG_SAMPLE_PIDFD)		+= pidfd

subdir-$(CONFIG_SAMPLE_TIMER)		+= timers

obj-$(CONFIG_SAMPLE_TRACE_PRINTK)	+= trace_printk/

obj-$(CONFIG_SAMPLE_FTRACE_DIRECT)	+= ftrace/

obj-$(CONFIG_SAMPLE_FTRACE_DIRECT_MULTI) += ftrace/

obj-$(CONFIG_SAMPLE_TRACE_ARRAY)	+= ftrace/

subdir-$(CONFIG_SAMPLE_UHID)		+= uhid

subdir-$(CONFIG_SAMPLE_WATCHDOG)	+= watchdog

obj-$(CONFIG_DEBUG_KMEMLEAK_TEST)	+= kmemleak/

# SPDX-License-Identifier: GPL-2.0



userccflags += -I usr/include

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SAMPLE_CONNECTOR) += cn_test.o

userprogs-always-$(CONFIG_CC_CAN_LINK) += ucon

# SPDX-License-Identifier: GPL-2.0

userprogs-always-y += watchdog-simple

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 builds the trace events example kernel modules;

 then to use one (as root):  insmod <module_name.ko>



# If you include a trace header outside of include/trace/events

 then the file that does the 
# have that tracer file in its main search path. This is because

 define_trace.h will include it, and must be able to find it from

# the include/trace directory.

#

 Here trace-events-sample.c does the CREATE_TRACE_POINTS.



CFLAGS_trace-events-sample.o := -I$(src)

obj-$(CONFIG_SAMPLE_TRACE_EVENTS) += trace-events-sample.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SAMPLE_KOBJECT) += kobject-example.o kset-example.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_SAMPLE_FTRACE_DIRECT) += ftrace-direct.o

obj-$(CONFIG_SAMPLE_FTRACE_DIRECT) += ftrace-direct-too.o



CFLAGS_sample-trace-array.o := -I$(src)

 SPDX-License-Identifier: BSD-3-Clause



userprogs-always-y := sandboxer



.PHONY: all clean

all:

	$(MAKE) -C ../.. samples/landlock/

clean:

	$(MAKE) -C ../.. M=samples/landlock/ clean

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0





userccflags += -I usr/include

 SPDX-License-Identifier: GPL-2.0-only

userprogs-always-y += uhid-example

 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SAMPLE_LIVEPATCH) += livepatch-sample.o

obj-$(CONFIG_SAMPLE_LIVEPATCH) += livepatch-callbacks-demo.o

obj-$(CONFIG_SAMPLE_LIVEPATCH) += livepatch-callbacks-mod.o

obj-$(CONFIG_SAMPLE_LIVEPATCH) += livepatch-callbacks-busymod.o

 SPDX-License-Identifier: GPL-2.0-only

userprogs-always-y += fs-monitor



 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SAMPLE_RPMSG_CLIENT) += rpmsg_client_sample.o

# SPDX-License-Identifier: GPL-2.0

#

# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Enclave lifetime management support for Nitro Enclaves (NE) - ioctl sample

 usage.



.PHONY: all clean





	rm -f ne_ioctl_sample

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-only

# builds the kprobes example kernel modules;

# then to use one (as root):  insmod <module_name.ko>

obj-$(CONFIG_SAMPLE_KPROBES) += kprobe_example.o

 SPDX-License-Identifier: GPL-2.0-only

# builds a module that calls various trace_printk routines

# then to use one (as root):  insmod <module_name.ko>

 This module can also be used to test the trace_printk code.



obj-$(CONFIG_SAMPLE_TRACE_PRINTK) += trace-printk.o

# SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2012-2019, Intel Corporation. All rights reserved.



userccflags += -I usr/include

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SAMPLE_QMI_CLIENT) += qmi_sample_client.o

# SPDX-License-Identifier: GPL-2.0

usertprogs-always-y += pidfd-metadata

 SPDX-License-Identifier: GPL-2.0-only

userprogs-always-y += binderfs_example

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0





payload.o: payload.ld guest16.o



 SPDX-License-Identifier: GPL-2.0-only



userccflags += -I usr/include

# SPDX-License-Identifier: GPL-2.0

userprogs-always-y += hid-example

 SPDX-License-Identifier: GPL-2.0-only

userprogs-always-y += watch_test

# SPDX-License-Identifier: GPL-2.0

BPF_SAMPLES_PATH ?= $(abspath $(srctree)/$(src))

TOOLS_PATH := $(BPF_SAMPLES_PATH)/../../tools





# List of programs to build

tprogs-y := test_lru_dist

tprogs-y += trace_output

tprogs-y += lathist

tprogs-y += offwaketime

tprogs-y += test_cgrp2_array_pin

tprogs-y += test_cgrp2_attach

tprogs-y += test_cgrp2_sock

tprogs-y += xdp1

tprogs-y += test_current_task_under_cgroup

tprogs-y += trace_event

tprogs-y += tc_l2_redirect

tprogs-y += per_socket_stats_example

tprogs-y += syscall_tp

tprogs-y += cpustat

tprogs-y += xdp_adjust_tail

tprogs-y += xdpsock

tprogs-y += xdpsock_ctrl_proc

tprogs-y += xsk_fwd

tprogs-y += xdp_fwd

tprogs-y += task_fd_query

tprogs-y += xdp_sample_pkts



tprogs-y += xdp_redirect_map_multi

tprogs-y += xdp_redirect

tprogs-y += xdp_monitor

 Libbpf dependencies

LIBBPF_SRC = $(TOOLS_PATH)/lib/bpf

LIBBPF_OUTPUT = $(abspath $(BPF_SAMPLES_PATH))/libbpf

LIBBPF_DESTDIR = $(LIBBPF_OUTPUT)

LIBBPF = $(LIBBPF_OUTPUT)/libbpf.a

CGROUP_HELPERS := ../../tools/testing/selftests/bpf/cgroup_helpers.o



fds_example-objs := fds_example.o

sockex2-objs := sockex2_user.o

tracex2-objs := tracex2_user.o

tracex4-objs := tracex4_user.o

tracex5-objs := tracex5_user.o $(TRACE_HELPERS)

tracex7-objs := tracex7_user.o

trace_output-objs := trace_output_user.o

map_perf_test-objs := map_perf_test_user.o

xdp1-objs := xdp1_user.o

# reuse xdp1 source intentionally

xdp_router_ipv4-objs := xdp_router_ipv4_user.o

				       test_current_task_under_cgroup_user.o

trace_event-objs := trace_event_user.o $(TRACE_HELPERS)

sampleip-objs := sampleip_user.o $(TRACE_HELPERS)

lwt_len_hist-objs := lwt_len_hist_user.o

test_map_in_map-objs := test_map_in_map_user.o

xdp_rxq_info-objs := xdp_rxq_info_user.o

cpustat-objs := cpustat_user.o

xdpsock-objs := xdpsock_user.o

xdpsock_ctrl_proc-objs := xdpsock_ctrl_proc.o

xsk_fwd-objs := xsk_fwd.o

xdp_sample_pkts-objs := xdp_sample_pkts_user.o



xdp_redirect_cpu-objs := xdp_redirect_cpu_user.o $(XDP_SAMPLE)

xdp_redirect-objs := xdp_redirect_user.o $(XDP_SAMPLE)



 Tell kbuild to always build the programs

always-y += sockex1_kern.o

always-y += sockex3_kern.o

always-y += tracex2_kern.o

always-y += tracex4_kern.o

always-y += tracex6_kern.o

always-y += test_probe_write_user_kern.o

always-y += trace_output_kern.o

always-y += tcbpf1_kern.o

always-y += tc_l2_redirect_kern.o

always-y += offwaketime_kern.o

always-y += spintest_kern.o

always-y += test_cgrp2_tc_kern.o

always-y += xdp1_kern.o

always-y += xdp2_kern.o

always-y += trace_event_kern.o

always-y += sampleip_kern.o

always-y += lwt_len_hist_kern.o

always-y += test_map_in_map_kern.o

always-y += tcp_synrto_kern.o

always-y += tcp_rwnd_kern.o

always-y += tcp_bufs_kern.o

always-y += tcp_cong_kern.o

always-y += tcp_iw_kern.o

always-y += tcp_basertt_kern.o

always-y += tcp_dumpstats_kern.o

always-y += xdp_rxq_info_kern.o

always-y += xdp2skb_meta_kern.o

always-y += syscall_tp_kern.o

always-y += xdp_adjust_tail_kern.o

always-y += task_fd_query_kern.o

always-y += hbm_out_kern.o

always-y += xdpsock_kern.o

 Strip all except -D__LINUX_ARM_ARCH__ option needed to handle linux

 headers when arm instruction set identification is requested.

ARM_ARCH_SELECTOR := $(filter -D__LINUX_ARM_ARCH__%, $(KBUILD_CFLAGS))



ifdef CONFIG_MACH_LOONGSON64



TPROGS_CFLAGS += -Wstrict-prototypes

TPROGS_CFLAGS += -I$(srctree)/tools/testing/selftests/bpf/

TPROGS_CFLAGS += -I$(srctree)/tools/perf

TPROGS_CFLAGS += -DHAVE_ATTR_TEST=0

TPROGS_LDFLAGS := -L$(SYSROOT)/usr/lib

endif

TPROGS_LDLIBS			+= $(LIBBPF) -lelf -lz

TPROGLDLIBS_trace_output	+= -lrt

TPROGLDLIBS_map_perf_test	+= -lrt

TPROGLDLIBS_test_overhead	+= -lrt

TPROGLDLIBS_xsk_fwd		+= -pthread

# Allows pointing LLC/CLANG to a LLVM backend with bpf support, redefine on cmdline:

 make M=samples/bpf LLC=~/git/llvm-project/llvm/build/bin/llc CLANG=~/git/llvm-project/llvm/build/bin/clang

LLC ?= llc

OPT ?= opt

LLVM_OBJCOPY ?= llvm-objcopy

BTF_PAHOLE ?= pahole

# Detect that we're cross compiling and use the cross compiler

ifdef CROSS_COMPILE



# Don't evaluate probes and warnings if we need to run make recursively

ifneq ($(src),)

HDR_PROBE := $(shell printf "$(pound)include <linux/types.h>\n struct list_head { int a; }; int main() { return 0; }" | \





			  $(CLANG) -target bpf -O2 -g -c -x c - -o ./llvm_btf_verify.o; \

			  $(LLVM_READELF) -S ./llvm_btf_verify.o | grep BTF; \



ifneq ($(BTF_LLVM_PROBE),)

	BPF_EXTRA_CFLAGS += -g

	DWARF2BTF = y

endif

endif

endif

 Trick to allow make to be run from this directory

all:

	$(MAKE) -C ../../ M=$(CURDIR) BPF_SAMPLES_PATH=$(CURDIR)

clean:



$(LIBBPF): $(wildcard $(LIBBPF_SRC)/*.[ch] $(LIBBPF_SRC)/Makefile) | $(LIBBPF_OUTPUT)

 Fix up variables inherited from Kbuild that tools/ build system won't like

		LDFLAGS=$(TPROGS_LDFLAGS) srctree=$(BPF_SAMPLES_PATH)/../../ \

		O= OUTPUT=$(LIBBPF_OUTPUT)/ DESTDIR=$(LIBBPF_DESTDIR) prefix= \



BPFTOOLDIR := $(TOOLS_PATH)/bpf/bpftool

BPFTOOL := $(BPFTOOL_OUTPUT)/bpftool

$(BPFTOOL): $(LIBBPF) $(wildcard $(BPFTOOLDIR)/*.[ch] $(BPFTOOLDIR)/Makefile) | $(BPFTOOL_OUTPUT)



$(LIBBPF_OUTPUT) $(BPFTOOL_OUTPUT):

	$(call msg,MKDIR,$@)



	$(call filechk,offsets,__SYSCALL_NRS_H__)

targets += syscall_nrs.s





 Verify LLVM compiler tools are available and bpf target is supported by llc



			echo "*** ERROR: Cannot find LLVM tool $${TOOL}" ;\

		else true; fi; \

	done

verify_target_bpf: verify_cmds

	@if ! (${LLC} -march=bpf -mattr=help > /dev/null 2>&1); then \

	else true; fi

$(BPF_SAMPLES_PATH)/*.c: verify_target_bpf $(LIBBPF)

$(src)/*.c: verify_target_bpf $(LIBBPF)

libbpf_hdrs: $(LIBBPF)



.PHONY: libbpf_hdrs

$(obj)/xdp_redirect_cpu_user.o: $(obj)/xdp_redirect_cpu.skel.h

$(obj)/xdp_redirect_map_user.o: $(obj)/xdp_redirect_map.skel.h

$(obj)/xdp_monitor_user.o: $(obj)/xdp_monitor.skel.h

$(obj)/hbm.o: $(src)/hbm.h

$(obj)/hbm_edt_kern.o: $(src)/hbm.h $(src)/hbm_kern.h

-include $(BPF_SAMPLES_PATH)/Makefile.target

VMLINUX_BTF_PATHS ?= $(abspath $(if $(O),$(O)/vmlinux))				\

		     $(abspath $(if $(KBUILD_OUTPUT),$(KBUILD_OUTPUT)/vmlinux))	\

		     $(abspath ./vmlinux)

VMLINUX_BTF ?= $(abspath $(firstword $(wildcard $(VMLINUX_BTF_PATHS))))

ifeq ($(VMLINUX_H),)

else

	$(Q)cp "$(VMLINUX_H)" $@

endif

ifeq ($(VMLINUX_BTF),)

	$(error Cannot find a vmlinux for VMLINUX_BTF at any of "$(VMLINUX_BTF_PATHS)",\

		build the kernel or set VMLINUX_BTF variable)

endif

clean-files += vmlinux.h

# Get Clang's default includes on this system, as opposed to those seen by

 '-target bpf'. This fixes "missing" files on some architectures/distros,

# such as asm/byteorder.h, asm/socket.h, asm/sockios.h, sys/cdefs.h etc.

#

# Use '-idirafter': Don't interfere with include mechanics except where the

 build would have failed anyways.

$(shell $(1) -v -E - </dev/null 2>&1 \

        | sed -n '/<...> search starts here:/,/End of search list./{ s| \(/.*\)|-idirafter \1|p }') \

define __riscv_xlen ' | sed 's/




$(obj)/xdp_redirect_map_multi.bpf.o: $(obj)/xdp_sample.bpf.o

$(obj)/xdp_redirect.bpf.o: $(obj)/xdp_sample.bpf.o

$(obj)/xdp_monitor.bpf.o: $(obj)/xdp_sample.bpf.o

$(obj)/%.bpf.o: $(src)/%.bpf.c $(obj)/vmlinux.h $(src)/xdp_sample.bpf.h $(src)/xdp_sample_shared.h

		-Wno-compare-distinct-pointer-types -I$(srctree)/include \

		-I$(srctree)/samples/bpf -I$(srctree)/tools/include \

		-I$(LIBBPF_INCLUDE) $(CLANG_SYS_INCLUDES) \

		-c $(filter %.bpf.c,$^) -o $@

		xdp_redirect_map.skel.h xdp_redirect.skel.h xdp_monitor.skel.h



xdp_redirect_cpu.skel.h-deps := xdp_redirect_cpu.bpf.o xdp_sample.bpf.o

xdp_redirect_map_multi.skel.h-deps := xdp_redirect_map_multi.bpf.o xdp_sample.bpf.o

xdp_redirect_map.skel.h-deps := xdp_redirect_map.bpf.o xdp_sample.bpf.o

xdp_redirect.skel.h-deps := xdp_redirect.bpf.o xdp_sample.bpf.o

xdp_monitor.skel.h-deps := xdp_monitor.bpf.o xdp_sample.bpf.o

LINKED_BPF_SRCS := $(patsubst %.bpf.o,%.bpf.c,$(foreach skel,$(LINKED_SKELS),$($(skel)-deps)))

BPF_SKELS_LINKED := $(addprefix $(obj)/,$(LINKED_SKELS))

$(BPF_SKELS_LINKED): $(BPF_OBJS_LINKED) $(BPFTOOL)

	@echo "  BPF GEN-OBJ " $(@:.skel.h=)



 asm/sysreg.h - inline assembly used by it is incompatible with llvm.

 But, there is no easy way to fix it, so just exclude it since it is

# useless for BPF samples.

 below we use long chain of commands, clang | opt | llvm-dis | llc,

# to generate final object file. 'clang' compiles the source into IR

# with native target, e.g., x64, arm64, etc. 'opt' does bpf CORE IR builtin

# processing (llvm12) and IR optimizations. 'llvm-dis' converts

 'opt' output to IR, and finally 'llc' generates bpf byte code.

$(obj)/%.o: $(src)/%.c

		-I$(obj) -I$(srctree)/tools/testing/selftests/bpf/ \

		-I$(LIBBPF_INCLUDE) \

		-D__TARGET_ARCH_$(SRCARCH) -Wno-compare-distinct-pointer-types \

		-Wno-gnu-variable-sized-type-not-at-end \

		-Wno-address-of-packed-member -Wno-tautological-compare \

		-I$(srctree)/samples/bpf/ -include asm_goto_workaround.h \

		$(OPT) -O2 -mtriple=bpf-pc-linux | $(LLVM_DIS) | \

	$(BTF_PAHOLE) -J $@

endif

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux memory manager.





KASAN_SANITIZE_slab_common.o := n

KASAN_SANITIZE_slub.o := n



 These produce frequent data race reports: most of them are due to races on

# the same word but accesses to different bits of that word. Re-enable KCSAN

# for these when we have more consensus on what to do about them.

KCSAN_SANITIZE_slab_common.o := n

KCSAN_SANITIZE_slub.o := n



 These files are disabled because they produce non-interesting and/or

# flaky coverage that is not a function of syscall inputs. E.g. slab is out of

 free pages, or a task is migrated between nodes.

KCOV_INSTRUMENT_slab_common.o := n

KCOV_INSTRUMENT_slob.o := n

KCOV_INSTRUMENT_slab.o := n

KCOV_INSTRUMENT_slub.o := n

KCOV_INSTRUMENT_page_alloc.o := n



CFLAGS_init-mm.o += $(call cc-disable-warning, override-init)

CFLAGS_init-mm.o += $(call cc-disable-warning, initializer-overrides)

mmu-y			:= nommu.o

mmu-$(CONFIG_MMU)	:= highmem.o memory.o mincore.o \

			   mlock.o mmap.o mmu_gather.o mprotect.o mremap.o \

			   pgtable-generic.o rmap.o vmalloc.o



mmu-$(CONFIG_MMU)	+= process_vm_access.o

endif

			   readahead.o swap.o truncate.o vmscan.o shmem.o \

			   mm_init.o percpu.o slab_common.o \

			   compaction.o vmacache.o \

			   interval_tree.o list_lru.o workingset.o \



 Give 'page_alloc' its own module-parameter namespace

page-alloc-y := page_alloc.o



 Give 'memory_hotplug' its own module-parameter namespace



obj-y += page-alloc.o

obj-y += $(memory-hotplug-y)

ifdef CONFIG_MMU

	obj-$(CONFIG_ADVISE_SYSCALLS)	+= madvise.o

endif

obj-$(CONFIG_SWAP)	+= page_io.o swap_state.o swapfile.o swap_slots.o

obj-$(CONFIG_ZSWAP)	+= zswap.o

obj-$(CONFIG_HUGETLBFS)	+= hugetlb.o

obj-$(CONFIG_NUMA) 	+= mempolicy.o

obj-$(CONFIG_SPARSEMEM)	+= sparse.o

obj-$(CONFIG_SPARSEMEM_VMEMMAP) += sparse-vmemmap.o

obj-$(CONFIG_MMU_NOTIFIER) += mmu_notifier.o

obj-$(CONFIG_SLAB) += slab.o

obj-$(CONFIG_FAILSLAB) += failslab.o

obj-$(CONFIG_MEMTEST)		+= memtest.o

obj-$(CONFIG_TRANSPARENT_HUGEPAGE) += huge_memory.o khugepaged.o

obj-$(CONFIG_MEMCG) += memcontrol.o vmpressure.o

obj-$(CONFIG_MEMCG_SWAP) += swap_cgroup.o

obj-$(CONFIG_GUP_TEST) += gup_test.o

obj-$(CONFIG_HWPOISON_INJECT) += hwpoison-inject.o

obj-$(CONFIG_DEBUG_RODATA_TEST) += rodata_test.o

obj-$(CONFIG_PAGE_OWNER) += page_owner.o

obj-$(CONFIG_MEMORY_ISOLATION) += page_isolation.o

obj-$(CONFIG_ZBUD)	+= zbud.o

obj-$(CONFIG_Z3FOLD)	+= z3fold.o

obj-$(CONFIG_CMA)	+= cma.o

obj-$(CONFIG_PAGE_EXTENSION) += page_ext.o

obj-$(CONFIG_SECRETMEM) += secretmem.o

obj-$(CONFIG_USERFAULTFD) += userfaultfd.o

obj-$(CONFIG_IDLE_PAGE_TRACKING) += page_idle.o

obj-$(CONFIG_PERCPU_STATS) += percpu-stats.o

obj-$(CONFIG_ZONE_DEVICE) += memremap.o

obj-$(CONFIG_HMM_MIRROR) += hmm.o

obj-$(CONFIG_MEMFD_CREATE) += memfd.o

obj-$(CONFIG_PAGE_REPORTING) += page_reporting.o

obj-$(CONFIG_HAVE_BOOTMEM_INFO_NODE) += bootmem_info.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_DAMON)		:= core.o

obj-$(CONFIG_DAMON_VADDR)	+= prmtv-common.o vaddr.o

obj-$(CONFIG_DAMON_PADDR)	+= prmtv-common.o paddr.o

obj-$(CONFIG_DAMON_RECLAIM)	+= reclaim.o

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_KFENCE_KUNIT_TEST) += kfence_test.o

# SPDX-License-Identifier: GPL-2.0

KASAN_SANITIZE := n

UBSAN_SANITIZE := n



 Disable ftrace to avoid recursion.

CFLAGS_REMOVE_generic.o = $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_init.o = $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_quarantine.o = $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_report.o = $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_report_generic.o = $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_report_hw_tags.o = $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_report_sw_tags.o = $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_shadow.o = $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_sw_tags.o = $(CC_FLAGS_FTRACE)

 Function splitter causes unnecessary splits in __asan_load1/__asan_store1

 see: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63533

CC_FLAGS_KASAN_RUNTIME := $(call cc-option, -fno-conserve-stack)

# Disable branch tracing to avoid recursion.



CFLAGS_init.o := $(CC_FLAGS_KASAN_RUNTIME)

CFLAGS_report.o := $(CC_FLAGS_KASAN_RUNTIME)

CFLAGS_report_hw_tags.o := $(CC_FLAGS_KASAN_RUNTIME)

CFLAGS_shadow.o := $(CC_FLAGS_KASAN_RUNTIME)

CFLAGS_hw_tags.o := $(CC_FLAGS_KASAN_RUNTIME)

CFLAGS_sw_tags.o := $(CC_FLAGS_KASAN_RUNTIME)

obj-$(CONFIG_KASAN) := common.o report.o

obj-$(CONFIG_KASAN_HW_TAGS) += hw_tags.o report_hw_tags.o tags.o report_tags.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





	    cpu.o exit.o softirq.o resource.o \

	    notifier.o ksysfs.o cred.o reboot.o \





# Do not trace internal ftrace files

CFLAGS_REMOVE_irq_work.o = $(CC_FLAGS_FTRACE)

endif

# Prevents flicker of uninteresting __do_softirq()/__local_bh_disable_ip()

# in coverage traces.

# Avoid KCSAN instrumentation in softirq ("No shared variables, all the data

 are CPU local" => assume no data races), to reduce overhead in interrupts.

KCSAN_SANITIZE_softirq.o = n

 These are called from save_stack_trace() on slub debug path,

 and produce insane amounts of uninteresting coverage.

KCOV_INSTRUMENT_extable.o := n

KCOV_INSTRUMENT_stacktrace.o := n

 Don't self-instrument.

 If sanitizers detect any issues in kcov, it may lead to recursion

# via printk, etc.

KCSAN_SANITIZE_kcov.o := n

CFLAGS_kcov.o := $(call cc-option, -fno-conserve-stack) -fno-stack-protector

 Don't instrument error handlers

CFLAGS_REMOVE_cfi.o := $(CC_FLAGS_CFI)

obj-y += printk/

obj-y += irq/

obj-y += rcu/

obj-y += livepatch/

obj-y += dma/

obj-y += entry/

obj-$(CONFIG_KCMP) += kcmp.o

obj-$(CONFIG_PROFILING) += profile.o

obj-y += time/

obj-$(CONFIG_FUTEX) += futex/

obj-$(CONFIG_SMP) += smp.o

ifneq ($(CONFIG_SMP),y)

obj-y += up.o

endif

obj-$(CONFIG_MODULE_SIG) += module_signing.o

obj-$(CONFIG_MODULE_SIG_FORMAT) += module_signature.o

obj-$(CONFIG_BSD_PROCESS_ACCT) += acct.o

obj-$(CONFIG_KEXEC_CORE) += kexec_core.o

obj-$(CONFIG_KEXEC_FILE) += kexec_file.o

obj-$(CONFIG_BACKTRACE_SELF_TEST) += backtracetest.o

obj-$(CONFIG_CGROUPS) += cgroup/

obj-$(CONFIG_UTS_NS) += utsname.o

obj-$(CONFIG_USER_NS) += user_namespace.o

obj-$(CONFIG_PID_NS) += pid_namespace.o

obj-$(CONFIG_IKCONFIG) += configs.o

obj-$(CONFIG_IKHEADERS) += kheaders.o

obj-$(CONFIG_SMP) += stop_machine.o

obj-$(CONFIG_GCOV_KERNEL) += gcov/

obj-$(CONFIG_KPROBES) += kprobes.o

obj-$(CONFIG_KGDB) += debug/

obj-$(CONFIG_DETECT_HUNG_TASK) += hung_task.o

obj-$(CONFIG_LOCKUP_DETECTOR) += watchdog.o

obj-$(CONFIG_SECCOMP) += seccomp.o

obj-$(CONFIG_SYSCTL) += utsname_sysctl.o

obj-$(CONFIG_LATENCYTOP) += latencytop.o

obj-$(CONFIG_FUNCTION_TRACER) += trace/

obj-$(CONFIG_TRACING) += trace/

obj-$(CONFIG_TRACE_CLOCK) += trace/

obj-$(CONFIG_RING_BUFFER) += trace/

obj-$(CONFIG_TRACEPOINTS) += trace/

obj-$(CONFIG_CPU_PM) += cpu_pm.o

obj-$(CONFIG_BPF) += bpf/

obj-$(CONFIG_KCSAN) += kcsan/

obj-$(CONFIG_HAVE_STATIC_CALL_INLINE) += static_call.o





obj-$(CONFIG_PADATA) += padata.o

obj-$(CONFIG_JUMP_LABEL) += jump_label.o



obj-$(CONFIG_RSEQ) += rseq.o



obj-$(CONFIG_RESOURCE_KUNIT_TEST) += resource_kunit.o



CFLAGS_stackleak.o += $(DISABLE_STACKLEAK_PLUGIN)

obj-$(CONFIG_GCC_PLUGIN_STACKLEAK) += stackleak.o

KASAN_SANITIZE_stackleak.o := n

KCSAN_SANITIZE_stackleak.o := n





$(obj)/configs.o: $(obj)/config_data.gz

	$(call if_changed,gzip)

filechk_cat = cat $<

	$(call filechk,cat)

$(obj)/kheaders.o: $(obj)/kheaders_data.tar.xz

quiet_cmd_genikh = CHK     $(obj)/kheaders_data.tar.xz

      cmd_genikh = $(CONFIG_SHELL) $(srctree)/kernel/gen_kheaders.sh $@



# SPDX-License-Identifier: GPL-2.0

obj-y += time.o timer.o hrtimer.o

obj-y += timekeeping.o ntp.o clocksource.o jiffies.o timer_list.o



ifeq ($(CONFIG_POSIX_TIMERS),y)

else

 obj-y += posix-stubs.o

endif

ifeq ($(CONFIG_GENERIC_CLOCKEVENTS_BROADCAST),y)

 obj-y						+= tick-broadcast.o

 obj-$(CONFIG_TICK_ONESHOT)			+= tick-broadcast-hrtimer.o

endif

obj-$(CONFIG_GENERIC_SCHED_CLOCK)		+= sched_clock.o

obj-$(CONFIG_TICK_ONESHOT)			+= tick-oneshot.o tick-sched.o

obj-$(CONFIG_DEBUG_FS)				+= timekeeping_debug.o

obj-$(CONFIG_TEST_CLOCKSOURCE_WATCHDOG)		+= clocksource-wdtest.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_DMA_OPS)			+= ops_helpers.o

obj-$(CONFIG_DMA_DECLARE_COHERENT)	+= coherent.o

obj-$(CONFIG_DMA_API_DEBUG)		+= debug.o

obj-$(CONFIG_DMA_COHERENT_POOL)		+= pool.o

# SPDX-License-Identifier: GPL-2.0

# Prevent the noinstr section from being pestered by sanitizer and other goodies

 as long as these things cannot be disabled per function.

KCOV_INSTRUMENT := n

CFLAGS_REMOVE_common.o	 = -fstack-protector -fstack-protector-strong



obj-$(CONFIG_GENERIC_ENTRY) 		+= common.o syscall_user_dispatch.o

obj-$(CONFIG_KVM_XFER_TO_GUEST_WORK)	+= kvm.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y	= printk.o

obj-$(CONFIG_PRINTK)	+= printk_safe.o

obj-$(CONFIG_A11Y_BRAILLE_CONSOLE)	+= braille.o

obj-$(CONFIG_PRINTK)	+= printk_ringbuffer.o

obj-$(CONFIG_PRINTK_INDEX)	+= index.o

# SPDX-License-Identifier: GPL-2.0

obj-y += core.o syscalls.o pi.o requeue.o waitwake.o

# SPDX-License-Identifier: GPL-2.0

obj-y := cgroup.o rstat.o namespace.o cgroup-v1.o freezer.o

obj-$(CONFIG_CGROUP_FREEZER) += legacy_freezer.o

obj-$(CONFIG_CGROUP_PIDS) += pids.o

obj-$(CONFIG_CGROUP_RDMA) += rdma.o

obj-$(CONFIG_CPUSETS) += cpuset.o

obj-$(CONFIG_CGROUP_MISC) += misc.o

obj-$(CONFIG_CGROUP_DEBUG) += debug.o

# SPDX-License-Identifier: GPL-2.0

KCSAN_SANITIZE := n



CFLAGS_REMOVE_core.o = $(CC_FLAGS_FTRACE)



	-fno-stack-protector -DDISABLE_BRANCH_PROFILING

obj-y := core.o debugfs.o report.o



CFLAGS_kcsan_test.o := $(CFLAGS_KCSAN) -g -fno-omit-frame-pointer

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_LIVEPATCH) += livepatch.o

livepatch-objs := core.o patch.o shadow.o state.o transition.o

# SPDX-License-Identifier: GPL-2.0

 Any varying coverage in these files is non-deterministic

# and is generally not a function of system call inputs.

KCOV_INSTRUMENT		:= n



# Avoid recursion lockdep -> KCSAN -> ... -> lockdep.

KCSAN_SANITIZE_lockdep.o := n

ifdef CONFIG_FUNCTION_TRACER

CFLAGS_REMOVE_mutex-debug.o = $(CC_FLAGS_FTRACE)

endif

obj-$(CONFIG_DEBUG_MUTEXES) += mutex-debug.o

ifeq ($(CONFIG_PROC_FS),y)

obj-$(CONFIG_LOCKDEP) += lockdep_proc.o

endif

obj-$(CONFIG_SMP) += spinlock.o

obj-$(CONFIG_DEBUG_SPINLOCK) += spinlock.o

obj-$(CONFIG_LOCK_TORTURE_TEST) += locktorture.o

obj-$(CONFIG_LOCK_EVENT_COUNTS) += lock_events.o

# SPDX-License-Identifier: GPL-2.0

 Any varying coverage in these files is non-deterministic

# and is generally not a function of system call inputs.





obj-$(CONFIG_RCU_TORTURE_TEST) += rcutorture.o

obj-$(CONFIG_RCU_REF_SCALE_TEST) += refscale.o

obj-$(CONFIG_TINY_RCU) += tiny.o

obj-$(CONFIG_RCU_NEED_SEGCBLIST) += rcu_segcblist.o

# SPDX-License-Identifier: GPL-2.0

CFLAGS_REMOVE_clock.o = $(CC_FLAGS_FTRACE)

endif

# The compilers are complaining about unused variables inside an if(0) scope

 block. This is daft, shut them up.

ccflags-y += $(call cc-disable-warning, unused-but-set-variable)

# These files are disabled because they produce non-interesting flaky coverage

 that is not a function of syscall inputs. E.g. involuntary context switches.

KCOV_INSTRUMENT := n

# There are numerous data races here, however, most of them are due to plain accesses.

 This would make it even harder for syzbot to find reproducers, because these

 bugs trigger without specific input. Disable by default, but should re-enable

 eventually.



 According to Alan Modra <alan@linuxcare.com.au>, the -fno-omit-frame-pointer is

 needed for x86 only.  Why this used to be enabled for all architectures is beyond

# me.  I suspect most platforms don't need this, but until we know that for sure

# I turn this off for IA-64 only.  Andreas Schwab says it's also needed on m68k

# to get a correct value for the wait-channel (WCHAN in ps). --davidm

CFLAGS_core.o := $(PROFILING) -fno-omit-frame-pointer

endif

obj-y += idle.o fair.o rt.o deadline.o

obj-y += wait.o wait_bit.o swait.o completion.o

obj-$(CONFIG_SCHED_AUTOGROUP) += autogroup.o

obj-$(CONFIG_SCHEDSTATS) += stats.o

obj-$(CONFIG_MEMBARRIER) += membarrier.o

obj-$(CONFIG_PSI) += psi.o

# SPDX-License-Identifier: GPL-2.0

obj-y := core.o ring_buffer.o callchain.o

obj-$(CONFIG_UPROBES) += uprobes.o

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_CC_IS_CLANG) += clang.o

# SPDX-License-Identifier: GPL-2.0

obj-y := irqdesc.o handle.o manage.o spurious.o resend.o chip.o dummychip.o devres.o

	CFLAGS_timings.o += -DDEBUG

endif

obj-$(CONFIG_GENERIC_IRQ_PROBE) += autoprobe.o

obj-$(CONFIG_IRQ_DOMAIN) += irqdomain.o

obj-$(CONFIG_GENERIC_PENDING_IRQ) += migration.o

obj-$(CONFIG_GENERIC_IRQ_MIGRATION) += cpuhotplug.o

obj-$(CONFIG_GENERIC_MSI_IRQ) += msi.o

obj-$(CONFIG_GENERIC_IRQ_DEBUGFS) += debugfs.o

# SPDX-License-Identifier: GPL-2.0





obj-y				+= qos.o

obj-$(CONFIG_PM)		+= main.o

obj-$(CONFIG_VT_CONSOLE_SLEEP)	+= console.o

obj-$(CONFIG_FREEZER)		+= process.o

obj-$(CONFIG_SUSPEND)		+= suspend.o

obj-$(CONFIG_PM_TEST_SUSPEND)	+= suspend_test.o

obj-$(CONFIG_HIBERNATION_SNAPSHOT_DEV) += user.o

obj-$(CONFIG_PM_AUTOSLEEP)	+= autosleep.o



obj-$(CONFIG_MAGIC_SYSRQ)	+= poweroff.o

obj-$(CONFIG_ENERGY_MODEL)	+= energy_model.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel debugger

#

obj-$(CONFIG_KGDB) += debug_core.o gdbstub.o

# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



# Copyright (c) 1999-2004 Silicon Graphics, Inc.  All Rights Reserved.

 Copyright (c) 2009 Wind River Systems, Inc. All Rights Reserved.







clean-files := gen-kdb_cmds.c

quiet_cmd_gen-kdb = GENKDB  $@

include <linux/stddef.h>"; print "\
/{next} \

		{gsub(/"/, "\\\"", $$0); \

		  print "static __initdata char kdb_cmd" cmds++ "[] = \"" $$0 "\\n\";"} \

		END {print "extern char *kdb_cmds[]; char __initdata *kdb_cmds[] = {"; for (i = 0; i < cmds; ++i) {print "  kdb_cmd" i ","}; print("  NULL\n};");}' \

		$(filter-out %/Makefile,$^) > $@#

$(obj)/gen-kdb_cmds.c:	$(src)/kdb_cmds $(src)/Makefile

# SPDX-License-Identifier: GPL-2.0

# Do not instrument the tracer itself:

ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)

ifdef CONFIG_FUNCTION_TRACER

 Avoid recursion due to instrumentation.



# selftest needs instrumentation



obj-$(CONFIG_KPROBE_EVENTS) += trace_kprobe_selftest.o

endif

# If unlikely tracing is enabled, do not trace these files

ifdef CONFIG_TRACING_BRANCHES

KBUILD_CFLAGS += -DDISABLE_BRANCH_PROFILING

endif

 for GCOV coverage profiling

ifdef CONFIG_GCOV_PROFILE_FTRACE

GCOV_PROFILE := y

endif

CFLAGS_bpf_trace.o := -I$(src)

CFLAGS_trace_benchmark.o := -I$(src)





obj-$(CONFIG_RING_BUFFER) += ring_buffer.o



obj-$(CONFIG_TRACING) += trace_seq.o

obj-$(CONFIG_TRACING) += trace_stat.o

obj-$(CONFIG_TRACING) += trace_printk.o

obj-$(CONFIG_TRACING_MAP) += tracing_map.o

obj-$(CONFIG_SYNTH_EVENT_GEN_TEST) += synth_event_gen_test.o

obj-$(CONFIG_FUNCTION_TRACER) += trace_functions.o

obj-$(CONFIG_SCHED_TRACER) += trace_sched_wakeup.o

obj-$(CONFIG_HWLAT_TRACER) += trace_hwlat.o

obj-$(CONFIG_OSNOISE_TRACER) += trace_osnoise.o

obj-$(CONFIG_NOP_TRACER) += trace_nop.o

obj-$(CONFIG_STACK_TRACER) += trace_stack.o

obj-$(CONFIG_FUNCTION_GRAPH_TRACER) += trace_functions_graph.o

obj-$(CONFIG_BLK_DEV_IO_TRACE) += blktrace.o

obj-$(CONFIG_FUNCTION_GRAPH_TRACER) += fgraph.o

ifeq ($(CONFIG_PERF_EVENTS),y)

obj-$(CONFIG_EVENT_TRACING) += trace_event_perf.o

endif

obj-$(CONFIG_PROBE_EVENTS) += trace_eprobe.o

obj-$(CONFIG_TRACE_EVENT_INJECT) += trace_events_inject.o

obj-$(CONFIG_HIST_TRIGGERS) += trace_events_hist.o

obj-$(CONFIG_BPF_EVENTS) += bpf_trace.o

obj-$(CONFIG_KPROBE_EVENTS) += trace_kprobe.o

ifeq ($(CONFIG_TRACING),y)

obj-$(CONFIG_KGDB_KDB) += trace_kdb.o

endif

obj-$(CONFIG_BOOTTIME_TRACING) += trace_boot.o

obj-$(CONFIG_FTRACE_RECORD_RECURSION) += trace_recursion_record.o



libftrace-y := ftrace.o

# SPDX-License-Identifier: GPL-2.0

obj-y := core.o

ifneq ($(CONFIG_BPF_JIT_ALWAYS_ON),y)

# ___bpf_prog_run() needs GCSE disabled on x86; see 3193c0836f203 for details

cflags-nogcse-$(CONFIG_X86)$(CONFIG_CC_IS_GCC) := -fno-gcse

endif



obj-${CONFIG_BPF_LSM}	  += bpf_inode_storage.o

obj-$(CONFIG_BPF_SYSCALL) += disasm.o

obj-$(CONFIG_BPF_JIT) += trampoline.o

ifeq ($(CONFIG_NET),y)

obj-$(CONFIG_BPF_SYSCALL) += devmap.o

obj-$(CONFIG_BPF_SYSCALL) += cpumap.o

obj-$(CONFIG_BPF_SYSCALL) += net_namespace.o

endif

obj-$(CONFIG_CGROUP_BPF) += cgroup.o

ifeq ($(CONFIG_INET),y)

ifeq ($(CONFIG_SYSFS),y)

obj-$(CONFIG_DEBUG_INFO_BTF) += sysfs_btf.o

endif

obj-${CONFIG_BPF_LSM} += bpf_lsm.o

endif

obj-$(CONFIG_BPF_PRELOAD) += preload/

# SPDX-License-Identifier: GPL-2.0

LIBBPF_DESTDIR = $(LIBBPF_OUT)



# Although not in use by libbpf's Makefile, set $(O) so that the "dummy" test

 in tools/scripts/Makefile.include always succeeds when building the kernel

 with $(O) pointing to a relative path, as in "make O=build bindeb-pkg".

$(LIBBPF_A): | $(LIBBPF_OUT)

	$(Q)$(MAKE) -C $(LIBBPF_SRCS) O=$(LIBBPF_OUT)/ OUTPUT=$(LIBBPF_OUT)/   \

		$(LIBBPF_OUT)/libbpf.a install_headers

libbpf_hdrs: $(LIBBPF_A)



	$(Q)mkdir -p $@

userccflags += -I $(srctree)/tools/include/ -I $(srctree)/tools/include/uapi \







$(obj)/iterators/iterators.o: | libbpf_hdrs



$(obj)/bpf_preload_umd: $(LIBBPF_A)



# SPDX-License-Identifier: GPL-2.0

OUTPUT := .output

abs_out := $(abspath $(OUTPUT))

CLANG ?= clang

LLVM_STRIP ?= llvm-strip

TOOLS_PATH := $(abspath ../../../../tools)

BPFTOOL_OUTPUT := $(abs_out)/bpftool

DEFAULT_BPFTOOL := $(OUTPUT)/sbin/bpftool

BPFTOOL ?= $(DEFAULT_BPFTOOL)

LIBBPF_OUTPUT := $(abs_out)/libbpf



CFLAGS := -g -Wall

else

Q = @

msg = @printf '  %-8s %s%s\n' "$(1)" "$(notdir $(2))" "$(if $(3), $(3))";

MAKEFLAGS += --no-print-directory

submake_extras := feature_display=0

endif



.PHONY: all clean



	$(call msg,CLEAN)

	$(Q)rm -rf $(OUTPUT) iterators

iterators.skel.h: $(OUTPUT)/iterators.bpf.o | $(BPFTOOL)

	$(Q)$(BPFTOOL) gen skeleton $< > $@



	$(Q)$(CLANG) -g -O2 -target bpf $(INCLUDES)			      \

	$(LLVM_STRIP) -g $@

	$(Q)mkdir -p $@

	$(Q)$(MAKE) $(submake_extras) -C $(LIBBPF_SRC)			       \



$(DEFAULT_BPFTOOL): $(BPFOBJ) | $(BPFTOOL_OUTPUT)

	$(Q)$(MAKE) $(submake_extras) -C $(BPFTOOL_SRC)			       \

		    OUTPUT=$(BPFTOOL_OUTPUT)/				       \

		    LIBBPF_DESTDIR=$(LIBBPF_DESTDIR)/			       \

		    prefix= DESTDIR=$(abs_out)/ install-bin

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for some libs needed in the kernel.







 These files are disabled because they produce lots of non-interesting and/or

 flaky coverage that is not a function of syscall inputs. For example,

# rbtree can be global and individual rotations don't correlate with inputs.

KCOV_INSTRUMENT_string.o := n

KCOV_INSTRUMENT_rbtree.o := n

KCOV_INSTRUMENT_list_debug.o := n

KCOV_INSTRUMENT_debugobjects.o := n



 string.o implements standard library functions like memset/memcpy etc.

 Use -ffreestanding to ensure that the compiler does not try to "optimize"

# them into calls to themselves.

CFLAGS_string.o := -ffreestanding

# Early boot use of cmdline, don't instrument it

KASAN_SANITIZE_string.o := n



	 idr.o extable.o sha1.o irq_regs.o argv_split.o \

	 flex_proportions.o ratelimit.o show_mem.o \

	 earlycpio.o seq_buf.o siphash.o dec_and_lock.o \



lib-$(CONFIG_SMP) += cpumask.o

lib-y	+= kobject.o klist.o



obj-y += bcd.o sort.o parser.o debug_locks.o random32.o \

	 bust_spinlocks.o kasprintf.o bitmap.o scatterlist.o \

	 list_sort.o uuid.o iov_iter.o clz_ctz.o \

	 percpu-refcount.o rhashtable.o \

	 generic-radix-tree.o

obj-$(CONFIG_TEST_STRING_HELPERS) += test-string_helpers.o

obj-$(CONFIG_TEST_HEXDUMP) += test_hexdump.o

obj-$(CONFIG_FIND_BIT_BENCHMARK) += find_bit_benchmark.o

obj-$(CONFIG_TEST_FIRMWARE) += test_firmware.o

obj-$(CONFIG_TEST_SYSCTL) += test_sysctl.o

obj-$(CONFIG_TEST_HASH) += test_hash.o test_siphash.o

obj-$(CONFIG_KASAN_KUNIT_TEST) += test_kasan.o

CFLAGS_test_kasan.o += -fno-builtin

obj-$(CONFIG_KASAN_MODULE_TEST) += test_kasan_module.o

obj-$(CONFIG_TEST_UBSAN) += test_ubsan.o

UBSAN_SANITIZE_test_ubsan.o := y

obj-$(CONFIG_TEST_LIST_SORT) += test_list_sort.o

obj-$(CONFIG_TEST_VMALLOC) += test_vmalloc.o

obj-$(CONFIG_TEST_RHASHTABLE) += test_rhashtable.o

obj-$(CONFIG_TEST_USER_COPY) += test_user_copy.o

obj-$(CONFIG_TEST_STATIC_KEYS) += test_static_key_base.o

obj-$(CONFIG_TEST_SCANF) += test_scanf.o

obj-$(CONFIG_TEST_STRSCPY) += test_strscpy.o

obj-$(CONFIG_TEST_XARRAY) += test_xarray.o

obj-$(CONFIG_TEST_KMOD) += test_kmod.o

obj-$(CONFIG_TEST_MEMCAT_P) += test_memcat_p.o

obj-$(CONFIG_TEST_STACKINIT) += test_stackinit.o

obj-$(CONFIG_TEST_MEMINIT) += test_meminit.o

obj-$(CONFIG_TEST_HMM) += test_hmm.o



#

 CFLAGS for compiling floating point code inside the kernel. x86/Makefile turns

 off the generation of FPU/SSE* instructions for kernel proper but FPU_FLAGS

# get appended last to CFLAGS and thus override those previous compiler options.

#

ifdef CONFIG_CC_IS_GCC

# Stack alignment mismatch, proceed with caution.

# GCC < 7.1 cannot compile code using `double` and -mpreferred-stack-boundary=3

# (8B stack alignment).

 See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53383



# The "-msse" in the first argument is there so that the

# -mpreferred-stack-boundary=3 build error:

#

#  -mpreferred-stack-boundary=3 is not between 4 and 12

#

# can be triggered. Otherwise gcc doesn't complain.



CFLAGS_test_fpu.o += $(FPU_CFLAGS)

obj-$(CONFIG_TEST_LIVEPATCH) += livepatch/



CFLAGS_kobject_uevent.o += -DDEBUG

endif

obj-$(CONFIG_DEBUG_INFO_REDUCED) += debug_info.o





obj-$(CONFIG_GENERIC_PCI_IOMAP) += pci_iomap.o

obj-$(CONFIG_CHECK_SIGNATURE) += check_signature.o

obj-$(CONFIG_DEBUG_LOCKING_API_SELFTESTS) += locking-selftest.o

lib-y += logic_pio.o





obj-$(CONFIG_INTERVAL_TREE) += interval_tree.o

obj-$(CONFIG_DEBUG_LIST) += list_debug.o

obj-$(CONFIG_DEBUG_OBJECTS) += debugobjects.o

obj-$(CONFIG_BITREVERSE) += bitrev.o

obj-$(CONFIG_PACKING)	+= packing.o

obj-$(CONFIG_CRC16)	+= crc16.o

obj-$(CONFIG_CRC_T10DIF)+= crc-t10dif.o

obj-$(CONFIG_CRC32)	+= crc32.o

obj-$(CONFIG_CRC4)	+= crc4.o

obj-$(CONFIG_LIBCRC32C)	+= libcrc32c.o

obj-$(CONFIG_XXHASH)	+= xxhash.o

obj-$(CONFIG_GENERIC_ALLOCATOR) += genalloc.o

obj-$(CONFIG_842_COMPRESS) += 842/

obj-$(CONFIG_BCH) += bch.o

obj-$(CONFIG_LZO_DECOMPRESS) += lzo/

obj-$(CONFIG_LZ4HC_COMPRESS) += lz4/

obj-$(CONFIG_ZSTD_COMPRESS) += zstd/

obj-$(CONFIG_RAID6_PQ) += raid6/

lib-$(CONFIG_DECOMPRESS_BZIP2) += decompress_bunzip2.o

lib-$(CONFIG_DECOMPRESS_XZ) += decompress_unxz.o

lib-$(CONFIG_DECOMPRESS_LZ4) += decompress_unlz4.o



obj-$(CONFIG_TEXTSEARCH_KMP) += ts_kmp.o

obj-$(CONFIG_TEXTSEARCH_FSM) += ts_fsm.o

obj-$(CONFIG_SMP) += percpu_counter.o

obj-$(CONFIG_AUDIT_COMPAT_GENERIC) += compat_audit.o

obj-$(CONFIG_IOMMU_HELPER) += iommu-helper.o

obj-$(CONFIG_FAULT_INJECTION) += fault-inject.o

obj-$(CONFIG_FAULT_INJECTION_USERCOPY) += fault-inject-usercopy.o

obj-$(CONFIG_NOTIFIER_ERROR_INJECTION) += notifier-error-inject.o

obj-$(CONFIG_NETDEV_NOTIFIER_ERROR_INJECT) += netdev-notifier-error-inject.o

obj-$(CONFIG_OF_RECONFIG_NOTIFIER_ERROR_INJECT) += \

obj-$(CONFIG_FUNCTION_ERROR_INJECTION) += error-inject.o

lib-$(CONFIG_GENERIC_BUG) += bug.o

obj-$(CONFIG_HAVE_ARCH_TRACEHOOK) += syscall.o















obj-$(CONFIG_DQL) += dynamic_queue_limits.o

obj-$(CONFIG_GLOB) += glob.o

obj-$(CONFIG_GLOB_SELFTEST) += globtest.o

obj-$(CONFIG_MPILIB) += mpi/





obj-$(CONFIG_GENERIC_STRNLEN_USER) += strnlen_user.o

obj-$(CONFIG_GENERIC_NET_UTILS) += net_utils.o

obj-$(CONFIG_SG_SPLIT) += sg_split.o

obj-$(CONFIG_MEMREGION) += memregion.o

obj-$(CONFIG_IRQ_POLL) += irq_poll.o

 stackdepot.c should not be instrumented or call instrumented functions.

# Prevent the compiler from calling builtins like memcmp() or bcmp() from this

# file.

CFLAGS_stackdepot.o += -fno-builtin

KASAN_SANITIZE_stackdepot.o := n

KCOV_INSTRUMENT_stackdepot.o := n

libfdt_files = fdt.o fdt_ro.o fdt_wip.o fdt_rw.o fdt_sw.o fdt_strerror.o \

$(foreach file, $(libfdt_files), \

	$(eval CFLAGS_$(file) = -I $(srctree)/scripts/dtc/libfdt))

lib-$(CONFIG_LIBFDT) += $(libfdt_files)



obj-$(CONFIG_INTERVAL_TREE_TEST) += interval_tree_test.o

obj-$(CONFIG_PERCPU_TEST) += percpu_test.o

obj-$(CONFIG_ASN1) += asn1_decoder.o





hostprogs	:= gen_crc32table

hostprogs	+= gen_crc64table

clean-files	:= crc32table.h

clean-files	+= crc64table.h





	$(call cmd,crc32)





	$(call cmd,crc64)



# Build a fast OID lookip registry from include/linux/oid_registry.h

#



$(obj)/oid_registry.o: $(obj)/oid_registry_data.c

			    $(src)/build_OID_registry

	$(call cmd,build_OID_registry)

      cmd_build_OID_registry = perl $(srctree)/$(src)/build_OID_registry $< $@

clean-files	+= oid_registry_data.c

obj-$(CONFIG_UCS2_STRING) += ucs2_string.o

obj-$(CONFIG_UBSAN) += ubsan.o

endif

CFLAGS_ubsan.o := -fno-stack-protector $(DISABLE_STACKLEAK_PLUGIN)

obj-$(CONFIG_SBITMAP) += sbitmap.o

obj-$(CONFIG_PARMAN) += parman.o

# GCC library routines

obj-$(CONFIG_GENERIC_LIB_ASHRDI3) += ashrdi3.o

obj-$(CONFIG_GENERIC_LIB_MULDI3) += muldi3.o

obj-$(CONFIG_GENERIC_LIB_UCMPDI2) += ucmpdi2.o



 pldmfw library



# KUnit tests

CFLAGS_bitfield_kunit.o := $(DISABLE_STRUCTLEAK_PLUGIN)

obj-$(CONFIG_LIST_KUNIT_TEST) += list-test.o

obj-$(CONFIG_BITS_TEST) += test_bits.o

obj-$(CONFIG_CMDLINE_KUNIT_TEST) += cmdline_kunit.o

obj-$(CONFIG_SLUB_KUNIT_TEST) += slub_kunit.o

obj-$(CONFIG_MEMCPY_KUNIT_TEST) += memcpy_kunit.o

obj-$(CONFIG_GENERIC_LIB_DEVMEM_IS_ALLOWED) += devmem_is_allowed.o

# FORTIFY_SOURCE compile-time behavior tests

TEST_FORTIFY_LOGS = $(patsubst $(srctree)/$(src)/%.c, %.log, $(TEST_FORTIFY_SRCS))

TEST_FORTIFY_LOG = test_fortify.log

			$(call cc-disable-warning,fortify-source)

clean-files += $(addsuffix .o, $(TEST_FORTIFY_LOGS))

			   $(src)/test_fortify/test_fortify.h \

			   $(srctree)/include/linux/fortify-string.h \

	$(call if_changed,test_fortify)

quiet_cmd_gen_fortify_log = GEN     $@



clean-files += $(TEST_FORTIFY_LOG)



# Fake dependency to trigger the fortify tests.

ifeq ($(CONFIG_FORTIFY_SOURCE),y)

$(obj)/string.o: $(obj)/$(TEST_FORTIFY_LOG)

endif

 SPDX-License-Identifier: GPL-2.0-only

lzo_decompress-objs := lzo1x_decompress_safe.o

obj-$(CONFIG_LZO_COMPRESS) += lzo_compress.o

 SPDX-License-Identifier: GPL-2.0-only

ccflags-y += -O3

obj-$(CONFIG_LZ4_COMPRESS) += lz4_compress.o

obj-$(CONFIG_LZ4_DECOMPRESS) += lz4_decompress.o

 SPDX-License-Identifier: GPL-2.0-only



 This is a modified version of zlib, which does all memory

 allocation ahead of time.



# This is the code for s390 zlib hardware support.

#

obj-$(CONFIG_ZLIB_DFLTCC) += zlib_dfltcc.o

zlib_dfltcc-objs := dfltcc.o dfltcc_deflate.o dfltcc_inflate.o



# DIM Dynamic Interrupt Moderation library

#



dim-y := dim.o net_dim.o rdma_dim.o

obj-$(CONFIG_KUNIT) +=			kunit.o

					string-stream.o \

					assert.o \



kunit-objs +=				debugfs.o

endif



 string-stream-test compiles built-in only.



# SPDX-License-Identifier: GPL-2.0



raid6_pq-y	+= algos.o recov.o tables.o int1.o int2.o int4.o \

		   int8.o int16.o int32.o



hostprogs	+= mktables

ifeq ($(CONFIG_ALTIVEC),y)

# Enable <altivec.h>

altivec_flags += -isystem $(shell $(CC) -print-file-name=include)

ifdef CONFIG_CC_IS_CLANG

 clang ppc port does not yet support -maltivec when -msoft-float is

# enabled. A future release of clang will resolve this

# https://bugs.llvm.org/show_bug.cgi?id=31177

CFLAGS_REMOVE_altivec1.o  += -msoft-float

CFLAGS_REMOVE_altivec2.o  += -msoft-float

CFLAGS_REMOVE_altivec4.o  += -msoft-float

CFLAGS_REMOVE_altivec8.o  += -msoft-float

CFLAGS_REMOVE_vpermxor1.o += -msoft-float

CFLAGS_REMOVE_vpermxor2.o += -msoft-float

CFLAGS_REMOVE_vpermxor4.o += -msoft-float

CFLAGS_REMOVE_vpermxor8.o += -msoft-float

endif

endif

 The GCC option -ffreestanding is required in order to compile code containing

 ARM/NEON intrinsics in a non C99-compliant environment (such as the kernel)

NEON_FLAGS := -ffreestanding

# Enable <arm_neon.h>

ifeq ($(ARCH),arm)

CFLAGS_recov_neon_inner.o += $(NEON_FLAGS)

CFLAGS_REMOVE_neon1.o += -mgeneral-regs-only

CFLAGS_REMOVE_neon4.o += -mgeneral-regs-only



quiet_cmd_unroll = UNROLL  $@

      cmd_unroll = $(AWK) -v N=$* -f $(srctree)/$(src)/unroll.awk < $< > $@

targets += int1.c int2.c int4.c int8.c int16.c int32.c

	$(call if_changed,unroll)

targets += altivec1.c altivec2.c altivec4.c altivec8.c

	$(call if_changed,unroll)

CFLAGS_vpermxor1.o += $(altivec_flags)

CFLAGS_vpermxor4.o += $(altivec_flags)

targets += vpermxor1.c vpermxor2.c vpermxor4.c vpermxor8.c

	$(call if_changed,unroll)

targets += neon1.c neon2.c neon4.c neon8.c

	$(call if_changed,unroll)

targets += s390vx8.c

	$(call if_changed,unroll)

quiet_cmd_mktable = TABLE   $@



targets += tables.c

# SPDX-License-Identifier: GPL-2.0

#

# This is a simple Makefile to test some of the RAID-6 code

# from userspace.

#

OPTFLAGS = -O2			# Adjust as desired

CFLAGS	 = -I.. -I ../../../include -g $(OPTFLAGS)

AR	 = ar

OBJS	 = int1.o int2.o int4.o int8.o int16.o int32.o recov.o algos.o tables.o

ARCH := $(shell uname -m 2>/dev/null | sed -e /s/i.86/i386/)

ifeq ($(ARCH),i386)

        CFLAGS += -DCONFIG_X86_32

        IS_X86 = yes

endif

ifeq ($(ARCH),arm)

        HAS_NEON = yes

endif

        HAS_NEON = yes

endif

ifeq ($(IS_X86),yes)

        OBJS   += mmx.o sse1.o sse2.o avx2.o recov_ssse3.o recov_avx2.o avx512.o recov_avx512.o

	CFLAGS += $(shell echo "vpmovm2b %k1, %zmm5" |          \

		    rm ./-.o && echo -DCONFIG_AS_AVX512=1)

else ifeq ($(HAS_NEON),yes)

else

        HAS_ALTIVEC := $(shell printf '\#include <altivec.h>\nvector int a;\n' |\

                CFLAGS += -DCONFIG_ALTIVEC

                OBJS += altivec1.o altivec2.o altivec4.o altivec8.o \

                        vpermxor1.o vpermxor2.o vpermxor4.o vpermxor8.o

        endif

endif

	$(CC) $(CFLAGS) -c -o $@ $<

	cp -f $< $@

	cp -f $< $@

all:	raid6.a raid6test

raid6.a: $(OBJS)

	 $(AR) cq $@ $^



raid6test: test.c raid6.a



	$(AWK) ../unroll.awk -vN=1 < neon.uc > $@

neon2.c: neon.uc ../unroll.awk



	$(AWK) ../unroll.awk -vN=4 < neon.uc > $@

neon8.c: neon.uc ../unroll.awk











	$(AWK) ../unroll.awk -vN=1 < vpermxor.uc > $@

vpermxor2.c: vpermxor.uc ../unroll.awk



	$(AWK) ../unroll.awk -vN=4 < vpermxor.uc > $@

vpermxor8.c: vpermxor.uc ../unroll.awk











int16.c: int.uc ../unroll.awk



int32.c: int.uc ../unroll.awk



	./mktables > tables.c

clean:



spotless: clean

	rm -f *~

# SPDX-License-Identifier: GPL-2.0

GENERIC_VDSO_DIR := $(dir $(GENERIC_VDSO_MK_PATH))



 This cmd checks that the vdso library does not contain absolute relocation

 It has to be called after the linking of the vdso library and requires it

 as a parameter.



 $(ARCH_REL_TYPE_ABS) is defined in the arch specific makefile and corresponds

# to the absolute relocation types printed by "objdump -R" and accepted by the

# dynamic linker.



quiet_cmd_vdso_check = VDSOCHK $@

      cmd_vdso_check = if $(OBJDUMP) -R $@ | egrep -h "$(ARCH_REL_TYPE_ABS)"; \

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for livepatch test code.

				test_klp_callbacks_demo2.o \

				test_klp_callbacks_busy.o \

				test_klp_livepatch.o \

				test_klp_state.o \

				test_klp_state2.o \

				test_klp_state3.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_XZ_DEC) += xz_dec.o



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_842_COMPRESS) += 842_compress.o

 SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause

# ################################################################

 Copyright (c) Facebook, Inc.

# All rights reserved.

#

# This source code is licensed under both the BSD-style license (found in the

 LICENSE file in the root directory of this source tree) and the GPLv2 (found

 in the COPYING file in the root directory of this source tree).

 You may select, at your option, one of the above-listed licenses.

# ################################################################

obj-$(CONFIG_ZSTD_DECOMPRESS) += zstd_decompress.o

zstd_compress-y := \

		common/debug.o \

		common/entropy_common.o \

		common/zstd_common.o \

		compress/fse_compress.o \

		compress/hist.o \

		compress/huf_compress.o \

		compress/zstd_compress_sequences.o \

		compress/zstd_compress_superblock.o \

		compress/zstd_double_fast.o \

		compress/zstd_lazy.o \

		compress/zstd_ldm.o \

		compress/zstd_opt.o \

zstd_decompress-y := \

		common/debug.o \

		common/entropy_common.o \

		common/zstd_common.o \

		decompress/huf_decompress.o \

		decompress/zstd_ddict.o \

		decompress/zstd_decompress_block.o \

 SPDX-License-Identifier: GPL-2.0-only



 This is a modified version of zlib, which does all memory

 allocation ahead of time.



# This is only the decompression, see zlib_deflate for the

# the compression

#

 Decompression needs to be serialized for each memory

 allocation.



 (The upsides of the simplification is that you can't get in

# any nasty situations wrt memory management, and that the

 uncompression can be done without blocking on allocation).







		     inftrees.o inflate_syms.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PLDMFW)	+= pldmfw.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y += div64.o gcd.o lcm.o int_pow.o int_sqrt.o reciprocal_div.o

obj-$(CONFIG_PRIME_NUMBERS)	+= prime_numbers.o

obj-$(CONFIG_RATIONAL)		+= rational.o

obj-$(CONFIG_TEST_DIV64)	+= test_div64.o

# SPDX-License-Identifier: GPL-2.0

# Font handling

font-objs := fonts.o

font-objs-$(CONFIG_FONT_SUN8x16)   += font_sun8x16.o

font-objs-$(CONFIG_FONT_SUN12x22)  += font_sun12x22.o

font-objs-$(CONFIG_FONT_10x18)     += font_10x18.o

font-objs-$(CONFIG_FONT_ACORN_8x8) += font_acorn_8x8.o

font-objs-$(CONFIG_FONT_MINI_4x6)  += font_mini_4x6.o

font-objs-$(CONFIG_FONT_6x10)      += font_6x10.o

font-objs-$(CONFIG_FONT_TER16x32)  += font_ter16x32.o



font-objs += $(font-objs-y)

obj-$(CONFIG_FONT_SUPPORT)         += font.o

 SPDX-License-Identifier: GPL-2.0-only



 This is a modified version of zlib, which does all memory

 allocation ahead of time.



# This is the compression code, see zlib_inflate for the

# decompression code.

#

obj-$(CONFIG_ZLIB_DEFLATE) += zlib_deflate.o

# SPDX-License-Identifier: GPL-2.0

#

# MPI multiprecision maths library (from gpg)

#

obj-$(CONFIG_MPILIB) = mpi.o

	ec.o				\

	mpicoder.o			\

	mpi-bit.o			\

	mpi-div.o			\

	mpi-mod.o			\

	mpi-pow.o			\

# SPDX-License-Identifier: GPL-2.0

# chacha is used by the /dev/random driver which is always builtin







libblake2s-generic-y				+= blake2s-generic.o



libchacha20poly1305-y				+= chacha20poly1305.o

obj-$(CONFIG_CRYPTO_LIB_CURVE25519_GENERIC)	+= libcurve25519-generic.o

libcurve25519-generic-y				:= curve25519-fiat32.o

libcurve25519-generic-$(CONFIG_ARCH_SUPPORTS_INT128)	:= curve25519-hacl64.o



obj-$(CONFIG_CRYPTO_LIB_CURVE25519)		+= libcurve25519.o

libcurve25519-y					+= curve25519.o

obj-$(CONFIG_CRYPTO_LIB_DES)			+= libdes.o

libdes-y					:= des.o

obj-$(CONFIG_CRYPTO_LIB_POLY1305_GENERIC)	+= libpoly1305.o

libpoly1305-y					:= poly1305-donna32.o







libblake2s-y					+= blake2s-selftest.o

libchacha20poly1305-y				+= chacha20poly1305-selftest.o

 SPDX-License-Identifier: GPL-2.0-only



 This is a modified version of reed solomon lib,





# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the linux ipc.

#

obj-$(CONFIG_SYSVIPC_COMPAT) += compat.o

obj-$(CONFIG_SYSVIPC) += util.o msgutil.o msg.o sem.o shm.o syscall.o

obj-$(CONFIG_POSIX_MQUEUE) += mqueue.o msgutil.o

obj-$(CONFIG_IPC_NS) += namespace.o



# SPDX-License-Identifier: GPL-2.0

###

 scripts contains sources for various helper programs used throughout

 the kernel for the build process.





hostprogs-always-$(CONFIG_BUILD_BIN2C)			+= bin2c

hostprogs-always-$(CONFIG_KALLSYMS)			+= kallsyms

hostprogs-always-$(BUILD_C_RECORDMCOUNT)		+= recordmcount

hostprogs-always-$(CONFIG_BUILDTIME_TABLE_SORT)		+= sorttable

hostprogs-always-$(CONFIG_ASN1)				+= asn1_compiler

hostprogs-always-$(CONFIG_SYSTEM_EXTRA_CERTIFICATE)	+= insert-sys-cert

hostprogs-always-$(CONFIG_SYSTEM_REVOCATION_LIST)	+= extract-cert

HOSTCFLAGS_extract-cert.o = $(CRYPTO_CFLAGS)



ifdef CONFIG_UNWINDER_ORC

ifeq ($(ARCH),x86_64)

ARCH := x86

endif

HOSTCFLAGS_sorttable.o += -I$(srctree)/tools/arch/x86/include

HOSTLDLIBS_sorttable = -lpthread

endif

 The following programs are only built on demand

hostprogs += unifdef

# The module linker script is preprocessed on demand

targets += module.lds

subdir-$(CONFIG_MODVERSIONS) += genksyms



 Let clean descend into subdirs

subdir-	+= basic dtc gdb kconfig mod

 SPDX-License-Identifier: GPL-2.0-only

subdir-y := mdp genheaders

# SPDX-License-Identifier: GPL-2.0

hostprogs-always-y += mdp

HOST_EXTRACFLAGS += \

	-I$(srctree)/include/uapi -I$(srctree)/include \

	-I$(srctree)/security/selinux/include -I$(objtree)/include

# SPDX-License-Identifier: GPL-2.0

	-I$(srctree)/security/selinux/include

# SPDX-License-Identifier: GPL-2.0

hostprogs-always-y	+= genksyms



 FIXME: fix the ambiguous grammar in parse.y and delete this hack



 Suppress shift/reduce, reduce/reduce conflicts warnings

# unless W=1 is specified.

#

 Just in case, run "$(YACC) --version" without suppressing stderr

# so that 'bison: not found' will be displayed if it is missing.





$(obj)/pars%.tab.c $(obj)/pars%.tab.h: $(src)/pars%.y FORCE

	$(call if_changed,bison_no_warn)



 -I needed for generated C source to include headers in source tree

HOSTCFLAGS_parse.tab.o := -I $(srctree)/$(src)



 dependencies on generated files need to be listed explicitly

$(obj)/lex.lex.o: $(obj)/parse.tab.h

# SPDX-License-Identifier: GPL-2.0

$(obj)/randomize_layout_plugin.so: $(objtree)/$(obj)/randomize_layout_seed.h

quiet_cmd_create_randomize_layout_seed = GENSEED $@

  $(CONFIG_SHELL) $(srctree)/$(src)/gen-random-seed.sh $@ $(objtree)/include/generated/randomize_layout_hash.h

	$(call if_changed,create_randomize_layout_seed)



# Build rules for plugins

#

 No extra code is needed for single-file plugins.

# For multi-file plugins, use *-objs syntax to list the objects.

#

# If the plugin foo.so is compiled from foo.c and foo2.c, you can do:

#

 foo-objs := foo.o foo2.o



always-y += $(GCC_PLUGIN)

GCC_PLUGINS_DIR = $(shell $(CC) -print-file-name=plugin)

plugin_cxxflags	= -Wp,-MMD,$(depfile) $(KBUILD_HOSTCXXFLAGS) -fPIC \

		   -ggdb -Wno-narrowing -Wno-unused-variable \

		   -Wno-format-diag

plugin_ldflags	= -shared





plugin-single	:= $(addprefix $(obj)/, $(plugin-single))

plugin-multi	:= $(addprefix $(obj)/, $(plugin-multi))

plugin-objs	:= $(addprefix $(obj)/, $(plugin-objs))

quiet_cmd_plugin_cxx_so_c = HOSTCXX $@



$(plugin-single): $(obj)/%.so: $(src)/%.c FORCE

	$(call if_changed_dep,plugin_cxx_so_c)

			   $(addprefix $(obj)/, $($(target-stem)-objs))

$(plugin-multi): FORCE



quiet_cmd_plugin_cxx_o_c = HOSTCXX $@



	$(call if_changed_dep,plugin_cxx_o_c)

 SPDX-License-Identifier: GPL-2.0-only



# fixdep: used to generate dependency information during build process

hostprogs-always-y	+= fixdep

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0







always-y += $(symlinks)



endif

      cmd_gen_constants_py = \



	$(call if_changed_dep,gen_constants_py)

clean-files := *.pyc *.pyo

# SPDX-License-Identifier: GPL-2.0

CFLAGS_REMOVE_empty.o += $(CC_FLAGS_LTO)

hostprogs-always-y	+= modpost mk_elfconfig



modpost-objs	:= modpost.o file2alias.o sumversion.o



	$(call filechk,offsets,__DEVICETABLE_OFFSETS_H__)

targets += $(devicetable-offsets-file) devicetable-offsets.s

# dependencies on generated files need to be listed explicitly

$(obj)/modpost.o $(obj)/file2alias.o $(obj)/sumversion.o: $(obj)/elfconfig.h

$(obj)/file2alias.o: $(obj)/$(devicetable-offsets-file)

quiet_cmd_elfconfig = MKELF   $@

      cmd_elfconfig = $(obj)/mk_elfconfig < $< > $@

$(obj)/elfconfig.h: $(obj)/empty.o $(obj)/mk_elfconfig FORCE

	$(call if_changed,elfconfig)

targets += elfconfig.h

# SPDX-License-Identifier: GPL-2.0

 scripts/dtc makefile



 *** Also keep .gitignore in sync when changing ***



dtc-objs	+= dtc-lexer.lex.o dtc-parser.tab.o

 The upstream project builds libfdt as a separate library.  We are choosing to

# instead directly link the libfdt object files into fdtoverlay.

libfdt-objs	:= fdt.o fdt_ro.o fdt_wip.o fdt_sw.o fdt_rw.o fdt_strerror.o fdt_empty_tree.o fdt_addresses.o fdt_overlay.o

libfdt		= $(addprefix libfdt/,$(libfdt-objs))



 Source files need to get at the userspace version of libfdt_env.h to compile



ifeq ($(shell pkg-config --exists yaml-0.1 2>/dev/null && echo yes),)

ifneq ($(CHECK_DT_BINDING)$(CHECK_DTBS),)

$(error dtc needs libyaml for DT schema validation support. \

else

 To include <yaml.h> installed in a non-default path

HOSTCFLAGS_yamltree.o := $(shell pkg-config --cflags yaml-0.1)

# To link libyaml installed in a non-default path

HOSTLDLIBS_dtc	:= $(shell pkg-config yaml-0.1 --libs)

endif

 Generated files need one more search path to include headers in source tree

HOSTCFLAGS_dtc-lexer.lex.o := -I $(srctree)/$(src)

HOSTCFLAGS_dtc-parser.tab.o := -I $(srctree)/$(src)

# dependencies on generated files need to be listed explicitly

$(obj)/dtc-lexer.lex.o: $(obj)/dtc-parser.tab.h

# SPDX-License-Identifier: GPL-2.0

# ===========================================================================

 Kernel configuration targets

# These targets are used from top-level makefile

ifdef KBUILD_KCONFIG

else



ifndef KBUILD_DEFCONFIG

KBUILD_DEFCONFIG := defconfig

endif

silent := -s

endif

export KCONFIG_DEFCONFIG_LIST :=



 We need this, in case the user has it in its environment

unexport CONFIG_

menuconfig-prog	:= mconf

nconfig-prog	:= nconf

gconfig-prog	:= gconf

xconfig-prog	:= qconf

define config_rule

PHONY += $(1)

$(1): $(obj)/$($(1)-prog)

	$(Q)$$< $(silent) $(Kconfig)



$(foreach c, config menuconfig nconfig gconfig xconfig, $(eval $(call config_rule,$(c))))

PHONY += localmodconfig localyesconfig

	$(Q)$(PERL) $(srctree)/$(src)/streamline_config.pl --$@ $(srctree) $(Kconfig) > .tmp.config

		 $< $(silent) --oldconfig $(Kconfig);		\

		mv -f .tmp.config .config;			\

		$< $(silent) --oldconfig $(Kconfig);		\

	fi



 These targets map 1:1 to the commandline options of 'conf'



 Note:

  syncconfig has become an internal implementation detail and is now

#  deprecated for external use

simple-targets := oldconfig allnoconfig allyesconfig allmodconfig \

	helpnewconfig yes2modconfig mod2yesconfig

PHONY += $(simple-targets)

$(simple-targets): $(obj)/conf

	$(Q)$< $(silent) --$@ $(Kconfig)

PHONY += savedefconfig defconfig

savedefconfig: $(obj)/conf

	$(Q)$< $(silent) --$@=defconfig $(Kconfig)

defconfig: $(obj)/conf

ifneq ($(wildcard $(srctree)/arch/$(SRCARCH)/configs/$(KBUILD_DEFCONFIG)),)

	$(Q)$< $(silent) --defconfig=arch/$(SRCARCH)/configs/$(KBUILD_DEFCONFIG) $(Kconfig)







%.config: $(obj)/conf

	$(Q)$(MAKE) -f $(srctree)/Makefile olddefconfig



# CHECK: -o cache_dir=<path> working?

PHONY += testconfig

testconfig: $(obj)/conf

	-o cache_dir=$(abspath $(obj)/tests/.cache) \

	$(if $(findstring 1,$(KBUILD_VERBOSE)),--capture=no)

clean-files += tests/.cache

 Help text used by make help

	@echo  '  config	  - Update current config utilising a line-oriented program'

	@echo  '  xconfig	  - Update current config utilising a Qt based front-end'

	@echo  '  oldconfig	  - Update current config utilising a provided .config as base'

	@echo  '  defconfig	  - New config with default from ARCH supplied defconfig'

	@echo  '  savedefconfig   - Save current config as ./defconfig (minimal config)'

	@echo  '  allnoconfig	  - New config where all options are answered with no'

	@echo  '  allyesconfig	  - New config where all options are accepted with yes'

	@echo  '  allmodconfig	  - New config selecting modules when possible'

	@echo  '  yes2modconfig	  - Change answers from yes to mod if possible'

	@echo  '  listnewconfig   - List new options'

	@echo  '  olddefconfig	  - Same as oldconfig but sets new symbols to their'

	@echo  '                    default value without prompting'



# ===========================================================================

# object files used by all kconfig flavours



$(obj)/lexer.lex.o: $(obj)/parser.tab.h



# conf: Used for defconfig, oldconfig and related targets

hostprogs	+= conf



# nconf: Used for the nconfig target based on ncurses

nconf-objs	:= nconf.o nconf.gui.o $(common-objs)



$(obj)/nconf.o $(obj)/nconf.gui.o: $(obj)/nconf-cfg

 mconf: Used for the menuconfig target based on lxdialog

hostprogs	+= mconf

mconf-objs	:= mconf.o $(lxdialog) $(common-objs)

  $(eval HOSTCFLAGS_$f = $$(shell . $(obj)/mconf-cfg && echo $$$$cflags)))



 qconf: Used for the xconfig target based on Qt

hostprogs	+= qconf



HOSTLDLIBS_qconf	= $(shell . $(obj)/qconf-cfg && echo $$libs)

HOSTCXXFLAGS_qconf.o	= $(shell . $(obj)/qconf-cfg && echo $$cflags)

HOSTCXXFLAGS_qconf-moc.o = $(shell . $(obj)/qconf-cfg && echo $$cflags)

$(obj)/qconf.o: $(obj)/qconf-cfg

quiet_cmd_moc = MOC     $@





targets += qconf-moc.cc

# gconf: Used for the gconfig target based on GTK+



HOSTCFLAGS_gconf.o  = $(shell . $(obj)/gconf-cfg && echo $$cflags)

$(obj)/gconf.o: $(obj)/gconf-cfg

# check if necessary packages are available, and configure build flags

filechk_conf_cfg = $(CONFIG_SHELL) $<



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.







obj-y                          := main.o version.o mounts.o

else

obj-$(CONFIG_BLK_DEV_INITRD)   += initramfs.o

endif



obj-y                          += init_task.o

mounts-$(CONFIG_BLK_DEV_RAM)	+= do_mounts_rd.o

mounts-$(CONFIG_BLK_DEV_INITRD)	+= do_mounts_initrd.o

# dependencies on generated files need to be listed explicitly

$(obj)/version.o: include/generated/compile.h

# compile.h changes depending on hostname, generation number, etc,

# so we regenerate it always.

# mkcompile_h will make sure to only update the

# actual file if its content has changed.

quiet_cmd_compile.h = CHK     $@

      cmd_compile.h = \



	$(call cmd,compile.h)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel security code

#



 always enable default capabilities

obj-y					+= commoncap.o

obj-$(CONFIG_MMU)			+= min_addr.o

 Object file lists

obj-$(CONFIG_SECURITY)			+= security.o

obj-$(CONFIG_SECURITY_SAFESETID)       += safesetid/

obj-$(CONFIG_CGROUPS)			+= device_cgroup.o

obj-$(CONFIG_BPF_LSM)			+= bpf/

obj-$(CONFIG_SECURITY_LANDLOCK)		+= landlock/

 Object integrity file lists

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the SMACK LSM

#



smack-y := smack_lsm.o smack_access.o smackfs.o

smack-$(CONFIG_SECURITY_SMACK_NETFILTER) += smack_netfilter.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for building the SELinux module as part of the kernel tree.





obj-$(CONFIG_SECURITY_SELINUX) := selinux.o

	     netnode.o netport.o status.o \

	     ss/policydb.o ss/services.o ss/conditional.o ss/mls.o ss/context.o





selinux-$(CONFIG_SECURITY_INFINIBAND) += ibpkey.o

selinux-$(CONFIG_IMA) += ima.o

ccflags-y := -I$(srctree)/security/selinux -I$(srctree)/security/selinux/include



      cmd_flask = scripts/selinux/genheaders/genheaders $(obj)/flask.h $(obj)/av_permissions.h



landlock-y := setup.o syscalls.o object.o ruleset.o \

	cred.o ptrace.o fs.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for caching inode integrity data (iint)







integrity-y := iint.o

integrity-$(CONFIG_INTEGRITY_ASYMMETRIC_KEYS) += digsig_asymmetric.o

integrity-$(CONFIG_INTEGRITY_PLATFORM_KEYRING) += platform_certs/platform_keyring.o

integrity-$(CONFIG_LOAD_UEFI_KEYS) += platform_certs/efi_parser.o \

				      platform_certs/keyring_handler.o

integrity-$(CONFIG_LOAD_IPL_KEYS) += platform_certs/load_ipl_s390.o

                                     platform_certs/load_powerpc.o \

                                     platform_certs/keyring_handler.o

obj-$(CONFIG_IMA)			+= ima/

obj-$(CONFIG_EVM)			+= evm/

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for building Trusted Computing Group's(TCG) runtime Integrity

# Measurement Architecture(IMA).

#

obj-$(CONFIG_IMA) += ima.o

ima-y := ima_fs.o ima_queue.o ima_init.o ima_main.o ima_crypto.o ima_api.o \

ima-$(CONFIG_IMA_APPRAISE) += ima_appraise.o

ima-$(CONFIG_IMA_APPRAISE_MODSIG) += ima_modsig.o

ima-$(CONFIG_HAVE_IMA_KEXEC) += ima_kexec.o

ima-$(CONFIG_IMA_MEASURE_ASYMMETRIC_KEYS) += ima_asymmetric_keys.o

ima-$(CONFIG_IMA_QUEUE_EARLY_BOOT_KEYS) += ima_queue_keys.o

ifeq ($(CONFIG_EFI),y)

ima-$(CONFIG_IMA_SECURE_AND_OR_TRUSTED_BOOT) += ima_efi.o

endif

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for building the Extended Verification Module(EVM)



obj-$(CONFIG_EVM) += evm.o

evm-y := evm_main.o evm_crypto.o evm_secfs.o

evm-$(CONFIG_FS_POSIX_ACL) += evm_posix_acl.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the safesetid LSM.

#

# SPDX-License-Identifier: GPL-2.0

obj-y = audit.o common.o condition.o domain.o environ.o file.o gc.o group.o load_policy.o memory.o mount.o network.o realpath.o securityfs_if.o tomoyo.o util.o

define do_policy

$(objtree)/scripts/bin2c <$(firstword $(wildcard $(obj)/policy/$(1).conf $(srctree)/$(src)/policy/$(1).conf.default) /dev/null); \

quiet_cmd_policy  = POLICY  $@

      cmd_policy  = ($(call do_policy,profile); $(call do_policy,exception_policy); $(call do_policy,domain_policy); $(call do_policy,manager); $(call do_policy,stat)) >$@

$(obj)/builtin-policy.h: $(wildcard $(obj)/policy/*.conf $(src)/policy/*.conf.default) FORCE



# SPDX-License-Identifier: GPL-2.0

# Makefile for AppArmor Linux Security Module

#

obj-$(CONFIG_SECURITY_APPARMOR) += apparmor.o

apparmor-y := apparmorfs.o audit.o capability.o task.o ipc.o lib.o match.o \

              path.o domain.o policy.o policy_unpack.o procattr.o lsm.o \

              resource.o secid.o file.o policy_ns.o label.o mount.o net.o

apparmor-$(CONFIG_SECURITY_APPARMOR_HASH) += crypto.o

clean-files := capability_names.h rlim_names.h net_names.h

 Build a lower case string table of address family names

# Transform lines from

#    #define AF_LOCAL		1	/* POSIX name for AF_UNIX	*/

#    #define AF_INET		2	/* Internet IP Protocol 	*/

 to

    [1] = "local",

#    [2] = "inet",

#

# and build the securityfs entries for the mapping.

# Transforms lines from

#    #define AF_INET		2	/* Internet IP Protocol 	*/

 to

#    #define AA_SFS_AF_MASK "local inet"

cmd_make-af = echo "static const char *address_family_names[] = {" > $@ ;\

define[ \t]+AF_([A-Z0-9_]+)[ \t]+([0-9]+)(.*)/[\2] = "\L\1",/p';\

define AA_SFS_AF_MASK "' >> $@ ;\

	sed -r -n -e "/AF_MAX/d" -e "/AF_LOCAL/d" -e "/AF_ROUTE/d" -e \

define[ \t]+AF_([A-Z0-9_]+)[ \t]+([0-9]+)(.*)/\L\1/p'\

	 $< | tr '\n' ' ' | sed -e 's/ $$/"\n/' >> $@

# Build a lower case string table of sock type names

 Transform lines from

    SOCK_STREAM	= 1,

# to

    [1] = "stream",

quiet_cmd_make-sock = GEN     $@

	sed $^ >>$@ -r -n \

	-e 's/^\tSOCK_([A-Z0-9_]+)[\t]+=[ \t]+([0-9]+)(.*)/[\2] = "\L\1",/p';\



# Build a lower case string table of capability names

# Transforms lines from

#    #define CAP_DAC_OVERRIDE     1

 to

#    [1] = "dac_override",

cmd_make-caps = echo "static const char *const capability_names[] = {" > $@ ;\

	-e 's/^\#define[ \t]+CAP_([A-Z0-9_]+)[ \t]+([0-9]+)/[\2] = "\L\1",/p';\

	echo "};" >> $@ ;\

	printf '%s' '\#define AA_SFS_CAPS_MASK "' >> $@ ;\

	sed $< -r -n -e '/CAP_FS_MASK/d' \

define[ \t]+CAP_([A-Z0-9_]+)[ \t]+([0-9]+)/\L\1/p' | \



# Build a lower case string table of rlimit names.

# Transforms lines from

#    #define RLIMIT_STACK		3	/* max stack size */

 to

#    [RLIMIT_STACK] = "stack",

#

# and build a second integer table (with the second sed cmd), that maps

 RLIMIT defines to the order defined in asm-generic/resource.h  This is

 required by policy load to map policy ordering of RLIMITs to internal

 ordering for architectures that redefine an RLIMIT.

 Transforms lines from

    
# to

 RLIMIT_STACK, 



 and build the securityfs entries for the mapping.

 Transforms lines from

    
    
# to

 
quiet_cmd_make-rlim = GEN     $@

	> $@ ;\

	sed $< >> $@ -r -n \

	    -e 's/^\# ?define[ \t]+(RLIMIT_([A-Z0-9_]+)).*/[\1] = "\L\2",/p';\

	echo "};" >> $@ ;\

 ?define[ \t]+(RLIMIT_[A-Z0-9_]+).*/\1,/p" $< >> $@ ;\

	echo "};" >> $@ ; \

	printf '%s' '\#define AA_SFS_RLIMIT_MASK "' >> $@ ;\

	sed -r -n 's/^\# ?define[ \t]+RLIMIT_([A-Z0-9_]+).*/\L\1/p' $< | \



$(obj)/capability.o : $(obj)/capability_names.h

$(obj)/net.o : $(obj)/net_names.h

$(obj)/resource.o : $(obj)/rlim_names.h

			    $(src)/Makefile

$(obj)/rlim_names.h : $(srctree)/include/uapi/asm-generic/resource.h \

		      $(src)/Makefile

$(obj)/net_names.h : $(srctree)/include/linux/socket.h \

		     $(srctree)/include/linux/net.h \

	$(call cmd,make-af)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for key management

#



# Core

#

	key.o \

	request_key.o \

	request_key_auth.o \

	user_defined.o

compat-obj-$(CONFIG_KEY_DH_OPERATIONS) += compat_dh.o

obj-$(CONFIG_SYSCTL) += sysctl.o

obj-$(CONFIG_PERSISTENT_KEYRINGS) += persistent.o

obj-$(CONFIG_KEY_DH_OPERATIONS) += dh.o



#

# Key types

#

obj-$(CONFIG_BIG_KEYS) += big_key.o

obj-$(CONFIG_TRUSTED_KEYS) += trusted-keys/

obj-$(CONFIG_ENCRYPTED_KEYS) += encrypted-keys/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for encrypted keys

#

obj-$(CONFIG_ENCRYPTED_KEYS) += encrypted-keys.o

masterkey-$(CONFIG_TRUSTED_KEYS)-$(CONFIG_ENCRYPTED_KEYS) := masterkey_trusted.o

encrypted-keys-y += $(masterkey-y) $(masterkey-m-m)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for trusted keys

#





# SPDX-License-Identifier: GPL-2.0

#

 Copyright (C) 2020 Google LLC.



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux networking.



 2 Sep 2000, Christoph Hellwig <hch@infradead.org>

# Rewritten to use lists instead of if-statements.

#



obj-$(CONFIG_COMPAT)		+= compat.o

 LLC has to be linked before the files in net/802/

obj-$(CONFIG_LLC)		+= llc/

obj-$(CONFIG_NETFILTER)		+= netfilter/

obj-$(CONFIG_TLS)		+= tls/

obj-$(CONFIG_UNIX_SCM)		+= unix/

obj-y				+= ipv6/

obj-$(CONFIG_PACKET)		+= packet/

obj-$(CONFIG_BRIDGE)		+= bridge/

obj-$(CONFIG_ATALK)		+= appletalk/

obj-$(CONFIG_LAPB)		+= lapb/

obj-$(CONFIG_ROSE)		+= rose/

obj-$(CONFIG_CAN)		+= can/

obj-$(CONFIG_BT)		+= bluetooth/

obj-$(CONFIG_ATM)		+= atm/

obj-$(CONFIG_DECNET)		+= decnet/

obj-y				+= 8021q/

endif

obj-$(CONFIG_IP_DCCP)		+= dccp/

obj-$(CONFIG_IP_SCTP)		+= sctp/

obj-$(CONFIG_WIRELESS)		+= wireless/

obj-$(CONFIG_TIPC)		+= tipc/

obj-$(CONFIG_IUCV)		+= iucv/

obj-$(CONFIG_RFKILL)		+= rfkill/

obj-$(CONFIG_CAIF)		+= caif/

obj-$(CONFIG_6LOWPAN)		+= 6lowpan/

obj-$(CONFIG_IEEE802154)	+= ieee802154/



obj-$(CONFIG_SYSCTL)		+= sysctl_net.o

obj-$(CONFIG_DNS_RESOLVER)	+= dns_resolver/

obj-$(CONFIG_NFC)		+= nfc/

obj-$(CONFIG_NET_IFE)		+= ife/

obj-$(CONFIG_OPENVSWITCH)	+= openvswitch/

obj-$(CONFIG_MPLS)		+= mpls/

obj-$(CONFIG_HSR)		+= hsr/

obj-$(CONFIG_NET_SWITCHDEV)	+= switchdev/

obj-$(CONFIG_QRTR)		+= qrtr/

obj-$(CONFIG_MPTCP)		+= mptcp/

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the netlink driver.

#



netlink_diag-y			:= diag.o

# SPDX-License-Identifier: GPL-2.0

 Copyright (C) B.A.T.M.A.N. contributors:



 Marek Lindner, Simon Wunderlich



batman-adv-y += bat_algo.o

batman-adv-y += bitarray.o

batman-adv-$(CONFIG_BATMAN_ADV_DAT) += distributed-arp-table.o

batman-adv-y += fragmentation.o

batman-adv-y += gateway_common.o

batman-adv-y += hash.o

batman-adv-y += main.o

batman-adv-$(CONFIG_BATMAN_ADV_NC) += network-coding.o

batman-adv-y += send.o

batman-adv-$(CONFIG_BATMAN_ADV_TRACING) += trace.o

batman-adv-y += tvlv.o

CFLAGS_trace.o := -I$(src)

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the XFRM subsystem.





		      xfrm_input.o xfrm_output.o \

		      xfrm_sysctl.o xfrm_replay.o xfrm_device.o

obj-$(CONFIG_XFRM_ALGO) += xfrm_algo.o

obj-$(CONFIG_XFRM_IPCOMP) += xfrm_ipcomp.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for CEPH filesystem.

#

obj-$(CONFIG_CEPH_LIB) += libceph.o

libceph-y := ceph_common.o messenger.o msgpool.o buffer.o pagelist.o \

	cls_lock_client.o \

	striper.o \

	pagevec.o snapshot.o string_table.o \

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_STREAM_PARSER) += strparser.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux TCP/IP (INET6) layer.







		exthdrs.o datagram.o ip6_flowlabel.o inet6_connection_sock.o \





ipv6-$(CONFIG_XFRM) += xfrm6_policy.o xfrm6_state.o xfrm6_input.o \

ipv6-$(CONFIG_PROC_FS) += proc.o

ipv6-$(CONFIG_NETLABEL) += calipso.o

ipv6-$(CONFIG_IPV6_SEG6_LWTUNNEL) += seg6_iptunnel.o seg6_local.o

ipv6-$(CONFIG_IPV6_RPL_LWTUNNEL) += rpl_iptunnel.o



obj-$(CONFIG_INET6_AH) += ah6.o

obj-$(CONFIG_INET6_ESP) += esp6.o

obj-$(CONFIG_INET6_ESP_OFFLOAD) += esp6_offload.o

obj-$(CONFIG_INET6_IPCOMP) += ipcomp6.o

obj-$(CONFIG_INET6_XFRM_TUNNEL) += xfrm6_tunnel.o

obj-$(CONFIG_INET6_TUNNEL) += tunnel6.o

obj-$(CONFIG_IPV6_MIP6) += mip6.o



obj-$(CONFIG_IPV6_VTI) += ip6_vti.o

obj-$(CONFIG_IPV6_SIT) += sit.o

obj-$(CONFIG_IPV6_TUNNEL) += ip6_tunnel.o

obj-$(CONFIG_IPV6_GRE) += ip6_gre.o



obj-y += addrconf_core.o exthdrs_core.o ip6_checksum.o ip6_icmp.o

			ip6_offload.o tcpv6_offload.o exthdrs_offload.o



ifneq ($(CONFIG_IPV6),)

obj-y += mcast_snoop.o

endif

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the netfilter modules on top of IPv6.





 Link order matters here.

obj-$(CONFIG_IP6_NF_FILTER) += ip6table_filter.o

obj-$(CONFIG_IP6_NF_RAW) += ip6table_raw.o

obj-$(CONFIG_IP6_NF_NAT) += ip6table_nat.o

# defrag

nf_defrag_ipv6-y := nf_defrag_ipv6_hooks.o nf_conntrack_reasm.o



obj-$(CONFIG_NF_TPROXY_IPV6) += nf_tproxy_ipv6.o

# reject





# nf_tables

obj-$(CONFIG_NFT_DUP_IPV6) += nft_dup_ipv6.o



 flow table support

obj-$(CONFIG_NF_FLOW_TABLE_IPV6) += nf_flow_table_ipv6.o

 matches

obj-$(CONFIG_IP6_NF_MATCH_AH) += ip6t_ah.o

obj-$(CONFIG_IP6_NF_MATCH_FRAG) += ip6t_frag.o

obj-$(CONFIG_IP6_NF_MATCH_MH) += ip6t_mh.o

obj-$(CONFIG_IP6_NF_MATCH_OPTS) += ip6t_hbh.o

obj-$(CONFIG_IP6_NF_MATCH_RT) += ip6t_rt.o



# targets

obj-$(CONFIG_IP6_NF_TARGET_NPT) += ip6t_NPT.o

obj-$(CONFIG_IP6_NF_TARGET_REJECT) += ip6t_REJECT.o

obj-$(CONFIG_IP6_NF_TARGET_SYNPROXY) += ip6t_SYNPROXY.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for ILA module





obj-$(CONFIG_IPV6_ILA) += ila.o

ila-objs := ila_main.o ila_common.o ila_lwt.o ila_xlat.o



# Makefile for the Linux 802.2 LLC (fully-functional) layer.

#

 Copyright (c) 1997 by Procom Technology,Inc.

#		2001-2003 by Arnaldo Carvalho de Melo <acme@conectiva.com.br>

#

 This program can be redistributed or modified under the terms of the

# GNU General Public License as published by the Free Software Foundation.

 This program is distributed without any warranty or implied warranty

 of merchantability or fitness for a particular purpose.



# See the GNU General Public License for more details.

###########################################################################

obj-$(CONFIG_LLC) += llc.o

llc-y := llc_core.o llc_input.o llc_output.o

obj-$(CONFIG_LLC2) += llc2.o

llc2-y := llc_if.o llc_c_ev.o llc_c_ac.o llc_conn.o llc_c_st.o llc_pdu.o \



llc2-$(CONFIG_SYSCTL)  += sysctl_net_llc.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the packet AF.





obj-$(CONFIG_PACKET) += af_packet.o

obj-$(CONFIG_PACKET_DIAG) += af_packet_diag.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Linux kernel RxRPC

#



	call_accept.o \

	call_event.o \

	conn_client.o \

	conn_event.o \

	input.o \

	insecure.o \

	local_event.o \

	local_object.o \

	misc.o \

	net_ns.o \

	output.o \

	peer_event.o \

	recvmsg.o \

	sendmsg.o \

	server_key.o \

	skbuff.o \



rxrpc-$(CONFIG_PROC_FS) += proc.o

rxrpc-$(CONFIG_SYSCTL) += sysctl.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Switch device API

#

obj-y += switchdev.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux AppleTalk layer.







appletalk-y			:= aarp.o ddp.o dev.o

appletalk-$(CONFIG_PROC_FS)	+= atalk_proc.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux TCP/IP (INET) layer.

#

obj-y     := route.o inetpeer.o protocol.o \

	     tcp_offload.o datagram.o raw.o udp.o udplite.o \

	     udp_offload.o arp.o icmp.o devinet.o af_inet.o igmp.o \



obj-$(CONFIG_BPFILTER) += bpfilter/

obj-$(CONFIG_NET_IP_TUNNEL) += ip_tunnel.o

obj-$(CONFIG_SYSCTL) += sysctl_net_ipv4.o

obj-$(CONFIG_PROC_FS) += proc.o

obj-$(CONFIG_IP_MULTIPLE_TABLES) += fib_rules.o

obj-$(CONFIG_IP_MROUTE) += ipmr.o

obj-$(CONFIG_IP_MROUTE_COMMON) += ipmr_base.o

gre-y := gre_demux.o

obj-$(CONFIG_NET_IPGRE_DEMUX) += gre.o

obj-$(CONFIG_NET_IPGRE) += ip_gre.o

obj-$(CONFIG_NET_UDP_TUNNEL) += udp_tunnel.o

obj-$(CONFIG_NET_IPVTI) += ip_vti.o

obj-$(CONFIG_SYN_COOKIES) += syncookies.o

obj-$(CONFIG_INET_ESP) += esp4.o

obj-$(CONFIG_INET_XFRM_TUNNEL) += xfrm4_tunnel.o

obj-$(CONFIG_IP_PNP) += ipconfig.o

obj-$(CONFIG_NETFILTER)	+= netfilter.o netfilter/

obj-$(CONFIG_BPF_SYSCALL) += udp_bpf.o





# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the netfilter modules on top of IPv4.





 defrag

obj-$(CONFIG_NF_DEFRAG_IPV4) += nf_defrag_ipv4.o

obj-$(CONFIG_NF_SOCKET_IPV4) += nf_socket_ipv4.o



 reject

obj-$(CONFIG_NF_REJECT_IPV4) += nf_reject_ipv4.o

# NAT helpers (nf_conntrack)

obj-$(CONFIG_NF_NAT_PPTP) += nf_nat_pptp.o

nf_nat_snmp_basic-y := nf_nat_snmp_basic.asn1.o nf_nat_snmp_basic_main.o

obj-$(CONFIG_NF_NAT_SNMP_BASIC) += nf_nat_snmp_basic.o

obj-$(CONFIG_NFT_REJECT_IPV4) += nft_reject_ipv4.o

obj-$(CONFIG_NFT_DUP_IPV4) += nft_dup_ipv4.o

# flow table support



# generic IP tables

obj-$(CONFIG_IP_NF_IPTABLES) += ip_tables.o

# the three instances of ip_tables

obj-$(CONFIG_IP_NF_MANGLE) += iptable_mangle.o

obj-$(CONFIG_IP_NF_RAW) += iptable_raw.o



# matches

obj-$(CONFIG_IP_NF_MATCH_RPFILTER) += ipt_rpfilter.o

 targets



 generic ARP tables



# just filtering instance of ARP tables for now



 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_VSOCKETS) += vsock.o

obj-$(CONFIG_VSOCKETS_DIAG) += vsock_diag.o

obj-$(CONFIG_HYPERV_VSOCKETS) += hv_sock.o

obj-$(CONFIG_VSOCKETS_LOOPBACK) += vsock_loopback.o











hv_sock-y += hyperv_transport.o

# SPDX-License-Identifier: GPL-2.0



6lowpan-$(CONFIG_6LOWPAN_DEBUGFS) += debugfs.o

rfc6282 nhcs

obj-$(CONFIG_6LOWPAN_NHC_DEST) += nhc_dest.o

obj-$(CONFIG_6LOWPAN_NHC_HOP) += nhc_hop.o

obj-$(CONFIG_6LOWPAN_NHC_MOBILITY) += nhc_mobility.o

obj-$(CONFIG_6LOWPAN_NHC_UDP) += nhc_udp.o

rfc7400 ghcs

obj-$(CONFIG_6LOWPAN_GHC_EXT_HDR_HOP) += nhc_ghc_ext_hop.o

obj-$(CONFIG_6LOWPAN_GHC_ICMPV6) += nhc_ghc_icmpv6.o

obj-$(CONFIG_6LOWPAN_GHC_EXT_HDR_FRAG) += nhc_ghc_ext_frag.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux AX.25 layer.

#

obj-$(CONFIG_AX25) += ax25.o

	    ax25_route.o ax25_std_in.o ax25_std_subr.o ax25_std_timer.o \

ax25-$(CONFIG_SYSCTL) += sysctl_net_ax25.o

# SPDX-License-Identifier: GPL-2.0

netfilter-objs := core.o nf_log.o nf_queue.o nf_sockopt.o utils.o

		   nf_conntrack_proto.o nf_conntrack_proto_generic.o nf_conntrack_proto_tcp.o nf_conntrack_proto_udp.o \

		   nf_conntrack_extend.o nf_conntrack_acct.o nf_conntrack_seqadj.o

nf_conntrack-$(CONFIG_NF_CT_PROTO_DCCP) += nf_conntrack_proto_dccp.o

nf_conntrack-$(CONFIG_NF_CT_PROTO_GRE) += nf_conntrack_proto_gre.o



obj-$(CONFIG_NETFILTER_NETLINK_ACCT) += nfnetlink_acct.o

obj-$(CONFIG_NETFILTER_NETLINK_LOG) += nfnetlink_log.o

obj-$(CONFIG_NETFILTER_NETLINK_HOOK) += nfnetlink_hook.o

 connection tracking

obj-$(CONFIG_NF_CONNTRACK) += nf_conntrack.o

# netlink interface for nf_conntrack

obj-$(CONFIG_NF_CT_NETLINK) += nf_conntrack_netlink.o

obj-$(CONFIG_NF_CT_NETLINK_HELPER) += nfnetlink_cthelper.o

 connection tracking helpers



obj-$(CONFIG_NF_CONNTRACK_FTP) += nf_conntrack_ftp.o

obj-$(CONFIG_NF_CONNTRACK_IRC) += nf_conntrack_irc.o

obj-$(CONFIG_NF_CONNTRACK_NETBIOS_NS) += nf_conntrack_netbios_ns.o

obj-$(CONFIG_NF_CONNTRACK_PPTP) += nf_conntrack_pptp.o

obj-$(CONFIG_NF_CONNTRACK_SIP) += nf_conntrack_sip.o









# NAT helpers

obj-$(CONFIG_NF_NAT_FTP) += nf_nat_ftp.o

obj-$(CONFIG_NF_NAT_SIP) += nf_nat_sip.o



 SYNPROXY

obj-$(CONFIG_NETFILTER_SYNPROXY) += nf_synproxy_core.o



# generic packet duplication from netdev family



# nf_tables

nf_tables-objs := nf_tables_core.o nf_tables_api.o nft_chain_filter.o \

		  nf_tables_trace.o nft_immediate.o nft_cmp.o nft_range.o \

		  nft_dynset.o nft_meta.o nft_rt.o nft_exthdr.o nft_last.o \

		  nft_chain_route.o nf_tables_offload.o \

		  nft_set_pipapo.o



obj-$(CONFIG_NF_TABLES)		+= nf_tables.o

obj-$(CONFIG_NFT_CONNLIMIT)	+= nft_connlimit.o

obj-$(CONFIG_NFT_FLOW_OFFLOAD)	+= nft_flow_offload.o

obj-$(CONFIG_NFT_LIMIT)		+= nft_limit.o

obj-$(CONFIG_NFT_NAT)		+= nft_nat.o

obj-$(CONFIG_NFT_REJECT_INET)	+= nft_reject_inet.o

obj-$(CONFIG_NFT_TUNNEL)	+= nft_tunnel.o

obj-$(CONFIG_NFT_FIB_INET)	+= nft_fib_inet.o

obj-$(CONFIG_NFT_SOCKET)	+= nft_socket.o

obj-$(CONFIG_NFT_OSF)		+= nft_osf.o

obj-$(CONFIG_NFT_SYNPROXY)	+= nft_synproxy.o



 nf_tables netdev

obj-$(CONFIG_NFT_DUP_NETDEV)	+= nft_dup_netdev.o



# flow table infrastructure

nf_flow_table-objs		:= nf_flow_table_core.o nf_flow_table_ip.o \





 generic X tables



 combos

obj-$(CONFIG_NETFILTER_XT_MARK) += xt_mark.o

obj-$(CONFIG_NETFILTER_XT_SET) += xt_set.o



# targets

obj-$(CONFIG_NETFILTER_XT_TARGET_AUDIT) += xt_AUDIT.o

obj-$(CONFIG_NETFILTER_XT_TARGET_CHECKSUM) += xt_CHECKSUM.o

obj-$(CONFIG_NETFILTER_XT_TARGET_CLASSIFY) += xt_CLASSIFY.o

obj-$(CONFIG_NETFILTER_XT_TARGET_CONNSECMARK) += xt_CONNSECMARK.o

obj-$(CONFIG_NETFILTER_XT_TARGET_CT) += xt_CT.o

obj-$(CONFIG_NETFILTER_XT_TARGET_DSCP) += xt_DSCP.o

obj-$(CONFIG_NETFILTER_XT_TARGET_HL) += xt_HL.o

obj-$(CONFIG_NETFILTER_XT_TARGET_HMARK) += xt_HMARK.o

obj-$(CONFIG_NETFILTER_XT_TARGET_LED) += xt_LED.o

obj-$(CONFIG_NETFILTER_XT_TARGET_LOG) += xt_LOG.o

obj-$(CONFIG_NETFILTER_XT_TARGET_NETMAP) += xt_NETMAP.o

obj-$(CONFIG_NETFILTER_XT_TARGET_NFLOG) += xt_NFLOG.o

obj-$(CONFIG_NETFILTER_XT_TARGET_NFQUEUE) += xt_NFQUEUE.o

obj-$(CONFIG_NETFILTER_XT_TARGET_RATEEST) += xt_RATEEST.o

obj-$(CONFIG_NETFILTER_XT_TARGET_REDIRECT) += xt_REDIRECT.o

obj-$(CONFIG_NETFILTER_XT_TARGET_MASQUERADE) += xt_MASQUERADE.o

obj-$(CONFIG_NETFILTER_XT_TARGET_SECMARK) += xt_SECMARK.o

obj-$(CONFIG_NETFILTER_XT_TARGET_TPROXY) += xt_TPROXY.o

obj-$(CONFIG_NETFILTER_XT_TARGET_TCPMSS) += xt_TCPMSS.o

obj-$(CONFIG_NETFILTER_XT_TARGET_TCPOPTSTRIP) += xt_TCPOPTSTRIP.o

obj-$(CONFIG_NETFILTER_XT_TARGET_TEE) += xt_TEE.o

obj-$(CONFIG_NETFILTER_XT_TARGET_TRACE) += xt_TRACE.o

obj-$(CONFIG_NETFILTER_XT_TARGET_IDLETIMER) += xt_IDLETIMER.o

 matches

obj-$(CONFIG_NETFILTER_XT_MATCH_ADDRTYPE) += xt_addrtype.o

obj-$(CONFIG_NETFILTER_XT_MATCH_CLUSTER) += xt_cluster.o

obj-$(CONFIG_NETFILTER_XT_MATCH_CONNBYTES) += xt_connbytes.o

obj-$(CONFIG_NETFILTER_XT_MATCH_CONNLIMIT) += xt_connlimit.o

obj-$(CONFIG_NETFILTER_XT_MATCH_CPU) += xt_cpu.o

obj-$(CONFIG_NETFILTER_XT_MATCH_DEVGROUP) += xt_devgroup.o

obj-$(CONFIG_NETFILTER_XT_MATCH_ECN) += xt_ecn.o

obj-$(CONFIG_NETFILTER_XT_MATCH_HASHLIMIT) += xt_hashlimit.o

obj-$(CONFIG_NETFILTER_XT_MATCH_HL) += xt_hl.o

obj-$(CONFIG_NETFILTER_XT_MATCH_IPRANGE) += xt_iprange.o

obj-$(CONFIG_NETFILTER_XT_MATCH_L2TP) += xt_l2tp.o

obj-$(CONFIG_NETFILTER_XT_MATCH_LIMIT) += xt_limit.o

obj-$(CONFIG_NETFILTER_XT_MATCH_MULTIPORT) += xt_multiport.o

obj-$(CONFIG_NETFILTER_XT_MATCH_OSF) += xt_osf.o

obj-$(CONFIG_NETFILTER_XT_MATCH_CGROUP) += xt_cgroup.o

obj-$(CONFIG_NETFILTER_XT_MATCH_PKTTYPE) += xt_pkttype.o

obj-$(CONFIG_NETFILTER_XT_MATCH_QUOTA) += xt_quota.o

obj-$(CONFIG_NETFILTER_XT_MATCH_REALM) += xt_realm.o

obj-$(CONFIG_NETFILTER_XT_MATCH_SCTP) += xt_sctp.o

obj-$(CONFIG_NETFILTER_XT_MATCH_STATE) += xt_state.o

obj-$(CONFIG_NETFILTER_XT_MATCH_STRING) += xt_string.o

obj-$(CONFIG_NETFILTER_XT_MATCH_TIME) += xt_time.o



# ipset



 IPVS

obj-$(CONFIG_IP_VS) += ipvs/

# lwtunnel

obj-$(CONFIG_LWTUNNEL) += nf_hooks_lwtunnel.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the IPVS modules on top of IPv4.

#

# IPVS transport protocol load balancing support

ip_vs_proto-objs-y :=

ip_vs_proto-objs-$(CONFIG_IP_VS_PROTO_TCP) += ip_vs_proto_tcp.o

ip_vs_proto-objs-$(CONFIG_IP_VS_PROTO_UDP) += ip_vs_proto_udp.o

ip_vs_proto-objs-$(CONFIG_IP_VS_PROTO_AH_ESP) += ip_vs_proto_ah_esp.o

ip_vs_proto-objs-$(CONFIG_IP_VS_PROTO_SCTP) += ip_vs_proto_sctp.o





 IPVS core

obj-$(CONFIG_IP_VS) += ip_vs.o

 IPVS schedulers

obj-$(CONFIG_IP_VS_RR) += ip_vs_rr.o

obj-$(CONFIG_IP_VS_LC) += ip_vs_lc.o

obj-$(CONFIG_IP_VS_FO) += ip_vs_fo.o

obj-$(CONFIG_IP_VS_LBLC) += ip_vs_lblc.o

obj-$(CONFIG_IP_VS_DH) += ip_vs_dh.o

obj-$(CONFIG_IP_VS_MH) += ip_vs_mh.o

obj-$(CONFIG_IP_VS_NQ) += ip_vs_nq.o



 IPVS application helpers

obj-$(CONFIG_IP_VS_FTP) += ip_vs_ftp.o

 IPVS connection template retrievers

obj-$(CONFIG_IP_VS_PE_SIP) += ip_vs_pe_sip.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the ipset modules





ip_set-y := ip_set_core.o ip_set_getport.o pfxlen.o

# ipset core



 bitmap types

obj-$(CONFIG_IP_SET_BITMAP_IP) += ip_set_bitmap_ip.o

obj-$(CONFIG_IP_SET_BITMAP_PORT) += ip_set_bitmap_port.o

# hash types

obj-$(CONFIG_IP_SET_HASH_IPMAC) += ip_set_hash_ipmac.o

obj-$(CONFIG_IP_SET_HASH_IPPORT) += ip_set_hash_ipport.o

obj-$(CONFIG_IP_SET_HASH_IPPORTNET) += ip_set_hash_ipportnet.o

obj-$(CONFIG_IP_SET_HASH_NET) += ip_set_hash_net.o

obj-$(CONFIG_IP_SET_HASH_NETIFACE) += ip_set_hash_netiface.o

obj-$(CONFIG_IP_SET_HASH_NETPORTNET) += ip_set_hash_netportnet.o

# list types

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux DNS Resolver.

#

obj-$(CONFIG_DNS_RESOLVER) += dns_resolver.o

dns_resolver-y :=  dns_key.o dns_query.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux Rose (X.25 PLP) layer.







	     rose_out.o rose_route.o rose_subr.o rose_timer.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_DECNET) += decnet.o

decnet-y := af_decnet.o dn_nsp_in.o dn_nsp_out.o \

decnet-$(CONFIG_DECNET_ROUTER) += dn_fib.o dn_rules.o dn_table.o

decnet-y += sysctl_net_decnet.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for DECnet netfilter modules





 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the RF switch subsystem.





rfkill-$(CONFIG_RFKILL_INPUT)	+= input.o

obj-$(CONFIG_RFKILL)		+= rfkill.o

 SPDX-License-Identifier: GPL-2.0-only





obj-$(CONFIG_ETHTOOL_NETLINK)	+= ethtool_nl.o

ethtool_nl-y	:= netlink.o bitset.o strset.o linkinfo.o linkmodes.o \

		   linkstate.o debug.o wol.o features.o privflags.o rings.o \

		   channels.o coalesce.o pause.o eee.o tsinfo.o cabletest.o \

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SMC)	+= smc.o

smc-y += smc_cdc.o smc_tx.o smc_rx.o smc_close.o smc_ism.o smc_netlink.o smc_stats.o

smc-y += smc_tracepoint.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux Ethernet layer.

#

obj-y					+= eth.o

# SPDX-License-Identifier: GPL-2.0



mptcp-y := protocol.o subflow.o options.o token.o crypto.o ctrl.o pm.o diag.o \



obj-$(CONFIG_SYN_COOKIES) += syncookies.o

obj-$(CONFIG_INET_MPTCP_DIAG) += mptcp_diag.o

obj-$(CONFIG_MPTCP_KUNIT_TEST) += mptcp_crypto_test.o mptcp_token_test.o

# SPDX-License-Identifier: GPL-2.0



# tests

obj-$(CONFIG_MCTP_TEST) += test/utils.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_LIB80211) += lib80211.o

obj-$(CONFIG_LIB80211_CRYPT_CCMP) += lib80211_crypt_ccmp.o



obj-$(CONFIG_WEXT_PROC) += wext-proc.o

obj-$(CONFIG_WEXT_PRIV) += wext-priv.o

cfg80211-y += mlme.o ibss.o sme.o chan.o ethtool.o mesh.o ap.o trace.o ocb.o

cfg80211-$(CONFIG_CFG80211_DEBUGFS) += debugfs.o





ifneq ($(CONFIG_CFG80211_EXTRA_REGDB_KEYDIR),)

cfg80211-y += extra-certs.o

endif

	$(Q)(echo '#include "reg.h"'; \

	  echo 'const u8 shipped_regdb_certs[] = {'; \

	  echo 'unsigned int shipped_regdb_certs_len = sizeof(shipped_regdb_certs);'; \



$(obj)/extra-certs.c: $(CONFIG_CFG80211_EXTRA_REGDB_KEYDIR:"%"=%) \

	      test -f $$f || continue;\

 similar to hexdump -v -e '1/1 "0x%.2x," "\n"' \

	      thisf=$$(od -An -v -tx1 < $$f | \

	                   sed -e 's/ /\n/g' | \

	                   sed -e 's/^/0x/;s/$$/,/'); \

 file should not be empty - maybe command substitution failed? \

	      test ! -z "$$thisf";\

	      allf=$$allf$$thisf;\

	  ( \

	      echo '#include "reg.h"'; \

	      echo 'const u8 extra_regdb_certs[] = {'; \

	      echo "$$allf"; \

	      echo '};'; \

	  ) > $@)

clean-files += shipped-certs.c extra-certs.c

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the TLS subsystem.









tls-y := tls_main.o tls_sw.o tls_proc.o trace.o

tls-$(CONFIG_TLS_TOE) += tls_toe.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux 802.x protocol layers.

#

 Check the p8022 selections against net/core/Makefile.

obj-$(CONFIG_LLC)	+= p8022.o psnap.o

obj-$(CONFIG_FDDI)	+=                 fddi.o

obj-$(CONFIG_ATALK)	+= p8022.o psnap.o

obj-$(CONFIG_GARP)	+= garp.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux networking core.

#



obj-$(CONFIG_SYSCTL) += sysctl_net_core.o

obj-y		     += dev.o dev_addr_lists.o dst.o netevent.o \

			fib_notifier.o xdp.o flow_offload.o

obj-y += net-sysfs.o

obj-$(CONFIG_NET_PKTGEN) += pktgen.o

obj-$(CONFIG_FIB_RULES) += fib_rules.o

obj-$(CONFIG_TRACEPOINTS) += net-traces.o

obj-$(CONFIG_NET_SELFTESTS) += selftests.o

obj-$(CONFIG_NET_PTP_CLASSIFY) += ptp_classifier.o

obj-$(CONFIG_CGROUP_NET_PRIO) += netprio_cgroup.o

obj-$(CONFIG_CGROUP_NET_CLASSID) += netclassid_cgroup.o

obj-$(CONFIG_DST_CACHE) += dst_cache.o

obj-$(CONFIG_NET_DEVLINK) += devlink.o

obj-$(CONFIG_FAILOVER) += failover.o

obj-$(CONFIG_NET_SOCK_MSG) += skmsg.o

obj-$(CONFIG_BPF_SYSCALL) += sock_map.o

obj-$(CONFIG_BPF_SYSCALL) += bpf_sk_storage.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux unix domain socket layer.







unix-y			:= af_unix.o garbage.o

unix-$(CONFIG_BPF_SYSCALL) += unix_bpf.o

obj-$(CONFIG_UNIX_DIAG)	+= unix_diag.o



obj-$(CONFIG_UNIX_SCM)	+= scm.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux X.25 Packet layer.

#

obj-$(CONFIG_X25) += x25.o

			   x25_timer.o x25_proc.o x25_forward.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the L3 device API

#

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PHONET) += phonet.o pn_pep.o

	af_phonet.o

pn_pep-y := pep.o pep-gprs.o

# SPDX-License-Identifier: GPL-2.0

#

#  Makefile for the Linux Controller Area Network core.

#

obj-$(CONFIG_CAN)	+= can.o

can-y			:= af_can.o

can-$(CONFIG_PROC_FS)	+= proc.o

obj-$(CONFIG_CAN_RAW)	+= can-raw.o

can-raw-y		:= raw.o

obj-$(CONFIG_CAN_BCM)	+= can-bcm.o

can-bcm-y		:= bcm.o

obj-$(CONFIG_CAN_GW)	+= can-gw.o

can-gw-y		:= gw.o



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CAN_J1939) += can-j1939.o

	address-claim.o \

	transport.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux VLAN layer.



obj-$(subst m,y,$(CONFIG_VLAN_8021Q))	+= vlan_core.o



8021q-y					:= vlan.o vlan_dev.o vlan_netlink.o

8021q-$(CONFIG_VLAN_8021Q_GVRP)		+= vlan_gvrp.o

8021q-$(CONFIG_VLAN_8021Q_MVRP)		+= vlan_mvrp.o

8021q-$(CONFIG_PROC_FS)			+= vlanproc.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the ATM Protocol Families.

#

atm-y		:= addr.o pvc.o signaling.o svc.o ioctl.o common.o atm_misc.o raw.o resources.o atm_sysfs.o



obj-$(CONFIG_ATM_CLIP) += clip.o



obj-$(CONFIG_ATM_LANE) += lec.o

obj-$(CONFIG_PPPOATM) += pppoatm.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the IFE encapsulation protocol





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the key AF.

#

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MAC802154)	+= mac802154.o

mac802154-objs		:= main.o rx.o tx.o mac_cmd.o mib.o \



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_NET_9P) := 9pnet.o

obj-$(CONFIG_NET_9P_XEN) += 9pnet_xen.o

obj-$(CONFIG_NET_9P_VIRTIO) += 9pnet_virtio.o

obj-$(CONFIG_NET_9P_RDMA) += 9pnet_rdma.o

	mod.o \

	client.o \





9pnet_xen-objs := \



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for IUCV





# SPDX-License-Identifier: GPL-2.0



 mac80211 objects

	main.o status.o \

	driver-ops.o \

	sta_info.o \

	wpa.o \

	vht.o \

	he.o \

	iface.o \

	rate.o \

	fils_aead.o \

	ethtool.o \

	rx.o \

	key.o \

	util.o \

	ocb.o \



mac80211-$(CONFIG_MAC80211_LEDS) += led.o

	debugfs.o \

	debugfs_key.o

	mesh_hwmp.o \

	mesh_ps.o





rc80211_minstrel-y := \



	rc80211_minstrel_ht_debugfs.o

mac80211-$(CONFIG_MAC80211_RC_MINSTREL) += $(rc80211_minstrel-y)

ccflags-y += -DDEBUG

 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_QRTR) += qrtr.o



obj-$(CONFIG_QRTR_TUN) += qrtr-tun.o

qrtr-tun-y	:= tun.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the psample netlink channel

#

obj-$(CONFIG_PSAMPLE) += psample.o

# SPDX-License-Identifier: GPL-2.0



	cfcnfg.o cfmuxl.o cfctrl.o  \

	cfrfml.o cfvidl.o cfutill.o \



obj-$(CONFIG_CAIF_USB) += caif_usb.o

export-y := caif.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_NET_NSH) += nsh.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for NCSI API



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Open vSwitch.







	actions.o \

	datapath.o \

	meter.o \

	vport.o \

	vport-internal_dev.o \

	vport-netdev.o

openvswitch-y += conntrack.o

endif

obj-$(CONFIG_OPENVSWITCH_GRE)	+= vport-gre.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux Traffic Control Unit.





obj-y	:= sch_generic.o sch_mq.o

obj-$(CONFIG_NET_CLS_ACT)	+= act_api.o

obj-$(CONFIG_NET_ACT_GACT)	+= act_gact.o

obj-$(CONFIG_NET_ACT_SAMPLE)	+= act_sample.o

obj-$(CONFIG_NET_ACT_NAT)	+= act_nat.o

obj-$(CONFIG_NET_ACT_SIMP)	+= act_simple.o

obj-$(CONFIG_NET_ACT_CSUM)	+= act_csum.o

obj-$(CONFIG_NET_ACT_VLAN)	+= act_vlan.o

obj-$(CONFIG_NET_ACT_CONNMARK)	+= act_connmark.o

obj-$(CONFIG_NET_ACT_SKBMOD)	+= act_skbmod.o

obj-$(CONFIG_NET_IFE_SKBMARK)	+= act_meta_mark.o

obj-$(CONFIG_NET_IFE_SKBPRIO)	+= act_meta_skbprio.o

obj-$(CONFIG_NET_IFE_SKBTCINDEX)	+= act_meta_skbtcindex.o

obj-$(CONFIG_NET_ACT_TUNNEL_KEY)+= act_tunnel_key.o

obj-$(CONFIG_NET_ACT_GATE)	+= act_gate.o

obj-$(CONFIG_NET_SCH_CBQ)	+= sch_cbq.o

obj-$(CONFIG_NET_SCH_HFSC)	+= sch_hfsc.o

obj-$(CONFIG_NET_SCH_GRED)	+= sch_gred.o

obj-$(CONFIG_NET_SCH_DSMARK)	+= sch_dsmark.o

obj-$(CONFIG_NET_SCH_SFQ)	+= sch_sfq.o

obj-$(CONFIG_NET_SCH_TEQL)	+= sch_teql.o

obj-$(CONFIG_NET_SCH_MULTIQ)	+= sch_multiq.o

obj-$(CONFIG_NET_SCH_NETEM)	+= sch_netem.o

obj-$(CONFIG_NET_SCH_PLUG)	+= sch_plug.o

obj-$(CONFIG_NET_SCH_MQPRIO)	+= sch_mqprio.o

obj-$(CONFIG_NET_SCH_CHOKE)	+= sch_choke.o

obj-$(CONFIG_NET_SCH_CODEL)	+= sch_codel.o

obj-$(CONFIG_NET_SCH_CAKE)	+= sch_cake.o

obj-$(CONFIG_NET_SCH_HHF)	+= sch_hhf.o

obj-$(CONFIG_NET_SCH_FQ_PIE)	+= sch_fq_pie.o

obj-$(CONFIG_NET_SCH_ETF)	+= sch_etf.o



obj-$(CONFIG_NET_CLS_FW)	+= cls_fw.o

obj-$(CONFIG_NET_CLS_TCINDEX)	+= cls_tcindex.o

obj-$(CONFIG_NET_CLS_BASIC)	+= cls_basic.o

obj-$(CONFIG_NET_CLS_CGROUP)	+= cls_cgroup.o

obj-$(CONFIG_NET_CLS_FLOWER)	+= cls_flower.o

obj-$(CONFIG_NET_EMATCH)	+= ematch.o

obj-$(CONFIG_NET_EMATCH_NBYTE)	+= em_nbyte.o

obj-$(CONFIG_NET_EMATCH_META)	+= em_meta.o

obj-$(CONFIG_NET_EMATCH_CANID)	+= em_canid.o

obj-$(CONFIG_NET_EMATCH_IPT)	+= em_ipt.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_IP_DCCP) += dccp.o dccp_ipv4.o

dccp-y := ccid.o feat.o input.o minisocks.o options.o output.o proto.o timer.o \



 CCID algorithms to be used by dccp.ko



 CCID-2 is default (RFC 4340, p. 77) and has Ack Vectors as dependency

dccp-y += ccids/ccid2.o ackvec.o

dccp-$(CONFIG_IP_DCCP_CCID3)	+= ccids/ccid3.o

				   ccids/lib/tfrc_equation.o	\

				   ccids/lib/packet_history.o	\



dccp_ipv4-y := ipv4.o

# build dccp_ipv6 as module whenever either IPv6 or DCCP is a module



obj-$(CONFIG_INET_DCCP_DIAG) += dccp_diag.o



dccp_diag-y := diag.o

# build with local directory for trace.h

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux TIPC layer

#

obj-$(CONFIG_TIPC) := tipc.o

	   name_distr.o  subscr.o monitor.o name_table.o net.o  \

	   topsrv.o group.o trace.o

CFLAGS_trace.o += -I$(src)

tipc-$(CONFIG_TIPC_MEDIA_UDP)	+= udp_media.o

tipc-$(CONFIG_SYSCTL)		+= sysctl.o



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_IEEE802154_SOCKET) += ieee802154_socket.o

obj-y += 6lowpan/

ieee802154-y := netlink.o nl-mac.o nl-phy.o nl_policy.o core.o \

                header_ops.o sysfs.o nl802154.o trace.o

ieee802154_socket-y := socket.o

CFLAGS_trace.o := -I$(src)

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_IEEE802154_6LOWPAN) += ieee802154_6lowpan.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for SCTP support code.

#



	  inqueue.o outqueue.o ulpqueue.o \

	  stream_sched_rr.o stream_interleave.o



sctp-$(CONFIG_PROC_FS) += proc.o

sctp-$(CONFIG_SYSCTL) += sysctl.o

sctp-$(subst m,y,$(CONFIG_IPV6))	+= ipv6.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the L2TP.





obj-$(CONFIG_L2TP) += l2tp_core.o

CFLAGS_l2tp_core.o += -I$(src)

# Build l2tp as modules if L2TP is M

obj-$(subst y,$(CONFIG_L2TP),$(CONFIG_L2TP_IP)) += l2tp_ip.o

obj-$(subst y,$(CONFIG_L2TP),$(CONFIG_L2TP_V3)) += l2tp_netlink.o

obj-$(subst y,$(CONFIG_L2TP),$(CONFIG_L2TP_DEBUGFS)) += l2tp_debugfs.o

ifneq ($(CONFIG_IPV6),)

obj-$(subst y,$(CONFIG_L2TP),$(CONFIG_L2TP_IP)) += l2tp_ip6.o

endif

# SPDX-License-Identifier: GPL-2.0

 the core



# tagging formats

obj-$(CONFIG_NET_DSA_TAG_GSWIP) += tag_gswip.o

obj-$(CONFIG_NET_DSA_TAG_KSZ) += tag_ksz.o

obj-$(CONFIG_NET_DSA_TAG_MTK) += tag_mtk.o

obj-$(CONFIG_NET_DSA_TAG_OCELOT_8021Q) += tag_ocelot_8021q.o

obj-$(CONFIG_NET_DSA_TAG_RTL4_A) += tag_rtl4_a.o

obj-$(CONFIG_NET_DSA_TAG_SJA1105) += tag_sja1105.o

obj-$(CONFIG_NET_DSA_TAG_XRS700X) += tag_xrs700x.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the NetLabel subsystem.





 base objects

obj-y	:= netlabel_user.o netlabel_kapi.o



 management objects

obj-y	+= netlabel_mgmt.o

# protocol modules

obj-y	+= netlabel_unlabeled.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for HSR

#

obj-$(CONFIG_HSR)	+= hsr.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux BPFILTER layer.





userprogs := bpfilter_umh

bpfilter_umh-objs := main.o



# builtin bpfilter_umh should be linked with -static

 since rootfs isn't mounted at the time of __init

# function is called and do_execv won't find elf interpreter



$(obj)/bpfilter_umh_blob.o: $(obj)/bpfilter_umh

obj-$(CONFIG_BPFILTER_UMH) += bpfilter.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux NET/ROM layer.







netrom-y		:= af_netrom.o nr_dev.o nr_in.o nr_loopback.o \

netrom-$(CONFIG_SYSCTL)	+= sysctl_net_netrom.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for MPLS.

#

obj-$(CONFIG_MPLS_IPTUNNEL) += mpls_iptunnel.o

mpls_router-y := af_mpls.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux Bluetooth subsystem.

#

obj-$(CONFIG_BT_RFCOMM)	+= rfcomm/

obj-$(CONFIG_BT_CMTP)	+= cmtp/





	ecdh_helper.o hci_request.o mgmt_util.o mgmt_config.o hci_codec.o \



bluetooth-$(CONFIG_BT_BREDR) += sco.o

bluetooth-$(CONFIG_BT_HS) += a2mp.o amp.o

bluetooth-$(CONFIG_BT_LEDS) += leds.o

bluetooth-$(CONFIG_BT_AOSPEXT) += aosp.o

bluetooth-$(CONFIG_BT_DEBUGFS) += hci_debugfs.o

bluetooth-$(CONFIG_BT_SELFTEST) += selftest.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux Bluetooth CMTP layer





obj-$(CONFIG_BT_CMTP) += cmtp.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux Bluetooth HIDP layer





obj-$(CONFIG_BT_HIDP) += hidp.o

hidp-objs := core.o sock.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux Bluetooth BNEP layer.

#



bnep-objs := core.o sock.o netdev.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux Bluetooth RFCOMM layer.

#



rfcomm-y			:= core.o sock.o

rfcomm-$(CONFIG_BT_RFCOMM_TTY)	+= tty.o

# SPDX-License-Identifier: GPL-2.0



rds_rdma-y :=	rdma_transport.o \

			ib_sysctl.o ib_rdma.o ib_frmr.o





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux LAPB layer.

#

obj-$(CONFIG_LAPB) += lapb.o

lapb-y := lapb_in.o lapb_out.o lapb_subr.o lapb_timer.o lapb_iface.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the IEEE 802.1d ethernet bridging layer.

#

obj-$(CONFIG_BRIDGE) += bridge.o

			br_ioctl.o br_stp.o br_stp_bpdu.o \

			br_netlink_tunnel.o br_arp_nd_proxy.o





obj-$(CONFIG_BRIDGE_NETFILTER) += br_netfilter.o







obj-$(CONFIG_NETFILTER) += netfilter/



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the netfilter modules for Link Layer filtering on a bridge.





obj-$(CONFIG_NFT_BRIDGE_META)  += nft_meta_bridge.o

obj-$(CONFIG_NFT_BRIDGE_REJECT)  += nft_reject_bridge.o

 connection tracking

obj-$(CONFIG_NF_CONNTRACK_BRIDGE) += nf_conntrack_bridge.o

obj-$(CONFIG_BRIDGE_NF_EBTABLES) += ebtables.o

# tables

obj-$(CONFIG_BRIDGE_EBT_BROUTE) += ebtable_broute.o

obj-$(CONFIG_BRIDGE_EBT_T_FILTER) += ebtable_filter.o

obj-$(CONFIG_BRIDGE_EBT_T_NAT) += ebtable_nat.o

#matches

obj-$(CONFIG_BRIDGE_EBT_802_3) += ebt_802_3.o

obj-$(CONFIG_BRIDGE_EBT_AMONG) += ebt_among.o

obj-$(CONFIG_BRIDGE_EBT_ARP) += ebt_arp.o

obj-$(CONFIG_BRIDGE_EBT_IP) += ebt_ip.o

obj-$(CONFIG_BRIDGE_EBT_IP6) += ebt_ip6.o

obj-$(CONFIG_BRIDGE_EBT_LIMIT) += ebt_limit.o

obj-$(CONFIG_BRIDGE_EBT_MARK) += ebt_mark_m.o

obj-$(CONFIG_BRIDGE_EBT_PKTTYPE) += ebt_pkttype.o

obj-$(CONFIG_BRIDGE_EBT_STP) += ebt_stp.o

obj-$(CONFIG_BRIDGE_EBT_VLAN) += ebt_vlan.o

 targets



 watchers

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux NFC subsystem.

#

obj-$(CONFIG_NFC) += nfc.o

obj-$(CONFIG_NFC_NCI) += nci/

obj-$(CONFIG_NFC_HCI) += hci/



nfc-objs := core.o netlink.o af_nfc.o rawsock.o llcp_core.o llcp_commands.o \

		llcp_sock.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux NFC NCI layer.

#

obj-$(CONFIG_NFC_NCI) += nci.o



obj-$(CONFIG_NFC_NCI_SPI) += nci_spi.o

nci_uart-y += uart.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux NFC HCI layer.







hci-y			:= core.o hcp.o command.o llc.o llc_nop.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_XDP_SOCKETS) += xsk.o xdp_umem.o xsk_queue.o xskmap.o

obj-$(CONFIG_XDP_SOCKETS_DIAG) += xsk_diag.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Linux kernel SUN RPC

#





	    xprtmultipath.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Linux kernel rpcsec_gss implementation

#



auth_rpcgss-y := auth_gss.o gss_generic_token.o \





	gss_krb5_seqnum.o gss_krb5_wrap.o gss_krb5_crypto.o gss_krb5_keys.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SUNRPC_XPRT_RDMA) += rpcrdma.o

rpcrdma-y := transport.o rpc_rdma.o verbs.o frwr_ops.o \

	svc_rdma.o svc_rdma_backchannel.o svc_rdma_transport.o \

	svc_rdma_pcl.o module.o

rpcrdma-$(CONFIG_SUNRPC_BACKCHANNEL) += backchannel.o

 SPDX-License-Identifier: GPL-2.0-only

ifeq ($(CONFIG_BPF_JIT),y)

obj-$(CONFIG_BPF_SYSCALL)	+= bpf_dummy_struct_ops.o

endif

# -*- makefile -*-

# Makefile for Sphinx documentation

#

# for cleaning



 Check for broken documentation file references



 Check for broken ABI files

ifeq ($(CONFIG_WARN_ABI_ERRORS),y)



 You can set these variables from the command line.

SPHINXBUILD   = sphinx-build

SPHINXOPTS    =

SPHINXDIRS    = .

_SPHINXDIRS   = $(sort $(patsubst $(srctree)/Documentation/%/index.rst,%,$(wildcard $(srctree)/Documentation/*/index.rst)))

SPHINX_CONF   = conf.py

PAPER         =

BUILDDIR      = $(obj)/output

PDFLATEX      = xelatex





 User-friendly check for sphinx-build



ifeq ($(HAVE_SPHINX),0)

	@echo

	@$(srctree)/scripts/sphinx-pre-install



 HAVE_SPHINX



 User-friendly check for pdflatex and latexmk

HAVE_PDFLATEX := $(shell if which $(PDFLATEX) >/dev/null 2>&1; then echo 1; else echo 0; fi)

HAVE_LATEXMK := $(shell if which latexmk >/dev/null 2>&1; then echo 1; else echo 0; fi)

ifeq ($(HAVE_LATEXMK),1)

	PDFLATEX := latexmk -$(PDFLATEX)

endif #HAVE_LATEXMK

 Internal variables.

PAPEROPT_a4     = -D latex_paper_size=a4

# the i18n builder cannot share the environment and doctrees with the others



# commands; the 'cmd' from scripts/Kbuild.include is not *loopable*

loop_cmd = $(echo-cmd) $(cmd_$(1)) || exit;

 $2 sphinx builder e.g. "html"

 $3 name of the build subfolder / e.g. "userspace-api/media", used as:

#    * dest folder relative to $(BUILDDIR) and

#    * cache folder relative to $(BUILDDIR)/.doctrees

# $4 dest subfolder e.g. "man" for man pages at userspace-api/media/man

 $5 reST source folder relative to $(srctree)/$(src),

#    e.g. "userspace-api/media" for the linux-tv book-set at ./Documentation/userspace-api/media

	PYTHONDONTWRITEBYTECODE=1 \

	BUILDDIR=$(abspath $(BUILDDIR)) SPHINX_CONF=$(abspath $(srctree)/$(src)/$5/$(SPHINX_CONF)) \

	$(PYTHON3) $(srctree)/scripts/jobserver-exec \

	-b $2 \

	-D version=$(KERNELVERSION) -D release=$(KERNELRELEASE) \

	$(ALLSPHINXOPTS) \



htmldocs:

	@$(srctree)/scripts/sphinx-pre-install --version-check

	@+$(foreach var,$(SPHINXDIRS),$(call loop_cmd,sphinx,html,$(var),,$(var)))

linkcheckdocs:

	@$(foreach var,$(SPHINXDIRS),$(call loop_cmd,sphinx,linkcheck,$(var),,$(var)))

latexdocs:

	@$(srctree)/scripts/sphinx-pre-install --version-check

	@+$(foreach var,$(SPHINXDIRS),$(call loop_cmd,sphinx,latex,$(var),latex,$(var)))



	@echo "  SKIP    Sphinx $@ target."

else # HAVE_PDFLATEX

pdfdocs: latexdocs

	@$(srctree)/scripts/sphinx-pre-install --version-check

	$(foreach var,$(SPHINXDIRS), \

	   mkdir -p $(BUILDDIR)/$(var)/pdf; \

	   mv $(subst .tex,.pdf,$(wildcard $(BUILDDIR)/$(var)/latex/*.tex)) $(BUILDDIR)/$(var)/pdf/; \



endif # HAVE_PDFLATEX





endif # HAVE_SPHINX

# The following targets are independent of HAVE_SPHINX, and the rules should

# work or silently pass without Sphinx.





	@echo  ' Linux kernel internal documentation in different formats from ReST:'

	@echo  '  epubdocs        - EPUB'

	@echo  '  xmldocs         - XML'

	@echo  '  linkcheckdocs   - check for broken external links'

	@echo  '  refcheckdocs    - check for references to non-existing files under'

	@echo  '                    Documentation'

	@echo  '  cleandocs       - clean all generated files'

	@echo  '  make SPHINXDIRS="s1 s2" [target] Generate only docs of folder s1, s2'

	@echo  '  valid values for SPHINXDIRS are: $(_SPHINXDIRS)'

	@echo  '  configuration. This is e.g. useful to build with nit-picking config.'

	@echo  '  Default location for the generated documents is Documentation/output'

# SPDX-License-Identifier: GPL-2.0

DT_DOC_CHECKER ?= dt-doc-validate

DT_EXTRACT_EX ?= dt-extract-example







PHONY += check_dtschema_version

check_dtschema_version:

	@which $(DT_DOC_CHECKER) >/dev/null || \

		{ echo "Error: '$(DT_DOC_CHECKER)' not found!" >&2; \

		  echo "Ensure dtschema python package is installed and in your PATH." >&2; \

	@{ echo $(DT_SCHEMA_MIN_VERSION); \

	{ echo "ERROR: dtschema minimum version is v$(DT_SCHEMA_MIN_VERSION)" >&2; false; }



	$(call if_changed,extract_ex)

# Use full schemas when checking %.example.dts



find_all_cmd = find $(srctree)/$(src) \( -name '*.yaml' ! \

		-name 'processed-schema*' ! \



find_cmd = $(find_all_cmd)

find_cmd = echo $(addprefix $(srctree)/, $(DT_SCHEMA_FILES))

endif

                     xargs -n200 -P$$(nproc) \



quiet_cmd_chk_bindings = CHKDT   $@

      cmd_chk_bindings = ($(find_cmd) | \



      cmd_mk_schema = f=$$(mktemp) ; \

                      $(if $(DT_MK_SCHEMA_FLAGS), \

                           printf '%s\n' $(real-prereqs), \

                           $(find_all_cmd)) > $$f ; \



define rule_chkdt

	$(call cmd,mk_schema)

endef



override DTC_FLAGS := \

	-Wno-avoid_unnecessary_addr_size \

	-Wno-graph_child_address \



# Disable undocumented compatible checks until warning free



$(obj)/processed-schema-examples.json: $(DT_DOCS) $(src)/.yamllint check_dtschema_version FORCE





 Unless DT_SCHEMA_FILES is specified, use the full schema for dtbs_check too.

# Just copy processed-schema-examples.json

	$(call if_changed,copy)

DT_SCHEMA_FILES = $(DT_DOCS)

else

 If DT_SCHEMA_FILES is specified, use it for processed-schema.json





endif

always-$(CHECK_DT_BINDING) += processed-schema-examples.json

always-$(CHECK_DTBS)       += processed-schema.json

always-$(CHECK_DT_BINDING) += $(patsubst $(src)/%.yaml,%.example.dts, $(DT_SCHEMA_FILES))

always-$(CHECK_DT_BINDING) += $(patsubst $(src)/%.yaml,%.example.dt.yaml, $(DT_SCHEMA_FILES))

 Hack: avoid 'Argument list too long' error for 'make clean'. Remove most of

# build artifacts here before they are processed by scripts/Makefile.clean

clean-files = $(shell find $(obj) \( -name '*.example.dts' -o \

# SPDX-License-Identifier: GPL-2.0

# Rules to convert a .h file to inline RST documentation

SRC_DIR=$(srctree)/Documentation/userspace-api/media

PARSER = $(srctree)/Documentation/sphinx/parse-headers.pl



FILES = ca.h.rst dmx.h.rst frontend.h.rst net.h.rst \

	videodev2.h.rst media.h.rst cec.h.rst lirc.h.rst

TARGETS := $(addprefix $(BUILDDIR)/, $(FILES))



quiet_gen_rst = echo '  PARSE   $(patsubst $(srctree)/%,%,$<)'; \

	${PARSER} $< $@ $(SRC_DIR)/$(notdir $@).exceptions



$(BUILDDIR)/ca.h.rst: ${UAPI}/dvb/ca.h ${PARSER} $(SRC_DIR)/ca.h.rst.exceptions



	@$($(quiet)gen_rst)

	@$($(quiet)gen_rst)

$(BUILDDIR)/net.h.rst: ${UAPI}/dvb/net.h ${PARSER} $(SRC_DIR)/net.h.rst.exceptions



	@$($(quiet)gen_rst)

$(BUILDDIR)/media.h.rst: ${UAPI}/media.h ${PARSER} $(SRC_DIR)/media.h.rst.exceptions



	@$($(quiet)gen_rst)

	@$($(quiet)gen_rst)

 Media build rules



.PHONY: all html epub xml latex

xml: all

linkcheck:

clean:



	$(Q)mkdir -p $@



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



 Copyright (C) 2013 Altera Corporation

# Copyright (C) 1994, 95, 96, 2003 by Wind River Systems

 Written by Fredrik Markstrom



 This file is included by the global makefile so that you can add your own

 architecture-specific flags and dependencies.



# Nios2 port by Wind River Systems Inc trough:

#   fredrik.markstrom@gmail.com and ivarholmqvist@gmail.com



UTS_SYSNAME = Linux

export MMU

LIBGCC         := $(shell $(CC) $(KBUILD_CFLAGS) $(KCFLAGS) -print-libgcc-file-name)

KBUILD_AFLAGS += -march=r$(CONFIG_NIOS2_ARCH_REVISION)

KBUILD_CFLAGS += -pipe -D__linux__ -D__ELF__

KBUILD_CFLAGS += $(if $(CONFIG_NIOS2_HW_MUL_SUPPORT),-mhw-mul,-mno-hw-mul)

KBUILD_CFLAGS += $(if $(CONFIG_NIOS2_HW_MULX_SUPPORT),-mhw-mulx,-mno-hw-mulx)





head-y		:= arch/nios2/kernel/head.o

core-y		+= arch/nios2/kernel/ arch/nios2/mm/

core-y		+= arch/nios2/platform/

PHONY += $(BOOT_TARGETS) install

KBUILD_IMAGE := $(nios2-boot)/vmImage

core-y	+= $(nios2-boot)/dts/

all: vmImage

$(BOOT_TARGETS): vmlinux



	sh $(srctree)/$(nios2-boot)/install.sh $(KERNELRELEASE) \

	$(KBUILD_IMAGE) System.map "$(INSTALL_PATH)"

  echo  '* vmImage         - Kernel-only image for U-Boot ($(KBUILD_IMAGE))'

  echo  '                     install to $$(INSTALL_PATH)'

endef

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Nios2-specific parts of the memory manager.





obj-y	+= cacheflush.o

obj-y	+= extable.o

obj-y	+= ioremap.o

obj-y	+= pgtable.o

obj-y	+= uaccess.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the nios2 linux kernel.





extra-y	+= head.o



obj-y	+= entry.o

obj-y	+= irq.o

obj-y	+= process.o

obj-y	+= prom.o

obj-y	+= ptrace.o

obj-y	+= sys_nios2.o

obj-y	+= traps.o

obj-$(CONFIG_KGDB)			+= kgdb.o

obj-$(CONFIG_MODULES)			+= module.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Nios2-specific library files.

#

lib-y += delay.o

lib-y += memcpy.o

 SPDX-License-Identifier: GPL-2.0-only



# arch/nios2/boot/Makefile

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

UIMAGE_ENTRYADDR = $(shell $(NM) vmlinux | awk '$$NF == "_start" {print $$1}')

UIMAGE_COMPRESSION = gzip



targets += vmlinux.bin vmlinux.gz vmImage



$(obj)/vmlinux.gz: $(obj)/vmlinux.bin FORCE



$(obj)/vmImage: $(obj)/vmlinux.gz

	@$(kecho) 'Kernel: $@ is ready'

$(obj)/zImage: $(obj)/compressed/vmlinux FORCE

	$(call if_changed,objcopy)



	$(Q)$(MAKE) $(build)=$(obj)/compressed $@

# SPDX-License-Identifier: GPL-2.0

#

# create a compressed vmlinux image from the original vmlinux

#

asflags-y	:=



LDFLAGS_vmlinux := -T

$(obj)/vmlinux: $(obj)/vmlinux.lds $(OBJECTS) $(obj)/piggy.o FORCE





$(obj)/piggy.o: $(obj)/vmlinux.scr $(obj)/../vmlinux.gz FORCE

# SPDX-License-Identifier: GPL-2.0



dtstree		:= $(srctree)/$(src)

dtb-$(CONFIG_OF_ALL_DTBS) := $(patsubst $(dtstree)/%.dts,%.dtb, $(wildcard $(dtstree)/*.dts))



# arch/sh/Makefile

#

 Copyright (C) 1999  Kaz Kojima

 Copyright (C) 2002 - 2008  Paul Mundt

 Copyright (C) 2002  M. R. Brown



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



  ifeq ($(CROSS_COMPILE),)

    CROSS_COMPILE := $(call cc-cross-prefix, sh-linux- sh-linux-gnu- sh-unknown-linux-gnu-)

  endif

endif

KBUILD_DEFCONFIG	:= shx3_defconfig

isa-y					:= any

isa-$(CONFIG_CPU_SH2)			:= sh2

isa-$(CONFIG_CPU_SH3)			:= sh3

isa-$(CONFIG_CPU_SH4A)			:= sh4a

isa-$(CONFIG_CPU_SH4AL_DSP)		:= sh4al

isa-$(CONFIG_SH_DSP)			:= $(isa-y)-dsp



cflags-$(CONFIG_CPU_SH2)		:= $(call cc-option,-m2,)

					   $(call cc-option,-m4-nofpu,)

cflags-$(CONFIG_CPU_SH3)		:= $(call cc-option,-m3,)

cflags-$(CONFIG_CPU_SH4)		:= $(call cc-option,-m4,) \

	$(call cc-option,-mno-implicit-fp,-m4-nofpu)

cflags-$(CONFIG_CPU_SH4A)		+= $(call cc-option,-m4a,) \

					   $(call cc-option,-m4a-nofpu,)

cflags-$(CONFIG_CPU_SH4AL_DSP)		+= $(call cc-option,-m4al,)



# In the case where we are stuck with a compiler that has been uselessly

 restricted to a particular ISA, a favourite default of newer GCCs when

 extensive multilib targets are not provided, ensure we get the best fit

# regarding FP generation. This is intentionally stupid (albeit many

# orders of magnitude less than GCC's default behaviour), as anything

 with a large number of multilib targets better have been built

 correctly for the target in mind.



		     grep nofpu | sed q | sed -e 's/^/-/;s/;.*$$//')

# At this point, anything goes.

else

#

# -Wa,-isa= tuning implies -Wa,-dsp for the versions of binutils that

# support it, while -Wa,-dsp by itself limits the range of usable opcodes

 on certain CPU subtypes. Try the ISA variant first, and if that fails,

 fall back on -Wa,-dsp for the old binutils versions. Even without DSP

 opcodes, we always want the best ISA tuning the version of binutils

 will provide.





isaflags-$(CONFIG_SH_DSP)		:= \

	$(call as-option,-Wa$(comma)-isa=$(isa-y),-Wa$(comma)-dsp)

endif



cflags-y	+= $(isaflags-y) -ffreestanding

OBJCOPYFLAGS	:= -O binary -R .note -R .note.gnu.build-id -R .comment \



# Give the various platforms the opportunity to set default image types

defaultimage-$(CONFIG_SH_SH7785LCR)		:= uImage

defaultimage-$(CONFIG_SH_RSK)			:= uImage

defaultimage-$(CONFIG_SH_SH7757LCR)		:= uImage



# Set some sensible Kbuild defaults

KBUILD_IMAGE		:= $(boot)/$(defaultimage-y)



 Choosing incompatible machines durings configuration will result in

# error messages during linking.

#



ld-bfd			:= elf32-sh-linux

LDFLAGS_vmlinux		+= --defsym jiffies=jiffies_64 --oformat $(ld-bfd)

else

ld-bfd			:= elf32-shbig-linux

LDFLAGS_vmlinux		+= --defsym jiffies=jiffies_64+4 --oformat $(ld-bfd)



export ld-bfd

head-y	:= arch/sh/kernel/head_32.o

 Mach groups

machdir-$(CONFIG_SH_HP6XX)			+= mach-hp6xx

machdir-$(CONFIG_SH_SH03)			+= mach-sh03

machdir-$(CONFIG_SH_RTS7751R2D)			+= mach-r2d

machdir-$(CONFIG_SH_MIGOR)			+= mach-migor

machdir-$(CONFIG_SH_KFR2R09)			+= mach-kfr2r09

machdir-$(CONFIG_SH_SDK7780)			+= mach-sdk7780

machdir-$(CONFIG_SH_X3PROTO)			+= mach-x3proto

machdir-$(CONFIG_SH_SH4202_MICRODEV)		+= mach-microdev

machdir-$(CONFIG_SH_RSK)			+= mach-rsk

core-y	+= $(addprefix arch/sh/boards/, \

	     $(filter-out ., $(patsubst %,%/,$(machdir-y))))

endif

 Common machine type headers. Not part of the arch/sh/boards/ hierarchy.

machdir-y	+= mach-common

 Companion chips

core-$(CONFIG_HD6446X_SERIES)	+= arch/sh/cchips/hd6446x/



# CPU header paths

#

 These are ordered by optimization level. A CPU family that is a subset

# of another (ie, SH-2A / SH-2), is picked up first, with increasing

# levels of genericness if nothing more suitable is situated in the

 hierarchy.



 As an example, in order of preference, SH-2A > SH-2 > common definitions.



cpuincdir-$(CONFIG_CPU_SH2A)	+= cpu-sh2a

cpuincdir-$(CONFIG_CPU_SH3)	+= cpu-sh3

cpuincdir-$(CONFIG_CPU_SH4)	+= cpu-sh4

 Must be last



drivers-y			+= arch/sh/drivers/

cflags-y	+= $(foreach d, $(cpuincdir-y), -I $(srctree)/arch/sh/include/$(d)) \

		   $(foreach d, $(machdir-y), -I $(srctree)/arch/sh/include/$(d))



ifeq ($(CONFIG_MCOUNT),y)



ifeq ($(CONFIG_DWARF_UNWINDER),y)

  KBUILD_CFLAGS += -fasynchronous-unwind-tables

endif

libs-y			:= arch/sh/lib/	$(libs-y)

	       uImage.srec uImage.bin zImage vmlinux.bin vmlinux.srec \

PHONY += $(BOOT_TARGETS)

all: $(notdir $(KBUILD_IMAGE))

$(BOOT_TARGETS): vmlinux









define archhelp

	@echo '  zImage 	           - Compressed kernel image'

	@echo '  romImage	           - Compressed ROM image, if supported'

	@echo '  vmlinux.srec	           - Create an ELF S-record'

	@echo '  vmlinux.bin	           - Create an uncompressed binary image'

	@echo '* uImage  	           - Alias to bootable U-Boot image'

	@echo '  uImage.srec	           - Create an S-record for U-Boot'

	@echo '  uImage.bin	           - Kernel-only image for U-Boot (bin)'

	@echo '* uImage.gz	           - Kernel-only image for U-Boot (gzip)'

	@echo '  uImage.bz2	           - Kernel-only image for U-Boot (bzip2)'

	@echo '  uImage.lzma	           - Kernel-only image for U-Boot (lzma)'

	@echo '  uImage.xz	           - Kernel-only image for U-Boot (xz)'

	@echo '  uImage.lzo	           - Kernel-only image for U-Boot (lzo)'

endef

 SPDX-License-Identifier: GPL-2.0-only



# arch/sh/tools/Makefile

#

 Copyright (C) 2003  Paul Mundt



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



# Shamelessly cloned from ARM.

#

include/generated/machtypes.h: $(src)/gen-mach-types $(src)/mach-types

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux SuperH-specific device drivers.





obj-y		+= dma/ platform_early.o

obj-$(CONFIG_PCI)		+= pci/

obj-$(CONFIG_SUPERHYWAY)	+= superhyway/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the SuperH DMA specific kernel interface routines under Linux.

#

obj-$(CONFIG_SH_DMA_API)	+= dma-sh.o dma-api.o dma-sysfs.o

obj-$(CONFIG_PVR2_DMA)		+= dma-pvr2.o

obj-$(CONFIG_G2_DMA)		+= dma-g2.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the SuperHyway specific kernel interface routines under Linux.

#

obj-$(CONFIG_CPU_SUBTYPE_SH4_202)	+= ops-sh4-202.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the PCI specific kernel interface routines under Linux.





obj-$(CONFIG_CPU_SUBTYPE_SH7763)	+= pci-sh7780.o ops-sh4.o

obj-$(CONFIG_CPU_SUBTYPE_SH7785)	+= pci-sh7780.o ops-sh4.o



obj-$(CONFIG_SH_DREAMCAST)		+= ops-dreamcast.o fixups-dreamcast.o \

					   pci-dreamcast.o

obj-$(CONFIG_SH_SECUREEDGE5410)		+= fixups-snapgear.o

obj-$(CONFIG_SH_SH03)			+= fixups-sh03.o

obj-$(CONFIG_SH_TITAN)			+= fixups-titan.o

obj-$(CONFIG_SH_LANDISK)		+= fixups-landisk.o

obj-$(CONFIG_SH_LBOX_RE2)		+= fixups-rts7751r2d.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux SuperH-specific parts of the memory manager.

#



cacheops-$(CONFIG_CPU_SUBTYPE_SH7619)	:= cache-sh2.o

cacheops-$(CONFIG_CPU_SH3)		:= cache-sh3.o

cacheops-$(CONFIG_SH7705_CACHE_32KB)	+= cache-sh7705.o





mmu-y			:= nommu.o extable_32.o

			   pgtable.o tlbex_32.o tlbflush_32.o



debugfs-$(CONFIG_CPU_SH4)	+= cache-debugfs.o

endif

ifdef CONFIG_MMU

tlb-$(CONFIG_CPU_HAS_PTEAEX)	:= tlb-pteaex.o tlb-urb.o



obj-$(CONFIG_DEBUG_FS)		+= $(debugfs-y)

obj-$(CONFIG_HUGETLB_PAGE)	+= hugetlbpage.o

obj-$(CONFIG_PMB)		+= pmb.o

obj-$(CONFIG_NUMA)		+= numa.o

obj-$(CONFIG_UNCACHED_MAPPING)	+= uncached.o



GCOV_PROFILE_pmb.o := n

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux/SuperH kernel.

#

extra-y	:= head_32.o vmlinux.lds

ifdef CONFIG_FUNCTION_TRACER

# Do not profile debug and lowlevel utilities





obj-y	:= debugtraps.o dumpstack.o 		\

	   idle.o io.o irq.o irq_32.o kdebugfs.o			\

	   process_32.o ptrace.o ptrace_32.o				\

	   reboot.o return_address.o					\



ifndef CONFIG_GENERIC_IOMAP

obj-y				+= iomap.o



obj-y				+= cpu/

obj-$(CONFIG_MODULES)		+= sh_ksyms_32.o module.o

obj-$(CONFIG_KEXEC)		+= machine_kexec.o relocate_kernel.o

obj-$(CONFIG_STACKTRACE)	+= stacktrace.o

obj-$(CONFIG_DYNAMIC_FTRACE)	+= ftrace.o

obj-$(CONFIG_FTRACE_SYSCALLS)	+= ftrace.o

obj-$(CONFIG_FUNCTION_GRAPH_TRACER) += ftrace.o

obj-$(CONFIG_DUMP_CODE)		+= disassemble.o

obj-$(CONFIG_HIBERNATION)	+= swsusp.o

obj-$(CONFIG_DWARF_UNWINDER)	+= dwarf.o

obj-$(CONFIG_HAVE_HW_BREAKPOINT)		+= hw_breakpoint.o

# SPDX-License-Identifier: GPL-2.0





 Teach kbuild about targets

targets += $(foreach F,trapa,vsyscall-$F.o vsyscall-$F.so)



 The DSO images are built using a special linker script

quiet_cmd_syscall = SYSCALL $@





vsyscall-flags = -shared -s -Wl,-soname=linux-gate.so.1 -Wl,--hash-style=sysv



$(obj)/vsyscall-trapa.so: \

$(obj)/vsyscall-%.so: $(src)/vsyscall.lds $(obj)/vsyscall-%.o FORCE

	$(call if_changed,syscall)

 We also create a special relocatable object that should mirror the symbol

# table and layout of the linked DSO.  With ld -R we can then refer to

 these symbols in the kernel code rather than hand-coded addresses.

$(obj)/vsyscall-dummy.o: $(src)/vsyscall.lds \

			$(obj)/vsyscall-trapa.o $(obj)/vsyscall-note.o FORCE

	$(call if_changed,syscall)

LDFLAGS_vsyscall-syms.o := -r -R

$(obj)/vsyscall-syms.o: $(obj)/vsyscall-dummy.o FORCE

# SPDX-License-Identifier: GPL-2.0

kapi := arch/$(SRCARCH)/include/generated/asm



_dummy := $(shell [ -d '$(uapi)' ] || mkdir -p '$(uapi)')	\



syscall := $(src)/syscall.tbl

systbl := $(srctree)/scripts/syscalltbl.sh

      cmd_syshdr = $(CONFIG_SHELL) $(syshdr) --emit-nr $< $@

      cmd_systbl = $(CONFIG_SHELL) $(systbl) $< $@

	$(call if_changed,syshdr)

	$(call if_changed,systbl)

uapisyshdr-y		+= unistd_32.h



kapisyshdr-y	:= $(addprefix $(kapi)/, $(kapisyshdr-y))



all: $(uapisyshdr-y) $(kapisyshdr-y)

	@:

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux/SuperH CPU-specific backends.





obj-$(CONFIG_CPU_SH2)		= sh2/

obj-$(CONFIG_CPU_SH2A)		= sh2a/

obj-$(CONFIG_CPU_SH3)		= sh3/

obj-$(CONFIG_CPU_SH4)		= sh4/

# Special cases for family ancestry.

obj-$(CONFIG_CPU_SH4A)		+= sh4a/



 Common interfaces.



obj-$(CONFIG_SH_CLK_CPG_LEGACY)	+= clock-cpg.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux/SuperH SH-Mobile backends.

#

 Power Management & Sleep mode

obj-$(CONFIG_PM)	+= pm.o sleep.o

obj-$(CONFIG_CPU_IDLE)	+= cpuidle.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux/SuperH SH-2 backends.





obj-y	:= ex.o probe.o entry.o



# SMP setup

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux/SuperH SH-4 backends.





obj-y	:= probe.o common.o



obj-$(CONFIG_SH_STORE_QUEUES)		+= sq.o

 Perf events

perf-$(CONFIG_CPU_SUBTYPE_SH7750S)	:= perf_event.o

perf-$(CONFIG_CPU_SUBTYPE_SH7091)	:= perf_event.o

 CPU subtype setup

obj-$(CONFIG_CPU_SUBTYPE_SH7750)	+= setup-sh7750.o

obj-$(CONFIG_CPU_SUBTYPE_SH7750R)	+= setup-sh7750.o

obj-$(CONFIG_CPU_SUBTYPE_SH7750S)	+= setup-sh7750.o

obj-$(CONFIG_CPU_SUBTYPE_SH7751)	+= setup-sh7750.o

obj-$(CONFIG_CPU_SUBTYPE_SH7751R)	+= setup-sh7750.o

obj-$(CONFIG_CPU_SUBTYPE_SH4_202)	+= setup-sh4-202.o

 Primary on-chip clocks (common)

ifndef CONFIG_CPU_SH4A



 Additional clocks by subtype

clock-$(CONFIG_CPU_SUBTYPE_SH4_202)	+= clock-sh4-202.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux/SuperH SH-2A backends.

#





obj-$(CONFIG_SH_FPU)	+= fpu.o

obj-$(CONFIG_CPU_SUBTYPE_MXG)		+= setup-mxg.o clock-sh7206.o

# Pinmux setup

pinmux-$(CONFIG_CPU_SUBTYPE_SH7264)	:= pinmux-sh7264.o



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux/SuperH SH-3 backends.





obj-y	:= ex.o probe.o entry.o setup-sh3.o

obj-$(CONFIG_HIBERNATION)		+= swsusp.o

 CPU subtype setup

obj-$(CONFIG_CPU_SUBTYPE_SH7705)	+= setup-sh7705.o serial-sh770x.o

obj-$(CONFIG_CPU_SUBTYPE_SH7707)	+= setup-sh770x.o serial-sh770x.o

obj-$(CONFIG_CPU_SUBTYPE_SH7709)	+= setup-sh770x.o serial-sh770x.o

obj-$(CONFIG_CPU_SUBTYPE_SH7712)	+= setup-sh7710.o serial-sh7710.o

obj-$(CONFIG_CPU_SUBTYPE_SH7721)	+= setup-sh7720.o serial-sh7720.o

 Primary on-chip clocks (common)

clock-$(CONFIG_CPU_SH3)			:= clock-sh3.o

clock-$(CONFIG_CPU_SUBTYPE_SH7706)	:= clock-sh7706.o

clock-$(CONFIG_CPU_SUBTYPE_SH7710)	:= clock-sh7710.o

clock-$(CONFIG_CPU_SUBTYPE_SH7712)	:= clock-sh7712.o

# Pinmux setup



obj-y	+= $(clock-y)

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux/SuperH SH-4 backends.





# CPU subtype setup

obj-$(CONFIG_CPU_SUBTYPE_SH7763)	+= setup-sh7763.o

obj-$(CONFIG_CPU_SUBTYPE_SH7780)	+= setup-sh7780.o

obj-$(CONFIG_CPU_SUBTYPE_SH7786)	+= setup-sh7786.o intc-shx3.o

obj-$(CONFIG_CPU_SUBTYPE_SH7722)	+= setup-sh7722.o serial-sh7722.o

obj-$(CONFIG_CPU_SUBTYPE_SH7724)	+= setup-sh7724.o

obj-$(CONFIG_CPU_SUBTYPE_SH7366)	+= setup-sh7366.o

obj-$(CONFIG_CPU_SUBTYPE_SHX3)		+= setup-shx3.o intc-shx3.o

 SMP setup

smp-$(CONFIG_CPU_SHX3)			:= smp-shx3.o

 Primary on-chip clocks (common)

clock-$(CONFIG_CPU_SUBTYPE_SH7757)	:= clock-sh7757.o

clock-$(CONFIG_CPU_SUBTYPE_SH7770)	:= clock-sh7770.o

clock-$(CONFIG_CPU_SUBTYPE_SH7785)	:= clock-sh7785.o

clock-$(CONFIG_CPU_SUBTYPE_SH7343)	:= clock-sh7343.o

clock-$(CONFIG_CPU_SUBTYPE_SH7723)	:= clock-sh7723.o

clock-$(CONFIG_CPU_SUBTYPE_SH7734)	:= clock-sh7734.o

clock-$(CONFIG_CPU_SUBTYPE_SHX3)	:= clock-shx3.o

# Pinmux setup

pinmux-$(CONFIG_CPU_SUBTYPE_SH7723)	:= pinmux-sh7723.o

pinmux-$(CONFIG_CPU_SUBTYPE_SH7734)	:= pinmux-sh7734.o

pinmux-$(CONFIG_CPU_SUBTYPE_SH7785)	:= pinmux-sh7785.o

pinmux-$(CONFIG_CPU_SUBTYPE_SHX3)	:= pinmux-shx3.o

obj-$(CONFIG_GPIOLIB)			+= $(pinmux-y)

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Linux/SuperH CPU-specific IRQ handlers.



obj-y					+= imask.o

obj-$(CONFIG_CPU_HAS_IPR_IRQ)		+= ipr.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for SuperH-specific library files..





lib-y  = delay.o memmove.o memchr.o \

	 checksum.o strlen.o div64.o div64-generic.o

 Extracted from libgcc

	 ashlsi3.o ashrsi3.o ashiftrt.o lshrsi3.o \



udivsi3-y			:= udivsi3_i4i-Os.o

ifneq ($(CONFIG_CC_OPTIMIZE_FOR_SIZE),y)

udivsi3-$(CONFIG_CPU_SH4)	:= udivsi3_i4i.o

endif





memcpy-$(CONFIG_CPU_SH4)	:= memcpy-sh4.o

memset-y			:= memset.o



lib-y				+= $(memcpy-y) $(memset-y) $(udivsi3-y)

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_HD64461)	+= hd64461.o

ccflags-y := -Werror

# SPDX-License-Identifier: GPL-2.0

#

 Specific board support, not covered by a mach group.



obj-$(CONFIG_SH_SH2007)		+= board-sh2007.o

obj-$(CONFIG_SH_SH7785LCR)	+= board-sh7785lcr.o

obj-$(CONFIG_SH_URQUELL)	+= board-urquell.o

obj-$(CONFIG_SH_ESPT)		+= board-espt.o

obj-$(CONFIG_SH_POLARIS)	+= board-polaris.o



# SPDX-License-Identifier: GPL-2.0

obj-y	 := setup.o sdram.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Interface (CTP/PCI-SH03) specific parts of the kernel





obj-y	 := setup.o

# SPDX-License-Identifier: GPL-2.0

ifneq ($(CONFIG_FB_SH_MOBILE_LCDC),)

obj-y	+=  lcd_wqvga.o

endif

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the RTS7751R2D specific parts of the kernel





obj-y	 := setup.o irq.o

# SPDX-License-Identifier: GPL-2.0

obj-y				:= setup.o

obj-$(CONFIG_SH_RSK7203)	+= devices-rsk7203.o

obj-$(CONFIG_SH_RSK7264)	+= devices-rsk7264.o

obj-$(CONFIG_SH_RSK7269)	+= devices-rsk7269.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Sega Dreamcast specific parts of the kernel





obj-y	 := setup.o irq.o

# SPDX-License-Identifier: GPL-2.0

obj-y	:= fpga.o irq.o nmi.o setup.o

obj-$(CONFIG_GPIOLIB)		+= gpio.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_SH_7619_SOLUTION_ENGINE)	+= board-se7619.o

obj-$(CONFIG_SH_7206_SOLUTION_ENGINE)	+= 7206/

obj-$(CONFIG_SH_7751_SOLUTION_ENGINE)	+= 7751/

obj-$(CONFIG_SH_7343_SOLUTION_ENGINE)	+= 7343/

obj-$(CONFIG_SH_7724_SOLUTION_ENGINE)	+= 7724/

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the HITACHI UL SolutionEngine 7780 specific parts of the kernel



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.







obj-y	 := setup.o irq.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the 7751 SolutionEngine specific parts of the kernel

#

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the HITACHI UL SolutionEngine 7724 specific parts of the kernel



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.







obj-y	 := setup.o irq.o sdram.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the 7343 SolutionEngine specific parts of the kernel

#

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the 770x SolutionEngine specific parts of the kernel

#

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the HITACHI UL SolutionEngine 7722 specific parts of the kernel



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.







obj-y	 := setup.o irq.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the 7206 SolutionEngine specific parts of the kernel

#

# SPDX-License-Identifier: GPL-2.0

obj-y	 := setup.o irq.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the Highlander specific parts of the kernel



obj-$(CONFIG_SH_R7785RP)	+= irq-r7785rp.o pinmux-r7785rp.o

ifneq ($(CONFIG_SH_R7785RP),y)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the SuperH MicroDev specific parts of the kernel

#

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the L-BOX RE2 specific parts of the kernel

 Copyright (c) 2007 Nobuhiro Iwamatsu



obj-y	 := setup.o irq.o

# SPDX-License-Identifier: GPL-2.0

obj-y	 := setup.o sdram.o

# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the HP6xx specific parts of the kernel

#

obj-y			:= setup.o

obj-$(CONFIG_APM_EMULATION)	+= hp6xx_apm.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the SDK7780 specific parts of the kernel

#

obj-y	 := setup.o irq.o

# SPDX-License-Identifier: GPL-2.0

obj-y    := setup.o irq.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the R0P7724LC0011/21RL (EcoVec)



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.





obj-y	 := setup.o sdram.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for I-O DATA DEVICE, INC. "LANDISK Series"

#



 arch/sh/boot/Makefile



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



# Copyright (C) 1999 Stuart Menefy

#



# Assign safe dummy values if these variables are not defined,

# in order to suppress error message.

#



suffix-y := bin

suffix-$(CONFIG_KERNEL_BZIP2)	:= bz2

suffix-$(CONFIG_KERNEL_XZ)	:= xz



	   uImage.bz2 uImage.lzma uImage.xz uImage.lzo uImage.bin \

	   vmlinux.bin vmlinux.bin.gz vmlinux.bin.bz2 vmlinux.bin.lzma \

subdir- := compressed romimage

$(obj)/zImage: $(obj)/compressed/vmlinux FORCE

	$(call if_changed,objcopy)



	$(Q)$(MAKE) $(build)=$(obj)/compressed $@

$(obj)/romImage: $(obj)/romimage/vmlinux FORCE

	$(call if_changed,objcopy)



	$(Q)$(MAKE) $(build)=$(obj)/romimage $@

KERNEL_MEMORY	:= $(shell /bin/bash -c 'printf "0x%08x" \



		     $$[$(CONFIG_PAGE_OFFSET)  + \

			$(KERNEL_MEMORY) + \



KERNEL_ENTRY	:= $(shell /bin/bash -c 'printf "0x%08x" \



UIMAGE_ENTRYADDR = $(KERNEL_ENTRY)



$(obj)/vmlinux.bin.gz: $(obj)/vmlinux.bin FORCE





$(obj)/vmlinux.bin.lzma: $(obj)/vmlinux.bin FORCE



$(obj)/vmlinux.bin.xz: $(obj)/vmlinux.bin FORCE





$(obj)/uImage.bz2: $(obj)/vmlinux.bin.bz2 FORCE



$(obj)/uImage.gz: $(obj)/vmlinux.bin.gz FORCE

	$(call if_changed,uimage,gzip)



$(obj)/uImage.xz: $(obj)/vmlinux.bin.xz FORCE

	$(call if_changed,uimage,xz)

	$(call if_changed,uimage,lzo)



$(obj)/vmlinux.srec: $(obj)/compressed/vmlinux FORCE

	$(call if_changed,objcopy)



	@ln -sf $(notdir $<) $@



export CONFIG_PAGE_OFFSET CONFIG_MEMORY_START CONFIG_BOOT_LINK_OFFSET \

# SPDX-License-Identifier: GPL-2.0

#

 linux/arch/sh/boot/romimage/Makefile



 create an romImage file suitable for burning to flash/mmc from zImage





targets		:= vmlinux head.o zeropage.bin piggy.o



mmcif-load-$(CONFIG_CPU_SUBTYPE_SH7724)	:= 0xe5200000 # ILRAM

mmcif-obj-$(CONFIG_CPU_SUBTYPE_SH7724)	:= $(obj)/mmcif-sh7724.o

load-$(CONFIG_ROMIMAGE_MMCIF)		:= $(mmcif-load-y)

obj-$(CONFIG_ROMIMAGE_MMCIF)		:= $(mmcif-obj-y)



$(obj)/vmlinux: $(obj)/head.o $(obj-y) $(obj)/piggy.o FORCE



OBJCOPYFLAGS += -j .empty_zero_page

$(obj)/zeropage.bin: vmlinux FORCE

	$(call if_changed,objcopy)

LDFLAGS_piggy.o := -r --format binary --oformat $(ld-bfd) -T

$(obj)/piggy.o: $(obj)/vmlinux.scr $(obj)/zeropage.bin arch/sh/boot/zImage FORCE

# SPDX-License-Identifier: GPL-2.0

#

 linux/arch/sh/boot/compressed/Makefile



 create a compressed vmlinux image from the original vmlinux





OBJECTS := head_32.o misc.o cache.o piggy.o \

           ashiftrt.o ashldi3.o ashrsi3.o ashlsi3.o lshrsi3.o

 These were previously generated files. When you are building the kernel

 with O=, make sure to remove the stale files in the output tree. Otherwise,

 the build system wrongly compiles the stale ones.



targets := vmlinux vmlinux.bin vmlinux.bin.gz vmlinux.bin.bz2 \

           vmlinux.bin.lzma vmlinux.bin.xz vmlinux.bin.lzo $(OBJECTS)



#

# IMAGE_OFFSET is the load offset of the compression loader

#

			$(CONFIG_BOOT_LINK_OFFSET)]')

		     $$[$(CONFIG_PAGE_OFFSET)  + \

			$(KERNEL_MEMORY) + \







KBUILD_CFLAGS += -DDISABLE_BRANCH_PROFILING

$(obj)/vmlinux: $(addprefix $(obj)/, $(OBJECTS)) FORCE



$(obj)/vmlinux.bin: vmlinux FORCE

	$(call if_changed,objcopy)



$(obj)/vmlinux.bin.gz: $(vmlinux.bin.all-y) FORCE

$(obj)/vmlinux.bin.bz2: $(vmlinux.bin.all-y) FORCE

	$(call if_changed,bzip2)

$(obj)/vmlinux.bin.lzma: $(vmlinux.bin.all-y) FORCE

	$(call if_changed,xzkern)



OBJCOPYFLAGS += -R .empty_zero_page

LDFLAGS_piggy.o := -r --format binary --oformat $(ld-bfd) -T

	$(call if_changed,ld)

 SPDX-License-Identifier: GPL-2.0-only



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



 Copyright (C) 2001 - 2005  Tensilica Inc.

# Copyright (C) 2014 Cadence Design Systems Inc.

#

# This file is included by the global makefile so that you can add your own

# architecture-specific flags and dependencies.

 Core configuration.

# (Use VAR=<xtensa_config> to use another default compiler.)

variant-y := $(patsubst "%",%,$(CONFIG_XTENSA_VARIANT_NAME))

VARIANT = $(variant-y)

    ifndef CROSS_COMPILE



 Platform configuration



platform-$(CONFIG_XTENSA_PLATFORM_XT2000)	:= xt2000



# temporarily until string.h is fixed

KBUILD_CFLAGS += -ffreestanding -D__linux__

KBUILD_CFLAGS += $(call cc-option,-mforce-no-pic,)

KBUILD_CFLAGS += $(call cc-option,-mno-serialize-volatile,)

KBUILD_AFLAGS += -mlongcalls -mtext-section-literals

ifneq ($(CONFIG_LD_NO_RELAX),)





vardirs := $(patsubst %,arch/xtensa/variants/%/,$(variant-y))

plfdirs := $(patsubst %,arch/xtensa/platforms/%/,$(platform-y))

KBUILD_CPPFLAGS += $(patsubst %,-I$(srctree)/%include,$(vardirs) $(plfdirs))



# Find libgcc.a





libs-y		+= arch/xtensa/lib/ $(LIBGCC)



all Image zImage uImage xipImage: vmlinux





define archhelp

  @echo '* zImage      - Compressed kernel image (arch/xtensa/boot/images/zImage.*)'

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Linux/Xtensa-specific parts of the memory manager.





obj-$(CONFIG_MMU)	+= cache.o fault.o ioremap.o mmu.o tlb.o



KASAN_SANITIZE_fault.o := n

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux/Xtensa kernel.

#



obj-y := align.o coprocessor.o entry.o irq.o platform.o process.o \

	 ptrace.o setup.o signal.o stacktrace.o syscall.o time.o traps.o \

	 vectors.o

obj-$(CONFIG_MMU) += pci-dma.o

obj-$(CONFIG_MODULES) += xtensa_ksyms.o module.o

obj-$(CONFIG_FUNCTION_TRACER) += mcount.o

obj-$(CONFIG_SMP) += smp.o mxhead.o

obj-$(CONFIG_XTENSA_VARIANT_HAVE_PERF_EVENTS) += perf_event.o

obj-$(CONFIG_HAVE_HW_BREAKPOINT) += hw_breakpoint.o

obj-$(CONFIG_JUMP_LABEL) += jump_label.o

 In the Xtensa architecture, assembly generates literals which must always

 precede the L32R instruction with a relative offset less than 256 kB.

 Therefore, the .text and .literal section must be combined in parenthesis

 in the linker script, such as: *(.literal .text).



# We need to post-process the generated vmlinux.lds scripts to convert

 *(xxx.text) to  *(xxx.literal xxx.text) for the following text sections:

   .text .ref.text .*init.text .*exit.text .text.*



 Replicate rules in scripts/Makefile.build



sed-y = -e ':a; s/\*(\([^)]*\)\.text\.unlikely/*(\1.literal.unlikely .{text}.unlikely/; ta; ' \

	-e ':b; s/\*(\([^)]*\)\.text\(\.[a-z]*\)/*(\1.{text}\2.literal .{text}\2/; tb; ' \

	-e ':c; s/\*(\([^)]*\)\(\.[a-z]*it\|\.ref\)\.text/*(\1\2.literal \2.{text}/; tc; ' \

	-e 's/\.{text}/.text/g'

cmd__cpp_lds_S = $(CPP) $(cpp_flags) -P -C -Uxtensa -D__ASSEMBLY__ \



	$(call if_changed_dep,_cpp_lds_S)

# SPDX-License-Identifier: GPL-2.0

kapi := arch/$(SRCARCH)/include/generated/asm



_dummy := $(shell [ -d '$(uapi)' ] || mkdir -p '$(uapi)')	\



syscall := $(src)/syscall.tbl

systbl := $(srctree)/scripts/syscalltbl.sh

      cmd_syshdr = $(CONFIG_SHELL) $(syshdr) --emit-nr $< $@

      cmd_systbl = $(CONFIG_SHELL) $(systbl) $< $@

	$(call if_changed,syshdr)

	$(call if_changed,systbl)

uapisyshdr-y		+= unistd_32.h



kapisyshdr-y	:= $(addprefix $(kapi)/, $(kapisyshdr-y))



all: $(uapisyshdr-y) $(kapisyshdr-y)

	@:

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Xtensa-specific library files.





	   usercopy.o strncpy_user.o strnlen_user.o

lib-$(CONFIG_PCI) += pci-auto.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Tensilica XT2000 Emulation Board





 SPDX-License-Identifier: GPL-2.0-only

 $Id: Makefile,v 1.1.1.1 2002/08/28 16:10:14 aroll Exp $



 Makefile for the Xtensa Instruction Set Simulator (ISS)

# "prom monitor" library routines under Linux.

#

obj-$(CONFIG_TTY)	+= console.o

obj-$(CONFIG_BLK_DEV_SIMDISK) += simdisk.o

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for the Tensilica xtavnet Emulation Board

#

# Note! Dependencies are done automagically by 'make dep', which also

 removes any old dependencies. DON'T put your own dependencies here

 unless it's something special (ie not a .c file).



# Note 2! The CFLAGS definitions are in the main makefile...

obj-y			+= setup.o

obj-$(CONFIG_XTFPGA_LCD) += lcd.o



 arch/xtensa/boot/Makefile



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.







# KBUILD_CFLAGS used when building rest of boot (takes effect recursively)

KBUILD_CFLAGS	+= -fno-builtin -Iarch/$(ARCH)/boot/include



subdir-y	:= lib



 Subdirs for the boot loader(s)



boot-$(CONFIG_XTENSA_PLATFORM_XT2000) += Image zImage uImage



zImage: boot-redboot

uImage: $(obj)/uImage

xipImage: $(obj)/xipImage





$(obj)/vmlinux.bin: vmlinux FORCE

	$(call if_changed,objcopy)

	$(call if_changed,gzip)

boot-elf: $(obj)/vmlinux.bin

boot-redboot: $(obj)/vmlinux.bin.gz



	$(call if_changed,uimage)

	$(Q)$(kecho) '  Kernel: $@ is ready'

$(obj)/xipImage: vmlinux FORCE

	$(call if_changed,objcopy)

	$(Q)$(kecho) '  Kernel: $@ is ready'



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.





OBJCOPY_ARGS := -O $(if $(CONFIG_CPU_BIG_ENDIAN),elf32-xtensa-be,elf32-xtensa-le)

CPPFLAGS_boot.lds += -P -C



targets		+= $(boot-y) boot.lds



$(obj)/Image.o: $(obj)/../vmlinux.bin $(OBJS)

	$(Q)$(OBJCOPY) $(OBJCOPY_ARGS) -R .comment \

		$(OBJS) $@

	$(Q)$(LD) $(KBUILD_LDFLAGS) \

		-o $@ $(obj)/Image.o

	$(Q)$(kecho) '  Kernel: $@ is ready'

all Image: $(obj)/../Image.elf

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for some libs needed by zImage.







lib-y	+= $(zlib:.c=.o) zmem.o

ifdef CONFIG_FUNCTION_TRACER

CFLAGS_REMOVE_inflate.o = -pg

CFLAGS_REMOVE_inftrees.o = -pg

CFLAGS_REMOVE_inffast.o = -pg

endif



CFLAGS_REMOVE_inflate.o += -fstack-protector -fstack-protector-strong

CFLAGS_REMOVE_inftrees.o += -fstack-protector -fstack-protector-strong

CFLAGS_REMOVE_inffast.o += -fstack-protector -fstack-protector-strong

quiet_cmd_copy_zlib = COPY    $@

      cmd_copy_zlib = cat $< > $@

	$(call cmd,copy_zlib)

clean-files	:= $(zlib)



 arch/xtensa/boot/dts/Makefile



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.









# for CONFIG_OF_ALL_DTBS test

dtb-	:= $(patsubst $(dtstree)/%.dts,%.dtb, $(wildcard $(dtstree)/*.dts))



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.





OBJCOPY_ARGS := -O $(if $(CONFIG_CPU_BIG_ENDIAN),elf32-xtensa-be,elf32-xtensa-le)

LD_ARGS	= -T $(srctree)/$(obj)/boot.ld

targets	+= $(boot-y)

OBJS	:= $(addprefix $(obj)/,$(boot-y))



LIBGCC := $(shell $(CC) $(KBUILD_CFLAGS) -print-libgcc-file-name)

		--add-section image=$< \

		--set-section-flags image=contents,alloc,load,load,data \



	$(Q)$(LD) $(LD_ARGS) -o $@ $^ -L/xtensa-elf/lib $(LIBGCC)

	$(Q)$(OBJCOPY) -S -O binary $< $@

	$(Q)$(kecho) '  Kernel: $@ is ready'

all zImage: $(obj)/../zImage.redboot

 This file is included by the global makefile so that you can add your own

 architecture-specific flags and dependencies.



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



# Copyright (C) 1994 by Linus Torvalds

 Changes for PPC by Gary Thomas

 Rewritten by Cort Dougan and Paul Mackerras







# Set default 32 bits cross compilers for vdso and boot wrapper



ifeq ($(CROSS32_COMPILE),)

 These options will be overridden by any -mcpu option that the CPU

# or platform code sets later on the command line, but they are needed

# to set a sane 32-bit cpu target for the 64-bit cross compiler which

# may default to the wrong ISA.

KBUILD_CFLAGS		+= -mcpu=powerpc

KBUILD_AFLAGS		+= -mcpu=powerpc

endif

endif

endif

ifdef CONFIG_PPC_BOOK3S_32

KBUILD_CFLAGS		+= -mcpu=powerpc

endif

# If we're on a ppc/ppc64/ppc64le machine use that defconfig, otherwise just use

 ppc64_defconfig because we have nothing better to go on.

uname := $(shell uname -m)



new_nm := $(shell if $(NM) --help 2>&1 | grep -- '--synthetic' > /dev/null; then echo y; else echo n; fi)

ifeq ($(new_nm),y)



# BITS is used as extension for files which are available in a 32 bit

 and a 64 bit version to simplify shared Makefiles.

# e.g.: obj-y += foo_$(BITS).o

export BITS

ifdef CONFIG_PPC64

else



machine-y = ppc

machine-$(CONFIG_PPC64) += 64

machine-$(CONFIG_CPU_LITTLE_ENDIAN) += le



 XXX This needs to be before we override LD below

ifdef CONFIG_PPC32

KBUILD_LDFLAGS_MODULE += arch/powerpc/lib/crtsavres.o

ifeq ($(call ld-ifversion, -ge, 22500, y),y)

# Have the linker provide sfpr if possible.

 There is a corresponding test in arch/powerpc/lib/Makefile

else

KBUILD_LDFLAGS_MODULE += arch/powerpc/lib/crtsavres.o

endif

endif

ifdef CONFIG_CPU_LITTLE_ENDIAN

GNUTARGET	:= powerpcle

MULTIPLEWORD	:= -mno-multiple

else

KBUILD_CFLAGS += $(call cc-option,-mbig-endian)

KBUILD_LDFLAGS	+= -EB

GNUTARGET	:= powerpc



cflags-$(CONFIG_CPU_BIG_ENDIAN)		+= $(call cc-option,-mcall-aixdesc)

aflags-$(CONFIG_CPU_BIG_ENDIAN)		+= $(call cc-option,-mabi=elfv1)

aflags-$(CONFIG_CPU_LITTLE_ENDIAN)	+= -mabi=elfv2

endif

endif



aflags-$(CONFIG_CPU_BIG_ENDIAN)		+= $(call cc-option,-mbig-endian)

aflags-$(CONFIG_CPU_LITTLE_ENDIAN)	+= -mlittle-endian

ifeq ($(HAS_BIARCH),y)

KBUILD_AFLAGS	+= -m$(BITS) -Wl,-a$(BITS)

KBUILD_LDFLAGS	+= -m elf$(BITS)$(LDEMULATION)

endif

cflags-$(CONFIG_STACKPROTECTOR)	+= -mstack-protector-guard=tls

cflags-$(CONFIG_STACKPROTECTOR)	+= -mstack-protector-guard-reg=r13



LDFLAGS_vmlinux-y := -Bstatic

LDFLAGS_vmlinux-$(CONFIG_RELOCATABLE) := -pie



	# -mcmodel=medium breaks modules because it uses 32bit offsets from

	# the TOC pointer to create pointers where possible. Pointers into the

	# percpu data area are created by this method.



	# The kernel module loader relocates the percpu data section from the

 original location (starting with 0xd...) to somewhere in the base

	# kernel percpu data space (starting with 0xc...). We need a full

	# 64bit relocation for this to work, hence -mcmodel=large.

	KBUILD_CFLAGS_MODULE += -mcmodel=large

	export NO_MINIMAL_TOC := -mno-minimal-toc

endif

endif

CFLAGS-$(CONFIG_PPC64)	:= $(call cc-option,-mtraceback=no)

ifndef CONFIG_CC_IS_CLANG

CFLAGS-$(CONFIG_PPC64)	+= $(call cc-option,-mabi=elfv2,$(call cc-option,-mcall-aixdesc))

AFLAGS-$(CONFIG_PPC64)	+= $(call cc-option,-mabi=elfv2)

CFLAGS-$(CONFIG_PPC64)	+= $(call cc-option,-mcall-aixdesc)

AFLAGS-$(CONFIG_PPC64)	+= $(call cc-option,-mabi=elfv1)

endif

endif

CFLAGS-$(CONFIG_PPC64)	+= $(call cc-option,-mcmodel=medium,$(call cc-option,-mminimal-toc))

CFLAGS-$(CONFIG_PPC64)	+= $(call cc-option,-mno-pointers-to-nested-functions)

# Clang unconditionally reserves r2 on ppc32 and does not support the flag

# https://bugs.llvm.org/show_bug.cgi?id=39555

CFLAGS-$(CONFIG_PPC32)	:= $(call cc-option, -ffixed-r2)

# Clang doesn't support -mmultiple / -mno-multiple

# https://bugs.llvm.org/show_bug.cgi?id=39556





ifdef CONFIG_CPU_LITTLE_ENDIAN

else

CFLAGS-$(CONFIG_GENERIC_CPU) += $(call cc-option,-mtune=power7,$(call cc-option,-mtune=power5))

CFLAGS-$(CONFIG_GENERIC_CPU) += $(call cc-option,-mcpu=power5,-mcpu=power4)

endif



CC_FLAGS_FTRACE := -pg





 Altivec option not allowed with e500mc64 in GCC.

ifdef CONFIG_ALTIVEC

else

E5500_CPU := $(call cc-option,-mcpu=e500mc64,-mcpu=powerpc64)

endif

CFLAGS-$(CONFIG_E6500_CPU) += $(call cc-option,-mcpu=e6500,$(E5500_CPU))

ifdef CONFIG_PPC32

ifdef CONFIG_PPC_E500MC

else





KBUILD_AFLAGS	+= $(AFLAGS-y)

KBUILD_CFLAGS	+= $(call cc-option,-msoft-float)

CPP		= $(CC) -E $(KBUILD_CFLAGS)

CHECKFLAGS	+= -m$(BITS) -D__powerpc__ -D__powerpc$(BITS)__

ifdef CONFIG_CPU_BIG_ENDIAN

else

CHECKFLAGS	+= -D__LITTLE_ENDIAN__

endif



# No AltiVec or VSX instructions when building kernel

KBUILD_CFLAGS += $(call cc-option,-mno-altivec)

KBUILD_CFLAGS += $(call cc-option,-mno-vsx)

 No SPE instruction when building kernel

# (We use all available options to help semi-broken compilers)

KBUILD_CFLAGS += $(call cc-option,-mno-spe)

KBUILD_CFLAGS += $(call cc-option,-mspe=no)

# Don't emit .eh_frame since we have no use for it



 Never use string load/store instructions as they are

 often slow when they are implemented at all



cpu-as-$(CONFIG_44x)		+= -Wa,-m440

cpu-as-$(CONFIG_E500)		+= -Wa,-me500

 When using '-many -mpower4' gas will first try and find a matching power4

 mnemonic and failing that it will allow any valid mnemonic that GAS knows

# about. GCC will pass -many to GAS when assembling, clang does not.

cpu-as-$(CONFIG_PPC_E500MC)	+= $(call as-option,-Wa$(comma)-me500mc)

KBUILD_AFLAGS += $(cpu-as-y)



KBUILD_CFLAGS += $(cflags-y)

head-$(CONFIG_PPC64)		:= arch/powerpc/kernel/head_64.o

head-$(CONFIG_FSL_BOOKE)	:= arch/powerpc/kernel/head_fsl_booke.o

head-$(CONFIG_PPC_FPU)		+= arch/powerpc/kernel/fpu.o

head-$(CONFIG_ALTIVEC)		+= arch/powerpc/kernel/vector.o

head-$(CONFIG_PPC_OF_BOOT_TRAMPOLINE)  += arch/powerpc/kernel/prom_init.o

 Default to zImage, override when needed



 With make 3.82 we cannot mix normal and wildcard targets

BOOT_TARGETS1 := zImage zImage.initrd uImage

BOOT_TARGETS2 := zImage% dtbImage% treeImage.% cuImage.% simpleImage.% uImage.%

PHONY += $(BOOT_TARGETS1) $(BOOT_TARGETS2)



$(BOOT_TARGETS1): vmlinux

	$(Q)$(MAKE) $(build)=$(boot) $(patsubst %,$(boot)/%,$@)



bootwrapper_install:



 Used to create 'merged defconfigs'

# To use it $(call) it with the first argument as the base defconfig

 and the second argument as a space separated list of .config files to merge,

 without the .config suffix.



PHONY += pseries_le_defconfig

pseries_le_defconfig:



ppc64le_defconfig:



ppc64le_guest_defconfig:



ppc64_guest_defconfig:



PHONY += powernv_be_defconfig

powernv_be_defconfig:



mpc85xx_defconfig:



mpc85xx_smp_defconfig:

		85xx-32bit 85xx-smp 85xx-hw fsl-emb-nonhw)

PHONY += corenet32_smp_defconfig

	$(call merge_into_defconfig,corenet_base.config,\

		85xx-32bit 85xx-smp 85xx-hw fsl-emb-nonhw dpaa)

PHONY += corenet64_smp_defconfig

	$(call merge_into_defconfig,corenet_base.config,\

		85xx-64bit 85xx-smp altivec 85xx-hw fsl-emb-nonhw dpaa)

PHONY += mpc86xx_defconfig

	$(call merge_into_defconfig,mpc86xx_base.config,\



mpc86xx_smp_defconfig:



PHONY += ppc32_allmodconfig

ppc32_allmodconfig:

	$(Q)$(MAKE) KCONFIG_ALLCONFIG=$(srctree)/arch/powerpc/configs/book3s_32.config \

		-f $(srctree)/Makefile allmodconfig

PHONY += ppc_defconfig



PHONY += ppc64le_allmodconfig

ppc64le_allmodconfig:



ppc64le_allnoconfig:

	$(Q)$(MAKE) KCONFIG_ALLCONFIG=$(srctree)/arch/powerpc/configs/ppc64le.config \



ppc64_book3e_allmodconfig:



PHONY += ppc32_randconfig

ppc32_randconfig:



PHONY += ppc64_randconfig

ppc64_randconfig:



define archhelp

  @echo '  zImage.*        - Compressed kernel image (arch/$(ARCH)/boot/zImage.*)'

  @echo '                    versions which do not support device trees'

  @echo '  simpleImage.<dt> - Firmware independent image.'

  @echo '  treeImage.<dt>  - Support for older IBM 4xx firmware (not U-Boot)'

  @echo '                    (your) ~/bin/$(INSTALLKERNEL) or'

  @echo '                    install to $$(INSTALL_PATH) and run lilo'

  @echo '  *_defconfig     - Select default config from arch/$(ARCH)/configs'

  @echo '  support passing a device tree directly.  Replace <dt> with the'



install:

	sh -x $(srctree)/$(boot)/install.sh "$(KERNELRELEASE)" vmlinux \

	System.map "$(INSTALL_PATH)"

ifeq ($(KBUILD_EXTMOD),)

# We need to generate vdso-offsets.h before compiling certain files in kernel/.

# In order to do that, we should use the archprepare target, but we can't since

 asm-offsets.h is included in some files used to generate vdso-offsets.h, and

# asm-offsets.h is built in prepare0, for which archprepare is a dependency.

 Therefore we need to generate the header after prepare0 has been made, hence

# this hack.

prepare: vdso_prepare

	$(if $(CONFIG_VDSO32),$(Q)$(MAKE) \

		$(build)=arch/powerpc/kernel/vdso32 include/generated/vdso32-offsets.h)

	$(if $(CONFIG_PPC64),$(Q)$(MAKE) \

		$(build)=arch/powerpc/kernel/vdso64 include/generated/vdso64-offsets.h)

endif



	$(Q)$(MAKE) $(build)=arch/powerpc/kernel/syscalls all

prepare: stack_protector_prepare

PHONY += stack_protector_prepare

stack_protector_prepare: prepare0

	$(eval KBUILD_CFLAGS += -mstack-protector-guard-offset=$(shell awk '{if ($$2 == "PACA_CANARY") print $$3;}' include/generated/asm-offsets.h))

	$(eval KBUILD_CFLAGS += -mstack-protector-guard-offset=$(shell awk '{if ($$2 == "TASK_CANARY") print $$3;}' include/generated/asm-offsets.h))

endif

endif

 Check toolchain versions:

 - gcc-4.6 is the minimum kernel-wide version so nothing required.

		echo -n '*** Please use a different binutils version.' ; \

		false ; \

	fi

# SPDX-License-Identifier: GPL-2.0



mpic-msi-obj-$(CONFIG_PCI_MSI)	+= mpic_msi.o mpic_u3msi.o

obj-$(CONFIG_MPIC)		+= mpic.o $(mpic-msi-obj-y)

obj-$(CONFIG_MPIC_TIMER)        += mpic_timer.o

mpic-msgr-obj-$(CONFIG_MPIC_MSGR)	+= mpic_msgr.o

fsl-msi-obj-$(CONFIG_PCI_MSI)	+= fsl_msi.o



obj-$(CONFIG_PPC_MPC106)	+= grackle.o

obj-$(CONFIG_PPC_DCR_NATIVE)	+= dcr-low.o

obj-$(CONFIG_PPC_PMI)		+= pmi.o

obj-$(CONFIG_MMIO_NVRAM)	+= mmio_nvram.o

obj-$(CONFIG_FSL_PCI)		+= fsl_pci.o $(fsl-msi-obj-y)

obj-$(CONFIG_FSL_PMC)		+= fsl_pmc.o

obj-$(CONFIG_FSL_85XX_CACHE_SRAM)	+= fsl_85xx_l2ctlr.o fsl_85xx_cache_sram.o

obj-$(CONFIG_FSL_RIO)		+= fsl_rio.o fsl_rmu.o

obj-$(CONFIG_RTC_DRV_CMOS)	+= rtc_cmos_setup.o

obj-$(CONFIG_PPC_INDIRECT_PCI)	+= indirect_pci.o

obj-$(CONFIG_PPC_I8259)		+= i8259.o

obj-$(CONFIG_IPIC)		+= ipic.o

obj-$(CONFIG_OF_RTC)		+= of_rtc.o

obj-$(CONFIG_CPM)		+= cpm_common.o

obj-$(CONFIG_CPM2)		+= cpm2.o cpm2_pic.o cpm_gpio.o

obj-$(CONFIG_8xx_GPIO)		+= cpm_gpio.o



obj-$(CONFIG_PPC_MPC512x)	+= mpc5xxx_clocks.o

obj-$(CONFIG_PPC_MPC52xx)	+= mpc5xxx_clocks.o

ifdef CONFIG_SUSPEND



obj-$(CONFIG_PPC_EARLY_DEBUG_MEMCONS)	+= udbg_memcons.o

obj-$(CONFIG_PPC_XICS)		+= xics/



obj-$(CONFIG_GE_FPGA)		+= ge/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_GE_FPGA)		+= ge_pic.o

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PPC_ICP_NATIVE)	+= icp-native.o

obj-$(CONFIG_PPC_ICS_RTAS)	+= ics-rtas.o

obj-$(CONFIG_PPC_POWERNV)	+= ics-opal.o icp-opal.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_MATH_EMULATION_HW_UNIMPLEMENTED) += $(math-emu-common-objs)

					fadds.o fcmpo.o fcmpu.o fctiw.o \

					fctiwz.o fdiv.o fdivs.o  fmadd.o \

					fmadds.o fmsub.o fmsubs.o fmul.o \

					fnmadds.o fnmsub.o fnmsubs.o fres.o \

					frsp.o fsel.o lfs.o frsqrte.o fsub.o \

					fsubs.o  mcrfs.o mffs.o mtfsb0.o \





CFLAGS_fabs.o = -fno-builtin-fabs

CFLAGS_math.o = -fno-builtin-fabs

ccflags-y = -w

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_PPC_PERF_CTRS)	+= core-book3s.o bhrb.o

				   power5+-pmu.o power6-pmu.o power7-pmu.o \

obj32-$(CONFIG_PPC_PERF_CTRS)	+= mpc7450-pmu.o

obj-$(CONFIG_PPC_POWERNV)	+= imc-pmu.o



obj-$(CONFIG_HV_PERF_CTRS) += hv-24x7.o hv-gpci.o hv-common.o

obj-$(CONFIG_PPC_8xx) += 8xx-pmu.o

obj-$(CONFIG_PPC64)		+= $(obj64-y)

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Kernel-based Virtual Machine module





KVM := ../../../virt/kvm

common-objs-y = $(KVM)/kvm_main.o $(KVM)/eventfd.o $(KVM)/binary_stats.o

common-objs-$(CONFIG_KVM_VFIO) += $(KVM)/vfio.o

common-objs-$(CONFIG_KVM_MMIO) += $(KVM)/coalesced_mmio.o

common-objs-y += powerpc.o emulate_loadstore.o

obj-$(CONFIG_KVM_EXIT_TIMING) += timing.o





	emulate.o \

	booke_emulate.o \

	booke_interrupts.o \

	e500.o \

	e500_mmu.o \



	emulate.o \

	booke_emulate.o \

	bookehv_interrupts.o \

	e500mc.o \

	e500_mmu.o \



kvm-book3s_64-builtin-objs-$(CONFIG_SPAPR_TCE_IOMMU) := \

	book3s_64_vio_hv.o

	fpu.o \

	book3s_paired_singles.o \

	book3s_interrupts.o \

	book3s_64_mmu.o \



kvm-book3s_64-builtin-objs-$(CONFIG_KVM_BOOK3S_64_HANDLER) += \



ifdef CONFIG_KVM_BOOK3S_PR_POSSIBLE

kvm-book3s_64-builtin-objs-$(CONFIG_KVM_BOOK3S_64_HANDLER) += \



kvm-hv-y += \

	book3s_64_mmu_radix.o \

	book3s_hv_nested.o

kvm-hv-$(CONFIG_PPC_UV) += \



kvm-hv-$(CONFIG_PPC_TRANSACTIONAL_MEM) += \

	book3s_hv_tm.o

	book3s_hv_rm_xics.o book3s_hv_rm_xive.o

kvm-book3s_64-builtin-tm-objs-$(CONFIG_PPC_TRANSACTIONAL_MEM) += \

	book3s_hv_tm_builtin.o

	book3s_hv_hmi.o \

	book3s_hv_p9_entry.o \

	book3s_hv_rmhandlers.o \

	book3s_hv_rm_mmu.o \

	book3s_hv_builtin.o \

	$(kvm-book3s_64-builtin-tm-objs-y) \

	$(kvm-book3s_64-builtin-xics-objs-y)

endif

kvm-book3s_64-objs-$(CONFIG_KVM_XICS) += \



kvm-book3s_64-objs-$(CONFIG_KVM_XIVE) += book3s_xive.o book3s_xive_native.o

kvm-book3s_64-objs-$(CONFIG_SPAPR_TCE_IOMMU) += book3s_64_vio.o

kvm-book3s_64-module-objs := \

	$(common-objs-y) \

	book3s.o \

	$(kvm-book3s_64-objs-y)

kvm-objs-$(CONFIG_KVM_BOOK3S_64) := $(kvm-book3s_64-module-objs)

	emulate.o \

	book3s_paired_singles.o \

	book3s.o \

	book3s_interrupts.o \

	book3s_32_mmu.o

kvm-objs-$(CONFIG_KVM_BOOK3S_32) := $(kvm-book3s_32-objs)



kvm-objs := $(kvm-objs-m) $(kvm-objs-y)

obj-$(CONFIG_KVM_BOOK3S_64) += kvm.o



obj-$(CONFIG_KVM_BOOK3S_64_HV) += kvm-hv.o

obj-y += $(kvm-book3s_64-builtin-objs-y)

# SPDX-License-Identifier: GPL-2.0

# Makefile for xmon

KCOV_INSTRUMENT := n

UBSAN_SANITIZE := n

KASAN_SANITIZE := n

 Disable ftrace for the entire directory

ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)

ifdef CONFIG_CC_IS_CLANG

 clang stores addresses on the stack causing the frame size to blow

# out. See https://github.com/ClangBuiltLinux/linux/issues/252

KBUILD_CFLAGS += -Wframe-larger-than=4096

endif

ccflags-$(CONFIG_PPC64) := $(NO_MINIMAL_TOC)



ifdef CONFIG_XMON_DISASSEMBLY

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux ppc-specific parts of the memory manager.







obj-y				:= fault.o mem.o pgtable.o mmap.o maccess.o pageattr.o \

				   init_$(BITS).o pgtable_$(BITS).o \

				   pgtable-frag.o ioremap.o ioremap_$(BITS).o \

obj-$(CONFIG_PPC_BOOK3S_32)	+= book3s32/

obj-$(CONFIG_NUMA) += numa.o

obj-$(CONFIG_PTDUMP_CORE)	+= ptdump/

# SPDX-License-Identifier: GPL-2.0





obj-$(CONFIG_PPC_BOOK3S_603) += nohash_low.o

obj-$(CONFIG_PPC_KUEP) += kuep.o

# SPDX-License-Identifier: GPL-2.0

ccflags-$(CONFIG_PPC64)	:= $(NO_MINIMAL_TOC)

obj-$(CONFIG_PPC_FSL_BOOK3E)	+= fsl_book3e.o

obj-$(CONFIG_RANDOMIZE_BASE)	+= kaslr_booke.o

ifdef CONFIG_HUGETLB_PAGE



 Disable kcov instrumentation on sensitive code

# This is necessary for booting with kcov enabled on book3e machines

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_PPC_BOOK3E_MMU)	+= shared.o

obj-$(CONFIG_PPC_BOOK3S_32)	+= shared.o

obj-$(CONFIG_PPC_BOOK3S_64)	+= book3s64.o

obj-$(CONFIG_PPC_BOOK3S_32)	+= bats.o segment_regs.o

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_PPC_BOOK3S_32)	+= book3s_32.o

# SPDX-License-Identifier: GPL-2.0

ccflags-y	:= $(NO_MINIMAL_TOC)

CFLAGS_REMOVE_slb.o = $(CC_FLAGS_FTRACE)

obj-$(CONFIG_PPC_RADIX_MMU)	+= radix_pgtable.o radix_tlb.o

obj-$(CONFIG_PPC_4K_PAGES)	+= hash_4k.o

obj-$(CONFIG_PPC_64K_PAGES)	+= hash_64k.o

obj-$(CONFIG_PPC_RADIX_MMU)	+= radix_hugetlbpage.o

endif

obj-$(CONFIG_TRANSPARENT_HUGEPAGE) += hash_hugepage.o

obj-$(CONFIG_SPAPR_TCE_IOMMU)	+= iommu_api.o

obj-$(CONFIG_PPC_PKEY)	+= pkeys.o

# Instrumenting the SLB fault path can lead to duplicate SLB entries

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





ifdef CONFIG_PPC32

CFLAGS_btext.o		+= -fPIC

endif

CFLAGS_prom_init.o += $(DISABLE_LATENT_ENTROPY_PLUGIN)



CFLAGS_prom_init.o += -DDISABLE_BRANCH_PROFILING



# Do not trace early boot code

CFLAGS_REMOVE_cputable.o = $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_btext.o = $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_prom.o = $(CC_FLAGS_FTRACE)

endif

KASAN_SANITIZE_early_32.o := n



CFLAGS_btext.o += -DDISABLE_BRANCH_PROFILING

endif

				   irq.o align.o signal_$(BITS).o pmc.o vdso.o \

				   signal.o sysfs.o cacheinfo.o time.o \

				   udbg.o misc.o io.o misc_$(BITS).o \

				   hw_breakpoint_constraints.o interrupt.o \

				   kdebugfs.o

obj-y				+= ptrace/

obj-$(CONFIG_COMPAT)		+= sys_ppc32.o signal_32.o

obj-$(CONFIG_VDSO32)		+= vdso32_wrapper.o

obj-$(CONFIG_PPC_BOOK3S_64)	+= cpu_setup_ppc970.o cpu_setup_pa6t.o

obj-$(CONFIG_PPC_BOOK3S_64)	+= mce.o mce_power.o

obj-$(CONFIG_PPC_BOOK3E_64)	+= exceptions-64e.o idle_book3e.o

obj-$(CONFIG_PPC64)		+= vdso64_wrapper.o

obj-$(CONFIG_PPC_BOOK3S_IDLE)	+= idle_book3s.o

obj-$(CONFIG_PPC_RTAS_DAEMON)	+= rtasd.o

obj-$(CONFIG_PPC_DT_CPU_FTRS)	+= dt_cpu_ftrs.o

				  eeh_driver.o eeh_event.o eeh_sysfs.o

obj-$(CONFIG_CRASH_DUMP)	+= crash_dump.o

obj-$(CONFIG_PRESERVE_FA_DUMP)	+= fadump.o

obj-$(CONFIG_E500)		+= idle_e500.o

endif

ifdef CONFIG_FSL_BOOKE

obj-$(CONFIG_HIBERNATION)	+= swsusp_booke.o

obj-$(CONFIG_JUMP_LABEL)	+= jump_label.o

extra-$(CONFIG_40x)		:= head_40x.o

extra-$(CONFIG_PPC_8xx)		:= head_8xx.o

extra-y				+= vmlinux.lds

obj-$(CONFIG_RELOCATABLE)	+= reloc_$(BITS).o

obj-$(CONFIG_PPC32)		+= entry_32.o setup_32.o early_32.o static_call.o

obj-$(CONFIG_PPC64)		+= dma-iommu.o iommu.o

obj-$(CONFIG_KGDB)		+= kgdb.o

obj-$(CONFIG_BOOTX_TEXT)	+= btext.o

obj-$(CONFIG_SMP)		+= smp.o

obj-$(CONFIG_KPROBES)		+= kprobes.o

obj-$(CONFIG_PPC_UDBG_16550)	+= legacy_serial.o udbg_16550.o



pci64-$(CONFIG_PPC64)		+= pci_dn.o pci-hotplug.o isa-bridge.o



obj-$(CONFIG_AUDIT)		+= audit.o









obj64-$(CONFIG_PPC_TRANSACTIONAL_MEM)	+= tm.o

obj-$(CONFIG_PPC64)		+= $(obj64-y)





obj-$(CONFIG_EPAPR_PARAVIRT)	+= epapr_paravirt.o epapr_hcalls.o



obj-$(CONFIG_PPC_SECVAR_SYSFS)	+= secvar-sysfs.o

# Disable GCOV, KCOV & sanitizers in odd or sensitive code

GCOV_PROFILE_prom_init.o := n

KCOV_INSTRUMENT_kprobes.o := n

UBSAN_SANITIZE_kprobes.o := n

UBSAN_SANITIZE_kprobes-ftrace.o := n

UBSAN_SANITIZE_syscall_64.o := n



 Necessary for booting with kcov enabled on book3e machines





extra-$(CONFIG_PPC_FPU)		+= fpu.o

extra-$(CONFIG_PPC64)		+= entry_64.o

extra-$(CONFIG_PPC_OF_BOOT_TRAMPOLINE)	+= prom_init.o





targets += prom_init_check

clean-files := vmlinux.lds

# Force dependency (incbin is bad)

$(obj)/vdso32_wrapper.o : $(obj)/vdso32/vdso32.so.dbg

$(obj)/vdso64_wrapper.o : $(obj)/vdso64/vdso64.so.dbg

# for cleaning

# SPDX-License-Identifier: GPL-2.0

 List of files in the vdso, has to be asm only for now



include $(srctree)/lib/vdso/Makefile

obj-vdso32 = sigtramp.o gettimeofday.o datapage.o cacheflush.o note.o getcpu.o

ifneq ($(c-gettimeofday-y),)

  CFLAGS_vgettimeofday.o += $(DISABLE_LATENT_ENTROPY_PLUGIN)

  CFLAGS_vgettimeofday.o += $(call cc-option, -fno-stack-protector)

  CFLAGS_REMOVE_vgettimeofday.o = $(CC_FLAGS_FTRACE)

endif

 Build rules



ifdef CROSS32_COMPILE

    VDSOCC := $(CROSS32_COMPILE)gcc



ifdef CONFIG_PPC64

CC32FLAGS += -m32





GCOV_PROFILE := n



ccflags-y := -shared -fno-common -fno-builtin -nostdlib \

asflags-y := -D__VDSO32__ -s

CPPFLAGS_vdso32.lds += -P -C -Upowerpc

# link rule for the .so file, .lds has to be first

	$(call if_changed,vdso32ld_and_check)

 assembly rules for the .S files

	$(call if_changed_dep,vdso32as)

	$(call if_changed_dep,vdso32cc)

 Generate VDSO offsets using helper script

gen-vdsosym := $(srctree)/$(src)/gen_vdso_offsets.sh

      cmd_vdsosym = $(NM) $< | $(gen-vdsosym) | LC_ALL=C sort > $@

include/generated/vdso32-offsets.h: $(obj)/vdso32.so.dbg FORCE

	$(call if_changed,vdsosym)

 actual build commands

      cmd_vdso32ld_and_check = $(VDSOCC) $(c_flags) $(CC32FLAGS) -o $@ -Wl,-T$(filter %.lds,$^) $(filter %.o,$^) ; $(cmd_vdso_check)

quiet_cmd_vdso32as = VDSO32A $@

      cmd_vdso32cc = $(VDSOCC) $(c_flags) $(CC32FLAGS) -c -o $@ $<

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





CFLAGS_ptrace-view.o		+= -DUTS_MACHINE='"$(UTS_MACHINE)"'

obj-y				+= ptrace.o ptrace-view.o

obj-$(CONFIG_VSX)		+= ptrace-vsx.o

ifneq ($(CONFIG_VSX),y)

obj-$(CONFIG_ALTIVEC)		+= ptrace-altivec.o

obj-$(CONFIG_PPC_TRANSACTIONAL_MEM)	+= ptrace-tm.o

ifneq ($(CONFIG_PPC_ADV_DEBUG_REGS),y)

# SPDX-License-Identifier: GPL-2.0

# List of files in the vdso, has to be asm only for now

ARCH_REL_TYPE_ABS := R_PPC_JUMP_SLOT|R_PPC_GLOB_DAT|R_PPC_ADDR32|R_PPC_ADDR24|R_PPC_ADDR16|R_PPC_ADDR16_LO|R_PPC_ADDR16_HI|R_PPC_ADDR16_HA|R_PPC_ADDR14|R_PPC_ADDR14_BRTAKEN|R_PPC_ADDR14_BRNTAKEN|R_PPC_REL24





  CFLAGS_vgettimeofday.o += -include $(c-gettimeofday-y)

  CFLAGS_vgettimeofday.o += -DDISABLE_BRANCH_PROFILING

  CFLAGS_vgettimeofday.o += -ffreestanding -fasynchronous-unwind-tables



# Build rules

targets := $(obj-vdso64) vdso64.so.dbg vgettimeofday.o

obj-vdso64 := $(addprefix $(obj)/, $(obj-vdso64))

KCOV_INSTRUMENT := n

UBSAN_SANITIZE := n

KASAN_SANITIZE := n

	-Wl,-soname=linux-vdso64.so.1 -Wl,--hash-style=both

# Go prior to 1.16.x assumes r30 is not clobbered by any VDSO code. That used to be true

 by accident when the VDSO was hand-written asm code, but may not be now that the VDSO is

# compiler generated. To avoid breaking Go tell GCC not to use r30. Impact on code

 generation is minimal, it will just use r29 instead.





targets += vdso64.lds



 link rule for the .so file, .lds has to be first

$(obj)/vdso64.so.dbg: $(src)/vdso64.lds $(obj-vdso64) $(obj)/vgettimeofday.o FORCE



# Generate VDSO offsets using helper script

quiet_cmd_vdsosym = VDSOSYM $@





# actual build commands

quiet_cmd_vdso64ld_and_check = VDSO64L $@

# SPDX-License-Identifier: GPL-2.0

kapi := arch/$(SRCARCH)/include/generated/asm



_dummy := $(shell [ -d '$(uapi)' ] || mkdir -p '$(uapi)')	\



syscall := $(src)/syscall.tbl

systbl := $(srctree)/scripts/syscalltbl.sh



quiet_cmd_systbl = SYSTBL  $@

      cmd_systbl = $(CONFIG_SHELL) $(systbl) --abis $(abis) $< $@

$(uapi)/unistd_32.h: abis := common,nospu,32

$(uapi)/unistd_32.h: $(syscall) $(syshdr) FORCE



	$(call if_changed,syshdr)

$(kapi)/syscall_table_32.h: $(syscall) $(systbl) FORCE



$(kapi)/syscall_table_64.h: abis := common,nospu,64

	$(call if_changed,systbl)

	$(call if_changed,systbl)

uapisyshdr-y		+= unistd_32.h unistd_64.h



kapisyshdr-y	:= $(addprefix $(kapi)/, $(kapisyshdr-y))



all: $(uapisyshdr-y) $(kapisyshdr-y)

	@:

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the powerpc trace subsystem





# do not trace tracer code

CFLAGS_REMOVE_ftrace.o = $(CC_FLAGS_FTRACE)

endif

ifdef CONFIG_MPROFILE_KERNEL

else

obj-$(CONFIG_FTRACE_SYSCALLS)		+= ftrace.o



obj-$(CONFIG_PPC64)			+= $(obj64-y)

obj-$(CONFIG_PPC32)			+= $(obj32-y)

# Disable GCOV, KCOV & sanitizers in odd or sensitive code

UBSAN_SANITIZE_ftrace.o := n

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ppc-specific library files..

#

ccflags-$(CONFIG_PPC64)	:= $(NO_MINIMAL_TOC)

CFLAGS_code-patching.o += -fno-stack-protector

CFLAGS_feature-fixups.o += -fno-stack-protector

CFLAGS_REMOVE_code-patching.o = $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_feature-fixups.o = $(CC_FLAGS_FTRACE)

KASAN_SANITIZE_feature-fixups.o := n

ifdef CONFIG_KASAN



obj-y += alloc.o code-patching.o feature-fixups.o pmem.o test_code-patching.o

obj-y	+=	string.o memcmp_$(BITS).o







# See corresponding test in arch/powerpc/Makefile

# 64-bit linker creates .sfpr on demand for final link (vmlinux),

 so it is only needed for modules, and only for older linkers which

 do not support --save-restore-funcs

ifeq ($(call ld-ifversion, -lt, 22500, y),y)





	   memcpy_64.o copy_mc_64.o

ifndef CONFIG_PPC_QUEUED_SPINLOCKS



obj64-$(CONFIG_ALTIVEC)	+= vmx-helper.o

					   test_emulate_step_exec_instr.o

			   string_$(BITS).o

obj-y			+= sstep.o

obj-$(CONFIG_PPC_FPU)	+= ldstfp.o

obj64-y			+= quad.o

obj-$(CONFIG_PPC_LIB_RHEAP) += rheap.o



obj-$(CONFIG_ALTIVEC)	+= xor_vmx.o xor_vmx_glue.o

CFLAGS_xor_vmx.o += -maltivec $(call cc-option,-mabi=altivec)

 Enable <altivec.h>

CFLAGS_xor_vmx.o += -isystem $(shell $(CC) -print-file-name=include)

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_FSL_ULI1575)	+= fsl_uli1575.o

obj-$(CONFIG_PPC_PMAC)		+= powermac/

obj-$(CONFIG_4xx)		+= 4xx/

obj-$(CONFIG_44x)		+= 44x/

obj-$(CONFIG_PPC_MPC52xx)	+= 52xx/

obj-$(CONFIG_PPC_82xx)		+= 82xx/

obj-$(CONFIG_FSL_SOC_BOOKE)	+= 85xx/

obj-$(CONFIG_PPC_MAPLE)		+= maple/

obj-$(CONFIG_PPC_PASEMI)	+= pasemi/

obj-$(CONFIG_PPC_PS3)		+= ps3/

obj-$(CONFIG_EMBEDDED6xx)	+= embedded6xx/

# SPDX-License-Identifier: GPL-2.0

obj-y	+= misc_44x.o machine_check.o

obj-$(CONFIG_PPC44x_SIMPLE) += ppc44x_simple.o

obj-$(CONFIG_WARP)	+= warp.o

obj-$(CONFIG_FSP2)	+= fsp2.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y	+= setup.o

obj-y	+= setup.o rng.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y				+= setup.o time.o pegasos_eth.o pci.o

obj-$(CONFIG_SMP)		+= smp.o

obj-$(CONFIG_NVRAM:m=y)		+= nvram.o

# SPDX-License-Identifier: GPL-2.0

CFLAGS_bootx_init.o  		+= -fPIC





CFLAGS_bootx_init.o  		+= -DDISABLE_BRANCH_PROFILING

endif

ifdef CONFIG_FUNCTION_TRACER

 Do not trace early boot code



# CONFIG_NVRAM is an arch. independent tristate symbol, for pmac32 we really

 need this to be a bool.  Cheat here and pretend CONFIG_NVRAM=m is really

# CONFIG_NVRAM=y

obj-$(CONFIG_NVRAM:m=y)		+= nvram.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0



					   pmu.o spider-pci.o





obj-$(CONFIG_PPC_IBM_CELL_POWERBUTTON)	+= cbe_powerbutton.o

ifdef CONFIG_SMP

obj-$(CONFIG_PPC_CELL_NATIVE)		+= smp.o

endif

 needed only when building loadable spufs.ko

spu-manage-$(CONFIG_PPC_CELL_COMMON)	+= spu_manage.o

obj-$(CONFIG_SPU_BASE)			+= spu_callbacks.o spu_base.o \

					   $(spu-priv1-y) \

					   $(spu-manage-y) \



# SPDX-License-Identifier: GPL-2.0

spufs-y += inode.o file.o context.o syscalls.o

spufs-$(CONFIG_COREDUMP) += coredump.o

# magic for the trace events



# Rules to build switch.o with the help of SPU tool chain

SPU_CROSS	:= spu-

SPU_AS		:= $(SPU_CROSS)gcc

SPU_LD		:= $(SPU_CROSS)ld

SPU_LDFLAGS	:= -N -Ttext=0x0



# Compile SPU files

$(obj)/spu_%.o: $(src)/spu_%.c



 Assemble SPU files

$(obj)/spu_%.o: $(src)/spu_%.S



 Link SPU Executables

      cmd_spu_ld = $(SPU_LD) $(SPU_LDFLAGS) -o $@ $^

quiet_cmd_spu_ld = SPU_LD  $@

	$(call if_changed,spu_ld)

 Copy into binary format

      cmd_spu_objcopy = $(SPU_OBJCOPY) -O binary $< $@

$(obj)/spu_%.bin: $(src)/spu_%

	$(call if_changed,spu_objcopy)

 create C code from ELF executable

		echo " * $*_dump.h: Copyright (C) 2005 IBM." ; \

		echo " * Do not edit!" ; \

			"__attribute__((__aligned__(128))) = {" ; \

		hexdump -v -e '"0x" 4/1 "%02x" "," "\n"' $< ; \

		echo "};" ; \

quiet_cmd_hexdump = HEXDUMP $@

$(obj)/%_dump.h: $(obj)/%.bin

	$(call if_changed,hexdump)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Freescale PowerPC 512x linux kernel.

#

obj-$(CONFIG_COMMON_CLK)	+= clock-commonclk.o

obj-$(CONFIG_MPC512x_GENERIC)	+= mpc512x_generic.o

# SPDX-License-Identifier: GPL-2.0

obj-y			+= rng.o opal-elog.o opal-dump.o opal-sysparam.o opal-sensor.o

obj-y			+= opal-msglog.o opal-hmi.o opal-power.o opal-irqchip.o



obj-$(CONFIG_FA_DUMP)	+= opal-fadump.o

obj-$(CONFIG_PRESERVE_FA_DUMP)	+= opal-fadump.o

obj-$(CONFIG_PCI)	+= pci.o pci-ioda.o pci-ioda-tce.o

obj-$(CONFIG_EEH)	+= eeh-powernv.o

obj-$(CONFIG_OPAL_PRD)	+= opal-prd.o

obj-$(CONFIG_PERF_EVENTS) += opal-imc.o

obj-$(CONFIG_SCOM_DEBUGFS) += opal-xscom.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the 6xx/7xx/7xxxx linux kernel.



obj-$(CONFIG_LINKSTATION)	+= linkstation.o ls_uart.o

obj-$(CONFIG_USBGECKO_UDBG)	+= usbgecko_udbg.o

obj-$(CONFIG_WII)		+= wii.o hlwd-pic.o

obj-$(CONFIG_MVME5100)		+= mvme5100.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for 52xx based boards



obj-y				+= mpc52xx_pic.o mpc52xx_common.o mpc52xx_gpt.o

obj-$(CONFIG_PCI)		+= mpc52xx_pci.o

obj-$(CONFIG_PPC_MPC5200_SIMPLE) += mpc5200_simple.o

obj-$(CONFIG_PPC_EFIKA)		+= efika.o

obj-$(CONFIG_PPC_MEDIA5200)	+= media5200.o



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PPC_PASEMI_MDIO)	+= gpio_mdio.o

obj-$(CONFIG_PCI_MSI)		+= msi.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the PowerPC 83xx linux kernel.

#

obj-$(CONFIG_MCU_MPC8349EMITX)	+= mcu_mpc8349emitx.o

obj-$(CONFIG_MPC831x_RDB)	+= mpc831x_rdb.o

obj-$(CONFIG_MPC834x_MDS)	+= mpc834x_mds.o

obj-$(CONFIG_MPC836x_MDS)	+= mpc836x_mds.o

obj-$(CONFIG_MPC832x_MDS)	+= mpc832x_mds.o

obj-$(CONFIG_MPC837x_RDB)	+= mpc837x_rdb.o

obj-$(CONFIG_ASP834x)		+= asp834x.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the PowerPC 85xx linux kernel.

#

ifneq ($(CONFIG_FSL_CORENET_RCPM),y)

obj-$(CONFIG_SMP) += mpc85xx_pm_ops.o

endif



obj-$(CONFIG_BSC9132_QDS) += bsc913x_qds.o

obj-$(CONFIG_C293_PCIE)   += c293pcie.o

obj-$(CONFIG_MPC8560_ADS) += mpc85xx_ads.o

obj-$(CONFIG_MPC85xx_MDS) += mpc85xx_mds.o

obj-$(CONFIG_P1022_RDK)   += p1022_rdk.o

obj-$(CONFIG_TWR_P102x)   += twr_p102x.o

obj-$(CONFIG_FB_FSL_DIU)	+= t1042rdb_diu.o

obj-$(CONFIG_TQM85xx)	  += tqm85xx.o

obj-$(CONFIG_KSI8560)	  += ksi8560.o

obj-$(CONFIG_GE_IMP3A)	  += ge_imp3a.o

obj-$(CONFIG_SGY_CTS1000) += sgy_cts1000.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the PowerPC 8xx linux kernel.



obj-$(CONFIG_MPC885ADS)   += mpc885ads_setup.o

obj-$(CONFIG_PPC_ADDER875) += adder875.o

obj-$(CONFIG_TQM8XX)      += tqm8xx_setup.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the PowerPC 82xx linux kernel.

#

obj-$(CONFIG_PQ2FADS) += pq2fads.o

obj-$(CONFIG_MGCOGE) += km82xx.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PPC_VAS)	+= vas-api.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the PowerPC 86xx linux kernel.

#

obj-y				:= pic.o common.o

obj-$(CONFIG_SMP)		+= mpc86xx_smp.o

obj-$(CONFIG_MPC8610_HPCD)	+= mpc8610_hpcd.o

obj-$(CONFIG_GEF_SBC310)	+= gef_sbc310.o

obj-$(CONFIG_GEF_PPC9A)		+= gef_ppc9a.o

obj-$(CONFIG_MVME7100)          += mvme7100.o

# SPDX-License-Identifier: GPL-2.0

ccflags-$(CONFIG_PPC_PSERIES_DEBUG)	+= -DDEBUG

			   of_helpers.o \

			   setup.o iommu.o event_sources.o ras.o \

			   firmware.o power.o dlpar.o mobility.o rng.o \

			   pci.o pci_dlpar.o eeh_pseries.o msi.o

obj-$(CONFIG_SCANLOG)	+= scanlog.o

obj-$(CONFIG_KEXEC_CORE)	+= kexec.o





obj-$(CONFIG_HVCS)		+= hvcserver.o

obj-$(CONFIG_IO_EVENT_IRQ)	+= io_event_irq.o

obj-$(CONFIG_LPARCFG)		+= lparcfg.o

obj-$(CONFIG_PPC_SPLPAR)	+= vphn.o

obj-$(CONFIG_PPC_SVM)		+= svm.o

obj-$(CONFIG_FA_DUMP)		+= rtas-fadump.o



obj-$(CONFIG_ARCH_HAS_CC_PLATFORM)	+= cc_platform.o

# SPDX-License-Identifier: GPL-2.0

obj-y += setup.o mm.o time.o hvcall.o htab.o repository.o



obj-$(CONFIG_PS3GELIC_UDBG) += gelic_udbg.o

obj-y += device-init.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

#

# Arch-specific network modules

#

obj-$(CONFIG_BPF_JIT) += bpf_jit_comp.o bpf_jit_comp$(BITS).o

# SPDX-License-Identifier: GPL-2.0









      cmd_bin2c = $(objtree)/scripts/bin2c kexec_purgatory < $< > $@



# SPDX-License-Identifier: GPL-2.0

# Makefile for making ELF bootable images for booting on CHRP

 using Open Firmware.



 Geert Uytterhoeven	September 1997



 Based on coffboot by Paul Mackerras

# Simplified for ppc64 by Todd Inglett

#

# NOTE:	this code may be built for 32 bit in ELF32 format even though

	it packages a 64 bit kernel.  We do this to simplify the

#	bootloader and increase compatibility with OpenFirmware.

#

#	To this end we need to define BOOTCC, etc, as the tools

#	needed to build the 32 bit image.  That's normally the same

	compiler for the rest of the kernel, with the -m32 flag added.

#	To make it easier to setup a cross compiler,

	CROSS32_COMPILE is setup as a prefix just like CROSS_COMPILE

	in the toplevel makefile.





ifdef CROSS32_COMPILE

else

    BOOTCC := $(CROSS32_COMPILE)gcc

endif

else

    BOOTCC := $(CC)

    BOOTAR := $(AR)

endif

		 -fno-strict-aliasing -O2 -msoft-float -mno-altivec -mno-vsx \

		 $(LINUXINCLUDE)

BOOTCFLAGS	+= -m64

BOOTCFLAGS	+= -m32

endif

BOOTCFLAGS	+= -isystem $(shell $(BOOTCC) -print-file-name=include)

BOOTCFLAGS	+= -mbig-endian





BOOTARFLAGS	:= -crD

ifdef CONFIG_CC_IS_CLANG

BOOTAFLAGS += $(CLANG_FLAGS)

endif

BOOTCFLAGS	+= -g

endif

ifeq ($(call cc-option-yn, -fstack-protector),y)



BOOTCFLAGS	+= -include $(srctree)/include/linux/compiler_attributes.h

BOOTCFLAGS	+= -I$(objtree)/$(obj) -I$(srctree)/$(obj)

DTC_FLAGS	?= -p 1024

$(obj)/cuboot-hotfoot.o: BOOTCFLAGS += -mcpu=405

$(obj)/treeboot-currituck.o: BOOTCFLAGS += -mcpu=405



# The pre-boot decompressors pull in a lot of kernel headers and other source

 files. This creates a bit of a dependency headache since we need to copy

 these files into the build dir, fix up any includes and ensure that dependent

# files are copied in the right order.

# these need to be seperate variables because they are copied out of different

# directories in the kernel tree. Sure you COULd merge them, but it's a

# cure-is-worse-than-disease situation.

zlib-decomp-$(CONFIG_KERNEL_GZIP) := decompress_inflate.c



$(addprefix $(obj)/, decompress.o): \



$(addprefix $(obj)/, $(zlib-decomp-y)): \



$(addprefix $(obj)/,$(zlib-y)): \



libfdt       := fdt.c fdt_ro.c fdt_wip.c fdt_sw.c fdt_rw.c fdt_strerror.c



	treeboot-akebono.o treeboot-currituck.o treeboot-iss4xx.o): \

	$(addprefix $(obj)/,$(libfdtheader))

		$(libfdt) libfdt-wrapper.c \

		oflib.c ofconsole.c cuboot.c

ifndef CONFIG_PPC64_BOOT_WRAPPER

src-wlib-y += crtsavres.S

endif

src-wlib-$(CONFIG_44x) += 4xx.c ebony.c bamboo.c

src-wlib-$(CONFIG_PPC_8xx) += mpc8xx.c planetcore.c fsl-soc.c

src-wlib-$(CONFIG_PPC_82xx) += pq2.c fsl-soc.c planetcore.c

src-wlib-$(CONFIG_CPM) += cpm-serial.c

src-plat-y := of.c epapr.c

src-plat-$(CONFIG_40x) += fixed-head.S cuboot-hotfoot.c \

				cuboot-acadia.c \

				cuboot-kilauea.c simpleboot.c

src-plat-$(CONFIG_44x) += treeboot-ebony.c cuboot-ebony.c treeboot-bamboo.c \

				cuboot-bamboo.c cuboot-sam440ep.c \

				cuboot-sequoia.c cuboot-rainier.c \

				treeboot-iss4xx.c treeboot-currituck.c \

src-plat-$(CONFIG_PPC_8xx) += cuboot-8xx.c fixed-head.S ep88xc.c redboot-8xx.c

src-plat-$(CONFIG_PPC_MPC52xx) += cuboot-52xx.c

src-plat-$(CONFIG_PPC_83xx) += cuboot-83xx.c fixed-head.S redboot-83xx.c

					fixed-head.S mvme5100.c

src-plat-$(CONFIG_EPAPR_BOOT) += epapr.c epapr-wrapper.c

src-plat-$(CONFIG_PPC_POWERNV) += pseries-head.S

src-plat-$(CONFIG_PPC_IBM_CELL_BLADE) += pseries-head.S





src-wlib := $(sort $(src-wlib-y))

src-plat := $(sort $(src-plat-y))

src-boot := $(src-wlib) $(src-plat) empty.c

obj-boot := $(addsuffix .o, $(basename $(src-boot)))

obj-plat := $(addsuffix .o, $(basename $(addprefix $(obj)/, $(src-plat))))

obj-plat: $(libfdt)

quiet_cmd_copy_kern_src = COPY    $@

      cmd_copy_kern_src = sed -f $(srctree)/arch/powerpc/boot/fixup-headers.sed $< > $@

	$(call cmd,copy_kern_src)

	$(call cmd,copy_kern_src)

	$(call cmd,copy_kern_src)

	$(call cmd,copy_kern_src)

quiet_cmd_copy_libfdt = COPY    $@



$(addprefix $(obj)/,$(libfdt) $(libfdtheader)): $(obj)/%: $(srctree)/scripts/dtc/libfdt/%



$(obj)/empty.c:

	$(Q)touch $@

$(obj)/zImage.coff.lds $(obj)/zImage.ps3.lds : $(obj)/%: $(srctree)/$(src)/%.S

	$(Q)cp $< $@

clean-files := $(zlib-) $(zlibheader-) $(zliblinuxheader-) \

		$(zlib-decomp-) $(libfdt) $(libfdtheader) \

		empty.c zImage.coff.lds zImage.ps3.lds zImage.lds



quiet_cmd_bootas = BOOTAS  $@

      cmd_bootas = $(BOOTCC) -Wp,-MD,$(depfile) $(BOOTAFLAGS) -c -o $@ $<

      cmd_bootar = $(BOOTAR) $(BOOTARFLAGS) $@.$$$$ $(real-prereqs); mv $@.$$$$ $@

$(obj-libfdt): $(obj)/%.o: $(srctree)/scripts/dtc/libfdt/%.c FORCE

	$(call if_changed_dep,bootcc)

$(patsubst %.S,%.o, $(filter %.S, $(src-boot))): %.o: %.S FORCE

	$(Q)mkdir -p $(dir $@)



$(obj)/wrapper.a: $(obj-wlib) FORCE



hostprogs	:= addnote hack-coff mktree



dtstree		:= $(srctree)/$(src)/dts

wrapper		:=$(srctree)/$(src)/wrapper

wrapperbits	:= $(extra-y) $(addprefix $(obj)/,addnote hack-coff mktree) \

			$(wrapper) FORCE



# Bits for building various flavours of zImage

CROSSWRAP := -C "$(CROSS32_COMPILE)"

CROSSWRAP := -C "$(CROSS_COMPILE)"

endif

endif

compressor-$(CONFIG_KERNEL_GZIP) := gz

compressor-$(CONFIG_KERNEL_LZMA)   := lzma



# args (to if_changed): 1 = (this rule), 2 = platform, 3 = dts 4=dtb 5=initrd

quiet_cmd_wrap	= WRAP    $@

		$(CROSSWRAP) $(if $3, -s $3)$(if $4, -d $4)$(if $5, -i $5) \

		vmlinux

image-$(CONFIG_PPC_PSERIES)		+= zImage.pseries

image-$(CONFIG_PPC_MAPLE)		+= zImage.maple

image-$(CONFIG_PPC_CHRP)		+= zImage.chrp

image-$(CONFIG_PPC_EFIKA)		+= zImage.chrp

image-$(CONFIG_PPC_HOLLY)		+= dtbImage.holly

image-$(CONFIG_DEFAULT_UIMAGE)		+= uImage

image-$(CONFIG_EPAPR_BOOT)		+= zImage.epapr



# Targets which embed a device tree blob

#

# Theses are default targets to build images which embed device tree blobs.

# They are only required on boards which do not have FDT support in firmware.

 Boards with newish u-boot firmware can use the uImage target above





 Board ports in arch/powerpc/platform/40x/Kconfig

image-$(CONFIG_HOTFOOT)			+= cuImage.hotfoot



 Board ports in arch/powerpc/platform/44x/Kconfig

image-$(CONFIG_EBONY)			+= treeImage.ebony cuImage.ebony

image-$(CONFIG_BAMBOO)			+= treeImage.bamboo cuImage.bamboo

image-$(CONFIG_SAM440EP)		+= cuImage.sam440ep

image-$(CONFIG_RAINIER)			+= cuImage.rainier

image-$(CONFIG_KATMAI)			+= cuImage.katmai

image-$(CONFIG_ISS4xx)			+= treeImage.iss4xx \

					   treeImage.iss4xx-mpic

image-$(CONFIG_AKEBONO)			+= treeImage.akebono

# Board ports in arch/powerpc/platform/8xx/Kconfig

image-$(CONFIG_MPC86XADS)		+= cuImage.mpc866ads

image-$(CONFIG_MPC885ADS)		+= cuImage.mpc885ads



# Board ports in arch/powerpc/platform/52xx/Kconfig

image-$(CONFIG_PPC_LITE5200)		+= cuImage.lite5200



# Board ports in arch/powerpc/platform/82xx/Kconfig

image-$(CONFIG_PQ2FADS)			+= cuImage.pq2fads

image-$(CONFIG_EP8248E)			+= dtbImage.ep8248e

 Board ports in arch/powerpc/platform/83xx/Kconfig

image-$(CONFIG_MPC834x_ITX)		+= cuImage.mpc8349emitx \



# Board ports in arch/powerpc/platform/85xx/Kconfig

image-$(CONFIG_MPC8560_ADS)		+= cuImage.mpc8560ads

					   cuImage.mpc8548cds_32b \

image-$(CONFIG_MPC85xx_MDS)		+= cuImage.mpc8568mds

image-$(CONFIG_TQM8540)			+= cuImage.tqm8540

image-$(CONFIG_TQM8548)			+= cuImage.tqm8548

image-$(CONFIG_TQM8560)			+= cuImage.tqm8560



# Board ports in arch/powerpc/platform/86xx/Kconfig



 Board ports in arch/powerpc/platform/embedded6xx/Kconfig

image-$(CONFIG_GAMECUBE)		+= dtbImage.gamecube

image-$(CONFIG_WII)			+= dtbImage.wii



 Board port in arch/powerpc/platform/amigaone/Kconfig





 For 32-bit powermacs, build the COFF and miboot images

# as well as the ELF images.



 Allow extra targets to be added to the defconfig

image-y	+= $(subst ",,$(CONFIG_EXTRA_TARGETS))

initrd-  := $(patsubst zImage%, zImage.initrd%, $(image-))

initrd-y := $(patsubst zImage%, zImage.initrd%, \

		$(patsubst dtbImage%, dtbImage.initrd%, \

		$(patsubst simpleImage%, simpleImage.initrd%, \

targets += $(foreach x, dtbImage uImage cuImage simpleImage treeImage, \

targets += $(foreach x, dtbImage uImage cuImage simpleImage treeImage, \





# Don't put the ramdisk on the pattern rule; when its missing make will try

 the pattern rule with less dependencies that also matches (even with the

# hard dependency listed).



	$(call if_changed,wrap,$(subst $(obj)/zImage.,,$@))

# dtbImage% - a dtbImage is a zImage with an embedded device tree blob

$(obj)/dtbImage.initrd.%: vmlinux $(wrapperbits) $(obj)/dts/%.dtb FORCE



	$(call if_changed,wrap,$*,,$(obj)/dts/$*.dtb)

# This cannot be in the root of $(src) as the zImage rule always adds a $(obj)

 prefix



$(obj)/uImage: vmlinux $(wrapperbits) FORCE



$(obj)/uImage.initrd.%: vmlinux $(obj)/dts/%.dtb $(wrapperbits) FORCE



	$(call if_changed,wrap,uboot-$*,,$(obj)/dts/$*.dtb)

$(obj)/cuImage.initrd.%: vmlinux $(obj)/dts/%.dtb $(wrapperbits) FORCE

	$(call if_changed,wrap,cuboot-$*,,$(obj)/dts/$*.dtb,$(obj)/ramdisk.image.gz)





$(obj)/simpleImage.%: vmlinux $(obj)/dts/%.dtb $(wrapperbits) FORCE

	$(call if_changed,wrap,simpleboot-$*,,$(obj)/dts/$*.dtb)

$(obj)/treeImage.initrd.%: vmlinux $(obj)/dts/%.dtb $(wrapperbits) FORCE

	$(call if_changed,wrap,treeboot-$*,,$(obj)/dts/$*.dtb,$(obj)/ramdisk.image.gz)



 Needed for the above targets to work with dts/fsl/ files

$(obj)/dts/%.dtb: $(obj)/dts/fsl/%.dtb



# If there isn't a platform selected then just strip the vmlinux.

image-y := vmlinux.strip

endif

$(obj)/zImage:		$(addprefix $(obj)/, $(image-y))

	$(Q)rm -f $@; ln $< $@

$(obj)/zImage.initrd:	$(addprefix $(obj)/, $(initrd-y))

	$(Q)rm -f $@; ln $< $@

# anything not in $(targets)

	zImage zImage.initrd zImage.chrp zImage.coff zImage.holly \

	zImage.miboot zImage.pmac zImage.pseries \

	zImage.maple simpleImage.* otheros.bld

# clean up files cached by wrapper

 If not absolute clean-files are relative to $(obj).

clean-files += $(addprefix $(objtree)/, $(clean-kernel))

INSTALL := install

wrapper-installed	:= $(DESTDIR)$(WRAPPER_BINDIR)/wrapper

dts-installed		:= $(patsubst $(dtstree)/%, $(DESTDIR)$(WRAPPER_DTSDIR)/%, $(wildcard $(dtstree)/*.dts))







      cmd_install_dts	  = $(INSTALL)  -m0644 $(patsubst $(DESTDIR)$(WRAPPER_DTSDIR)/%,$(srctree)/$(obj)/dts/%,$@) $@

quiet_cmd_install_exe	  = INSTALL $(patsubst $(DESTDIR)$(WRAPPER_BINDIR)/%,%,$@)

      cmd_install_exe	  = $(INSTALL)  -m0755 $(patsubst $(DESTDIR)$(WRAPPER_BINDIR)/%,$(obj)/%,$@) $@

quiet_cmd_install_wrapper = INSTALL $(patsubst $(DESTDIR)$(WRAPPER_BINDIR)/%,%,$@)

      cmd_install_wrapper = $(INSTALL)  -m0755 $(patsubst $(DESTDIR)$(WRAPPER_BINDIR)/%,$(srctree)/$(obj)/%,$@) $@ ;\

				sed -i $@ -e 's%^object=.*%object=$(WRAPPER_OBJDIR)%' \



$(DESTDIR)$(WRAPPER_OBJDIR) $(DESTDIR)$(WRAPPER_DTSDIR) $(DESTDIR)$(WRAPPER_BINDIR):



$(extra-installed)	: $(DESTDIR)$(WRAPPER_OBJDIR)/% : $(obj)/% | $(DESTDIR)$(WRAPPER_OBJDIR)



	$(call cmd,install_exe)

$(dts-installed)	: $(DESTDIR)$(WRAPPER_DTSDIR)/% : $(srctree)/$(obj)/dts/% | $(DESTDIR)$(WRAPPER_DTSDIR)



$(wrapper-installed): $(DESTDIR)$(WRAPPER_BINDIR) $(srctree)/$(obj)/wrapper | $(DESTDIR)$(WRAPPER_BINDIR)



# SPDX-License-Identifier: GPL-2.0



dtstree		:= $(srctree)/$(src)

dtb-$(CONFIG_OF_ALL_DTBS) := $(patsubst $(dtstree)/%.dts,%.dtb, $(wildcard $(dtstree)/*.dts))

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





obj-y				+= core.o crash.o core_$(BITS).o





 Disable GCOV, KCOV & sanitizers in odd or sensitive code

GCOV_PROFILE_core_$(BITS).o := n

KCOV_INSTRUMENT_core_$(BITS).o := n

# SPDX-License-Identifier: GPL-2.0

#

# powerpc/crypto/Makefile

#

 Arch-specific CryptoAPI modules.





obj-$(CONFIG_CRYPTO_AES_PPC_SPE) += aes-ppc-spe.o

obj-$(CONFIG_CRYPTO_MD5_PPC) += md5-ppc.o

obj-$(CONFIG_CRYPTO_SHA1_PPC) += sha1-powerpc.o

obj-$(CONFIG_CRYPTO_SHA1_PPC_SPE) += sha1-ppc-spe.o

obj-$(CONFIG_CRYPTO_SHA256_PPC_SPE) += sha256-ppc-spe.o

obj-$(CONFIG_CRYPTO_CRC32C_VPMSUM) += crc32c-vpmsum.o

obj-$(CONFIG_CRYPTO_CRCT10DIF_VPMSUM) += crct10dif-vpmsum.o

obj-$(CONFIG_CRYPTO_VPMSUM_TESTER) += crc-vpmsum_test.o

aes-ppc-spe-y := aes-spe-core.o aes-spe-keys.o aes-tab-4k.o aes-spe-modes.o aes-spe-glue.o

md5-ppc-y := md5-asm.o md5-glue.o

sha1-powerpc-y := sha1-powerpc-asm.o sha1.o

sha256-ppc-spe-y := sha256-spe-asm.o sha256-spe-glue.o

crc32c-vpmsum-y := crc32c-vpmsum_asm.o crc32c-vpmsum_glue.o



# alpha/Makefile

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

 Copyright (C) 1994 by Linus Torvalds







LDFLAGS_vmlinux	:= -static -N #-relax

CHECKFLAGS	+= -D__alpha__



cpuflags-$(CONFIG_ALPHA_EV5)		:= -mcpu=ev5

cpuflags-$(CONFIG_ALPHA_SX164)		:= -mcpu=pca56

cpuflags-$(CONFIG_ALPHA_EV67)		:= -mcpu=ev67

# If GENERIC, make sure to turn off any instruction set extensions that

# the host compiler might have on by default.  Given that EV4 and EV5

 have the same instruction set, prefer EV5 because an EV5 schedule is

# more likely to keep an EV4 processor busy than vice-versa.

cpuflags-$(CONFIG_ALPHA_GENERIC)	:= -mcpu=ev5

cflags-y				+= $(cpuflags-y)



# For TSUNAMI, we must have the assembler not emulate our instructions.

 The same is true for IRONGATE, POLARIS, PYXIS.

 BWX is most important, but we don't really want any emulation ever.

KBUILD_CFLAGS += $(cflags-y) -Wa,-mev6

head-y := arch/alpha/kernel/head.o

libs-y				+= arch/alpha/lib/

 export what is needed by arch/alpha/boot/Makefile

LIBS_Y := $(patsubst %/, %/lib.a, $(libs-y))

export LIBS_Y



#Default target when executing make with no arguments



$(boot)/vmlinux.gz: vmlinux



bootimage bootpfile bootpzfile: vmlinux



	$(Q)$(MAKE) $(build)=arch/alpha/kernel/syscalls all

  echo '  bootpzfile	- compressed kernel BOOTP image (arch/alpha/boot/bootpzfile)'

endef

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the FPU instruction emulation.





ccflags-y := -w



math-emu-objs := math.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux alpha-specific parts of the memory manager.

#

ccflags-y := -Werror

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





ccflags-y	:= -Wno-sign-compare



obj-$(CONFIG_VGA_HOSE)	+= console.o

obj-$(CONFIG_PCI)	+= pci.o pci_iommu.o pci-sysfs.o

obj-$(CONFIG_RTC_DRV_ALPHA) += rtc.o





obj-y 	 += core_apecs.o core_cia.o core_irongate.o core_lca.o \

	    core_mcpcia.o core_polaris.o core_t2.o \

	    core_tsunami.o



obj-y	 += core_marvel.o core_titan.o core_wildfire.o

obj-y	 += sys_marvel.o sys_titan.o sys_wildfire.o



obj-y	 += irq_pyxis.o irq_i8259.o irq_srm.o

obj-y	 += err_ev6.o





 Misc support



obj-y	+= binfmt_loader.o

endif

# Core logic support

obj-$(CONFIG_ALPHA_APECS)	+= core_apecs.o

obj-$(CONFIG_ALPHA_LCA)		+= core_lca.o

obj-$(CONFIG_ALPHA_MARVEL)	+= core_marvel.o gct.o

obj-$(CONFIG_ALPHA_MCPCIA)	+= core_mcpcia.o

obj-$(CONFIG_ALPHA_POLARIS)	+= core_polaris.o



# Board support

obj-$(CONFIG_ALPHA_CABRIOLET)	+= sys_cabriolet.o irq_i8259.o irq_srm.o \

obj-$(CONFIG_ALPHA_EB164)	+= sys_cabriolet.o irq_i8259.o irq_srm.o \

obj-$(CONFIG_ALPHA_EB66P)	+= sys_cabriolet.o irq_i8259.o irq_srm.o \

obj-$(CONFIG_ALPHA_LX164)	+= sys_cabriolet.o irq_i8259.o irq_srm.o \

obj-$(CONFIG_ALPHA_PC164)	+= sys_cabriolet.o irq_i8259.o irq_srm.o \

obj-$(CONFIG_ALPHA_TITAN)	+= sys_titan.o irq_i8259.o smc37c669.o

obj-$(CONFIG_ALPHA_EIGER)	+= sys_eiger.o irq_i8259.o

obj-$(CONFIG_ALPHA_JENSEN)	+= sys_jensen.o pci-noop.o irq_i8259.o

obj-$(CONFIG_ALPHA_MARVEL)	+= sys_marvel.o 

obj-$(CONFIG_ALPHA_MIKASA)	+= sys_mikasa.o irq_i8259.o irq_srm.o

obj-$(CONFIG_ALPHA_NORITAKE)	+= sys_noritake.o irq_i8259.o

obj-$(CONFIG_ALPHA_RUFFIAN)	+= sys_ruffian.o irq_pyxis.o irq_i8259.o

obj-$(CONFIG_ALPHA_SABLE)	+= sys_sable.o

obj-$(CONFIG_ALPHA_LYNX)	+= sys_sable.o

obj-$(CONFIG_ALPHA_XL)		+= sys_sio.o irq_i8259.o irq_srm.o pc873xx.o

				   irq_srm.o smc37c669.o

obj-$(CONFIG_ALPHA_WILDFIRE)	+= sys_wildfire.o irq_i8259.o

 Error support

obj-$(CONFIG_ALPHA_MARVEL)	+= err_ev7.o err_marvel.o

obj-$(CONFIG_ALPHA_NAUTILUS)	+= err_ev6.o



endif # GENERIC

# SPDX-License-Identifier: GPL-2.0

kapi := arch/$(SRCARCH)/include/generated/asm



_dummy := $(shell [ -d '$(uapi)' ] || mkdir -p '$(uapi)')	\



syscall := $(src)/syscall.tbl

systbl := $(srctree)/scripts/syscalltbl.sh

      cmd_syshdr = $(CONFIG_SHELL) $(syshdr) --emit-nr $< $@

      cmd_systbl = $(CONFIG_SHELL) $(systbl) $< $@

	$(call if_changed,syshdr)

	$(call if_changed,systbl)

uapisyshdr-y		+= unistd_32.h



kapisyshdr-y	:= $(addprefix $(kapi)/, $(kapisyshdr-y))



all: $(uapisyshdr-y) $(kapisyshdr-y)

	@:

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for alpha-specific library files..

#

ccflags-y := -Werror

# Many of these routines have implementations tuned for ev6.

# Choose them iff we're targeting ev6 specifically.

ev6-$(CONFIG_ALPHA_EV6) := ev6-

# Several make use of the cttz instruction introduced in ev67.



lib-y =	__divqu.o __remqu.o __divlu.o __remlu.o \

	udiv-qrnnd.o \

	udelay.o \

	$(ev6-y)memset.o \

	$(ev6-y)memcpy.o \

	csum_partial_copy.o \

	styncpy.o \

	$(ev6-y)copy_user.o \

	$(ev6-y)clear_user.o \

	$(ev6-y)copy_page.o \

	fls.o

 The division routines are built from single source, with different defines.

AFLAGS___divqu.o = -DDIV

AFLAGS___divlu.o = -DDIV       -DINTSIZE



$(addprefix $(obj)/,__divqu.o __remqu.o __divlu.o __remlu.o): \

						$(src)/$(ev6-y)divide.S FORCE

	$(call if_changed_rule,as_o_S)

# There are direct branches between {str*cpy,str*cat} and stx*cpy.

 Ensure the branches are within range by merging these objects.





$(obj)/stycpy.o: $(obj)/strcpy.o $(obj)/$(ev67-y)strcat.o \

	$(call if_changed,ld)

$(obj)/styncpy.o: $(obj)/strncpy.o $(obj)/$(ev67-y)strncat.o \

		 $(obj)/$(ev6-y)stxncpy.o FORCE



# arch/alpha/boot/Makefile

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

 Copyright (C) 1994 by Linus Torvalds





targets		:= vmlinux.gz vmlinux \



KBUILD_HOSTCFLAGS := -Wall -I$(objtree)/usr/include

BOOTCFLAGS	+= -I$(objtree)/$(obj) -I$(srctree)/$(obj)

 SRM bootable image.  Copy to offset 512 of a partition.

	( cat $(obj)/tools/lxboot $(obj)/tools/bootlx $(obj)/vmlinux.nh ) > $@ 

	$(obj)/tools/mkbb $@ $(obj)/tools/lxboot



 BOOTP bootable image.  Define INITRD during make to append initrd image.

ifdef INITRD



# Compressed kernel BOOTP bootable image.

# Define INITRD during make to append initrd image.

ifdef INITRD



# Compressed kernel image

$(obj)/vmlinux.gz: $(obj)/vmlinux FORCE



$(obj)/main.o: $(obj)/ksize.h

$(obj)/bootpz.o: $(obj)/kzsize.h

define KERNEL_SIZE `ls -l $(obj)/vmlinux.nh | awk '{print $$5}'`" > $@T

ifdef INITRD

	[ -f $(INITRD) ] || exit 1

define INITRD_IMAGE_SIZE `ls -l $(INITRD) | awk '{print $$5}'`" >> $@T

	cmp -s $@T $@ || mv -f $@T $@



$(obj)/kzsize.h: $(obj)/vmlinux.nh.gz FORCE

	echo "#define KERNEL_SIZE `ls -l $(obj)/vmlinux.nh | awk '{print $$5}'`" > $@T

	echo "#define KERNEL_Z_SIZE `ls -l $(obj)/vmlinux.nh.gz | awk '{print $$5}'`" >> $@T

	echo "#define INITRD_IMAGE_SIZE `ls -l $(INITRD) | awk '{print $$5}'`" >> $@T

endif

	rm -f $@T



$(obj)/vmlinux: vmlinux FORCE

	$(call if_changed,strip)

quiet_cmd_objstrip = OBJSTRIP $@

      cmd_objstrip = $(OBJSTRIP) $(OSFLAGS_$(@F)) $< $@

OSFLAGS_vmlinux.nh	:= -v

OSFLAGS_lxboot		:= -p

OSFLAGS_bootph		:= -vb

OSFLAGS_bootpzh		:= -vb

$(obj)/vmlinux.nh: vmlinux $(OBJSTRIP) FORCE



$(obj)/vmlinux.nh.gz: $(obj)/vmlinux.nh FORCE



	$(call if_changed,objstrip)

$(obj)/tools/bootlx: $(obj)/bootloader $(OBJSTRIP) FORCE



$(obj)/tools/bootph: $(obj)/bootpheader $(OBJSTRIP) FORCE



$(obj)/tools/bootpzh: $(obj)/bootpzheader $(OBJSTRIP) FORCE



 -N -relax

LDFLAGS_bootloader   := -static -T # -N -relax

 -N -relax

LDFLAGS_bootpzheader := -static -T # -N -relax

OBJ_bootlx   := $(obj)/head.o $(obj)/stdio.o $(obj)/main.o

OBJ_bootph   := $(obj)/head.o $(obj)/stdio.o $(obj)/bootp.o



	$(call if_changed,ld)

	$(call if_changed,ld)

	$(call if_changed,ld)

$(obj)/misc.o: lib/inflate.c



 m68k/Makefile



 This file is included by the global makefile so that you can add your own

 architecture-specific flags and dependencies.



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



# Copyright (C) 1994 by Hamish Macdonald

 Copyright (C) 2002,2011 Greg Ungerer <gerg@snapgear.com>





KBUILD_DEFCONFIG := multi_defconfig

		CROSS_COMPILE := $(call cc-cross-prefix, \

			m68k-linux-gnu- m68k-linux- m68k-unknown-linux-gnu-)



#

	Enable processor type. Ordering of these is important - we want to

	use the minimum processor type of the range we support. The logic

	for 680x0 will only allow use of the -m68060 or -m68040 if no other

	680x0 type is specified - and no option is specified for 68030 or

#	68020. The other m68k/ColdFire types always specify some type of

#	compiler cpu type flag.

#

ifndef CONFIG_M68060

cpuflags-$(CONFIG_M68040)	= -m68040

endif

cpuflags-$(CONFIG_M68030)	=

cpuflags-$(CONFIG_M68020)	=

cpuflags-$(CONFIG_M68000)	= -m68000

cpuflags-$(CONFIG_M5441x)	= $(call cc-option,-mcpu=54455,-mcfv4e)

cpuflags-$(CONFIG_M5407)	= $(call cc-option,-mcpu=5407,-m5200)

cpuflags-$(CONFIG_M537x)	= $(call cc-option,-mcpu=537x,-m5307)

cpuflags-$(CONFIG_M528x)	= $(call cc-option,-mcpu=528x,-m5307)

cpuflags-$(CONFIG_M5272)	= $(call cc-option,-mcpu=5272,-m5307)

cpuflags-$(CONFIG_M523x)	= $(call cc-option,-mcpu=523x,-m5307)

cpuflags-$(CONFIG_M5249)	= $(call cc-option,-mcpu=5249,-m5200)

cpuflags-$(CONFIG_M5206e)	= $(call cc-option,-mcpu=5206e,-m5200)



# Evaluate tune cc-option calls now

cpuflags-y := $(cpuflags-y)

KBUILD_AFLAGS += $(cpuflags-y)



KBUILD_CFLAGS += -pipe -ffreestanding

ifdef CONFIG_MMU

KBUILD_CFLAGS += -ffixed-a2

 we can use a m68k-linux-gcc toolchain with these in place

KBUILD_CPPFLAGS += -DUTS_SYSNAME=\"uClinux\"





ifdef CONFIG_SUN3



CHECKFLAGS += -D__mc68000__



ifdef CONFIG_KGDB

 If configured for kgdb support, include debugging infos and keep the

 frame pointer



#

# Select the assembler head startup code. Order is important. The default

 head code is first, processor specific selections can override it after.



head-y				:= arch/m68k/kernel/head.o

head-$(CONFIG_M68000)		:= arch/m68k/68000/head.o

head-$(CONFIG_COLDFIRE)		:= arch/m68k/coldfire/head.o





lilo:	vmlinux

	cat vmlinux > $(INSTALL_PATH)/vmlinux

	cp System.map $(INSTALL_PATH)/System.map



zImage compressed: vmlinux.gz



else

	$(KGZIP) -9c vmlinux >vmlinux.gz

endif

bzImage: vmlinux.bz2

vmlinux.bz2: vmlinux

ifndef CONFIG_KGDB

	cp vmlinux vmlinux.tmp

	$(STRIP) vmlinux.tmp

	$(KBZIP2) -1c vmlinux.tmp >vmlinux.bz2

	rm vmlinux.tmp



CLEAN_FILES += vmlinux.gz vmlinux.bz2

archheaders:

	$(Q)$(MAKE) $(build)=arch/m68k/kernel/syscalls all

install:

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Linux arch/m68k/mac source directory





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#

asflags-y := -DFPU_EMU_DEBUG

ccflags-y := -DFPU_EMU_DEBUG



obj-y		:= fp_entry.o fp_scan.o fp_util.o fp_move.o fp_movem.o \

# SPDX-License-Identifier: GPL-2.0



# Makefile for 68000 core based cpus

#

# 2012.10.21, Luis Alves <ljalvs@gmail.com>

#             Merged all 68000 based cpu's config

             files into a single directory.





# 68328, 68EZ328, 68VZ328



obj-$(CONFIG_UCSIMM)	+= ucsimm.o



extra-y 		:= head.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Linux arch/m68k/q40 source directory





 Makefile for 680x0 Linux 68060 integer/floating point support package



# This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "README.legal" in the main directory of this archive

# for more details.

# SPDX-License-Identifier: GPL-2.0

CFLAGS =	-Wall -O2



All:		dmesg



dmesg:		dmesg.c



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Linux arch/m68k/atari source directory





obj-y		:= config.o time.o debug.o ataints.o stdma.o \

			atasound.o stram.o



obj-$(CONFIG_NVRAM:m=y)		+= nvram.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Linux arch/m68k/apollo source directory

#

obj-y		:= config.o dn_ints.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Linux arch/m68k/sun3x source directory





obj-y		:= config.o time.o dvma.o prom.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Linux arch/m68k/mvme16x source directory





# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the linux m68k-specific parts of the memory manager.

#



obj-$(CONFIG_MMU)		+= cache.o fault.o

obj-$(CONFIG_MMU_MOTOROLA)	+= kmap.o memory.o motorola.o hwtest.o

obj-$(CONFIG_MMU_COLDFIRE)	+= kmap.o memory.o mcfmmu.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





extra-$(CONFIG_AMIGA)	:= head.o

extra-$(CONFIG_ATARI)	:= head.o

extra-$(CONFIG_MAC)	:= head.o

extra-y			+= vmlinux.lds

obj-y	:= entry.o irq.o module.o process.o ptrace.o



obj-$(CONFIG_MMU_SUN3) += ints.o vectors.o





obj-$(CONFIG_KEXEC)		+= machine_kexec.o relocate_kernel.o





# SPDX-License-Identifier: GPL-2.0

kapi := arch/$(SRCARCH)/include/generated/asm



_dummy := $(shell [ -d '$(uapi)' ] || mkdir -p '$(uapi)')	\



syscall := $(src)/syscall.tbl

systbl := $(srctree)/scripts/syscalltbl.sh

      cmd_syshdr = $(CONFIG_SHELL) $(syshdr) --emit-nr $< $@

      cmd_systbl = $(CONFIG_SHELL) $(systbl) $< $@

	$(call if_changed,syshdr)

	$(call if_changed,systbl)

uapisyshdr-y		+= unistd_32.h



kapisyshdr-y	:= $(addprefix $(kapi)/, $(kapisyshdr-y))



all: $(uapisyshdr-y) $(kapisyshdr-y)

	@:

# SPDX-License-Identifier: GPL-2.0



# Makefile for m68k-specific library files..

#



lib-$(CONFIG_CPU_HAS_NO_MULDIV64) += mulsi3.o divsi3.o udivsi3.o

lib-$(CONFIG_CPU_HAS_NO_MULDIV64) += modsi3.o umodsi3.o

ifndef CONFIG_GENERIC_CSUM

lib-y	+= checksum.o

endif

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Linux arch/m68k/amiga source directory







# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the m68knommu kernel.





#

# If you want to play with the HW breakpoints then you will

# need to add define this,  which will give you a stack backtrace

 on the console port whenever a DBG interrupt occurs. You have to

 set up you HW breakpoints to trigger a DBG interrupt:



 ccflags-y := -DTRAP_DBG_INTERRUPT

 asflags-y := -DTRAP_DBG_INTERRUPT







obj-$(CONFIG_M5206e)	+= m5206.o intc.o reset.o

obj-$(CONFIG_M5272)	+= m5272.o intc-5272.o

obj-$(CONFIG_M528x)	+= m528x.o intc-2.o reset.o

obj-$(CONFIG_M5307)	+= m5307.o intc.o reset.o

obj-$(CONFIG_M5441x)	+= m5441x.o intc-simr.o reset.o

obj-$(CONFIG_COLDFIRE_TIMERS)	 += timers.o



obj-$(CONFIG_FIREBEE)	+= firebee.o

obj-$(CONFIG_AMCORE)	+= amcore.o





obj-y			+= gpio.o

extra-y := head.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Linux arch/m68k/sun3 source directory

#



obj-$(CONFIG_SUN3) += config.o mmu_emu.o leds.o dvma.o intersil.o prom/

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for the Sun Boot PROM interface library under

 Linux.





bootstr.o init.o misc.o segment.o console.o printf.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Linux arch/m68k/emu source directory







obj-$(CONFIG_NFCON)	+= nfcon.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Linux arch/m68k/hp300 source directory





 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Linux arch/m68k/mvme147 source directory





# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Linux arch/m68k/fpsp040 source directory

#

obj-y    := bindec.o binstr.o decbin.o do_func.o gen_except.o get_op.o \

	    scosh.o setox.o sgetem.o sint.o slog2.o slogn.o \

	    smovecr.o srem_mod.o scale.o \

	    ssin.o ssinh.o stan.o stanh.o sto_res.o stwotox.o tbldo.o util.o \

	    x_bsun.o x_fline.o x_operr.o x_ovfl.o x_snan.o x_store.o \

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Linux arch/m68k/bvme6000 source directory

#

obj-y		:= config.o rtc.o

# SPDX-License-Identifier: GPL-2.0

KBUILD_DEFCONFIG := mmu_defconfig



# What CPU version are we building for, and crack it open

 as major.minor.rev

CPU_VER   := $(shell echo $(CONFIG_XILINX_MICROBLAZE0_HW_VER))

CPU_MAJOR := $(shell echo $(CPU_VER) | cut -d '.' -f 1)

CPU_MINOR := $(shell echo $(CPU_VER) | cut -d '.' -f 2)

CPU_REV   := $(shell echo $(CPU_VER) | cut -d '.' -f 3)

export CPU_VER CPU_MAJOR CPU_MINOR CPU_REV

# Use cpu-related CONFIG_ vars to set compile options.

 The various CONFIG_XILINX cpu features options are integers 0/1/2...

 rather than bools y/n



 Work out HW multipler support. This is tricky.

# 1. Spartan2 has no HW multipliers.

 2. MicroBlaze v3.x always uses them, except in Spartan 2

 3. All other FPGa/CPU ver combos, we can trust the CONFIG_ settings

ifeq (,$(findstring spartan2,$(CONFIG_XILINX_MICROBLAZE0_FAMILY)))

  ifeq ($(CPU_MAJOR),3)

  else

    # USE_HW_MUL can be 0, 1, or 2, defining a hierarchy of HW Mul support.

    CPUFLAGS-$(CONFIG_XILINX_MICROBLAZE0_USE_HW_MUL) += -mno-xl-soft-mul

  endif

endif

CPUFLAGS-$(CONFIG_XILINX_MICROBLAZE0_USE_DIV) += -mno-xl-soft-div

CPUFLAGS-$(CONFIG_XILINX_MICROBLAZE0_USE_BARREL) += -mxl-barrel-shift



ifdef CONFIG_CPU_BIG_ENDIAN

KBUILD_CFLAGS += -mbig-endian

KBUILD_AFLAGS += -mbig-endian

KBUILD_LDFLAGS += -EB

KBUILD_CFLAGS += -mlittle-endian



CPUFLAGS-1 += $(call cc-option,-mcpu=v$(CPU_VER))

 r31 holds current when in kernel mode

KBUILD_CFLAGS += -ffixed-r31 $(CPUFLAGS-y) $(CPUFLAGS-1) $(CPUFLAGS-2)

libs-y += arch/microblaze/lib/

boot := arch/microblaze/boot

# Are we making a simpleImage.<boardname> target? If so, crack out the boardname









linux.bin.ub linux.bin.gz: linux.bin

linux.bin linux.bin.gz linux.bin.ub:

'`cat .version`')'



PHONY += simpleImage.$(DTB)

simpleImage.$(DTB): vmlinux

'`cat .version`')'



define archhelp

  echo '* linux.bin    - Create raw binary'

  echo '  linux.bin.ub - Create U-Boot wrapped raw binary'

  echo '  simpleImage.<dt> - Create the following images with <dt>.dtb linked in'

  echo '  Targets with <dt> embed a device tree blob inside the image'

  echo '  support passing a device tree directly. Replace <dt> with the'

  echo '  (minus the .dts extension).'

endef

 SPDX-License-Identifier: GPL-2.0-only



# Makefile

#

obj-y := consistent.o init.o pgtable.o mmu_context.o fault.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile





 Do not trace early boot code and low level code

CFLAGS_REMOVE_intc.o = -pg

CFLAGS_REMOVE_ftrace.o = -pg

CFLAGS_REMOVE_process.o = -pg

endif



obj-y += dma.o exceptions.o \

	hw_exception_handler.o irq.o \



obj-y += cpu/

obj-y				+= misc.o

obj-$(CONFIG_FUNCTION_TRACER)	+= ftrace.o mcount.o

obj-$(CONFIG_KGDB)		+= kgdb.o

obj-y	+= entry.o

# SPDX-License-Identifier: GPL-2.0

kapi := arch/$(SRCARCH)/include/generated/asm



_dummy := $(shell [ -d '$(uapi)' ] || mkdir -p '$(uapi)')	\



syscall := $(src)/syscall.tbl

systbl := $(srctree)/scripts/syscalltbl.sh

      cmd_syshdr = $(CONFIG_SHELL) $(syshdr) --emit-nr $< $@

      cmd_systbl = $(CONFIG_SHELL) $(systbl) $< $@

	$(call if_changed,syshdr)

	$(call if_changed,systbl)

uapisyshdr-y		+= unistd_32.h



kapisyshdr-y	:= $(addprefix $(kapi)/, $(kapisyshdr-y))



all: $(uapisyshdr-y) $(kapisyshdr-y)

	@:

# SPDX-License-Identifier: GPL-2.0

#

# Build the appropriate CPU version support

#

ifdef CONFIG_FUNCTION_TRACER

CFLAGS_REMOVE_cache.o = -pg

endif

ccflags-y := -DCPU_MAJOR=$(CPU_MAJOR) -DCPU_MINOR=$(CPU_MINOR) \



obj-y += cache.o cpuinfo.o cpuinfo-pvr-full.o cpuinfo-static.o mb.o pvr.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile









else

lib-y += memcpy.o memmove.o

endif

lib-y += uaccess_old.o

 libgcc-style stuff needed in the kernel

obj-y += muldi3.o mulsi3.o ucmpdi2.o udivsi3.o umodsi3.o

# SPDX-License-Identifier: GPL-2.0

#

# arch/microblaze/boot/Makefile

#

targets := linux.bin linux.bin.gz linux.bin.ub simpleImage.*

OBJCOPYFLAGS := -R .note -R .comment -R .note.gnu.build-id -O binary



$(obj)/linux.bin.ub: $(obj)/linux.bin FORCE



$(obj)/linux.bin.gz: $(obj)/linux.bin FORCE



quiet_cmd_strip = STRIP   $< $@$2

				-K _fdt_start $< -o $@$2

UIMAGE_LOADADDR = $(CONFIG_KERNEL_BASE_ADDR)

$(obj)/simpleImage.$(DTB): vmlinux FORCE

	$(call if_changed,objcopy)

	$(call if_changed,uimage)

$(obj)/simpleImage.$(DTB).unstrip: vmlinux FORCE

	$(call if_changed,shipped)

$(obj)/simpleImage.$(DTB).strip: vmlinux FORCE

	$(call if_changed,strip)

# SPDX-License-Identifier: GPL-2.0

#



ifneq ($(DTB),)

obj-y += linked_dtb.o

# Ensure system.dtb exists



# Generate system.dtb from $(DTB).dtb

ifneq ($(DTB),system)



# Rule to build device tree blobs

 SPDX-License-Identifier: GPL-2.0-only



# Makefile

#

obj-$(CONFIG_PCI_XILINX)	+= xilinx_pci.o

# SPDX-License-Identifier: GPL-2.0

#

 sparc/Makefile



 Makefile for the architecture dependent flags and dependencies on the

# Sparc and sparc64.

#

# Copyright (C) 1994,1996,1998 David S. Miller (davem@caip.rutgers.edu)

 Copyright (C) 1998 Jakub Jelinek (jj@ultra.linux.cz)



# We are not yet configured - so test on arch

else

        KBUILD_DEFCONFIG := sparc32_defconfig

endif

ifeq ($(CONFIG_SPARC32),y)

#####

# sparc32

#

KBUILD_LDFLAGS := -m elf32_sparc



 We are adding -Wa,-Av8 to KBUILD_CFLAGS to deal with a specs bug in some

# versions of gcc.  Some gcc versions won't pass -Av8 to binutils when you

 give -mcpu=v8.  This silently worked with older bintutils versions but

# does not any more.

KBUILD_CFLAGS  += -Wa,-Av8





 sparc64





KBUILD_LDFLAGS := -m elf64_sparc

export BITS   := 64



KBUILD_CFLAGS += -m64 -pipe -mno-fpu -mcpu=ultrasparc -mcmodel=medlow

KBUILD_CFLAGS += -ffixed-g4 -ffixed-g5 -fcall-used-g7 -Wno-sign-compare

KBUILD_AFLAGS += -m64 -mcpu=ultrasparc -Wa,--undeclared-regs

  KBUILD_CFLAGS += -pg

endif







drivers-$(CONFIG_PM) += arch/sparc/power/



 Default target



	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@

install:

		System.map "$(INSTALL_PATH)"

archheaders:



PHONY += vdso_install

vdso_install:



 This is the image used for packaging

KBUILD_IMAGE := $(boot)/zImage

 Don't use tabs in echo arguments.

ifeq ($(ARCH),sparc)

define archhelp

  echo  '* image        - kernel image ($(boot)/image)'

  echo  '* zImage       - stripped kernel image ($(boot)/zImage)'

  echo  '  uImage       - U-Boot SPARC32 Image (only for LEON)'

else

define archhelp

  echo  '* zImage       - stripped and compressed sparc64 kernel ($(boot)/zImage)'

  echo  '  vmlinux.aout - a.out kernel for sparc64'

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the FPU instruction emulation.





# suppress all warnings - as math.c produces a lot!

ccflags-y := -w

obj-y    := math_$(BITS).o

# SPDX-License-Identifier: GPL-2.0

 Makefile for the linux Sparc-specific parts of the memory manager.





ccflags-y := -Werror

obj-$(CONFIG_SPARC64)   += ultra.o tlb.o tsb.o

obj-$(CONFIG_SPARC32)   += srmmu.o iommu.o io-unit.o

obj-$(CONFIG_SPARC32)   += srmmu_access.o

obj-$(CONFIG_SPARC32)   += leon_mm.o

# Only used by sparc64

obj-$(CONFIG_HUGETLB_PAGE) += hugetlbpage.o

# SPDX-License-Identifier: GPL-2.0



# Makefile for the linux kernel.

#

asflags-y := -ansi



extra-y     := head_$(BITS).o

 Undefine sparc when processing vmlinux.lds - it is used

 And teach CPP we are doing $(BITS) builds (for this case)



 Do not profile debug and lowlevel utilities

CFLAGS_REMOVE_pcr.o := -pg

endif

obj-$(CONFIG_SPARC64)   += urtt_fill.o

obj-y                   += traps_$(BITS).o

 IRQ

obj-y                   += irq_$(BITS).o



obj-y                   += process.o

obj-y                   += signal_$(BITS).o

obj-y                   += setup_$(BITS).o

obj-y                   += idprom.o

obj-$(CONFIG_SPARC32)   += windows.o

obj-$(CONFIG_SPARC32)   += devices.o

obj-y                   += ptrace_$(BITS).o

obj-y                   += una_asm_$(BITS).o

obj-y                   += of_device_$(BITS).o





obj-$(CONFIG_SPARC64)   += reboot.o

obj-$(CONFIG_SPARC64)   += central.o

obj-$(CONFIG_SPARC64)   += starfire.o

obj-$(CONFIG_SPARC64)   += visemul.o

obj-$(CONFIG_SPARC64)   += mdesc.o

obj-$(CONFIG_SPARC64)   += adi_64.o

obj-$(CONFIG_SPARC64)	+= nmi.o

obj-$(CONFIG_SPARC64_SMP) += cpumap.o

obj-$(CONFIG_SPARC_GRPCI2)+= leon_pci_grpci2.o



obj-$(CONFIG_SMP)         += trampoline_$(BITS).o smp_$(BITS).o

obj-$(CONFIG_SPARC32_SMP) += sun4m_smp.o sun4d_smp.o leon_smp.o



obj-$(CONFIG_SUN_PM)      += apc.o pmc.o

obj-$(CONFIG_MODULES)     += sparc_ksyms.o



obj-$(CONFIG_DYNAMIC_FTRACE) += ftrace.o

obj-$(CONFIG_FUNCTION_GRAPH_TRACER) += ftrace.o

obj-$(CONFIG_EARLYFB) += btext.o

 sparc64 PCI

obj-$(CONFIG_SPARC64_PCI)    += pci.o pci_common.o psycho_common.o

obj-$(CONFIG_SPARC64_PCI)    += pci_psycho.o pci_sabre.o pci_schizo.o

obj-$(CONFIG_SPARC64_PCI_MSI) += pci_msi.o

obj-$(CONFIG_COMPAT)         += sys32.o sys_sparc32.o signal32.o





obj-$(CONFIG_COMPAT)    += $(audit--y)



obj-$(CONFIG_JUMP_LABEL) += jump_label.o

# SPDX-License-Identifier: GPL-2.0

kapi := arch/$(SRCARCH)/include/generated/asm



_dummy := $(shell [ -d '$(uapi)' ] || mkdir -p '$(uapi)')	\



syscall := $(src)/syscall.tbl

systbl := $(srctree)/scripts/syscalltbl.sh



quiet_cmd_systbl = SYSTBL  $@

      cmd_systbl = $(CONFIG_SHELL) $(systbl) --abis common,$* $< $@

$(uapi)/unistd_%.h: $(syscall) $(syshdr) FORCE



$(kapi)/syscall_table_%.h: $(syscall) $(systbl) FORCE



kapisyshdr-y		+= syscall_table_32.h		\



kapisyshdr-y	:= $(addprefix $(kapi)/, $(kapisyshdr-y))



all: $(uapisyshdr-y) $(kapisyshdr-y)

	@:

 SPDX-License-Identifier: GPL-2.0-only



 Building vDSO images for sparc.





VDSO64-$(CONFIG_SPARC64)	:= y



# files to link into the vdso

vobjs-y := vdso-note.o vclock_gettime.o

 files to link into kernel



 vDSO images to build

vdso_img-$(VDSOCOMPAT-y)	+= 32

vobjs := $(foreach F,$(vobjs-y),$(obj)/$F)





 Build the vDSO image C files and link them in.

vdso_img_sodbg := $(vdso_img-y:%=vdso%.so.dbg)

obj-y += $(vdso_img_objs)

targets += $(vdso_img_cfiles)

targets += $(vdso_img_sodbg) $(vdso_img-y:%=vdso%.so)

CPPFLAGS_vdso.lds += -P -C

			-z max-page-size=8192

$(obj)/vdso64.so.dbg: $(obj)/vdso.lds $(vobjs) FORCE





quiet_cmd_vdso2c = VDSO2C  $@

      cmd_vdso2c = $(obj)/vdso2c $< $(<:%.dbg=%) $@

$(obj)/vdso-image-%.c: $(obj)/vdso%.so.dbg $(obj)/vdso%.so $(obj)/vdso2c FORCE



#

# Don't omit frame pointers for ease of userspace debugging, but do

# optimize sibling calls.

#

CFL := $(PROFILING) -mcmodel=medlow -fPIC -O2 -fasynchronous-unwind-tables -m64 \

       -DDISABLE_BRANCH_PROFILING -DBUILD_VDSO

SPARC_REG_CFLAGS = -ffixed-g4 -ffixed-g5 -fcall-used-g5 -fcall-used-g7

$(vobjs): KBUILD_CFLAGS := $(filter-out $(GCC_PLUGINS_CFLAGS) $(SPARC_REG_CFLAGS),$(KBUILD_CFLAGS)) $(CFL)



 vDSO code runs in userspace and -pg doesn't help with profiling anyway.



CFLAGS_REMOVE_vclock_gettime.o = -pg

CFLAGS_REMOVE_vdso32/vclock_gettime.o = -pg

$(obj)/%.so: $(obj)/%.so.dbg FORCE

	$(call if_changed,objcopy)

VDSO_LDFLAGS_vdso32.lds = -m elf32_sparc -soname linux-gate.so.1

This makes sure the $(obj) subdirectory exists even though vdso32/

#is not a kbuild sub-make subdirectory



targets += vdso32/vclock_gettime.o

KBUILD_AFLAGS_32 := $(filter-out -m64,$(KBUILD_AFLAGS)) -DBUILD_VDSO

$(obj)/vdso32.so.dbg: KBUILD_AFLAGS = $(KBUILD_AFLAGS_32)

$(obj)/vdso32.so.dbg: asflags-$(CONFIG_SPARC64) += -m32

KBUILD_CFLAGS_32 := $(filter-out -fno-pic,$(KBUILD_CFLAGS_32))

KBUILD_CFLAGS_32 := $(filter-out $(GCC_PLUGINS_CFLAGS),$(KBUILD_CFLAGS_32))

KBUILD_CFLAGS_32 := $(filter-out $(SPARC_REG_CFLAGS),$(KBUILD_CFLAGS_32))

KBUILD_CFLAGS_32 += -m32 -msoft-float -fpic

KBUILD_CFLAGS_32 += -DDISABLE_BRANCH_PROFILING



$(obj)/vdso32.so.dbg: FORCE \

			$(obj)/vdso32/vdso32.lds \

			$(obj)/vdso32/vclock_gettime.o \



#

# The DSO images are built using a special linker script.

#

quiet_cmd_vdso = VDSO    $@

		       $(VDSO_LDFLAGS) $(VDSO_LDFLAGS_$(filter %.lds,$(^F))) \

		sh $(srctree)/$(src)/checkundef.sh '$(OBJDUMP)' '$@'



#

# Install the unstripped copies of vdso*.so.  If our toolchain supports

 build-id, install .build-id links as well.



	  buildid=`readelf -n $< |grep 'Build ID' |sed -e 's/^.*Build ID: \(.*\)$$/\1/'`; \

	  first=`echo $$buildid | cut -b-2`; \



vdso_img_insttargets := $(vdso_img_sodbg:%.dbg=install_%)



$(vdso_img_insttargets): install_%: $(obj)/%.dbg $(MODLIB)/vdso FORCE

	$(call cmd,vdso_install)

# SPDX-License-Identifier: GPL-2.0

 Makefile for Sparc library files..





asflags-y := -ansi -DST_DIV0=0x02



lib-$(CONFIG_SPARC32) += memcpy.o memset.o

lib-y                 += strlen.o

lib-y                 += checksum_$(BITS).o

lib-$(CONFIG_SPARC32) += blockops.o

lib-y                 += memscan_$(BITS).o memcmp.o strncmp_$(BITS).o

lib-$(CONFIG_SPARC32) += divdi3.o udivdi3.o

lib-$(CONFIG_SPARC64) += atomic_64.o

lib-$(CONFIG_SPARC64) += fls.o



lib-$(CONFIG_SPARC64) += copy_page.o clear_page.o bzero.o

lib-$(CONFIG_SPARC64) += VISsave.o

lib-$(CONFIG_SPARC64) += bitops.o



lib-$(CONFIG_SPARC64) += U3memcpy.o U3copy_from_user.o U3copy_to_user.o



lib-$(CONFIG_SPARC64) += NGmemcpy.o NGcopy_from_user.o NGcopy_to_user.o

lib-$(CONFIG_SPARC64) += NGpatch.o NGpage.o NGbzero.o

lib-$(CONFIG_SPARC64) += NG2memcpy.o NG2copy_from_user.o NG2copy_to_user.o





lib-$(CONFIG_SPARC64) += Memcpy_utils.o



lib-$(CONFIG_SPARC64) += GENpatch.o GENpage.o GENbzero.o

lib-$(CONFIG_SPARC64) += mcount.o ipcsum.o xor.o hweight.o ffs.o

obj-$(CONFIG_SPARC64) += iomap.o

obj-$(CONFIG_SPARC32) += atomic32.o ucmpdi2.o

# SPDX-License-Identifier: GPL-2.0

 Makefile for the Sun Boot PROM interface library under

# Linux.

#

ccflags := -Werror

lib-y                 := bootstr_$(BITS).o

lib-y                 += init_$(BITS).o

lib-$(CONFIG_SPARC32) += memory.o

lib-y                 += misc_$(BITS).o

lib-$(CONFIG_SPARC32) += mp.o

lib-$(CONFIG_SPARC32) += ranges.o

lib-$(CONFIG_SPARC64) += p1275.o

 SPDX-License-Identifier: GPL-2.0-only



 Arch-specific network modules



# SPDX-License-Identifier: GPL-2.0

 Makefile for the Sparc boot stuff.



 Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 Copyright (C) 1997,1998 Jakub Jelinek (jj@ultra.linux.cz)



ROOT_IMG	:= /usr/src/root.img



targets		:= tftpboot.img image zImage vmlinux.aout

clean-files	:= System.map

quiet_cmd_elftoaout	= ELFTOAOUT $@

      cmd_elftoaout	= $(ELFTOAOUT) $(obj)/image -o $@

quiet_cmd_piggy		= PIGGY   $@

      cmd_piggy		= $(obj)/piggyback $(BITS) $@ System.map $(ROOT_IMG)

quiet_cmd_strip		= STRIP   $@

      cmd_strip		= $(STRIP) -R .comment -R .note -K sun4u_init -K _end -K _start $< -o $@

ifeq ($(CONFIG_SPARC64),y)

# Actual linking

	$(call if_changed,gzip)



	@echo '  kernel: $@ is ready'



$(obj)/zImage: $(obj)/image FORCE

	$(call if_changed,strip)



# The following lines make a readable image for U-Boot.

  uImage   - Binary file read by U-boot

#  uImage.o - object file of uImage for loading with a

#             flash programmer understanding ELF.

$(obj)/image.bin: $(obj)/image FORCE

	$(call if_changed,objcopy)

	$(call if_changed,gzip)



      cmd_uimage.o = $(LD) -Tdata $(CONFIG_UBOOT_FLASH_ADDR) \



targets += uImage

	$(call if_changed,uimage)

	@echo '  Image $@ is ready'



$(obj)/image: vmlinux FORCE

	$(call if_changed,strip)



$(obj)/tftpboot.img: $(obj)/image $(obj)/piggyback System.map $(ROOT_IMG) FORCE

	$(call if_changed,elftoaout)

	$(call if_changed,piggy)

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for Sparc-specific hibernate files.

obj-$(CONFIG_HIBERNATION)	+= hibernate.o hibernate_asm.o

# SPDX-License-Identifier: GPL-2.0

#

 Arch-specific CryptoAPI modules.





obj-$(CONFIG_CRYPTO_SHA1_SPARC64) += sha1-sparc64.o

obj-$(CONFIG_CRYPTO_SHA256_SPARC64) += sha256-sparc64.o

obj-$(CONFIG_CRYPTO_SHA512_SPARC64) += sha512-sparc64.o

obj-$(CONFIG_CRYPTO_MD5_SPARC64) += md5-sparc64.o



obj-$(CONFIG_CRYPTO_CRC32C_SPARC64) += crc32c-sparc64.o

sha1-sparc64-y := sha1_asm.o sha1_glue.o

sha512-sparc64-y := sha512_asm.o sha512_glue.o

md5-sparc64-y := md5_asm.o md5_glue.o

camellia-sparc64-y := camellia_asm.o camellia_glue.o

crc32c-sparc64-y := crc32c_asm.o crc32c_glue.o

# BK Id: %F% %I% %G% %U% %#%

#

# This file is included by the global makefile so that you can add your own

# architecture-specific flags and dependencies.

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

 Copyright (C) 1994 by Linus Torvalds

# Modifications for the OpenRISC architecture:

 Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>



 Based on:

# arch/i386/Makefile









boot := arch/$(ARCH)/boot

	KBUILD_CFLAGS += $(call cc-option,-mhard-mul)

	KBUILD_CFLAGS += $(call cc-option,-msoft-mul)

endif

	KBUILD_CFLAGS += $(call cc-option,-mhard-div)

	KBUILD_CFLAGS += $(call cc-option,-msoft-div)

endif







	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the linux openrisc-specific parts of the memory manager.





obj-y	:= fault.o cache.o tlb.o init.o ioremap.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





extra-y	:= head.o vmlinux.lds

	   traps.o time.o irq.o entry.o ptrace.o signal.o \

	   sys_call_table.o unwinder.o

obj-$(CONFIG_SMP)		+= smp.o sync-timer.o

obj-$(CONFIG_MODULES)		+= module.o

obj-$(CONFIG_OF)		+= prom.o

clean:

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for or1k specific library files..

#

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for bootable kernel images

#

targets += vmlinux.bin

# SPDX-License-Identifier: GPL-2.0

ifneq '$(CONFIG_OPENRISC_BUILTIN_DTB)' '""'

BUILTIN_DTB := $(patsubst "%",%,$(CONFIG_OPENRISC_BUILTIN_DTB)).dtb.o

BUILTIN_DTB :=

endif

obj-y += $(BUILTIN_DTB)

DTC_FLAGS ?= -p 1024

# SPDX-License-Identifier: GPL-2.0

#

# s390/Makefile

#

# This file is included by the global makefile so that you can add your own

# architecture-specific flags and dependencies.

#

 Copyright (C) 1994 by Linus Torvalds





LD_BFD		:= elf64-s390

KBUILD_LDFLAGS	:= -m elf64_s390

KBUILD_AFLAGS_MODULE += -fPIC

KBUILD_CFLAGS_MODULE += -fPIC

KBUILD_AFLAGS	+= -m64

KBUILD_CFLAGS	+= -m64

KBUILD_CFLAGS	+= -fPIE

LDFLAGS_vmlinux	:= -pie

endif

aflags_dwarf	:= -Wa,-gdwarf-2

KBUILD_AFLAGS_DECOMPRESSOR += $(if $(CONFIG_DEBUG_INFO),$(aflags_dwarf))

KBUILD_CFLAGS_DECOMPRESSOR := $(CLANG_FLAGS) -m64 -O2

KBUILD_CFLAGS_DECOMPRESSOR += -DDISABLE_BRANCH_PROFILING -D__NO_FORTIFY

KBUILD_CFLAGS_DECOMPRESSOR += -ffreestanding

KBUILD_CFLAGS_DECOMPRESSOR += $(call cc-disable-warning, address-of-packed-member)

KBUILD_CFLAGS_DECOMPRESSOR += $(if $(CONFIG_DEBUG_INFO),-g)

UTS_MACHINE	:= s390x

STACK_SIZE	:= $(if $(CONFIG_KASAN),65536,16384)



export LD_BFD

mflags-$(CONFIG_MARCH_Z900)   := -march=z900

mflags-$(CONFIG_MARCH_Z9_109) := -march=z9-109

mflags-$(CONFIG_MARCH_Z10)    := -march=z10





aflags-y += $(mflags-y)

cflags-y += $(mflags-y)

cflags-$(CONFIG_MARCH_Z10_TUNE)		+= -mtune=z10

cflags-$(CONFIG_MARCH_Z196_TUNE)	+= -mtune=z196

cflags-$(CONFIG_MARCH_ZEC12_TUNE)	+= -mtune=zEC12

cflags-$(CONFIG_MARCH_Z14_TUNE)		+= -mtune=z14



cflags-y += -Wa,-I$(srctree)/arch/$(ARCH)/include



 Prevent tail-call optimizations, to get clearer backtraces:





aflags-$(CONFIG_PACK_STACK)  += -D__PACK_STACK

endif



  CC_FLAGS_CHECK_STACK := -mstack-size=$(STACK_SIZE)

  ifeq ($(call cc-option,-mstack-size=8192),)

    CC_FLAGS_CHECK_STACK += -mstack-guard=$(CONFIG_STACK_GUARD)

  endif

  export CC_FLAGS_CHECK_STACK

  cflags-$(CONFIG_CHECK_STACK) += $(CC_FLAGS_CHECK_STACK)

endif

  ifneq ($(call cc-option,$(CC_FLAGS_MARCH) -mindirect-branch=thunk),)

    CC_FLAGS_EXPOLINE += -mfunction-return=thunk

    export CC_FLAGS_EXPOLINE



    # make use of hotpatch feature if the compiler supports it

    cc_hotpatch	:= -mhotpatch=0,3

    ifneq ($(call cc-option,$(cc_hotpatch)),)

      CC_FLAGS_FTRACE := $(cc_hotpatch)

      KBUILD_CFLAGS	+= -DCC_USING_HOTPATCH

    endif

  endif

endif

 Test CFI features of binutils



KBUILD_CFLAGS	+= -mbackchain -msoft-float $(cflags-y)



OBJCOPYFLAGS	:= -O binary

head-y		:= arch/s390/kernel/head64.o

drivers-y	+= drivers/s390/





#KBUILD_IMAGE is necessary for packaging targets like rpm-pkg, deb-pkg...

KBUILD_IMAGE	:= $(boot)/bzImage

install:

	sh -x $(srctree)/$(boot)/install.sh $(KERNELRELEASE) $(KBUILD_IMAGE) \

	      System.map "$(INSTALL_PATH)"

bzImage: vmlinux



zfcpdump:



vdso_install:

	$(Q)$(MAKE) $(build)=arch/$(ARCH)/kernel/vdso64 $@

archheaders:



	$(Q)$(MAKE) $(build)=$(syscalls) kapi

	$(Q)$(MAKE) $(build)=$(tools) kapi

 We need to generate vdso-offsets.h before compiling certain files in kernel/.

 In order to do that, we should use the archprepare target, but we can't since

# asm-offsets.h is included in some files used to generate vdso-offsets.h, and

 asm-offsets.h is built in prepare0, for which archprepare is a dependency.

# Therefore we need to generate the header after prepare0 has been made, hence

 this hack.

vdso_prepare: prepare0

	$(if $(CONFIG_COMPAT),$(Q)$(MAKE) \



 Don't use tabs in echo arguments

  echo	'                    install to $$(INSTALL_PATH)'

endef

# SPDX-License-Identifier: GPL-2.0

 Makefile for kernel virtual machines on s390



# Copyright IBM Corp. 2008

KVM := ../../../virt/kvm

common-objs = $(KVM)/kvm_main.o $(KVM)/eventfd.o  $(KVM)/async_pf.o \

	      $(KVM)/irqchip.o $(KVM)/vfio.o $(KVM)/binary_stats.o



kvm-objs := $(common-objs) kvm-s390.o intercept.o interrupt.o priv.o sigp.o

kvm-objs += diag.o gaccess.o guestdbg.o vsie.o pv.o

obj-$(CONFIG_KVM) += kvm.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for s390 specific build tools







PHONY += kapi

kapi:	$(kapi-hdrs-y)

hostprogs		    += gen_facilities





filechk_facility-defs.h = $(obj)/gen_facilities

filechk_dis-defs.h = \



	$(call filechk,facility-defs.h)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the linux s390-specific parts of the memory manager.

#

obj-y		+= page-states.o pageattr.o pgtable.o pgalloc.o

obj-$(CONFIG_PTDUMP_CORE)	+= dump_pagetables.o



obj-$(CONFIG_KASAN)		+= kasan_init.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.







 Do not trace tracer code

CFLAGS_REMOVE_ftrace.o		= $(CC_FLAGS_FTRACE)

 Do not trace early setup code



endif

GCOV_PROFILE_early.o		:= n

KCOV_INSTRUMENT_early.o		:= n

KASAN_SANITIZE_ipl.o		:= n

KASAN_SANITIZE_machine_kexec.o	:= n



 Passing null pointers is ok for smp code, since we access the lowcore here.





#

 Disable tailcall optimizations for stack / callchain walking functions

# since this might generate broken code when accessing register 15 and

# passing its content to other functions.

#



obj-y	:= traps.o time.o process.o base.o early.o setup.o idle.o vtime.o

obj-y	+= processor.o syscall.o ptrace.o signal.o cpcmd.o ebcdic.o nmi.o

obj-y	+= sysinfo.o lgr.o os_info.o machine_kexec.o







obj-$(CONFIG_SCHED_TOPOLOGY)	+= topology.o

obj-$(CONFIG_NUMA)		+= numa.o

obj-$(CONFIG_AUDIT)		+= audit.o

obj-$(CONFIG_COMPAT)		+= $(compat-obj-y)

obj-$(CONFIG_STACKTRACE)	+= stacktrace.o

obj-$(CONFIG_KPROBES)		+= kprobes.o

obj-$(CONFIG_KPROBES)		+= kprobes_insn_page.o

obj-$(CONFIG_CRASH_DUMP)	+= crash_dump.o

obj-$(CONFIG_UPROBES)		+= uprobes.o







obj-$(CONFIG_PERF_EVENTS)	+= perf_event.o perf_cpum_cf_common.o

obj-$(CONFIG_PERF_EVENTS)	+= perf_cpum_cf_events.o perf_regs.o

obj-$(CONFIG_TRACEPOINTS)	+= trace.o

obj-$(findstring y, $(CONFIG_PROTECTED_VIRTUALIZATION_GUEST) $(CONFIG_PGSTE))	+= uv.o

# vdso

obj-y				+= vdso64/

# SPDX-License-Identifier: GPL-2.0

# List of files in the vdso

KCOV_INSTRUMENT := n

ARCH_REL_TYPE_ABS += R_390_GOT|R_390_PLT

include $(srctree)/lib/vdso/Makefile

obj-vdso32 = vdso_user_wrapper-32.o note-32.o

 Build rules





KBUILD_AFLAGS += -DBUILD_VDSO



KBUILD_AFLAGS_32 := $(filter-out -m64,$(KBUILD_AFLAGS))

KBUILD_AFLAGS_32 += -m31 -s



	--hash-style=both --build-id=sha1 -melf_s390 -T

$(targets:%=$(obj)/%.dbg): KBUILD_CFLAGS = $(KBUILD_CFLAGS_32)



obj-y += vdso32_wrapper.o

targets += vdso32.lds



# Disable gcov profiling, ubsan and kasan for VDSO code

GCOV_PROFILE := n

UBSAN_SANITIZE := n

KASAN_SANITIZE := n

KCSAN_SANITIZE := n

# Force dependency (incbin is bad)



$(obj)/vdso32.so.dbg: $(src)/vdso32.lds $(obj-vdso32) FORCE



# strip rule for the .so file

$(obj)/%.so: OBJCOPYFLAGS := -S



	$(call if_changed_dep,vdso32as)

 actual build commands



 install commands for the unstripped file



vdso32.so: $(obj)/vdso32.so.dbg

	@mkdir -p $(MODLIB)/vdso

	$(call cmd,vdso_install)



# Generate VDSO offsets using helper script

quiet_cmd_vdsosym = VDSOSYM $@

	cmd_vdsosym = $(NM) $< | $(gen-vdsosym) | LC_ALL=C sort > $@

include/generated/vdso32-offsets.h: $(obj)/vdso32.so.dbg FORCE

	$(call if_changed,vdsosym)

# SPDX-License-Identifier: GPL-2.0

# List of files in the vdso

KCOV_INSTRUMENT := n

ARCH_REL_TYPE_ABS += R_390_GOT|R_390_PLT

include $(srctree)/lib/vdso/Makefile

obj-vdso64 = vdso_user_wrapper.o note.o

obj-cvdso64 = vdso64_generic.o getcpu.o

VDSO_CFLAGS_REMOVE := -pg $(CC_FLAGS_FTRACE) $(CC_FLAGS_EXPOLINE) $(CC_FLAGS_CHECK_STACK)

CFLAGS_REMOVE_vdso64_generic.o = $(VDSO_CFLAGS_REMOVE)

 Build rules



targets := $(obj-vdso64) $(obj-cvdso64) vdso64.so vdso64.so.dbg

obj-vdso64 := $(addprefix $(obj)/, $(obj-vdso64))

obj-cvdso64 := $(addprefix $(obj)/, $(obj-cvdso64))

KBUILD_CFLAGS += -DBUILD_VDSO -DDISABLE_BRANCH_PROFILING



KBUILD_CFLAGS_64 := $(filter-out -m64,$(KBUILD_CFLAGS))

KBUILD_CFLAGS_64 += -m64 -fPIC -shared -fno-common -fno-builtin

	     --hash-style=both --build-id=sha1 -T

$(targets:%=$(obj)/%.dbg): KBUILD_CFLAGS = $(KBUILD_CFLAGS_64)



obj-y += vdso64_wrapper.o

targets += vdso64.lds



# Disable gcov profiling, ubsan and kasan for VDSO code

GCOV_PROFILE := n

UBSAN_SANITIZE := n

KASAN_SANITIZE := n

KCSAN_SANITIZE := n

# Force dependency (incbin is bad)



 link rule for the .so file, .lds has to be first

$(obj)/vdso64.so.dbg: $(src)/vdso64.lds $(obj-vdso64) $(obj-cvdso64) FORCE



# strip rule for the .so file

$(obj)/%.so: OBJCOPYFLAGS := -S



# assembly rules for the .S files

$(obj-vdso64): %.o: %.S FORCE



	$(call if_changed_dep,vdso64cc)

 actual build commands



 install commands for the unstripped file



vdso64.so: $(obj)/vdso64.so.dbg

	@mkdir -p $(MODLIB)/vdso

	$(call cmd,vdso_install)



# Generate VDSO offsets using helper script

quiet_cmd_vdsosym = VDSOSYM $@

	cmd_vdsosym = $(NM) $< | $(gen-vdsosym) | LC_ALL=C sort > $@

include/generated/vdso64-offsets.h: $(obj)/vdso64.so.dbg FORCE

	$(call if_changed,vdsosym)

# SPDX-License-Identifier: GPL-2.0

kapi	:= $(gen)/asm

uapi	:= $(gen)/uapi/asm

syscall	:= $(srctree)/$(src)/syscall.tbl



kapi-hdrs-y := $(kapi)/unistd_nr.h

uapi-hdrs-y += $(uapi)/unistd_64.h

targets += $(addprefix ../../../,$(gen-y) $(kapi-hdrs-y) $(uapi-hdrs-y))

PHONY += kapi uapi

uapi:	$(uapi-hdrs-y)



 Create output directory if not already present

	  $(shell [ -d '$(kapi)' ] || mkdir -p '$(kapi)')



filechk_sysnr = $(CONFIG_SHELL) '$(systbl)' -N -a $(sysnr_abi_$(basetarget)) < $<

filechk_syscalls = $(CONFIG_SHELL) '$(systbl)' -S < $<

	$(call filechk,syshdr,$@)

	$(call filechk,syshdr,$@)



sysnr_abi_unistd_nr := common,32,64

$(kapi)/unistd_nr.h: $(syscall) FORCE

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for s390-specific library files..





lib-y += delay.o string.o uaccess.o find.o spinlock.o



# Instrumenting memory accesses to __user data (in different address space)

# produce false positives

KASAN_SANITIZE_uaccess.o := n



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the linux hypfs filesystem routines.

#



# SPDX-License-Identifier: GPL-2.0

#

# Arch-specific network modules

#

obj-$(CONFIG_BPF_JIT) += bpf_jit_comp.o

obj-$(CONFIG_HAVE_PNETID) += pnet.o

# SPDX-License-Identifier: GPL-2.0

OBJECT_FILES_NON_STANDARD := y



PURGATORY_OBJS = $(addprefix $(obj)/,$(purgatory-y))









KBUILD_CFLAGS := -fno-strict-aliasing -Wall -Wstrict-prototypes



# Since we link purgatory with -r unresolved symbols are not checked, so we

 also link a purgatory.chk binary without -r to check for unresolved symbols.

PURGATORY_LDFLAGS := -nostdlib -z nodefaultlib

LDFLAGS_purgatory := -r $(PURGATORY_LDFLAGS) -T

$(obj)/purgatory: $(obj)/purgatory.lds $(PURGATORY_OBJS) FORCE

		$(call if_changed,ld)

$(obj)/purgatory.chk: $(obj)/purgatory FORCE

		$(call if_changed,ld)

OBJCOPYFLAGS_purgatory.ro := -O elf64-s390

OBJCOPYFLAGS_purgatory.ro += --remove-section='*debug*'

$(obj)/purgatory.ro: $(obj)/purgatory $(obj)/purgatory.chk FORCE





obj-$(CONFIG_ARCH_HAS_KEXEC_PURGATORY) += kexec-purgatory.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux - z/VM Monitor Stream.

#

obj-$(CONFIG_APPLDATA_BASE) += appldata_base.o

obj-$(CONFIG_APPLDATA_OS) += appldata_os.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the linux s390-specific parts of the memory manager.

#

KCOV_INSTRUMENT := n

GCOV_PROFILE := n

UBSAN_SANITIZE := n

KASAN_SANITIZE := n

KCSAN_SANITIZE := n

KBUILD_AFLAGS := $(KBUILD_AFLAGS_DECOMPRESSOR)



#

# Use minimum architecture for als.c to be able to print an error

 message if the kernel is started on a machine which is too old



else



ifneq ($(CC_FLAGS_MARCH),$(CC_FLAGS_MARCH_MINIMUM))

AFLAGS_head.o			+= $(CC_FLAGS_MARCH_MINIMUM)

AFLAGS_REMOVE_mem.o		+= $(CC_FLAGS_MARCH)

AFLAGS_mem.o			+= $(CC_FLAGS_MARCH_MINIMUM)

CFLAGS_REMOVE_als.o		+= $(CC_FLAGS_MARCH)

CFLAGS_als.o			+= $(CC_FLAGS_MARCH_MINIMUM)





obj-$(CONFIG_RELOCATABLE)	+= machine_kexec_reloc.o

obj-$(CONFIG_RANDOMIZE_BASE)	+= kaslr.o

targets	:= bzImage startup.a section_cmp.boot.data section_cmp.boot.preserved.data $(obj-y)

subdir-	:= compressed

OBJECTS := $(addprefix $(obj)/,$(obj-y))

quiet_cmd_section_cmp = SECTCMP $*

	s1=`$(OBJDUMP) -t -j "$*" "$<" | sort | \

	s2=`$(OBJDUMP) -t -j "$*" "$(word 2,$^)" | sort | \

	if [ "$$s1" != "$$s2" ]; then \

		echo "error: section $* differs between $< and $(word 2,$^)" >&2; \

		exit 1; \



$(obj)/bzImage: $(obj)/compressed/vmlinux $(obj)/section_cmp.boot.data $(obj)/section_cmp.boot.preserved.data FORCE

	$(call if_changed,objcopy)

$(obj)/section_cmp%: vmlinux $(obj)/compressed/vmlinux FORCE

	$(call if_changed,section_cmp)

	$(Q)$(MAKE) $(build)=$(obj)/compressed $@

$(obj)/startup.a: $(OBJECTS) FORCE

# SPDX-License-Identifier: GPL-2.0

#

 linux/arch/s390/boot/compressed/Makefile



 create a compressed vmlinux image from the original vmlinux







obj-y	:= $(if $(CONFIG_KERNEL_UNCOMPRESSED),,decompressor.o) info.o

obj-all := $(obj-y) piggy.o syms.o

targets	:= vmlinux.lds vmlinux vmlinux.bin vmlinux.bin.gz vmlinux.bin.bz2

targets += vmlinux.bin.zst



KBUILD_CFLAGS := $(KBUILD_CFLAGS_DECOMPRESSOR)

OBJCOPYFLAGS :=

OBJECTS := $(addprefix $(obj)/,$(obj-y))



	$(call if_changed,ld)

$(obj)/vmlinux.syms: $(obj)/vmlinux.lds $(objtree)/arch/s390/boot/startup.a $(OBJECTS) FORCE





	$(call if_changed,dumpsyms)

$(obj)/syms.o: $(obj)/syms.bin FORCE

	$(call if_changed,objcopy)

OBJCOPYFLAGS_info.bin := -O binary --only-section=.vmlinux.info --set-section-flags .vmlinux.info=load



$(obj)/info.o: $(obj)/info.bin FORCE

	$(call if_changed,objcopy)



vmlinux.bin.all-y := $(obj)/vmlinux.bin

suffix-$(CONFIG_KERNEL_GZIP)  := .gz

suffix-$(CONFIG_KERNEL_BZIP2) := .bz2

suffix-$(CONFIG_KERNEL_LZMA)  := .lzma

suffix-$(CONFIG_KERNEL_XZ)  := .xz

suffix-$(CONFIG_KERNEL_ZSTD)  := .zst

	$(call if_changed,gzip)

$(obj)/vmlinux.bin.lz4: $(vmlinux.bin.all-y) FORCE

	$(call if_changed,lz4)

$(obj)/vmlinux.bin.lzma: $(vmlinux.bin.all-y) FORCE

$(obj)/vmlinux.bin.lzo: $(vmlinux.bin.all-y) FORCE

	$(call if_changed,lzo)

$(obj)/vmlinux.bin.xz: $(vmlinux.bin.all-y) FORCE

$(obj)/vmlinux.bin.zst: $(vmlinux.bin.all-y) FORCE



OBJCOPYFLAGS_piggy.o := -I binary -O elf64-s390 -B s390:64-bit --rename-section .data=.vmlinux.bin.compressed

$(obj)/piggy.o: $(obj)/vmlinux.bin$(suffix-y) FORCE

	$(call if_changed,objcopy)

# SPDX-License-Identifier: GPL-2.0

#

# Cryptographic API

#

obj-$(CONFIG_CRYPTO_SHA1_S390) += sha1_s390.o sha_common.o

obj-$(CONFIG_CRYPTO_SHA512_S390) += sha512_s390.o sha_common.o

obj-$(CONFIG_CRYPTO_SHA3_512_S390) += sha3_512_s390.o sha_common.o

obj-$(CONFIG_CRYPTO_DES_S390) += des_s390.o

obj-$(CONFIG_CRYPTO_AES_S390) += aes_s390.o

obj-$(CONFIG_CRYPTO_PAES_S390) += paes_s390.o

obj-$(CONFIG_S390_PRNG) += prng.o

obj-$(CONFIG_CRYPTO_GHASH_S390) += ghash_s390.o

obj-$(CONFIG_ARCH_RANDOM) += arch_random.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the s390 PCI subsystem.





obj-$(CONFIG_PCI_IOV)	+= pci_iov.o

 SPDX-License-Identifier: GPL-2.0-only

GZFLAGS			:=-9

ifdef CONFIG_CPU_HAS_FPU



ifdef CONFIG_CPU_HAS_VDSP

VDSPEXT = v

endif

ifdef CONFIG_CPU_HAS_TEE











ifneq ($(CSKYABI),)

MCPU_STR = $(CPUTYPE)$(FPUEXT)$(VDSPEXT)$(TEEEXT)

KBUILD_CFLAGS += -mcpu=$(CPUTYPE) -Wa,-mcpu=$(MCPU_STR)

KBUILD_CFLAGS += -DCSKYCPU_DEF_NAME=\"$(MCPU_STR)\"

KBUILD_CFLAGS += -msoft-float -mdiv



KBUILD_CFLAGS += -mno-stack-size

endif

ifdef CONFIG_FRAME_POINTER





LDFLAGS += -EL



head-y := arch/csky/kernel/head.o





core-y += $(boot)/dts/



	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@

  echo  '  Image        - Uncompressed kernel image (arch/$(ARCH)/boot/Image)'

 SPDX-License-Identifier: GPL-2.0-only

obj-y					+= bswapdi.o

 SPDX-License-Identifier: GPL-2.0-only

ifeq ($(CONFIG_CPU_HAS_CACHEV2),y)

CFLAGS_REMOVE_cachev2.o = $(CC_FLAGS_FTRACE)

obj-y +=			cachev1.o



obj-y +=			fault.o

obj-y +=			ioremap.o

obj-y +=			syscache.o

obj-y +=			context.o

obj-$(CONFIG_HAVE_TCM) +=	tcm.o

 SPDX-License-Identifier: GPL-2.0-only



obj-y += power.o syscall.o syscall_table.o setup.o

obj-y += probes/

obj-$(CONFIG_SMP)			+= smp.o

obj-$(CONFIG_CSKY_PMU_V1)		+= perf_event.o

obj-$(CONFIG_HAVE_PERF_REGS)            += perf_regs.o

ifdef CONFIG_FUNCTION_TRACER

CFLAGS_REMOVE_ftrace.o = $(CC_FLAGS_FTRACE)

endif

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_KPROBES)		+= kprobes.o decode-insn.o simulate-insn.o



 SPDX-License-Identifier: GPL-2.0-only



 Absolute relocation type $(ARCH_REL_TYPE_ABS) needs to be defined before

# the inclusion of generic Makefile.

ARCH_REL_TYPE_ABS := R_CKCORE_ADDR32|R_CKCORE_JUMP_SLOT



# Symbols present in the vdso



# Files to link into the vdso







# Build rules



obj-y += vdso.o vdso-syms.o



 Disable gcov profiling for VDSO code

KCOV_INSTRUMENT := n

# Force dependency

$(obj)/vdso.o: $(obj)/vdso.so

SYSCFLAGS_vdso.so.dbg = $(c_flags)

$(obj)/vdso.so.dbg: $(src)/vdso.lds $(obj-vdso) FORCE

SYSCFLAGS_vdso.so.dbg = -shared -s -Wl,-soname=linux-vdso.so.1 \



	$(call if_changed,so2s)

 strip rule for the .so file

$(obj)/%.so: $(obj)/%.so.dbg FORCE

	$(call if_changed,objcopy)

 actual build commands

# The DSO images are built using a special linker script

 Make sure only to export the intended __vdso_xxx symbol offsets.

                   $(CROSS_COMPILE)objcopy \

                   rm $@.tmp

# Extracts symbol offsets from the VDSO, converting them into an assembly file

# that contains the same symbols at the same offsets.

quiet_cmd_so2s = SO2S    $@

      cmd_so2s = $(NM) -D $< | $(srctree)/$(src)/so2s.sh > $@

# install commands for the unstripped file

quiet_cmd_vdso_install = INSTALL $@

      cmd_vdso_install = cp $(obj)/$@.dbg $(MODLIB)/vdso/$@



vdso_install: vdso.so

 SPDX-License-Identifier: GPL-2.0-only

lib-y  := usercopy.o delay.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y				+= cacheflush.o

obj-y				+= memcmp.o

obj-y				+= memset.o

obj-y				+= strcpy.o

obj-y				+= strksyms.o

obj-$(CONFIG_FUNCTION_TRACER)	+= mcount.o

 SPDX-License-Identifier: GPL-2.0-only

targets := Image zImage uImage

targets += $(dtb-y)

	@echo '  Kernel: $@ is ready'

compress-$(CONFIG_KERNEL_LZO)  = lzo

compress-$(CONFIG_KERNEL_LZMA) = lzma

compress-$(CONFIG_KERNEL_XZ)   = xzkern



	@echo '  Kernel: $@ is ready'

UIMAGE_ARCH		= sandbox

UIMAGE_LOADADDR		= $(shell $(NM) vmlinux | awk '$$NF == "_start" {print $$1}')

$(obj)/uImage: $(obj)/zImage

 SPDX-License-Identifier: GPL-2.0-only

dtstree	:= $(srctree)/$(src)



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



# Copyright (C) 1994, 95, 96, 2003 by Ralf Baechle

# DECStation modifications by Paul M. Antoine, 1996

# Copyright (C) 2002, 2003, 2004  Maciej W. Rozycki

#

# This file is included by the global makefile so that you can add your own

# architecture-specific flags and dependencies.

#

archscripts: scripts_basic

	$(Q)$(MAKE) $(build)=arch/mips/tools elf-entry

	$(Q)$(MAKE) $(build)=arch/mips/tools loongson3-llsc-check

endif

	$(Q)$(MAKE) $(build)=arch/mips/boot/tools relocs

KBUILD_DEFCONFIG := 32r2el_defconfig



#

# Select the object file format to substitute into the linker script.

#

32bit-tool-archpref	= mipsel

else

64bit-tool-archpref	= mips64

64bit-bfd		= elf64-tradbigmips

32bit-emul		= elf32btsmip

64bit-emul		= elf64btsmip

endif

ifdef CONFIG_32BIT

tool-archpref		= $(32bit-tool-archpref)

ifdef CONFIG_64BIT

tool-archpref		= $(64bit-tool-archpref)



ifdef cross_compiling



    ifeq ($(call cc-option-yn,-mmcount-ra-address), y)



vmlinux-64		= vmlinux.64



vmlinux-32		= vmlinux.32

vmlinux-64		= vmlinux



all-$(CONFIG_BOOT_ELF32)	:= $(vmlinux-32)

all-$(CONFIG_BOOT_ELF64)	:= $(vmlinux-64)



#

# GCC uses -G 0 -mabicalls -fpic as default.  We don't want PIC in the kernel

# code since it only slows down the whole thing.  At some point we might make

# use of global pointer optimizations but their use of $28 conflicts with

# the current pointer optimization.

#

 The DECStation requires an ECOFF kernel for remote booting, other MIPS

 machines may also.  Since BFD is incredibly buggy with respect to

# crossformat linking we rely on the elf2ecoff tool for format conversion.

#

cflags-y			+= -G 0 -mno-abicalls -fno-pic -pipe

LDFLAGS_vmlinux			+= -G 0 -static -n -nostdlib

KBUILD_AFLAGS_MODULE		+= -mlong-calls

KBUILD_CFLAGS_MODULE		+= -mlong-calls

ifeq ($(CONFIG_RELOCATABLE),y)



#

 pass -msoft-float to GAS if it supports it.  However on newer binutils

# (specifically newer than 2.24.51.20140728) we then also need to explicitly

 set ".set hardfloat" in all files which manipulate floating point registers.



	cflags-y		+= -DGAS_HAS_SET_HARDFLOAT -Wa,-msoft-float

endif

cflags-y += -ffreestanding



				   -fno-omit-frame-pointer

# Some distribution-specific toolchains might pass the -fstack-check

# option during the build, which adds a simple stack-probe at the beginning

 of every function.  This stack probe is to ensure that there is enough

# stack space, else a SEGV is generated.  This is not desirable for MIPS

# as kernel stacks are small, placed in unmapped virtual memory, and do not

 grow when overflowed.  Especially on SGI IP27 platforms, this check will

 lead to a NULL pointer dereference in _raw_spin_lock_irq.



 In disassembly, this stack probe appears at the top of a function as:

#    sd		zero,<offset>(sp)

# Where <offset> is a negative value.

#



# binutils from v2.35 when built with --enable-mips-fix-loongson3-llsc=yes,

# supports an -mfix-loongson3-llsc flag which emits a sync prior to each ll

 instruction to work around a CPU bug (see __SYNC_loongson3_war in asm/sync.h

 for a description).



 We disable this in order to prevent the assembler meddling with the

# instruction that labels refer to, ie. if we label an ll instruction:

#

# 1: ll v0, 0(a0)

#

# ...then with the assembler fix applied the label may actually point at a sync

# instruction inserted by the assembler, and if we were using the label in an

# exception table the table would no longer contain the address of the ll

 instruction.



# Avoid this by explicitly disabling that assembler behaviour.

#

cflags-y += $(call as-option,-Wa$(comma)-mno-fix-loongson3-llsc,)



# CPU-dependent compiler/assembler options for optimization.

#

cflags-$(CONFIG_CPU_VR41XX)	+= -march=r4100 -Wa,--trap

cflags-$(CONFIG_CPU_R4X00)	+= -march=r4600 -Wa,--trap

cflags-$(CONFIG_CPU_MIPS32_R1)	+= -march=mips32 -Wa,--trap

cflags-$(CONFIG_CPU_MIPS32_R5)	+= -march=mips32r5 -Wa,--trap -modd-spreg

cflags-$(CONFIG_CPU_MIPS64_R1)	+= -march=mips64 -Wa,--trap

cflags-$(CONFIG_CPU_MIPS64_R5)	+= -march=mips64r5 -Wa,--trap

cflags-$(CONFIG_CPU_CAVIUM_OCTEON) += $(call cc-option,-march=octeon) -Wa,--trap

ifeq (,$(findstring march=octeon, $(cflags-$(CONFIG_CPU_CAVIUM_OCTEON))))

cflags-$(CONFIG_CPU_CAVIUM_OCTEON) += -Wa,-march=octeon

endif

cflags-$(CONFIG_CPU_BMIPS)	+= -march=mips32 -Wa,-mips32 -Wa,--trap

cflags-$(CONFIG_CPU_R4000_WORKAROUNDS)	+= $(call cc-option,-mfix-r4000,)



# For smartmips configurations, there are hundreds of warnings due to ISA overrides

 in assembly and header files. smartmips is only supported for MIPS32r1 onwards

 and there is no support for 64-bit. Various '.set mips2' or '.set mips3' or

# similar directives in the kernel will spam the build logs with the following warnings:

 Warning: the `smartmips' extension requires MIPS32 revision 1 or greater

# or

 Warning: the 64-bit MIPS architecture does not support the `smartmips' extension

# Pass -Wa,--no-warn to disable all assembler warnings until the kernel code has

 been fixed properly.

ifeq ($(CONFIG_CPU_HAS_SMARTMIPS),y)

smartmips-ase				:= $(call cc-option-yn,$(mips-cflags) -msmartmips)

ifeq ($(CONFIG_CPU_MICROMIPS),y)

micromips-ase				:= $(call cc-option-yn,$(mips-cflags) -mmicromips)

ifeq ($(CONFIG_CPU_HAS_MSA),y)

cflags-$(toolchain-virt)		+= -DTOOLCHAIN_SUPPORTS_VIRT

# For -mmicromips, use -Wa,-fatal-warnings to catch unsupported -mxpa which

 only warns

xpa-cflags-$(micromips-ase)		+= -mmicromips -Wa$(comma)-fatal-warnings

toolchain-crc				:= $(call cc-option-yn,$(mips-cflags) -Wa$(comma)-mcrc)

cflags-$(toolchain-crc)			+= -DTOOLCHAIN_SUPPORTS_CRC

toolchain-ginv				:= $(call cc-option-yn,$(mips-cflags) -Wa$(comma)-mginv)



#

 Firmware support



libs-$(CONFIG_FW_SNIPROM)	+= arch/mips/fw/sni/



#

 Kernel compression



COMPRESSION_FNAME		= vmlinuz

COMPRESSION_FNAME		= vmlinux

endif



 Board-dependent options and extra files





ifdef CONFIG_PHYSICAL_START

load-y					= $(CONFIG_PHYSICAL_START)

endif

entry-y				= $(shell $(objtree)/arch/mips/tools/elf-entry vmlinux)

cflags-y			+= -I$(srctree)/arch/mips/include/asm/mach-generic



#

# Automatically detect the build format. By default we choose

# the elf format according to the load address.

# We can always force a build with a 64-bits symbol format by

 passing 'KBUILD_SYM32=no' option to the make's command line.



ifdef CONFIG_64BIT

  ifndef KBUILD_SYM32

    ifeq ($(shell expr $(load-y) \< 0xffffffff80000000), 0)



    cflags-y += -msym32 -DKBUILD_64BIT_SYM32



# When linking a 32-bit executable the LLVM linker cannot cope with a

# 32-bit load address that has been sign-extended to 64 bits.  Simply

 remove the upper 32 bits then, as it is safe to do so with other

# linkers.

	load-ld			= $(load-y)



KBUILD_CFLAGS	+= $(cflags-y)



bootvars-y	= VMLINUX_LOAD_ADDRESS=$(load-y) \

		  VMLINUX_ENTRY_ADDRESS=$(entry-y) \

ifdef CONFIG_32BIT

ifdef CONFIG_64BIT



 This is required to get dwarf unwinding tables into .debug_frame

# instead of .eh_frame so we don't discard them.





ifdef CONFIG_MIPS

	egrep -vw '__GNUC_(MINOR_|PATCHLEVEL_)?_' | \

	sed -e "s/^\#define /-D'/" -e "s/ /'='/" -e "s/$$/'/" -e 's/\$$/&&/g')

endif

OBJCOPYFLAGS		+= --remove-section=.reginfo







# suspend and hibernation support



 boot image targets (arch/mips/boot/)

boot-y			+= vmlinux.srec

boot-y			+= uImage

boot-y			+= uImage.bz2

boot-y			+= uImage.gz

boot-y			+= uImage.lzma

boot-y			+= vmlinux.gz.itb

boot-y			+= vmlinux.bz2.itb



 compressed boot image targets (arch/mips/boot/compressed/)

bootz-y			:= vmlinuz

bootz-y			+= vmlinuz.ecoff

bootz-y			+= vmlinuz.srec

ifeq ($(shell expr $(zload-y) \< 0xffffffff80000000 2> /dev/null), 0)

bootz-y			+= vmlinuz.itb



# Some machines like the Indy need 32-bit ELF binaries for booting purposes.

 Other need ECOFF, so we build a 32-bit ELF binary for them which we then

 convert to ECOFF using elf2ecoff.



	cmd_32 = $(OBJCOPY) -O $(32bit-bfd) $(OBJCOPYFLAGS) $< $@

vmlinux.32: vmlinux

	$(call cmd,32)



 The 64-bit ELF tools are pretty broken so at this time we generate 64-bit

# ELF files from 32-bit files by conversion.

#

quiet_cmd_64 = OBJCOPY $@





 boot

$(boot-y): $(vmlinux-32) FORCE



ifdef CONFIG_SYS_SUPPORTS_ZBOOT

# boot/compressed

$(bootz-y): $(vmlinux-32) FORCE

	$(Q)$(MAKE) $(build)=arch/mips/boot/compressed \

else

	@echo '   CONFIG_SYS_SUPPORTS_ZBOOT is not enabled'

	/bin/false

endif





 device-trees



	@$(kecho) '  Checking missing-syscalls for N32'

	$(Q)$(MAKE) $(build)=. missing-syscalls missing_syscalls_flags="-mabi=n32"

endif

ifdef CONFIG_MIPS32_O32

	$(Q)$(MAKE) $(build)=. missing-syscalls missing_syscalls_flags="-mabi=32"

endif

install:

	$(Q)install -D -m 755 vmlinux $(INSTALL_PATH)/vmlinux-$(KERNELRELEASE)

ifdef CONFIG_SYS_SUPPORTS_ZBOOT

	$(Q)install -D -m 755 vmlinuz $(INSTALL_PATH)/vmlinuz-$(KERNELRELEASE)

endif





define archhelp

	echo '  vmlinux.bin          - Raw binary boot image'

	echo '  vmlinux.32           - 64-bit boot image wrapped in 32bits (IP22/IP32)'

	echo '  vmlinuz              - Compressed boot(zboot) image'

	echo '  uImage.bin           - U-Boot image (uncompressed)'

	echo '  uImage.bz2           - U-Boot image (bz2)'

	echo '  uImage.lzma          - U-Boot image (lzma)'

	echo '  uImage.lzo           - U-Boot image (lzo)'

	echo '  uzImage.bin          - U-Boot image (self-extracting)'

	echo

	echo '  These will be default as appropriate for a configured platform.'

	echo

	echo '  {micro32,32,64}{r1,r2,r6}{el,}_defconfig <BOARDS="list of boards">'

	echo

	echo '  Where BOARDS is some subset of the following:'

	echo '  supported:'

	echo

	$(foreach cfg,$(generic_defconfigs),

	  printf "  %-24s - Build generic kernel for $(call describe_generic_defconfig,$(cfg))\n" $(cfg);)

	echo

	echo '  generic and can still be used:'

	echo

	  printf "  %-24s - Build $($(cfg)-y)\n" $(cfg);)

	echo





#

# If the user generates a generic kernel configuration without specifying a

 list of boards to include the config fragments for, default to including all

 available board config fragments.



BOARDS = $(patsubst board-%.config,%,$(notdir $(wildcard $(generic_config_dir)/board-*.config)))

endif



# Generic kernel configurations which merge generic_defconfig with the

 appropriate config fragments from arch/mips/configs/generic/, resulting in

# the ability to easily configure the kernel for a given architecture,

 endianness & set of boards without duplicating the needed configuration in

# hundreds of defconfig files.

#

define gen_generic_defconfigs

$(foreach bits,$(1),$(foreach rev,$(2),$(foreach endian,$(3),

target := $(bits)$(rev)$(filter el,$(endian))_defconfig

$$(target): $(generic_config_dir)/$(bits)$(rev).config



$(eval $(call gen_generic_defconfigs,32 64,r1 r2 r6,eb el))

$(eval $(call gen_generic_defconfigs,micro32,r2,eb el))



.PHONY: $(generic_defconfigs)

'

	$(Q)$(MAKE) -f $(srctree)/Makefile olddefconfig \

		KCONFIG_CONFIG=$(objtree)/.config.$@ >/dev/null

		"$(origin BOARDS)" $(BOARDS)



#

# Prevent generic merge_config rules attempting to merge single fragments

#

$(generic_config_dir)/%.config: ;



# Prevent direct use of generic_defconfig, which is intended to be used as the

 basis of the various ISA-specific targets generated above.



generic_defconfig:

	$(Q)echo "generic_defconfig is not intended for direct use, but should instead be"

	$(Q)for cfg in $(generic_defconfigs); do echo "  $${cfg}"; done

	$(Q)echo



#

# Legacy defconfig compatibility - these targets used to be real defconfigs but

 now that the boards have been converted to use the generic kernel they are

# wrappers around the generic rules above.

#



legacy_defconfigs		+= sead3_defconfig



sead3micro_defconfig-y		:= micro32r2el_defconfig BOARDS=sead-3



legacy_defconfigs		+= pistachio_defconfig



# SPDX-License-Identifier: GPL-2.0

#

 Sibyte SB1250 / BCM1480 family of SOCs



obj-$(CONFIG_SIBYTE_SB1250)	+= sb1250/

obj-$(CONFIG_SIBYTE_BCM1x55)	+= bcm1480/

obj-$(CONFIG_SIBYTE_BCM1x55)	+= common/



#

# Sibyte BCM91120x (Carmel) board

# Sibyte BCM91120C (CRhine) board

# Sibyte BCM91125C (CRhone) board

 Sibyte BCM91125E (Rhone) board

# Sibyte SWARM board

 Sibyte BCM91x80 (BigSur) board



obj-$(CONFIG_SIBYTE_RHONE)	+= swarm/

obj-$(CONFIG_SIBYTE_SWARM)	+= swarm/

obj-$(CONFIG_SIBYTE_BIGSUR)	+= swarm/

 SPDX-License-Identifier: GPL-2.0-only

obj-y := cfe.o

 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only

obj-y				:= platform.o setup.o rtc_xicor1241.o \

				   rtc_m41t81.o

obj-$(CONFIG_I2C_BOARDINFO)	+= swarm-i2c.o

 SPDX-License-Identifier: GPL-2.0-only



 SPDX-License-Identifier: GPL-2.0-only



# Common code for all Loongson 1 based systems

#

obj-$(CONFIG_MACH_LOONGSON32) += common/



 Loongson LS1B board







#

# Loongson LS1C board

#

obj-$(CONFIG_LOONGSON1_LS1C)  += ls1c/

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for common code of loongson1 based machines.





obj-y	+= time.o irq.o platform.o prom.o reset.o setup.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for loongson1B based machines.





 SPDX-License-Identifier: GPL-2.0-only



 Makefile for loongson1C based machines.





 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the RB532 board specific parts of the kernel





obj-$(CONFIG_SERIAL_8250_CONSOLE) += serial.o

obj-y	 += irq.o time.o setup.o prom.o gpio.o devices.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux/MIPS kernel FPU emulation.

#

	   dp_fmax.o							     \

	   sp_div.o sp_mul.o sp_sub.o sp_add.o sp_fdp.o sp_cmp.o sp_simple.o \

	   sp_tint.o sp_fint.o sp_rint.o sp_maddf.o sp_2008class.o sp_fmin.o \

	   dsemul.o



 SPDX-License-Identifier: GPL-2.0-or-later



 Copyright (C) 2016 Imagination Technologies

# Author: Paul Burton <paul.burton@mips.com>

#

obj-y += irq.o

obj-y += proc.o

obj-$(CONFIG_YAMON_DT_SHIM)		+= yamon-dt.o

obj-$(CONFIG_LEGACY_BOARD_SEAD3)	+= board-sead3.o

obj-$(CONFIG_LEGACY_BOARD_OCELOT)	+= board-ocelot.o

obj-$(CONFIG_MACH_INGENIC)			+= board-ingenic.o



 Makefile for the Cavium Octeon specific kernel interface routines

# under Linux.

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

# Copyright (C) 2005-2009 Cavium Networks

#

obj-y += octeon-memcpy.o

obj-y += executive/



obj-$(CONFIG_MTD)		      += flash_setup.o

obj-$(CONFIG_SMP)		      += smp.o

obj-$(CONFIG_OCTEON_ILM)	      += oct_ilm.o



 Makefile for the Cavium Octeon specific kernel interface routines

# under Linux.

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

# Copyright (C) 2005-2008 Cavium Networks

#

obj-y += cvmx-bootmem.o cvmx-l2c.o cvmx-sysinfo.o octeon-model.o

obj-y += cvmx-pko.o cvmx-spi.o cvmx-cmd-queue.o \

	cvmx-helper-board.o cvmx-helper.o cvmx-helper-xaui.o \

	cvmx-helper-loop.o cvmx-helper-spi.o cvmx-helper-util.o \



obj-y += cvmx-helper-errata.o cvmx-helper-jtag.o cvmx-boot-vector.o

# SPDX-License-Identifier: GPL-2.0

#

# OCTEON-specific crypto modules.

#

obj-y += octeon-crypto.o

obj-$(CONFIG_CRYPTO_MD5_OCTEON)		+= octeon-md5.o

obj-$(CONFIG_CRYPTO_SHA1_OCTEON)	+= octeon-sha1.o

obj-$(CONFIG_CRYPTO_SHA256_OCTEON)	+= octeon-sha256.o

obj-$(CONFIG_CRYPTO_SHA512_OCTEON)	+= octeon-sha512.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Cobalt micro systems family specific parts of the kernel







obj-$(CONFIG_PCI)		+= pci.o

# SPDX-License-Identifier: GPL-2.0

obj-y := \

	prom.o \

	irq.o \

	time.o \

	platform.o \

	gpio.o \

# SPDX-License-Identifier: GPL-2.0

# Makefile for KVM support for MIPS

#



kvm-$(CONFIG_CPU_HAS_MSA) += msa.o

kvm-y +=    mips.o emulate.o entry.o \

	    fpu.o

kvm-y += mmu.o



obj-$(CONFIG_KVM)	+= kvm.o

obj-y			+= callback.o tlb.o



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



# Copyright (C) 2006 FON Technology, SL.

# Copyright (C) 2006 Imre Kaloz <kaloz@openwrt.org>

# Copyright (C) 2006-2009 Felix Fietkau <nbd@openwrt.org>

#





obj-$(CONFIG_SOC_AR2315) += ar2315.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Broadcom Common Firmware Environment support





 SPDX-License-Identifier: GPL-2.0-only



 Makefile for generic prom monitor library routines under Linux.







lib-$(CONFIG_64BIT)	+= call_o32.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the SNI prom monitor routines under Linux.





lib-$(CONFIG_FW_SNIPROM)	+= sniprom.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the ARC prom monitor library routines under Linux.

#

else



lib-$(CONFIG_ARC_CONSOLE)	+= arc_con.o

 SPDX-License-Identifier: GPL-2.0-only



# Joshua Henderson, <joshua.henderson@microchip.com>

# Copyright (C) 2015 Microchip Technology, Inc.  All rights reserved.

#

obj-$(CONFIG_MACH_PIC32) += common/

obj-$(CONFIG_PIC32MZDA) += pic32mzda/

 SPDX-License-Identifier: GPL-2.0-only



# Joshua Henderson, <joshua.henderson@microchip.com>

# Copyright (C) 2015 Microchip Technology, Inc.  All rights reserved.

#

obj-y = reset.o irq.o

 SPDX-License-Identifier: GPL-2.0-only



# Joshua Henderson, <joshua.henderson@microchip.com>

# Copyright (C) 2015 Microchip Technology, Inc.  All rights reserved.

#

obj-y			:= config.o early_clk.o init.o time.o

obj-$(CONFIG_EARLY_PRINTK)	+= early_console.o      \

# SPDX-License-Identifier: GPL-2.0

PHONY += elf-entry

elf-entry: $(obj)/elf-entry

	@:

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the IP27 specific kernel interface routines under Linux.

#

	   ip27-klnuma.o ip27-memory.o ip27-nmi.o ip27-reset.o ip27-timer.o \

	   ip27-hubio.o ip27-xtalk.o

obj-$(CONFIG_EARLY_PRINTK)	+= ip27-console.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the BCM47XX specific kernel interface routines

# under Linux.

#

obj-y				+= irq.o prom.o serial.o setup.o time.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the DECstation family specific parts of the kernel





obj-y		:= ecc-berr.o int-handler.o ioasic-irq.o kn01-berr.o \

		   kn02-irq.o kn02xa-berr.o platform.o reset.o setup.o time.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the DECstation prom monitor library routines

# under Linux.

#



lib-$(CONFIG_32BIT)	+= locore.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux/MIPS-specific parts of the memory manager.

#

obj-y				+= init.o

obj-y				+= page.o



obj-y				+= uasm-micromips.o



ifndef CONFIG_EVA

obj-y				+= maccess.o

endif

obj-$(CONFIG_32BIT)		+= ioremap.o pgtable-32.o

obj-$(CONFIG_DMA_NONCOHERENT)	+= dma-noncoherent.o

obj-$(CONFIG_CPU_R3K_TLB)	+= tlb-r3k.o

obj-$(CONFIG_CPU_SB1)		+= c-r4k.o cerr-sb1.o cex-sb1.o tlb-r4k.o



obj-$(CONFIG_R5000_CPU_SCACHE)	+= sc-r5k.o

obj-$(CONFIG_MIPS_CPU_SCACHE)	+= sc-mips.o



obj-$(CONFIG_DEBUG_VIRTUAL)	+= physaddr.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the Linux/MIPS kernel.

#

extra-y		:= head.o vmlinux.lds

		   syscall.o time.o topology.o traps.o unaligned.o watch.o \

		   vdso.o cacheinfo.o

ifdef CONFIG_CPU_R3K_TLB

obj-y		+= cpu-r3k-probe.o



CFLAGS_REMOVE_early_printk.o =  $(CC_FLAGS_FTRACE)

CFLAGS_REMOVE_perf_event.o = $(CC_FLAGS_FTRACE)



obj-$(CONFIG_CEVT_DS1287)	+= cevt-ds1287.o

obj-$(CONFIG_CEVT_SB1250)	+= cevt-sb1250.o

obj-$(CONFIG_CEVT_TXX9)		+= cevt-txx9.o

obj-$(CONFIG_CSRC_IOASIC)	+= csrc-ioasic.o

obj-$(CONFIG_CSRC_R4K)		+= csrc-r4k.o



obj-$(CONFIG_STACKTRACE)	+= stacktrace.o



obj-$(CONFIG_FTRACE_SYSCALLS)	+= ftrace.o



sw-y				:= r4k_switch.o

sw-$(CONFIG_CPU_R3000)		:= r2300_switch.o



obj-$(CONFIG_CPU_R2300_FPU)	+= r2300_fpu.o



obj-$(CONFIG_SMP)		+= smp.o

obj-$(CONFIG_SMP_UP)		+= smp-up.o

obj-$(CONFIG_CPU_BMIPS)		+= smp-bmips.o bmips_vec.o bmips_5xxx_init.o

obj-$(CONFIG_MIPS_MT_FPAFF)	+= mips-mt-fpaff.o

obj-$(CONFIG_MIPS_MT_SMP)	+= smp-mt.o

obj-$(CONFIG_MIPS_CPS)		+= smp-cps.o cps-vec.o

obj-$(CONFIG_MIPS_CPS_NS16550)	+= cps-vec-ns16550.o

obj-$(CONFIG_MIPS_SPRAM)	+= spram.o

obj-$(CONFIG_MIPS_VPE_LOADER)	+= vpe.o

obj-$(CONFIG_MIPS_VPE_LOADER_MT) += vpe-mt.o

obj-$(CONFIG_MIPS_VPE_APSP_API) += rtlx.o

obj-$(CONFIG_MIPS_VPE_APSP_API_CMP) += rtlx-cmp.o

obj-$(CONFIG_MIPS_VPE_APSP_API_MT) += rtlx-mt.o

obj-$(CONFIG_MIPS_MSC)		+= irq-msc01.o

obj-$(CONFIG_IRQ_TXX9)		+= irq_txx9.o



obj-$(CONFIG_KPROBES)		+= kprobes.o

obj-$(CONFIG_32BIT)		+= scall32-o32.o

obj-$(CONFIG_64BIT)		+= scall64-n64.o

obj-$(CONFIG_MIPS32_N32)	+= scall64-n32.o signal_n32.o



obj-$(CONFIG_KGDB)		+= kgdb.o

obj-$(CONFIG_MAGIC_SYSRQ)	+= sysrq.o

obj-$(CONFIG_CPU_R4X00_BUGS64)	+= r4k-bugs64.o



obj-$(CONFIG_GPIO_TXX9)		+= gpio_txx9.o



obj-$(CONFIG_KEXEC)		+= machine_kexec.o relocate_kernel.o crash.o

obj-$(CONFIG_EARLY_PRINTK)	+= early_printk.o

obj-$(CONFIG_SPINLOCK_TEST)	+= spinlock_test.o

obj-$(CONFIG_MIPSR2_TO_R6_EMULATOR)	+= mips-r2-to-r6-emul.o

CFLAGS_cpu-bugs64.o	= $(shell if $(CC) $(KBUILD_CFLAGS) -Wa,-mdaddi -c -o /dev/null -x c /dev/null >/dev/null 2>&1; then echo "-DHAVE_AS_SET_DADDI"; fi)





obj-$(CONFIG_MIPS_CM)		+= mips-cm.o

obj-$(CONFIG_MIPS_CPC)		+= mips-cpc.o



CPPFLAGS_vmlinux.lds		:= $(KBUILD_CFLAGS)

# SPDX-License-Identifier: GPL-2.0

kapi := arch/$(SRCARCH)/include/generated/asm



_dummy := $(shell [ -d '$(uapi)' ] || mkdir -p '$(uapi)')	\



systbl := $(srctree)/scripts/syscalltbl.sh

      cmd_syshdr = $(CONFIG_SHELL) $(syshdr) --offset __NR_Linux $< $@

quiet_cmd_sysnr = SYSNR   $@

      cmd_sysnr = $(CONFIG_SHELL) '$(sysnr)' '$<' '$@'		\

		  '$(sysnr_abis_$(basetarget))'			\



quiet_cmd_systbl = SYSTBL  $@



	$(call if_changed,syshdr)

sysnr_pfx_unistd_nr_n32 := N32

sysnr_pfx_unistd_nr_n64 := 64





$(kapi)/syscall_table_%.h: $(src)/syscall_%.tbl $(systbl) FORCE



uapisyshdr-y		+= unistd_n32.h			\

			   unistd_o32.h

kapisyshdr-y		+= syscall_table_n32.h		\

			   syscall_table_o32.h		\

			   unistd_nr_n64.h		\

			   unistd_nr_o32.h

uapisyshdr-y	:= $(addprefix $(uapi)/, $(uapisyshdr-y))

targets		+= $(addprefix ../../../../, $(uapisyshdr-y) $(kapisyshdr-y))

PHONY += all

# SPDX-License-Identifier: GPL-2.0

 Objects to go into the VDSO.



 Absolute relocation type $(ARCH_REL_TYPE_ABS) needs to be defined before

# the inclusion of generic Makefile.

ARCH_REL_TYPE_ABS := R_MIPS_JUMP_SLOT|R_MIPS_GLOB_DAT



obj-vdso-y := elf.o vgettimeofday.o sigreturn.o

 Common compiler flags between ABIs.

	$(filter -march=%,$(KBUILD_CFLAGS)) \

	$(filter -m%-float,$(KBUILD_CFLAGS)) \

	$(filter -mno-loongson-%,$(KBUILD_CFLAGS)) \

	$(CLANG_FLAGS) \

	-D__VDSO__

ccflags-vdso += -DBUILD_VDSO32

endif



# The -fno-jump-tables flag only prevents the compiler from generating

 jump tables but does not prevent the compiler from emitting absolute

# offsets.

	$(filter -W%,$(filter-out -Wa$(comma)%,$(KBUILD_CFLAGS))) \

aflags-vdso := $(ccflags-vdso) \

	-D__ASSEMBLY__ -Wa,-gdwarf-2

ifneq ($(c-gettimeofday-y),)

CFLAGS_vgettimeofday.o = -include $(c-gettimeofday-y)

 config-n32-o32-env.c prepares the environment to build a 32bit vDSO

# library on a 64bit kernel.

# Note: Needs to be included before than the generic library.

CFLAGS_vgettimeofday-o32.o = -include $(srctree)/$(src)/config-n32-o32-env.c -include $(c-gettimeofday-y)

CFLAGS_vgettimeofday-n32.o = -include $(srctree)/$(src)/config-n32-o32-env.c -include $(c-gettimeofday-y)

endif

CFLAGS_REMOVE_vgettimeofday.o = $(CC_FLAGS_FTRACE)

ifdef CONFIG_MIPS_DISABLE_VDSO

  ifndef CONFIG_MIPS_LD_CAN_LINK_VDSO

  obj-vdso-y := $(filter-out vgettimeofday.o, $(obj-vdso-y))

endif

# VDSO linker flags.



CFLAGS_REMOVE_vdso.o = $(CC_FLAGS_FTRACE)

KCOV_INSTRUMENT := n

 Check that we don't have PIC 'jalr t9' calls left

quiet_cmd_vdso_mips_check = VDSOCHK $@

      cmd_vdso_mips_check = if $(OBJDUMP) --disassemble $@ | egrep -h "jalr.*t9" > /dev/null; \



#

 Shared build commands.





      cmd_vdsold_and_vdso_check = $(cmd_ld); $(cmd_vdso_check); $(cmd_vdso_mips_check)



 Strip rule for the raw .so files

$(obj)/%.so.raw: $(obj)/%.so.dbg.raw FORCE

	$(call if_changed,objcopy)

hostprogs := genvdso

quiet_cmd_genvdso = GENVDSO $@



#

 Build native VDSO.







targets += vdso.so.dbg.raw vdso.so.raw





$(obj-vdso): KBUILD_AFLAGS := $(aflags-vdso) $(native-abi)



$(obj)/vdso.so.dbg.raw: $(obj)/vdso.lds $(obj-vdso) FORCE

	$(call if_changed,vdsold_and_vdso_check)

$(obj)/vdso-image.c: $(obj)/vdso.so.dbg.raw $(obj)/vdso.so.raw \

                     $(obj)/genvdso FORCE

	$(call if_changed,genvdso)



#

# Build O32 VDSO.

#

 Define these outside the ifdef to ensure they are picked up by clean.

targets += $(obj-vdso-y:%.o=%-o32.o)

targets += vdso-o32.lds

targets += vdso-o32.so.dbg vdso-o32.so

targets += vdso-o32-image.c





$(obj-vdso-o32): KBUILD_CFLAGS := $(cflags-vdso) -mabi=32

$(obj-vdso-o32): KBUILD_AFLAGS := $(aflags-vdso) -mabi=32

$(obj)/%-o32.o: $(src)/%.S FORCE





$(obj)/vdso-o32.lds: $(src)/vdso.lds.S FORCE

	$(call if_changed_dep,cpp_lds_S)



$(obj)/vdso-o32-image.c: VDSO_NAME := o32



obj-y += vdso-o32-image.o



#

# Build N32 VDSO.

#

targets += $(obj-vdso-y:%.o=%-n32.o)

targets += vdso-n32.lds

targets += vdso-n32.so.dbg vdso-n32.so

targets += vdso-n32-image.c





$(obj-vdso-n32): KBUILD_AFLAGS := $(aflags-vdso) -mabi=n32

$(obj)/%-n32.o: $(src)/%.S FORCE





$(obj)/vdso-n32.lds: KBUILD_CPPFLAGS := $(ccflags-vdso) -mabi=n32



$(obj)/vdso-n32.so.dbg.raw: $(obj)/vdso-n32.lds $(obj-vdso-n32) FORCE

	$(call if_changed,vdsold_and_vdso_check)

$(obj)/vdso-n32-image.c: $(obj)/vdso-n32.so.dbg.raw $(obj)/vdso-n32.so.raw \

                         $(obj)/genvdso FORCE

	$(call if_changed,genvdso)



endif

 FIXME: Need install rule for debug.

 Needs to deal with dependency for generation of dbg by cmd_genvdso...

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for MIPS-specific library files..





	   mips-atomic.o strncpy_user.o \

	   strnlen_user.o uncached.o

obj-$(CONFIG_PCI)	+= iomap-pci.o



obj-$(CONFIG_CPU_R3000)		+= r3k_dump_tlb.o



# libgcc-style stuff needed in the kernel

obj-y += bswapsi.o bswapdi.o multi3.o

 SPDX-License-Identifier: GPL-2.0-only

# Makefile for the Ralink common stuff

#

 Copyright (C) 2009-2011 Gabor Juhos <juhosg@openwrt.org>

# Copyright (C) 2013 John Crispin <john@phrozen.org>

obj-y := prom.o of.o reset.o

ifndef CONFIG_MIPS_GIC

	obj-y += clk.o timer.o

endif

obj-$(CONFIG_CLKEVT_RT3352) += cevt-rt3352.o



obj-$(CONFIG_IRQ_INTC) += irq.o

obj-$(CONFIG_MIPS_GIC) += irq-gic.o timer-gic.o

obj-$(CONFIG_SOC_RT288X) += rt288x.o

obj-$(CONFIG_SOC_RT3883) += rt3883.o

obj-$(CONFIG_SOC_MT7621) += mt7621.o

obj-$(CONFIG_EARLY_PRINTK) += early_printk.o

 SPDX-License-Identifier: GPL-2.0-only



# Common code for all Loongson based systems

#



#

 Lemote Fuloong mini-PC (Loongson 2E-based)





obj-$(CONFIG_LEMOTE_FULOONG2E)	+= fuloong-2e/



 Lemote loongson2f family machines





# SPDX-License-Identifier: GPL-2.0

#

# Makefile for loongson based machines.

#

obj-y += setup.o init.o env.o time.o reset.o irq.o \

obj-$(CONFIG_PCI) += pci.o



 Serial port support



obj-$(CONFIG_LOONGSON_UART_BASE) += serial.o

obj-$(CONFIG_LOONGSON_MC146818) += rtc.o



# Enable CS5536 Virtual Support Module(VSM) to virtulize the PCI configure

# space

#

obj-$(CONFIG_CS5536) += cs5536/



 Suspend Support





obj-$(CONFIG_SUSPEND) += pm.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for CS5536 support.

#

obj-$(CONFIG_CS5536) += cs5536_pci.o cs5536_ide.o cs5536_acc.o cs5536_ohci.o \

			cs5536_isa.o cs5536_ehci.o



 Enable cs5536 mfgpt Timer



obj-$(CONFIG_CS5536_MFGPT) += cs5536_mfgpt.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Lemote Fuloong2e mini-PC board.

#

obj-y += irq.o reset.o dma.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for lemote loongson2f family machines

#

obj-y += clock.o machtype.o irq.o reset.o dma.o ec_kb3310b.o



 Suspend Support





obj-$(CONFIG_SUSPEND) += pm.o

 SPDX-License-Identifier: GPL-2.0-only

# Copyright (C) 2010 John Crispin <john@phrozen.org>

#





 SPDX-License-Identifier: GPL-2.0-only



obj-y += vmmc.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the IP30 specific kernel interface routines under Linux.

#



obj-$(CONFIG_SMP)		+= ip30-smp.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the SGI specific kernel interface routines

 under Linux.





obj-y	+= ip22-mc.o ip22-hpc.o ip22-int.o ip22-time.o ip22-nvram.o \



obj-$(CONFIG_SGI_IP22) += ip22-berr.o

obj-$(CONFIG_SGI_IP28) += ip28-berr.o

obj-$(CONFIG_EISA)	+= ip22-eisa.o

# SPDX-License-Identifier: GPL-2.0

#

# Nintendo 64

#

# SPDX-License-Identifier: GPL-2.0

#

# Common TXx9

#

obj-$(CONFIG_MACH_TX49XX)      += generic/



# Toshiba JMR-TX3927 board

#



#

# Toshiba RBTX49XX boards

#

obj-$(CONFIG_TOSHIBA_RBTX4927) += rbtx4927/

obj-$(CONFIG_TOSHIBA_RBTX4938) += rbtx4938/

obj-$(CONFIG_TOSHIBA_RBTX4939) += rbtx4939/

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for common code for TXx9 based systems

#

obj-y	+= setup.o

obj-$(CONFIG_SOC_TX4927)	+= mem_tx4927.o setup_tx4927.o irq_tx4927.o

obj-$(CONFIG_TOSHIBA_FPCIB0)	+= smsc_fdc37m81x.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for TOSHIBA JMR-TX3927 board





obj-y	+= prom.o irq.o setup.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

obj-y	 += irq.o setup.o prom.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the SNI specific part of the kernel

#

obj-$(CONFIG_EISA) += eisa.o

# SPDX-License-Identifier: GPL-2.0

		   setup.o timer.o dev-enet.o dev-flash.o dev-pcmcia.o \

		   dev-rng.o dev-spi.o dev-hsspi.o dev-uart.o dev-wdt.o \

		   dev-usb-usbd.o



obj-y		+= boards/

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the SGI specific kernel interface routines

# under Linux.

#

	   crime.o ip32-memory.o ip32-dma.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the Jazz family specific parts of the kernel





obj-y		:= irq.o jazzdma.o reset.o setup.o

 SPDX-License-Identifier: GPL-2.0-only

# MIPS networking code



else

        obj-$(CONFIG_BPF_JIT) += bpf_jit_comp64.o

endif

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Atheros AR71XX/AR724X/AR913X specific parts of the kernel

#

 Copyright (C) 2008-2011 Gabor Juhos <juhosg@openwrt.org>

 Copyright (C) 2008 Imre Kaloz <kaloz@openwrt.org>







obj-$(CONFIG_EARLY_PRINTK)		+= early_printk.o

# SPDX-License-Identifier: GPL-2.0

#

obj-$(CONFIG_CASIO_E55)		+= casio-e55/

obj-$(CONFIG_IBM_WORKPAD)	+= ibm-workpad/

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for common code of the NEC VR4100 series.

#

obj-y	+= bcu.o cmu.o giu.o icu.o init.o irq.o pmu.o rtc.o siu.o type.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the IBM WorkPad z50 specific parts of the kernel





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the CASIO CASSIOPEIA E-55/65 specific parts of the kernel

#

obj-y			+= setup.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for Loongson-3 family machines



obj-$(CONFIG_MACH_LOONGSON64) += cop2-ex.o dma.o \

				setup.o init.o env.o time.o reset.o \

obj-$(CONFIG_SMP)	+= smp.o

obj-$(CONFIG_RS780_HPET) += hpet.o

obj-$(CONFIG_SUSPEND) += pm.o

obj-$(CONFIG_PCI_QUIRKS) += vbios_quirk.o

obj-$(CONFIG_CPU_LOONGSON3_CPUCFG_EMULATION) += cpucfg-emul.o

# SPDX-License-Identifier: GPL-2.0

#

 Carsten Langgaard, carstenl@mips.com

 Copyright (C) 1999,2000 MIPS Technologies, Inc.  All rights reserved.



 Copyright (C) 2008 Wind River Systems, Inc.

   written by Ralf Baechle <ralf@linux-mips.org>



obj-y				+= malta-dt.o

obj-y				+= malta-init.o

obj-y				+= malta-int.o

obj-y				+= malta-platform.o

obj-y				+= malta-setup.o



obj-$(CONFIG_MIPS_CMP)		+= malta-amon.o

CFLAGS_malta-dtshim.o = -I$(src)/../../../scripts/dtc/libfdt



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



# Copyright (C) 1995, 1998, 2001, 2002 by Ralf Baechle

# Copyright (C) 2004  Maciej W. Rozycki

#



# Some DECstations need all possible sections of an ECOFF executable

#



#

# Drop some uninteresting sections in the kernel.

 This is only relevant for ELF kernels but doesn't hurt a.out



drop-sections := .reginfo .mdebug .comment .note .pdr .options .MIPS.options





suffix-y			:= bin

suffix-$(CONFIG_KERNEL_GZIP)	:= gz

suffix-$(CONFIG_KERNEL_LZO)	:= lzo

targets := vmlinux.ecoff



quiet_cmd_bin = OBJCOPY $@

      cmd_bin = $(OBJCOPY) -O binary $(strip-flags) $(VMLINUX) $@



targets += vmlinux.srec

quiet_cmd_srec = OBJCOPY $@

      cmd_srec = $(OBJCOPY) -S -O srec $(strip-flags) $(VMLINUX) $@

$(obj)/vmlinux.srec: $(VMLINUX) FORCE





#

# Compressed vmlinux images

#

extra-y += vmlinux.bin.bz2

extra-y += vmlinux.bin.gz

extra-y += vmlinux.bin.lzma





$(obj)/vmlinux.bin.gz: $(obj)/vmlinux.bin FORCE



$(obj)/vmlinux.bin.lzma: $(obj)/vmlinux.bin FORCE





#

 Compressed u-boot images





targets += uImage

targets += uImage.bin

targets += uImage.bz2

targets += uImage.lzma

targets += uImage.lzo



$(obj)/uImage.bz2: $(obj)/vmlinux.bin.bz2 FORCE



$(obj)/uImage.gz: $(obj)/vmlinux.bin.gz FORCE

	$(call if_changed,uimage,gzip)



$(obj)/uImage.lzo: $(obj)/vmlinux.bin.lzo FORCE



	@ln -sf $(notdir $<) $@



#

 Flattened Image Tree (.itb) images





itb_addr_cells = 1

endif

itb_addr_cells = 2

endif

targets += vmlinux.its.S

quiet_cmd_its_cat = CAT     $@

      cmd_its_cat = cat $(real-prereqs) >$@

$(obj)/vmlinux.its.S: $(addprefix $(srctree)/arch/mips/$(PLATFORM)/,$(ITS_INPUTS)) FORCE

	$(call if_changed,its_cat)

targets += vmlinux.its

targets += vmlinux.gz.its

targets += vmlinux.lzo.its

quiet_cmd_cpp_its_S = ITS     $@

      cmd_cpp_its_S = $(CPP) -P -C -o $@ $< \

			-DVMLINUX_BINARY="\"$(3)\"" \

			-DVMLINUX_COMPRESSION="\"$(2)\"" \

			-DVMLINUX_LOAD_ADDRESS=$(VMLINUX_LOAD_ADDRESS) \

			-DVMLINUX_ENTRY_ADDRESS=$(VMLINUX_ENTRY_ADDRESS) \

			-DADDR_BITS=$(ADDR_BITS) \

			-DADDR_CELLS=$(itb_addr_cells)

	$(call if_changed,cpp_its_S,none,vmlinux.bin)

$(obj)/vmlinux.gz.its: $(obj)/vmlinux.its.S $(VMLINUX) FORCE

	$(call if_changed,cpp_its_S,gzip,vmlinux.bin.gz)

$(obj)/vmlinux.bz2.its: $(obj)/vmlinux.its.S $(VMLINUX)  FORCE

	$(call if_changed,cpp_its_S,bzip2,vmlinux.bin.bz2)

$(obj)/vmlinux.lzma.its: $(obj)/vmlinux.its.S $(VMLINUX) FORCE

	$(call if_changed,cpp_its_S,lzma,vmlinux.bin.lzma)



targets += vmlinux.bz2.itb

targets += vmlinux.lzma.itb



		$(BASH) $(MKIMAGE) \

			--warning no-unit_address_vs_reg" \



$(obj)/vmlinux.itb: $(obj)/vmlinux.its $(obj)/vmlinux.bin FORCE



$(obj)/vmlinux.%.itb: $(obj)/vmlinux.%.its $(obj)/vmlinux.bin.% FORCE



 for cleaning

# SPDX-License-Identifier: GPL-2.0

relocs-objs	+= relocs_32.o

relocs-objs	+= relocs_main.o

PHONY += relocs

relocs: $(obj)/relocs

	@:



# This file is subject to the terms and conditions of the GNU General Public

 License.



# Adapted for MIPS Pete Popov, Dan Malek

#

 Copyright (C) 1994 by Linus Torvalds

# Adapted for PowerPC by Gary Thomas

 modified by Cort (cort@cs.nmt.edu)



# Copyright (C) 2009 Lemote Inc. & DSLab, Lanzhou University

 Author: Wu Zhangjin <wuzhangjin@gmail.com>





include $(srctree)/arch/mips/Kbuild.platforms

# set the default size of the mallocing area for decompressing



# Disable Function Tracer

KBUILD_CFLAGS := $(filter-out $(CC_FLAGS_FTRACE), $(KBUILD_CFLAGS))

KBUILD_CFLAGS := $(filter-out -fstack-protector, $(KBUILD_CFLAGS))

# Disable lq/sq in zboot

ifdef CONFIG_CPU_LOONGSON64





	-DKERNEL_ENTRY=$(VMLINUX_ENTRY_ADDRESS)

# Prevents link failures: __sanitizer_cov_trace_pc() is not linked in.

KCOV_INSTRUMENT		:= n

GCOV_PROFILE := n

UBSAN_SANITIZE := n

# decompressor objects (linked with vmlinuz)

vmlinuzobjs-y := $(obj)/head.o $(obj)/decompress.o $(obj)/string.o $(obj)/bswapsi.o

ifdef CONFIG_DEBUG_ZBOOT

vmlinuzobjs-$(CONFIG_DEBUG_ZBOOT)		   += $(obj)/dbg.o

vmlinuzobjs-$(CONFIG_SYS_SUPPORTS_ZBOOT_UART16550) += $(obj)/uart-16550.o



vmlinuzobjs-$(CONFIG_KERNEL_XZ) += $(obj)/ashldi3.o



targets := $(notdir $(vmlinuzobjs-y))

targets += vmlinux.bin

OBJCOPYFLAGS_vmlinux.bin := $(OBJCOPYFLAGS) -O binary -R .comment -S



tool_$(CONFIG_KERNEL_LZMA)    = lzma

tool_$(CONFIG_KERNEL_LZO)     = lzo

tool_$(CONFIG_KERNEL_ZSTD)    = zstd22

targets += vmlinux.bin.z

$(obj)/vmlinux.bin.z: $(obj)/vmlinux.bin FORCE

	$(call if_changed,$(tool_y))

targets += piggy.o dummy.o



$(obj)/piggy.o: $(obj)/dummy.o $(obj)/vmlinux.bin.z FORCE

	$(call if_changed,objcopy)

HOSTCFLAGS_calc_vmlinuz_load_addr.o += $(LINUXINCLUDE)

 Calculate the load address of the compressed kernel image



ifneq ($(zload-y),)

else

		$(obj)/vmlinux.bin $(LINKER_LOAD_ADDRESS))

endif

UIMAGE_LOADADDR = $(VMLINUZ_LOAD_ADDRESS)





quiet_cmd_strip = STRIP   $@



$(objtree)/vmlinuz: $(src)/ld.script $(vmlinuzobjs-y) $(obj)/calc_vmlinuz_load_addr

	$(call cmd,strip)

objboot := $(objtree)/arch/mips/boot

$(objboot)/vmlinuz: $(objtree)/vmlinuz FORCE



# Some DECstations need all possible sections of an ECOFF executable

#



# elf2ecoff can only handle 32bit image

hostprogs += ../elf2ecoff

ifdef CONFIG_32BIT

	VMLINUZ = $(objtree)/vmlinuz

	VMLINUZ = $(objboot)/vmlinuz.32

endif

targets += ../vmlinuz.32



$(objboot)/vmlinuz.32: $(objtree)/vmlinuz

	$(call cmd,32)





$(objboot)/vmlinuz.ecoff: $(objboot)/elf2ecoff $(VMLINUZ)



targets += ../vmlinuz.bin



	$(call cmd,objcopy)

targets += ../vmlinuz.srec



$(objboot)/vmlinuz.srec: $(objtree)/vmlinuz



targets += ../uzImage.bin

$(objboot)/uzImage.bin: $(objboot)/vmlinuz.bin FORCE

	$(call if_changed,uimage,none)



 Flattened Image Tree (.itb) image





itb_addr_cells = 1

endif

itb_addr_cells = 2

endif







targets += ../vmlinuz.its

quiet_cmd_cpp_its_S = ITS     $@

      cmd_cpp_its_S = $(CPP) -P -C -o $@ $< \

			-DVMLINUX_BINARY="\"$(2)\"" \

			-DVMLINUX_COMPRESSION="\"none\"" \

			-DVMLINUX_LOAD_ADDRESS=$(VMLINUZ_LOAD_ADDRESS) \





targets += ../vmlinuz.itb

quiet_cmd_itb-image = ITB     $@

      cmd_itb-image = \

		env PATH="$(objtree)/scripts/dtc:$(PATH)" \

		-D "-I dts -O dtb -p 500 \

			--include $(objtree)/arch/mips \

		-f $(2) $@

	$(call if_changed,itb-image,$<)

# SPDX-License-Identifier: GPL-2.0

subdir-$(CONFIG_BMIPS_GENERIC)		+= brcm

subdir-$(CONFIG_CAVIUM_OCTEON_SOC)	+= cavium-octeon

subdir-$(CONFIG_FIT_IMAGE_FDT_BOSTON)	+= img

subdir-$(CONFIG_MACH_INGENIC)		+= ingenic

subdir-$(CONFIG_LANTIQ)			+= lantiq

subdir-$(CONFIG_SOC_VCOREIII)		+= mscc

subdir-$(CONFIG_MIPS_MALTA)		+= mti

subdir-$(CONFIG_MACH_REALTEK_RTL)	+= realtek

subdir-$(CONFIG_FIT_IMAGE_FDT_XILFPGA)	+= xilfpga

obj-$(CONFIG_BUILTIN_DTB)	:= $(addsuffix /, $(subdir-y))

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_JZ4740_QI_LB60)	+= qi_lb60.dtb

dtb-$(CONFIG_JZ4740_RS90)	+= rs90.dtb

dtb-$(CONFIG_JZ4770_GCW0)	+= gcw0.dtb

dtb-$(CONFIG_JZ4780_CI20)	+= ci20.dtb

dtb-$(CONFIG_X1830_CU1830_NEO)	+= cu1830-neo.dtb

obj-$(CONFIG_BUILTIN_DTB)	+= $(addsuffix .o, $(dtb-y))

# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0

 All DTBs

dtb-$(CONFIG_ATH79)			+= ar9132_tl_wr1043nd_v1.dtb

dtb-$(CONFIG_ATH79)			+= ar9331_dragino_ms14.dtb

dtb-$(CONFIG_ATH79)			+= ar9331_omega.dtb

dtb-$(CONFIG_ATH79)			+= ar9331_openembed_som9331_board.dtb

dtb-$(CONFIG_ATH79)			+= ar9331_tl_mr3020.dtb

 SPDX-License-Identifier: GPL-2.0-only

dtb-$(CONFIG_FIT_IMAGE_FDT_NI169445)	+= 169445.dtb

# SPDX-License-Identifier: GPL-2.0





 SPDX-License-Identifier: GPL-2.0-only

	ocelot_pcb120.dtb \

	serval_pcb105.dtb \



obj-$(CONFIG_BUILTIN_DTB)	+= $(addsuffix .o, $(dtb-y))

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_DTB_RT305X_EVAL)	+= rt3052_eval.dtb

dtb-$(CONFIG_DTB_MT7620A_EVAL)	+= mt7620a_eval.dtb

dtb-$(CONFIG_DTB_VOCORE2)	+= vocore2.dtb

obj-$(CONFIG_BUILTIN_DTB)	+= $(addsuffix .o, $(dtb-y))

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_DT_EASY50712)	+= easy50712.dtb

obj-$(CONFIG_BUILTIN_DTB)	+= $(addsuffix .o, $(dtb-y))

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_MIPS_MALTA)	+= malta.dtb

dtb-$(CONFIG_LEGACY_BOARD_SEAD3)	+= sead3.dtb

obj-$(CONFIG_BUILTIN_DTB)	+= $(addsuffix .o, $(dtb-y))

# SPDX-License-Identifier: GPL-2.0

dtb-y	+= cisco_sg220-26.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_DT_BCM96368MVWG)		+= bcm96368mvwg.dtb

dtb-$(CONFIG_DT_BCM97125CBMB)		+= bcm97125cbmb.dtb

dtb-$(CONFIG_DT_BCM97358SVMB)		+= bcm97358svmb.dtb

dtb-$(CONFIG_DT_BCM97362SVMB)		+= bcm97362svmb.dtb

dtb-$(CONFIG_DT_BCM97425SVMB)		+= bcm97425svmb.dtb



	bcm3368-netgear-cvg834g.dtb \

	bcm6358-neufbox4-sercomm.dtb \

	bcm6362-neufbox6-sercomm.dtb \

	bcm63268-comtrend-vr-3032u.dtb \

	bcm93384wvg_viper.dtb \

	bcm96368mvwg.dtb \

	bcm9ejtagprb.dtb \

	bcm97125cbmb.dtb \

	bcm97420c.dtb \

	bcm97425svmb.dtb \

	bcm97435svmb.dtb

obj-$(CONFIG_BUILTIN_DTB)	+= $(addsuffix .o, $(dtb-y))

# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0



# SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_HIBERNATION) += cpu.o hibernate.o hibernate_asm.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only



#  Copyright 2000, 2008 MontaVista Software Inc.

  Author: MontaVista Software, Inc. <source@mvista.com>



# Makefile for the Alchemy Au1xx0 CPUs, generic files.

#

 SPDX-License-Identifier: GPL-2.0-only



 Alchemy Develboards





obj-y += bcsr.o platform.o db1000.o db1200.o db1300.o db1550.o db1xxx.o

obj-$(CONFIG_PM)		+= pm.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for MIPS crypto files..





obj-$(CONFIG_CRYPTO_CRC32_MIPS) += crc32-mips.o

chacha-mips-y := chacha-core.o chacha-glue.o

AFLAGS_chacha-core.o += -O2 # needed to fill branch delay slots

poly1305-mips-y := poly1305-core.o poly1305-glue.o

perlasm-flavour-$(CONFIG_32BIT) := o32

perlasm-flavour-$(CONFIG_64BIT) := 64

quiet_cmd_perlasm = PERLASM $@



$(obj)/poly1305-core.S: $(src)/poly1305-mips.pl FORCE

	$(call if_changed,perlasm)

targets += poly1305-core.S

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the PCI specific kernel interface routines under Linux.





obj-y				+= pci.o

obj-$(CONFIG_PCI_DRIVERS_LEGACY)+= pci-legacy.o

obj-$(CONFIG_PCI_DRIVERS_GENERIC)+= pci-generic.o



 PCI bus host bridge specific code



obj-$(CONFIG_PCI_GT64XXX_PCI0)	+= ops-gt64xxx_pci0.o

obj-$(CONFIG_SOC_TX3927)	+= ops-tx3927.o

obj-$(CONFIG_PCI_VR41XX)	+= ops-vr41xx.o pci-vr41xx.o

					ops-bcm63xx.o

obj-$(CONFIG_MIPS_ALCHEMY)	+= pci-alchemy.o

obj-$(CONFIG_SOC_AR71XX)	+= pci-ar71xx.o

obj-$(CONFIG_PCI_XTALK_BRIDGE)	+= pci-xtalk-bridge.o

#

 These are still pretty much in the old state, watch, go blind.



obj-$(CONFIG_SIBYTE_SB1250)	+= fixup-sb1250.o pci-sb1250.o

obj-$(CONFIG_SIBYTE_BCM112X)	+= fixup-sb1250.o pci-sb1250.o

obj-$(CONFIG_SIBYTE_BCM1x80)	+= pci-bcm1480.o pci-bcm1480ht.o

obj-$(CONFIG_SOC_MT7620)	+= pci-mt7620.o

obj-$(CONFIG_SOC_RT3883)	+= pci-rt3883.o

obj-$(CONFIG_TANBAC_TB0219)	+= fixup-tb0219.o

obj-$(CONFIG_TANBAC_TB0226)	+= fixup-tb0226.o

obj-$(CONFIG_TANBAC_TB0287)	+= fixup-tb0287.o

obj-$(CONFIG_SOC_TX4927)	+= pci-tx4927.o

obj-$(CONFIG_SOC_TX4939)	+= pci-tx4939.o

obj-$(CONFIG_TOSHIBA_RBTX4938)	+= fixup-rbtx4938.o

obj-$(CONFIG_VICTOR_MPC30X)	+= fixup-mpc30x.o



# SPDX-License-Identifier: GPL-2.0

  Makefile for the Hexagon arch





 Do not use GP-relative jumps

KBUILD_CFLAGS += -G0



 Do not use single-byte enums; these will overflow.



# We must use long-calls:

KBUILD_CFLAGS += -mlong-calls

 Modules must use either long-calls, or use pic/plt.

 Use long-calls for now, it's easier.  And faster.

 KBUILD_CFLAGS_MODULE += -fPIC

# KBUILD_LDFLAGS_MODULE += -shared



cflags-y += $(call cc-option,-mv${CONFIG_HEXAGON_ARCH_VERSION})

aflags-y += $(call cc-option,-mv${CONFIG_HEXAGON_ARCH_VERSION})



KBUILD_AFLAGS += $(aflags-y)



# Thread-info register will be r19.  This value is not configureable;

 it is hard-coded in several files.



 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Hexagon memory management subsystem

#

obj-y := init.o ioremap.o uaccess.o vm_fault.o cache.o

obj-y += copy_to_user.o copy_from_user.o vm_tlb.o

# SPDX-License-Identifier: GPL-2.0

extra-y := head.o vmlinux.lds

obj-$(CONFIG_SMP) += smp.o



obj-$(CONFIG_KGDB)    += kgdb.o

obj-$(CONFIG_MODULES) += module.o hexagon_ksyms.o

 Modules required to work with the Hexagon Virtual Machine







 SPDX-License-Identifier: GPL-2.0-only



# Makefile for hexagon-specific library files.

#

obj-y = checksum.o io.o memcpy.o memset.o memcpy_likely_aligned.o \

         divsi3.o modsi3.o udivsi3.o  umodsi3.o

 This file is included by the global makefile so that you can add your own

 architecture-specific flags and dependencies.



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.





LDFLAGS_vmlinux :=

ifeq ($(CONFIG_DYNAMIC_FTRACE),y)

	CC_FLAGS_FTRACE := -fpatchable-function-entry=8

endif

ifeq ($(CONFIG_CMODEL_MEDLOW),y)

KBUILD_CFLAGS_MODULE += -mcmodel=medany

endif



	KBUILD_AFLAGS += -mabi=lp64

	KBUILD_LDFLAGS += -melf64lriscv



	KBUILD_CFLAGS += -mabi=ilp32

	KBUILD_AFLAGS += -mabi=ilp32



	KBUILD_CFLAGS += -mno-relax

ifndef CONFIG_AS_IS_LLVM

	KBUILD_AFLAGS += -Wa,-mno-relax

endif

endif

# ISA string setting

riscv-march-$(CONFIG_ARCH_RV32I)	:= rv32ima

riscv-march-$(CONFIG_ARCH_RV64I)	:= rv64ima

riscv-march-$(CONFIG_RISCV_ISA_C)	:= $(riscv-march-y)c

KBUILD_CFLAGS += -march=$(subst fd,,$(riscv-march-y))





ifeq ($(CONFIG_CMODEL_MEDANY),y)

	KBUILD_CFLAGS += -mcmodel=medany

endif

        KBUILD_CFLAGS += -fno-omit-frame-pointer

endif

KBUILD_CFLAGS_MODULE += $(call cc-option,-mno-relax)

 GCC versions that support the "-mstrict-align" option default to allowing

 unaligned accesses.  While unaligned accesses are explicitly allowed in the

# RISC-V ISA, they're emulated by machine mode traps on all extant

# architectures.  It's faster to have GCC emit only aligned accesses.

KBUILD_CFLAGS += $(call cc-option,-mstrict-align)

ifeq ($(CONFIG_STACKPROTECTOR_PER_TASK),y)

				-mstack-protector-guard-offset=$(shell	  \

					include/generated/asm-offsets.h))

endif

 arch specific predefines for sparse

CHECKFLAGS += -D__riscv -D__riscv_xlen=$(BITS)

# Default target when executing plain make

KBUILD_IMAGE := $(boot)/xipImage

KBUILD_IMAGE	:= $(boot)/Image.gz

endif

head-y := arch/riscv/kernel/head.o



libs-y += arch/riscv/lib/



PHONY += vdso_install

vdso_install:

	$(Q)$(MAKE) $(build)=arch/riscv/kernel/vdso $@

ifeq ($(KBUILD_EXTMOD),)

vdso_prepare: prepare0

	$(Q)$(MAKE) $(build)=arch/riscv/kernel/vdso include/generated/vdso-offsets.h

endif

endif

ifneq ($(CONFIG_XIP_KERNEL),y)

KBUILD_IMAGE := $(boot)/loader.bin

KBUILD_IMAGE := $(boot)/Image.gz

endif

endif

BOOT_TARGETS := Image Image.gz loader loader.bin xipImage

all:	$(notdir $(KBUILD_IMAGE))

$(BOOT_TARGETS): vmlinux

	@$(kecho) '  Kernel: $(boot)/$@ is ready'

Image.%: Image



zinstall: install-image = Image.gz

install zinstall:

	$(CONFIG_SHELL) $(srctree)/$(boot)/install.sh $(KERNELRELEASE) \



rv32_randconfig:



rv64_randconfig:

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for RISC-V KVM support

#







kvm-y += $(KVM)/coalesced_mmio.o

kvm-y += tlb.o

kvm-y += vcpu_exit.o

kvm-y += vcpu_switch.o

kvm-y += vcpu_sbi.o

kvm-y += vcpu_timer.o

 SPDX-License-Identifier: GPL-2.0-only





KCOV_INSTRUMENT_init.o := n

obj-y += extable.o

obj-$(CONFIG_MMU) += fault.o pageattr.o

obj-y += cacheflush.o





KASAN_SANITIZE_kasan_init.o := n



obj-$(CONFIG_DEBUG_VIRTUAL) += physaddr.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the RISC-V Linux kernel

#

CFLAGS_REMOVE_patch.o	= $(CC_FLAGS_FTRACE)





extra-y += head.o



obj-y	+= cpu.o

obj-y	+= cpufeature.o

obj-y	+= irq.o

obj-y	+= reset.o

obj-y	+= syscall_table.o

obj-y	+= traps.o

obj-y	+= cacheinfo.o

obj-y	+= probes/

obj-$(CONFIG_MMU) += vdso.o vdso/

obj-$(CONFIG_RISCV_M_MODE)	+= traps_misaligned.o

obj-$(CONFIG_FPU)		+= fpu.o

obj-$(CONFIG_SMP)		+= smpboot.o

obj-$(CONFIG_SMP)		+= smp.o

obj-$(CONFIG_SMP)		+= cpu_ops.o

obj-$(CONFIG_MODULES)		+= module.o



obj-$(CONFIG_DYNAMIC_FTRACE)	+= mcount-dyn.o

obj-$(CONFIG_RISCV_BASE_PMU)	+= perf_event.o

obj-$(CONFIG_PERF_EVENTS)	+= perf_callchain.o

obj-$(CONFIG_HAVE_PERF_REGS)	+= perf_regs.o

obj-$(CONFIG_RISCV_SBI)		+= sbi.o

ifeq ($(CONFIG_RISCV_SBI), y)

obj-$(CONFIG_HOTPLUG_CPU)	+= cpu-hotplug.o

obj-$(CONFIG_KGDB)		+= kgdb.o

obj-$(CONFIG_CRASH_DUMP)	+= crash_dump.o

obj-$(CONFIG_JUMP_LABEL)	+= jump_label.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_KPROBES)		+= kprobes.o decode-insn.o simulate-insn.o

CFLAGS_REMOVE_simulate-insn.o = $(CC_FLAGS_FTRACE)

 SPDX-License-Identifier: GPL-2.0-only

# Copied from arch/tile/kernel/vdso/Makefile

# Absolute relocation type $(ARCH_REL_TYPE_ABS) needs to be defined before

 the inclusion of generic Makefile.

ARCH_REL_TYPE_ABS := R_RISCV_32|R_RISCV_64|R_RISCV_JUMP_SLOT

 Symbols present in the vdso

ifdef CONFIG_64BIT



# Files to link into the vdso



ccflags-y := -fno-stack-protector

ifneq ($(c-gettimeofday-y),)



# Build rules

targets := $(obj-vdso) vdso.so vdso.so.dbg vdso.lds

obj-vdso := $(addprefix $(obj)/, $(obj-vdso))

CPPFLAGS_vdso.lds += -P -C -U$(ARCH)

 Disable -pg to prevent insert call site

CFLAGS_REMOVE_vgettimeofday.o = $(CC_FLAGS_FTRACE) -Os

 Disable profiling and instrumentation for VDSO code

KCOV_INSTRUMENT := n

KASAN_SANITIZE := n

UBSAN_SANITIZE := n

# Force dependency

$(obj)/vdso.o: $(obj)/vdso.so

# link rule for the .so file, .lds has to be first

$(obj)/vdso.so.dbg: $(obj)/vdso.lds $(obj-vdso) FORCE

LDFLAGS_vdso.so.dbg = -shared -S -soname=linux-vdso.so.1 \

	--build-id=sha1 --hash-style=both --eh-frame-hdr

 strip rule for the .so file

$(obj)/%.so: $(obj)/%.so.dbg FORCE

	$(call if_changed,objcopy)

 Generate VDSO offsets using helper script

gen-vdsosym := $(srctree)/$(src)/gen_vdso_offsets.sh





# actual build commands

 The DSO images are built using a special linker script

# Make sure only to export the intended __vdso_xxx symbol offsets.

quiet_cmd_vdsold = VDSOLD  $@

      cmd_vdsold = $(LD) $(ld_flags) -T $(filter-out FORCE,$^) -o $@.tmp && \

                   $(OBJCOPY) $(patsubst %, -G __vdso_%, $(vdso-syms)) $@.tmp $@ && \



 install commands for the unstripped file



vdso.so: $(obj)/vdso.so.dbg

	@mkdir -p $(MODLIB)/vdso

	$(call cmd,vdso_install)

 SPDX-License-Identifier: GPL-2.0-only

lib-y			+= delay.o

lib-y			+= memcpy.o

lib-y			+= memset.o

lib-$(CONFIG_MMU)	+= uaccess.o



 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_BPF_JIT) += bpf_jit_core.o

	obj-$(CONFIG_BPF_JIT) += bpf_jit_comp64.o

	obj-$(CONFIG_BPF_JIT) += bpf_jit_comp32.o

endif

obj-y	+= alternative.o



# arch/riscv/boot/Makefile

#

# This file is included by the global makefile so that you can add your own

# architecture-specific flags and dependencies.

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

# Copyright (C) 2018, Anup Patel.

 Author: Anup Patel <anup@brainfault.org>



# Based on the ia64 and arm64 boot/Makefile.

#

KCOV_INSTRUMENT := n

OBJCOPYFLAGS_Image :=-O binary -R .note -R .note.gnu.build-id -R .comment -S

OBJCOPYFLAGS_xipImage :=-O binary -R .note -R .note.gnu.build-id -R .comment -S

targets := Image Image.* loader loader.o loader.lds loader.bin

targets := Image Image.* loader loader.o loader.lds loader.bin xipImage



cmd_mkxip = $(cmd_objcopy)

$(obj)/xipImage: vmlinux FORCE

	$(call if_changed,mkxip)



endif



$(obj)/Image.gz: $(obj)/Image FORCE



$(obj)/loader.o: $(src)/loader.S $(obj)/Image







$(obj)/Image.lzma: $(obj)/Image FORCE





# SPDX-License-Identifier: GPL-2.0

subdir-$(CONFIG_SOC_CANAAN_K210_DTB_BUILTIN) += canaan

subdir-y += microchip

obj-$(CONFIG_BUILTIN_DTB) := $(addsuffix /, $(subdir-y))

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_BUILTIN_DTB) += $(addsuffix .o, $(dtb-y))

# SPDX-License-Identifier: GPL-2.0

ifneq ($(CONFIG_SOC_CANAAN_K210_DTB_SOURCE),"")

obj-$(CONFIG_SOC_CANAAN_K210_DTB_BUILTIN) += $(addsuffix .o, $(dtb-y))

endif

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_BUILTIN_DTB) += $(addsuffix .o, $(dtb-y))



 This file is included by the global makefile so that you can add your own

 architecture-specific flags and dependencies.



 Copyright (C) 2002 - 2007 Jeff Dike (jdike@{addtoit,linux.intel}.com)

# Licensed under the GPL

#

 select defconfig based on actual architecture

        KBUILD_DEFCONFIG := x86_64_defconfig

        KBUILD_DEFCONFIG := i386_defconfig

  endif

        KBUILD_DEFCONFIG := $(SUBARCH)_defconfig

endif

 We require bash because the vmlinux link and loader script cpp use bash

 features.

SHELL := /bin/bash

core-y			+= $(ARCH_DIR)/kernel/		\

			   $(ARCH_DIR)/drivers/		\

			   $(ARCH_DIR)/os-$(OS)/

MODE_INCLUDE	+= -I$(srctree)/$(ARCH_DIR)/include/shared/skas

HEADER_ARCH 	:= $(SUBARCH)



	KBUILD_CFLAGS += -mcmodel=large

endif



include $(srctree)/$(HOST_DIR)/Makefile.um



ARCH_INCLUDE	:= -I$(srctree)/$(SHARED_HEADERS)

KBUILD_CPPFLAGS += -I$(srctree)/$(HOST_DIR)/um

 -Dvmap=kernel_vmap prevents anything from referencing the libpcap.o symbol so

# named - it's a common symbol in libpcap, so we get a binary which crashes.

#

# Same things for in6addr_loopback and mktime - found in libc. For these two we

 only get link-time error, luckily.



# -Dlongjmp=kernel_longjmp prevents anything from referencing the libpthread.a

 embedded copy of longjmp, same thing for setjmp.



# These apply to USER_CFLAGS to.

KBUILD_CFLAGS += $(CFLAGS) $(CFLAGS-y) -D__arch_um__ \

	$(ARCH_INCLUDE) $(MODE_INCLUDE) -Dvmap=kernel_vmap	\

	-Din6addr_any=kernel_in6addr_any -Dstrrchr=kernel_strrchr

KBUILD_AFLAGS += $(ARCH_INCLUDE)

USER_CFLAGS = $(patsubst $(KERNEL_DEFINES),,$(patsubst -I%,,$(KBUILD_CFLAGS))) \

		$(ARCH_INCLUDE) $(MODE_INCLUDE) $(filter -I%,$(CFLAGS)) \

		-idirafter $(objtree)/include -D__KERNEL__ -D__UM_HOST__

This will adjust *FLAGS accordingly to the platform.

include $(srctree)/$(ARCH_DIR)/Makefile-os-$(OS)

		   -I$(srctree)/$(HOST_DIR)/include/uapi \

		   -I$(objtree)/$(HOST_DIR)/include/generated \



# -Derrno=kernel_errno - This turns all kernel references to errno into

# kernel_errno to separate them from the libc errno.  This allows -fno-common

# in KBUILD_CFLAGS.  Otherwise, it would cause ld to complain about the two different

# errnos.

 These apply to kernelspace only.



# strip leading and trailing whitespace to make the USER_CFLAGS removal of these

# defines more robust

KERNEL_DEFINES = $(strip -Derrno=kernel_errno -Dsigprocmask=kernel_sigprocmask \

KBUILD_CFLAGS += $(KERNEL_DEFINES)

PHONY += linux

all: linux

linux: vmlinux

	$(Q)ln -f $< $@

  echo '* linux		- Binary kernel image (./linux) - for backward'

  echo '		   compatibility only, this creates a hard link to the'

  echo '		   find in the kernel root.'

endef

archheaders:

	$(Q)$(MAKE) -f $(srctree)/Makefile ARCH=$(HEADER_ARCH) asm-generic archheaders

archprepare:

	$(Q)$(MAKE) $(build)=$(HOST_DIR)/um include/generated/user_constants.h

LINK-$(CONFIG_LD_SCRIPT_STATIC) += -static





# Options used by linker script

export LDS_START      := $(START)

export LDS_ELF_FORMAT := $(ELF_FORMAT)

# The wrappers will select whether using "malloc" or the kernel allocator.





# Used by link-vmlinux.sh which has special support for um link



# When cleaning we don't include .config, so we don't include

# TT or skas makefiles and don't clean skas_ptregs.h.

CLEAN_FILES += linux x.i gmon.out

MRPROPER_FILES += arch/$(SUBARCH)/include/generated

archclean:

	@find . \( -name '*.bb' -o -name '*.bbg' -o -name '*.da' \

		-o -name '*.gcov' \) -type f -print | xargs rm -f

# SPDX-License-Identifier: GPL-2.0

 

 Copyright (C) 2000 - 2007 Jeff Dike (jdike@{addtoit,linux.intel}.com)





 Don't instrument UML-specific code



obj-y = execvp.o file.o helper.o irq.o main.o mem.o process.o \

	registers.o sigio.o signal.o start_up.o time.o tty.o \

	umid.o user_syms.o util.o drivers/ skas/





	main.o mem.o process.o registers.o sigio.o signal.o start_up.o time.o \



# SPDX-License-Identifier: GPL-2.0

 

 Copyright (C) 2000, 2002 Jeff Dike (jdike@karaya.com)





tuntap-objs := tuntap_kern.o tuntap_user.o

obj-y = 

obj-$(CONFIG_UML_NET_TUNTAP) += tuntap.o

include arch/um/scripts/Makefile.rules

# SPDX-License-Identifier: GPL-2.0

#

# Copyright (C) 2002 - 2007 Jeff Dike (jdike@{linux.intel,addtoit}.com)

#

obj-y := mem.o process.o



# SPDX-License-Identifier: GPL-2.0

 

 Copyright (C) 2000, 2002, 2003 Jeff Dike (jdike@karaya.com)





 pcap is broken in 2.5 because kbuild doesn't allow pcap.a to be linked

# in to pcap.o

slip-objs := slip_kern.o slip_user.o

slirp-objs := slirp_kern.o slirp_user.o

vector-objs := vector_kern.o vector_user.o vector_transports.o

mconsole-objs := mconsole_kern.o mconsole_user.o

port-objs := port_kern.o port_user.o

harddog-objs := harddog_kern.o harddog_user.o

rtc-objs := rtc_kern.o rtc_user.o







	$(LD) -r -dp -o $@ $^ $(ld_flags)

	$(LD) -r -dp -o $@ $^ $(ld_flags)

XXX: The call below does not work because the flags are added before the

 object name, so nothing from the library gets linked.

#$(call if_changed,ld)

# When the above is fixed, don't forget to add this too!

#targets += $(obj)/pcap.o

obj-y := stdio_console.o fd.o chan_kern.o chan_user.o line.o

obj-$(CONFIG_STDERR_CONSOLE) += stderr_console.o

obj-$(CONFIG_UML_NET_SLIP) += slip.o slip_common.o

obj-$(CONFIG_UML_NET_VECTOR) += vector.o

obj-$(CONFIG_UML_NET_PCAP) += pcap.o

obj-$(CONFIG_UML_NET) += net.o 

obj-$(CONFIG_MMAPPER) += mmapper_kern.o 

obj-$(CONFIG_BLK_DEV_UBD) += ubd.o 

obj-$(CONFIG_NULL_CHAN) += null.o 

obj-$(CONFIG_PORT_CHAN) += port.o

obj-$(CONFIG_PTY_CHAN) += pty.o

obj-$(CONFIG_XTERM_CHAN) += xterm.o xterm_kern.o

obj-$(CONFIG_UML_WATCHDOG) += harddog.o

obj-$(CONFIG_UML_RANDOM) += random.o

obj-$(CONFIG_UML_RTC) += rtc.o

obj-$(CONFIG_UML_PCI_OVER_VIRTIO) += virt-pci.o

 pcap_user.o must be added explicitly.



# SPDX-License-Identifier: GPL-2.0

#

# Copyright (C) 2002 - 2007 Jeff Dike (jdike@{addtoit,linux,intel}.com)

#

 Don't instrument UML-specific code; without this, we may crash when

# accessing the instrumentation buffer for the first time from the

# kernel.

KCOV_INSTRUMENT                := n

                        -DELF_ARCH=$(LDS_ELF_ARCH)	\

extra-y := vmlinux.lds

obj-y = config.o exec.o exitcode.o irq.o ksyms.o mem.o \

	um_arch.o umid.o maccess.o kmsg_dump.o capflags.o skas/

obj-$(CONFIG_BLK_DEV_INITRD) += initrd.o

obj-$(CONFIG_GPROF)	+= gprof_syms.o

obj-$(CONFIG_STACKTRACE) += stacktrace.o

obj-$(CONFIG_GENERIC_PCI_IOMAP) += ioport.o





targets := config.c config.tmp capflags.c

 Be careful with the below Sed code - sed is pitfall-rich!

 We use sed to lower build requirements, for "embedded" builders for instance.



$(obj)/config.tmp: $(objtree)/.config FORCE



quiet_cmd_quote1 = QUOTE   $@

		   $< > $@

	$(call if_changed,quote2)



cpufeature = $(src)/../../x86/include/asm/cpufeatures.h

vmxfeature = $(src)/../../x86/include/asm/vmxfeatures.h

$(obj)/capflags.c: $(cpufeature) $(vmxfeature) $(src)/../../x86/kernel/cpu/mkcapflags.sh FORCE



quiet_cmd_quote2 = QUOTE   $@

		  -e 's/"CONFIG"//'            \

		  -e 'a \'                     \

		  -e '}'                       \

		  $< > $@

# SPDX-License-Identifier: GPL-2.0

#

# Copyright (C) 2002 - 2007 Jeff Dike (jdike@{addtoit,linux.intel}.com)

#

obj-y := clone.o mmu.o process.o syscall.o uaccess.o

 clone.o is in the stub, so it can't be built with profiling

# GCC hardened also auto-enables -fpic, but we need %ebx so it can't work ->

 disable it









 arch/h8300/Makefile



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



 (C) Copyright 2002-2015 Yoshinori Sato <ysato@users.sourceforge.jp>





KBUILD_DEFCONFIG := edosk2674_defconfig

cflags-$(CONFIG_CPU_H8300H)	:= -mh

ldflags-$(CONFIG_CPU_H8S)	:= -mh8300self_linux

KBUILD_CFLAGS += $(cflags-y)

KBUILD_CFLAGS += -mint32 -fno-builtin

KBUILD_CFLAGS += -DUTS_SYSNAME=\"uClinux\"

KBUILD_LDFLAGS += $(ldflags-y)





libs-y	+= arch/$(ARCH)/lib/



vmlinux.srec vmlinux.bin zImage uImage.bin: vmlinux



define archhelp

  @echo  'vmlinux.bin  - Create raw binary'

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux h8300-specific parts of the memory manager.

#

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.







obj-y := process.o traps.o ptrace.o \

	 signal.o setup.o syscalls.o \

	 irq.o entry.o



obj-$(CONFIG_MODULES) += module.o h8300_ksyms.o

obj-$(CONFIG_H8300H_SIM) += sim-console.o





 SPDX-License-Identifier: GPL-2.0-only



# Makefile for H8/300-specific library files..

#

lib-y  = memcpy.o memset.o abs.o \

	 mulsi3.o udivsi3.o muldi3.o moddivsi3.o \

	 ashldi3.o lshrdi3.o ashrdi3.o ucmpdi2.o \

	 delay.o

# SPDX-License-Identifier: GPL-2.0

 arch/h8300/boot/Makefile





OBJCOPYFLAGS_vmlinux.srec := -Osrec

OBJCOPYFLAGS_vmlinux.bin  := -Obinary

OBJCOPYFLAGS_zImage := -O binary -R .note -R .comment -R .stab -R .stabstr -S

UIMAGE_ENTRYADDR = $(shell /bin/bash -c 'printf "0x%08x" \

	$$[$(CONFIG_RAMBASE) + $(CONFIG_OFFSET)]')

$(obj)/vmlinux.srec $(obj)/vmlinux.bin:  vmlinux FORCE

	$(call if_changed,objcopy)

$(obj)/zImage: $(obj)/compressed/vmlinux FORCE

	$(call if_changed,objcopy)

$(obj)/compressed/vmlinux: FORCE



$(obj)/uImage.bin: $(obj)/vmlinux.bin

	$(call if_changed,uimage,none)

# SPDX-License-Identifier: GPL-2.0

#

 linux/arch/sh/boot/compressed/Makefile



 create a compressed vmlinux image from the original vmlinux







OBJECTS = $(obj)/head.o $(obj)/misc.o



 IMAGE_OFFSET is the load offset of the compression loader

 Assign dummy values if these 2 variables are not defined,

 in order to suppress error message.



IMAGE_OFFSET := $(shell printf "0x%08x" $$(($(CONFIG_MEMORY_START)+$(CONFIG_BOOT_LINK_OFFSET))))



$(obj)/vmlinux: $(OBJECTS) $(obj)/piggy.o $(LIBGCC) FORCE



$(obj)/vmlinux.bin: vmlinux FORCE

	$(call if_changed,objcopy)

suffix-$(CONFIG_KERNEL_LZO)     := lzo

$(obj)/vmlinux.bin.$(suffix-y): $(obj)/vmlinux.bin FORCE

	$(call if_changed,$(suffix-y))

LDFLAGS_piggy.o := -r --format binary --oformat elf32-h8300-linux -T

OBJCOPYFLAGS := -O binary

	$(call if_changed,ld)

# SPDX-License-Identifier: GPL-2.0

BUILTIN_DTB := $(patsubst "%",%,$(CONFIG_H8300_BUILTIN_DTB)).dtb.o

endif



dtb-$(CONFIG_H8S_SIM) := h8s_sim.dtb



 arch/arm64/Makefile



 This file is included by the global makefile so that you can add your own

 architecture-specific flags and dependencies.



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



 Copyright (C) 1995-2001 by Russell King



LDFLAGS_vmlinux	:=--no-undefined -X

 Pass --no-apply-dynamic-relocs to restore pre-binutils-2.27 behaviour

 for relative relocs, since this leads to better Image compression

# with the relocation offsets always being zero.



ifeq ($(CONFIG_ARM64_ERRATUM_843419),y)

LDFLAGS_vmlinux	+= --fix-cortex-a53-843419

  endif

endif

		asm volatile("and w0, w0, %w0" :: "K" (4294967295));	\





		   $(compat_vdso) $(cc_has_k_constraint)



KBUILD_CFLAGS	+= $(call cc-option,-mabi=lp64)

KBUILD_AFLAGS	+= $(call cc-option,-mabi=lp64)

 Avoid generating .eh_frame* sections.



prepare: stack_protector_prepare

stack_protector_prepare: prepare0

				-mstack-protector-guard-reg=sp_el0	  \

			awk '{if ($$2 == "TSK_STACK_CANARY") print $$3;}' \



 Ensure that if the compiler supports branch protection we default it

 off, this will be overridden if we are using branch protection.



 We enable additional protection for leaf functions as there is some

 narrow potential for ROP protection benefits and no substantial

 performance impact has been observed.

branch-prot-flags-$(CONFIG_CC_HAS_BRANCH_PROT_PAC_RET_BTI) := -mbranch-protection=pac-ret+leaf+bti

branch-prot-flags-$(CONFIG_CC_HAS_BRANCH_PROT_PAC_RET) := -mbranch-protection=pac-ret+leaf

endif

 -march=armv8.3-a enables the non-nops instructions for PAC, to avoid the

 compiler to generate them and consequently to break the single image contract

 we pass it only to the assembler. This option is utilized only in case of non

# integrated assemblers.



KBUILD_CFLAGS += $(branch-prot-flags-y)

ifeq ($(CONFIG_AS_HAS_ARMV8_4), y)

# make sure to pass the newest target architecture to -march.

asm-arch := armv8.4-a

endif

ifeq ($(CONFIG_AS_HAS_ARMV8_5), y)

# make sure to pass the newest target architecture to -march.

asm-arch := armv8.5-a

endif

ifdef asm-arch

KBUILD_CFLAGS	+= -Wa,-march=$(asm-arch) \

		   -DARM64_ASM_ARCH='"$(asm-arch)"'

endif

KBUILD_CFLAGS	+= -ffixed-x18

endif

ifeq ($(CONFIG_CPU_BIG_ENDIAN), y)

KBUILD_CPPFLAGS	+= -mbig-endian

CHECKFLAGS	+= -D__AARCH64EB__

# Prefer the baremetal ELF build target, but not all toolchains include

 it so fall back to the standard linux version if needed.

KBUILD_LDFLAGS	+= -EB $(call ld-option, -maarch64elfb, -maarch64linuxb -z norelro)

UTS_MACHINE	:= aarch64_be

KBUILD_CPPFLAGS	+= -mlittle-endian

CHECKFLAGS	+= -D__AARCH64EL__

 Same as above, prefer ELF but fall back to linux target if needed.

KBUILD_LDFLAGS	+= -EL $(call ld-option, -maarch64elf, -maarch64linux -z norelro)



ifeq ($(CONFIG_LD_IS_LLD), y)



CHECKFLAGS	+= -D__aarch64__

  KBUILD_CPPFLAGS += -DCC_USING_PATCHABLE_FUNCTION_ENTRY

  CC_FLAGS_FTRACE := -fpatchable-function-entry=2

endif

 Default value



ifeq ($(CONFIG_KASAN_SW_TAGS), y)

KASAN_SHADOW_SCALE_SHIFT := 4



KBUILD_CFLAGS += -DKASAN_SHADOW_SCALE_SHIFT=$(KASAN_SHADOW_SCALE_SHIFT)

KBUILD_CPPFLAGS += -DKASAN_SHADOW_SCALE_SHIFT=$(KASAN_SHADOW_SCALE_SHIFT)

KBUILD_AFLAGS += -DKASAN_SHADOW_SCALE_SHIFT=$(KASAN_SHADOW_SCALE_SHIFT)

libs-y		:= arch/arm64/lib/ $(libs-y)



 Default target when executing plain make

boot		:= arch/arm64/boot



all:	Image.gz



	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@

Image.%: Image



install: install-image := Image

zinstall: install-image := Image.gz

install zinstall:

	$(CONFIG_SHELL) $(srctree)/$(boot)/install.sh $(KERNELRELEASE) \



PHONY += vdso_install

vdso_install:

	$(Q)$(MAKE) $(build)=arch/arm64/kernel/vdso $@



ifeq ($(CONFIG_ARM64_USE_LSE_ATOMICS),y)

  ifneq ($(CONFIG_ARM64_LSE_ATOMICS),y)

	@echo "warning: LSE atomics not supported by binutils" >&2

  endif

endif

ifeq ($(KBUILD_EXTMOD),)

# We need to generate vdso-offsets.h before compiling certain files in kernel/.

# In order to do that, we should use the archprepare target, but we can't since

 asm-offsets.h is included in some files used to generate vdso-offsets.h, and

# asm-offsets.h is built in prepare0, for which archprepare is a dependency.

 Therefore we need to generate the header after prepare0 has been made, hence

# this hack.

prepare: vdso_prepare

	$(Q)$(MAKE) $(build)=arch/arm64/kernel/vdso \

ifdef CONFIG_COMPAT_VDSO

	include/generated/vdso32-offsets.h arch/arm64/kernel/vdso32/vdso.so

endif

endif

  echo  '* Image.gz      - Compressed kernel image (arch/$(ARCH)/boot/Image.gz)'

  echo  '  Image         - Uncompressed kernel image (arch/$(ARCH)/boot/Image)'

  echo  '  install       - Install uncompressed kernel'

  echo  '  zinstall      - Install compressed kernel'

  echo  '                  Install using (your) ~/bin/installkernel or'

  echo  '                  (distribution) /sbin/installkernel or'

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Kernel-based Virtual Machine module





ccflags-y += -I $(srctree)/$(src)





kvm-y := $(KVM)/kvm_main.o $(KVM)/coalesced_mmio.o $(KVM)/eventfd.o \

	 arm.o mmu.o mmio.o psci.o perf.o hypercalls.o pvtime.o \

	 guest.o debug.o reset.o sys_regs.o \

	 arch_timer.o trng.o\

	 vgic/vgic-irqfd.o vgic/vgic-v2.o \

	 vgic/vgic-v3.o vgic/vgic-v4.o \

	 vgic/vgic-mmio-v3.o vgic/vgic-kvm-device.o \

	 vgic/vgic-its.o vgic/vgic-debug.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for Kernel-based Virtual Machine module, HYP part





incdir := $(srctree)/$(src)/include

subdir-asflags-y := -I$(incdir)



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Kernel-based Virtual Machine module, HYP/nVHE part

#

asflags-y := -D__KVM_NVHE_HYPERVISOR__ -D__DISABLE_EXPORTS



hostprogs := gen-hyprel





obj-y := timer-sr.o sysreg-sr.o debug-sr.o switch.o tlb.o hyp-init.o host.o \

	 hyp-main.o hyp-smp.o psci-relay.o early_alloc.o stub.o page_alloc.o \

	 ../fpsimd.o ../hyp-entry.o ../exception.o ../pgtable.o



## Build rules for compiling nVHE hyp code

## Output of this folder is `kvm_nvhe.o`, a partially linked object

##

hyp-obj := $(patsubst %.o,%.nvhe.o,$(obj-y))

obj-y := kvm_nvhe.o

extra-y := $(hyp-obj) kvm_nvhe.tmp.o kvm_nvhe.rel.o hyp.lds hyp-reloc.S hyp-reloc.o

 1) Compile all source files to `.nvhe.o` object files. The file extension

#    avoids file name clashes for files shared with VHE.

$(obj)/%.nvhe.o: $(src)/%.c FORCE

	$(call if_changed_rule,cc_o_c)

$(obj)/%.nvhe.o: $(src)/%.S FORCE

	$(call if_changed_rule,as_o_S)

 2) Compile linker script.

$(obj)/hyp.lds: $(src)/hyp.lds.S FORCE

	$(call if_changed_dep,cpp_lds_S)

# 3) Partially link all '.nvhe.o' files and apply the linker script.

#    Prefixes names of ELF sections with '.hyp', eg. '.hyp.text'.

    Note: The following rule assumes that the 'ld' rule puts LDFLAGS before

          the list of dependencies to form '-T $(obj)/hyp.lds'. This is to

          keep the dependency on the target while avoiding an error from

          GNU ld if the linker script is passed to it twice.

	$(call if_changed,ld)

# 4) Generate list of hyp code/data positions that need to be relocated at

    runtime. Because the hypervisor is part of the kernel binary, relocations

#    produce a kernel VA. We enumerate relocations targeting hyp at build time

    and convert the kernel VAs at those positions to hyp VAs.

	$(call if_changed,hyprel)

 5) Compile hyp-reloc.S and link it into the existing partially linked object.

    The object file now contains a section with pointers to hyp positions that

#    will contain kernel VAs at runtime. These pointers have relocations on them

#    so that they get updated as the hyp object is linked into `vmlinux`.

	$(call if_changed,ld)

 6) Produce the final 'kvm_nvhe.o', ready to be linked into 'vmlinux'.

#    Prefixes names of ELF symbols with '__kvm_nvhe_'.



# The HYPREL command calls `gen-hyprel` to generate an assembly file with

 a list of relocations targeting hyp code/data.

      cmd_hyprel = $(obj)/gen-hyprel $< > $@

 The HYPCOPY command uses `objcopy` to prefix all ELF symbol names

# to avoid clashes with VHE code/data.



# Remove ftrace, Shadow Call Stack, and CFI CFLAGS.

 This is equivalent to the 'notrace', '__noscs', and '__nocfi' annotations.



# KVM nVHE code is run at a different exception code with a different map, so

# compiler instrumentation that inserts callbacks or checks into the code may

# cause crashes. Just disable it.

GCOV_PROFILE	:= n

KASAN_SANITIZE	:= n

UBSAN_SANITIZE	:= n



# Skip objtool checking for this directory because nVHE code is compiled with

# non-standard build rules.

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Kernel-based Virtual Machine module, HYP/nVHE part

#



obj-y := timer-sr.o sysreg-sr.o debug-sr.o switch.o tlb.o

obj-y += ../vgic-v3-sr.o ../aarch32.o ../vgic-v2-cpuif-proxy.o ../entry.o \

	 ../fpsimd.o ../hyp-entry.o ../exception.o

# SPDX-License-Identifier: GPL-2.0

kapi := $(gen)/asm

kapi-hdrs-y := $(kapi)/cpucaps.h



PHONY += kapi



 Create output directory if not already present





# SPDX-License-Identifier: GPL-2.0

				   context.o proc.o pageattr.o

obj-$(CONFIG_HUGETLB_PAGE)	+= hugetlbpage.o

obj-$(CONFIG_PTDUMP_CORE)	+= ptdump.o

obj-$(CONFIG_TRANS_TABLE)	+= trans_pgd.o

KASAN_SANITIZE_physaddr.o	+= n

obj-$(CONFIG_KASAN)		+= kasan_init.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





CFLAGS_armv8_deprecated.o := -I$(src)



 Remove stack protector to avoid triggering unneeded stack canary

# checks due to randomize_kstack_offset.

CFLAGS_REMOVE_syscall.o	 = -fstack-protector -fstack-protector-strong



# It's not safe to invoke KCOV when portions of the kernel environment aren't

 available or are out-of-sync with HW state. Since `noinstr` doesn't always

 inhibit KCOV instrumentation, disable it for the entire compilation unit.



 Object file lists.

			   entry-common.o entry-fpsimd.o process.o ptrace.o	\

			   io.o vdso.o hyp-stub.o psci.o cpu_ops.o		\

			   smp.o smp_spin_table.o topology.o smccc-call.o	\

			   syscall.o proton-pack.o idreg-override.o idle.o	\





OBJCOPYFLAGS := --prefix-symbols=__efistub_

$(obj)/%.stub.o: $(obj)/%.o FORCE

	$(call if_changed,objcopy)

obj-$(CONFIG_COMPAT)			+= sys32.o signal32.o			\

obj-$(CONFIG_PERF_EVENTS)		+= perf_regs.o perf_callchain.o

obj-$(CONFIG_HW_PERF_EVENTS)		+= perf_event.o

obj-$(CONFIG_HAVE_HW_BREAKPOINT)	+= hw_breakpoint.o

obj-$(CONFIG_CPU_PM)			+= sleep.o suspend.o

obj-$(CONFIG_CPU_IDLE)			+= cpuidle.o

obj-$(CONFIG_JUMP_LABEL)		+= jump_label.o

obj-$(CONFIG_EFI)			+= efi.o efi-entry.stub.o		\

obj-$(CONFIG_PCI)			+= pci.o

obj-$(CONFIG_ARMV8_DEPRECATED)		+= armv8_deprecated.o

obj-$(CONFIG_ACPI_NUMA)			+= acpi_numa.o

obj-$(CONFIG_PARAVIRT)			+= paravirt.o

obj-$(CONFIG_KEXEC_CORE)		+= machine_kexec.o relocate_kernel.o	\

					   cpu-reset.o

obj-$(CONFIG_KEXEC_FILE)		+= machine_kexec_file.o kexec_image.o

obj-$(CONFIG_ARM64_RELOC_TEST)		+= arm64-reloc-test.o

arm64-reloc-test-y := reloc_test_core.o reloc_test_syms.o

obj-$(CONFIG_CRASH_DUMP)		+= crash_dump.o

obj-$(CONFIG_CRASH_CORE)		+= crash_core.o

obj-$(CONFIG_ARM64_MTE)			+= mte.o



head-y					:= head.o



AFLAGS_head.o += -DVMLINUX_PATH="\"$(realpath $(objtree)/vmlinux)\""

endif

# for cleaning

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_KPROBES)		+= kprobes.o decode-insn.o	\

				   simulate-insn.o

obj-$(CONFIG_UPROBES)		+= uprobes.o decode-insn.o	\

# SPDX-License-Identifier: GPL-2.0

#

 Building a vDSO image for AArch64.



 Author: Will Deacon <will.deacon@arm.com>

# Heavily based on the vDSO Makefiles for other archs.

#

# Absolute relocation type $(ARCH_REL_TYPE_ABS) needs to be defined before

 the inclusion of generic Makefile.

include $(srctree)/lib/vdso/Makefile

obj-vdso := vgettimeofday.o note.o sigreturn.o

 Build rules

targets := $(obj-vdso) vdso.so vdso.so.dbg

obj-vdso := $(addprefix $(obj)/, $(obj-vdso))



# -Bsymbolic has been added for consistency with arm, the compat vDSO and

 potential future proofing if we end up with internal calls to the exported

# routines, as x86 does (see 6f121e548f83 ("x86, vdso: Reimplement vdso.so

# preparation in build-time C")).

	     -Bsymbolic --build-id=sha1 -n $(btildflags-y) -T

ccflags-y := -fno-common -fno-builtin -fno-stack-protector -ffixed-x18



OBJECT_FILES_NON_STANDARD	:= y



CFLAGS_vgettimeofday.o = -O2 -mcmodel=tiny -fasynchronous-unwind-tables

ifneq ($(c-gettimeofday-y),)



 Disable gcov profiling for VDSO code



targets += vdso.lds



 Force dependency (incbin is bad)

$(obj)/vdso.o : $(obj)/vdso.so

# Link rule for the .so file, .lds has to be first

$(obj)/vdso.so.dbg: $(obj)/vdso.lds $(obj-vdso) FORCE

	$(call if_changed,vdsold_and_vdso_check)

 Strip rule for the .so file

$(obj)/%.so: $(obj)/%.so.dbg FORCE

	$(call if_changed,objcopy)

 Generate VDSO offsets using helper script

gen-vdsosym := $(srctree)/$(src)/gen_vdso_offsets.sh

      cmd_vdsosym = $(NM) $< | $(gen-vdsosym) | LC_ALL=C sort > $@

include/generated/vdso-offsets.h: $(obj)/vdso.so.dbg FORCE

	$(call if_changed,vdsosym)

 Actual build commands

quiet_cmd_vdsold_and_vdso_check = LD      $@



 Install commands for the unstripped file



vdso.so: $(obj)/vdso.so.dbg

	@mkdir -p $(MODLIB)/vdso

	$(call cmd,vdso_install)

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for vdso32

#

# Absolute relocation type $(ARCH_REL_TYPE_ABS) needs to be defined before

 the inclusion of generic Makefile.

include $(srctree)/lib/vdso/Makefile

 Same as cc-*option, but using CC_COMPAT instead of CC

CC_COMPAT ?= $(CC)

CC_COMPAT += --target=arm-linux-gnueabi



ifeq ($(CONFIG_LD_IS_LLD), y)

else



	$(CC_COMPAT) -W$(strip $(1)) -c -x c /dev/null -o "$$TMP",-Wno-$(strip $(1)))

 We cannot use the global flags to compile the vDSO files, the main reason

 being that the 32-bit compiler may be older than the main (64-bit) compiler

 and therefore may not understand flags set using $(cc-option ...). Besides,

# arch-specific options should be taken from the arm Makefile instead of the

 arm64 one.

# As a result we set our own flags here.

# KBUILD_CPPFLAGS and NOSTDINC_FLAGS from top-level Makefile

VDSO_CPPFLAGS += -isystem $(shell $(CC_COMPAT) -print-file-name=include 2>/dev/null)



# Common C and assembly flags

# From top-level Makefile

VDSO_CAFLAGS += $(call cc32-option,-fno-PIE)

ifdef CONFIG_DEBUG_INFO



# From arm Makefile

VDSO_CAFLAGS += $(call cc32-option,-fno-dwarf2-cfi-asm)

ifeq ($(CONFIG_CPU_BIG_ENDIAN), y)

else

VDSO_CAFLAGS += -mlittle-endian

endif

# From arm vDSO Makefile

VDSO_CAFLAGS += -fPIC -fno-builtin -fno-stack-protector

VDSO_CAFLAGS += -march=armv8-a

VDSO_CFLAGS := $(VDSO_CAFLAGS)

VDSO_CFLAGS += -DENABLE_COMPAT_VDSO=1

# KBUILD_CFLAGS from top-level Makefile

VDSO_CFLAGS += -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs \

               -fno-strict-aliasing -fno-common \

# Some useful compiler-dependent flags from top-level Makefile

VDSO_CFLAGS += $(call cc32-option,-Wdeclaration-after-statement,)

VDSO_CFLAGS += $(call cc32-option,-Werror=strict-prototypes)



 The 32-bit compiler does not provide 128-bit integers, which are used in

 some headers that are indirectly included from the vDSO code.

# This hack makes the compiler happy and should trigger a warning/error if

 variables of such type are referenced.

VDSO_CFLAGS += -D__uint128_t='void*'

 Silence some warnings coming from headers that operate on long's

# (on GCC 4.8 or older, there is unfortunately no way to silence this warning)



# Compile as THUMB2 or ARM. Unwinding via frame-pointers in THUMB2 is

# unreliable.

else





 From arm vDSO Makefile

VDSO_LDFLAGS += -z max-page-size=4096 -z common-page-size=4096

VDSO_LDFLAGS += -shared --hash-style=sysv --build-id=sha1



 Borrow vdsomunge.c from the arm vDSO

 We have to use a relative path because scripts/Makefile.host prefixes

# $(hostprogs) with $(obj)



c-obj-vdso-gettimeofday := vgettimeofday.o

ifneq ($(c-gettimeofday-y),)



VDSO_CFLAGS_REMOVE_vgettimeofday.o = $(CC_FLAGS_FTRACE) -Os

 Build rules

obj-vdso := $(c-obj-vdso) $(c-obj-vdso-gettimeofday) $(asm-obj-vdso)

CPPFLAGS_vdso.lds += -P -C -U$(ARCH)

 Force dependency (vdso.s includes vdso.so through incbin)





 Strip rule for vdso.so

$(obj)/vdso.so: OBJCOPYFLAGS := -S





 Link rule for the .so file, .lds has to be first



 Compilation rules for the vDSO sources

	$(call if_changed_dep,vdsocc)

	$(call if_changed_dep,vdsoas)

 Actual build commands

quiet_cmd_vdsold_and_vdso_check = LD32    $@



quiet_cmd_vdsold = LD32    $@

      cmd_vdsold = $(LD_COMPAT) $(VDSO_LDFLAGS) \

                   -T $(filter %.lds,$^) $(filter %.o,$^) -o $@

quiet_cmd_vdsocc = CC32    $@

      cmd_vdsocc = $(CC_COMPAT) -Wp,-MD,$(depfile) $(VDSO_CFLAGS) -c -o $@ $<

      cmd_vdsocc_gettimeofday = $(CC_COMPAT) -Wp,-MD,$(depfile) $(VDSO_CFLAGS) $(VDSO_CFLAGS_gettimeofday_o) -c -o $@ $<

quiet_cmd_vdsoas = AS32    $@

      cmd_vdsoas = $(CC_COMPAT) -Wp,-MD,$(depfile) $(VDSO_AFLAGS) -c -o $@ $<

quiet_cmd_vdsomunge = MUNGE   $@

      cmd_vdsomunge = $(obj)/$(munge) $< $@

 Generate vDSO offsets using helper script (borrowed from the 64-bit vDSO)

gen-vdsosym := $(srctree)/$(src)/../vdso/gen_vdso_offsets.sh

 The AArch64 nm should be able to read an AArch32 binary

      cmd_vdsosym = $(NM) $< | $(gen-vdsosym) | LC_ALL=C sort > $@

# Install commands for the unstripped file

quiet_cmd_vdso_install = INSTALL32 $@



vdso.so: $(obj)/vdso.so.dbg

	@mkdir -p $(MODLIB)/vdso

	$(call cmd,vdso_install)

 SPDX-License-Identifier: GPL-2.0-only

xen-arm-y	+= $(addprefix ../../arm/xen/, enlighten.o grant-table.o p2m.o mm.o)

obj-y		:= xen-arm.o hypercall.o

# SPDX-License-Identifier: GPL-2.0

		   copy_to_user.o copy_page.o				\

		   memset.o memcmp.o strcmp.o strncmp.o strlen.o	\

		   strnlen.o strchr.o strrchr.o tishift.o

ifeq ($(CONFIG_KERNEL_MODE_NEON), y)

CFLAGS_xor-neon.o		+= -ffreestanding

# Enable <arm_neon.h>



lib-$(CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE) += uaccess_flushcache.o

obj-$(CONFIG_CRC32) += crc32.o

obj-$(CONFIG_FUNCTION_ERROR_INJECTION) += error-inject.o

obj-$(CONFIG_ARM64_MTE) += mte.o

obj-$(CONFIG_KASAN_SW_TAGS) += kasan_sw_tags.o

 SPDX-License-Identifier: GPL-2.0-only



 ARM64 networking code



# SPDX-License-Identifier: GPL-2.0



# arch/arm64/boot/Makefile

#

# This file is included by the global makefile so that you can add your own

# architecture-specific flags and dependencies.

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

 Copyright (C) 2012, ARM Ltd.

 Author: Will Deacon <will.deacon@arm.com>



# Based on the ia64 boot/Makefile.

#

OBJCOPYFLAGS_Image :=-O binary -R .note -R .note.gnu.build-id -R .comment -S

targets := Image Image.bz2 Image.gz Image.lz4 Image.lzma Image.lzo





$(obj)/Image.gz: $(obj)/Image FORCE





$(obj)/Image.lzma: $(obj)/Image FORCE



# SPDX-License-Identifier: GPL-2.0

subdir-y += actions

subdir-y += allwinner

subdir-y += amazon

subdir-y += amd

subdir-y += amlogic

subdir-y += apm

subdir-y += apple

subdir-y += arm

subdir-y += bitmain

subdir-y += cavium

subdir-y += lg

subdir-y += marvell

subdir-y += nvidia

subdir-y += rockchip

subdir-y += socionext

subdir-y += ti

subdir-y += toshiba

# SPDX-License-Identifier: GPL-2.0

 Mvebu SoC Family

dtb-$(CONFIG_ARCH_MVEBU) += armada-3720-db.dtb

dtb-$(CONFIG_ARCH_MVEBU) += armada-3720-espressobin.dtb

dtb-$(CONFIG_ARCH_MVEBU) += armada-3720-espressobin-v7.dtb

dtb-$(CONFIG_ARCH_MVEBU) += armada-3720-espressobin-v7-emmc.dtb

dtb-$(CONFIG_ARCH_MVEBU) += armada-3720-uDPU.dtb

dtb-$(CONFIG_ARCH_MVEBU) += armada-7040-mochabin.dtb

dtb-$(CONFIG_ARCH_MVEBU) += armada-8040-db.dtb

dtb-$(CONFIG_ARCH_MVEBU) += armada-8040-mcbin.dtb

dtb-$(CONFIG_ARCH_MVEBU) += armada-8080-db.dtb

dtb-$(CONFIG_ARCH_MVEBU) += cn9130-db.dtb

dtb-$(CONFIG_ARCH_MVEBU) += cn9130-db-B.dtb

dtb-$(CONFIG_ARCH_MVEBU) += cn9131-db.dtb

dtb-$(CONFIG_ARCH_MVEBU) += cn9131-db-B.dtb

dtb-$(CONFIG_ARCH_MVEBU) += cn9132-db.dtb

dtb-$(CONFIG_ARCH_MVEBU) += cn9132-db-B.dtb

dtb-$(CONFIG_ARCH_MVEBU) += cn9130-crb-B.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_MESON) += meson-g12a-x96-max.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-g12b-gsking-x.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-g12b-gtking.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-g12b-gtking-pro.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-g12b-s922x-khadas-vim3.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-g12b-ugoos-am6.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxbb-nanopi-k2.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxbb-vega-s95-meta.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxbb-vega-s95-telos.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxbb-wetek-play2.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxl-s905x-hwacom-amazetv.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxl-s905x-libretech-cc.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxl-s905x-libretech-cc-v2.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxl-s905x-nexbox-a95x.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxl-s905d-mecool-kii-pro.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxl-s905d-p231.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxl-s805x-p241.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxl-s905w-tx3-mini.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxl-s905w-jethome-jethub-j80.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxm-khadas-vim2.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxm-mecool-kiii-pro.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxm-minix-neo-u9h.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxm-nexbox-a1.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxm-q201.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxm-vega-s96.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-gxm-wetek-core2.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-sm1-bananapi-m5.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-sm1-odroid-hc4.dtb

dtb-$(CONFIG_ARCH_MESON) += meson-a1-ad401.dtb

 SPDX-License-Identifier: GPL-2.0-only

				socfpga_stratix10_socdk_nand.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_BCM2835) += bcm2711-rpi-400.dtb \

			      bcm2837-rpi-3-b.dtb \

			      bcm2837-rpi-3-b-plus.dtb \



subdir-y	+= bcm4908

subdir-y	+= stingray

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_BCM4908) += bcm4906-tplink-archer-c2300-v1.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_BCM_IPROC) += bcm958742t.dtb

dtb-$(CONFIG_ARCH_BCM_IPROC) += bcm958802a802x.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_QCOM)	+= apq8096-ifc6640.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= ipq8074-hk10-c1.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8916-alcatel-idol347.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8916-huawei-g7.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8916-longcheer-l8910.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8916-samsung-a3u-eur.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8916-samsung-serranove.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8916-wingtech-wt88047.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8992-bullhead-rev-101.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8992-msft-lumia-octagon-talkman.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8992-xiaomi-libra.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8994-angler-rev-101.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8994-msft-lumia-octagon-cityman.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8994-sony-xperia-kitakami-ivy.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8994-sony-xperia-kitakami-karin.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8994-sony-xperia-kitakami-satsuki.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8996-mtp.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8996-pmi8996-sony-xperia-tone-kagura.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8996-sony-xperia-tone-dora.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8996-sony-xperia-tone-keyaki.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8998-asus-novago-tp370ql.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8998-fxtec-pro1.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8998-hp-envy-x2.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8998-mtp.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8998-oneplus-cheeseburger.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8998-oneplus-dumpling.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8998-sony-xperia-yoshino-maple.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= msm8998-sony-xperia-yoshino-poplar.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= qcs404-evb-4000.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sa8155p-adp.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-idp.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-coachz-r1.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-coachz-r1-lte.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-coachz-r3.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-coachz-r3-lte.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-homestar-r2.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-homestar-r3.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-lazor-r1.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-lazor-r1-kb.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-lazor-r3.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-lazor-r3-kb.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-lazor-limozeen.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-lazor-limozeen-nots.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7180-trogdor-r1.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sc7280-idp2.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sdm630-sony-xperia-nile-discovery.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sdm630-sony-xperia-nile-voyager.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sdm845-cheza-r1.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sdm845-cheza-r3.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sdm845-oneplus-fajita.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sdm850-lenovo-yoga-c630.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sm8150-sony-xperia-kumano-bahamut.dtb

dtb-$(CONFIG_ARCH_QCOM)	+= sm8250-sony-xperia-edo-pdx203.dtb

 SPDX-License-Identifier: GPL-2.0+



# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_ZYNQMP) += avnet-ultra96-rev1.dtb

dtb-$(CONFIG_ARCH_ZYNQMP) += zynqmp-zc1232-revA.dtb

dtb-$(CONFIG_ARCH_ZYNQMP) += zynqmp-zc1254-revA.dtb

dtb-$(CONFIG_ARCH_ZYNQMP) += zynqmp-zc1275-revA.dtb

dtb-$(CONFIG_ARCH_ZYNQMP) += zynqmp-zc1751-xm016-dc2.dtb

dtb-$(CONFIG_ARCH_ZYNQMP) += zynqmp-zc1751-xm018-dc4.dtb



dtb-$(CONFIG_ARCH_ZYNQMP) += zynqmp-sm-k26-revA.dtb



sm-k26-revA-sck-kv-g-revB-dtbs := zynqmp-sm-k26-revA.dtb zynqmp-sck-kv-g-revB.dtbo

smk-k26-revA-sm-k26-revA-sck-kv-g-revB-dtbs := zynqmp-smk-k26-revA.dtb zynqmp-sck-kv-g-revB.dtbo

dtb-$(CONFIG_ARCH_ZYNQMP) += sm-k26-revA-sck-kv-g-revA.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_THUNDER2) += thunder2-99xx.dtb

 SPDX-License-Identifier: GPL-2.0-only

dtb-$(CONFIG_ARCH_ALPINE)	+= alpine-v2-evp.dtb

# SPDX-License-Identifier: GPL-2.0

# Berlin SoC Family

dtb-$(CONFIG_ARCH_BERLIN) += berlin4ct-stb.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_HISI) += hi3670-hikey970.dtb

dtb-$(CONFIG_ARCH_HISI) += hi3798cv200-poplar.dtb

dtb-$(CONFIG_ARCH_HISI) += hi6220-hikey.dtb

dtb-$(CONFIG_ARCH_HISI) += hip06-d03.dtb

# SPDX-License-Identifier: GPL-2.0

	uniphier-ld11-ref.dtb \

	uniphier-ld20-ref.dtb \

 SPDX-License-Identifier: GPL-2.0+





dtb-$(CONFIG_ARCH_ACTIONS) += s900-bubblegum-96.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls1012a-frdm.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls1012a-frwy.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls1012a-oxalis.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls1012a-rdb.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls1028a-kontron-sl28-var1.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls1028a-kontron-sl28-var4.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls1028a-rdb.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls1043a-rdb.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls1046a-frwy.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls1046a-rdb.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls1088a-rdb.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls2080a-qds.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-ls2088a-qds.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-lx2160a-clearfog-cx.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-lx2160a-qds.dtb

dtb-$(CONFIG_ARCH_LAYERSCAPE) += fsl-lx2162a-qds.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mm-evk.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mm-ddr4-evk.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mm-kontron-n801x-s.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mm-venice-gw7901.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mn-evk.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mn-ddr4-evk.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mn-var-som-symphony.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mp-evk.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mq-evk.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mq-hummingboard-pulse.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mq-kontron-pitx-imx8m.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mq-librem5-devkit.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mq-librem5-r2.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mq-librem5-r3.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mq-librem5-r4.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mq-pico-pi.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mq-thor96.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mq-zii-ultra-rmb3.dtb

dtb-$(CONFIG_ARCH_MXC) += imx8mq-zii-ultra-zest.dtb



# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-a64-oceanic-5205-5inmfd.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-a64-pine64-plus.dtb sun50i-a64-pine64.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-a64-pinebook.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-a64-pinephone-1.1.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-a64-pinetab.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-a64-teres-i.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-a100-allwinner-perf1.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h5-emlid-neutis-n5-devboard.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h5-libretech-all-h3-cc.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h5-libretech-all-h3-it.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h5-libretech-all-h5-cc.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h5-nanopi-neo2.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h5-orangepi-pc2.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h5-orangepi-zero-plus.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h5-orangepi-zero-plus2.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h6-beelink-gs1.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h6-orangepi-lite2.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h6-orangepi-one-plus.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h6-pine-h64-model-b.dtb

dtb-$(CONFIG_ARCH_SUNXI) += sun50i-h6-tanix-tx6.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_R8A774A1) += r8a774a1-hihope-rzg2m.dtb

dtb-$(CONFIG_ARCH_R8A774A1) += r8a774a1-hihope-rzg2m-ex.dtb

dtb-$(CONFIG_ARCH_R8A774A1) += r8a774a1-hihope-rzg2m-ex-mipi-2.1.dtb

dtb-$(CONFIG_ARCH_R8A774A1) += r8a774a1-hihope-rzg2m-rev2.dtb



dtb-$(CONFIG_ARCH_R8A774B1) += r8a774b1-hihope-rzg2n.dtb

dtb-$(CONFIG_ARCH_R8A774B1) += r8a774b1-hihope-rzg2n-ex.dtb

dtb-$(CONFIG_ARCH_R8A774B1) += r8a774b1-hihope-rzg2n-ex-mipi-2.1.dtb

dtb-$(CONFIG_ARCH_R8A774B1) += r8a774b1-hihope-rzg2n-rev2.dtb



dtb-$(CONFIG_ARCH_R8A774C0) += r8a774c0-ek874-idk-2121wr.dtb



dtb-$(CONFIG_ARCH_R8A774E1) += r8a774e1-hihope-rzg2h.dtb

dtb-$(CONFIG_ARCH_R8A774E1) += r8a774e1-hihope-rzg2h-ex.dtb

dtb-$(CONFIG_ARCH_R8A774E1) += r8a774e1-hihope-rzg2h-ex-mipi-2.1.dtb

dtb-$(CONFIG_ARCH_R8A77950) += r8a77950-salvator-x.dtb



dtb-$(CONFIG_ARCH_R8A77951) += r8a77951-ulcb.dtb

dtb-$(CONFIG_ARCH_R8A77951) += r8a77951-ulcb-kf.dtb

dtb-$(CONFIG_ARCH_R8A77960) += r8a77960-salvator-x.dtb

dtb-$(CONFIG_ARCH_R8A77960) += r8a77960-salvator-xs.dtb



dtb-$(CONFIG_ARCH_R8A77961) += r8a77961-salvator-xs.dtb



dtb-$(CONFIG_ARCH_R8A77965) += r8a77965-ulcb.dtb

dtb-$(CONFIG_ARCH_R8A77965) += r8a77965-ulcb-kf.dtb





dtb-$(CONFIG_ARCH_R8A77990) += r8a77990-ebisu.dtb





dtb-$(CONFIG_ARCH_R8A77951) += r8a779m1-salvator-xs.dtb



dtb-$(CONFIG_ARCH_R8A77961) += r8a779m3-salvator-xs.dtb



dtb-$(CONFIG_ARCH_R8A77965) += r8a779m5-salvator-xs.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_ROCKCHIP) += px30-evb.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += px30-engicam-px30-core-ctouch2.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += px30-engicam-px30-core-edimm2.2.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3308-evb.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3326-odroid-go2.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3328-nanopi-r2s.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3328-roc-cc.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3368-orion-r68-meta.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3368-px5-evb.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3368-r88.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-evb.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-ficus.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-firefly.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-gru-bob.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-gru-kevin.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-gru-scarlet-kd.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-kobol-helios64.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-leez-p710.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-nanopc-t4.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-nanopi-m4.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-nanopi-r4s.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-pinebook-pro.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-puma-haikou.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-roc-pc-mezzanine.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-roc-pc-plus.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-rock-pi-4b.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-rock-pi-4b-plus.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-rockpro64-v2.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-rockpro64.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3399-sapphire-excavator.dtb

dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3566-quartz64-a.dtb

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_LG1K) += lg1312-ref.dtb

dtb-$(CONFIG_ARCH_LG1K) += lg1313-ref.dtb

 SPDX-License-Identifier: GPL-2.0-only

dtb-$(CONFIG_ARCH_INTEL_SOCFPGA) += socfpga_agilex_socdk.dtb \

				socfpga_agilex_socdk_nand.dtb \

				socfpga_n5x_socdk.dtb

dtb-$(CONFIG_ARCH_KEEMBAY) += keembay-evm.dtb

# SPDX-License-Identifier: GPL-2.0

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_VISCONTI) += tmpv7708-rm-mbrc.dtb

dtb-$(CONFIG_ARCH_VISCONTI) += tmpv7708-visrobo-vrb.dtb

# SPDX-License-Identifier: GPL-2.0

	exynos5433-tm2e.dtb	\

	exynos7-espresso.dtb	\

 SPDX-License-Identifier: GPL-2.0-only





dtb-$(CONFIG_ARCH_REALTEK) += rtd1295-mele-v9.dtb

dtb-$(CONFIG_ARCH_REALTEK) += rtd1295-probox2-ava.dtb



dtb-$(CONFIG_ARCH_REALTEK) += rtd1296-ds418.dtb

dtb-$(CONFIG_ARCH_REALTEK) += rtd1395-bpi-m4.dtb



dtb-$(CONFIG_ARCH_REALTEK) += rtd1619-mjolnir.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_XGENE) += apm-mustang.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_TEGRA_132_SOC) += tegra132-norrin.dtb

dtb-$(CONFIG_ARCH_TEGRA_210_SOC) += tegra210-p2371-0000.dtb

dtb-$(CONFIG_ARCH_TEGRA_210_SOC) += tegra210-p2371-2180.dtb

dtb-$(CONFIG_ARCH_TEGRA_210_SOC) += tegra210-smaug.dtb

dtb-$(CONFIG_ARCH_TEGRA_210_SOC) += tegra210-p2894-0050-a08.dtb

dtb-$(CONFIG_ARCH_TEGRA_186_SOC) += tegra186-p2771-0000.dtb

dtb-$(CONFIG_ARCH_TEGRA_194_SOC) += tegra194-p3509-0000+p3668-0000.dtb

dtb-$(CONFIG_ARCH_TEGRA_234_SOC) += tegra234-sim-vdk.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_MEDIATEK) += mt2712-evb.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt6755-evb.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt6779-evb.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt6795-evb.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt6797-evb.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt6797-x20-dev.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt7622-bananapi-bpi-r64.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8167-pumpkin.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8173-elm.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8183-kukui-jacuzzi-burnet.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8183-kukui-jacuzzi-fennel14.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8183-kukui-jacuzzi-juniper-sku16.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8183-kukui-jacuzzi-kappa.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8183-kukui-jacuzzi-kenzo.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8183-kukui-jacuzzi-willow-sku0.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8183-kukui-jacuzzi-willow-sku1.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8183-kukui-kodama-sku16.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8183-kukui-kodama-sku272.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8183-kukui-kodama-sku288.dtb

dtb-$(CONFIG_ARCH_MEDIATEK) += mt8183-kukui-krane-sku0.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_SEATTLE) += amd-overdrive.dtb \

			husky.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_VEXPRESS) += fvp-base-revc.dtb

# SPDX-License-Identifier: GPL-2.0

#

# Make file to build device tree binaries for boards based on

 Texas Instruments Inc processors



# Copyright (C) 2016-2021 Texas Instruments Incorporated - https://www.ti.com/

#

dtb-$(CONFIG_ARCH_K3) += k3-am654-base-board.dtb

dtb-$(CONFIG_ARCH_K3) += k3-am6528-iot2050-basic-pg2.dtb

dtb-$(CONFIG_ARCH_K3) += k3-am6548-iot2050-advanced.dtb

dtb-$(CONFIG_ARCH_K3) += k3-am6548-iot2050-advanced-pg2.dtb

dtb-$(CONFIG_ARCH_K3) += k3-j721e-sk.dtb



dtb-$(CONFIG_ARCH_K3) += k3-am642-evm.dtb

# SPDX-License-Identifier: GPL-2.0

dtb-$(CONFIG_ARCH_SPRD) += sc9836-openphone.dtb \

			sp9860g-1h10.dtb	\

			sp9863a-1h10.dtb

 SPDX-License-Identifier: GPL-2.0-only



# linux/arch/arm64/crypto/Makefile

#

# Copyright (C) 2014 Linaro Ltd <ard.biesheuvel@linaro.org>

#

sha1-ce-y := sha1-ce-glue.o sha1-ce-core.o

sha2-ce-y := sha2-ce-glue.o sha2-ce-core.o

sha512-ce-y := sha512-ce-glue.o sha512-ce-core.o

obj-$(CONFIG_CRYPTO_SHA3_ARM64) += sha3-ce.o



obj-$(CONFIG_CRYPTO_SM3_ARM64_CE) += sm3-ce.o

sm3-ce-y := sm3-ce-glue.o sm3-ce-core.o



obj-$(CONFIG_CRYPTO_GHASH_ARM64_CE) += ghash-ce.o

ghash-ce-y := ghash-ce-glue.o ghash-ce-core.o



aes-ce-cipher-y := aes-ce-core.o aes-ce-glue.o



obj-$(CONFIG_CRYPTO_AES_ARM64_CE_BLK) += aes-ce-blk.o



obj-$(CONFIG_CRYPTO_AES_ARM64_NEON_BLK) += aes-neon-blk.o



obj-$(CONFIG_CRYPTO_SHA256_ARM64) += sha256-arm64.o

sha256-arm64-y := sha256-glue.o sha256-core.o



obj-$(CONFIG_CRYPTO_CHACHA20_NEON) += chacha-neon.o



obj-$(CONFIG_CRYPTO_POLY1305_NEON) += poly1305-neon.o



obj-$(CONFIG_CRYPTO_NHPOLY1305_NEON) += nhpoly1305-neon.o



obj-$(CONFIG_CRYPTO_AES_ARM64) += aes-arm64.o



aes-neon-bs-y := aes-neonbs-core.o aes-neonbs-glue.o

CFLAGS_aes-glue-ce.o	:= -DUSE_V8_CRYPTO_EXTENSIONS

$(obj)/aes-glue-%.o: $(src)/aes-glue.c FORCE

	$(call if_changed_rule,cc_o_c)

quiet_cmd_perlasm = PERLASM $@



	$(call cmd,perlasm)

$(obj)/sha256-core.S: $(src)/sha512-armv8.pl



# SPDX-License-Identifier: GPL-2.0

 Unified Makefile for i386 and x86_64



# select defconfig based on actual architecture

        KBUILD_DEFCONFIG := x86_64_defconfig

        KBUILD_DEFCONFIG := i386_defconfig

  endif



# For gcc stack alignment is specified with -mpreferred-stack-boundary,

 clang has the option -mstack-alignment for that purpose.

ifneq ($(call cc-option, -mpreferred-stack-boundary=4),)

      cc_stack_align4 := -mpreferred-stack-boundary=2

      cc_stack_align8 := -mpreferred-stack-boundary=3

else ifneq ($(call cc-option, -mstack-alignment=16),)

      cc_stack_align8 := -mstack-alignment=8

endif

# How to compile the 16-bit code.  Note we always compile for -march=i386;

 that way we can complain to the user if the CPU is insufficient.

		   -Wall -Wstrict-prototypes -march=i386 -mregparm=3 \

		   -fno-strict-aliasing -fomit-frame-pointer -fno-pic \

		   -mno-mmx -mno-sse $(call cc-option,-fcf-protection=none)

REALMODE_CFLAGS += -Wno-address-of-packed-member

REALMODE_CFLAGS += $(cc_stack_align4)

REALMODE_CFLAGS += $(CLANG_FLAGS)



# BITS is used as extension for files which are available in a 32 bit

 and a 64 bit version to simplify shared Makefiles.

# e.g.: obj-y += foo_$(BITS).o

export BITS



 Prevent GCC from generating any FP code by mistake.



 This must happen before we try the -mpreferred-stack-boundary, see:



    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53383



KBUILD_CFLAGS += -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -mno-avx

 Intel CET isn't enabled in the kernel



ifeq ($(CONFIG_X86_32),y)

        CHECKFLAGS += -D__i386__



        KBUILD_CFLAGS += -msoft-float -mregparm=3 -freg-struct-return

        # Never want PIC in a 32-bit kernel, prevent breakage with GCC built

 with nonstandard options



 Align the stack to the register width instead of using the default

 alignment of 16 bytes. This reduces stack usage and the number of

 alignment instructions.



 CPU-specific tuning. Anything which can be shared with UML should go here.

        KBUILD_CFLAGS += $(cflags-y)

 temporary until string.h is fixed



		ifeq ($(CONFIG_SMP),y)

			KBUILD_CFLAGS += -mstack-protector-guard-reg=fs -mstack-protector-guard-symbol=__stack_chk_guard

			KBUILD_CFLAGS += -mstack-protector-guard=global

		endif

else

        CHECKFLAGS += -D__x86_64__



        # Align jump targets to 1 byte, not the default 16 bytes:



        # Pack loops tightly as well:



        # Don't autogenerate traditional x87 instructions

        KBUILD_CFLAGS += -mno-80387

        KBUILD_CFLAGS += $(call cc-option,-mno-fp-ret-in-387)

 By default gcc and clang use a stack alignment of 16 bytes for x86.

        # However the standard kernel entry on x86-64 leaves the stack on an

 8-byte boundary. If the compiler isn't informed about the actual

 alignment it will generate extra alignment instructions for the

        # default alignment which keep the stack *mis*aligned.

 Furthermore an alignment to the register width reduces stack usage

 and the number of alignment instructions.



	# Use -mskip-rax-setup if supported.



 FIXME - should be integrated in Makefile.cpu (Makefile_32.cpu)

        cflags-$(CONFIG_MK8)		+= -march=k8

        cflags-$(CONFIG_MPSC)		+= -march=nocona

        cflags-$(CONFIG_MATOM)		+= -march=atom

        KBUILD_CFLAGS += $(cflags-y)

        KBUILD_CFLAGS += -mno-red-zone



	x32_ld_ok := $(call try-run,\

			/bin/echo -e '1: .quad 1b' | \

			$(CC) $(KBUILD_AFLAGS) -c -x assembler -o "$$TMP" - && \

			$(LD) -m elf32_x86_64 "$$TMP.o" -o "$$TMP",y,n)

        ifeq ($(x32_ld_ok),y)

                CONFIG_X86_X32_ABI := y

                KBUILD_AFLAGS += -DCONFIG_X86_X32_ABI

                KBUILD_CFLAGS += -DCONFIG_X86_X32_ABI



#

# If the function graph tracer is used with mcount instead of fentry,

# '-maccumulate-outgoing-args' is needed to prevent a GCC bug

 (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=42109)



ifdef CONFIG_FUNCTION_GRAPH_TRACER

  ifndef CONFIG_HAVE_FENTRY



ifeq ($(ACCUMULATE_OUTGOING_ARGS), 1)

 This compiler flag is not supported by Clang:



 Workaround for a gcc prelease that unfortunately was shipped in a suse release

KBUILD_CFLAGS += -Wno-sign-compare

#



 Avoid indirect branches in kernel to deal with Spectre

ifdef CONFIG_RETPOLINE

 Additionally, avoid generating expensive indirect jumps which

 are subject to retpolines for small number of switch cases.

 clang turns off jump table generation by default when under

 retpoline builds, however, gcc does not for x86. This has

  # only been fixed starting from gcc stable version 8.4.0 and

 onwards, but not for older ones. See gcc bug 


KBUILD_LDFLAGS += -m elf_$(UTS_MACHINE)

ifdef CONFIG_LTO_CLANG

ifeq ($(shell test $(CONFIG_LLD_VERSION) -lt 130000; echo $$?),0)

KBUILD_LDFLAGS	+= -plugin-opt=-stack-alignment=$(if $(CONFIG_X86_32),4,8)

endif

endif

ifdef CONFIG_X86_NEED_RELOCS

LDFLAGS_vmlinux := --emit-relocs --discard-none

LDFLAGS_vmlinux :=

endif



# The 64-bit kernel must be aligned to 2MB.  Pass -z max-page-size=0x200000 to

 the linker to force 2MB page size regardless of the default page size used

# by the linker.

#

ifdef CONFIG_X86_64



archscripts: scripts_basic

	$(Q)$(MAKE) $(build)=arch/x86/tools relocs



# Syscall table generation

archheaders:

	$(Q)$(MAKE) $(build)=arch/x86/entry/syscalls all



# Kernel objects

head-y := arch/x86/kernel/head_$(BITS).o

head-y += arch/x86/kernel/head$(BITS).o





# drivers-y are linked after core-y



# suspend and hibernation support

drivers-$(CONFIG_PM) += arch/x86/power/



 boot loader support. Several targets are kept for legacy purposes



boot := arch/x86/boot

BOOT_TARGETS = bzdisk fdimage fdimage144 fdimage288 hdimage isoimage

PHONY += bzImage $(BOOT_TARGETS)

 Default kernel to build

all: bzImage

 KBUILD_IMAGE specify target image being built



	$(Q)ln -fsn ../../x86/boot/bzImage $(objtree)/arch/$(UTS_MACHINE)/boot/$@

$(BOOT_TARGETS): vmlinux



install:

	$(CONFIG_SHELL) $(srctree)/$(boot)/install.sh $(KERNELRELEASE) \



PHONY += vdso_install

vdso_install:



archprepare: checkbin

checkbin:

ifndef CONFIG_CC_HAS_ASM_GOTO

	@echo Compiler lacks asm-goto support.

ifdef CONFIG_RETPOLINE

ifeq ($(RETPOLINE_CFLAGS),)

	@echo "You are building kernel with non-retpoline compiler." >&2

	@echo "Please update your compiler." >&2

	@false

endif

endif

archclean:

	$(Q)rm -rf $(objtree)/arch/x86_64

  echo  '* bzImage		- Compressed kernel image (arch/x86/boot/bzImage)'

  echo  '			  $$(INSTALL_PATH) and run lilo'

  echo  '  fdimage144		- Create 1.4MB boot floppy image (arch/x86/boot/fdimage)'

  echo  '  hdimage		- Create a BIOS/EFI hard disk image (arch/x86/boot/hdimage)'

  echo  '			  bzdisk/fdimage*/hdimage/isoimage also accept:'

  echo  ''



endef

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the ia32 kernel emulation subsystem.





obj-$(CONFIG_IA32_EMULATION) := ia32_signal.o

obj-$(CONFIG_IA32_AOUT) += ia32_aout.o

audit-class-$(CONFIG_AUDIT) := audit.o

# SPDX-License-Identifier: GPL-2.0

#

#               Makefile for wm-FPU-emu

#

#DEBUG	= -DDEBUGGING

DEBUG	=

PARANOID = -DPARANOID

asflags-y += $(PARANOID)

# From 'C' language sources:

	fpu_arith.o fpu_aux.o fpu_etc.o fpu_tags.o fpu_trig.o \

	load_store.o get_address.o \

	reg_ld_str.o reg_divide.o reg_mul.o

 From 80x86 assembler sources:

	wm_shrx.o wm_sqrt.o \

	div_Xsig.o polynom_Xsig.o round_Xsig.o \





	cproto -e -DMAKING_PROTO *.c >fpu_proto.h

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the x86 low level entry code

#

KCOV_INSTRUMENT := n

CFLAGS_REMOVE_common.o		= $(CC_FLAGS_FTRACE)



obj-y				:= entry_$(BITS).o thunk_$(BITS).o syscall_$(BITS).o



obj-y				+= vdso/

obj-y				+= vsyscall/

obj-$(CONFIG_IA32_EMULATION)	+= entry_64_compat.o syscall_32.o



# SPDX-License-Identifier: GPL-2.0

#

# Building vDSO images for x86.

#

# Absolute relocation type $(ARCH_REL_TYPE_ABS) needs to be defined before

 the inclusion of generic Makefile.

ARCH_REL_TYPE_ABS := R_X86_64_JUMP_SLOT|R_X86_64_GLOB_DAT|R_X86_64_RELATIVE|

ARCH_REL_TYPE_ABS += R_386_GLOB_DAT|R_386_JMP_SLOT|R_386_RELATIVE



# Sanitizer runtimes are unavailable and cannot be linked here.

KASAN_SANITIZE			:= n

UBSAN_SANITIZE			:= n

KCSAN_SANITIZE			:= n



 Prevents link failures: __sanitizer_cov_trace_pc() is not linked in.



VDSO64-$(CONFIG_X86_64)		:= y

VDSO32-$(CONFIG_IA32_EMULATION)	:= y

 files to link into the vdso

vobjs32-y := vdso32/note.o vdso32/system_call.o vdso32/sigreturn.o



# files to link into kernel

obj-y				+= vma.o extable.o

UBSAN_SANITIZE_vma.o		:= y

OBJECT_FILES_NON_STANDARD_vma.o	:= n

# vDSO images to build

vdso_img-$(VDSO64-y)		+= 64

vdso_img-$(VDSOX32-y)		+= x32

vdso_img-$(VDSO32-y)		+= 32



vobjs32 := $(foreach F,$(vobjs32-y),$(obj)/$F)





 Build the vDSO image C files and link them in.

vdso_img_sodbg := $(vdso_img-y:%=vdso%.so.dbg)

obj-y += $(vdso_img_objs)

targets += $(vdso_img_cfiles)

targets += $(vdso_img_sodbg) $(vdso_img-y:%=vdso%.so)

CPPFLAGS_vdso.lds += -P -C

VDSO_LDFLAGS_vdso.lds = -m elf_x86_64 -soname linux-vdso.so.1 --no-undefined \



	$(call if_changed,vdso_and_check)

HOST_EXTRACFLAGS += -I$(srctree)/tools/include -I$(srctree)/include/uapi -I$(srctree)/arch/$(SUBARCH)/include/uapi

hostprogs += vdso2c



	$(call if_changed,vdso2c)



 Don't omit frame pointers for ease of userspace debugging, but do

 optimize sibling calls.



CFL := $(PROFILING) -mcmodel=small -fPIC -O2 -fasynchronous-unwind-tables -m64 \

       -DDISABLE_BRANCH_PROFILING -DBUILD_VDSO

ifdef CONFIG_RETPOLINE

ifneq ($(RETPOLINE_VDSO_CFLAGS),)

  CFL += $(RETPOLINE_VDSO_CFLAGS)

endif

endif

$(vobjs): KBUILD_CFLAGS := $(filter-out $(CC_FLAGS_LTO) $(GCC_PLUGINS_CFLAGS) $(RETPOLINE_CFLAGS),$(KBUILD_CFLAGS)) $(CFL)



 vDSO code runs in userspace and -pg doesn't help with profiling anyway.



CFLAGS_REMOVE_vclock_gettime.o = -pg

CFLAGS_REMOVE_vdso32/vclock_gettime.o = -pg

CFLAGS_REMOVE_vgetcpu.o = -pg



#

# X32 processes use x32 vDSO to access 64bit kernel data.

#

# Build x32 vDSO image:

# 1. Compile x32 vDSO as 64bit.

# 2. Convert object files to x32.

 3. Build x32 VDSO image with x32 objects, which contains 64bit codes

 so that it can reach 64bit address space with 64bit pointers.





CPPFLAGS_vdsox32.lds = $(CPPFLAGS_vdso.lds)



 x32-rebranded versions

vobjx32s-y := $(vobjs-y:.o=-x32.o)

 same thing, but in the output directory

vobjx32s := $(foreach F,$(vobjx32s-y),$(obj)/$F)

# Convert 64bit object file to x32 for x32 vDSO.

      cmd_x32 = $(OBJCOPY) -O elf32-x86-64 $< $@

$(obj)/%-x32.o: $(obj)/%.o FORCE

	$(call if_changed,x32)

targets += vdsox32.lds $(vobjx32s-y)

$(obj)/%.so: $(obj)/%.so.dbg FORCE

	$(call if_changed,objcopy)

	$(call if_changed,vdso_and_check)



$(obj)/vdso32.so.dbg: asflags-$(CONFIG_X86_64) += -m32

KBUILD_CFLAGS_32 := $(filter-out -fno-pic,$(KBUILD_CFLAGS_32))

KBUILD_CFLAGS_32 += -fno-stack-protector

KBUILD_CFLAGS_32 += $(call cc-option, -foptimize-sibling-calls)

KBUILD_CFLAGS_32 += -fno-omit-frame-pointer



  KBUILD_CFLAGS_32 += $(RETPOLINE_VDSO_CFLAGS)

endif

endif



$(obj)/vdso32.so.dbg: $(obj)/vdso32/vdso32.lds $(vobjs32) FORCE



#

# The DSO images are built using a special linker script.

#

quiet_cmd_vdso = VDSO    $@

		       $(VDSO_LDFLAGS) $(VDSO_LDFLAGS_$(filter %.lds,$(^F))) \

		 sh $(srctree)/$(src)/checkundef.sh '$(NM)' '$@'

VDSO_LDFLAGS = -shared --hash-style=both --build-id=sha1 \

	$(call ld-option, --eh-frame-hdr) -Bsymbolic

GCOV_PROFILE := n



#

# Install the unstripped copies of vdso*.so.  If our toolchain supports

 build-id, install .build-id links as well.



	  buildid=`readelf -n $< |grep 'Build ID' |sed -e 's/^.*Build ID: \(.*\)$$/\1/'`; \

	  first=`echo $$buildid | cut -b-2`; \



vdso_img_insttargets := $(vdso_img_sodbg:%.dbg=install_%)



$(vdso_img_insttargets): install_%: $(obj)/%.dbg $(MODLIB)/vdso

	$(call cmd,vdso_install)



clean-files := vdso32.so vdso32.so.dbg vdso64* vdso-image-*.c vdsox32.so*

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the x86 low level vsyscall code

#

obj-$(CONFIG_X86_VSYSCALL_EMULATION)	+= vsyscall_64.o vsyscall_emu_64.o

# SPDX-License-Identifier: GPL-2.0

uapi := arch/$(SRCARCH)/include/generated/uapi/asm

# Create output directory if not already present

_dummy := $(shell [ -d '$(out)' ] || mkdir -p '$(out)') \



syscall64 := $(src)/syscall_64.tbl

syshdr := $(srctree)/scripts/syscallhdr.sh



quiet_cmd_syshdr = SYSHDR  $@

      cmd_syshdr = $(CONFIG_SHELL) $(syshdr) --abis $(abis) --emit-nr \

		$(if $(prefix),--prefix $(prefix)) \

		$< $@

quiet_cmd_systbl = SYSTBL  $@

      cmd_systbl = $(CONFIG_SHELL) $(systbl) --abis $(abis) $< $@

quiet_cmd_hypercalls = HYPERCALLS $@



$(uapi)/unistd_32.h: abis := i386

$(uapi)/unistd_32.h: $(syscall32) $(syshdr) FORCE



$(out)/unistd_32_ia32.h: abis := i386

	$(call if_changed,syshdr)

$(uapi)/unistd_x32.h: abis := common,x32

$(uapi)/unistd_x32.h: offset := __X32_SYSCALL_BIT

	$(call if_changed,syshdr)

$(uapi)/unistd_64.h: abis := common,64

$(uapi)/unistd_64.h: $(syscall64) $(syshdr) FORCE



$(out)/unistd_64_x32.h: abis := x32

$(out)/unistd_64_x32.h: $(syscall64) $(syshdr) FORCE



$(out)/syscalls_32.h: $(syscall32) $(systbl) FORCE

$(out)/syscalls_64.h: $(syscall64) $(systbl) FORCE

	$(call if_changed,systbl)

	$(call if_changed,hypercalls)

$(out)/xen-hypercalls.h: $(srctree)/include/xen/interface/xen*.h

uapisyshdr-y			+= unistd_32.h unistd_64.h unistd_x32.h

syshdr-y			+= syscalls_32.h

syshdr-$(CONFIG_X86_X32)	+= syscalls_x32.h

syshdr-$(CONFIG_XEN)		+= xen-hypercalls.h

uapisyshdr-y	:= $(addprefix $(uapi)/, $(uapisyshdr-y))

syshdr-y	:= $(addprefix $(out)/, $(syshdr-y))



all: $(uapisyshdr-y) $(syshdr-y)

	@:

# SPDX-License-Identifier: GPL-2.0



OBJECT_FILES_NON_STANDARD_vmenter.o := y

endif

KVM := ../../../virt/kvm

kvm-y			+= $(KVM)/kvm_main.o $(KVM)/coalesced_mmio.o \

				$(KVM)/eventfd.o $(KVM)/irqchip.o $(KVM)/vfio.o \

				$(KVM)/dirty_ring.o $(KVM)/binary_stats.o

kvm-$(CONFIG_KVM_ASYNC_PF)	+= $(KVM)/async_pf.o

kvm-y			+= x86.o emulate.o i8259.o irq.o lapic.o \

			   mmu/spte.o



kvm-$(CONFIG_KVM_XEN)	+= xen.o

kvm-intel-y		+= vmx/vmx.o vmx/vmenter.o vmx/pmu_intel.o vmx/vmcs12.o \

kvm-intel-$(CONFIG_X86_SGX_KVM)	+= vmx/sgx.o



ifdef CONFIG_HYPERV



obj-$(CONFIG_KVM_INTEL)	+= kvm-intel.o

# SPDX-License-Identifier: GPL-2.0

PHONY += posttest

ifeq ($(KBUILD_VERBOSE),1)

  posttest_verbose = -v

  posttest_verbose =

endif

ifeq ($(CONFIG_64BIT),y)

  posttest_64bit = -y





quiet_cmd_posttest = TEST    $@

      cmd_posttest = ($(OBJDUMP) -v | $(AWK) -f $(chkobjdump)) || $(OBJDUMP) -d -j .text $(objtree)/vmlinux | $(AWK) -f $(reformatter) | $(obj)/insn_decoder_test $(posttest_64bit) $(posttest_verbose)

      cmd_sanitytest = $(obj)/insn_sanity $(posttest_64bit) -m 1000000





# -I needed for generated C source and C source which in the kernel tree.





# Dependencies are also needed.





relocs-objs     := relocs_32.o relocs_64.o relocs_common.o

PHONY += relocs

relocs: $(obj)/relocs

	@:

# SPDX-License-Identifier: GPL-2.0

# Kernel does not boot with instrumentation of tlb.c and mem_encrypt*.c



KASAN_SANITIZE_mem_encrypt_identity.o	:= n

 Disable KCSAN entirely, because otherwise we get warnings that some functions

# reference __initdata sections.

KCSAN_SANITIZE := n

ifdef CONFIG_FUNCTION_TRACER

CFLAGS_REMOVE_mem_encrypt_identity.o	= -pg

endif

				    pgtable.o physaddr.o setup_nx.o tlb.o cpu_entry_area.o maccess.o

obj-y				+= pat/

 Make sure __phys_addr has no stackprotector

CFLAGS_physaddr.o		:= -fno-stack-protector



CFLAGS_fault.o := -I $(srctree)/$(src)/../include/asm/trace

obj-$(CONFIG_X86_32)		+= pgtable_32.o iomap_32.o

obj-$(CONFIG_PTDUMP_CORE)	+= dump_pagetables.o





obj-$(CONFIG_KASAN)		+= kasan_init_$(BITS).o



obj-$(CONFIG_AMD_NUMA)		+= amdtopology.o



obj-$(CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS)	+= pkeys.o

obj-$(CONFIG_RANDOMIZE_MEMORY)			+= kaslr.o



# SPDX-License-Identifier: GPL-2.0

obj-y				:= set_memory.o memtype.o

obj-$(CONFIG_X86_PAT)		+= memtype_interval.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





extra-y	:= head_$(BITS).o

extra-y	+= platform-quirks.o





 Do not profile debug and lowlevel utilities

CFLAGS_REMOVE_paravirt-spinlocks.o = -pg

CFLAGS_REMOVE_pvclock.o = -pg

CFLAGS_REMOVE_ftrace.o = -pg

CFLAGS_REMOVE_head64.o = -pg

CFLAGS_REMOVE_sev.o = -pg

CFLAGS_REMOVE_cc_platform.o = -pg

endif

KASAN_SANITIZE_head$(BITS).o				:= n

KASAN_SANITIZE_cc_platform.o				:= n

# With some compiler versions the generated code results in boot hangs, caused

 by several compilation units. To be safe, disable all instrumentation.





OBJECT_FILES_NON_STANDARD_ftrace_$(BITS).o		:= y

endif

# If instrumentation of this dir is enabled, boot hangs during first second.

# Probably could be more selective here, but note that files related to irqs,

# boot, dumpstack/stacktrace, etc are either non-interesting or can lead to

# non-deterministic coverage.

KCOV_INSTRUMENT		:= n

CFLAGS_head$(BITS).o	+= -fno-stack-protector



CFLAGS_irq.o := -I $(srctree)/$(src)/../include/asm/trace

obj-y			+= traps.o idt.o irq.o irq_$(BITS).o dumpstack_$(BITS).o

obj-$(CONFIG_JUMP_LABEL)	+= jump_label.o

obj-$(CONFIG_IRQ_WORK)  += irq_work.o

obj-y			+= probe_roms.o

obj-$(CONFIG_IA32_EMULATION)	+= sys_ia32.o

obj-y			+= bootflag.o e820.o

obj-y			+= pci-dma.o quirks.o topology.o kdebugfs.o

obj-y			+= pci-iommu_table.o

obj-y			+= resource.o

obj-y			+= irqflags.o



obj-y				+= process.o

obj-y				+= ptrace.o

obj-y				+= step.o

obj-$(CONFIG_INTEL_TXT)		+= tboot.o

obj-$(CONFIG_STACKTRACE)	+= stacktrace.o

obj-y				+= reboot.o

obj-$(CONFIG_X86_MSR)		+= msr.o

obj-$(CONFIG_X86_CPUID)		+= cpuid.o

apm-y				:= apm_32.o

obj-$(CONFIG_APM)		+= apm.o

obj-$(CONFIG_SMP)		+= smp.o

obj-$(CONFIG_SMP)		+= smpboot.o

obj-$(CONFIG_SMP)		+= setup_percpu.o

obj-$(CONFIG_X86_REBOOTFIXUPS)	+= reboot_fixups_32.o

obj-$(CONFIG_CRASH_CORE)	+= crash_core_$(BITS).o

obj-$(CONFIG_KEXEC_CORE)	+= machine_kexec_$(BITS).o

obj-$(CONFIG_KEXEC_CORE)	+= relocate_kernel_$(BITS).o crash.o

obj-$(CONFIG_KEXEC_FILE)	+= kexec-bzimage64.o

obj-y				+= kprobes/

obj-$(CONFIG_VM86)		+= vm86_32.o



obj-$(CONFIG_HPET_TIMER) 	+= hpet.o

obj-$(CONFIG_DEBUG_NMI_SELFTEST) += nmi_selftest.o

obj-$(CONFIG_KVM_GUEST)		+= kvm.o kvmclock.o

obj-$(CONFIG_PARAVIRT)		+= paravirt.o

obj-$(CONFIG_PARAVIRT_SPINLOCKS)+= paravirt-spinlocks.o

obj-$(CONFIG_PARAVIRT_CLOCK)	+= pvclock.o





obj-$(CONFIG_EISA)		+= eisa.o





obj-$(CONFIG_OF)			+= devicetree.o



obj-$(CONFIG_PERF_EVENTS)		+= perf_regs.o

obj-$(CONFIG_TRACING)			+= tracepoint.o

obj-$(CONFIG_X86_UMIP)			+= umip.o

obj-$(CONFIG_UNWINDER_FRAME_POINTER)	+= unwind_frame.o

obj-$(CONFIG_UNWINDER_GUESS)		+= unwind_guess.o



obj-$(CONFIG_ARCH_HAS_CC_PLATFORM)	+= cc_platform.o



 64 bit specific files





	obj-y				+= vsmp_64.o

endif

 SPDX-License-Identifier: GPL-2.0-only



 Build rules for the FPU support code:





obj-y				+= init.o bugs.o core.o regset.o signal.o xstate.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for local APIC drivers and for the IO-APIC code





# Leads to non-deterministic coverage that is not a function of syscall inputs.

# In particualr, smp_apic_timer_interrupt() is called in random places.

KCOV_INSTRUMENT		:= n

obj-y				+= hw_nmi.o

obj-$(CONFIG_X86_IO_APIC)	+= io_apic.o

obj-$(CONFIG_PCI_MSI)		+= msi.o

obj-$(CONFIG_SMP)		+= ipi.o

# APIC probe will depend on the listing order here

obj-$(CONFIG_X86_NUMACHIP)	+= apic_numachip.o

obj-$(CONFIG_X86_X2APIC)	+= x2apic_cluster.o



 APIC probe will depend on the listing order here



 For 32bit, probe_32 need to be listed last

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for kernel probes

#

obj-$(CONFIG_KPROBES)		+= core.o

obj-$(CONFIG_OPTPROBES)		+= opt.o

obj-$(CONFIG_KPROBES_ON_FTRACE)	+= ftrace.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_ACPI_SLEEP)	+= sleep.o wakeup_$(BITS).o



ifneq ($(CONFIG_ACPI_PROCESSOR),)



# SPDX-License-Identifier: GPL-2.0

#

 Makefile for x86-compatible CPU details, features and quirks





 Don't trace early stages of a secondary CPU boot

ifdef CONFIG_FUNCTION_TRACER

CFLAGS_REMOVE_perf_event.o = -pg

endif

# If these files are instrumented, boot hangs during the first second.

KCOV_INSTRUMENT_common.o := n

KCOV_INSTRUMENT_perf_event.o := n

# As above, instrumenting secondary CPU boot code causes boot hangs.



# Make sure load_percpu_segment has no stackprotector



obj-y			:= cacheinfo.o scattered.o topology.o

obj-y			+= common.o

obj-y			+= rdrand.o



obj-$(CONFIG_PROC_FS)	+= proc.o



obj-$(CONFIG_IA32_FEAT_CTL) += feat_ctl.o

obj-y			+= intel.o intel_pconfig.o tsx.o

obj-$(CONFIG_PM)	+= intel_epb.o

endif

obj-$(CONFIG_CPU_SUP_AMD)		+= amd.o

obj-$(CONFIG_CPU_SUP_HYGON)		+= hygon.o

obj-$(CONFIG_CPU_SUP_UMC_32)		+= umc.o

obj-$(CONFIG_CPU_SUP_ZHAOXIN)		+= zhaoxin.o



obj-$(CONFIG_X86_MCE)			+= mce/

obj-$(CONFIG_MTRR)			+= mtrr/

obj-$(CONFIG_MICROCODE)			+= microcode/



obj-$(CONFIG_X86_LOCAL_APIC)		+= perfctr-watchdog.o



      cmd_mkcapflags = $(CONFIG_SHELL) $(srctree)/$(src)/mkcapflags.sh $@ $^



$(obj)/capflags.c: $(cpufeature) $(vmxfeature) $(src)/mkcapflags.sh FORCE

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_X86_CPU_RESCTRL)	+= ctrlmondata.o pseudo_lock.o

CFLAGS_pseudo_lock.o = -I$(src)

 SPDX-License-Identifier: GPL-2.0-only

microcode-y				:= core.o

microcode-$(CONFIG_MICROCODE_INTEL)	+= intel.o

 SPDX-License-Identifier: GPL-2.0-only



obj-y += \

	driver.o \

	encl.o \

# SPDX-License-Identifier: GPL-2.0

obj-y				=  core.o severity.o genpool.o

obj-$(CONFIG_X86_MCE_INTEL)	+= intel.o

obj-$(CONFIG_X86_MCE_THRESHOLD) += threshold.o

mce-inject-y			:= inject.o





obj-$(CONFIG_X86_MCELOG_LEGACY)	+= dev-mcelog.o

# SPDX-License-Identifier: GPL-2.0

ifdef CONFIG_FUNCTION_TRACER

# Do not profile debug and lowlevel utilities

CFLAGS_REMOVE_time.o = -pg

CFLAGS_REMOVE_irq.o = -pg

endif

# Make sure early boot has no stackprotector



obj-y				+= enlighten.o

obj-y				+= mmu.o



obj-$(CONFIG_XEN_PVHVM)		+= enlighten_hvm.o

obj-$(CONFIG_XEN_PVHVM)		+= mmu_hvm.o

obj-$(CONFIG_XEN_PVHVM)		+= suspend_hvm.o

obj-$(CONFIG_XEN_PVHVM)		+= platform-pci-unplug.o

obj-$(CONFIG_XEN_PV)		+= setup.o

obj-$(CONFIG_XEN_PV)		+= apic.o

obj-$(CONFIG_XEN_PV)		+= p2m.o

obj-$(CONFIG_XEN_PV)		+= enlighten_pv.o

obj-$(CONFIG_XEN_PV)		+= mmu_pv.o

obj-$(CONFIG_XEN_PV)		+= xen-asm.o





obj-$(CONFIG_SMP)		+= smp.o

obj-$(CONFIG_XEN_PVHVM_SMP)  	+= smp_hvm.o



obj-$(CONFIG_XEN_DEBUG_FS)	+= debugfs.o

obj-$(CONFIG_XEN_PV_DOM0)	+= vga.o

obj-$(CONFIG_SWIOTLB_XEN)	+= pci-swiotlb-xen.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for x86 specific library files.





 Produces uninteresting flaky coverage.

KCOV_INSTRUMENT_delay.o	:= n

# KCSAN uses udelay for introducing watchpoint delay; avoid recursion.

KCSAN_SANITIZE_delay.o := n

 In case KCSAN+lockdep+ftrace are enabled, disable ftrace for delay.o to avoid

# lockdep -> [other libs] -> KCSAN -> udelay -> ftrace -> lockdep recursion.



 Early boot use of cmdline; don't instrument it

ifdef CONFIG_AMD_MEM_ENCRYPT

KASAN_SANITIZE_cmdline.o  := n





CFLAGS_cmdline.o := -fno-stack-protector -fno-jump-tables

endif

inat_tables_script = $(srctree)/arch/x86/tools/gen-insn-attr-x86.awk

inat_tables_maps = $(srctree)/arch/x86/lib/x86-opcode-map.txt

      cmd_inat_tables = $(AWK) -f $(inat_tables_script) $(inat_tables_maps) > $@

	$(call cmd,inat_tables)







lib-y := delay.o misc.o cmdline.o cpu.o

lib-y += pc-conf-reg.o

lib-$(CONFIG_INSTRUCTION_DECODER) += insn.o inat.o insn-eval.o

lib-$(CONFIG_RANDOMIZE_BASE) += kaslr.o

lib-$(CONFIG_RETPOLINE) += retpoline.o

obj-y += iomem.o

        obj-y += atomic64_32.o

        lib-y += checksum_32.o

        lib-y += string_32.o

ifneq ($(CONFIG_X86_CMPXCHG64),y)

else

        lib-y += csum-partial_64.o csum-copy_64.o csum-wrappers_64.o

        lib-y += clear_page_64.o copy_page_64.o

        lib-y += memmove_64.o memset_64.o

        lib-y += copy_user_64.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

#

# Copyright (C) 2002 - 2007 Jeff Dike (jdike@{addtoit,linux.intel}.com)

#

else

	BITS := 64

endif

obj-y = bugs_$(BITS).o delay.o fault.o ldt.o \

	ptrace_$(BITS).o ptrace_user.o setjmp_$(BITS).o signal.o \

	stub_$(BITS).o stub_segv.o \

	sys_call_table_$(BITS).o sysrq_$(BITS).o tls_$(BITS).o \



ifeq ($(CONFIG_X86_32),y)

obj-y += checksum_32.o syscalls_32.o

obj-$(CONFIG_ELF_CORE) += elfcore.o

subarch-y = ../lib/string_32.o ../lib/atomic64_32.o ../lib/atomic64_cx8_32.o







subarch-y = ../lib/csum-partial_64.o ../lib/memcpy_64.o ../entry/thunk_64.o



subarch-$(CONFIG_MODULES) += ../kernel/module.o





include/generated/user_constants.h: $(obj)/user-offsets.s



UNPROFILE_OBJS := stub_segv.o





 Copyright (C) 2000 - 2007 Jeff Dike (jdike@{addtoit,linux.intel}.com)

# Licensed under the GPL

#

obj-y = registers.o task_size.o mcontext.o

obj-$(CONFIG_64BIT) += prctl.o



# SPDX-License-Identifier: GPL-2.0

#

# Building vDSO images for x86.

#

# Prevents link failures: __sanitizer_cov_trace_pc() is not linked in.

KCOV_INSTRUMENT                := n

VDSO64-y		:= y



 files to link into the vdso

vobjs-y := vdso-note.o um_vdso.o

 files to link into kernel





$(obj)/vdso.o: $(obj)/vdso.so

targets += vdso.so vdso.so.dbg vdso.lds $(vobjs-y)

CPPFLAGS_vdso.lds += -P -C

VDSO_LDFLAGS_vdso.lds = -m64 -Wl,-soname=linux-vdso.so.1 \



$(obj)/vdso.o: $(src)/vdso.S $(obj)/vdso.so

$(obj)/vdso.so.dbg: $(obj)/vdso.lds $(vobjs) FORCE



$(obj)/%.so: OBJCOPYFLAGS := -S



#

# Don't omit frame pointers for ease of userspace debugging, but do

# optimize sibling calls.

#

       $(filter -g%,$(KBUILD_CFLAGS)) -fno-stack-protector \

       -fno-omit-frame-pointer -foptimize-sibling-calls



#

# vDSO code runs in userspace and -pg doesn't help with profiling anyway.

#

CFLAGS_REMOVE_um_vdso.o = -pg -fprofile-arcs -ftest-coverage



 The DSO images are built using a special linker script.



      cmd_vdso = $(CC) -nostdlib -o $@ \

		       -Wl,-T,$(filter %.lds,$^) $(filter %.o,$^) && \





#

 Install the unstripped copy of vdso*.so listed in $(vdso-install-y).



$(vdso-install-y): %.so: $(obj)/%.so.dbg FORCE

	@mkdir -p $(MODLIB)/vdso

	$(call cmd,vdso_install)

 SPDX-License-Identifier: GPL-2.0-only



 Arch-specific network modules





ifeq ($(CONFIG_X86_32),y)

        obj-$(CONFIG_BPF_JIT) += bpf_jit_comp32.o

# SPDX-License-Identifier: GPL-2.0





targets += $(purgatory-y)



$(obj)/string.o: $(srctree)/arch/x86/boot/compressed/string.c FORCE

	$(call if_changed_rule,cc_o_c)





# When linking purgatory.ro with -r unresolved symbols are not checked,

 also link a purgatory.chk binary without -r to check for unresolved symbols.



# Sanitizer, etc. runtimes are unavailable and cannot be linked here.

GCOV_PROFILE	:= n

KASAN_SANITIZE	:= n

UBSAN_SANITIZE	:= n

KCSAN_SANITIZE	:= n



# These are adjustments to the compiler flags used for objects that

# make up the standalone purgatory.ro

PURGATORY_CFLAGS_REMOVE := -mcmodel=kernel

PURGATORY_CFLAGS += $(DISABLE_STACKLEAK_PLUGIN) -DDISABLE_BRANCH_PROFILING



 Default KBUILD_CFLAGS can have -pg option set when FTRACE is enabled. That

# in turn leaves some undefined symbols like __fentry__ in purgatory and not

# sure how to relocate those.

PURGATORY_CFLAGS_REMOVE		+= $(CC_FLAGS_FTRACE)

endif



PURGATORY_CFLAGS_REMOVE		+= -fstack-protector-strong

endif

ifdef CONFIG_RETPOLINE

PURGATORY_CFLAGS_REMOVE		+= $(RETPOLINE_CFLAGS)

endif

CFLAGS_purgatory.o		+= $(PURGATORY_CFLAGS)

CFLAGS_sha256.o			+= $(PURGATORY_CFLAGS)

CFLAGS_string.o			+= $(PURGATORY_CFLAGS)

AFLAGS_REMOVE_setup-x86_$(BITS).o	+= -Wa,-gdwarf-2





$(obj)/purgatory.chk: $(obj)/purgatory.ro FORCE

		$(call if_changed,ld)

targets += kexec-purgatory.c

quiet_cmd_bin2c = BIN2C   $@





obj-$(CONFIG_KEXEC_FILE)	+= kexec-purgatory.o

# SPDX-License-Identifier: GPL-2.0

 Platform specific code goes here

obj-y	+= atom/

obj-y	+= iris/

obj-y	+= intel/

obj-y	+= intel-mid/

obj-y	+= intel-quark/

obj-y	+= scx200/

obj-y	+= uv/

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_X86_INTEL_CE)	+= ce4100.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_X86_32_IRIS)		+= iris.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0



 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_X86_UV)		+= bios_uv.o uv_irq.o uv_time.o uv_nmi.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_X86_INTEL_MID) += intel-mid.o pwr.o

# SPDX-License-Identifier: GPL-2.0

OBJECT_FILES_NON_STANDARD_head.o := y

obj-$(CONFIG_PVH) += enlighten.o

obj-$(CONFIG_PVH) += head.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_IOSF_MBI)			+= iosf_mbi.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_TS5500)	+= ts5500.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_INTEL_IMR) += imr.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_OLPC_XO1_PM)		+= olpc-xo1-pm.o xo1-wakeup.o

obj-$(CONFIG_OLPC_XO1_SCI)	+= olpc-xo1-sci.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PUNIT_ATOM_DEBUG)	+= punit_atom_debug.o

 SPDX-License-Identifier: GPL-2.0-only



ifdef CONFIG_X86_64

obj-$(CONFIG_PARAVIRT_SPINLOCKS)	+= hv_spinlock.o

endif

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PERF_EVENTS_INTEL_RAPL)	+= rapl.o

obj-y					+= amd/

obj-$(CONFIG_CPU_SUP_INTEL)		+= intel/

obj-$(CONFIG_CPU_SUP_ZHAOXIN)		+= zhaoxin/

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_CPU_SUP_INTEL)		+= ds.o knc.o

obj-$(CONFIG_PERF_EVENTS_INTEL_UNCORE)	+= intel-uncore.o

intel-uncore-objs			:= uncore.o uncore_nhmex.o uncore_snb.o uncore_snbep.o uncore_discovery.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_PERF_EVENTS_AMD_POWER)	+= power.o

obj-$(CONFIG_PERF_EVENTS_AMD_UNCORE)	+= amd-uncore.o

ifdef CONFIG_AMD_IOMMU

obj-$(CONFIG_CPU_SUP_AMD)		+= iommu.o

endif

# SPDX-License-Identifier: GPL-2.0

obj-y	+= core.o



# arch/x86/boot/Makefile

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

 Copyright (C) 1994 by Linus Torvalds

# Changed by many, many contributors over the years.

#

# Sanitizer runtimes are unavailable and cannot be linked for early boot code.

KASAN_SANITIZE			:= n

KCSAN_SANITIZE			:= n



 Kernel does not boot with kcov instrumentation here.

# One of the problems observed was insertion of __sanitizer_cov_trace_pc()

 callback into middle of per-cpu data enabling code. Thus the callback observed

 inconsistent state and crashed. We are interested mostly in syscall coverage,

 so boot code is not interesting anyway.



 If you want to preset the SVGA mode, uncomment the next line and

# set SVGA_MODE to whatever number you want.

# Set it to -DSVGA_MODE=NORMAL_VGA if you just want the EGA/VGA mode.

# The number is the same as you would ordinarily press at bootup.



targets		:= vmlinux.bin setup.bin setup.elf bzImage

targets		+= fdimage fdimage144 fdimage288 image.iso hdimage



setup-y		+= a20.o bioscall.o cmdline.o copy.o cpu.o cpuflags.o cpucheck.o

setup-y		+= early_serial_console.o edd.o header.o main.o memory.o

setup-y		+= video-mode.o version.o

setup-$(CONFIG_X86_APM_BOOT) += apm.o

 The link order of the video-*.o modules can matter.  In particular,

 video-vga.o *must* be listed first, followed by video-vesa.o.

 Hardware-specific drivers should follow in the order they should be

# probed, and video-bios.o should typically be last.

setup-y		+= video-vga.o

setup-y		+= video-bios.o

targets		+= $(setup-y)







quiet_cmd_cpustr = CPUSTR  $@

      cmd_cpustr = $(obj)/mkcpustr > $@

	$(call if_changed,cpustr)

endif

targets += cpustr.h

 ---------------------------------------------------------------------------



KBUILD_AFLAGS	:= $(KBUILD_CFLAGS) -D__ASSEMBLY__

KBUILD_CFLAGS	+= -fno-asynchronous-unwind-tables

GCOV_PROFILE := n

UBSAN_SANITIZE := n

$(obj)/bzImage: asflags-y  := $(SVGA_MODE)

quiet_cmd_image = BUILD   $@

cmd_image = $(obj)/tools/build $(obj)/setup.bin $(obj)/vmlinux.bin \

			       $(obj)/zoffset.h $@ $($(quiet)redirect_image)

$(obj)/bzImage: $(obj)/setup.bin $(obj)/vmlinux.bin $(obj)/tools/build FORCE

	$(call if_changed,image)

	@$(kecho) 'Kernel: $@ is ready' ' (#'`cat .version`')'





sed-zoffset := -e 's/^\([0-9a-fA-F]*\) [a-zA-Z] \(startup_32\|startup_64\|efi32_stub_entry\|efi64_stub_entry\|efi_pe_entry\|efi32_pe_entry\|input_data\|kernel_info\|_end\|_ehead\|_text\|z_.*\)$$/\#define ZO_\2 0x\1/p'

quiet_cmd_zoffset = ZOFFSET $@

      cmd_zoffset = $(NM) $< | sed -n $(sed-zoffset) > $@

targets += zoffset.h

$(obj)/zoffset.h: $(obj)/compressed/vmlinux FORCE

	$(call if_changed,zoffset)





LDFLAGS_setup.elf	:= -m elf_i386 -T

$(obj)/setup.elf: $(src)/setup.ld $(SETUP_OBJS) FORCE



OBJCOPYFLAGS_setup.bin	:= -O binary



	$(Q)$(MAKE) $(build)=$(obj)/compressed $@

# Set this if you want to pass append arguments to the

 bzdisk/fdimage/hdimage/isoimage kernel

FDARGS =

 Set this if you want one or more initrds included in the image

FDINITRD =

imgdeps = $(obj)/bzImage $(obj)/mtools.conf $(src)/genimage.sh

	sed -e 's|@OBJ@|$(obj)|g' < $< > $@

targets += mtools.conf

 genimage.sh requires bash, but it also has a bunch of other

# external dependencies.

		$(obj)/mtools.conf '$(FDARGS)' $(FDINITRD)

PHONY += bzdisk fdimage fdimage144 fdimage288 hdimage isoimage

# This requires write access to /dev/fd0

 All images require syslinux to be installed; hdimage also requires

# EDK2/OVMF if the kernel is compiled with the EFI stub.



	@$(kecho) 'Kernel: $(obj)/fdimage is ready'

fdimage288: $(imgdeps)

	$(call cmd,genimage,fdimage288,$(obj)/fdimage)



hdimage: $(imgdeps)

	@$(kecho) 'Kernel: $(obj)/hdimage is ready'

isoimage: $(imgdeps)

	$(call cmd,genimage,isoimage,$(obj)/image.iso)

# SPDX-License-Identifier: GPL-2.0

#

# linux/arch/x86/boot/compressed/Makefile

#

# create a compressed vmlinux image from the original vmlinux

#

# vmlinuz is:

	decompression code (*.o)

	asm globals (piggy.S), including:

#		vmlinux.bin.(gz|bz2|lzma|...)

#

# vmlinux.bin is:

	vmlinux stripped of debugging and comments

 vmlinux.bin.all is:

#	vmlinux.bin + vmlinux.relocs

# vmlinux.bin.(gz|bz2|lzma|...) is:

	(see scripts/Makefile.lib size_append)

#	compressed vmlinux.bin.all + u32 size of vmlinux.bin.all

# Sanitizer runtimes are unavailable and cannot be linked for early boot code.

KASAN_SANITIZE			:= n

KCSAN_SANITIZE			:= n



 Prevents link failures: __sanitizer_cov_trace_pc() is not linked in.





KBUILD_CFLAGS += -Wundef

KBUILD_CFLAGS += -DDISABLE_BRANCH_PROFILING

KBUILD_CFLAGS += $(cflags-y)

KBUILD_CFLAGS += $(call cc-disable-warning, gnu)

KBUILD_CFLAGS += $(call cc-option,-fmacro-prefix-map=$(srctree)/=)

KBUILD_CFLAGS += -D__DISABLE_EXPORTS

 Disable relocation relaxation in case the link is not PIE.

KBUILD_CFLAGS += $(call as-option,-Wa$(comma)-mrelax-relocations=no)

KBUILD_CFLAGS += -include $(srctree)/include/linux/hidden.h

KBUILD_CFLAGS += $(CLANG_FLAGS)

 sev.c indirectly inludes inat-table.h which is generated during

# compilation and stored in $(objtree). Add the directory to the includes so

 that the compiler finds it even with out-of-tree builds (make O=/some/path).

CFLAGS_sev.o += -I$(objtree)/arch/x86/lib/

UBSAN_SANITIZE :=n

# Compressed kernel should be built as PIE since it may be loaded at any

 address by the bootloader.

LDFLAGS_vmlinux := -pie $(call ld-option, --no-dynamic-linker)

ifdef CONFIG_LD_ORPHAN_WARN

LDFLAGS_vmlinux += --orphan-handling=warn

endif

LDFLAGS_vmlinux += -T

hostprogs	:= mkpiggy



sed-voffset := -e 's/^\([0-9a-fA-F]*\) [ABCDGRSTVW] \(_text\|__bss_start\|_end\)$$/\#define VO_\2 _AC(0x\1,UL)/p'

quiet_cmd_voffset = VOFFSET $@

      cmd_voffset = $(NM) $< | sed -n $(sed-voffset) > $@







vmlinux-objs-y := $(obj)/vmlinux.lds $(obj)/kernel_info.o $(obj)/head_$(BITS).o \



	vmlinux-objs-y += $(obj)/ident_map_64.o

	vmlinux-objs-y += $(obj)/idt_64.o $(obj)/idt_handlers_64.o

	vmlinux-objs-y += $(obj)/mem_encrypt.o





efi-obj-$(CONFIG_EFI_STUB) = $(objtree)/drivers/firmware/efi/libstub/lib.a

$(obj)/vmlinux: $(vmlinux-objs-y) $(efi-obj-y) FORCE



OBJCOPYFLAGS_vmlinux.bin :=  -R .comment -S

$(obj)/vmlinux.bin: vmlinux FORCE

	$(call if_changed,objcopy)

targets += $(patsubst $(obj)/%,%,$(vmlinux-objs-y)) vmlinux.bin.all vmlinux.relocs

CMD_RELOCS = arch/x86/tools/relocs

quiet_cmd_relocs = RELOCS  $@

$(obj)/vmlinux.relocs: vmlinux FORCE



vmlinux.bin.all-y := $(obj)/vmlinux.bin



$(obj)/vmlinux.bin.gz: $(vmlinux.bin.all-y) FORCE

$(obj)/vmlinux.bin.bz2: $(vmlinux.bin.all-y) FORCE

	$(call if_changed,bzip2)

$(obj)/vmlinux.bin.lzma: $(vmlinux.bin.all-y) FORCE

	$(call if_changed,xzkern)

$(obj)/vmlinux.bin.lz4: $(vmlinux.bin.all-y) FORCE

	$(call if_changed,lz4)

	$(call if_changed,zstd22)

suffix-$(CONFIG_KERNEL_GZIP)	:= gz

suffix-$(CONFIG_KERNEL_LZMA)	:= lzma



      cmd_mkpiggy = $(obj)/mkpiggy $< > $@

targets += piggy.S

$(obj)/piggy.S: $(obj)/vmlinux.bin.$(suffix-y) $(obj)/mkpiggy FORCE

	$(call if_changed,mkpiggy)

# SPDX-License-Identifier: GPL-2.0

# __restore_processor_state() restores %gs after S3 resume and so should not

# itself be stack-protected



 Clang may incorrectly inline functions with stack protector enabled into

# __restore_processor_state(): https://bugs.llvm.org/show_bug.cgi?id=47479



obj-$(CONFIG_HIBERNATION)	+= hibernate_$(BITS).o hibernate_asm_$(BITS).o hibernate.o



# arch/x86/realmode/Makefile

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

#

 Sanitizer runtimes are unavailable and cannot be linked here.



subdir- := rm

obj-y += rmpiggy.o

$(obj)/rmpiggy.o: $(obj)/rm/realmode.bin

	$(Q)$(MAKE) $(build)=$(obj)/rm $@



# arch/x86/realmode/Makefile

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

#

 Sanitizer runtimes are unavailable and cannot be linked here.

OBJECT_FILES_NON_STANDARD	:= y

# Prevents link failures: __sanitizer_cov_trace_pc() is not linked in.

KCOV_INSTRUMENT		:= n

always-y := realmode.bin realmode.relocs

 The link order of the video-*.o modules can matter.  In particular,

 video-vga.o *must* be listed first, followed by video-vesa.o.

 Hardware-specific drivers should follow in the order they should be

# probed, and video-bios.o should typically be last.



realmode-y			+= trampoline_$(BITS).o

realmode-y			+= stack.o









quiet_cmd_pasyms = PASYMS  $@

      cmd_pasyms = $(NM) $(real-prereqs) | sed $(sed-pasyms) | sort | uniq > $@

	$(call if_changed,pasyms)

$(obj)/realmode.lds: $(obj)/pasyms.h

LDFLAGS_realmode.elf := -m elf_i386 --emit-relocs -T



targets += realmode.elf

$(obj)/realmode.elf: $(obj)/realmode.lds $(REALMODE_OBJS) FORCE





targets += realmode.bin

$(obj)/realmode.bin: $(obj)/realmode.elf $(obj)/realmode.relocs FORCE

	$(call if_changed,objcopy)



	$(call if_changed,relocs)

 ---------------------------------------------------------------------------



KBUILD_AFLAGS	:= $(KBUILD_CFLAGS) -D__ASSEMBLY__

# SPDX-License-Identifier: GPL-2.0

#

# x86 crypto algorithms

obj-$(CONFIG_CRYPTO_TWOFISH_586) += twofish-i586.o

twofish-x86_64-y := twofish-x86_64-asm_64.o twofish_glue.o

obj-$(CONFIG_CRYPTO_TWOFISH_X86_64_3WAY) += twofish-x86_64-3way.o

twofish-x86_64-3way-y := twofish-x86_64-asm_64-3way.o twofish_glue_3way.o

obj-$(CONFIG_CRYPTO_TWOFISH_AVX_X86_64) += twofish-avx-x86_64.o



serpent-avx-x86_64-y := serpent-avx-x86_64-asm_64.o serpent_avx_glue.o



obj-$(CONFIG_CRYPTO_DES3_EDE_X86_64) += des3_ede-x86_64.o



obj-$(CONFIG_CRYPTO_CAMELLIA_X86_64) += camellia-x86_64.o

camellia-x86_64-y := camellia-x86_64-asm_64.o camellia_glue.o

obj-$(CONFIG_CRYPTO_CAMELLIA_AESNI_AVX_X86_64) += camellia-aesni-avx-x86_64.o

obj-$(CONFIG_CRYPTO_CAMELLIA_AESNI_AVX2_X86_64) += camellia-aesni-avx2.o



obj-$(CONFIG_CRYPTO_BLOWFISH_X86_64) += blowfish-x86_64.o

blowfish-x86_64-y := blowfish-x86_64-asm_64.o blowfish_glue.o

cast5-avx-x86_64-y := cast5-avx-x86_64-asm_64.o cast5_avx_glue.o

cast6-avx-x86_64-y := cast6-avx-x86_64-asm_64.o cast6_avx_glue.o

obj-$(CONFIG_CRYPTO_AEGIS128_AESNI_SSE2) += aegis128-aesni.o



obj-$(CONFIG_CRYPTO_CHACHA20_X86_64) += chacha-x86_64.o

chacha-x86_64-y := chacha-avx2-x86_64.o chacha-ssse3-x86_64.o chacha_glue.o

chacha-x86_64-$(CONFIG_AS_AVX512) += chacha-avx512vl-x86_64.o

obj-$(CONFIG_CRYPTO_AES_NI_INTEL) += aesni-intel.o

aesni-intel-y := aesni-intel_asm.o aesni-intel_glue.o

aesni-intel-$(CONFIG_64BIT) += aesni-intel_avx-x86_64.o aes_ctrby8_avx-x86_64.o

sha1-ssse3-$(CONFIG_AS_SHA1_NI) += sha1_ni_asm.o

sha256-ssse3-$(CONFIG_AS_SHA256_NI) += sha256_ni_asm.o







obj-$(CONFIG_CRYPTO_CRC32C_INTEL) += crc32c-intel.o

crc32c-intel-y := crc32c-intel_glue.o

crc32c-intel-$(CONFIG_64BIT) += crc32c-pcl-intel-asm_64.o

crc32-pclmul-y := crc32-pclmul_asm.o crc32-pclmul_glue.o

crct10dif-pclmul-y := crct10dif-pcl-asm_64.o crct10dif-pclmul_glue.o



obj-$(CONFIG_CRYPTO_NHPOLY1305_SSE2) += nhpoly1305-sse2.o

nhpoly1305-avx2-y := nh-avx2-x86_64.o nhpoly1305-avx2-glue.o

obj-$(CONFIG_CRYPTO_CURVE25519_X86) += curve25519-x86_64.o



obj-$(CONFIG_CRYPTO_SM4_AESNI_AVX2_X86_64) += sm4-aesni-avx2-x86_64.o



# SPDX-License-Identifier: GPL-2.0

obj-y				:= i386.o init.o

obj-$(CONFIG_PCI_DIRECT)	+= direct.o

obj-$(CONFIG_PCI_OLPC)		+= olpc.o

obj-$(CONFIG_PCI_XEN)		+= xen.o

obj-y				+= legacy.o irq.o

obj-$(CONFIG_STA2X11)           += sta2x11-fixup.o

obj-$(CONFIG_X86_NUMACHIP)	+= numachip.o

obj-$(CONFIG_X86_INTEL_MID)	+= intel_mid_pci.o

obj-y				+= common.o early.o





 SPDX-License-Identifier: GPL-2.0-only

LDFLAGS_vmlinux	:= --no-undefined -X

OBJCOPYFLAGS	:= -O binary -R .note -R .note.gnu.build-id -R .comment -S

ifdef CONFIG_FUNCTION_TRACER

arch-y += -malways-save-lp -mno-relax

endif

 Avoid generating FPU instructions



 Enable <nds32_intrinsic.h>

KBUILD_CFLAGS	+= $(call cc-option, -mno-sched-prolog-epilog)

KBUILD_CFLAGS	+= -mcmodel=large



Default value

head-y		 := arch/nds32/kernel/head.o

textaddr-y	 := $(CONFIG_PAGE_OFFSET)+0xc000



export	TEXTADDR



 If we have a machine-specific directory, then include it in the build.

core-y				+= arch/nds32/kernel/ arch/nds32/mm/

core-$(CONFIG_FPU)              += arch/nds32/math-emu/



BUILTIN_DTB := y

BUILTIN_DTB := n

endif

ifdef CONFIG_CPU_LITTLE_ENDIAN

KBUILD_CFLAGS   += $(call cc-option, -EL)

KBUILD_AFLAGS   += $(call cc-option, -EL)

KBUILD_LDFLAGS  += $(call cc-option, -EL)

CHECKFLAGS      += -D__NDS32_EL__



boot := arch/nds32/boot



	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@



PHONY += vdso_install

vdso_install:

	$(Q)$(MAKE) $(build)=arch/nds32/kernel/vdso $@

vdso_prepare: prepare0

	$(Q)$(MAKE) $(build)=arch/nds32/kernel/vdso include/generated/vdso-offsets.h

  echo  '  Image         - kernel image (arch/$(ARCH)/boot/Image)'

endef

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the Linux/nds32 kernel FPU emulation.

#

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_ALIGNMENT_TRAP)	+= alignment.o

ifdef CONFIG_FUNCTION_TRACER

CFLAGS_REMOVE_proc.o     = $(CC_FLAGS_FTRACE)

endif

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#

CPPFLAGS_vmlinux.lds	:= -DTEXTADDR=$(TEXTADDR)

# Object file lists.

obj-y			:= ex-entry.o ex-exit.o ex-scall.o irq.o \



obj-$(CONFIG_STACKTRACE)	+= stacktrace.o

obj-$(CONFIG_FPU)		+= fpu.o

obj-$(CONFIG_CACHE_L2)		+= atl2c.o

obj-$(CONFIG_PERF_EVENTS) += perf_event_cpu.o

obj-$(CONFIG_PM)		+= pm.o sleep.o

extra-y := head.o vmlinux.lds





obj-$(CONFIG_FUNCTION_TRACER)   += ftrace.o

ifdef CONFIG_FUNCTION_TRACER

CFLAGS_REMOVE_ftrace.o = $(CC_FLAGS_FTRACE)

endif

 SPDX-License-Identifier: GPL-2.0-only



# Building a vDSO image for AArch64.

#

# Author: Will Deacon <will.deacon@arm.com>

 Heavily based on the vDSO Makefiles for other archs.







# Build rules



	-Wl,-soname=linux-vdso.so.1 -Wl,--hash-style=sysv

# Disable gcov profiling for VDSO code

GCOV_PROFILE := n



obj-y += vdso.o

targets += vdso.lds



 Force dependency

$(obj)/vdso.o : $(obj)/vdso.so

# Link rule for the .so file, .lds has to be first

$(obj)/vdso.so.dbg: $(obj)/vdso.lds $(obj-vdso) FORCE



 Strip rule for the .so file

$(obj)/%.so: $(obj)/%.so.dbg FORCE

	$(call if_changed,objcopy)

 Generate VDSO offsets using helper script

gen-vdsosym := $(srctree)/$(src)/gen_vdso_offsets.sh

      cmd_vdsosym = $(NM) $< | $(gen-vdsosym) | LC_ALL=C sort > $@

include/generated/vdso-offsets.h: $(obj)/vdso.so.dbg FORCE

	$(call if_changed,vdsosym)



 Assembly rules for the .S files



sigreturn.o : sigreturn.S



note.o : note.S



datapage.o : datapage.S



gettimeofday.o : gettimeofday.c FORCE



# Actual build commands

quiet_cmd_vdsold = VDSOL   $@

      cmd_vdsold = $(CC) $(c_flags) -Wl,-n -Wl,-T $(real-prereqs) -o $@

quiet_cmd_vdsoas = VDSOA   $@

      cmd_vdsoas = $(CC) $(a_flags) -c -o $@ $<

quiet_cmd_vdsocc = VDSOA   $@

      cmd_vdsocc = $(CC) $(c_flags) -c -o $@ $<

# Install commands for the unstripped file

quiet_cmd_vdso_install = INSTALL $@

      cmd_vdso_install = cp $(obj)/$@.dbg $(MODLIB)/vdso/$@



vdso_install: vdso.so

 SPDX-License-Identifier: GPL-2.0-only

lib-y		:= copy_page.o memcpy.o memmove.o   \

		   memset.o memzero.o \

		   copy_from_user.o copy_to_user.o clear_user.o

 SPDX-License-Identifier: GPL-2.0-only



$(obj)/Image: vmlinux FORCE

	$(call if_changed,objcopy)

	$(call if_changed,gzip)

	$(CONFIG_SHELL) $(srctree)/$(src)/install.sh $(KERNELRELEASE) \



zinstall: $(obj)/Image.gz

 SPDX-License-Identifier: GPL-2.0-only

ifneq '$(CONFIG_NDS32_BUILTIN_DTB)' '""'

else

obj-$(CONFIG_OF) += $(BUILTIN_DTB)



 parisc/Makefile



 This file is included by the global makefile so that you can add your own

 architecture-specific flags and dependencies.



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



# Copyright (C) 1994 by Linus Torvalds

 Portions Copyright (C) 1999 The Puffin Group



 Modified for PA-RISC Linux by Paul Lahaie, Alex deVries, 

# Mike Shaver, Helge Deller and Martin K. Petersen

#



CHECKFLAGS	+= -D__hppa__=1

ifdef CONFIG_64BIT

UTS_MACHINE	:= parisc64

 32-bit



# select defconfig based on actual architecture

ifeq ($(ARCH),parisc64)

	CC_ARCHES := hppa64

	KBUILD_DEFCONFIG := generic-32bit_defconfig



export LD_BFD

		CROSS_COMPILE := $(call cc-cross-prefix, \

	endif

endif

ifdef CONFIG_64BIT

else





KBUILD_CFLAGS += -DCC_USING_PATCHABLE_FUNCTION_ENTRY=1 \



CC_FLAGS_FTRACE := -fpatchable-function-entry=$(NOP_COUNT),$(shell echo $$(($(NOP_COUNT)-1)))

endif

OBJCOPY_FLAGS =-O binary -R .note -R .comment -S



 These flags should be implied by an hppa-linux configuration, but they

 are not in gcc 3.2.



 -mfast-indirect-calls is only relevant for 32-bit kernels.



 Currently we save and restore fpregs on all kernel entry/interruption paths.

 If that gets optimized, we might need to disable the use of fpregs in the

 kernel.

cflags-y	+= -mdisable-fpregs

 Use long jumps instead of long branches (needed if your linker fails to

 link a too big vmlinux executable). Not enabled for building modules.

KBUILD_CFLAGS_KERNEL += -mlong-calls

endif

# Without this, "ld -r" results in .text sections that are too big (> 0x40000)

 for branches to reach stubs. And multiple .text sections trigger a warning

 when creating the sysfs module information section.



 select which processor to optimise for

cflags-$(CONFIG_PA7000)		+= -march=1.1 -mschedule=7100

cflags-$(CONFIG_PA8X00)		+= -march=2.0 -mschedule=8000

head-y			:= arch/parisc/kernel/head.o 

KBUILD_CFLAGS	+= $(cflags-y)

LIBGCC		:= $(shell $(CC) -print-libgcc-file-name)

export LIBGCC

libs-y	+= arch/parisc/lib/ $(LIBGCC)

boot	:= arch/parisc/boot

PALO := $(shell if (which palo 2>&1); then : ; \

	fi)

	else echo $(objtree)/palo.conf; \



	@if test ! -x "$(PALO)"; then \

		echo 'or build it from source and install it somewhere in your $$PATH';\

	@if test ! -f "$(PALOCONF)"; then \

		echo 'A generic palo config file ($(objree)/palo.conf) has been created for you.'; \

		echo 'You should check it and re-run "make palo".'; \

		false; \

	fi

	$(PALO) -f $(PALOCONF)

BOOT_TARGETS    = zImage Image palo lifimage



PHONY += bzImage $(BOOT_TARGETS) $(INSTALL_TARGETS)

 Default kernel to build

all: bzImage

Image: vmlinux

bzImage: vmlinux



vmlinuz: bzImage

else



	$(CONFIG_SHELL) $(srctree)/arch/parisc/install.sh \

	$(CONFIG_SHELL) $(srctree)/arch/parisc/install.sh \



CLEAN_FILES	+= lifimage

MRPROPER_FILES	+= palo.conf

	@echo  '		  (your) ~/bin/$(INSTALLKERNEL) or'

	@echo  '		  copy to $$(INSTALL_PATH)'



# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the linux/parisc floating point code

#

 See arch/parisc/math-emu/README

ccflags-y := -Wno-parentheses -Wno-implicit-function-declaration \

	-Wno-uninitialized -Wno-strict-prototypes -Wno-return-type \



obj-y	 := frnd.o driver.o decode_exc.o fpudispatch.o denormal.o \

		fcnvfx.o fcnvuf.o fcnvfu.o fcnvfut.o dfdiv.o sfdiv.o \

		dfrem.o sfrem.o dfcmp.o sfcmp.o

 Math emulation code beyond the FRND is required for 712/80i and

 other very old or stripped-down PA-RISC CPUs -- not currently supported



CFLAGS_REMOVE_fpudispatch.o	= -Wimplicit-fallthrough

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for arch/parisc/mm





obj-y	 := init.o fault.o ioremap.o fixmap.o

obj-$(CONFIG_HUGETLB_PAGE) += hugetlbpage.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for arch/parisc/kernel

#



obj-y	     	:= cache.o pacache.o setup.o pdt.o traps.o time.o irq.o \

		   pa7300lc.o syscall.o entry.o sys_parisc.o firmware.o \

		   process.o processor.o pdc_cons.o pdc_chassis.o unwind.o \



 Do not profile debug and lowlevel utilities

CFLAGS_REMOVE_patch.o = $(CC_FLAGS_FTRACE)

endif

obj-$(CONFIG_SMP)	+= smp.o

obj-$(CONFIG_PA11)	+= pci-dma.o

obj-$(CONFIG_64BIT)	+= sys_parisc32.o signal32.o

obj-$(CONFIG_STACKTRACE)+= stacktrace.o

 only supported for PCX-W/U in 64-bit mode at the moment

obj-$(CONFIG_FUNCTION_TRACER)		+= ftrace.o

obj-$(CONFIG_FUNCTION_GRAPH_TRACER)	+= ftrace.o

obj-$(CONFIG_JUMP_LABEL)		+= jump_label.o

obj-$(CONFIG_KPROBES)			+= kprobes.o

obj-$(CONFIG_TOC)			+= toc.o toc_asm.o

# SPDX-License-Identifier: GPL-2.0

kapi := arch/$(SRCARCH)/include/generated/asm



_dummy := $(shell [ -d '$(uapi)' ] || mkdir -p '$(uapi)')	\



syscall := $(src)/syscall.tbl

systbl := $(srctree)/scripts/syscalltbl.sh



quiet_cmd_systbl = SYSTBL  $@

      cmd_systbl = $(CONFIG_SHELL) $(systbl) --abis common,$* $< $@

$(uapi)/unistd_%.h: $(syscall) $(syshdr) FORCE



$(kapi)/syscall_table_%.h: $(syscall) $(systbl) FORCE



kapisyshdr-y		+= syscall_table_32.h		\



kapisyshdr-y	:= $(addprefix $(kapi)/, $(kapisyshdr-y))



all: $(uapisyshdr-y) $(kapisyshdr-y)

	@:

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for parisc-specific library files

#



 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the linux parisc-specific parts of the boot image creator.





targets += bzImage

subdir- := compressed



$(obj)/bzImage: $(obj)/compressed/vmlinux FORCE

	$(call if_changed,objcopy)

$(obj)/compressed/vmlinux: FORCE

 SPDX-License-Identifier: GPL-2.0-only



# linux/arch/parisc/boot/compressed/Makefile

#

# create a compressed self-extracting vmlinux image from the original vmlinux

#

KCOV_INSTRUMENT := n

GCOV_PROFILE := n

UBSAN_SANITIZE := n

targets += vmlinux.bin.xz vmlinux.bin.lzma vmlinux.bin.lzo vmlinux.bin.lz4

targets += $(OBJECTS) sizes.h

targets += real2.S firmware.c

KBUILD_CFLAGS := -D__KERNEL__ -O2 -DBOOTLOADER

KBUILD_CFLAGS += -DDISABLE_BRANCH_PROFILING

KBUILD_CFLAGS += -fno-strict-aliasing

KBUILD_CFLAGS += -fno-PIE -mno-space-regs -mdisable-fpregs -Os

ifndef CONFIG_64BIT



LDFLAGS_vmlinux := -X -e startup --as-needed -T

$(obj)/vmlinux: $(obj)/vmlinux.lds $(addprefix $(obj)/, $(OBJECTS)) $(LIBGCC) FORCE



sed-sizes := -e 's/^\([0-9a-fA-F]*\) . \(__bss_start\|_end\|parisc_kernel_start\)$$/\#define SZ\2 0x\1/p'

quiet_cmd_sizes = GEN $@

      cmd_sizes = $(NM) $< | sed -n $(sed-sizes) > $@



AFLAGS_head.o += -I$(objtree)/$(obj) -DBOOTLOADER

$(obj)/head.o: $(obj)/sizes.h

CFLAGS_misc.o += -I$(objtree)/$(obj)

$(obj)/misc.o: $(obj)/sizes.h

$(obj)/firmware.o: $(obj)/firmware.c

$(obj)/firmware.c: $(srctree)/arch/$(SRCARCH)/kernel/firmware.c



$(obj)/real2.o: $(obj)/real2.S

$(obj)/real2.S: $(srctree)/arch/$(SRCARCH)/kernel/real2.S



$(obj)/vmlinux.lds: $(obj)/sizes.h



vmlinux.bin.all-y := $(obj)/vmlinux.bin

suffix-$(CONFIG_KERNEL_BZIP2) := bz2

suffix-$(CONFIG_KERNEL_LZ4)  := lz4

suffix-$(CONFIG_KERNEL_LZMA)  := lzma

suffix-$(CONFIG_KERNEL_LZO)  := lzo

suffix-$(CONFIG_KERNEL_XZ)  := xz

	$(call if_changed,gzip)

$(obj)/vmlinux.bin.lz4: $(vmlinux.bin.all-y) FORCE

	$(call if_changed,lz4)

$(obj)/vmlinux.bin.lzma: $(vmlinux.bin.all-y) FORCE

$(obj)/vmlinux.bin.lzo: $(vmlinux.bin.all-y) FORCE

	$(call if_changed,lzo)

$(obj)/vmlinux.bin.xz: $(vmlinux.bin.all-y) FORCE



	$(call if_changed,ld)



 arch/arm/Makefile



 This file is included by the global makefile so that you can add your own

 architecture-specific flags and dependencies.



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



 Copyright (C) 1995-2001 by Russell King



LDFLAGS_vmlinux	+= --be8



GZFLAGS		:=-9

KBUILD_CFLAGS	+=-pipe



 Never generate .eh_frame

KBUILD_CFLAGS	+= $(call cc-option,-fno-dwarf2-cfi-asm)

# This should work on most of the modern platforms



 defines filename extension depending memory management type.

KBUILD_CFLAGS	+= $(call cc-option,-mno-unaligned-access)

endif

ifeq ($(CONFIG_FRAME_POINTER),y)

KBUILD_CFLAGS	+=-fno-omit-frame-pointer



ifeq ($(CONFIG_CPU_BIG_ENDIAN),y)

KBUILD_CPPFLAGS	+= -mbig-endian

CHECKFLAGS	+= -D__ARMEB__

KBUILD_LDFLAGS	+= -EB

KBUILD_CPPFLAGS	+= -mlittle-endian

CHECKFLAGS	+= -D__ARMEL__

KBUILD_LDFLAGS	+= -EL

endif



 The Scalar Replacement of Aggregates (SRA) optimization pass in GCC 4.9 and

 later may result in code being generated that handles signed short and signed

 char struct members incorrectly. So disable it.

# (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65932)

#

KBUILD_CFLAGS	+= $(call cc-option,-fno-ipa-sra)

 This selects which instruction set is used.

 Note that GCC does not numerically define an architecture version

 macro, but instead defines a whole series of macros which makes

 testing for a specific architecture or later rather impossible.

 Only override the compiler option if ARMv6. The ARMv6K extensions are

 always available in ARMv7

arch-$(CONFIG_CPU_32v6K)	=-D__LINUX_ARM_ARCH__=6 -march=armv6k

endif

arch-$(CONFIG_CPU_32v5)		=-D__LINUX_ARM_ARCH__=5 -march=armv5te

arch-$(CONFIG_CPU_32v3)		=-D__LINUX_ARM_ARCH__=3 -march=armv3m

 Evaluate arch cc-option calls now



# This selects how we optimise for the processor.

tune-$(CONFIG_CPU_ARM9TDMI)	=-mtune=arm9tdmi

tune-$(CONFIG_CPU_ARM940T)	=-mtune=arm9tdmi

tune-$(CONFIG_CPU_XSCALE)	=-mtune=xscale

tune-$(CONFIG_CPU_XSC3)		=-mtune=xscale

tune-$(CONFIG_CPU_V6K)		=-mtune=arm1136j-s

 Evaluate tune cc-option calls now



CFLAGS_ABI	:=-mabi=aapcs-linux -mfpu=vfp



ifeq ($(CONFIG_ARM_UNWIND),y)



CFLAGS_ABI	+= -meabi gnu

endif

ifeq ($(CONFIG_CURRENT_POINTER_IN_TPIDRURO),y)

CFLAGS_ABI	+= -mtp=cp15

endif

 Accept old syntax despite ".syntax unified"



CFLAGS_ISA	:=-mthumb -Wa,-mimplicit-it=always $(AFLAGS_NOWARN)

AFLAGS_ISA	:=$(CFLAGS_ISA) -Wa$(comma)-mthumb

CFLAGS_ISA	:=$(call cc-option,-marm,) $(AFLAGS_NOWARN)



 Need -Uarm for gcc < 3.x

KBUILD_CFLAGS	+=$(CFLAGS_ABI) $(CFLAGS_ISA) $(arch-y) $(tune-y) $(call cc-option,-mshort-load-bytes,$(call cc-option,-malignment-traps,)) -msoft-float -Uarm

KBUILD_AFLAGS	+=$(CFLAGS_ABI) $(AFLAGS_ISA) $(arch-y) $(tune-y) -include asm/unified.h -msoft-float



Default value

head-y		:= arch/arm/kernel/head$(MMUEXT).o

 Text offset. This list is sorted numerically by address in order to

 provide a means to avoid/resolve conflicts in multi-arch kernels.

 Note: the 32kB below this value is reserved for use by the kernel

# during boot, and this offset is critical to the functioning of

 kexec-tools.

# We don't want the htc bootloader to corrupt kernel during resume

textofs-$(CONFIG_PM_H1940)      := 0x00108000

 RTD1195 has Boot ROM at start of address space

# SA1111 DMA bug: we don't want the kernel to live in precious DMA-able memory

textofs-$(CONFIG_SA1111) := 0x00208000

endif

textofs-$(CONFIG_ARCH_MSM8X60) := 0x00208000

textofs-$(CONFIG_ARCH_MESON) := 0x00208000



# Machine directory name.  This list is sorted alphanumerically

# by CONFIG_* macro name.

machine-$(CONFIG_ARCH_ALPINE)		+= alpine

machine-$(CONFIG_ARCH_AT91)		+= at91

machine-$(CONFIG_ARCH_BCM)		+= bcm

machine-$(CONFIG_ARCH_CLPS711X)		+= clps711x

machine-$(CONFIG_ARCH_DAVINCI)		+= davinci

machine-$(CONFIG_ARCH_DIGICOLOR)	+= digicolor

machine-$(CONFIG_ARCH_EP93XX)		+= ep93xx

machine-$(CONFIG_ARCH_GEMINI)		+= gemini

machine-$(CONFIG_ARCH_HISI)		+= hisi

machine-$(CONFIG_ARCH_INTEGRATOR)	+= integrator

machine-$(CONFIG_ARCH_IXP4XX)		+= ixp4xx

machine-$(CONFIG_ARCH_LPC18XX)		+= lpc18xx

machine-$(CONFIG_ARCH_MESON)		+= meson

machine-$(CONFIG_ARCH_MPS2)		+= vexpress

machine-$(CONFIG_ARCH_MV78XX0)		+= mv78xx0

machine-$(CONFIG_ARCH_MXC)		+= imx

machine-$(CONFIG_ARCH_MILBEAUT)		+= milbeaut

machine-$(CONFIG_ARCH_MSTARV7)		+= mstar

machine-$(CONFIG_ARCH_NPCM)		+= npcm

machine-$(CONFIG_ARCH_OXNAS)		+= oxnas

machine-$(CONFIG_ARCH_ORION5X)		+= orion5x

machine-$(CONFIG_ARCH_QCOM)		+= qcom

machine-$(CONFIG_ARCH_REALTEK)		+= realtek

machine-$(CONFIG_ARCH_ROCKCHIP)		+= rockchip

machine-$(CONFIG_PLAT_SAMSUNG)		+= s3c

machine-$(CONFIG_ARCH_SA1100)		+= sa1100

machine-$(CONFIG_ARCH_STI)		+= sti

machine-$(CONFIG_ARCH_SUNXI)		+= sunxi

machine-$(CONFIG_ARCH_U8500)		+= ux500

machine-$(CONFIG_ARCH_VERSATILE)	+= versatile

machine-$(CONFIG_ARCH_VT8500)		+= vt8500

machine-$(CONFIG_PLAT_SPEAR)		+= spear

# Platform directory name.  This list is sorted alphanumerically

# by CONFIG_* macro name.

plat-$(CONFIG_PLAT_ORION)	+= orion

plat-$(CONFIG_PLAT_PXA)		+= pxa



# The byte offset of the kernel image in RAM from the start of RAM.

TEXT_OFFSET := $(textofs-y)

 The first directory contains additional information for the boot setup code

else

MACHINE  :=

endif

ifeq ($(CONFIG_ARCH_MULTIPLATFORM),y)

MACHINE  :=

endif

platdirs := $(patsubst %,arch/arm/plat-%/,$(sort $(plat-y)))

ifneq ($(CONFIG_ARCH_MULTIPLATFORM),y)

ifneq ($(CONFIG_ARM_SINGLE_ARMV7M),y)



export	TEXT_OFFSET GZFLAGS MMUEXT

# If we have a machine-specific directory, then include it in the build.



 For cleaning

core-				+= $(patsubst %,arch/arm/plat-%/, $(plat-))

libs-y				:= arch/arm/lib/ $(libs-y)

# Default target when executing plain make

boot := arch/arm/boot

ifeq ($(CONFIG_XIP_KERNEL),y)

else



prepare: stack_protector_prepare

stack_protector_prepare: prepare0

	$(eval KBUILD_CFLAGS += $(SSP_PLUGIN_CFLAGS))

	$(eval GCC_PLUGINS_CFLAGS += $(SSP_PLUGIN_CFLAGS))

endif

all:	$(notdir $(KBUILD_IMAGE))







# Convert bzImage to zImage

bzImage: zImage

BOOT_TARGETS	= zImage Image xipImage bootpImage uImage

INSTALL_TARGETS	= zinstall uinstall install



bootpImage uImage: zImage

zImage: Image

$(BOOT_TARGETS): vmlinux

	$(Q)$(MAKE) $(build)=$(boot) MACHINE=$(MACHINE) $(boot)/$@



$(INSTALL_TARGETS):

	$(CONFIG_SHELL) $(srctree)/$(boot)/install.sh "$(KERNELRELEASE)" \



PHONY += vdso_install

vdso_install:

ifeq ($(CONFIG_VDSO),y)



 My testing targets (bypasses dependencies)



  echo  '* zImage        - Compressed kernel image (arch/$(ARCH)/boot/zImage)'

  echo  '  Image         - Uncompressed kernel image (arch/$(ARCH)/boot/Image)'

  echo  '  bootpImage    - Combined zImage and initial RAM disk'

  echo  '                  (supply initrd image via make variable INITRD=<path>)'

  echo  '  install       - Install uncompressed kernel'

  echo  '  zinstall      - Install compressed kernel'

  echo  '                  Install using (your) ~/bin/$(INSTALLKERNEL) or'

  echo  '                  install to $$(INSTALL_PATH) and run lilo'

  echo  '  vdso_install  - Install unstripped vdso.so to $$(INSTALL_MOD_PATH)/vdso'

endef

# SPDX-License-Identifier: GPL-2.0

#

 Copyright (C) 1998, 1999, 2001 Philip Blundell





obj-$(CONFIG_FPE_NWFPE)		+= nwfpe.o

				   softfloat.o single_cpdo.o double_cpdo.o \



nwfpe-$(CONFIG_FPE_NWFPE_XP)	+= extended_cpdo.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.







obj-$(CONFIG_SA1111)		+= sa1111.o

obj-$(CONFIG_DMABOUNCE)		+= dmabounce.o

obj-$(CONFIG_SHARP_LOCOMO)	+= locomo.o

obj-$(CONFIG_SHARP_SCOOP)	+= scoop.o

obj-$(CONFIG_CPU_V7)		+= secure_cntvoff.o

CFLAGS_REMOVE_mcpm_entry.o	= -pg

AFLAGS_mcpm_head.o		:= -march=armv7-a

obj-$(CONFIG_BL_SWITCHER)	+= bL_switcher.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_PM) += pm.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





 Object file lists.



obj-y			:= common.o dma.o isa-irq.o

pci-y			+= dc21285.o

pci-$(CONFIG_ARCH_CATS) += cats-pci.o



obj-$(CONFIG_ARCH_NETWINDER) += netwinder-hw.o isa-timer.o

obj-$(CONFIG_PCI)	+=$(pci-y)

obj-$(CONFIG_ISA)	+= isa.o isa-rtc.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#



# SPDX-License-Identifier: GPL-2.0

ifdef CONFIG_THUMB2_KERNEL

else

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_UPROBES)		+= core.o actions-arm.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_KPROBES)		+= core.o actions-common.o checkers-common.o



obj-$(CONFIG_KPROBES)		+= actions-thumb.o checkers-thumb.o

else

test-kprobes-objs		+= test-arm.o

endif

# SPDX-License-Identifier: GPL-2.0



obj-y                                   += io.o

obj-y					+= reset.o

obj-y					+= sleep.o

obj-y					+= sleep-tegra20.o

obj-$(CONFIG_ARCH_TEGRA_2x_SOC)		+= pm-tegra20.o

obj-$(CONFIG_SMP)			+= platsmp.o



obj-$(CONFIG_ARCH_TEGRA_124_SOC)	+= pm-tegra30.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_ARCH_STI) 		+= board-dt.o

# SPDX-License-Identifier: GPL-2.0

obj-y += board-dt.o

# SPDX-License-Identifier: GPL-2.0



obj-$(CONFIG_MACH_TS209)	+= ts209-setup.o tsx09-common.o



obj-$(CONFIG_MACH_D2NET_DT)	+= board-d2net.o

obj-$(CONFIG_MACH_RD88F5182_DT)	+= board-rd88f5182.o

 SPDX-License-Identifier: GPL-2.0-only



 linux/arch/arm/vfp/Makefile



# Copyright (C) 2001 ARM Limited

#

# ccflags-y := -DDEBUG

 asflags-y := -DDEBUG



obj-y		+= vfpmodule.o entry.o vfphw.o vfpsingle.o vfpdouble.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





obj-pci-n	:=

# Device tree platform

obj-pci-$(CONFIG_MACH_IXP4XX_OF)	+= ixp4xx-of.o



obj-y	+= common.o



obj-$(CONFIG_PCI)		+= $(obj-pci-$(CONFIG_PCI)) common-pci.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SMP)	+= platsmp.o

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_DOVE_LEGACY)	+= irq.o mpp.o

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_ARCH_WPCM450)	+= wpcm450.o

obj-$(CONFIG_ARCH_NPCM7XX)	+= npcm7xx.o

obj-$(CONFIG_SMP)		+= platsmp.o headsmp.o

# SPDX-License-Identifier: GPL-2.0

obj-y				+= axxia.o

obj-$(CONFIG_SMP)		+= platsmp.o

 SPDX-License-Identifier: GPL-2.0-only

 Makefile for Cortina systems Gemini

# SPDX-License-Identifier: GPL-2.0





obj-$(CONFIG_MACH_MVEBU_ANY)	 += system-controller.o mvebu-soc-id.o

ifeq ($(CONFIG_MACH_MVEBU_V7),y)

obj-y				 += cpu-reset.o board-v7.o coherency.o coherency_ll.o pmsu.o pmsu_ll.o

obj-$(CONFIG_SMP)		 += platsmp.o headsmp.o platsmp-a9.o headsmp-a9.o

endif



# SPDX-License-Identifier: GPL-2.0

#

# Copyright 2009 Simtec Electronics



ifdef CONFIG_ARCH_S3C24XX

include $(src)/Makefile.s3c24xx

endif



# Objects we always build independent of SoC choice

obj-y				+= init.o cpu.o

 ADC





# devices



obj-$(CONFIG_SAMSUNG_ATAGS)	+= devs.o

obj-$(CONFIG_SAMSUNG_ATAGS)	+= dev-uart.o

obj-$(CONFIG_GPIO_SAMSUNG)     += gpio-samsung.o

# PM support

obj-$(CONFIG_SAMSUNG_PM)	+= pm.o pm-common.o



obj-$(CONFIG_SAMSUNG_WAKEMASK)	+= wakeup-mask.o

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the linux kernel, U8500 machine.





obj-$(CONFIG_UX500_SOC_DB8500)	+= cpu-db8500.o

obj-$(CONFIG_SMP)		+= platsmp.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#

# Object file lists.

	  riscpc.o time.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





obj-$(CONFIG_ARCH_VEXPRESS)		:= v2m.o

obj-$(CONFIG_ARCH_VEXPRESS_TC2_PM)	+= tc2_pm.o

CFLAGS_REMOVE_tc2_pm.o			= -pg



obj-$(CONFIG_ARCH_MPS2)			+= v2m-mps2.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.



obj-y			:= core.o clock.o timer-ep93xx.o



obj-$(CONFIG_MACH_ADSSPHERE)	+= adssphere.o

obj-$(CONFIG_MACH_EDB93XX)	+= edb93xx.o

obj-$(CONFIG_MACH_GESBC9312)	+= gesbc9312.o

obj-$(CONFIG_MACH_MICRO9)	+= micro9.o

obj-$(CONFIG_MACH_SNAPPER_CL15)	+= snappercl15.o

obj-$(CONFIG_MACH_TS72XX)	+= ts72xx.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





 Object file lists.



obj-y					:= core.o

obj-$(CONFIG_ARCH_INTEGRATOR_AP)	+= integrator_ap.o

obj-$(CONFIG_ARCH_INTEGRATOR_CP)	+= integrator_cp.o

 SPDX-License-Identifier: GPL-2.0-only

obj-${CONFIG_SMP} += platsmp.o

# SPDX-License-Identifier: GPL-2.0

#

# linux/arch/arm/tools/Makefile

#

# Copyright (C) 2001 Russell King

#

kapi := $(gen)/asm

uapi := $(gen)/uapi/asm

systbl := $(srctree)/scripts/syscalltbl.sh

syscall := $(src)/syscall.tbl

gen-y := $(gen)/calls-oabi.S

kapi-hdrs-y := $(kapi)/unistd-nr.h

kapi-hdrs-y += $(kapi)/mach-types.h

uapi-hdrs-y += $(uapi)/unistd-eabi.h

targets += $(addprefix ../../../,$(gen-y) $(kapi-hdrs-y) $(uapi-hdrs-y))

PHONY += kapi uapi





 Create output directory if not already present



quiet_cmd_gen_mach = GEN     $@

      cmd_gen_mach = $(AWK) -f $(real-prereqs) > $@

	$(call if_changed,gen_mach)



quiet_cmd_systbl = SYSTBL  $@

      cmd_systbl = $(CONFIG_SHELL) $(systbl) --abis common,$* $< $@



	$(call if_changed,syshdr)

$(kapi)/unistd-nr.h: $(syscall) $(sysnr) FORCE

	$(call if_changed,sysnr)

$(gen)/calls-%.S: $(syscall) $(systbl) FORCE

 SPDX-License-Identifier: GPL-2.0-only

# Object file lists.

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SMP)	+= headsmp.o platsmp.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SMP) += platsmp.o

 SPDX-License-Identifier: GPL-2.0-only



# SPDX-License-Identifier: GPL-2.0

#

# Copyright (c) 2010-2011 Samsung Electronics Co., Ltd.

		http://www.samsung.com/



obj-$(CONFIG_ARCH_EXYNOS)	+= exynos.o exynos-smc.o firmware.o

obj-$(CONFIG_EXYNOS_CPU_SUSPEND) += pm.o sleep.o



obj-$(CONFIG_SMP)		+= platsmp.o headsmp.o

obj-$(CONFIG_EXYNOS_MCPM)	+= mcpm-exynos.o

CFLAGS_mcpm-exynos.o		+= -march=armv7-a

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





 Common support

obj-y := io.o id.o sram-init.o sram.o time.o irq.o mux.o flash.o \

	 serial.o devices.o dma.o fb.o

obj-y += clock.o clock_data.o opp_data.o reset.o pm_bus.o timer.o

obj-y += mcbsp.o

endif

obj-$(CONFIG_OMAP_32K_TIMER)	+= timer32k.o

 OCPI interconnect support for 1710, 1610 and 5912



 Power Management

obj-$(CONFIG_PM) += pm.o sleep.o

obj-y					+= $(i2c-omap-m) $(i2c-omap-y)



obj-y					+= $(usb-fs-m) $(usb-fs-y)

# Specific board support

					   board-nand.o

obj-$(CONFIG_MACH_OMAP_FSAMPLE)		+= board-fsample.o board-nand.o

obj-$(CONFIG_MACH_OMAP_OSK)		+= board-osk.o

					   board-nand.o

obj-$(CONFIG_MACH_OMAP_PALMTE)		+= board-palmte.o

obj-$(CONFIG_MACH_OMAP_PALMZ71)		+= board-palmz71.o

obj-$(CONFIG_MACH_OMAP_PALMTT)		+= board-palmtt.o

obj-$(CONFIG_MACH_AMS_DELTA)		+= board-ams-delta.o ams-delta-fiq.o \

					   ams-delta-fiq-handler.o

obj-$(CONFIG_MACH_SX1)			+= board-sx1.o board-sx1-mmc.o

obj-$(CONFIG_MACH_HERALD)		+= board-htcherald.o

ifeq ($(CONFIG_ARCH_OMAP15XX),y)

# Innovator-1510 FPGA

obj-$(CONFIG_MACH_OMAP_INNOVATOR)	+= fpga.o

endif

# GPIO

obj-$(CONFIG_ARCH_OMAP850)		+= gpio7xx.o

obj-$(CONFIG_ARCH_OMAP16XX)		+= gpio16xx.o

ifneq ($(CONFIG_FB_OMAP),)

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#

obj-y	:= common.o serial.o

obj-y	+= pm.o suspend.o

# SPDX-License-Identifier: GPL-2.0

#

 Copyright (c) 2010 Samsung Electronics Co., Ltd.

 		http://www.samsung.com/



obj-$(CONFIG_PM_SLEEP)		+= pm.o sleep.o

obj-y				+= s5pv210.o

# SPDX-License-Identifier: GPL-2.0

#

 SPEAr Platform specific Makefile





ccflags-$(CONFIG_ARCH_MULTIPLATFORM) := -I$(srctree)/$(src)/include

# Common support

obj-y	:= restart.o time.o

smp-$(CONFIG_HOTPLUG_CPU)	+= hotplug.o

obj-$(CONFIG_ARCH_SPEAR13XX)	+= spear13xx.o $(smp-y)

obj-$(CONFIG_MACH_SPEAR1310)	+= spear1310.o

obj-$(CONFIG_MACH_SPEAR1340)	+= spear1340.o

obj-$(CONFIG_ARCH_SPEAR3XX)	+= pl080.o

obj-$(CONFIG_MACH_SPEAR300)	+= spear300.o

obj-$(CONFIG_MACH_SPEAR310)	+= spear310.o

obj-$(CONFIG_MACH_SPEAR320)	+= spear320.o

obj-$(CONFIG_ARCH_SPEAR6XX)	+= pl080.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





obj-$(CONFIG_ARCH_IOP32X) += i2c.o

obj-$(CONFIG_ARCH_IOP32X) += setup.o

obj-$(CONFIG_ARCH_IOP32X) += time.o

obj-$(CONFIG_ARCH_IOP32X) += pmu.o



obj-$(CONFIG_MACH_GLANTANK) += glantank.o

obj-$(CONFIG_ARCH_IQ80321) += iq80321.o

obj-$(CONFIG_ARCH_IQ31244) += iq31244.o

obj-$(CONFIG_MACH_N2100) += n2100.o

obj-$(CONFIG_MACH_EM7210) += em7210.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux arm-specific parts of the memory manager.





obj-y				+= dma-mapping$(MMUEXT).o

				   mmap.o pgd.o mmu.o pageattr.o



ifneq ($(CONFIG_MMU),y)

obj-y				+= nommu.o

obj-$(CONFIG_ARM_MPU)		+= pmsa-v7.o pmsa-v8.o

endif

obj-$(CONFIG_ARM_PTDUMP_DEBUGFS)	+= ptdump_debugfs.o

obj-$(CONFIG_MODULES)		+= proc-syms.o



obj-$(CONFIG_ALIGNMENT_TRAP)	+= alignment.o

obj-$(CONFIG_HUGETLB_PAGE)	+= hugetlbpage.o



obj-$(CONFIG_CPU_ABRT_NOMMU)	+= abort-nommu.o

obj-$(CONFIG_CPU_ABRT_EV4)	+= abort-ev4.o

obj-$(CONFIG_CPU_ABRT_EV4T)	+= abort-ev4t.o

obj-$(CONFIG_CPU_ABRT_LV4T)	+= abort-lv4t.o

obj-$(CONFIG_CPU_ABRT_EV5T)	+= abort-ev5t.o

obj-$(CONFIG_CPU_ABRT_EV5TJ)	+= abort-ev5tj.o

obj-$(CONFIG_CPU_ABRT_EV6)	+= abort-ev6.o

obj-$(CONFIG_CPU_ABRT_EV7)	+= abort-ev7.o

AFLAGS_abort-ev6.o	:=-Wa,-march=armv6k

AFLAGS_abort-ev7.o	:=-Wa,-march=armv7-a



obj-$(CONFIG_CPU_CACHE_V4WT)	+= cache-v4wt.o

obj-$(CONFIG_CPU_CACHE_V6)	+= cache-v6.o

obj-$(CONFIG_CPU_CACHE_FA)	+= cache-fa.o

obj-$(CONFIG_CPU_CACHE_V7M)	+= cache-v7m.o

AFLAGS_cache-v6.o	:=-Wa,-march=armv6



obj-$(CONFIG_CPU_COPY_V4WB)	+= copypage-v4wb.o

obj-$(CONFIG_CPU_COPY_V6)	+= copypage-v6.o context.o

obj-$(CONFIG_CPU_SA1100)	+= copypage-v4mc.o

obj-$(CONFIG_CPU_XSCALE)	+= copypage-xscale.o

obj-$(CONFIG_CPU_COPY_FA)	+= copypage-fa.o

CFLAGS_copypage-feroceon.o := -march=armv5te

obj-$(CONFIG_CPU_TLB_V4WT)	+= tlb-v4.o

obj-$(CONFIG_CPU_TLB_V4WBI)	+= tlb-v4wbi.o

obj-$(CONFIG_CPU_TLB_FEROCEON)	+= tlb-v4wbi.o	# reuse v4wbi TLB functions

obj-$(CONFIG_CPU_TLB_V7)	+= tlb-v7.o



AFLAGS_tlb-v6.o		:=-Wa,-march=armv6

AFLAGS_tlb-v7.o		:=-Wa,-march=armv7-a

obj-$(CONFIG_CPU_ARM720T)	+= proc-arm720.o

obj-$(CONFIG_CPU_ARM920T)	+= proc-arm920.o

obj-$(CONFIG_CPU_ARM925T)	+= proc-arm925.o

obj-$(CONFIG_CPU_ARM940T)	+= proc-arm940.o

obj-$(CONFIG_CPU_FA526)		+= proc-fa526.o

obj-$(CONFIG_CPU_ARM1020)	+= proc-arm1020.o

obj-$(CONFIG_CPU_ARM1020E)	+= proc-arm1020e.o

obj-$(CONFIG_CPU_ARM1022)	+= proc-arm1022.o

obj-$(CONFIG_CPU_ARM1026)	+= proc-arm1026.o

obj-$(CONFIG_CPU_XSC3)		+= proc-xsc3.o

obj-$(CONFIG_CPU_MOHAWK)	+= proc-mohawk.o

obj-$(CONFIG_CPU_FEROCEON)	+= proc-feroceon.o

obj-$(CONFIG_CPU_V7M)		+= proc-v7m.o



obj-$(CONFIG_OUTER_CACHE)	+= l2c-common.o

obj-$(CONFIG_CACHE_FEROCEON_L2)	+= cache-feroceon-l2.o

obj-$(CONFIG_CACHE_L2X0_PMU)	+= cache-l2x0-pmu.o

obj-$(CONFIG_CACHE_TAUROS2)	+= cache-tauros2.o



obj-$(CONFIG_KASAN)		+= kasan_init.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





obj-$(CONFIG_SMP)	+= headsmp.o platsmp.o

obj-$(CONFIG_EDAC_ALTERA_OCRAM)	+= ocram.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.







ccflags-$(CONFIG_ARCH_MULTIPLATFORM) := -I$(srctree)/$(src)/include

# Common objects



obj-$(CONFIG_DAVINCI_MUX)		+= mux.o

 Chip specific

obj-$(CONFIG_ARCH_DAVINCI_DM355)        += dm355.o devices.o

obj-$(CONFIG_ARCH_DAVINCI_DM646x)       += dm646x.o devices.o

obj-$(CONFIG_ARCH_DAVINCI_DM365)	+= dm365.o devices.o

obj-$(CONFIG_ARCH_DAVINCI_DA830)	+= da830.o devices-da8xx.o usb-da8xx.o

obj-$(CONFIG_ARCH_DAVINCI_DA850)	+= da850.o devices-da8xx.o usb-da8xx.o

# Board specific

obj-$(CONFIG_MACH_DA8XX_DT)		+= da8xx-dt.o pdata-quirks.o

obj-$(CONFIG_MACH_SFFSDR)		+= board-sffsdr.o

obj-$(CONFIG_MACH_MITYOMAPL138)		+= board-mityomapl138.o



 Power Management

ifeq ($(CONFIG_SUSPEND),y)

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





AFLAGS_head.o        := -DTEXT_OFFSET=$(TEXT_OFFSET)

ifdef CONFIG_FUNCTION_TRACER

CFLAGS_REMOVE_insn.o = -pg

CFLAGS_REMOVE_patch.o = -pg

endif

CFLAGS_REMOVE_return_address.o = -pg

# Object file lists.

obj-y		:= elf.o entry-common.o irq.o opcodes.o \

		   process.o ptrace.o reboot.o io.o \

		   setup.o signal.o sigreturn_codes.o \







obj-$(CONFIG_ATAGS)		+= atags_parse.o



else



obj-$(CONFIG_CPU_IDLE)		+= cpuidle.o

obj-$(CONFIG_FIQ)		+= fiq.o fiqasm.o

obj-$(CONFIG_MODULES)		+= armksyms.o module.o

obj-$(CONFIG_PCI)		+= bios32.o isa.o

obj-$(CONFIG_HIBERNATION)	+= hibernate.o

obj-$(CONFIG_SMP)		+= smp.o

obj-$(CONFIG_ARM_ARCH_TIMER)	+= arch_timer.o

obj-$(CONFIG_FUNCTION_TRACER)	+= entry-ftrace.o

obj-$(CONFIG_DYNAMIC_FTRACE)	+= ftrace.o insn.o patch.o

# Main staffs in KPROBES are in arch/arm/probes/ .

obj-$(CONFIG_OABI_COMPAT)	+= sys_oabi-compat.o

obj-$(CONFIG_ARM_UNWIND)	+= unwind.o

obj-$(CONFIG_OF)		+= devtree.o

obj-$(CONFIG_SWP_EMULATE)	+= swp_emulate.o

CFLAGS_swp_emulate.o		:= -Wa,-march=armv7-a

obj-$(CONFIG_HAVE_HW_BREAKPOINT)	+= hw_breakpoint.o

obj-$(CONFIG_CPU_XSCALE)	+= xscale-cp0.o

obj-$(CONFIG_CPU_XSC3)		+= xscale-cp0.o

obj-$(CONFIG_CPU_PJ4B)		+= pj4-cp0.o

obj-$(CONFIG_IWMMXT)		+= iwmmxt.o

obj-$(CONFIG_PERF_EVENTS)	+= perf_regs.o perf_callchain.o

obj-$(CONFIG_HW_PERF_EVENTS)	+= perf_event_xscale.o perf_event_v6.o \

obj-$(CONFIG_PARAVIRT)	+= paravirt.o

obj-$(CONFIG_EARLY_PRINTK)	+= early_printk.o



 This is executed very early using a temporary stack when no memory allocator

# nor global data is available. Everything has to be allocated on the stack.

CFLAGS_head-inflate-data.o := $(call cc-option,-Wframe-larger-than=10240)



obj-$(CONFIG_SMP)		+= psci_smp.o

endif

obj-$(CONFIG_HAVE_ARM_SMCCC)	+= smccc-call.o

extra-y := $(head-y) vmlinux.lds

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0



obj-y				+= common.o mpp.o irq.o pcie.o

obj-$(CONFIG_MACH_DB78X00_BP)	+= db78x00-bp-setup.o

obj-$(CONFIG_MACH_RD78X00_MASA)	+= rd78x00-masa-setup.o

obj-$(CONFIG_MACH_TERASTATION_WXL) += buffalo-wxl-setup.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y				+= alpine_machine.o

obj-$(CONFIG_SMP)		+= platsmp.o alpine_cpu_pm.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y		:= enlighten.o hypercall.o grant-table.o p2m.o mm.o

# SPDX-License-Identifier: GPL-2.0

# Absolute relocation type $(ARCH_REL_TYPE_ABS) needs to be defined before

 the inclusion of generic Makefile.

include $(srctree)/lib/vdso/Makefile

hostprogs := vdsomunge



# Build rules

targets := $(obj-vdso) vdso.so vdso.so.dbg vdso.so.raw vdso.lds

obj-vdso := $(addprefix $(obj)/, $(obj-vdso))

ccflags-y := -fPIC -fno-common -fno-builtin -fno-stack-protector



ldflags-$(CONFIG_CPU_ENDIAN_BE8) := --be8

	    --hash-style=sysv --build-id=sha1 \

	    -T

obj-$(CONFIG_VDSO) += vdso.o





 Force -O2 to avoid libgcc dependencies

CFLAGS_vgettimeofday.o = -O2



 Disable gcov profiling for VDSO code



 Prevents link failures: __sanitizer_cov_trace_pc() is not linked in.

KCOV_INSTRUMENT := n



 Force dependency

$(obj)/vdso.o : $(obj)/vdso.so

# Link rule for the .so file

$(obj)/vdso.so.raw: $(obj)/vdso.lds $(obj-vdso) FORCE

	$(call if_changed,vdsold_and_vdso_check)



# Strip rule for the .so file

$(obj)/%.so: OBJCOPYFLAGS := -S



# Actual build commands

      cmd_vdsold_and_vdso_check = $(cmd_ld); $(cmd_vdso_check)

quiet_cmd_vdsomunge = MUNGE   $@

      cmd_vdsomunge = $(objtree)/$(obj)/vdsomunge $< $@



 Install the unstripped copy of vdso.so.dbg.  If our toolchain

 supports build-id, install .build-id links as well.



# Cribbed from arch/x86/vdso/Makefile.

#

quiet_cmd_vdso_install = INSTALL $<

define cmd_vdso_install

	if readelf -n $< | grep -q 'Build ID'; then \

	  last=`echo $$buildid | cut -b3-`; \

	  mkdir -p "$(MODLIB)/vdso/.build-id/$$first"; \



$(MODLIB)/vdso: FORCE

	@mkdir -p $(MODLIB)/vdso

# SPDX-License-Identifier: GPL-2.0

#

# linux/arch/arm/lib/Makefile

#

 Copyright (C) 1995-2000 Russell King





		   call_with_stack.o bswapsdi2.o

mmu-y		:= clear_user.o copy_page.o getuser.o putuser.o       \



  lib-y	+= backtrace-clang.o

  lib-y	+= backtrace.o

endif

 using lib_ here won't override already available weak symbols

obj-$(CONFIG_UACCESS_WITH_MEMCPY) += uaccess_with_memcpy.o



ifeq ($(CONFIG_CPU_32v3),y)

  lib-y	+= io-readsw-armv3.o io-writesw-armv3.o



ifeq ($(CONFIG_ARCH_RPC),y)



$(obj)/csumpartialcopy.o:	$(obj)/csumpartialcopygeneric.S

$(obj)/csumpartialcopyuser.o:	$(obj)/csumpartialcopygeneric.S

  NEON_FLAGS			:= -march=armv7-a -mfloat-abi=softfp -mfpu=neon

  CFLAGS_xor-neon.o		+= $(NEON_FLAGS)

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





 CPU-specific support

obj-$(CONFIG_SOC_AT91RM9200)	+= at91rm9200.o

obj-$(CONFIG_SOC_SAM9X60)	+= sam9x60.o

obj-$(CONFIG_SOC_SAMA5)		+= sama5.o

obj-$(CONFIG_SOC_SAMA7)		+= sama7.o

obj-$(CONFIG_SOC_SAMV7)		+= samv7.o

# Power Management



ifeq ($(CONFIG_CPU_V7),y)

AFLAGS_pm_suspend.o := -march=armv7-a

endif

ifeq ($(CONFIG_PM_DEBUG),y)



	$(call filechk,offsets,__PM_DATA_OFFSETS_H__)



clean-files += pm_data-offsets.h

# SPDX-License-Identifier: GPL-2.0

obj-y					:= keystone.o smc.o

obj-$(CONFIG_SMP)			+= platsmp.o

# PM domain driver for Keystone SOCs

obj-$(CONFIG_ARCH_KEYSTONE)		+= pm_domain.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#

# Note! Dependencies are done automagically by 'make dep', which also

 removes any old dependencies. DON'T put your own dependencies here

 unless it's something special (ie not a .c file).



 Object file lists.



 Cpu revision

obj-$(CONFIG_NOMADIK_8815) += cpu-8815.o

# SPDX-License-Identifier: GPL-2.0

cns3xxx-$(CONFIG_ATAGS)			+= devices.o

cns3xxx-$(CONFIG_PCI)			+= pcie.o

cns3xxx-$(CONFIG_MACH_CNS3420VB)	+= cns3420vb.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#



 Common support



# omap_device support (OMAP2+ only at the moment)

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#

# Common support

# SPDX-License-Identifier: GPL-2.0







obj-$(CONFIG_SOC_IMX31) += mm-imx3.o cpu-imx31.o mach-imx31.o

obj-$(CONFIG_SOC_IMX35) += mm-imx3.o cpu-imx35.o mach-imx35.o



obj-$(CONFIG_MXC_AVIC) += avic.o



ifeq ($(CONFIG_CPU_IDLE),y)

obj-$(CONFIG_SOC_IMX6Q) += cpuidle-imx6q.o

obj-$(CONFIG_SOC_IMX6SX) += cpuidle-imx6sx.o

obj-$(CONFIG_SOC_IMX7ULP) += cpuidle-imx7ulp.o

endif

ifdef CONFIG_SND_SOC_IMX_PCM_FIQ



obj-$(CONFIG_HAVE_IMX_ANATOP) += anatop.o

obj-$(CONFIG_HAVE_IMX_GPC) += gpc.o

obj-$(CONFIG_HAVE_IMX_MMDC) += mmdc.o

obj-$(CONFIG_HAVE_IMX_SRC) += src.o

ifneq ($(CONFIG_SOC_IMX6)$(CONFIG_SOC_IMX7D_CA7)$(CONFIG_SOC_LS1021A),)

AFLAGS_headsmp.o :=-Wa,-march=armv7-a

obj-$(CONFIG_HOTPLUG_CPU) += hotplug.o

endif

obj-$(CONFIG_SOC_IMX6Q) += mach-imx6q.o

obj-$(CONFIG_SOC_IMX6SL) += mach-imx6sl.o

obj-$(CONFIG_SOC_IMX7ULP) += mach-imx7ulp.o pm-imx7ulp.o

ifeq ($(CONFIG_SUSPEND),y)

obj-$(CONFIG_SOC_IMX6) += suspend-imx6.o

ifeq ($(CONFIG_ARM_CPU_SUSPEND),y)

AFLAGS_resume-imx6.o :=-Wa,-march=armv7-a

obj-$(CONFIG_SOC_IMX6) += resume-imx6.o

endif

obj-$(CONFIG_SOC_IMX6) += pm-imx6.o



obj-$(CONFIG_SOC_VF610) += mach-vf610.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for Marvell's PXA168 processors line

#



obj-y				+= common.o devices.o time.o

 SoC support

obj-$(CONFIG_CPU_PXA168)	+= pxa168.o



ifeq ($(CONFIG_PM),y)

obj-$(CONFIG_CPU_PXA910)	+= pm-pxa910.o

ifeq ($(CONFIG_SMP),y)

obj-$(CONFIG_MACH_MMP3_DT)	+= platsmp.o

endif

 board support

obj-$(CONFIG_MACH_ZYLONITE2)	+= aspenite.o

obj-$(CONFIG_MACH_MMP3_DT)	+= mmp3.o

obj-$(CONFIG_MACH_TETON_BGA)	+= teton_bga.o

obj-$(CONFIG_MACH_GPLUGD)	+= gplugd.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





	-I$(srctree)/arch/arm/plat-omap/include

# Common support

	 common.o dma.o omap-headsmp.o sram.o

					  omap_device.o display.o hdq1w.o \

					  i2c.o wd_timer.o

clock-common				= clock.o

secure-common				= omap-smc.o omap-secure.o

obj-$(CONFIG_ARCH_OMAP2) += $(omap-2-3-common) $(hwmod-common)

obj-$(CONFIG_ARCH_OMAP3) += $(omap-2-3-common) $(hwmod-common) $(secure-common)

obj-$(CONFIG_SOC_AM33XX) += $(secure-common)

obj-$(CONFIG_SOC_AM43XX) += $(secure-common)



ifneq ($(CONFIG_SND_SOC_OMAP_MCBSP),)

obj-$(CONFIG_OMAP_HWMOD) += mcbsp.o

endif

obj-$(CONFIG_TWL4030_CORE) += omap_twl.o

ifneq ($(CONFIG_MFD_CPCAP),)





 SMP support ONLY available for OMAP4



smp-$(CONFIG_SMP)			+= omap-smp.o

obj-$(CONFIG_ARCH_OMAP4)		+= $(omap-4-5-common) $(smp-y) sleep44xx.o

obj-$(CONFIG_SOC_DRA7XX)		+= $(omap-4-5-common) $(smp-y) sleep44xx.o



 Functions loaded to SRAM



 Restart code (OMAP4/5 currently in omap4-common.c)

obj-$(CONFIG_SOC_OMAP2420)		+= omap2-restart.o

obj-$(CONFIG_SOC_AM43XX)		+= omap4-restart.o

obj-$(CONFIG_ARCH_OMAP4)		+= omap4-restart.o

obj-$(CONFIG_SOC_DRA7XX)		+= omap4-restart.o

# SMS/SDRC

obj-$(CONFIG_ARCH_OMAP2)		+= sdrc2xxx.o

# obj-$(CONFIG_ARCH_OMAP3)		+= sdrc3xxx.o

# OPP table initialization

ifeq ($(CONFIG_PM_OPP),y)

obj-$(CONFIG_ARCH_OMAP3)		+= opp3xxx_data.o

obj-$(CONFIG_ARCH_OMAP4)		+= opp4xxx_data.o

endif

# Power Management

obj-$(CONFIG_ARCH_OMAP4)		+= $(omap-4-5-pm-common)



ifeq ($(CONFIG_PM),y)

obj-$(CONFIG_ARCH_OMAP2)		+= pm24xx.o

omap-4-5-pm-common			+= pm44xx.o

obj-$(CONFIG_SOC_OMAP5)			+= $(omap-4-5-pm-common)

obj-$(CONFIG_SOC_AM33XX)		+= pm33xx-core.o sleep33xx.o

obj-$(CONFIG_PM_DEBUG)			+= pm-debug.o

obj-$(CONFIG_POWER_AVS_OMAP)		+= sr_device.o



endif

obj-$(CONFIG_ARCH_OMAP3)                += cpuidle34xx.o

omap-4-5-idle-common			=  cpuidle44xx.o

obj-$(CONFIG_SOC_OMAP5)			+= $(omap-4-5-idle-common)



 PRCM

obj-$(CONFIG_ARCH_OMAP2)		+= prm2xxx_3xxx.o prm2xxx.o cm2xxx.o

obj-$(CONFIG_ARCH_OMAP3)		+= vc3xxx_data.o vp3xxx_data.o

					   prcm_mpu44xx.o prminst44xx.o \

					   vc44xx_data.o vp44xx_data.o

obj-$(CONFIG_SOC_OMAP5)			+= $(omap-prcm-4-5-common)

obj-$(CONFIG_SOC_AM43XX)		+= $(omap-prcm-4-5-common) \



 OMAP voltage domains

obj-$(CONFIG_ARCH_OMAP2)		+= $(voltagedomain-common)

obj-$(CONFIG_ARCH_OMAP3)		+= $(voltagedomain-common)

obj-$(CONFIG_ARCH_OMAP4)		+= $(voltagedomain-common)

obj-$(CONFIG_SOC_AM33XX)		+= $(voltagedomain-common)

obj-$(CONFIG_SOC_OMAP5)			+= $(voltagedomain-common)

obj-$(CONFIG_SOC_OMAP5)                += voltagedomains54xx_data.o



 OMAP powerdomain framework

powerdomain-common			+= powerdomain.o powerdomain-common.o

obj-$(CONFIG_ARCH_OMAP2)		+= powerdomains2xxx_data.o

obj-$(CONFIG_ARCH_OMAP2)		+= powerdomains2xxx_3xxx_data.o

obj-$(CONFIG_ARCH_OMAP3)		+= powerdomains3xxx_data.o

obj-$(CONFIG_ARCH_OMAP3)		+= powerdomains2xxx_3xxx_data.o

obj-$(CONFIG_ARCH_OMAP4)		+= powerdomains44xx_data.o

obj-$(CONFIG_SOC_AM33XX)		+= powerdomains33xx_data.o

obj-$(CONFIG_SOC_AM43XX)		+= powerdomains43xx_data.o

obj-$(CONFIG_SOC_OMAP5)			+= powerdomains54xx_data.o



 PRCM clockdomain control

obj-$(CONFIG_ARCH_OMAP2)		+= $(clockdomain-common)

obj-$(CONFIG_ARCH_OMAP2)		+= clockdomains2xxx_3xxx_data.o

obj-$(CONFIG_SOC_OMAP2430)		+= clockdomains2430_data.o

obj-$(CONFIG_ARCH_OMAP3)		+= clockdomains3xxx_data.o

obj-$(CONFIG_ARCH_OMAP4)		+= clockdomains44xx_data.o

obj-$(CONFIG_SOC_AM33XX)		+= clockdomains33xx_data.o

obj-$(CONFIG_SOC_TI81XX)		+= clockdomains81xx_data.o

obj-$(CONFIG_SOC_AM43XX)		+= clockdomains43xx_data.o

obj-$(CONFIG_SOC_OMAP5)			+= clockdomains54xx_data.o



# Clock framework

obj-$(CONFIG_ARCH_OMAP2)		+= clkt2xxx_dpllcore.o

obj-$(CONFIG_ARCH_OMAP2)		+= clkt2xxx_virt_prcm_set.o

obj-$(CONFIG_ARCH_OMAP3)		+= $(clock-common)

obj-$(CONFIG_SOC_AM33XX)		+= $(clock-common)

obj-$(CONFIG_SOC_DRA7XX)		+= $(clock-common)



 OMAP2 clock rate set data (old "OPP" data)



 hwmod data

obj-$(CONFIG_SOC_OMAP2420)		+= omap_hwmod_2xxx_3xxx_ipblock_data.o

obj-$(CONFIG_SOC_OMAP2430)		+= omap_hwmod_2xxx_3xxx_ipblock_data.o

obj-$(CONFIG_ARCH_OMAP3)		+= omap_hwmod_2xxx_3xxx_ipblock_data.o

obj-$(CONFIG_ARCH_OMAP3)		+= omap_hwmod_3xxx_data.o

obj-$(CONFIG_SOC_TI81XX)		+= omap_hwmod_81xx_data.o

# OMAP2420 MSDI controller integration support ("MMC")

obj-$(CONFIG_SOC_OMAP2420)		+= msdi.o

# Specific board support

obj-$(CONFIG_MACH_NOKIA_N8X0)		+= board-n8x0.o

# Platform specific device init code

obj-y					+= omap_phy_internal.o



	$(call filechk,offsets,__TI_PM_ASM_OFFSETS_H__)

$(obj)/sleep33xx.o $(obj)/sleep43xx.o: $(obj)/pm-asm-offsets.h



obj-$(CONFIG_OMAP_IOMMU)		+= omap-iommu.o

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-or-later

# Copyright (C) ASPEED Technology Inc.

# Copyright IBM Corp.

obj-$(CONFIG_SMP) += platsmp.o

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





 Common support

obj-y := clock.o generic.o #nmi-oopser.o

# Specific board support









obj-$(CONFIG_SA1100_H3600)		+= h3600.o h3xxx.o

obj-$(CONFIG_SA1100_HACKKIT)		+= hackkit.o

obj-$(CONFIG_SA1100_JORNADA720)		+= jornada720.o

obj-$(CONFIG_SA1100_JORNADA720_SSP)	+= jornada720_ssp.o

obj-$(CONFIG_SA1100_LART)		+= lart.o

obj-$(CONFIG_SA1100_NANOENGINE)		+= nanoengine.o

obj-$(CONFIG_PCI_NANOENGINE)		+= pci-nanoengine.o

obj-$(CONFIG_SA1100_PLEB)		+= pleb.o

obj-$(CONFIG_SA1100_SHANNON)		+= shannon.o

obj-$(CONFIG_SA1100_SIMPAD)		+= simpad.o

 Miscellaneous functions

obj-$(CONFIG_PM)			+= pm.o sleep.o



 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SMP) += platsmp.o

 SPDX-License-Identifier: GPL-2.0-only

# ARM-specific networking code

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for the linux kernel.

#

ccflags-$(CONFIG_ARCH_MULTIPLATFORM) := -I$(srctree)/$(src)/include

obj-$(CONFIG_PLAT_ORION_LEGACY)   += $(orion-gpio-y)

 SPDX-License-Identifier: GPL-2.0-only



obj-$(CONFIG_ARCH_SUNXI) += sunxi.o

obj-$(CONFIG_ARCH_SUNXI_MC_SMP) += mc_smp.o headsmp.o

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for Hisilicon processors family

#



 SPDX-License-Identifier: GPL-2.0-only

obj-y					:= highbank.o system.o smc.o

obj-$(CONFIG_PM_SLEEP)			+= pm.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_SMP)	+= platsmp.o

obj-y			+= mediatek.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





# Common support (must be linked before board specific support)

obj-y				+= devices.o generic.o irq.o reset.o

obj-$(CONFIG_PM)		+= pm.o sleep.o standby.o

# Generic drivers that other drivers may depend upon

 SoC-specific code

obj-$(CONFIG_PXA3xx)		+= mfp-pxa3xx.o pxa3xx.o smemc.o pxa3xx-ulpi.o

obj-$(CONFIG_CPU_PXA320)	+= pxa320.o



 NOTE: keep the order of boards in accordance to their order in Kconfig



# Device Tree support

obj-$(CONFIG_MACH_PXA27X_DT)	+= pxa-dt.o



# Intel/Marvell Dev Platforms

obj-$(CONFIG_ARCH_LUBBOCK)	+= lubbock.o

obj-$(CONFIG_MACH_MAINSTONE)	+= mainstone.o

obj-$(CONFIG_MACH_ZYLONITE320)	+= zylonite.o zylonite_pxa320.o

obj-$(CONFIG_MACH_LITTLETON)	+= littleton.o

obj-$(CONFIG_MACH_TAVOREVB)	+= tavorevb.o



# 3rd Party Dev Platforms

obj-$(CONFIG_ARCH_PXA_IDP)	+= idp.o

obj-$(CONFIG_ARCH_VIPER)	+= viper.o

obj-$(CONFIG_MACH_ARCOM_ZEUS)	+= zeus.o

obj-$(CONFIG_MACH_BALLOON3)	+= balloon3.o

obj-$(CONFIG_MACH_CSB726)	+= csb726.o

obj-$(CONFIG_CSB726_CSB701)	+= csb701.o

obj-$(CONFIG_GUMSTIX_AM200EPD)	+= am200epd.o

obj-$(CONFIG_MACH_INTELMOTE2)	+= stargate2.o

obj-$(CONFIG_MACH_STARGATE2)	+= stargate2.o

obj-$(CONFIG_MACH_XCEP)         += xcep.o

obj-$(CONFIG_MACH_TRIZEPS4)	+= trizeps4.o

obj-$(CONFIG_MACH_LOGICPD_PXA270)	+= lpd270.o

obj-$(CONFIG_MACH_COLIBRI)			+= colibri-pxa270.o

obj-$(CONFIG_MACH_COLIBRI_EVALBOARD)	+= colibri-evalboard.o

obj-$(CONFIG_MACH_COLIBRI_PXA270_INCOME)	+= colibri-pxa270-income.o

obj-$(CONFIG_MACH_COLIBRI320)	+= colibri-pxa3xx.o colibri-pxa320.o

obj-$(CONFIG_MACH_VPAC270)	+= vpac270.o

 End-user Products

obj-$(CONFIG_MACH_H4700)	+= hx4700.o

obj-$(CONFIG_MACH_H5000)	+= h5000.o

obj-$(CONFIG_MACH_HIMALAYA)	+= himalaya.o

obj-$(CONFIG_MACH_MAGICIAN)	+= magician.o

obj-$(CONFIG_PXA_EZX)           += ezx.o

obj-$(CONFIG_PALM_TREO)		+= palmtreo.o

obj-$(CONFIG_PXA_SHARP_C7xx)	+= corgi.o sharpsl_pm.o corgi_pm.o

obj-$(CONFIG_MACH_TOSA)		+= tosa.o

obj-$(CONFIG_MACH_ICONTROL)     += icontrol.o mxm8x10.o

obj-$(CONFIG_ARCH_PXA_ESERIES)	+= eseries.o

obj-$(CONFIG_MACH_ZIPIT2)	+= z2.o

 SPDX-License-Identifier: GPL-2.0-or-later

obj-y += rtd1195.o

 SPDX-License-Identifier: GPL-2.0-only

obj-y				+= nspire.o

 SPDX-License-Identifier: GPL-2.0-only

CFLAGS_platsmp.o := -march=armv7-a

obj-$(CONFIG_PM_SLEEP) += pm.o sleep.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





 Common objects



# CPU objects

obj-$(CONFIG_ARCH_SH73A0)	+= setup-sh73a0.o

obj-$(CONFIG_ARCH_R8A73A4)	+= setup-r8a73a4.o

obj-$(CONFIG_ARCH_R8A7740)	+= setup-r8a7740.o

obj-$(CONFIG_ARCH_R8A7778)	+= setup-r8a7778.o

obj-$(CONFIG_ARCH_R8A7779)	+= setup-r8a7779.o

obj-$(CONFIG_ARCH_EMEV2)	+= setup-emev2.o

obj-$(CONFIG_ARCH_R7S72100)	+= setup-r7s72100.o

obj-$(CONFIG_ARCH_R7S9210)	+= setup-r7s9210.o

 CPU reset vector handling objects



# Shared SoC family objects

obj-$(CONFIG_ARCH_RCAR_GEN2)	+= setup-rcar-gen2.o platsmp-apmu.o $(cpu-y)



# SMP objects

smp-$(CONFIG_ARCH_RCAR_GEN2)	+= headsmp-apmu.o

smp-$(CONFIG_ARCH_SH73A0)	+= smp-sh73a0.o headsmp-scu.o platsmp-scu.o

smp-$(CONFIG_ARCH_R8A7779)	+= smp-r8a7779.o headsmp-scu.o platsmp-scu.o

smp-$(CONFIG_ARCH_EMEV2)	+= smp-emev2.o headsmp-scu.o platsmp-scu.o

# PM objects

obj-$(CONFIG_SUSPEND)		+= suspend.o



# Framework support



# Copyright (C) 2012-2015 Broadcom Corporation

#

# This program is free software; you can redistribute it and/or

 modify it under the terms of the GNU General Public License as

# published by the Free Software Foundation version 2.

#

# This program is distributed "as is" WITHOUT ANY WARRANTY of any

# kind, whether express or implied; without even the implied warranty

 of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

# GNU General Public License for more details.

# Cygnus



# Hurricane 2

obj-$(CONFIG_ARCH_BCM_HR2)	+= bcm_hr2.o

# Northstar Plus

obj-$(CONFIG_ARCH_BCM_NSP)	+= bcm_nsp.o



 BCM281XX

obj-$(CONFIG_ARCH_BCM_281XX)	+= board_bcm281xx.o

# BCM21664



 BCM23550

obj-$(CONFIG_ARCH_BCM_23550)	+= board_bcm23550.o

 BCM281XX, BCM21664 and BCM23550 SMP support

obj-$(CONFIG_ARCH_BCM_MOBILE_SMP) += platsmp.o

# BCM281XX and BCM21664 L2 cache control

obj-$(CONFIG_ARCH_BCM_MOBILE_L2_CACHE) += kona_l2_cache.o

# Support for secure monitor traps

obj-$(CONFIG_ARCH_BCM_MOBILE_SMC) += bcm_kona_smc.o

 BCM2835

ifeq ($(CONFIG_ARM),y)

obj-$(CONFIG_SMP)		+= platsmp.o

endif

endif

# BCM5301X

obj-$(CONFIG_ARCH_BCM_5301X)	+= bcm_5301x.o

ifeq ($(CONFIG_ARCH_BCM_5301X),y)

obj-$(CONFIG_SMP)		+= platsmp.o

endif

# BCM63XXx



ifeq ($(CONFIG_ARCH_BRCMSTB),y)

 SPDX-License-Identifier: GPL-2.0-only



# Makefile for code common across different PXA processor families

#

ccflags-$(CONFIG_ARCH_MMP) := -I$(srctree)/$(src)/include

obj-$(CONFIG_PXA3xx)		+= mfp.o



obj-$(CONFIG_PXA_SSP)		+= ssp.o

 SPDX-License-Identifier: GPL-2.0-only

obj-$(CONFIG_MACH_ARTPEC6)		:= board-artpec6.o



# arch/arm/boot/Makefile

#

# This file is included by the global makefile so that you can add your own

# architecture-specific flags and dependencies.

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

 Copyright (C) 1995-2002 Russell King





OBJCOPYFLAGS	:=-O binary -R .comment -S

include $(MACHINE)/Makefile.boot

endif

 Note: the following conditions must always be true:

   ZRELADDR == virt_to_phys(PAGE_OFFSET + TEXT_OFFSET)

#   PARAMS_PHYS must be within 4MB of ZRELADDR

   INITRD_PHYS must be in RAM

ZRELADDR    := $(zreladdr-y)

PARAMS_PHYS := $(params_phys-y)

INITRD_PHYS := $(initrd_phys-y)





ifeq ($(CONFIG_XIP_KERNEL),y)

	'$(srctree)/$(src)/deflate_xip_data.sh $< $@'

ifeq ($(CONFIG_XIP_DEFLATED_DATA),y)

else

cmd_mkxip = $(cmd_objcopy)

endif

$(obj)/xipImage: vmlinux FORCE

	$(call if_changed,mkxip)



$(obj)/Image $(obj)/zImage: FORCE







$(obj)/Image: vmlinux FORCE

	$(call if_changed,objcopy)

	$(Q)$(MAKE) $(build)=$(obj)/compressed $@

$(obj)/zImage:	$(obj)/compressed/vmlinux FORCE

	$(call if_changed,objcopy)



else

    UIMAGE_LOADADDR=$(CONFIG_ZBOOT_ROM_TEXT)



check_for_multiple_loadaddr = \

	echo 'multiple (or no) load addresses: $(UIMAGE_LOADADDR)'; \

fi

$(obj)/uImage:	$(obj)/zImage FORCE

	$(call if_changed,uimage)

$(obj)/bootp/bootp: $(obj)/zImage initrd FORCE

	$(Q)$(MAKE) $(build)=$(obj)/bootp $@



PHONY += initrd

initrd:

	(echo You must specify INITRD; exit -1)

# SPDX-License-Identifier: GPL-2.0

#

 linux/arch/arm/boot/bootp/Makefile



 This file is included by the global makefile so that you can add your own

 architecture-specific flags and dependencies.





GCOV_PROFILE	:= n

LDFLAGS_bootp	:= --no-undefined -X \

AFLAGS_initrd.o :=-DINITRD=\"$(INITRD)\"



 Note that bootp.lds picks up kernel.o and initrd.o

$(obj)/bootp:	$(src)/bootp.lds $(addprefix $(obj)/,init.o kernel.o initrd.o) FORCE



# kernel.o and initrd.o includes a binary image using

 .incbin, a dependency which is not tracked automatically



$(obj)/kernel.o: arch/arm/boot/zImage FORCE

$(obj)/initrd.o: $(INITRD) FORCE

PHONY += $(INITRD)

# SPDX-License-Identifier: GPL-2.0

#

# linux/arch/arm/boot/compressed/Makefile

#

# create a compressed vmlinuz image from the original vmlinux

#



HEAD	= head.o

OBJS	+= misc.o decompress.o

ifeq ($(CONFIG_DEBUG_UNCOMPRESS),y)

OBJS	+= debug.o



# string library code (-Os is enforced to keep it much smaller)

OBJS		+= string.o



ifeq ($(CONFIG_ARM_VIRT_EXT),y)

OBJS		+= hyp-stub.o

endif

GCOV_PROFILE		:= n



 Prevents link failures: __sanitizer_cov_trace_pc() is not linked in.



#

# Architecture dependencies

#

ifeq ($(CONFIG_ARCH_ACORN),y)



OBJS		+= head-sa1100.o

endif

OBJS		+= head-xscale.o

endif



else

# The endian should be set by h/w design.

endif

endif



 We now have a PIC decompressor implementation.  Decompressors running

 from RAM should not define ZTEXTADDR.  Decompressors running directly

 from ROM or Flash must define ZTEXTADDR (preferably via the config)

 FIXME: Previous assignment to ztextaddr-y is lost here. See SHARK

ifeq ($(CONFIG_ZBOOT_ROM),y)

ZTEXTADDR	:= $(CONFIG_ZBOOT_ROM_TEXT)

ZBSSADDR	:= $(CONFIG_ZBOOT_ROM_BSS)

ZTEXTADDR	:= 0





CPPFLAGS_vmlinux.lds += -DTEXT_OFFSET="$(TEXT_OFFSET)"



compress-$(CONFIG_KERNEL_GZIP) = gzip

compress-$(CONFIG_KERNEL_LZ4)  = lz4

libfdt_objs := fdt_rw.o fdt_ro.o fdt_wip.o fdt.o

ifeq ($(CONFIG_ARM_ATAG_DTB_COMPAT),y)

OBJS	+= $(libfdt_objs) fdt_check_mem_start.o

endif

 -fstack-protector-strong triggers protection checks in this code,

 but it is being used too early to link to meaningful stack_chk logic.

	$(eval CFLAGS_$(o) := -I $(srctree)/scripts/dtc/libfdt -fno-stack-protector))

		 lib1funcs.o ashldi3.o bswapsdi2.o \

		 head.o $(OBJS)



KBUILD_CFLAGS += -DDISABLE_BRANCH_PROFILING



# Supply kernel BSS size to the decompressor via a linker symbol.

		sed -n -e 's/^\([^ ]*\) [ABD] __bss_start$$/-0x\1/p' \

		       -e 's/^\([^ ]*\) [ABD] __bss_stop$$/+0x\1/p') )) )

# Supply ZRELADDR to the decompressor via a linker symbol.

ifneq ($(CONFIG_AUTO_ZRELADDR),y)

LDFLAGS_vmlinux += --be8

endif

# Report unresolved symbol references

LDFLAGS_vmlinux += --no-undefined

 Delete all temporary local symbols

# Report orphan sections

ifdef CONFIG_LD_ORPHAN_WARN

LDFLAGS_vmlinux += --orphan-handling=warn

endif

 Next argument is a linker script



 For __aeabi_uidivmod

lib1funcs = $(obj)/lib1funcs.o

$(obj)/lib1funcs.S: $(srctree)/arch/$(SRCARCH)/lib/lib1funcs.S



 For __aeabi_llsl

ashldi3 = $(obj)/ashldi3.o

$(obj)/ashldi3.S: $(srctree)/arch/$(SRCARCH)/lib/ashldi3.S



 For __bswapsi2, __bswapdi2

bswapsdi2 = $(obj)/bswapsdi2.o

$(obj)/bswapsdi2.S: $(srctree)/arch/$(SRCARCH)/lib/bswapsdi2.S



# We need to prevent any GOTOFF relocs being used with references

 to symbols in the .bss section since we cannot relocate them

 independently from the rest at run time.  This can be achieved by

# ensuring that no private .bss symbols exist, as global symbols

 always have a GOT entry which is what we need.

# The .data section is already discarded by the linker script so no need

 to bother about it here.

check_for_bad_syms = \

[ -z "$$bad_syms" ] || \

    echo "$$bad_syms" >&2; false )

	echo 'multiple zreladdrs: $(ZRELADDR)'; \

fi



	@$(check_for_multiple_zreladdr)





$(obj)/piggy.o: $(obj)/piggy_data

CFLAGS_font.o := -Dstatic=

	$(call cmd,shipped)



$(obj)/hyp-stub.S: $(srctree)/arch/$(SRCARCH)/kernel/hyp-stub.S

# SPDX-License-Identifier: GPL-2.0

	alpine-db.dtb

dtb-$(CONFIG_MACH_ARTPEC6) += \

	artpec6-devboard.dtb

dtb-$(CONFIG_MACH_ASM9260) += \

# Keep at91 dtb files sorted alphabetically for each SoC

dtb-$(CONFIG_SOC_AT91RM9200) += \

	at91rm9200ek.dtb \

	animeo_ip.dtb \

	at91-qil_a9260.dtb \

	ethernut5.dtb \

	evk-pro3.dtb \

	usb_a9260.dtb \

	at91sam9261ek.dtb \

	at91-sam9_l9260.dtb \

	usb_a9263.dtb \

	at91-kizbox.dtb \

	at91-lmu5000.dtb \

	tny_a9g20.dtb \

	usb_a9g20_lpw.dtb \

	at91sam9m10g45ek.dtb \

	pm9g45.dtb \

	at91-ariettag25.dtb \

	at91-cosino_mega2560.dtb \

	at91-kizboxmini-base.dtb \

	at91-kizboxmini-mb.dtb \

	at91-kizboxmini-rd.dtb \

	at91-q5xr5.dtb \

	at91sam9g15ek.dtb \

	at91sam9g25ek.dtb \

	at91sam9x25ek.dtb \

dtb-$(CONFIG_SOC_SAM9X60) += \

	at91-sam9x60ek.dtb

dtb-$(CONFIG_SOC_SAM_V7) += \

	at91-kizbox2-2.dtb \

	at91-nattis-2-natte-2.dtb \

	at91-sama5d27_wlsom1_ek.dtb \

	at91-sama5d2_icp.dtb \

	at91-sama5d2_xplained.dtb \

	at91-tse850-3.dtb \

	at91-wb50n.dtb \

	sama5d31ek.dtb \

	sama5d33ek.dtb \

	sama5d34ek.dtb \

	sama5d35ek.dtb \

	sama5d36ek.dtb \

	sama5d36ek_cmp.dtb \

	at91-sama5d4_xplained.dtb \

	at91-sama5d4ek.dtb \

	at91-vinco.dtb

	bcm2835-rpi-b.dtb \

	bcm2835-rpi-cm1-io1.dtb \

	bcm2837-rpi-3-b.dtb \

	bcm2837-rpi-3-b-plus.dtb \

	bcm2711-rpi-400.dtb \

	bcm4708-asus-rt-ac56u.dtb \

	bcm4708-buffalo-wzr-1750dhp.dtb \

	bcm4708-linksys-ea6500-v2.dtb \

	bcm4708-luxul-xap-1510.dtb \

	bcm4708-luxul-xwc-1000.dtb \

	bcm4708-smartrg-sr400ac.dtb \

	bcm47081-buffalo-wzr-900dhp.dtb \

	bcm47081-luxul-xwr-1200.dtb \

	bcm47081-tplink-archer-c5-v2.dtb \

	bcm4709-buffalo-wxr-1900dhp.dtb \

	bcm4709-linksys-ea9200.dtb \

	bcm4709-netgear-r8000.dtb \

	bcm47094-dlink-dir-885l.dtb \

	bcm47094-luxul-abr-4500.dtb \

	bcm47094-luxul-xbr-4500.dtb \

	bcm47094-luxul-xwr-3100.dtb \

	bcm47094-luxul-xwr-3150-v1.dtb \

	bcm47094-netgear-r8500.dtb \

	bcm953012er.dtb \

	bcm47189-luxul-xap-1440.dtb \

	bcm47189-luxul-xap-810.dtb \

	bcm47189-tenda-ac9.dtb \

dtb-$(CONFIG_ARCH_BCM_63XX) += \

	bcm963138dvt.dtb

	bcm53340-ubnt-unifi-switch8.dtb

	bcm28155-ap.dtb \

	bcm958522er.dtb \

	bcm958622hr.dtb \

	bcm958625-meraki-mx64.dtb \

	bcm958625-meraki-mx64-a0.dtb \

	bcm958625-meraki-mx64w.dtb \

	bcm958625-meraki-mx65.dtb \

	bcm958625-meraki-mx65w.dtb \

	bcm988312hr.dtb \

	bcm958625k.dtb

	berlin2cd-google-chromecast.dtb \

dtb-$(CONFIG_ARCH_CLPS711X) += \

	ep7211-edb7211.dtb

dtb-$(CONFIG_ARCH_DAVINCI) += \

	da850-lcdk.dtb \

	da850-enbw-cmc.dtb \

	cx92755_equinox.dtb

dtb-$(CONFIG_ARCH_EXYNOS3) += \

	exynos3250-artik5-eval.dtb \

	exynos3250-rinato.dtb

dtb-$(CONFIG_ARCH_EXYNOS4) += \

	exynos4210-i9100.dtb \

	exynos4210-smdkv310.dtb \

	exynos4210-trats.dtb \

	exynos4412-itop-elite.dtb \

	exynos4412-n710x.dtb \

	exynos4412-odroidx2.dtb \

	exynos4412-p4note-n8010.dtb \

	exynos4412-tiny4412.dtb \

	exynos5250-smdk5250.dtb \

	exynos5250-spring.dtb \

	exynos5260-xyref5260.dtb \

	exynos5410-smdk5410.dtb \

	exynos5420-smdk5420.dtb \

	exynos5422-odroidhc1.dtb \

	exynos5422-odroidxu3.dtb \

	exynos5800-peach-pi.dtb

	gemini-nas4220b.dtb \

	gemini-rut1xx.dtb \

	gemini-wbd111.dtb \

dtb-$(CONFIG_ARCH_HI3xxx) += \

dtb-$(CONFIG_ARCH_HIGHBANK) += \

	highbank.dtb \

	ecx-2000.dtb

dtb-$(CONFIG_ARCH_HIP01) += \

	hip04-d01.dtb

	hi3519-demb.dtb

dtb-$(CONFIG_ARCH_HIX5HD2) += \

	hisi-x5hd2-dkb.dtb

	integratorap-im-pd1.dtb \

	integratorcp.dtb

	intel-ixp42x-linksys-wrv54g.dtb \

	intel-ixp42x-freecom-fsg-3.dtb \

	intel-ixp43x-kixrp435.dtb \

	intel-ixp46x-ixdp465.dtb \

	intel-ixp42x-ixdpg425.dtb \

	intel-ixp42x-dlink-dsm-g600.dtb \

	intel-ixp43x-gateworks-gw2358.dtb \

	intel-ixp42x-netgear-wg302v2.dtb \

dtb-$(CONFIG_ARCH_KEYSTONE) += \

dtb-$(CONFIG_MACH_KIRKWOOD) += \

	kirkwood-cloudbox.dtb \

	kirkwood-d2net.dtb \

	kirkwood-db-88f6282.dtb \

	kirkwood-dns320.dtb \

	kirkwood-dockstar.dtb \

	kirkwood-dreamplug.dtb \

	kirkwood-ds109.dtb \

	kirkwood-ds110jv10.dtb \

	kirkwood-ds111.dtb \

	kirkwood-ds112.dtb \

	kirkwood-ds209.dtb \

	kirkwood-ds210.dtb \

	kirkwood-ds212.dtb \

	kirkwood-ds411j.dtb \

	kirkwood-ds411slim.dtb \

	kirkwood-goflexnet.dtb \

	kirkwood-ib62x0.dtb \

	kirkwood-iomega_ix2_200.dtb \

	kirkwood-is2.dtb \

	kirkwood-km_kirkwood.dtb \

	kirkwood-laplug.dtb \

	kirkwood-linkstation-lsqvl.dtb \

	kirkwood-linkstation-lswsxl.dtb \

	kirkwood-linkstation-lswvl.dtb \

	kirkwood-linkstation-lswxl.dtb \

	kirkwood-linksys-viper.dtb \

	kirkwood-lschlv2.dtb \

	kirkwood-lsxhl.dtb \

	kirkwood-mplcec4.dtb \

	kirkwood-mv88f6281gtw-ge.dtb \

	kirkwood-nas2big.dtb \

	kirkwood-net2big.dtb \

	kirkwood-net5big.dtb \

	kirkwood-netgear_readynas_duo_v2.dtb \

	kirkwood-netgear_readynas_nv+_v2.dtb \

	kirkwood-ns2.dtb \

	kirkwood-ns2lite.dtb \

	kirkwood-nsa310.dtb \

	kirkwood-nsa310a.dtb \

	kirkwood-nsa325.dtb \

	kirkwood-openblocks_a6.dtb \

	kirkwood-openblocks_a7.dtb \

	kirkwood-openrd-base.dtb \

	kirkwood-openrd-client.dtb \

	kirkwood-openrd-ultimate.dtb \

	kirkwood-rd88f6281-z0.dtb \

	kirkwood-rd88f6281-a.dtb \

	kirkwood-rs212.dtb \

	kirkwood-rs409.dtb \

	kirkwood-rs411.dtb \

	kirkwood-sheevaplug-esata.dtb \

	kirkwood-t5325.dtb \

	kirkwood-topkick.dtb \

	kirkwood-ts219-6282.dtb \

	kirkwood-ts419-6282.dtb

dtb-$(CONFIG_ARCH_LPC18XX) += \

	lpc4337-ciaa.dtb \

	lpc4350-hitex-eval.dtb \

	lpc4357-myd-lpc4357.dtb

dtb-$(CONFIG_ARCH_LPC32XX) += \

	lpc3250-ea3250.dtb \

	nuvoton-wpcm450-supermicro-x9sci-ln4f.dtb

dtb-$(CONFIG_ARCH_NPCM7XX) += \

	nuvoton-npcm730-gbs.dtb \

	nuvoton-npcm730-kudo.dtb \

dtb-$(CONFIG_MACH_MESON6) += \

	meson6-atv1200.dtb

	meson8-minix-neo-x8.dtb \

	meson8b-mxq.dtb \

	meson8b-odroidc1.dtb \

	pxa168-aspenite.dtb \

	pxa910-dkb.dtb \

	mmp2-olpc-xo-1-75.dtb \

dtb-$(CONFIG_ARCH_MPS2) += \

	mps2-an385.dtb \

	mps2-an399.dtb

	moxart-uc7112lx.dtb

dtb-$(CONFIG_SOC_IMX25) += \

	imx25-eukrea-mbimxsd25-baseboard.dtb \

	imx25-eukrea-mbimxsd25-baseboard-dvi-svga.dtb \

	imx25-eukrea-mbimxsd25-baseboard-dvi-vga.dtb \

	imx25-pdk.dtb

	imx27-apf27.dtb \

	imx27-apf27dev.dtb \

	imx27-eukrea-mbimxsd27-baseboard.dtb \

dtb-$(CONFIG_SOC_IMX31) += \

dtb-$(CONFIG_SOC_IMX35) += \

	imx35-eukrea-mbimxsd35-baseboard.dtb \

dtb-$(CONFIG_SOC_IMX50) += \

	imx50-kobo-aura.dtb

	imx51-apf51.dtb \

	imx51-apf51dev.dtb \

	imx51-zii-scu2-mezz.dtb \

	imx51-zii-scu3-esb.dtb

	imx53-ard.dtb \

	imx53-cx9020.dtb \

	imx53-kp-ddc.dtb \

	imx53-kp-hsc.dtb \

	imx53-m53evk.dtb \

	imx53-m53menlo.dtb \

	imx53-ppd.dtb \

	imx53-smd.dtb \

	imx53-tx53-x13x.dtb \

dtb-$(CONFIG_SOC_IMX6Q) += \

	imx6dl-aristainetos_4.dtb \

	imx6dl-colibri-v1_1-eval-v3.dtb \

	imx6dl-cubox-i.dtb \

	imx6dl-eckelmann-ci4x10.dtb \

	imx6dl-emcon-avari.dtb \

	imx6dl-gw52xx.dtb \

	imx6dl-gw54xx.dtb \

	imx6dl-gw552x.dtb \

	imx6dl-gw560x.dtb \

	imx6dl-gw5904.dtb \

	imx6dl-gw5910.dtb \

	imx6dl-gw5913.dtb \

	imx6dl-hummingboard-som-v15.dtb \

	imx6dl-hummingboard2.dtb \

	imx6dl-icore-mipi.dtb \

	imx6dl-icore-rqs.dtb \

	imx6dl-nitrogen6x.dtb \

	imx6dl-pico-dwarf.dtb \

	imx6dl-pico-hobbit.dtb \

	imx6dl-plybas.dtb \

	imx6dl-prtmvt.dtb \

	imx6dl-prtvt7.dtb \

	imx6dl-rex-basic.dtb \

	imx6dl-riotboard.dtb \

	imx6dl-sabreauto.dtb \

	imx6dl-sabrelite.dtb \

	imx6dl-sabresd.dtb \

	imx6dl-savageboard.dtb \

	imx6dl-skov-revc-lt2.dtb \

	imx6dl-skov-revc-lt6.dtb \

	imx6dl-ts4900.dtb \

	imx6dl-tx6dl-comtft.dtb \

	imx6dl-tx6s-8034.dtb \

	imx6dl-tx6s-8034-mb7.dtb \

	imx6dl-tx6s-8035.dtb \

	imx6dl-tx6s-8035-mb7.dtb \

	imx6dl-tx6u-801x.dtb \

	imx6dl-tx6u-80xx-mb7.dtb \

	imx6dl-tx6u-8033.dtb \

	imx6dl-tx6u-8033-mb7.dtb \

	imx6dl-tx6u-811x.dtb \

	imx6dl-tx6u-81xx-mb7.dtb \

	imx6dl-victgo.dtb \

	imx6dl-yapp4-ursa.dtb \

	imx6q-apalis-ixora-v1.1.dtb \

	imx6q-cubox-i.dtb \

	imx6q-cubox-i-emmc-som-v15.dtb \

	imx6q-dfi-fs700-m60.dtb \

	imx6q-dhcom-pdk2.dtb \

	imx6q-display5-tianma-tm070-1280x768.dtb \

	imx6q-emcon-avari.dtb \

	imx6dl-b105v2.dtb \

	imx6dl-b155v2.dtb \

	imx6q-hummingboard-emmc-som-v15.dtb \

	imx6q-hummingboard-som-v15.dtb \

	imx6q-hummingboard2-som-v15.dtb \

	imx6q-icore-ofcap10.dtb \

	imx6q-icore-rqs.dtb \

	imx6q-kp-tpc.dtb \

	imx6q-marsboard.dtb \

	imx6q-nitrogen6_max.dtb \

	imx6q-nitrogen6_som2.dtb \

	imx6q-novena.dtb \

	imx6q-phytec-mira-rdk-emmc.dtb \

	imx6q-phytec-mira-rdk-nand.dtb \

	imx6q-pico-hobbit.dtb \

	imx6q-pico-nymph.dtb \

	imx6q-pistachio.dtb \

	imx6q-prti6q.dtb \

	imx6q-prtwd2.dtb \

	imx6q-sabreauto.dtb \

	imx6q-sabresd.dtb \

	imx6q-sbc6x.dtb \

	imx6q-skov-revc-lt6.dtb \

	imx6q-skov-reve-mi1010ait-1cp1.dtb \

	imx6q-solidsense.dtb \

	imx6q-tx6q-1010.dtb \

	imx6q-tx6q-1010-comtft.dtb \

	imx6q-tx6q-1036.dtb \

	imx6q-tx6q-10x0-mb7.dtb \

	imx6q-tx6q-11x0-mb7.dtb \

	imx6q-udoo.dtb \

	imx6q-wandboard.dtb \

	imx6q-wandboard-revd1.dtb \

	imx6q-zii-rdu2.dtb \

	imx6qp-nitrogen6_max.dtb \

	imx6qp-phytec-mira-rdk-nand.dtb \

	imx6qp-tx6qp-8037.dtb \

	imx6qp-tx6qp-8137.dtb \

	imx6qp-vicutp.dtb \

	imx6qp-wandboard-revd1.dtb \

	imx6s-dhcom-drc02.dtb

dtb-$(CONFIG_SOC_IMX6SL) += \

	imx6sl-evk.dtb \

	imx6sl-tolino-shine2hd.dtb \

	imx6sl-tolino-shine3.dtb \

	imx6sl-warp.dtb

	imx6sll-evk.dtb \

	imx6sll-kobo-clarahd.dtb \

	imx6sx-sdb-reva.dtb \

	imx6sx-sdb-sai.dtb \

	imx6sx-sdb.dtb \

	imx6sx-sdb-mqs.dtb \

	imx6sx-softing-vining-2000.dtb \

	imx6ul-ccimx6ulsbcexpress.dtb \

	imx6ul-geam.dtb \

	imx6ul-isiot-nand.dtb \

	imx6ul-kontron-n6310-s.dtb \

	imx6ul-opos6uldev.dtb \

	imx6ul-phytec-segin-ff-rdk-emmc.dtb \

	imx6ul-prti6g.dtb \

	imx6ul-tx6ul-0011.dtb \

	imx6ul-tx6ul-mainboard.dtb \

	imx6ull-colibri-eval-v3.dtb \

	imx6ull-colibri-wifi-eval-v3.dtb \

	imx6ull-myir-mys-6ulx-eval.dtb \

	imx6ull-opos6uldev.dtb \

	imx6ull-phytec-segin-ff-rdk-nand.dtb \

	imx6ull-phytec-segin-ff-rdk-emmc.dtb \

	imx6ull-phytec-segin-lc-rdk-nand.dtb \

dtb-$(CONFIG_SOC_IMX7D) += \

	imx7d-colibri-aster.dtb \

	imx7d-colibri-emmc-aster.dtb \

	imx7d-colibri-emmc-eval-v3.dtb \

	imx7d-flex-concentrator.dtb \

	imx7d-meerkat96.dtb \

	imx7d-pico-hobbit.dtb \

	imx7d-pico-nymph.dtb \

	imx7d-remarkable2.dtb \

	imx7d-sbc-imx7.dtb \

	imx7d-sdb-sht11.dtb \

	imx7d-zii-rmu2.dtb \

	imx7d-zii-rpu2.dtb \

	imx7s-colibri-eval-v3.dtb \

	imx7s-mba7.dtb \

	imx7s-warp.dtb

	imx7ulp-com.dtb \

dtb-$(CONFIG_SOC_LS1021A) += \

	ls1021a-qds.dtb \

	ls1021a-twr.dtb

	vf500-colibri-eval-v3.dtb \

	vf610-colibri-eval-v3.dtb \

	vf610-twr.dtb \

	vf610-zii-cfu1.dtb \

	vf610-zii-dev-rev-c.dtb \

	vf610-zii-scu4-aib.dtb \

	vf610-zii-spb4.dtb \

	vf610-zii-ssmb-dtu.dtb \

	imx23-evk.dtb \

	imx23-sansa.dtb \

	imx28-apf28.dtb \

	imx28-apf28dev.dtb \

	imx28-apx4devkit.dtb \

	imx28-cfa10036.dtb \

	imx28-cfa10037.dtb \

	imx28-cfa10049.dtb \

	imx28-cfa10055.dtb \

	imx28-cfa10056.dtb \

	imx28-cfa10057.dtb \

	imx28-cfa10058.dtb \

	imx28-duckbill-2-485.dtb \

	imx28-duckbill-2.dtb \

	imx28-duckbill-2-enocean.dtb \

	imx28-duckbill-2-spi.dtb \

	imx28-duckbill.dtb \

	imx28-eukrea-mbmx283lc.dtb \

	imx28-eukrea-mbmx287lc.dtb \

	imx28-xea.dtb

dtb-$(CONFIG_ARCH_NOMADIK) += \

	ste-nomadik-nhk15.dtb

	nspire-cx.dtb \

	omap2420-h4.dtb \

	omap2420-n810.dtb \

	am3517-craneboard.dtb \

	am3517-evm.dtb \

	logicpd-torpedo-37xx-devkit.dtb \

	logicpd-som-lv-37xx-devkit.dtb \

	omap3430-sdp.dtb \

	omap3-beagle.dtb \

	omap3-evm.dtb \

	omap3-evm-37xx.dtb \

	omap3-gta04a4.dtb \

	omap3-ldp.dtb \

	omap3-lilly-dbb056.dtb \

	omap3-n900.dtb \

	omap3-n9.dtb \

	omap3-n950.dtb \

	omap3-overo-alto35.dtb \

	omap3-overo-chestnut43.dtb \

	omap3-overo-gallop43.dtb \

	omap3-overo-palo35.dtb \

	omap3-overo-palo43.dtb \

	omap3-overo-storm-alto35.dtb \

	omap3-overo-storm-chestnut43.dtb \

	omap3-overo-storm-gallop43.dtb \

	omap3-overo-storm-palo35.dtb \

	omap3-overo-storm-palo43.dtb \

	omap3-overo-storm-summit.dtb \

	omap3-overo-storm-tobi.dtb \

	omap3-overo-tobiduo.dtb \

	omap3-pandora-600mhz.dtb \

	omap3-pandora-1ghz.dtb \

	omap3-sbc-t3530.dtb \

	omap3-thunder.dtb \

	am3874-iceboard.dtb \

	dm8148-evm.dtb \

	am335x-base0033.dtb \

	am335x-boneblack-wireless.dtb \

	am335x-bonegreen-wireless.dtb \

	am335x-guardian.dtb \

	am335x-icev2.dtb \

	am335x-lxm.dtb \

	am335x-myirtech-myd.dtb \

	am335x-pdu001.dtb \

	am335x-pocketbeagle.dtb \

	am335x-regor-rdk.dtb \

	am335x-sbc-t335.dtb \

	am335x-wega-rdk.dtb \

	omap4-kc1.dtb \

	omap4-sdp.dtb \

	omap4-sdp-es23plus.dtb \

	omap4-var-dvk-om44.dtb \

	omap4-var-stk-om44.dtb

dtb-$(CONFIG_SOC_AM43XX) += \

	am43x-epos-evm.dtb \

	am437x-gp-evm.dtb \

	am437x-idk-evm.dtb \

	am437x-sbc-t43.dtb \

dtb-$(CONFIG_SOC_OMAP5) += \

	omap5-cm-t54.dtb \

	omap5-igep0050.dtb \

	am57xx-beagle-x15.dtb \

	am5729-beagleboneai.dtb \

	dra72-evm.dtb \

	dra72-evm-revc.dtb \

	dra76-evm.dtb

dtb-$(CONFIG_ARCH_ORION5X) += \

	orion5x-kuroboxpro.dtb \

	orion5x-lacie-d2-network.dtb \

	orion5x-linkstation-lschl.dtb \

	orion5x-lswsgl.dtb \

	orion5x-netgear-wnr854t.dtb \

	owl-s500-sparky.dtb

dtb-$(CONFIG_ARCH_PXA) += \

	pxa300-raumfeld-speaker-l.dtb \

	pxa300-raumfeld-speaker-one.dtb \

	ox810se-wd-mbwe.dtb \

	ox820-cloudengines-pogoplug-series-3.dtb

	qcom-apq8026-lg-lenok.dtb \

	qcom-apq8060-dragonboard.dtb \

	qcom-apq8064-sony-xperia-yuga.dtb \

	qcom-apq8064-asus-nexus7-flo.dtb \

	qcom-apq8074-dragonboard.dtb \

	qcom-apq8084-ifc6540.dtb \

	qcom-apq8084-mtp.dtb \

	qcom-ipq4018-ap120c-ac.dtb \

	qcom-ipq4018-ap120c-ac-bit.dtb \

	qcom-ipq4019-ap.dk01.1-c1.dtb \

	qcom-ipq4019-ap.dk04.1-c3.dtb \

	qcom-ipq4019-ap.dk07.1-c2.dtb \

	qcom-ipq8064-ap148.dtb \

	qcom-msm8226-samsung-s3ve3g.dtb \

	qcom-msm8974-samsung-klte.dtb \

	qcom-msm8974-sony-xperia-amami.dtb \

	qcom-msm8974-sony-xperia-honami.dtb \

	qcom-mdm9615-wp8548-mangoh-green.dtb \

	qcom-sdx55-mtp.dtb \

	qcom-sdx55-t55.dtb \

	qcom-sdx55-telit-fn980-tlb.dtb

dtb-$(CONFIG_ARCH_RDA) += \

	rtd1195-horseradish.dtb \

	rtd1195-mele-x1000.dtb

	arm-realview-pb1176.dtb \

	arm-realview-eb.dtb \

	arm-realview-eb-bbrevd.dtb \

	arm-realview-eb-11mp.dtb \

	arm-realview-eb-11mp-ctrevb.dtb \

	arm-realview-eb-11mp-bbrevd-ctrevb.dtb \

	arm-realview-eb-a9mp.dtb \

	arm-realview-pba8.dtb \

	emev2-kzm9d.dtb \

	r7s72100-gr-peach.dtb \

	r7s72100-rskrza1.dtb \

	r7s9210-rza2mevb.dtb \

	r8a7740-armadillo800eva.dtb \

	r8a7742-iwg21d-q7-dbcm-ca.dtb \

	r8a7743-iwg20d-q7-dbcm-ca.dtb \

	r8a7743-sk-rzg1m.dtb \

	r8a7744-iwg20d-q7-dbcm-ca.dtb \

	r8a7745-iwg22d-sodimm-dbhd-ca.dtb \

	r8a7745-sk-rzg1e.dtb \

	r8a7778-bockw.dtb \

	r8a7779-marzen.dtb \

	r8a7790-stout.dtb \

	r8a7792-blanche.dtb \

	r8a7794-alt.dtb \

	r8a7794-silk.dtb \

dtb-$(CONFIG_ARCH_ROCKCHIP) += \

	rk3066a-marsboard.dtb \

	rk3229-xms6.dtb \

	rk3288-evb-act8846.dtb \

	rk3288-evb-rk808.dtb \

	rk3288-firefly-reload.dtb \

	rk3288-popmetal.dtb \

	rk3288-r89.dtb \

	rk3288-rock-pi-n8.dtb \

	rk3288-tinker-s.dtb \

	rk3288-veyron-jaq.dtb \

	rk3288-veyron-pinky.dtb \

	rk3288-veyron-speedy.dtb \

	s5pv210-fascinate4g.dtb \

	socfpga_arria10_mercury_aa1.dtb \

	socfpga_arria10_socdk_nand.dtb \

	socfpga_arria10_socdk_qspi.dtb \

	socfpga_cyclone5_mcvevk.dtb \

	socfpga_cyclone5_socdk.dtb \

	socfpga_cyclone5_sockit.dtb \

	spear1310-evb.dtb \

dtb-$(CONFIG_ARCH_SPEAR3XX) += \

	spear300-evb.dtb \

	spear310-evb.dtb \

	spear320-evb.dtb \

	spear320-hmi.dtb

	stih407-b2120.dtb \

	stih410-b2260.dtb \

	stih418-b2264.dtb

dtb-$(CONFIG_ARCH_STM32) += \

	stm32f469-disco.dtb \

	stm32f769-disco.dtb \

	stm32429i-eval.dtb \

	stm32746g-eval.dtb \

	stm32h750i-art-pi.dtb \

	stm32mp135f-dk.dtb \

	stm32mp157a-avenger96.dtb \

	stm32mp157a-dk1.dtb \

	stm32mp157a-microgea-stm32mp1-microdev2.0.dtb \

	stm32mp157a-icore-stm32mp1-edimm2.2.dtb \

	stm32mp157c-dhcom-picoitx.dtb \

	stm32mp157c-ed1.dtb \

	stm32mp157c-lxa-mc1.dtb \

	sun4i-a10-a1000.dtb \

	sun4i-a10-ba10-tvbox.dtb \

	sun4i-a10-hackberry.dtb \

	sun4i-a10-hyundai-a7hd.dtb \

	sun4i-a10-inet97fv2.dtb \

	sun4i-a10-inet9f-rev03.dtb \

	sun4i-a10-itead-iteaduino-plus.dtb \

	sun4i-a10-jesurun-q5.dtb \

	sun4i-a10-mk802.dtb \

	sun4i-a10-pcduino.dtb \

	sun4i-a10-pcduino2.dtb \

	sun4i-a10-pov-protab2-ips9.dtb \

	sun4i-a10-topwise-a721.dtb

dtb-$(CONFIG_MACH_SUN5I) += \

	sun5i-a10s-auxtek-t003.dtb \

	sun5i-a10s-auxtek-t004.dtb \

	sun5i-a10s-mk802.dtb \

	sun5i-a10s-olinuxino-micro.dtb \

	sun5i-a13-difrnce-dit4350.dtb \

	sun5i-a13-empire-electronix-d709.dtb \

	sun5i-a13-empire-electronix-m712.dtb \

	sun5i-a13-hsg-h702.dtb \

	sun5i-a13-olinuxino.dtb \

	sun5i-a13-q8-tablet.dtb \

	sun5i-a13-utoo-p66.dtb \

	sun5i-gr8-chip-pro.dtb \

	sun5i-r8-chip.dtb

dtb-$(CONFIG_MACH_SUN6I) += \

	sun6i-a31-hummingbird.dtb \

	sun6i-a31-i7.dtb \

	sun6i-a31-m9.dtb \

	sun6i-a31-mele-a1000g-quad.dtb \

	sun7i-a20-bananapro.dtb \

	sun7i-a20-hummingbird.dtb \

	sun7i-a20-itead-ibox.dtb \

	sun7i-a20-icnova-swac.dtb \

	sun7i-a20-linutronix-testbox-v2.dtb \

	sun7i-a20-m3.dtb \

	sun7i-a20-mk808c.dtb \

	sun7i-a20-olimex-som-evb.dtb \

	sun7i-a20-olimex-som204-evb.dtb \

	sun7i-a20-olimex-som204-evb-emmc.dtb \

	sun7i-a20-olinuxino-lime.dtb \

	sun7i-a20-olinuxino-lime2.dtb \

	sun7i-a20-olinuxino-lime2-emmc.dtb \

	sun7i-a20-orangepi-mini.dtb \

	sun7i-a20-pcduino3.dtb \

	sun8i-a23-evb.dtb \

	sun8i-a23-gt90h-v4.dtb \

	sun8i-a23-inet86dz.dtb \

	sun8i-a23-ippo-q8h-v1.2.dtb \

	sun8i-a23-polaroid-mid2809pxe04.dtb \

	sun8i-a33-ippo-q8h-v1.2.dtb \

	sun8i-a33-q8-tablet.dtb \

	sun8i-a33-sinlinx-sina33.dtb \

	sun8i-a83t-allwinner-h8homlet-v2.dtb \

	sun8i-a83t-bananapi-m3.dtb \

	sun8i-a83t-cubietruck-plus.dtb \

	sun8i-h2-plus-libretech-all-h3-cc.dtb \

	sun8i-h2-plus-orangepi-zero.dtb \

	sun8i-h3-beelink-x2.dtb \

	sun8i-h3-libretech-all-h3-cc.dtb \

	sun8i-h3-nanopi-m1-plus.dtb \

	sun8i-h3-nanopi-neo-air.dtb \

	sun8i-h3-nanopi-r1.dtb \

	sun8i-h3-orangepi-one.dtb \

	sun8i-h3-orangepi-pc.dtb \

	sun8i-h3-zeropi.dtb \

	sun8i-r40-bananapi-m2-ultra.dtb \

	sun8i-r40-oka40i-c.dtb \

	sun8i-s3-elimo-initium.dtb \

	sun8i-s3-pinecube.dtb \

	sun8i-t3-cqa3t-bv3.dtb \

	sun8i-v3s-licheepi-zero.dtb \

	sun8i-v3s-licheepi-zero-dock.dtb \

	sun9i-a80-optimus.dtb \

	suniv-f1c100s-licheepi-nano.dtb

	tegra20-acer-a500-picasso.dtb \

	tegra20-colibri-eval-v3.dtb \

	tegra20-colibri-iris.dtb \

	tegra20-paz00.dtb \

	tegra20-plutux.dtb \

	tegra20-seaboard.dtb \

	tegra20-trimslice.dtb \

dtb-$(CONFIG_ARCH_TEGRA_3x_SOC) += \

	tegra30-asus-nexus7-grouper-PM269.dtb \

	tegra30-asus-nexus7-tilapia-E1565.dtb \

	tegra30-beaver.dtb \

	tegra30-cardhu-a02.dtb \

	tegra30-cardhu-a04.dtb \

	tegra114-roth.dtb \

	tegra114-tn7.dtb

dtb-$(CONFIG_ARCH_TEGRA_124_SOC) += \

	tegra124-apalis-eval.dtb \

	tegra124-jetson-tk1.dtb \

	tegra124-nyan-blaze.dtb \

	tegra124-venice2.dtb

dtb-$(CONFIG_ARCH_U8500) += \

	ste-snowball.dtb \

	ste-hrefprev60-stuib.dtb \

	ste-hrefprev60-tvk.dtb \

	ste-hrefv60plus-tvk.dtb \

dtb-$(CONFIG_ARCH_UNIPHIER) += \

	uniphier-ld4-ref.dtb \

	uniphier-pro4-ace.dtb \

	uniphier-pro4-sanji.dtb \

	uniphier-pxs2-gentil.dtb \

	uniphier-sld8-ref.dtb

dtb-$(CONFIG_ARCH_VERSATILE) += \

	versatile-ab.dtb \

	versatile-ab-ib2.dtb \

	versatile-pb.dtb

	vexpress-v2p-ca5s.dtb \

	vexpress-v2p-ca9.dtb \

dtb-$(CONFIG_ARCH_VIRT) += \

dtb-$(CONFIG_ARCH_VT8500) += \

dtb-$(CONFIG_ARCH_ZYNQ) += \

	zynq-cc108.dtb \

	zynq-microzed.dtb \

	zynq-zturn-v5.dtb \

dtb-$(CONFIG_MACH_ARMADA_370) += \

	armada-370-rd.dtb \

	armada-370-seagate-nas-4bay.dtb \

dtb-$(CONFIG_MACH_ARMADA_375) += \

dtb-$(CONFIG_MACH_ARMADA_38X) += \

	armada-382-rd-ac3x-48g4x2xl.dtb \

	armada-385-atl-x530.dtb\

	armada-385-clearfog-gtr-s4.dtb \

	armada-385-clearfog-gtr-l8.dtb \

	armada-385-linksys-caiman.dtb \

	armada-385-linksys-cobra.dtb \

	armada-385-linksys-rango.dtb \

	armada-385-synology-ds116.dtb \

	armada-388-clearfog.dtb \

	armada-388-clearfog-base.dtb \

	armada-388-db.dtb \

	armada-388-rd.dtb

	armada-398-db.dtb

dtb-$(CONFIG_MACH_ARMADA_XP) += \

	armada-xp-crs326-24g-2s.dtb \

	armada-xp-db-xc3-24g4xg.dtb \

	armada-xp-gp.dtb \

	armada-xp-linksys-mamba.dtb \

	armada-xp-matrix.dtb \

	armada-xp-netgear-rn2120.dtb \

	armada-xp-openblocks-ax3-4.dtb \

	armada-xp-synology-ds414.dtb

	dove-cubox-es.dtb \

	dove-d3plug.dtb \

	dove-dove-db.dtb \

dtb-$(CONFIG_ARCH_MEDIATEK) += \

	mt2701-evb.dtb \

	mt6580-evbp1.dtb \

	mt7623n-bananapi-bpi-r2.dtb \

	mt7629-rfb.dtb \

	mt8127-moose.dtb \

	mt8135-evbp1.dtb

	mstar-infinity2m-ssd202d-ssd201htv2.dtb \

dtb-$(CONFIG_ARCH_ASPEED) += \

	aspeed-ast2500-evb.dtb \

	aspeed-bmc-amd-ethanolx.dtb \

	aspeed-bmc-ampere-mtjade.dtb \

	aspeed-bmc-arm-centriq2400-rep.dtb \

	aspeed-bmc-arm-stardragon4800-rep2.dtb \

	aspeed-bmc-facebook-cloudripper.dtb \

	aspeed-bmc-facebook-galaxy100.dtb \

	aspeed-bmc-facebook-minipack.dtb \

	aspeed-bmc-facebook-wedge40.dtb \

	aspeed-bmc-facebook-wedge100.dtb \

	aspeed-bmc-facebook-wedge400.dtb \

	aspeed-bmc-facebook-yamp.dtb \

	aspeed-bmc-facebook-yosemitev2.dtb \

	aspeed-bmc-ibm-everest.dtb \

	aspeed-bmc-ibm-rainier.dtb \

	aspeed-bmc-ibm-rainier-4u.dtb \

	aspeed-bmc-intel-s2600wf.dtb \

	aspeed-bmc-inspur-fp5280g2.dtb \

	aspeed-bmc-inspur-nf5280m6.dtb \

	aspeed-bmc-opp-mihawk.dtb \

	aspeed-bmc-opp-nicole.dtb \

	aspeed-bmc-opp-tacoma.dtb \

	aspeed-bmc-portwell-neptune.dtb \

	aspeed-bmc-quanta-q71l.dtb \

	aspeed-bmc-supermicro-x11spi.dtb \

	aspeed-bmc-inventec-transformers.dtb \

 SPDX-License-Identifier: GPL-2.0-only

# SPDX-License-Identifier: GPL-2.0

#

 Arch-specific CryptoAPI modules.





obj-$(CONFIG_CRYPTO_AES_ARM) += aes-arm.o

obj-$(CONFIG_CRYPTO_AES_ARM_BS) += aes-arm-bs.o

obj-$(CONFIG_CRYPTO_SHA1_ARM) += sha1-arm.o

obj-$(CONFIG_CRYPTO_SHA1_ARM_NEON) += sha1-arm-neon.o

obj-$(CONFIG_CRYPTO_SHA256_ARM) += sha256-arm.o

obj-$(CONFIG_CRYPTO_SHA512_ARM) += sha512-arm.o

obj-$(CONFIG_CRYPTO_BLAKE2S_ARM) += blake2s-arm.o

obj-$(CONFIG_CRYPTO_BLAKE2B_NEON) += blake2b-neon.o

obj-$(CONFIG_CRYPTO_CHACHA20_NEON) += chacha-neon.o

obj-$(CONFIG_CRYPTO_POLY1305_ARM) += poly1305-arm.o

obj-$(CONFIG_CRYPTO_NHPOLY1305_NEON) += nhpoly1305-neon.o

obj-$(CONFIG_CRYPTO_CURVE25519_NEON) += curve25519-neon.o



sha1-arm-y	:= sha1-armv4-large.o sha1_glue.o

sha1-arm-neon-y	:= sha1-armv7-neon.o sha1_neon_glue.o

sha256-arm-y	:= sha256-core.o sha256_glue.o $(sha256-arm-neon-y)

sha512-arm-y	:= sha512-core.o sha512-glue.o $(sha512-arm-neon-y)

blake2b-neon-y  := blake2b-neon-core.o blake2b-neon-glue.o

sha2-arm-ce-y	:= sha2-ce-core.o sha2-ce-glue.o

aes-arm-ce-y	:= aes-ce-core.o aes-ce-glue.o

ghash-arm-ce-y	:= ghash-ce-core.o ghash-ce-glue.o

crct10dif-arm-ce-y	:= crct10dif-ce-core.o crct10dif-ce-glue.o

chacha-neon-$(CONFIG_KERNEL_MODE_NEON) += chacha-neon-core.o

poly1305-arm-y := poly1305-core.o poly1305-glue.o

curve25519-neon-y := curve25519-core.o curve25519-glue.o

      cmd_perl = $(PERL) $(<) > $(@)

$(obj)/%-core.S: $(src)/%-armv4.pl

	$(call cmd,perl)

clean-files += poly1305-core.S sha256-core.S sha512-core.S

# massage the perlasm code a bit so we only get the NEON routine if we need it

poly1305-aflags-$(CONFIG_CPU_V7) := -U__LINUX_ARM_ARCH__ -D__LINUX_ARM_ARCH__=5

poly1305-aflags-$(CONFIG_KERNEL_MODE_NEON) := -U__LINUX_ARM_ARCH__ -D__LINUX_ARM_ARCH__=7



 ia64/Makefile



 This file is included by the global makefile so that you can add your own

 architecture-specific flags and dependencies.



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



 Copyright (C) 1998-2004 by David Mosberger-Tang <davidm@hpl.hp.com>





KBUILD_DEFCONFIG := generic_defconfig





OBJCOPYFLAGS	:= --strip-all



cflags-y	:= -pipe $(EXTRA) -ffixed-r13 -mfixed-range=f12-f15,f32-f127 \



GAS_STATUS	= $(shell $(srctree)/arch/ia64/scripts/check-gas "$(CC)" "$(OBJDUMP)")



	a source-tree that post-dates 18-Dec-2002.  You can find a pre-compiled	\

	static binary of such an assembler at:					\

										\



quiet_cmd_gzip = GZIP    $@

cmd_gzip = cat $(real-prereqs) | $(KGZIP) -n -f -9 > $@

quiet_cmd_objcopy = OBJCOPY $@





libs-y				+= arch/ia64/lib/

drivers-y			+= arch/ia64/pci/ arch/ia64/hp/common/







vmlinuz: vmlinux.gz

	$(call if_changed,gzip)

vmlinux.bin: vmlinux FORCE

	$(call if_changed,objcopy)





CLEAN_FILES += vmlinux.gz

	sh $(srctree)/arch/ia64/install.sh $(KERNELRELEASE) $< System.map "$(INSTALL_PATH)"

  echo '  install	- Install compressed kernel image'

  echo '* unwcheck	- Check vmlinux for invalid unwind info'

endef

 arch/ia64/uv/Makefile



# This file is subject to the terms and conditions of the GNU General Public

 License.  See the file "COPYING" in the main directory of this archive

 for more details.



 Copyright (C) 2008 Silicon Graphics, Inc.  All Rights Reserved.



# Makefile for the sn uv subplatform

#

obj-y += kernel/

# arch/ia64/uv/kernel/Makefile

#

 This file is subject to the terms and conditions of the GNU General Public

# License.  See the file "COPYING" in the main directory of this archive

# for more details.

#

# Copyright (C) 2008 Silicon Graphics, Inc.  All Rights Reserved.

#



obj-y				+= setup.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the ia64-specific parts of the memory manager.

#



obj-$(CONFIG_HUGETLB_PAGE) += hugetlbpage.o

obj-$(CONFIG_NUMA)	   += numa.o

obj-$(CONFIG_SPARSEMEM)	   += discontig.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





ifdef CONFIG_DYNAMIC_FTRACE



extra-y	:= head.o vmlinux.lds

	 irq_lsapic.o ivt.o pal.o patch.o process.o ptrace.o sal.o		\

	 unwind.o mca.o mca_asm.o topology.o dma-mapping.o iosapic.o acpi.o \



obj-$(CONFIG_IA64_BRL_EMU)	+= brl_emu.o

obj-$(CONFIG_MODULES)		+= module.o

obj-$(CONFIG_SMP)		+= smp.o smpboot.o

obj-$(CONFIG_NUMA)		+= numa.o

obj-$(CONFIG_IA64_CYCLONE)	+= cyclone.o

obj-$(CONFIG_IA64_MCA_RECOVERY)	+= mca_recovery.o

obj-$(CONFIG_KPROBES)		+= kprobes.o

obj-$(CONFIG_CRASH_DUMP)	+= crash_dump.o

obj-$(CONFIG_IA64_UNCACHED_ALLOCATOR)	+= uncached.o

obj-$(CONFIG_AUDIT)		+= audit.o

obj-$(CONFIG_STACKTRACE)	+= stacktrace.o

obj-$(CONFIG_IA64_ESI)		+= esi.o

ifneq ($(CONFIG_IA64_ESI),)

obj-y				+= esi_stub.o	# must be in kernel proper

endif





# fp_emulate() expects f2-f5,f16-f31 to contain the user-level state.



 The gate DSO image is built using a special linker script.

include $(src)/Makefile.gate

# SPDX-License-Identifier: GPL-2.0

kapi := arch/$(SRCARCH)/include/generated/asm



_dummy := $(shell [ -d '$(uapi)' ] || mkdir -p '$(uapi)')	\



syscall := $(src)/syscall.tbl

systbl := $(srctree)/scripts/syscalltbl.sh

      cmd_syshdr = $(CONFIG_SHELL) $(syshdr) --emit-nr --offset __NR_Linux $< $@

      cmd_systbl = $(CONFIG_SHELL) $(systbl) $< $@

	$(call if_changed,syshdr)

	$(call if_changed,systbl)

uapisyshdr-y		+= unistd_64.h



kapisyshdr-y	:= $(addprefix $(kapi)/, $(kapisyshdr-y))



all: $(uapisyshdr-y) $(kapisyshdr-y)

	@:

 SPDX-License-Identifier: GPL-2.0-only



# ia64/platform/hp/common/Makefile

#

 Copyright (C) 2002 Hewlett Packard

# Copyright (C) Alex Williamson (alex_williamson@hp.com)

#

obj-$(CONFIG_IA64_HP_SBA_IOMMU) += sba_iommu.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for ia64-specific library routines..

#

lib-y := io.o __divsi3.o __udivsi3.o __modsi3.o __umodsi3.o		\

	checksum.o clear_page.o csum_partial_copy.o			\

	flush.o ip_fast_csum.o do_csum.o				\



lib-$(CONFIG_ITANIUM)	+= copy_page.o copy_user.o memcpy.o



AFLAGS___divdi3.o	=

AFLAGS___udivdi3.o	= -DUNSIGNED

AFLAGS___umoddi3.o	= -DUNSIGNED -DMODULO

AFLAGS___umodsi3.o	= -DUNSIGNED -DMODULO

$(obj)/__divdi3.o: $(src)/idiv64.S FORCE

	$(call if_changed_rule,as_o_S)





$(obj)/__umoddi3.o: $(src)/idiv64.S FORCE

	$(call if_changed_rule,as_o_S)

$(obj)/__divsi3.o: $(src)/idiv32.S FORCE

	$(call if_changed_rule,as_o_S)





$(obj)/__umodsi3.o: $(src)/idiv32.S FORCE

	$(call if_changed_rule,as_o_S)

 SPDX-License-Identifier: GPL-2.0-only



 Makefile for the ia64-specific parts of the pci bus



 SPDX-License-Identifier: GPL-2.0-only



# Copyright (C) 2004, 2007-2010, 2011-2012 Synopsys, Inc. (www.synopsys.com)

#





cflags-y	+= -fno-common -pipe -fno-builtin -mmedium-calls -D__linux__



ifeq ($(CONFIG_ARC_TUNE_MCPU),"")

cflags-y				+= $(tune-mcpu-def-y)

else

# The flag provided by 'CONFIG_ARC_TUNE_MCPU' option isn't known by this compiler

# (probably the compiler is too old). Use ISA default mcpu flag instead as a safe option.



ifdef CONFIG_ARC_CURR_IN_REG

 For a global register definition, make sure it gets passed to every file

# We had a customer reported bug where some code built in kernel was NOT using

# any kernel headers, and missing the r25 global register

 Can't do unconditionally because of recursive include issues

# due to <linux/thread_info.h>

LINUXINCLUDE	+=  -include $(srctree)/arch/arc/include/asm/current.h

endif

cflags-y				+= -fsection-anchors

cflags-$(CONFIG_ARC_HAS_LLSC)		+= -mlock





ifdef CONFIG_ARC_USE_UNALIGNED_MEM_ACCESS

cflags-y				+= -munaligned-access

cflags-y				+= -mno-unaligned-access

endif

ifndef CONFIG_ARC_HAS_LL64



ifndef CONFIG_ARC_HAS_DIV_REM

cflags-y				+= -mno-div-rem

endif





# small data is default for elf32 tool-chain. If not usable, disable it

# This also allows repurposing GP as scratch reg to gcc reg allocator

disable_small_data := y







 Modules with short calls might break for calls into builtin-kernel



# Finally dump eveything into kernel build system

KBUILD_LDFLAGS	+= $(ldflags-y)



# w/o this dtb won't embed into kernel binary

core-y		+= arch/arc/boot/dts/

core-$(CONFIG_ARC_SOC_HSDK)	+= arch/arc/plat-hsdk/

libs-y		+= arch/arc/lib/ $(LIBGCC)

boot		:= arch/arc/boot

boot_targets := uImage.bin uImage.gz uImage.lzma

PHONY += $(boot_targets)

	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@

uimage-default-y			:= uImage.bin

uimage-default-$(CONFIG_KERNEL_GZIP)	:= uImage.gz

uimage-default-$(CONFIG_KERNEL_LZMA)	:= uImage.lzma

	@ln -sf $< $(boot)/uImage



CLEAN_FILES += $(boot)/uImage

 SPDX-License-Identifier: GPL-2.0-only



 Copyright (C) 2013-15 Synopsys, Inc. (www.synopsys.com)





obj-$(CONFIG_ARC_PLAT_AXS10X) += axs10x.o

 SPDX-License-Identifier: GPL-2.0-only



# Copyright (C) 2017 Synopsys, Inc. (www.synopsys.com)

#

 SPDX-License-Identifier: GPL-2.0-only



# Copyright (C) 2004, 2007-2010, 2011-2012 Synopsys, Inc. (www.synopsys.com)

#

obj-$(CONFIG_HIGHMEM)	+= highmem.o

 SPDX-License-Identifier: GPL-2.0-only



# Copyright (C) 2004, 2007-2010, 2011-2012 Synopsys, Inc. (www.synopsys.com)

#

obj-y	:= arcksyms.o setup.o irq.o reset.o ptrace.o process.o devtree.o

obj-$(CONFIG_ISA_ARCOMPACT)		+= entry-compact.o intc-compact.o

obj-$(CONFIG_ISA_ARCV2)			+= entry-arcv2.o intc-arcv2.o

obj-$(CONFIG_MODULES)			+= arcksyms.o module.o

obj-$(CONFIG_SMP) 			+= smp.o

obj-$(CONFIG_ARC_EMUL_UNALIGNED) 	+= unaligned.o

obj-$(CONFIG_ARC_METAWARE_HLINK)	+= arc_hostlink.o



obj-$(CONFIG_ARC_FPU_SAVE_RESTORE)	+= fpu.o

CFLAGS_fpu.o   += -mdpfp

endif

CFLAGS_ctx_sw.o += -fno-omit-frame-pointer

obj-y += ctx_sw.o



extra-y := vmlinux.lds head.o

 SPDX-License-Identifier: GPL-2.0-only



# Copyright (C) 2004, 2007-2010, 2011-2012 Synopsys, Inc. (www.synopsys.com)

#

lib-y	:= strchr-700.o strcpy-700.o strlen.o memcmp.o



ifdef CONFIG_ARC_USE_UNALIGNED_MEM_ACCESS

lib-$(CONFIG_ISA_ARCV2)		+=memcpy-archs-unaligned.o

 SPDX-License-Identifier: GPL-2.0-only



 Copyright (C) 2011-2012 Synopsys, Inc. (www.synopsys.com)





obj-y := platform.o

# SPDX-License-Identifier: GPL-2.0

 uImage build relies on mkimage being availble on your host for ARC target

# You will need to build u-boot for ARC, rename mkimage to arc-elf32-mkimage

 and make sure it's reacable from your PATH



OBJCOPYFLAGS= -O binary -R .note -R .note.gnu.build-id -R .comment -S



UIMAGE_ENTRYADDR   = $(LINUX_START_TEXT)

targets += vmlinux.bin

targets += vmlinux.bin.gz

targets += vmlinux.bin.lzma

targets += uImage.bin

targets += uImage.lzma



$(obj)/vmlinux.bin.gz: $(obj)/vmlinux.bin FORCE



$(obj)/vmlinux.bin.lzma: $(obj)/vmlinux.bin FORCE



$(obj)/uImage.bin: $(obj)/vmlinux.bin FORCE

	$(call if_changed,uimage,none)



$(obj)/uImage.lzma: $(obj)/vmlinux.bin.lzma FORCE

	$(call if_changed,uimage,lzma)

# SPDX-License-Identifier: GPL-2.0

 Built-in dtb



ifneq ($(CONFIG_ARC_BUILTIN_DTB_NAME),"")

	builtindtb-y	:= $(patsubst "%",%,$(CONFIG_ARC_BUILTIN_DTB_NAME))

endif

obj-y   += $(builtindtb-y).dtb.o



# for CONFIG_OF_ALL_DTBS test

dtb-	:= $(patsubst $(dtstree)/%.dts,%.dtb, $(wildcard $(dtstree)/*.dts))

# board-specific dtc flags

 SPDX-License-Identifier: GPL-2.0-only

# Abilis Systems TB10x platform Makefile

#

 Author: Christian Ruppert <christian.ruppert@abilis.com>





KBUILD_CFLAGS   += -Iarch/arc/plat-tb10x/include

obj-y += tb10x.o

# SPDX-License-Identifier: GPL-2.0

#

# Makefile for the kernel block layer

#

			blk-mq-sysfs.o blk-mq-cpumap.o blk-mq-sched.o ioctl.o \

			disk-events.o blk-ia-ranges.o

obj-$(CONFIG_BLK_CGROUP)	+= blk-cgroup.o

obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o

obj-$(CONFIG_BLK_CGROUP_IOPRIO)	+= blk-ioprio.o

obj-$(CONFIG_BLK_CGROUP_IOLATENCY)	+= blk-iolatency.o

obj-$(CONFIG_BLK_CGROUP_IOCOST)	+= blk-iocost.o

obj-$(CONFIG_IOSCHED_BFQ)	+= bfq.o

obj-$(CONFIG_BLK_DEV_INTEGRITY) += bio-integrity.o blk-integrity.o

obj-$(CONFIG_BLK_DEV_INTEGRITY_T10)	+= t10-pi.o

obj-$(CONFIG_BLK_MQ_VIRTIO)	+= blk-mq-virtio.o

obj-$(CONFIG_BLK_DEV_ZONED)	+= blk-zoned.o

obj-$(CONFIG_BLK_WBT)		+= blk-wbt.o

obj-$(CONFIG_BLK_SED_OPAL)	+= sed-opal.o

obj-$(CONFIG_BLK_PM)		+= blk-pm.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for the linux kernel.





obj-$(CONFIG_BLOCK) += core.o

obj-$(CONFIG_AMIGA_PARTITION) += amiga.o

obj-$(CONFIG_AIX_PARTITION) += aix.o

obj-$(CONFIG_MAC_PARTITION) += mac.o

obj-$(CONFIG_MSDOS_PARTITION) += msdos.o

obj-$(CONFIG_SGI_PARTITION) += sgi.o

obj-$(CONFIG_ULTRIX_PARTITION) += ultrix.o

obj-$(CONFIG_EFI_PARTITION) += efi.o

obj-$(CONFIG_SYSV68_PARTITION) += sysv68.o

# SPDX-License-Identifier: GPL-2.0

#

# Cryptographic API

#

obj-$(CONFIG_CRYPTO) += crypto.o





crypto_algapi-$(CONFIG_PROC_FS) += proc.o







crypto_hash-y += shash.o

obj-$(CONFIG_CRYPTO_HASH2) += crypto_hash.o

obj-$(CONFIG_CRYPTO_AKCIPHER2) += akcipher.o







rsa_generic-y := rsapubkey.asn1.o

rsa_generic-y += rsa.o

rsa_generic-y += rsa_helper.o

rsa_generic-y += rsa-pkcs1pad.o

obj-$(CONFIG_CRYPTO_RSA) += rsa_generic.o

$(obj)/sm2.o: $(obj)/sm2signature.asn1.h

sm2_generic-y += sm2signature.asn1.o



obj-$(CONFIG_CRYPTO_SM2) += sm2_generic.o

$(obj)/ecdsa.o: $(obj)/ecdsasignature.asn1.h

ecdsa_generic-y += ecdsasignature.asn1.o

obj-$(CONFIG_CRYPTO_ECDSA) += ecdsa_generic.o





obj-$(CONFIG_CRYPTO_USER) += crypto_user.o

crypto_user-y := crypto_user_base.o

 https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79149



CFLAGS_aegis128-neon-inner.o += -ffreestanding -march=armv8-a -mfloat-abi=softfp

aegis128-$(CONFIG_CRYPTO_AEGIS128_SIMD) += aegis128-neon.o aegis128-neon-inner.o

endif

aegis128-cflags-y := -ffreestanding -mcpu=generic+crypto

				       -ffixed-q19 -ffixed-q20 -ffixed-q21 \

				       -ffixed-q25 -ffixed-q26 -ffixed-q27 \

				       -ffixed-q31

CFLAGS_REMOVE_aegis128-neon-inner.o += -mgeneral-regs-only

 Enable <arm_neon.h>

CFLAGS_aegis128-neon-inner.o += -isystem $(shell $(CC) -print-file-name=include)

CFLAGS_serpent_generic.o := $(call cc-option,-fsched-pressure)  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79149

obj-$(CONFIG_CRYPTO_AES) += aes_generic.o

CFLAGS_aes_generic.o := $(call cc-option,-fno-code-hoisting) # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83356

obj-$(CONFIG_CRYPTO_SM4) += sm4_generic.o

obj-$(CONFIG_CRYPTO_AES_TI) += aes_ti.o

obj-$(CONFIG_CRYPTO_CAMELLIA) += camellia_generic.o

obj-$(CONFIG_CRYPTO_CAST_COMMON) += cast_common.o

obj-$(CONFIG_CRYPTO_CAST5) += cast5_generic.o

obj-$(CONFIG_CRYPTO_CAST6) += cast6_generic.o

obj-$(CONFIG_CRYPTO_ARC4) += arc4.o

obj-$(CONFIG_CRYPTO_TEA) += tea.o

obj-$(CONFIG_CRYPTO_KHAZAD) += khazad.o

obj-$(CONFIG_CRYPTO_ANUBIS) += anubis.o

obj-$(CONFIG_CRYPTO_SEED) += seed.o

obj-$(CONFIG_CRYPTO_CHACHA20) += chacha_generic.o

obj-$(CONFIG_CRYPTO_POLY1305) += poly1305_generic.o

obj-$(CONFIG_CRYPTO_DEFLATE) += deflate.o

obj-$(CONFIG_CRYPTO_MICHAEL_MIC) += michael_mic.o

obj-$(CONFIG_CRYPTO_CRC32C) += crc32c_generic.o

obj-$(CONFIG_CRYPTO_CRC32) += crc32_generic.o

obj-$(CONFIG_CRYPTO_AUTHENC) += authenc.o authencesn.o

obj-$(CONFIG_CRYPTO_LZO) += lzo.o lzo-rle.o

obj-$(CONFIG_CRYPTO_LZ4) += lz4.o

obj-$(CONFIG_CRYPTO_LZ4HC) += lz4hc.o

obj-$(CONFIG_CRYPTO_XXHASH) += xxhash_generic.o

obj-$(CONFIG_CRYPTO_842) += 842.o

CFLAGS_jitterentropy.o = -O0

UBSAN_SANITIZE_jitterentropy.o = n

obj-$(CONFIG_CRYPTO_USER_API_HASH) += algif_hash.o

obj-$(CONFIG_CRYPTO_USER_API_RNG) += algif_rng.o





ecrdsa_generic-y += ecrdsa.o



#

# generic algorithms and the async_tx api

#

obj-$(CONFIG_XOR_BLOCKS) += xor.o

obj-$(CONFIG_ASYNC_CORE) += async_tx/

obj-$(CONFIG_ASYMMETRIC_KEY_TYPE) += asymmetric_keys/

obj-$(CONFIG_CRYPTO_HASH_INFO) += hash_info.o

crypto_simd-y := simd.o

# SPDX-License-Identifier: GPL-2.0

#

 Makefile for asymmetric cryptographic keys







	asymmetric_type.o \

	restrict.o \



obj-$(CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE) += public_key.o



#

 X.509 Certificate handling



obj-$(CONFIG_X509_CERTIFICATE_PARSER) += x509_key_parser.o

	x509.asn1.o \

	x509_akid.asn1.o \

	x509_cert_parser.o \



	$(obj)/x509_akid.asn1.h

$(obj)/x509_akid.asn1.o: $(obj)/x509_akid.asn1.c $(obj)/x509_akid.asn1.h



 PKCS


obj-$(CONFIG_PKCS8_PRIVATE_KEY_PARSER) += pkcs8_key_parser.o

pkcs8_key_parser-y := \

	pkcs8.asn1.o \

	pkcs8_parser.o

$(obj)/pkcs8_parser.o: $(obj)/pkcs8.asn1.h





#

# PKCS#7 message handling

#

obj-$(CONFIG_PKCS7_MESSAGE_PARSER) += pkcs7_message.o

	pkcs7_trust.o \

	pkcs7_verify.o

$(obj)/pkcs7_parser.o: $(obj)/pkcs7.asn1.h



#

# PKCS#7 parser testing key

#



#

# Signed PE binary-wrapped key handling

#

obj-$(CONFIG_SIGNED_PE_FILE_VERIFICATION) += verify_signed_pefile.o

	verify_pefile.o \

	mscode.asn1.o



#

# TPM private key parsing

#



$(obj)/tpm.asn1.o: $(obj)/tpm.asn1.c $(obj)/tpm.asn1.h

# SPDX-License-Identifier: GPL-2.0

obj-$(CONFIG_ASYNC_MEMCPY) += async_memcpy.o

obj-$(CONFIG_ASYNC_PQ) += async_pq.o

