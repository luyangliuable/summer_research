 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2013 - 2018 Intel Corporation. */

/**

 * i40e_init_nvm - Initialize NVM function pointers

 * @hw: pointer to the HW structure

 *

 * Setup the function pointers and the NVM info structure. Should be called

 * once per NVM initialization, e.g. inside the i40e_init_shared_code().

 * Please notice that the NVM term is used here (& in all methods covered

 * in this file) as an equivalent of the FLASH part mapped into the SR.

 * We are accessing FLASH always thru the Shadow RAM.

	/* The SR size is stored regardless of the nvm programming mode

	 * as the blank mode may be used in the factory line.

 Switching to words (sr_size contains power of 2KB) */

 Check if we are in the normal or blank NVM programming mode */

 Normal programming mode */

 Max NVM timeout */

 Blank programming mode */

/**

 * i40e_acquire_nvm - Generic request for acquiring the NVM ownership

 * @hw: pointer to the HW structure

 * @access: NVM access type (read or write)

 *

 * This function will request NVM ownership for reading

 * via the proper Admin Command.

 Reading the Global Device Timer */

 Store the timeout */

 Poll until the current NVM owner timeouts */

/**

 * i40e_release_nvm - Generic request for releasing the NVM ownership

 * @hw: pointer to the HW structure

 *

 * This function will release NVM resource via the proper Admin Command.

	/* there are some rare cases when trying to release the resource

	 * results in an admin Q timeout, so handle them correctly

/**

 * i40e_poll_sr_srctl_done_bit - Polls the GLNVM_SRCTL done bit

 * @hw: pointer to the HW structure

 *

 * Polls the SRCTL Shadow RAM register done bit.

 Poll the I40E_GLNVM_SRCTL until the done bit is set */

/**

 * i40e_read_nvm_word_srctl - Reads Shadow RAM via SRCTL register

 * @hw: pointer to the HW structure

 * @offset: offset of the Shadow RAM word to read (0x000000 - 0x001FFF)

 * @data: word read from the Shadow RAM

 *

 * Reads one 16 bit word from the Shadow RAM using the GLNVM_SRCTL register.

 Poll the done bit first */

 Write the address and start reading */

 Poll I40E_GLNVM_SRCTL until the done bit is set */

/**

 * i40e_read_nvm_aq - Read Shadow RAM.

 * @hw: pointer to the HW structure.

 * @module_pointer: module pointer location in words from the NVM beginning

 * @offset: offset in words from module start

 * @words: number of words to write

 * @data: buffer with words to write to the Shadow RAM

 * @last_command: tells the AdminQ that this is the last command

 *

 * Writes a 16 bit words buffer to the Shadow RAM using the admin command.

	/* Here we are checking the SR limit only for the flat memory model.

	 * We cannot do it for the module-based model, as we did not acquire

	 * the NVM resource yet (we cannot get the module pointer value).

	 * Firmware will check the module-based model.

 We can write only up to 4KB (one sector), in one AQ write */

 A single write cannot spread over two sectors */

bytes*/

bytes*/

/**

 * i40e_read_nvm_word_aq - Reads Shadow RAM via AQ

 * @hw: pointer to the HW structure

 * @offset: offset of the Shadow RAM word to read (0x000000 - 0x001FFF)

 * @data: word read from the Shadow RAM

 *

 * Reads one 16 bit word from the Shadow RAM using the AdminQ

/**

 * __i40e_read_nvm_word - Reads nvm word, assumes caller does the locking

 * @hw: pointer to the HW structure

 * @offset: offset of the Shadow RAM word to read (0x000000 - 0x001FFF)

 * @data: word read from the Shadow RAM

 *

 * Reads one 16 bit word from the Shadow RAM.

 *

 * Do not use this function except in cases where the nvm lock is already

 * taken via i40e_acquire_nvm().

/**

 * i40e_read_nvm_word - Reads nvm word and acquire lock if necessary

 * @hw: pointer to the HW structure

 * @offset: offset of the Shadow RAM word to read (0x000000 - 0x001FFF)

 * @data: word read from the Shadow RAM

 *

 * Reads one 16 bit word from the Shadow RAM.

/**

 * i40e_read_nvm_module_data - Reads NVM Buffer to specified memory location

 * @hw: Pointer to the HW structure

 * @module_ptr: Pointer to module in words with respect to NVM beginning

 * @module_offset: Offset in words from module start

 * @data_offset: Offset in words from reading data area start

 * @words_data_size: Words to read from NVM

 * @data_ptr: Pointer to memory location where resulting buffer will be stored

 Pointer not initialized */

 Check whether the module is in SR mapped area or outside */

 Pointer points outside of the Shared RAM mapped area */

 Read from the Shadow RAM */

/**

 * i40e_read_nvm_buffer_srctl - Reads Shadow RAM buffer via SRCTL register

 * @hw: pointer to the HW structure

 * @offset: offset of the Shadow RAM word to read (0x000000 - 0x001FFF).

 * @words: (in) number of words to read; (out) number of words actually read

 * @data: words read from the Shadow RAM

 *

 * Reads 16 bit words (data buffer) from the SR using the i40e_read_nvm_srrd()

 * method. The buffer read is preceded by the NVM ownership take

 * and followed by the release.

 Loop thru the selected region */

 Update the number of words read from the Shadow RAM */

/**

 * i40e_read_nvm_buffer_aq - Reads Shadow RAM buffer via AQ

 * @hw: pointer to the HW structure

 * @offset: offset of the Shadow RAM word to read (0x000000 - 0x001FFF).

 * @words: (in) number of words to read; (out) number of words actually read

 * @data: words read from the Shadow RAM

 *

 * Reads 16 bit words (data buffer) from the SR using the i40e_read_nvm_aq()

 * method. The buffer read is preceded by the NVM ownership take

 * and followed by the release.

		/* Calculate number of bytes we should read in this step.

		 * FVL AQ do not allow to read more than one page at a time or

		 * to cross page boundaries.

 Check if this is last command, if so set proper flag */

		/* Increment counter for words already read and move offset to

		 * new read location

/**

 * __i40e_read_nvm_buffer - Reads nvm buffer, caller must acquire lock

 * @hw: pointer to the HW structure

 * @offset: offset of the Shadow RAM word to read (0x000000 - 0x001FFF).

 * @words: (in) number of words to read; (out) number of words actually read

 * @data: words read from the Shadow RAM

 *

 * Reads 16 bit words (data buffer) from the SR using the i40e_read_nvm_srrd()

 * method.

/**

 * i40e_read_nvm_buffer - Reads Shadow RAM buffer and acquire lock if necessary

 * @hw: pointer to the HW structure

 * @offset: offset of the Shadow RAM word to read (0x000000 - 0x001FFF).

 * @words: (in) number of words to read; (out) number of words actually read

 * @data: words read from the Shadow RAM

 *

 * Reads 16 bit words (data buffer) from the SR using the i40e_read_nvm_srrd()

 * method. The buffer read is preceded by the NVM ownership take

 * and followed by the release.

/**

 * i40e_write_nvm_aq - Writes Shadow RAM.

 * @hw: pointer to the HW structure.

 * @module_pointer: module pointer location in words from the NVM beginning

 * @offset: offset in words from module start

 * @words: number of words to write

 * @data: buffer with words to write to the Shadow RAM

 * @last_command: tells the AdminQ that this is the last command

 *

 * Writes a 16 bit words buffer to the Shadow RAM using the admin command.

	/* Here we are checking the SR limit only for the flat memory model.

	 * We cannot do it for the module-based model, as we did not acquire

	 * the NVM resource yet (we cannot get the module pointer value).

	 * Firmware will check the module-based model.

 We can write only up to 4KB (one sector), in one AQ write */

 A single write cannot spread over two sectors */

bytes*/

bytes*/

/**

 * i40e_calc_nvm_checksum - Calculates and returns the checksum

 * @hw: pointer to hardware structure

 * @checksum: pointer to the checksum

 *

 * This function calculates SW Checksum that covers the whole 64kB shadow RAM

 * except the VPD and PCIe ALT Auto-load modules. The structure and size of VPD

 * is customer specific and unknown. Therefore, this function skips all maximum

 * possible size of VPD (1kB).

 read pointer to VPD area */

 read pointer to PCIe Alt Auto-load module */

	/* Calculate SW checksum that covers the whole 64kB shadow RAM

	 * except the VPD and PCIe ALT Auto-load modules

 Read SR page */

 Skip Checksum word */

 Skip VPD module (convert byte size to word count) */

 Skip PCIe ALT module (convert byte size to word count) */

/**

 * i40e_update_nvm_checksum - Updates the NVM checksum

 * @hw: pointer to hardware structure

 *

 * NVM ownership must be acquired before calling this function and released

 * on ARQ completion event reception by caller.

 * This function will commit SR to NVM.

/**

 * i40e_validate_nvm_checksum - Validate EEPROM checksum

 * @hw: pointer to hardware structure

 * @checksum: calculated checksum

 *

 * Performs checksum calculation and validates the NVM SW checksum. If the

 * caller does not need checksum, the value can be NULL.

	/* We must acquire the NVM lock in order to correctly synchronize the

	 * NVM accesses across multiple PFs. Without doing so it is possible

	 * for one of the PFs to read invalid data potentially indicating that

	 * the checksum is invalid.

	/* Verify read checksum from EEPROM is the same as

	 * calculated checksum

 If the user cares, return the calculated checksum */

/**

 * i40e_nvmupd_command - Process an NVM update command

 * @hw: pointer to hardware structure

 * @cmd: pointer to nvm update command

 * @bytes: pointer to the data buffer

 * @perrno: pointer to return error code

 *

 * Dispatches command depending on what update state is current

 assume success */

 early check for status command and debug msgs */

	/* a status request returns immediately rather than

	 * going into the state machine

 Clear error status on read */

 Clear status even it is not read and log */

	/* Acquire lock to prevent race condition where adminq_task

	 * can execute after i40e_nvmupd_nvm_read/write but before state

	 * variables (nvm_wait_opcode, nvm_release_on_done) are updated.

	 *

	 * During NVMUpdate, it is observed that lock could be held for

	 * ~5ms for most commands. However lock is held for ~60ms for

	 * NVMUPD_CSUM_LCB command.

		/* if we need to stop waiting for an event, clear

		 * the wait info and return before doing anything else

 invalid state, should never happen */

/**

 * i40e_nvmupd_state_init - Handle NVM update state Init

 * @hw: pointer to hardware structure

 * @cmd: pointer to nvm update command buffer

 * @bytes: pointer to the data buffer

 * @perrno: pointer to return error code

 *

 * Process legitimate commands of the Init state and conditionally set next

 * state. Reject all other commands.

/**

 * i40e_nvmupd_state_reading - Handle NVM update state Reading

 * @hw: pointer to hardware structure

 * @cmd: pointer to nvm update command buffer

 * @bytes: pointer to the data buffer

 * @perrno: pointer to return error code

 *

 * NVM ownership is already held.  Process legitimate commands and set any

 * change in state; reject all other commands.

/**

 * i40e_nvmupd_state_writing - Handle NVM update state Writing

 * @hw: pointer to hardware structure

 * @cmd: pointer to nvm update command buffer

 * @bytes: pointer to the data buffer

 * @perrno: pointer to return error code

 *

 * NVM ownership is already held.  Process legitimate commands and set any

 * change in state; reject all other commands

 Assumes the caller has acquired the nvm */

 Assumes the caller has acquired the nvm */

	/* In some circumstances, a multi-write transaction takes longer

	 * than the default 3 minute timeout on the write semaphore.  If

	 * the write failed with an EBUSY status, this is likely the problem,

	 * so here we try to reacquire the semaphore then retry the write.

	 * We only do one retry, then give up.

/**

 * i40e_nvmupd_clear_wait_state - clear wait state on hw

 * @hw: pointer to the hardware structure

/**

 * i40e_nvmupd_check_wait_event - handle NVM update operation events

 * @hw: pointer to the hardware structure

 * @opcode: the event that just happened

 * @desc: AdminQ descriptor

/**

 * i40e_nvmupd_validate_command - Validate given command

 * @hw: pointer to hardware structure

 * @cmd: pointer to nvm update command buffer

 * @perrno: pointer to return error code

 *

 * Return one of the valid command types or I40E_NVMUPD_INVALID

 anything that doesn't match a recognized case is an error */

 limits on data size */

/**

 * i40e_nvmupd_exec_aq - Run an AQ command

 * @hw: pointer to hardware structure

 * @cmd: pointer to nvm update command buffer

 * @bytes: pointer to the data buffer

 * @perrno: pointer to return error code

 *

 * cmd structure contains identifiers and data buffer

 get the aq descriptor */

 if data buffer needed, make sure it's ready */

 and away we go! */

 should we wait for a followup event? */

/**

 * i40e_nvmupd_get_aq_result - Get the results from the previous exec_aq

 * @hw: pointer to hardware structure

 * @cmd: pointer to nvm update command buffer

 * @bytes: pointer to the data buffer

 * @perrno: pointer to return error code

 *

 * cmd structure contains identifiers and data buffer

 check offset range */

 check copylength range */

/**

 * i40e_nvmupd_get_aq_event - Get the Admin Queue event from previous exec_aq

 * @hw: pointer to hardware structure

 * @cmd: pointer to nvm update command buffer

 * @bytes: pointer to the data buffer

 * @perrno: pointer to return error code

 *

 * cmd structure contains identifiers and data buffer

 check copylength range */

/**

 * i40e_nvmupd_nvm_read - Read NVM

 * @hw: pointer to hardware structure

 * @cmd: pointer to nvm update command buffer

 * @bytes: pointer to the data buffer

 * @perrno: pointer to return error code

 *

 * cmd structure contains identifiers and data buffer

/**

 * i40e_nvmupd_nvm_erase - Erase an NVM module

 * @hw: pointer to hardware structure

 * @cmd: pointer to nvm update command buffer

 * @perrno: pointer to return error code

 *

 * module, offset, data_size and data are in cmd structure

/**

 * i40e_nvmupd_nvm_write - Write NVM

 * @hw: pointer to hardware structure

 * @cmd: pointer to nvm update command buffer

 * @bytes: pointer to the data buffer

 * @perrno: pointer to return error code

 *

 * module, offset, data_size and data are in cmd structure

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2013 - 2018 Intel Corporation. */

/**

 * i40e_dbg_find_vsi - searches for the vsi with the given seid

 * @pf: the PF structure to search for the vsi

 * @seid: seid of the vsi it is searching for

/**

 * i40e_dbg_find_veb - searches for the veb with the given seid

 * @pf: the PF structure to search for the veb

 * @seid: seid of the veb it is searching for

/**************************************************************

 * command

 * The command entry in debugfs is for giving the driver commands

 * to be executed - these may be for changing the internal switch

 * setup, adding or removing filters, or other things.  Many of

 * these will be useful for some forms of unit testing.

/**

 * i40e_dbg_command_read - read for command datum

 * @filp: the opened file

 * @buffer: where to write the data for the user to read

 * @count: the size of the user's buffer

 * @ppos: file position offset

 don't allow partial reads */

/**

 * i40e_dbg_dump_vsi_seid - handles dump vsi seid write into command datum

 * @pf: the i40e_pf created in command write

 * @seid: the seid the user put in

/**

 * i40e_dbg_dump_aq_desc - handles dump aq_desc write into command datum

 * @pf: the i40e_pf created in command write

 first the send (command) ring, then the receive (event) ring */

/**

 * i40e_dbg_dump_desc - handles dump desc write into command datum

 * @cnt: number of arguments that the user supplied

 * @vsi_seid: vsi id entered by user

 * @ring_id: ring id entered by user

 * @desc_n: descriptor number entered by user

 * @pf: the i40e_pf created in command write

 * @type: enum describing whether ring is RX, TX or XDP

/**

 * i40e_dbg_dump_vsi_no_seid - handles dump vsi write into command datum

 * @pf: the i40e_pf created in command write

/**

 * i40e_dbg_dump_eth_stats - handles dump stats write into command datum

 * @pf: the i40e_pf created in command write

 * @estats: the eth stats structure to be dumped

/**

 * i40e_dbg_dump_veb_seid - handles dump stats of a single given veb

 * @pf: the i40e_pf created in command write

 * @seid: the seid the user put in

/**

 * i40e_dbg_dump_veb_all - dumps all known veb's stats

 * @pf: the i40e_pf created in command write

/**

 * i40e_dbg_dump_vf - dump VF info

 * @pf: the i40e_pf created in command write

 * @vf_id: the vf_id from the user

/**

 * i40e_dbg_dump_vf_all - dump VF info for all VFs

 * @pf: the i40e_pf created in command write

/**

 * i40e_dbg_command_write - write into command datum

 * @filp: the opened file

 * @buffer: where to find the user's data

 * @count: the length of the user's data

 * @ppos: file position offset

 don't allow partial writes */

 default to PF VSI */

		/* By default we are in VEPA mode, if this is the first VF/VMDq

		 * VSI to be added switch to VEB mode.

 find the veb */

 Peer TLV DCBX data */

 check the range on address */

 check the range on address */

 Just stub a buffer big enough in case user messed up */

 CONFIG_I40E_DCB */

 Continue and start FW LLDP anyways */

 CONFIG_I40E_DCB */

 set the max length */

 read at least 1k bytes, no more than 4kB */

/**************************************************************

 * netdev_ops

 * The netdev_ops entry in debugfs is for giving the driver commands

 * to be executed from the netdev operations.

/**

 * i40e_dbg_netdev_ops_read - read for netdev_ops datum

 * @filp: the opened file

 * @buffer: where to write the data for the user to read

 * @count: the size of the user's buffer

 * @ppos: file position offset

 don't allow partal reads */

/**

 * i40e_dbg_netdev_ops_write - write into netdev_ops datum

 * @filp: the opened file

 * @buffer: where to find the user's data

 * @count: the length of the user's data

 * @ppos: file position offset

 don't allow partial writes */

/**

 * i40e_dbg_pf_init - setup the debugfs directory for the PF

 * @pf: the PF that is starting up

/**

 * i40e_dbg_pf_exit - clear out the PF's debugfs entries

 * @pf: the PF that is stopping

/**

 * i40e_dbg_init - start up debugfs for the driver

/**

 * i40e_dbg_exit - clean out the driver's debugfs entries

 CONFIG_DEBUG_FS */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2013 - 2018 Intel Corporation. */

/**

 * i40e_ddp_profiles_eq - checks if DDP profiles are the equivalent

 * @a: new profile info

 * @b: old profile info

 *

 * checks if DDP profiles are the equivalent.

 * Returns true if profiles are the same.

/**

 * i40e_ddp_does_profile_exist - checks if DDP profile loaded already

 * @hw: HW data structure

 * @pinfo: DDP profile information structure

 *

 * checks if DDP profile loaded already.

 * Returns >0 if the profile exists.

 * Returns  0 if the profile is absent.

 * Returns <0 if error.

/**

 * i40e_ddp_profiles_overlap - checks if DDP profiles overlap.

 * @new: new profile info

 * @old: old profile info

 *

 * checks if DDP profiles overlap.

 * Returns true if profiles are overlap.

 0x00 group must be only the first */

 0xFF group is compatible with anything else */

 otherwise only profiles from the same group are compatible*/

/**

 * i40e_ddp_does_profile_overlap - checks if DDP overlaps with existing one.

 * @hw: HW data structure

 * @pinfo: DDP profile information structure

 *

 * checks if DDP profile overlaps with existing one.

 * Returns >0 if the profile overlaps.

 * Returns  0 if the profile is ok.

 * Returns <0 if error.

/**

 * i40e_add_pinfo

 * @hw: pointer to the hardware structure

 * @profile: pointer to the profile segment of the package

 * @profile_info_sec: buffer for information section

 * @track_id: package tracking id

 *

 * Register a profile to the list of loaded profiles.

 Clear reserved field */

/**

 * i40e_del_pinfo - delete DDP profile info from NIC

 * @hw: HW data structure

 * @profile: DDP profile segment to be deleted

 * @profile_info_sec: DDP profile section header

 * @track_id: track ID of the profile for deletion

 *

 * Removes DDP profile from the NIC.

 Clear reserved field */

/**

 * i40e_ddp_is_pkg_hdr_valid - performs basic pkg header integrity checks

 * @netdev: net device structure (for logging purposes)

 * @pkg_hdr: pointer to package header

 * @size_huge: size of the whole DDP profile package in size_t

 *

 * Checks correctness of pkg header: Version, size too big/small, and

 * all segment offsets alignment and boundaries. This function lets

 * reject non DDP profile file to be loaded by administrator mistake.

/**

 * i40e_ddp_load - performs DDP loading

 * @netdev: net device structure

 * @data: buffer containing recipe file

 * @size: size of the buffer

 * @is_add: true when loading profile, false when rolling back the previous one

 *

 * Checks correctness and loads DDP profile to the NIC. The function is

 * also used for rolling back previously loaded profile.

 Find beginning of segment data in buffer */

 Check if profile data already exists*/

 Load profile data */

 Add/remove profile to/from profile list in FW */

/**

 * i40e_ddp_restore - restore previously loaded profile and remove from list

 * @pf: PF data struct

 *

 * Restores previously loaded profile stored on the list in driver memory.

 * After rolling back removes entry from the list.

/**

 * i40e_ddp_flash - callback function for ethtool flash feature

 * @netdev: net device structure

 * @flash: kernel flash structure

 *

 * Ethtool callback function used for loading and unloading DDP profiles.

 Check for valid region first */

	/* If the user supplied "-" instead of file name rollback previously

	 * stored profile.

 Load DDP recipe. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	Driver for the Macintosh 68K onboard MACE controller with PSC

 *	driven DMA. The MACE driver code is derived from mace.c. The

 *	Mac68k theory of operation is courtesy of the MacBSD wizards.

 *

 *	Copyright (C) 1996 Paul Mackerras.

 *	Copyright (C) 1998 Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 *	Modified heavily by Joshua M. Thompson based on Dave Huang's NetBSD driver

 *

 *	Copyright (C) 2007 Finn Thain

 *

 *	Converted to DMA API, converted to unified driver model,

 *	sync'd some routines with mace.c and fixed various bugs.

 Chip rev needs workaround on HW & multicast addr change */

 The MACE is simply wired down on a Mac68K box */

 And frame continues.. */

/*

 * Load a receive DMA channel with a base address and ring length

/*

 * Reset the receive DMA subsystem

/*

 * Reset the transmit DMA subsystem

/*

 * Disable DMA

/*

 * Not really much of a probe. The hardware table tells us if this

 * model of Macintrash has a MACE (AV macintoshes)

	/*

	 * The PROM contains 8 bytes which total 0xFF when XOR'd

	 * together. Due to the usual peculiar apple brain damage

	 * the bytes are spaced out in a strange boundary and the

	 * bits are reversed.

/*

 * Reset the chip.

 soft-reset the chip */

 turn off tx, rx */

 disable all intrs for now */

 auto-pad short frames */

 load up the hardware address */

 clear the multicast filter */

 done changing address */

/*

 * Load the address on a mace controller.

 load up the hardware address */

/*

 * Open the Macintosh MACE. Most of this is playing with the DMA

 * engine. The ethernet chip is quite friendly.

 reset the chip */

 Allocate the DMA ring buffers */

 Not sure what these do */

 turn it on! */

 enable all interrupts except receive interrupts */

/*

 * Shut down the mace and its interrupt channel

 disable rx and tx	 */

 disable all irqs	 */

 disable rx and tx dma */

/*

 * Transmit a frame

 Stop the queue since there's only the one buffer */

 We need to copy into our xmit buffer to take care of alignment and caching issues */

 load the Tx DMA and fire it off */

 bit number in multicast_filter */

 reading clears it */

 reading clears it */

 don't want the dma interrupt handler to fire */

 read interrupt register */

			/*

			 * XXX mace likes to hang the machine after a xmtfs error.

			 * This is hard to reproduce, resetting *may* help

 dma should have finished */

 Update stats */

 turn off both tx and rx and reset the chip */

 restart rx dma */

 turn it on! */

 enable all interrupts except receive interrupts */

/*

 * Handle a newly arrived frame

/*

 * The PSC has passed us a DMA interrupt event.

 Not sure what this does */

	/*

	 * Process the read queue

 Loop through the ring buffer and process new packages */

 If we're out of buffers in this ring then switch to */

 the other set, otherwise just reactivate this one.  */

	/*

	 * Process the write queue

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Network device driver for the BMAC ethernet controller on

 * Apple Powermacs.  Assumes it's under a DBDMA controller.

 *

 * Copyright (C) 1998 Randy Gobbel.

 *

 * May 1999, Al Viro: proper release of /proc/net/bmac entry, switched to

 * dynamic procfs inode.

 switch to use multicast code lifted from sunhme driver */

 1 second */

 Bits in transmit DMA status */

 volatile struct bmac *bmac; */

 xmit dma command list */

 recv dma command list */

 Move that to ethtool */

/*

 * Number of bytes of private data per BMAC: allow enough for

 * the rx and tx dma commands plus a branch dma command each,

 * and another 16 bytes to allow us to align the dma command

 * buffers on a 16 byte boundary.

 XXDEBUG(("bmac: enter init_registers\n")); */

 wait for reset to clear..acknowledge */

 set collision counters to 0 */

 set rx counters to 0 */

 set tx fifo information */

 4 octets before tx starts */

 first disable txFIFO */

 set rx fifo information */

 first disable rxFIFO */

bmwrite(dev, TXCFG, TxMACEnable);	       	/* TxNeverGiveUp maybe later */

 read it just to clear it */

 zero out the chip Hash Filter registers */

 bits 15 - 0 */

 bits 31 - 16 */

 bits 47 - 32 */

 bits 63 - 48 */

 enable rx dma channel */

 turn on rx plus any other bits already on (promiscuous possibly) */

 prolly should wait for dma to finish & turn off the chip */

 disable all intrs */

 disable rx and tx dma */

 clear run bit */

 clear run bit */

 free some skb's */

 see if this is enough */

 CONFIG_PM */

 load up the hardware address */

 put a branch at the end of the tx command list */

 reset tx dma */

 initialize list of sk_buffs for receiving and set up recv dma */

 Put a branch back to the beginning of the receive command list */

 start rx dma */

 see if there's a free slot in the tx ring */

 XXDEBUG(("bmac_xmit_start: empty=%d fill=%d\n", */

 	     bp->tx_empty, bp->tx_fill)); */

 can't take it at the moment */

     del_timer(&bp->tx_timeout); */

     bp->timeout_active = 0; */

			/*

			 * status field might not have been filled by DBDMA

 Real fast bit-reversal algorithm, 6-bit values */

 Swap bytes */

 Compute bit-by-bit */

 is high CRC bit set? */

 do the XOR */

 address bits 47 - 32 */

 address bits 31 - 16 */

 address bits 15 - 0  */

/*

 * Add requested mcast addr to BMac's hash table filter.

 *

 Big-endian alert! */

 Hyperfast bit-reversing algorithm */

 This bit is already set */

 Now, delete the address from the filter copy, as indicated */

 Big-endian alert! */

 Hyperfast bit-reversing algorithm */

 That bit wasn't in use! */

 That bit is still in use */

 To turn off bit */

/*

 * Sync the adapter with the software copy of the multicast mask

 *  (logical address filter).

 first disable rxFIFO */

 bits 15 - 0 */

 bits 31 - 16 */

 bits 47 - 32 */

 bits 63 - 48 */

 XXDEBUG(("bmac: enter bmac_add_multi\n")); */

 XXDEBUG(("bmac: exit bmac_add_multi\n")); */

/* Set or clear the multicast filter for this adaptor.

    num_addrs == -1	Promiscuous mode, receive all packets

    num_addrs == 0	Normal mode, clear multicast list

    num_addrs > 0	Multicast mode, receive normal and MC packets, and do

			best-effort filtering.

 XXDEBUG(("bmac: exit bmac_set_multicast\n")); */

 ifdef SUNHME_MULTICAST */

 The version of set_multicast below was lifted from sunhme.c */

 SUNHME_MULTICAST */

 XXDEBUG(("bmac_misc_intr, status=%#08x\n", status)); */

     bmac_txdma_intr_inner(irq, dev_id); */

   if (status & FrameReceived) dev->stats.rx_dropped++; */

   if (status & FrameSent) dev->stats.tx_dropped++; */

/*

 * Procedure for reading EEPROM

 number of microseconds */

 this is in words */

 number of words to read from SROM */

 first reset */

 send it the read command (110) */

 send out the address we want to read from */

 Now read in the 16-bit data */

/*

 * It looks like Cogent and SMC use different methods for calculating

 * checksums. What a pain..

	/*

	 * It seems that the bmac can't receive until it's transmitted

	 * a packet.  So we give it a dummy packet to transmit.

 Enable chip without interrupts for now */

	/* Mask chip interrupts and disable chip, will be

	 * re-enabled on open()

 XXDEBUG(("bmac: enter open\n")); */

 reset the chip */

 disable rx and tx */

 disable all intrs */

 disable rx and tx dma */

 clear run bit */

 clear run bit */

 free some skb's */

 update various counters */

     	bmac_handle_misc_intrs(bp, 0); */

	XXDEBUG((KERN_DEBUG "bmac: tx dmastat=%x %x runt=%d pr=%x fs=%x fc=%x\n", */

 	   le32_to_cpu(td->status), le16_to_cpu(cp->xfer_status), bp->tx_bad_runt, */

 	   mb->pr, mb->xmtfs, mb->fifofc)); */

 turn off both tx and rx and reset the chip */

 restart rx dma */

 fix up the transmit side */

 	bmac_set_timeout(dev); */

 turn it back on */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Network device driver for the MACE ethernet controller on

 * Apple Powermacs.  Assumes it's under a DBDMA controller.

 *

 * Copyright (C) 1996 Paul Mackerras.

 dma commands per element in tx ring */

 1 second */

 Chip rev needs workaround on HW & multicast addr change */

 Bits in transmit DMA status */

 xmit dma command list */

 recv dma command list */

/*

 * Number of bytes of private data per MACE: allow enough for

 * the rx and tx dma commands plus a branch dma command each,

 * and another 16 bytes to allow us to align the dma command

 * buffers on a 16 byte boundary.

/*

 * If we can't get a skbuff when we need it, we use this area for DMA.

	/*

	 * lazy allocate the driver-wide dummy buffer. (Note that we

	 * never have more than one MACE in the system anyway)

 Apple Network Server uses the AAUI port */

	/*

	 * Most of what is below could be moved to mace_open()

    /*

     * Yes this looks peculiar, but apparently it needs to be this

     * way on some machines.

 soft-reset the chip */

 disable all intrs for now */

 turn off tx, rx */

 auto-pad short frames */

 load up the hardware address */

 clear the multicast filter */

 done changing address */

 load up the hardware address */

 note: setting ADDRCHG clears ENRCV */

 free some skb's */

 reset the chip */

 initialize list of sk_buffs for receiving and set up recv dma */

 so IP header lands on 4-byte bdry */

 Put a branch back to the beginning of the receive command list */

 start rx dma */

 clear run bit */

 put a branch at the end of the tx command list */

 reset tx dma */

 turn it on! */

 enable all interrupts except receive interrupts */

 disable rx and tx */

 disable all intrs */

 disable rx and tx dma */

 clear run bit */

 clear run bit */

 see if there's a free slot in the tx ring */

 can't take it at the moment */

 partially fill in the dma command block */

 poke the tx dma channel */

 bit number in multicast_filter */

 reset maccc */

 reading clears it */

 reading clears it */

 static int mace_last_fs, mace_last_xcount; */

 read interrupt register */

 get retries */

	/*

	 * Clear any interrupt indication associated with this status

	 * word.  This appears to unlatch any error indication from

	 * the DMA controller.

 stop DMA controller */

	/*

	 * xcount is the number of complete frames which have been

	 * written to the fifo but for which status has not been read.

	    /*

	     * If a packet was aborted before the DMA controller has

	     * finished transferring it, it seems that there are 2 bytes

	     * which are stuck in some buffer somewhere.  These will get

	     * transmitted as soon as we read the frame status (which

	     * reenables the transmit data transfer request).  Turning

	     * off the DMA controller and/or resetting the MACE doesn't

	     * help.  So we disable auto-padding and FCS transmission

	     * so the two bytes will only be a runt packet which should

	     * be ignored by other stations.

		/*

		 * XXX mace likes to hang the machine after a xmtfs error.

		 * This is hard to reproduce, resetting *may* help

	    /*

	     * Check whether there were in fact 2 bytes written to

	     * the transmit FIFO.

 there were two bytes with an end-of-packet indication */

		/*

		 * Either there weren't the two bytes buffered up, or they

		 * didn't have an end-of-packet indication.

		 * We flush the transmit FIFO just in case (by setting the

		 * XMTFWU bit with the transmitter disabled).

 dma should have finished */

 Update stats */

 set up the next one */

 update various counters */

 turn off both tx and rx and reset the chip */

 restart rx dma */

 fix up the transmit side */

 turn it back on */

 got a packet, have a look at it */

		/* Mace feature AUTO_STRIP_RCV is on by default, dropping the

		 * FCS on frames with 802.3 headers. This means that Ethernet

		 * frames have 8 extra octets at the end, while 802.3 frames

 802.3 header */

 Ethernet header; mace includes FCS */

 advance to next */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2007 PA Semi, Inc

 *

 * Driver for the PA Semi PWRficient onchip 1G/10G Ethernet MACs

/* We have our own align, since ppc64 in general has it at 0 because

 * of design flaws in some of the server bridge chips. However, for

 * PWRficient doing the unaligned copies is more expensive than doing

 * unaligned DMA, so make sure the data is aligned instead.

/* TODO list

 *

 * - Multicast support

 * - Large MTU support

 * - Multiqueue RX/TX

 -1 == use DEFAULT_MSG_ENABLE as value */

	/* IOFF contains the offset to the registers containing the

	 * DMA interface-to-MAC-pci-id mappings, and NIN contains number

	 * of total interfaces. Each register contains 4 devfns.

	 * Just do a linear search until we find the devfn of the MAC

	 * we're trying to look up.

	/* Some old versions of firmware mistakenly uses mac-address

	 * (and as a string) instead of a byte array in local-mac-address.

	/* Freed descriptor slot + main SKB ptr + nfrags additional ptrs,

	 * aligned up to a power of 2

 Allocate descriptors */

 enable channel */

 Allocate descriptors */

 Allocate descriptors */

 Compensate for when fill has wrapped and clean has not */

 Entry in use? */

	/* Re-enable packet count interrupts: finally

	 * ack the packet count interrupt we got in rx_intr.

 Re-enable packet count interrupts */

 CRC error flagged */

 No need to free skb, it'll be reused */

 Don't include CRC */

		/* Need to zero it out since hardware doesn't, since the

		 * replenish loop uses it to tell when it's done.

 Errata 5971 workaround: L2 target of headers */

	/* Increase is in number of 16-byte entries, and since each descriptor

	 * with an 8BRES takes up 3x8 bytes (padded to 4x8), increase with

	 * count*2.

 Can't make this too large or we blow the kernel stack limits */

 Compensate for when fill has wrapped but clean has not */

 Skip over control descriptors */

 Not yet transmitted */

		/* Since we always fill with an even number of entries, make

		 * sure we skip any unused one at the end as well.

 If the batch was full, try to clean more */

	/* Don't reset packet count so it won't fire again but clear

	 * all others.

		/* If no link, MAC speed settings don't matter. Just report

		 * link down and return.

 Print on link or speed/duplex change */

	/* We might already have allocated rings in case mtu was changed

	 * before interface was brought up.

 Zero out rmon counters */

 0x3ff with 33MHz clock is about 31us */

 enable rx if */

 enable rx channel */

 enable tx channel */

 Clear out any residual packet count state from firmware */

 Enable interface in MAC */

 Since we won't get link notification, just enable RX */

 Warn for missing PHY on SGMII (1Gig) ports */

 Clean out any pending buffers */

 Free resources */

 TCP checksum is 16 bytes into the header */

 UDP checksum is 6 bytes into the header */

 Do the checksum offloaded */

 Room for 8BRES. Checksum result is really 2 bytes into it */

 Copy the result into the TCP packet */

 Event handshaking with MAC TX */

 TX-side event handshaking */

	/* Avoid stepping on the same cache line that the DMA controller

	 * is currently about to send, so leave at least 8 words available.

	 * Total free space needed is mactx + fragments + 8

 no room -- stop the queue and wait for tx intr */

 Queue up checksum + event descriptors, if needed */

	/* We have to add an even number of 8-byte entries to the ring

	 * even if the last one is unused. That means always an odd number

	 * of pointers + one mactx descriptor.

 Set promiscuous */

 all done, no more packets present */

/*

 * Polling 'interrupt' - used by things like netconsole to send skbs

 * without having to re-enable interrupts. It's not called while

 * the interrupt routine is executing.

		/* Need to stop the interface, clean out all already

		 * received buffers, free all unused buffers on the RX

		 * interface ring, then finally re-fill the rx ring with

		 * the new-size buffers and restart.

 Setup checksum channels if large MTU and none already allocated */

	/* Change maxf, i.e. what size frames are accepted.

	 * Need room for ethernet header and CRC word

 MTU + ETH_HLEN + VLAN_HLEN + 2 64B cachelines */

 get mac addr from device tree */

 MTU range: 64 - 9000 */

 1500 MTU + ETH_HLEN + VLAN_HLEN + 2 64B cachelines */

 Enable most messages by default */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2008 PA Semi, Inc

 *

 * Ethtool hooks for the PA Semi PWRficient onchip 1G/10G Ethernet MACs

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005 - 2016 Broadcom

 * All rights reserved.

 *

 * Contact Information:

 * linux-drivers@emulex.com

 *

 * Emulex

 * 3333 Susan Street

 * Costa Mesa, CA 92626

	/* Received packets dropped when the Ethernet length field

	 * is not equal to the actual Ethernet data length.

	/* Received packets dropped when their length field is >= 1501 bytes

	 * and <= 1535 bytes.

 Received packets dropped when they are longer than 9216 bytes */

	/* Received packets dropped when they don't pass the unicast or

	 * multicast address filtering.

	/* Received packets dropped when IP packet length field is less than

	 * the IP header length field.

	/* Received packets dropped when IP length field is greater than

	 * the actual packet length.

	/* Received packets dropped when the IP header length field is less

	 * than 5.

	/* Received packets dropped when the TCP header length field is less

	 * than 5 or the TCP header length + IP header length is more

	 * than IP packet length.

	/* Number of received packets dropped when a fifo for descriptors going

	 * into the packet demux block overflows. In normal operation, this

	 * fifo must never overflow.

	/* Received packets dropped when the RX block runs out of space in

	 * one of its input FIFOs. This could happen due a long burst of

	 * minimum-sized (64b) frames in the receive path.

	 * This counter may also be erroneously incremented rarely.

	/* Received packets dropped when an internal fifo going into

	 * main packet buffer tank (PMEM) overflows.

	/* Received packets dropped due to lack of available HW packet buffers

	 * used to temporarily hold the received packets.

	/* Received packets dropped due to input receive buffer

	 * descriptor fifo overflowing.

	/* Packets dropped because the internal FIFO to the offloaded TCP

	 * receive processing block is full. This could happen only for

	 * offloaded iSCSI or FCoE trarffic.

	/* Received packets dropped when they need more than 8

	 * receive buffers. This cannot happen as the driver configures

	 * 2048 byte receive buffers.

	/* Received packets dropped when the frame length

	 * is more than 9018 bytes

 Number of dma mapping errors */

 Number of packets dropped due to random early drop function */

/* Stats related to multi RX queues: get_stats routine assumes bytes, pkts

 * are first and second members respectively.

 If moving this member see above note */

 If moving this member see above note */

	/* Number of page allocation failures while posting receive buffers

	 * to HW.

 Recevied packets dropped due to skb allocation failure */

	/* Received packets dropped due to lack of available fetched buffers

	 * posted by the driver.

/* Stats related to multi TX queues: get_stats routine assumes compl is the

 * first member

 If moving this member see above note */

	/* This counter is incremented when the HW encounters an error while

	 * parsing the packet header of an outgoing TX request. This counter is

	 * applicable only for BE2, BE3 and Skyhawk based adapters.

	/* This counter is incremented when an error occurs in the DMA

	 * operation associated with the TX request from the host to the device.

	/* This counter is incremented when MAC or VLAN spoof checking is

	 * enabled on the interface and the TX request fails the spoof check

	 * in HW.

	/* This counter is incremented when the HW encounters an error while

	 * performing TSO offload. This counter is applicable only for Lancer

	 * adapters.

	/* This counter is incremented when the HW detects Q-in-Q style VLAN

	 * tagging in a packet and such tagging is not expected on the outgoing

	 * interface. This counter is applicable only for Lancer adapters.

	/* This counter is incremented when the HW detects parity errors in the

	 * packet data. This counter is applicable only for Lancer adapters.

 Number of skbs queued for trasmission by the driver */

	/* Number of times the TX queue was stopped due to lack

	 * of spaces in the TXQ.

 Pkts dropped in the driver's transmit path */

 data_offset and data_size should be 0 to get reg len */

/* TX attributes are ignored. Only RX attributes are considered

 * eqd cmd is issued in the worker thread.

	/* For Skyhawk, the EQD setting happens via EQ_DB when AIC is enabled.

	 * When AIC is disabled, persistently force set EQD value via the

	 * FW cmd, so that we don't have to calculate the delay multiplier

	 * encode value each time EQ_DB is rung

 Save for future use */

 cycle on/off once per second */

 check link status before offline tests */

 link status was down prior to test */

 FW dump is enabled */

 num_tx_qs is always same as the number of irqs used for TX */

 The user must create atleast one combined channel */

	/* we support either only combined channels or a combination of

	 * combined and either RX-only or TX-only channels.

 We do not allow change in unsupported parameters */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005 - 2016 Broadcom

 * All rights reserved.

 *

 * Contact Information:

 * linux-drivers@emulex.com

 *

 * Emulex

 * 3333 Susan Street

 * Costa Mesa, CA 92626

/* num_vfs module param is obsolete.

 * Use sysfs method to enable/disable VFs.

/* Per-module error detection/recovery workq shared across all functions.

 * Each function schedules its own work request on this shared workq.

 CONFIG_BE2NET_BE2 */

 CONFIG_BE2NET_BE3 */

 CONFIG_BE2NET_LANCER */

 CONFIG_BE2NET_SKYHAWK */

 Workqueue used by all functions for defering cmd calls to the adapter */

 UE Status Low CSR */

 UE Status High CSR */

 On lancer interrupts can't be controlled via this register */

 Check if mac has already been added as part of uc-list */

 mac already added, skip addition */

	/* Skip deletion if the programmed mac is

	 * being used in uc-list

	/* Proceed further only if, User provided MAC is different

	 * from active MAC

	/* BE3 VFs without FILTMGMT privilege are not allowed to set its MAC

	 * address

 if device is not running, copy MAC to netdev->dev_addr */

	/* The PMAC_ADD cmd may fail if the VF doesn't have FILTMGMT

	 * privilege or if PF did not provision the new MAC address.

	 * On BE3, this cmd will always fail if the VF doesn't have the

	 * FILTMGMT privilege. This failure is OK, only if the PF programmed

	 * the MAC for the VF.

		/* Delete the old programmed MAC. This call may fail if the

		 * old MAC was already deleted by the PF driver.

	/* Decide if the new MAC is successfully activated only after

	 * querying the FW

	/* The MAC change did not happen, either due to lack of privilege

	 * or PF didn't pre-provision.

 Remember currently programmed MAC */

 BE2 supports only v0 cmd */

 BE2 supports only v0 cmd */

		/* below erx HW counter can actually wrap around after

		 * 65535. Driver accumulates a 32-bit value

 for BE3 */

 erx_v2 is longer than v0, v1. use v2 for v0, v1 access */

 bad pkts received */

 detailed rx errors */

 frame alignment errors */

 receiver fifo overrun */

 drops_no_pbuf is no per i/f, it's per BE card */

 Account for headers which get duplicated in TSO pkt */

 Returns number of WRBs needed for the skb */

 +1 for the header wrb */

/* A dummy wrb is just all zeros. Using a separate routine for dummy-wrb

 * to avoid the swap and shift/mask operations in wrb_fill().

 If vlan priority provided by OS is NOT in available bmap */

 Used only for IP tunnel packets */

	/* Hack to skip HW VLAN tagging needs evt = 1, compl = 0. When this

	 * hack is not needed, the evt bit is set while ringing DB.

 Grab a WRB header for xmit */

 Set up the WRB header for xmit */

 Setup a WRB fragment (buffer descriptor) for xmit */

/* Bring the queue back to the state it was in before be_xmit_enqueue() routine

 * was invoked. The producer index is restored to the previous packet and the

 * WRBs of the current packet are unmapped. Invoked to handle tx setup errors.

 skip the first wrb (hdr); it's not mapped */

/* Enqueue the given packet for transmit. This routine allocates WRBs for the

 * packet, dma maps the packet buffers and sets up the WRBs. Returns the number

 * of WRBs used up by the packet.

		/* f/w workaround to set skip_hw_vlan = 1, informs the F/W to

		 * skip VLAN insertion

 Insert the outer VLAN, if any */

 offending pkt: 2nd byte following IPv6 hdr is 0xff */

	/* For padded packets, BE HW modifies tot_len field in IP header

	 * incorrecly when VLAN tag is inserted by HW.

	 * For padded packets, Lancer computes incorrect checksum.

	/* If vlan tag is already inlined in the packet, skip HW VLAN

	 * tagging in pvid-tagging mode

	/* HW has a bug wherein it will calculate CSUM for VLAN

	 * pkts even though it is disabled.

	 * Manually insert VLAN in pkt.

	/* HW may lockup when VLAN HW tagging is requested on

	 * certain ipv6 packets. Drop such pkts if the HW workaround to

	 * skip HW tagging is not enabled by FW.

	/* Manual VLAN tag insertion to prevent:

	 * ASIC lockup when the ASIC inserts VLAN tag into

	 * certain ipv6 packets. Insert VLAN tags in driver,

	 * and set event, completion, vlan bits accordingly

	 * in the Tx WRB.

	/* Lancer, SH and BE3 in SRIOV mode have a bug wherein

	 * packets that are 32b or less may cause a transmit stall

	 * on that port. The workaround is to pad such packets

	 * (len <= 32 bytes) to a minimum length of 36b.

	/* The stack can send us skbs with length greater than

	 * what the HW can handle. Trim the extra bytes.

 Mark the last request eventable if it hasn't been marked already */

 compose a dummy wrb if there are odd set of wrbs to notify */

 OS2BMC related */

	/* For packets over a vlan, which are destined

	 * to BMC, asic expects the vlan to be inline in the packet.

	/* if os2bmc is enabled and if the pkt is destined to bmc,

	 * enqueue the pkt a 2nd time with mgmt bit set.

 Flush the already enqueued tx requests */

/*

 * A max of 64 (BE_NUM_VLANS_SUPPORTED) vlans can be configured in BE.

 * If the user configures more, place BE in vlan promiscuous mode.

 No need to change the VLAN state if the I/F is in promiscuous */

 Construct VLAN Table to give to HW */

 Set to VLAN promisc mode as setting VLAN filter failed */

 Packets with VID 0 are always received by Lancer by default */

 Packets with VID 0 are always received by Lancer by default */

/* The below 2 functions are the callback args for __dev_mc_sync/dev_uc_sync().

 * We use a single callback function for both sync and unsync. We really don't

 * add/remove addresses through this callback. But, we use it to detect changes

 * to the uc/mc lists. The entire uc/mc list is programmed in be_set_rx_mode().

		/* Enable multicast promisc if num configured exceeds

		 * what we support

		/* Update mc-list unconditionally if the iface was previously

		 * in mc-promisc mode and now is out of that mode.

 cache the mc-list in adapter */

		/* Update uc-list unconditionally if the iface was previously

		 * in uc-promisc mode and now is out of that mode.

 cache the uc-list in adapter array */

		/* We need to re-program the vlan-list or clear

		 * vlan-promisc mode (if needed) when the interface

		 * comes out of promisc mode.

	/* Proceed further only if user provided MAC is different

	 * from active MAC

 Enable Transparent VLAN Tagging */

 Clear pre-programmed VLAN filters on VF if any, if TVT is enabled */

 After TVT is enabled, disallow VFs to program VLAN filters */

 Reset Transparent VLAN Tagging. */

 Allow VFs to program VLAN filtering */

 On Skyhawk the QOS setting must be done only as a % value */

 Skip, if wrapped around or first calculation */

 For Skyhawk-R only */

	/* L4 checksum is not reliable for non TCP/UDP packets.

	 * Also ignore ipcksm for ipv6 pkts

 Throwaway the data in the Rx completion */

/*

 * skb_fill_rx_data forms a complete skb for an ether frame

 * indicated by rxcp.

 Copy data in the first descriptor of this completion */

 tiny packet */

 Complete packet has now been moved to data */

 More frags present for this completion */

 Coalesce all frags from the same physical page in one slot */

 Fresh page */

 Process the RX completion indicated by rxcp when GRO is disabled */

 Process the RX completion indicated by rxcp when GRO is enabled */

 Coalesce all frags from the same physical page in one slot */

 First frag or Fresh page */

	/* For checking the valid bit it is Ok to use either definition as the

		/* In QNQ modes, if qnq bit is not set, then the packet was

		 * tagged only with the transparent outer vlan-tag and must

		 * not be treated as a vlan packet by host

 As the compl has been parsed, reset it; we wont touch it again */

/*

 * Allocate a page, split it to fragments of size rx_frag_size and post as

 * receive buffers to BE

 Any space left in the current big page for another frag? */

	/* Mark the last frag of a page when we break out of the above loop

	 * with no more slots available in the RXQ

 Let be_worker replenish when memory is available */

 Ensure load ordering of valid bit dword and other dwords below */

			/* Reset the adapter incase of TSO,

			 * SGE or Parity error

 Free skb from prev req */

 skip hdr wrb */

 Return the number of events in the event queue */

 Leaves the EQ is disarmed state */

 Free posted rx buffers that were not used */

	/* Consume pending rx completions.

	 * Wait for the flush completion (identified by zero num_rcvd)

	 * to arrive. Notify CQ even when there are no more CQ entries

	 * for HW to flush partially coalesced CQ entries.

	 * In Lancer, there is no need to wait for flush compl.

 After cleanup, leave the CQ in unarmed state */

 Stop polling for compls when HW has been silent for 10ms */

 Free enqueued TX that was never notified to HW */

			/* Use the tx-compl process logic to handle requests

			 * that were not sent to the HW.

			/* Since hw was never notified of these requests,

			 * reset TXQ indices

 need enough EQs to service both RX and TX queues */

 Must be called only after TX qs are created as MCC shares TX EQ */

 Use the default EQ for MCC completions */

		/* If num_evt_qs is less than num_tx_qs, then more than

		 * one txq share an eq

 We'll use RSS only if atleast 2 RSS rings are supported. */

	/* When the interface is not capable of RSS rings (and there is no

	 * need to create a default RXQ) we'll still need one RXQ

	/* IRQ is not expected when NAPI is scheduled as the EQ

	 * will not be armed.

	 * But, this can happen on Lancer INTx where it takes

	 * a while to de-assert INTx or in BE2 where occasionaly

	 * an interrupt may be raised even when EQ is unarmed.

	 * If NAPI is already scheduled, then counting & notifying

	 * events will orphan them.

	/* Return IRQ_HANDLED only for the the first spurious intr

	 * after a valid intr to stop the kernel from branding

	 * this irq as a bad one!

 Is it a flush compl that has no data */

 Discard compl with partial DMA Lancer B0 */

		/* On BE drop pkts that arrive due to imperfect filtering in

		 * promiscuous mode on some skews

		/* When an rx-obj gets into post_starved state, just

		 * let be_worker do the posting.

		/* As Tx wrbs have been freed up, wake up netdev queue

	/* This loop will iterate twice for EQ0 in which

	 * completions of the last RXQ (default one) are also processed

	 * For other EQs the loop iterates only once

		/* Skyhawk EQ_DB has a provision to set the rearm to interrupt

		 * delay via a delay multiplier encoding value

 As we'll continue in polling mode, count and clear events */

 Do not log error messages if its a FW reset */

			/* On certain platforms BE3 hardware can indicate

			 * spurious UEs. In case of a UE in the chip,

			 * the POST register correctly reports either a

			 * FAT_LOG_START state (FW is currently dumping

			 * FAT log data) or a ARMFW_UE state. Check for the

			 * above states to ascertain if the UE is valid or not.

	/* If RoCE is supported, program the max number of vectors that

	 * could be used for NIC and RoCE, else, just program the number

	 * we'll use initially.

 INTx is not supported in VFs, so fail probe if enable_msix fails */

 INTx is not supported for VF */

 INTx: only the first EQ is used */

 INTx */

 MSIx */

			/* If RXQs are destroyed while in an "out of buffer"

			 * state, there is a possibility of an HW stall on

			 * Lancer. So, post 64 buffers to each queue to relieve

			 * the "out of buffer" condition.

			 * Make sure there's space in the RXQ before posting.

 Don't delete MAC on BE3 VFs without FILTMGMT privilege  */

	/* The IFACE flags are enabled in the open path and cleared

	 * in the close path. When a VF gets detached from the host and

	 * assigned to a VM the following happens:

	 *	- VF's IFACE flags get cleared in the detach path

	 *	- IFACE create is issued by the VF in the attach path

	 * Due to a bug in the BE3/Skyhawk-R FW

	 * (Lancer FW doesn't have the bug), the IFACE capability flags

	 * specified along with the IFACE create cmd issued by a VF are not

	 * honoured by FW.  As a consequence, if a *new* driver

	 * (that enables/disables IFACE flags in open/close)

	 * is loaded in the host and an *old* driver is * used by a VM/VF,

	 * the IFACE gets created *without* the needed flags.

	 * To avoid this, disable RX-filter flags only for Lancer.

	/* This protection is needed as be_close() may be called even when the

	 * adapter is in cleared state (after eeh perm failure)

	/* Before attempting cleanup ensure all the pending cmds in the

	 * config_wq have finished execution

	/* Wait for all pending tx completions to arrive so that

	 * all tx skbs are freed.

 Disable RSS, if only default RX Q is created */

	/* Post 1 less than RXQ-len to avoid head being equal to tail,

	 * which is a queue empty condition

	/* Normally this condition usually true as the ->dev_mac is zeroed.

	 * But on BE3 VFs the initial MAC is pre-programmed by PF and

	 * subsequent be_dev_mac_add() can fail (after fresh boot)

 Remember old programmed MAC if any - can happen on BE3 VF */

		/* Delete the old programmed MAC as we successfully programmed

		 * a new MAC

 Use the OUI from the current MAC address */

/*

 * Generate a seed MAC address from the PF MAC Address using jhash.

 * MAC Address for VFs are assigned incrementally starting from the seed.

 * These addresses are programmed in the ASIC by the PF and the VF driver

 * queries for the MAC address during its probe.

/* VxLAN offload Notes:

 *

 * The stack defines tunnel offload flags (hw_enc_features) for IP and doesn't

 * distinguish various types of transports (VxLAN, GRE, NVGRE ..). So, offload

 * is expected to work across all types of IP tunnels once exported. Skyhawk

 * supports offloads for either VxLAN or NVGRE, exclusively. So we export VxLAN

 * offloads in hw_enc_features only when a VxLAN port is added. If other (non

 * VxLAN) tunnels are configured while VxLAN offloads are enabled, offloads for

 * those other tunnels are unexported on the fly through ndo_features_check().

 Distribute the queue resources among the PF and it's VFs */

		/* Divide the rx queues evenly among the VFs and the PF, capped

		 * at VF-EQ-count. Any remainder queues belong to the PF.

		/* Skyhawk-R chip supports only MAX_PORT_RSS_TABLES

		 * RSS Tables per port. Provide RSS on VFs, only if number of

		 * VFs requested is less than it's PF Pool's RSS Tables limit.

	/* Resource with fields set to all '1's by GET_PROFILE_CONFIG cmd,

	 * which are modifiable using SET_PROFILE_CONFIG cmd.

	/* If RSS IFACE capability flags are modifiable for a VF, set the

	 * capability flag as valid and set RSS and DEFQ_RSS IFACE flags if

	 * more than 1 RSSQ is available for a VF.

	 * Otherwise, provision only 1 queue pair for VF.

	/* Distribute unicast MACs, VLANs, IFACE count and MCCQ count equally

	 * among the PF and it's VFs, if the fields are changeable

	/* Re-configure FW to distribute resources evenly across max-supported

	 * number of VFs, only when VFs are not already enabled.

 If a FW profile exists, then cap_flags are updated */

				/* Prevent VFs from enabling VLAN promiscuous

				 * mode

 PF should enable IF flags during proxy if_create call */

 Allow VFs to programs MAC/VLAN filters */

 Allow full available bandwidth */

 On BE3, enable VEB only when SRIOV is enabled */

 Converting function_mode bits on BE3 to SH mc_type enums */

 On BE2/BE3 FW does not suggest the supported limits */

		/* Assuming that there are 4 channels per port,

		 * when multi-channel is enabled

			/* In a non-qnq multichannel mode, the pvid

			 * takes up one vlan entry

	/* 1) For BE3 1Gb ports, FW does not support multiple TXQs

	 * 2) Create multiple TX rings on a BE3-R multi-channel interface

	 *    *only* if it is RSS-capable.

		/* On a SuperNIC profile, the driver needs to use the

		 * GET_PROFILE_CONFIG cmd to query the per-function TXQ limits

 Some old versions of BE3 FW don't report max_tx_qs value */

/* HW supports only MAX_PORT_RSS_TABLES RSS Policy Tables per port.

 * However, this HW limitation is not exposed to the host via any SLI cmd.

 * As a result, in the case of SRIOV and in particular multi-partition configs

 * the driver needs to calcuate a proportional share of RSS Tables per PF-pool

 * for distribution between the VFs. This self-imposed limit will determine the

 * no: of VFs for which RSS can be enabled.

	/* Each PF Pool's RSS Tables limit =

	 * PF's Max VFs / Total_Max_VFs on Port * RSS Tables on Port

 Some old versions of BE3 FW don't report max_vfs value */

	/* If during previous unload of the driver, the VFs were not disabled,

	 * then we cannot rely on the PF POOL limits for the TotalVFs value.

	 * Instead use the TotalVFs value stored in the pci-dev struct.

	/* When the HW is in SRIOV capable configuration, the PF-pool

	 * resources are given to PF during driver load, if there are no

	 * old VFs. This facility is not available in BE3 FW.

	 * Also, this is done by FW in Lancer chip.

	/* For Lancer, SH etc read per-function resource limits from FW.

	 * GET_FUNC_CONFIG returns per function guaranteed limits.

	 * GET_PROFILE_CONFIG returns PCI-E related limits PF-pool limits

 If a deafault RXQ must be created, we'll use up one RSSQ*/

 If RoCE is supported stash away half the EQs for RoCE */

	/* If FW supports RSS default queue, then skip creating non-RSS

	 * queue for non-IP traffic.

 Ensure RX and TX queues are created in pairs at init time */

 Initial MAC for BE3 VFs is already programmed by PF */

 alloc required memory for other filtering fields */

 will enable all the needed filter flags in be_open() */

		/* be_tx_timeout() must not run concurrently with this

		 * function, synchronize with an already-running dev_watchdog

 device cannot transmit now, avoid dev_watchdog timeouts */

	/* If any vectors have been shared with RoCE we cannot re-program

	 * the MSIx table.

	/* The IF was destroyed and re-created. We need to clear

	 * all promiscuous flags valid for the destroyed IF.

	 * Without this promisc mode is not restored during

	 * be_open() because the driver thinks that it is

	 * already enabled in HW.

/* If it is error recovery, FLR the PF

 * Else if any VFs are already enabled don't FLR the PF

 Wait for the FW to be ready and perform the required initialization */

 FW is now ready; clear errors to allow cmds/doorbell */

 Wait for interrupts to quiesce after an FLR */

 Tell FW we're ready to fire cmds */

 Allow interrupts for other ULPs running on NIC function */

	/* invoke this cmd first to get pf_num and vf_num which are needed

	 * for issuing profile related cmds

 will enable all the needed filter flags in be_open() */

 Updating real_num_tx/rx_queues() requires rtnl_lock() */

	/* BE3 EVB echoes broadcast/multicast packets back to PF's vport

	 * confusing a linux bridge or OVS that it might be connected to.

	 * Set the EVB to PASSTHRU mode which effectively disables the EVB

	 * when SRIOV is not enabled.

 BE and Lancer chips support VEB mode only */

 VEB is disabled in non-SR-IOV profiles on BE3/Lancer */

		/* IPv6 TSO requests with extension hdrs are a problem

		 * to Lancer and BE3 HW. Disable TSO6 feature.

		/* Lancer cannot handle the packet with MSS less than 256.

		 * Also it can't handle a TSO packet with a single segment

		 * Disable the GSO support in such cases

	/* The code below restricts offload features for some tunneled and

	 * Q-in-Q packets.

	 * Offload features for normal (non tunnel) packets are unchanged.

	/* It's an encapsulated packet and VxLAN offloads are enabled. We

	 * should disable tunnel offload features if it's not a VxLAN packet,

	 * as tunnel offloads have been enabled only for VxLAN. This is done to

	 * allow other tunneled traffic like GRE work fine while VxLAN

	 * offloads are configured in Skyhawk-R.

 MTU range: 256 - 9000 */

		/* Only PF0 initiates Chip Soft Reset. But PF0 must wait UE2SR

		 * milliseconds before it checks for final error status in

		 * SLIPORT_SEMAPHORE to determine if recovery criteria is met.

		 * If it does, then PF0 initiates a Soft Reset.

 done */

	/* Wait for adapter to reach quiescent state before

	 * destroying queues

 BEx/SH recovery state machine */

		/* For VFs, check if PF have allocated resources

		 * every second.

		/* In case of another error during recovery, it takes 30 sec

		 * for adapter to come out of error. Retry error recovery after

		 * this time interval.

	/* when interrupts are not yet enabled, just reap any pending

	 * mcc completions

		/* Replenish RX-queues starved due to memory

		 * allocation failures.

 EQ-delay update for Skyhawk is done while notifying EQ */

 PCICFG is the 2nd BAR in BE2 */

 Allocate and initialize various fields in be_adapter struct */

 Must be a power of 2 or else MODULO will BUG_ON */

 tell fw we're done with firing cmds */

 Unit: millidegree Celsius */

 default */

 On Die temperature not supported for VF. */

/*

 * An FLR will stop BE from DMAing any data.

	/* The error could cause the FW to trigger a flash debug dump.

	 * Resetting the card while flash dump is in progress

	 * can cause it not to recover; wait for it to finish.

	 * Wait only for first function as it is needed only once per

	 * adapter.

 Check if card is ok and fw is ready */

	/* When the HW is in SRIOV capable configuration, the PF-pool resources

	 * are equally distributed across the max-number of VFs. The user may

	 * request only a subset of the max-vfs to be enabled.

	 * Based on num_vfs, redistribute the resources across num_vfs so that

	 * each VF will have access to more number of resources.

	 * This facility is not available in BE3 FW.

	 * Also, this is done by FW in Lancer chip.

 Updating real_num_tx/rx_queues() requires rtnl_lock() */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005 - 2016 Broadcom

 * All rights reserved.

 *

 * Contact Information:

 * linux-drivers@emulex.com

 *

 * Emulex

 * 3333 Susan Street

 * Costa Mesa, CA 92626

/* To check if valid bit is set, check the entire word as we don't know

 * the endianness of the data (old entry is host endian while a new entry is

 Need to reset the entire word that houses the valid bit */

/* Place holder for all the async MCC cmds wherein the caller is not in a busy

 * loop (has not issued be_mcc_notify_wait())

	/* Just swap the status to host endian; mcc tag is opaquely copied

 Link state evt is a string of bytes; no need for endian swapping */

 When link status changes, link speed must be re-queried from FW */

	/* On BEx the FW does not send a separate link status

	 * notification for physical and logical link.

	 * On other chips just process the logical link

	 * status notification

	/* For the initial link status do not rely on the ASYNC event as

	 * it may not be received in some cases.

 for older fw that doesn't populate link effect data */

	/* Log an error message that would allow a user to determine

	 * whether the SFPs have an issue

 Log Vendor name and part no. if a misconfigured SFP is detected */

 Grp5 CoS Priority evt */

 Grp5 QOS Speed evt: qos_link_speed is in units of 10 Mbps */

Grp5 PVID evt*/

 Async event to disable/enable os2bmc and/or mac-learning */

 Wait till no more pending mcc requests are present */

 12s timeout */

 Notify MCC requests and wait for completion */

/*

 * Insert the mailbox address into the doorbell in two steps

 * Polls on the mbox doorbell till a command completion (or a timeout) occurs

 wait for ready to be set */

 at bits 2 - 31 place mbox dma addr msb bits 34 - 63 */

 wait for ready to be set */

 at bits 2 - 31 place mbox dma addr lsb bits 4 - 33 */

 A cq entry has been made now */

 There's no means to poll POST state on BE2/3 VFs */

 Don't touch the hdr after it's prepared */

 mem will be NULL for embedded commands */

 Must be used only in process context */

 Must be used only in process context */

 Must be used only in process context */

/* Tell fw we're about to start firing cmds by writing a

 * special pattern across the wrb hdr; uses mbox

/* Tell fw we're done with firing cmds by writing a

 * special pattern across the wrb hdr; uses mbox

 Support for EQ_CREATEv2 available only SH-R onwards */

 4byte eqe*/

 Use MCC */

 Uses synchronous MCCQ */

 Uses synchronous MCCQ */

 Uses Mbox */

 1 for 4K */

		/* coalesce-wm field in this cmd is not relevant to Lancer.

		 * Lancer uses COMMON_MODIFY_CQ to set this field

 log2(len) + 1 */

	/* Subscribe to Link State, Sliport Event and Group 5 Events

	 * (bits 1, 5 and 17 set)

 For SH */

 Uses MCC */

/* Generic destroyer function for all types of queues

 * Uses Mbox

 Uses MCC */

/* Create an rx filtering policy configuration on an i/f

 * Will use MBOX only if MCCQ has not been created.

 Hack to retrieve VF's pmac-id on BE3 */

 Uses MCCQ if available else MBOX */

/* Get stats is a non embedded command: the request is not embedded inside

 * WRB but is a separate dma memory block

 * Uses asynchronous MCC

 version 1 of the cmd is not supported only by BE2 */

 Lancer Stats */

/* Uses synchronous mcc

 * Returns link_speed in Mbps

 version 1 of the cmd is not supported only by BE2 */

 Uses synchronous mcc */

 Uses synchronous mcc */

 Uses synchronous mcc */

/* set the EQ delay interval of an EQ to specified value

 * Uses async mcc

 Uses sycnhronous mcc */

		/* Reset mcast promisc mode if already set by setting mask

		 * and not setting flags field

 Uses synchrounous mcc */

 Uses sycn mcc */

 Uses mbox */

 Uses mbox */

 Uses sync mcc */

 Uses sync mcc */

 Uses sync mcc */

 Skip flashing, if crc of flashed region matches */

 Min ver that supports NCSI FW */

 For BE2, BE3 and BE3-R */

 Get flash section info*/

		/* Don't bother verifying CRC if an old FW image is being

		 * flashed

			/* The current FW image on the card does not support

			 * OFFSET based flashing. Retry using older mechanism

			 * of OPTYPE based flashing

			/* The current FW image on the card does not recognize

			 * the new FLASH op_type. The FW download is partially

			 * complete. Reboot the server now to enable FW image

			 * to recognize the new FLASH op_type. To complete the

			 * remaining process, download the same FW again after

			 * the reboot.

		/* The current FW image on the card does not support OFFSET

		 * based flashing. Retry using older mechanism of OPTYPE based

		 * flashing

		/* For old FW images ignore ILLEGAL_FIELD error or errors on

		 * UFI_DIR region

 Copy the image chunk content. */

 Commit the FW written */

/* Check if the flash image file is compatible with the adapter that

 * is being flashed.

	/* First letter of the build version is used to identify

	 * which chip this image file is meant for.

	/* In BE3 FW images the "asic_type_rev" field doesn't track the

	 * asic_rev of the chips it is compatible with.

	 * When asic_type_rev is 0 the image is compatible only with

	 * pre-BE3-R chips (asic_rev < 0x10)

		/* For BEx, since GET_FUNC_CONFIG command is not

		 * supported, we read funcnum here as a workaround.

 Uses mbox */

 Get privilege(s) for a function */

		/* In UMC mode FW does not return right privileges.

		 * Override with correct privilege equivalent to PF.

 Set privilege(s) for a function */

/* pmac_id_valid: true => pmac_id is supplied and MAC address is requested.

 * pmac_id_valid: false => pmac_id or MAC address is requested.

 *		  If pmac_id is returned, pmac_id_valid is returned as true

		/* Mac list returned could contain one or more active mac_ids

		 * or one or more true or pseudo permanent mac addresses.

		 * If an active mac_id is present, return first active mac_id

		 * found.

			/* mac_id is a 32 bit value and mac_addr size

			 * is 6 bytes

 If no active mac_id found, return first mac addr */

 Fetch the MAC address using pmac_id */

 Uses synchronous MCCQ */

/* Wrapper to delete any active MACs and provision the new mac.

 * Changes to MAC_LIST are allowed iff none of the MAC addresses in the

 * current list are active.

 Enable/disable both mac and vlan spoof checking */

 Get Hyper switch config */

 Non-zero macaddr indicates WOL is enabled */

/* When more than 1 NIC descriptor is present in the descriptor list,

 * the caller must specify the pf_num to obtain the NIC descriptor

 * corresponding to its pci function.

 * get_vft must be true when the caller wants the VF-template desc of the

 * PF-pool.

 * The pf_num should be set to PF_NUM_IGNORE when the caller knows

 * that only it's NIC descriptor is present in the descriptor list.

 Clear flags that driver is not interested in */

 Uses Mbox */

		/* GET_FUNC_CONFIG returns resource descriptors of the

		 * current function only. So, pf_num should be set to

		 * PF_NUM_IGNORE.

 Store pf_num & vf_num for later use in GET_PROFILE_CONFIG */

 This routine returns a list of all the NIC PF_nums in the adapter */

 Will use MBOX only if MCCQ has not been created */

	/* When QUERY_MODIFIABLE_FIELDS_TYPE bit is set, cmd returns the

	 * descriptors with all bits set to "1" for the fields which can be

	 * modified using SET_PROFILE_CONFIG cmd.

 Will use MBOX only if MCCQ has not been created */

 Mark all fields invalid */

 Mark all fields invalid */

 PF PCIE descriptor */

 VF NIC Template descriptor */

 Routine to check whether dump image is present or not */

 give firmware reset and diagnostic dump */

 Uses sync mcc */

 Uses MBOX */

	/* Version 2 of the command will not be recognized by older FW.

	 * On such a failure issue version 1 of the command.

	/* Checking "MCC_STATUS_INVALID_LENGTH" for SKH as FW

	 * returns this error in older firmware versions

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005 - 2016 Broadcom

 * All rights reserved.

 *

 * Contact Information:

 * linux-drivers@emulex.com

 *

 * Emulex

 * 3333 Susan Street

 * Costa Mesa, CA 92626

 only msix is supported on these devices */

 DPP region address and length */

		/* provide all the vectors, so that EQ creation response

		 * can decide which one to use.

		/* provide start index of the vector,

		 * so in case of linear usage,

		 * it can use the base as starting point.

		/* invoke add() routine of roce driver only if

		 * valid driver registered with add method and add() is not yet

		 * invoked on a given adapter.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  PS3 gelic network driver.

 *

 * Copyright (C) 2007 Sony Computer Entertainment Inc.

 * Copyright 2006, 2007 Sony Corporation

 *

 * This file is based on: spider_net.c

 *

 * (C) Copyright IBM Corp. 2005

 *

 * Authors : Utz Bacher <utz.bacher@de.ibm.com>

 *           Jens Osterkamp <Jens.Osterkamp@de.ibm.com>

 set irq_mask */

/**

 * gelic_descr_get_status -- returns the status of a descriptor

 * @descr: descriptor to look at

 *

 * returns the status as in the dmac_cmd_status field of the descriptor

/**

 * gelic_card_disable_txdmac - disables the transmit DMA controller

 * @card: card structure

 *

 * gelic_card_disable_txdmac terminates processing on the DMA controller by

 * turing off DMA and issuing a force end

 this hvc blocks until the DMA in progress really stopped */

/**

 * gelic_card_enable_rxdmac - enables the receive DMA controller

 * @card: card structure

 *

 * gelic_card_enable_rxdmac enables the DMA controller by setting RX_DMA_EN

 * in the GDADMACCNTR register

/**

 * gelic_card_disable_rxdmac - disables the receive DMA controller

 * @card: card structure

 *

 * gelic_card_disable_rxdmac terminates processing on the DMA controller by

 * turing off DMA and issuing a force end

 this hvc blocks until the DMA in progress really stopped */

/**

 * gelic_descr_set_status -- sets the status of a descriptor

 * @descr: descriptor to change

 * @status: status to set in the descriptor

 *

 * changes the status to the specified value. Doesn't change other bits

 * in the status

	/*

	 * dma_cmd_status field is used to indicate whether the descriptor

	 * is valid or not.

	 * Usually caller of this function wants to inform that to the

	 * hardware, so we assure here the hardware sees the change.

/**

 * gelic_card_reset_chain - reset status of a descriptor chain

 * @card: card structure

 * @chain: address of chain

 * @start_descr: address of descriptor array

 *

 * Reset the status of dma descriptors to ready state

 * and re-initialize the hardware chain for later use

 enable irq */

 start rx */

		/*

		 * Disable irq. Wireless interrupts will

		 * be disabled later if any

 stop rx */

 stop tx */

/**

 * gelic_card_free_chain - free descriptor chain

 * @card: card structure

 * @descr_in: address of desc

/**

 * gelic_card_init_chain - links descriptor chain

 * @card: card structure

 * @chain: address of chain

 * @start_descr: address of descriptor array

 * @no: number of descriptors

 *

 * we manage a circular list that mirrors the hardware structure,

 * except that the hardware uses bus addresses.

 *

 * returns 0 on success, <0 on failure

 set up the hardware pointers in each descriptor */

 make them as ring */

 chain bus addr of hw descriptor */

 do not chain last hw descriptor */

/**

 * gelic_descr_prepare_rx - reinitializes a rx descriptor

 * @card: card structure

 * @descr: descriptor to re-init

 *

 * return 0 on success, <0 on failure

 *

 * allocates a new rx skb, iommu-maps it and attaches it to the descriptor.

 * Activate the descriptor state-wise

 we need to round up the buffer size to a multiple of 128 */

	/* and we need to have it 128 byte aligned, therefore we allocate a

 tell DMAC don't touch memory */

 io-mmu-map the skb */

/**

 * gelic_card_release_rx_chain - free all skb of rx descr

 * @card: card structure

 *

/**

 * gelic_card_fill_rx_chain - fills descriptors/skbs in the rx chains

 * @card: card structure

 *

 * fills all descriptors in the rx chain: allocates skbs

 * and iommu-maps them.

 * returns 0 on success, < 0 on failure

/**

 * gelic_card_alloc_rx_skbs - allocates rx skbs in rx descriptor chains

 * @card: card structure

 *

 * returns 0 on success, < 0 on failure

 point to the last */

/**

 * gelic_descr_release_tx - processes a used tx descriptor

 * @card: card structure

 * @descr: descriptor to release

 *

 * releases a used tx descriptor (unmapping, freeing of skb)

 set descr status */

/**

 * gelic_card_release_tx_chain - processes sent tx descriptors

 * @card: adapter structure

 * @stop: net_stop sequence

 *

 * releases the tx descriptors that gelic has finished with

 pending tx request */

 any other value (== GELIC_DESCR_DMA_NOT_IN_USE) */

/**

 * gelic_net_set_multi - sets multicast addresses and promisc flags

 * @netdev: interface device structure

 *

 * gelic_net_set_multi configures multicast addresses as needed for the

 * netdev interface. It also sets up multicast, allmulti and promisc

 * flags appropriately

 clear all multicast address */

 set broadcast address */

 set multicast addresses */

/**

 * gelic_net_stop - called upon ifconfig down

 * @netdev: interface device structure

 *

 * always returns 0

/**

 * gelic_card_get_next_tx_descr - returns the next available tx descriptor

 * @card: device structure to get descriptor from

 *

 * returns the address of the next descriptor, or NULL if not available.

  see if the next descriptor is free */

/**

 * gelic_net_set_txdescr_cmdstat - sets the tx descriptor command field

 * @descr: descriptor structure to fill out

 * @skb: packet to consider

 *

 * fills out the command and status field of the descriptor structure,

 * depending on hardware checksum settings. This function assumes a wmb()

 * has executed before.

		/* is packet ip?

			else	/*

				 * the stack should checksum non-tcp and non-udp

				 * packets on his own: NETIF_F_IP_CSUM

 Move the mac addresses to the top of buffer */

/**

 * gelic_descr_prepare_tx - setup a descriptor for sending packets

 * @card: card structure

 * @descr: descriptor structure

 * @skb: packet to use

 *

 * returns 0 on success, <0 on failure.

 *

 terminate hw descr */

 bump free descriptor pointer */

/**

 * gelic_card_kick_txdma - enables TX DMA processing

 * @card: card structure

 * @descr: descriptor address to enable TX processing at

 *

/**

 * gelic_net_xmit - transmits a frame over the device

 * @skb: packet to send out

 * @netdev: interface device structure

 *

 * returns NETDEV_TX_OK on success, NETDEV_TX_BUSY on failure

		/*

		 * no more descriptors free

		/*

		 * DMA map failed.  As chances are that failure

		 * would continue, just release skb and return

	/*

	 * link this prepared descriptor to previous one

	 * to achieve high performance

	/*

	 * as hardware descriptor is modified in the above lines,

	 * ensure that the hardware sees it

		/*

		 * kick failed.

		 * release descriptor which was just prepared

 don't trigger BUG_ON() in gelic_descr_release_tx */

 reset head */

 reset hw termination */

/**

 * gelic_net_pass_skb_up - takes an skb from a descriptor and passes it on

 * @descr: descriptor to process

 * @card: card structure

 * @netdev: net_device structure to be passed packet

 *

 * iommu-unmaps the skb, fills out skb structure and passes the data to the

 * stack. The descriptor state is not changed.

 unmap skb buffer */

	/*

	 * the card put 2 bytes vlan tag in front

	 * of the ethernet frame

 checksum offload */

 update netdevice statistics */

 pass skb up to stack */

/**

 * gelic_card_decode_one_descr - processes an rx descriptor

 * @card: card structure

 *

 * returns 1 if a packet has been sent to the stack, otherwise 0

 *

 * processes an rx descriptor by iommu-unmapping the data buffer and passing

 * the packet up to the stack

 netdevice select */

		/*

		 * Buffer full would occur if and only if

		 * the frame length was longer than the size of this

		 * descriptor's buffer.  If the frame length was equal

		 * to or shorter than buffer'size, FRAME_END condition

		 * would occur.

		 * Anyway this frame was longer than the MTU,

		 * just drop it.

	/*

	 * descriptors any other than FRAME_END here should

	 * be treated as error.

 ok, we've got a packet in descr */

 is the current descriptor terminated with next_descr == NULL? */

	/*

	 * So that always DMAC can see the end

	 * of the descriptor chain to avoid

	 * from unwanted DMAC overrun.

 change the descriptor state: */

	/*

	 * this call can fail, but for now, just leave this

	 * descriptor without skb

	/*

	 * Set this descriptor the end of the chain.

	/*

	 * If dmac chain was met, DMAC stopped.

	 * thus re-enable it

/**

 * gelic_net_poll - NAPI poll function called by the stack to return packets

 * @napi: napi structure

 * @budget: number of packets we can pass to the stack at most

 *

 * returns the number of the processed packets

 *

/*

 * gelic_card_interrupt - event handler for gelic_net

 kick outstanding tx descriptor if any */

 ether port status changed */

/**

 * gelic_net_poll_controller - artificial interrupt for netconsole etc.

 * @netdev: interface device structure

 *

 * see Documentation/networking/netconsole.rst

 CONFIG_NET_POLL_CONTROLLER */

/**

 * gelic_net_open - called upon ifconfig up

 * @netdev: interface device structure

 *

 * returns 0 on success, <0 on failure

 *

 * gelic_net_open allocates all the descriptors and memory needed for

 * operation, sets up multicast list and enables interrupts

/**

 * gelic_net_tx_timeout_task - task scheduled by the watchdog timeout

 * function (to be called not under interrupt status)

 * @work: work is context of tx timout task

 *

 * called as task when tx hangs, resets interface (if interface is up)

/**

 * gelic_net_tx_timeout - called when the tx timeout watchdog kicks in.

 * @netdev: interface device structure

 * @txqueue: unused

 *

 * called, if tx hangs. Schedules a task that resets the interface

/**

 * gelic_ether_setup_netdev_ops - initialization of net_device operations

 * @netdev: net_device structure

 * @napi: napi structure

 *

 * fills out function pointers in the net_device structure

 NAPI */

/**

 * gelic_ether_setup_netdev - initialization of net_device

 * @netdev: net_device structure

 * @card: card structure

 *

 * Returns 0 on success or <0 on failure

 *

 * gelic_ether_setup_netdev initializes the net_device structure

 * and register it.

		/*

		 * As vlan is internally used,

		 * we can not receive vlan packets

 MTU range: 64 - 1518 */

/**

 * gelic_alloc_card_net - allocates net_device and card structure

 *

 * returns the card structure or NULL in case of errors

 *

 * the card and net_device structures are linked to each other

	/*

	 * gelic requires dma descriptor is 32 bytes aligned and

	 * the hypervisor requires irq_status is 8 bytes aligned.

	/*

	 * alloc netdev

 gelic_port */

 gelic_card */

 tx tag */

 rx tag */

 check wirelss capable firmware */

/*

 * ps3_gelic_driver_probe - add a device to the control of this driver

 alloc card/netdevice */

 get internal vlan info */

 setup interrupt */

 setup card structure */

 head of chain */

 allocate rx skbs */

 setup net_device structure */

/*

 * ps3_gelic_driver_remove - remove a device from the control of this driver

 set auto-negotiation */

 stop interrupt */

 turn off DMA, force end */

 release chains */

 disconnect event port */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 gelic network driver.

 *

 * Copyright (C) 2007 Sony Computer Entertainment Inc.

 * Copyright 2007 Sony Corporation

/*

 * tables

 802.11b/g channel to freq in MHz */

 in bps */

/*

 * wpa2 support requires the hypervisor version 2.0 or later

/*

 * post_eurus_cmd helpers

 command requires arg1, arg2 at POST COMMAND */

 command requires arg1, arg2 at GET_RESULT */

 synchronously do eurus commands */

 allocate cmd */

 initialize members */

 wait for command completion */

/*

 * wireless extension handlers and helpers

 SIOGIWNAME */

 some fw versions may return error */

 11 ch */

 16 bits of MSB has available channels */

 SIOGIWRANGE */

 available channels and frequencies */

 bitrates */

 signal levels */

 relative value */

 Event capability */

 encryption capability */

 40bit WEP */

 104bit WEP */

 WPA-PSK */

 scan capability */

 SIOC{G,S}IWSCAN */

/*

 * synthesize WPA/RSN IE data

 * See WiFi WPA specification and IEEE 802.11-2007 7.3.2.25

 * for the format

 WEP or none.  No IE returned */

 element id */

 length filed; set later */

 wpa special header */

 version */

 version 1.0 */

 group cipher */

 CCMP */

 TKIP */

 pairwise key count always 1 */

 pairwise key suit */

 CCMP */

 TKIP */

 AKM count is 1 */

 AKM suite is assumed as PSK*/

 PSK */

 RSN capabilities is 0 */

 set length field */

 length includes the header */

/*

 * translate the scan informations from hypervisor to a

 * independent format

 arbitrary size large enough */

 first entry should be AP's mac address */

 ESSID */

 FREQUENCY */

 table value in MHz */

 RATES */

 to stuff multiple values in one event */

 put them in ascendant order (older is first) */

 500kbps unit */

 Check if we added any rate */

 ENCODE */

 MODE */

 QUAL */

 RSN */

 If wpa[2] capable station, synthesize IE and put it */

 this scan info has IE data */

 If a scan in progress, caller should call me again */

 last scan request failed or never issued */

 ok, use current list */

 -- */

			/*

			 * As the hypervisor may not tell the cipher

			 * information of the AP if it is WPA2,

			 * you will not decide suitable cipher from

			 * its beacon.

			 * You should have knowledge about the AP's

			 * cipher information in other method prior to

			 * the association.

 SIOC{S,G}IWESSID */

 FIXME */

 SIO{S,G}IWENCODE */

 if just IW_ENCODE_NOKEY, change current key index */

 disable encryption */

 invalidate all key */

 SIOC{S,G}IWAP */

 SIOC{S,G}IWENCODEEXT */

 reques to change default key index */

 should be open */

 OK, update the key */

 remember wep info changed */

 remember PSK configured */

 SIOC{S,G}IWMODE */

 SIOCGIWNICKN */

 --- */

 not associated */

/*

 *  scanning helpers

	/*

	 * If already a scan in progress, do not trigger more

	/*

	 * If we have already a bss list, don't try to get new

	 * unless we are doing an ESSID scan

 ESSID scan ? */

 hypervisor always requires 32 */

	/*

	 * issue start scan request

/*

 * retrieve scan result from the chip (hypervisor)

 * this function is invoked by schedule work.

		/*

		 * stop() may be called while scanning, ignore result

 OK, bss list retrieved */

 mark all entries are old */

 expire too old entries */

 put them in the network_list */

		/*

		 * The wireless firmware may return invalid channel 0 and/or

		 * invalid rate if the AP emits zero length SSID ie. As this

		 * scan information is useless, ignore it

 not found in the list */

 expire oldest */

 update the item */

 copy hw scan info */

/*

 * Select an appropriate bss from current scan list regarding

 * current settings from userspace.

 * The caller must hold wl->scan_lock,

 * and on the state of wl->scan_state == GELIC_WL_SCAN_GOT_LIST

 If bss specified, check it only */

 security */

 If ESSID is set, check it */

/*

 * Setup WEP configuration to the chip

 * The caller must hold wl->scan_lock,

 * and on the state of wl->scan_state == GELIC_WL_SCAN_GOT_LIST

 we can assume no one should uses the buffer */

 issue wep setup */

 we can assume no one should uses the buffer */

 copy key */

 set security level */

 PSK type */

	/*

	 * don't enable here if you plan to submit

	 * the debug log because this dumps your precious

	 * passphrase/key.

 issue wpa setup */

/*

 * Start association. caller must hold assoc_stat_lock

 do common config */

 WEP/WPA */

 If WEP or no security, setup WEP config */

 start association */

 wait for connected event */

FIXME*/

 timeouted.  Maybe key or cyrpt mode is wrong */

 copy bssid */

 send connect event */

/*

 * connected event

/*

 * disconnect event

	/*

	 * If we fall here in the middle of association,

	 * associate_bss() should be waiting for complation of

	 * wl->assoc_done.

	 * As it waits with timeout, just leave assoc_done

	 * uncompleted, then it terminates with timeout

 send disconnected event to the supplicant */

/*

 * event worker

 got all events */

 while */

/*

 * association worker

FIXME*/

	/*

	 * Wait for bss scan completion

	 * If we have scan list already, gelic_wl_start_scan()

	 * returns OK and raises the complete.  Thus,

	 * it's ok to wait unconditionally here

 find best matching bss */

 ok, do association */

/*

 * Interrupt handler

 * Called from the ethernet interrupt handler

 * Processes wireless specific virtual interrupts only

/*

 * driver helpers

 allocate scan list */

 for the case that no scan request is issued and stop() is called */

 FIXME */

 buffer for receiving scanned list etc */

 check constraits for start association */

 for no access restriction AP */

 for WEP, one of four keys should be set */

 one of keys set */

 for WPA[2], psk should be set */

/*

 * netdev handlers

 try to associate */

/*

 * reset state machine

 empty scan list */

 clear configuration */

 all status bit clear */

/*

 * Tell eurus to terminate association

	/*

	 * If scann process is running on chip,

	 * further requests will be rejected

	/*

	 * Cancel pending association work.

	 * event work can run after netdev down

 reset our state machine */

 -- */

/*

 * driver probe/remove

 alloc netdevice for wireless */

 setup net_device structure */

 setup some of net_device and register it */

 add enable wireless interrupt */

 to allow wireless commands while both interfaces are down */

 if the interface was not up, but associated */

 cancel all work queue */

 disable wireless interrupt */

 free bss list, netdev*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Network device driver for Cell Processor-Based Blade

 *

 * (C) Copyright IBM Corp. 2005

 *

 * Authors : Utz Bacher <utz.bacher@de.ibm.com>

 *           Jens Osterkamp <Jens.Osterkamp@de.ibm.com>

 clear and fill out info */

 no support for wol */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Network device driver for Cell Processor-Based Blade and Celleb platform

 *

 * (C) Copyright IBM Corp. 2005

 * (C) Copyright 2006 TOSHIBA CORPORATION

 *

 * Authors : Utz Bacher <utz.bacher@de.ibm.com>

 *           Jens Osterkamp <Jens.Osterkamp@de.ibm.com>

/**

 * spider_net_read_reg - reads an SMMIO register of a card

 * @card: device structure

 * @reg: register to read from

 *

 * returns the content of the specified SMMIO register.

	/* We use the powerpc specific variants instead of readl_be() because

	 * we know spidernet is not a real PCI device and we can thus avoid the

	 * performance hit caused by the PCI workarounds.

/**

 * spider_net_write_reg - writes to an SMMIO register of a card

 * @card: device structure

 * @reg: register to write to

 * @value: value to write into the specified SMMIO register

	/* We use the powerpc specific variants instead of writel_be() because

	 * we know spidernet is not a real PCI device and we can thus avoid the

	 * performance hit caused by the PCI workarounds.

/**

 * spider_net_write_phy - write to phy register

 * @netdev: adapter to be written to

 * @mii_id: id of MII

 * @reg: PHY register

 * @val: value to be written to phy register

 *

 * spider_net_write_phy_register writes to an arbitrary PHY

 * register via the spider GPCWOPCMD register. We assume the queue does

 * not run full (not more than 15 commands outstanding).

/**

 * spider_net_read_phy - read from phy register

 * @netdev: network device to be read from

 * @mii_id: id of MII

 * @reg: PHY register

 *

 * Returns value read from PHY register

 *

 * spider_net_write_phy reads from an arbitrary PHY

 * register via the spider GPCROPCMD register

	/* we don't use semaphores to wait for an SPIDER_NET_GPROPCMPINT

	 * interrupt, as we poll for the completion of the read operation

	 * in spider_net_read_phy. Should take about 50 us

/**

 * spider_net_setup_aneg - initial auto-negotiation setup

 * @card: device structure

/**

 * spider_net_rx_irq_off - switch off rx irq on this spider card

 * @card: device structure

 *

 * switches off rx irq by masking them out in the GHIINTnMSK register

/**

 * spider_net_rx_irq_on - switch on rx irq on this spider card

 * @card: device structure

 *

 * switches on rx irq by enabling them in the GHIINTnMSK register

/**

 * spider_net_set_promisc - sets the unicast address or the promiscuous mode

 * @card: card structure

 *

 * spider_net_set_promisc sets the unicast destination address filter and

 * thus either allows for non-promisc mode or promisc mode

 clear destination entry 0 */

/**

 * spider_net_get_descr_status -- returns the status of a descriptor

 * @hwdescr: descriptor to look at

 *

 * returns the status as in the dmac_cmd_status field of the descriptor

/**

 * spider_net_free_chain - free descriptor chain

 * @card: card structure

 * @chain: address of chain

 *

/**

 * spider_net_init_chain - alloc and link descriptor chain

 * @card: card structure

 * @chain: address of chain

 *

 * We manage a circular list that mirrors the hardware structure,

 * except that the hardware uses bus addresses.

 *

 * Returns 0 on success, <0 on failure

 Set up the hardware pointers in each descriptor */

 do actual circular list */

/**

 * spider_net_free_rx_chain_contents - frees descr contents in rx chain

 * @card: card structure

 *

 * returns 0 on success, <0 on failure

/**

 * spider_net_prepare_rx_descr - Reinitialize RX descriptor

 * @card: card structure

 * @descr: descriptor to re-init

 *

 * Return 0 on success, <0 on failure.

 *

 * Allocates a new rx skb, iommu-maps it and attaches it to the

 * descriptor. Mark the descriptor as activated, ready-to-use.

 we need to round up the buffer size to a multiple of 128 */

	/* and we need to have it 128 byte aligned, therefore we allocate a

	 * bit more

 allocate an skb */

 iommu-map the skb */

/**

 * spider_net_enable_rxchtails - sets RX dmac chain tail addresses

 * @card: card structure

 *

 * spider_net_enable_rxchtails sets the RX DMAC chain tail addresses in the

 * chip by writing to the appropriate register. DMA is enabled in

 * spider_net_enable_rxdmac.

 assume chain is aligned correctly */

/**

 * spider_net_enable_rxdmac - enables a receive DMA controller

 * @card: card structure

 *

 * spider_net_enable_rxdmac enables the DMA controller by setting RX_DMA_EN

 * in the GDADMACCNTR register

/**

 * spider_net_disable_rxdmac - disables the receive DMA controller

 * @card: card structure

 *

 * spider_net_disable_rxdmac terminates processing on the DMA controller

 * by turing off the DMA controller, with the force-end flag set.

/**

 * spider_net_refill_rx_chain - refills descriptors/skbs in the rx chains

 * @card: card structure

 *

 * refills descriptors in the rx chain: allocates skbs and iommu-maps them.

	/* one context doing the refill (and a second context seeing that

	 * and omitting it) is ok. If called by NAPI, we'll be called again

	 * as spider_net_decode_one_descr is called several times. If some

	 * interrupt calls us, the NAPI is about to clean up anyway.

/**

 * spider_net_alloc_rx_skbs - Allocates rx skbs in rx descriptor chains

 * @card: card structure

 *

 * Returns 0 on success, <0 on failure.

 Link up the hardware chain pointers */

	/* Put at least one buffer into the chain. if this fails,

	 * we've got a problem. If not, spider_net_refill_rx_chain

	 * will do the rest at the end of this function.

	/* This will allocate the rest of the rx buffers;

	 * if not, it's business as usual later on.

/**

 * spider_net_get_multicast_hash - generates hash for multicast filter table

 * @netdev: interface device structure

 * @addr: multicast address

 *

 * returns the hash value.

 *

 * spider_net_get_multicast_hash calculates a hash value for a given multicast

 * address, that is used to set the multicast filter tables

/**

 * spider_net_set_multi - sets multicast addresses and promisc flags

 * @netdev: interface device structure

 *

 * spider_net_set_multi configures multicast addresses as needed for the

 * netdev interface. It also sets up multicast, allmulti and promisc

 * flags appropriately

	/* well, we know, what the broadcast hash value is: it's xfd

/**

 * spider_net_prepare_tx_descr - fill tx descriptor with skb data

 * @card: card structure

 * @skb: packet to use

 *

 * returns 0 on success, <0 on failure.

 *

 * fills out the descriptor structure with skb data and len. Copies data,

 * if needed (32bit DMA!)

 Chain the bus address, so that the DMA engine finds this descr. */

 set netdev watchdog timer */

	/* Measure the length of the queue. Measurement does not

	 * need to be precise -- does not need a lock.

 If TX queue is short, don't even bother with interrupts */

 Set low-watermark 3/4th's of the way into the queue. */

 Set the new watermark, clear the old watermark */

/**

 * spider_net_release_tx_chain - processes sent tx descriptors

 * @card: adapter structure

 * @brutal: if set, don't care about whether descriptor seems to be in use

 *

 * returns 0 if the tx ring is empty, otherwise 1.

 *

 * spider_net_release_tx_chain releases the tx descriptors that spider has

 * finished with (if non-brutal) or simply release tx descriptors (if brutal).

 * If some other context is calling this function, we return 1 so that we're

 * scheduled again (if we were scheduled) and will not lose initiative.

			/* fallthrough, if we release the descriptors

			 * brutally (then we don't care about

			 * SPIDER_NET_DESCR_CARDOWNED)

 unmap the skb */

/**

 * spider_net_kick_tx_dma - enables TX DMA processing

 * @card: card structure

 *

 * This routine will start the transmit DMA running if

 * it is not already running. This routine ned only be

 * called when queueing a new packet to an empty tx queue.

 * Writes the current tx chain head as start address

 * of the tx descriptor chain and enables the transmission

 * DMA engine.

/**

 * spider_net_xmit - transmits a frame over the device

 * @skb: packet to send out

 * @netdev: interface device structure

 *

 * returns NETDEV_TX_OK on success, NETDEV_TX_BUSY on failure

/**

 * spider_net_cleanup_tx_ring - cleans up the TX ring

 * @t: timer context used to obtain the pointer to net card data structure

 *

 * spider_net_cleanup_tx_ring is called by either the tx_timer

 * or from the NAPI polling routine.

 * This routine releases resources associted with transmitted

 * packets, including updating the queue tail pointer.

/**

 * spider_net_do_ioctl - called for device ioctls

 * @netdev: interface device structure

 * @ifr: request parameter structure for ioctl

 * @cmd: command code for ioctl

 *

 * returns 0 on success, <0 on failure. Currently, we have no special ioctls.

 * -EOPNOTSUPP is returned, if an unknown ioctl was requested

/**

 * spider_net_pass_skb_up - takes an skb from a descriptor and passes it on

 * @descr: descriptor to process

 * @card: card structure

 *

 * Fills out skb structure and passes the data to the stack.

 * The descriptor state is not changed.

	/* the card seems to add 2 bytes of junk in front

	 * of the ethernet frame

 checksum offload */

 further enhancements: HW-accel VLAN */

 update netdevice statistics */

 pass skb up to stack */

 Now dump the whole ring */

/**

 * spider_net_resync_head_ptr - Advance head ptr past empty descrs

 * @card: card structure

 *

 * If the driver fails to keep up and empty the queue, then the

 * hardware wil run out of room to put incoming packets. This

 * will cause the hardware to skip descrs that are full (instead

 * of halting/retrying). Thus, once the driver runs, it wil need

 * to "catch up" to where the hardware chain pointer is at.

 Advance head pointer past any empty descrs */

 Advance tail pointer past any empty and reaped descrs */

/**

 * spider_net_decode_one_descr - processes an RX descriptor

 * @card: card structure

 *

 * Returns 1 if a packet has been sent to the stack, otherwise 0.

 *

 * Processes an RX descriptor by iommu-unmapping the data buffer

 * and passing the packet up to the stack. This function is called

 * in softirq context, e.g. either bottom half from interrupt or

 * NAPI polling context.

 Nothing in the descriptor, or ring must be empty */

 descriptor definitively used -- move on tail */

 unmap descriptor */

 The cases we'll throw away the packet immediately */

 Ok, we've got a packet in descr */

/**

 * spider_net_poll - NAPI poll function called by the stack to return packets

 * @napi: napi device structure

 * @budget: number of packets we can pass to the stack at most

 *

 * returns 0 if no more packets available to the driver/stack. Returns 1,

 * if the quota is exceeded, but the driver has still packets.

 *

 * spider_net_poll returns all packets from the rx descriptors to the stack

 * (using netif_receive_skb). If all/enough packets are up, the driver

 * reenables interrupts and returns 0. If not, 1 is returned.

 if all packets are in the stack, enable interrupts and return 0 */

 if not, return 1 */

/**

 * spider_net_set_mac - sets the MAC of an interface

 * @netdev: interface device structure

 * @p: pointer to new MAC address

 *

 * Returns 0 on success, <0 on failure. Currently, we don't support this

 * and will always return EOPNOTSUPP.

 switch off GMACTPE and GMACRPE */

 write mac */

 switch GMACTPE and GMACRPE back on */

/**

 * spider_net_link_reset

 * @netdev: net device structure

 *

 * This is called when the PHY_LINK signal is asserted. For the blade this is

 * not connected so we should never get here.

 *

 clear interrupt, block further interrupts */

 reset phy and setup aneg */

/**

 * spider_net_handle_error_irq - handles errors raised by an interrupt

 * @card: card structure

 * @status_reg: interrupt status register 0 (GHIINT0STS)

 * @error_reg1: interrupt status register 1 (GHIINT1STS)

 * @error_reg2: interrupt status register 2 (GHIINT2STS)

 *

 * spider_net_handle_error_irq treats or ignores all error conditions

 * found when an interrupt is presented

 check GHIINT0STS ************************************/

	/* let error_reg1 and error_reg2 evaluation decide, what to do

	case SPIDER_NET_PHYINT:

	case SPIDER_NET_GMAC2INT:

	case SPIDER_NET_GMAC1INT:

	case SPIDER_NET_GFIFOINT:

	case SPIDER_NET_DMACINT:

	case SPIDER_NET_GSYSINT:

 PHY write operation completed */

 PHY read operation completed */

		/* we don't use semaphores, as we poll for the completion

		 * of the read operation in spider_net_read_phy. Should take

		 * about 50 us

 PHY command queue full */

 case SPIDER_NET_GRMDADRINT: not used. print a message */

 case SPIDER_NET_GRMARPINT: not used. print a message */

 case SPIDER_NET_GRMMPINT: not used. print a message */

 someone has set TX_DMA_EN to 0 */

 someone has set RX_DMA_EN to 0 */

 RX interrupts */

 case SPIDER_NET_GDNMINT: not used. print a message */

 case SPIDER_NET_GCNMINT: not used. print a message */

 case SPIDER_NET_GBNMINT: not used. print a message */

 case SPIDER_NET_GANMINT: not used. print a message */

 case SPIDER_NET_GRFNMINT: not used. print a message */

 TX interrupts */

		/* chain end. If a descriptor should be sent, kick off

		 * tx dma

		if (card->tx_chain.tail != card->tx_chain.head)

			spider_net_kick_tx_dma(card);

 case SPIDER_NET_G1TMCNTINT: not used. print a message */

 case SPIDER_NET_GFREECNTINT: not used. print a message */

 check GHIINT1STS ************************************/

		/* TX RAM full may happen on a usual case.

		 * Logging is not needed.

 Could happen when rx chain is full */

 case SPIDER_NET_GTMSHTINT: problem, print a message */

 allrighty. tx from previous descr ok */

 chain end */

 invalid descriptor */

 Could happen when rx chain is full */

 case SPIDER_NET_GDTRSERINT: problem, print a message */

 case SPIDER_NET_GDDRSERINT: problem, print a message */

 case SPIDER_NET_GDCRSERINT: problem, print a message */

 case SPIDER_NET_GDBRSERINT: problem, print a message */

 case SPIDER_NET_GDARSERINT: problem, print a message */

 case SPIDER_NET_GDSERINT: problem, print a message */

 case SPIDER_NET_GDTPTERINT: problem, print a message */

 case SPIDER_NET_GDDPTERINT: problem, print a message */

 case SPIDER_NET_GDCPTERINT: problem, print a message */

 case SPIDER_NET_GDBPTERINT: problem, print a message */

 case SPIDER_NET_GDAPTERINT: problem, print a message */

 check GHIINT2STS ************************************/

	/* there is nothing we can (want  to) do at this time. Log a

	 * message, we can switch on and off the specific values later on

	case SPIDER_NET_GPROPERINT:

	case SPIDER_NET_GMCTCRSNGINT:

	case SPIDER_NET_GMCTLCOLINT:

	case SPIDER_NET_GMCTTMOTINT:

	case SPIDER_NET_GMCRCAERINT:

	case SPIDER_NET_GMCRCALERINT:

	case SPIDER_NET_GMCRALNERINT:

	case SPIDER_NET_GMCROVRINT:

	case SPIDER_NET_GMCRRNTINT:

	case SPIDER_NET_GMCRRXERINT:

	case SPIDER_NET_GTITCSERINT:

	case SPIDER_NET_GTIFMTERINT:

	case SPIDER_NET_GTIPKTRVKINT:

	case SPIDER_NET_GTISPINGINT:

	case SPIDER_NET_GTISADNGINT:

	case SPIDER_NET_GTISPDNGINT:

	case SPIDER_NET_GRIFMTERINT:

	case SPIDER_NET_GRIPKTRVKINT:

	case SPIDER_NET_GRISPINGINT:

	case SPIDER_NET_GRISADNGINT:

	case SPIDER_NET_GRISPDNGINT:

		break;

 clear interrupt sources */

/**

 * spider_net_interrupt - interrupt handler for spider_net

 * @irq: interrupt number

 * @ptr: pointer to net_device

 *

 * returns IRQ_HANDLED, if interrupt was for driver, or IRQ_NONE, if no

 * interrupt found raised by card.

 *

 * This is the interrupt handler, that turns off

 * interrupts for this device and makes the stack poll the driver

 clear interrupt sources */

/**

 * spider_net_poll_controller - artificial interrupt for netconsole etc.

 * @netdev: interface device structure

 *

 * see Documentation/networking/netconsole.rst

 CONFIG_NET_POLL_CONTROLLER */

/**

 * spider_net_enable_interrupts - enable interrupts

 * @card: card structure

 *

 * spider_net_enable_interrupt enables several interrupts

/**

 * spider_net_disable_interrupts - disable interrupts

 * @card: card structure

 *

 * spider_net_disable_interrupts disables all the interrupts

/**

 * spider_net_init_card - initializes the card

 * @card: card structure

 *

 * spider_net_init_card initializes the card so that other registers can

 * be used

 trigger ETOMOD signal */

/**

 * spider_net_enable_card - enables the card by setting all kinds of regs

 * @card: card structure

 *

 * spider_net_enable_card sets a lot of SMMIO registers to enable the device

	/* the following array consists of (register),(value) pairs

	 * that are set in this function. A register of 0 ends the list

 set interrupt frame number registers */

 clear the single DMA engine registers first */

 then set, what we really need */

 timer counter registers and stuff */

 RX mode setting */

 TX mode setting */

 IPSEC mode setting */

 flow control stuff */

 clear unicast filter table entries 1 to 14 */

	/* set chain tail address for RX chains and

	 * enable DMA

/**

 * spider_net_download_firmware - loads firmware into the adapter

 * @card: card structure

 * @firmware_ptr: pointer to firmware data

 *

 * spider_net_download_firmware loads the firmware data into the

 * adapter. It assumes the length etc. to be allright.

 stop sequencers */

/**

 * spider_net_init_firmware - reads in firmware parts

 * @card: card structure

 *

 * Returns 0 on success, <0 on failure

 *

 * spider_net_init_firmware opens the sequencer firmware and does some basic

 * checks. This function opens and releases the firmware structure. A call

 * to download the firmware is performed before the release.

 *

 * Firmware format

 * ===============

 * spider_fw.bin is expected to be a file containing 6*1024*4 bytes, 4k being

 * the program for each sequencer. Use the command

 *    tail -q -n +2 Seq_code1_0x088.txt Seq_code2_0x090.txt              \

 *         Seq_code3_0x098.txt Seq_code4_0x0A0.txt Seq_code5_0x0A8.txt   \

 *         Seq_code6_0x0B0.txt | xxd -r -p -c4 > spider_fw.bin

 *

 * to generate spider_fw.bin, if you have sequencer programs with something

 * like the following contents for each sequencer:

 *    <ONE LINE COMMENT>

 *    <FIRST 4-BYTES-WORD FOR SEQUENCER>

 *    <SECOND 4-BYTES-WORD FOR SEQUENCER>

 *     ...

 *    <1024th 4-BYTES-WORD FOR SEQUENCER>

/**

 * spider_net_open - called upon ifonfig up

 * @netdev: interface device structure

 *

 * returns 0 on success, <0 on failure

 *

 * spider_net_open allocates all the descriptors and memory needed for

 * operation, sets up multicast list and enables interrupts

 start probing with copper */

 Allocate rx skbs */

 further enhancement: setup hw vlan, if needed */

/**

 * spider_net_link_phy

 * @t: timer context used to obtain the pointer to net card data structure

 if link didn't come up after SPIDER_NET_ANEG_TIMEOUT tries, setup phy again */

 enable fiber with autonegotiation first */

 fiber didn't come up, try to disable fiber autoneg */

			/* copper, fiber with and without failed,

			 * retry from beginning

 link still not up, try again later */

 link came up, get abilities */

/**

 * spider_net_setup_phy - setup PHY

 * @card: card structure

 *

 * returns 0 on success, <0 on failure

 *

 * spider_net_setup_phy is used as part of spider_net_probe.

/**

 * spider_net_workaround_rxramfull - work around firmware bug

 * @card: card structure

 *

 * no return value

 cancel reset */

 empty sequencer data */

 set sequencer operation */

 reset */

/**

 * spider_net_stop - called upon ifconfig down

 * @netdev: interface device structure

 *

 * always returns 0

 turn off DMA, force end */

 release chains */

/**

 * spider_net_tx_timeout_task - task scheduled by the watchdog timeout

 * function (to be called not under interrupt status)

 * @work: work context used to obtain the pointer to net card data structure

 *

 * called as task when tx hangs, resets interface (if interface is up)

/**

 * spider_net_tx_timeout - called when the tx timeout watchdog kicks in.

 * @netdev: interface device structure

 * @txqueue: unused

 *

 * called, if tx hangs. Schedules a task that resets the interface

 HW VLAN */

 poll controller */

 CONFIG_NET_POLL_CONTROLLER */

/**

 * spider_net_setup_netdev_ops - initialization of net_device operations

 * @netdev: net_device structure

 *

 * fills out function pointers in the net_device structure

 ethtool ops */

/**

 * spider_net_setup_netdev - initialization of net_device

 * @card: card structure

 *

 * Returns 0 on success or <0 on failure

 *

 * spider_net_setup_netdev initializes the net_device structure

	/* some time: NETIF_F_HW_VLAN_CTAG_TX | NETIF_F_HW_VLAN_CTAG_RX |

	 *		NETIF_F_HW_VLAN_CTAG_FILTER

 MTU range: 64 - 2294 */

/**

 * spider_net_alloc_card - allocates net_device and card structure

 *

 * returns the card structure or NULL in case of errors

 *

 * the card and net_device structures are linked to each other

/**

 * spider_net_undo_pci_setup - releases PCI ressources

 * @card: card structure

 *

 * spider_net_undo_pci_setup releases the mapped regions

/**

 * spider_net_setup_pci_dev - sets up the device in terms of PCI operations

 * @pdev: PCI device

 *

 * Returns the card structure or NULL if any errors occur

 *

 * spider_net_setup_pci_dev initializes pdev and together with the

 * functions called in spider_net_open configures the device so that

 * data can be transferred over it

 * The net_device structure is attached to the card structure, if the

 * function returns without error.

 fetch base address and length of first resource */

/**

 * spider_net_probe - initialization of a device

 * @pdev: PCI device

 * @ent: entry in the device id list

 *

 * Returns 0 on success, <0 on failure

 *

 * spider_net_probe initializes pdev and registers a net_device

 * structure for it. After that, the device can be ifconfig'ed up

/**

 * spider_net_remove - removal of a device

 * @pdev: PCI device

 *

 * Returns 0 on success, <0 on failure

 *

 * spider_net_remove is called to remove the device and unregisters the

 * net_device

 switch off card */

/**

 * spider_net_init - init function when the driver is loaded

 *

 * spider_net_init registers the device driver

/**

 * spider_net_cleanup - exit function when driver is unloaded

 *

 * spider_net_cleanup unregisters the device driver

/*

 * tc35815.c: A TOSHIBA TC35815CF PCI 10/100Mbps ethernet driver for linux.

 *

 * Based on skelton.c by Donald Becker.

 *

 * This driver is a replacement of older and less maintained version.

 * This is a header of the older version:

 *	-----<snip>-----

 *	Copyright 2001 MontaVista Software Inc.

 *	Author: MontaVista Software, Inc.

 *		ahennessy@mvista.com

 *	Copyright (C) 2000-2001 Toshiba Corporation

 *	static const char *version =

 *		"tc35815.c:v0.00 26/07/2000 by Toshiba Corporation\n";

 *	-----<snip>-----

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 *

 * (C) Copyright TOSHIBA CORPORATION 2004-2005

 * All Rights Reserved.

 indexed by tc35815_chiptype, above */

 see MODULE_PARM_DESC */

/*

 * Registers

 0x00 */

 0x20 */

 0x40 */

 0x60 */

/*

 * Bit assignments

 DMA_Ctl bit assign ------------------------------------------------------- */

 1:Reception Alignment	     */

 1:66MHz Enable State	     */

 1:Interrupt mask		     */

 1:Software Interrupt request    */

 1:Transmit Wake Up		     */

 1:Receive Big Endian	     */

 1:Transmit Big Endian	     */

 1:Test Mode		     */

 1:Power Management		     */

 DMA Burst size		     */

 RxFragSize bit assign ---------------------------------------------------- */

 1:Enable Packing		     */

 Minimum Fragment		     */

 MAC_Ctl bit assign ------------------------------------------------------- */

 1:Link Status 10Mbits	     */

 1:Enable Missed Roll	     */

 1:Missed Roll		     */

 1:Loop 10 Mbps		     */

00:Connection mode (Automatic)   */

01:		       (10Mbps endec)*/

10:		       (Mll clock)   */

 1:MAC Loopback		     */

 1:Full Duplex 0:Half Duplex     */

 1:Software Reset		     */

 1:Halt Immediate		     */

 1:Halt request		     */

 PROM_Ctl bit assign ------------------------------------------------------ */

 1:Busy (Start Operation)	     */

10:Read operation		     */

01:Write operation		     */

11:Erase operation		     */

00:Enable or Disable Writting,   */

	  as specified in PROM_Addr. */

11xxxx:PROM Write enable	     */

00xxxx:	      disable	     */

 CAM_Ctl bit assign ------------------------------------------------------- */

 1:CAM Compare Enable	     */

 1:Reject packets CAM recognizes,*/

			accept other */

 1:Broadcast assept		     */

 1:Multicast assept		     */

 1:unicast accept		     */

 CAM_Ena bit assign ------------------------------------------------------- */

 CAM Data entry max count	     */

 CAM Enable bits (Max 21bits)  */

 Tx_Ctl bit assign -------------------------------------------------------- */

 1:Transmit enable		     */

 1:Transmit Halt Request	     */

 1:Suppress Padding		     */

 1:Suppress Padding		     */

 1:Fast Back-off		     */

 1:Enable Underrun		     */

 1:Enable Excessive Deferral     */

 1:Enable Lost Carrier	     */

 1:Enable Excessive Collision    */

 1:Enable Late Collision	     */

 1:Enable Transmit Parity	     */

 1:Enable Completion	     */

 Tx_Stat bit assign ------------------------------------------------------- */

 Tx Collision Count		     */

 Excessive Collision	     */

 Transmit Defered		     */

 Transmit Paused		     */

 Interrupt on Tx		     */

 Underrun			     */

 Deferral			     */

 No Carrier			     */

 10Mbps Status		     */

 Late Collision		     */

 Tx Parity Error		     */

 Completion			     */

 Tx Halted			     */

 Signal Quality Error(SQE)	     */

 Rx_Ctl bit assign -------------------------------------------------------- */

 1:Enable Good		     */

 1:Enable Receive Parity	     */

 1:Enable Long Error	     */

 1:Enable OverFlow		     */

 1:Enable CRC Error		     */

 1:Enable Alignment		     */

 1:Ignore CRC Value		     */

 1:Strip CRC Value		     */

 1:Short Enable		     */

 1:Long Enable		     */

 1:Receive Halt Request	     */

 1:Receive Intrrupt Enable	     */

 Rx_Stat bit assign ------------------------------------------------------- */

 Rx Halted			     */

 Rx Good			     */

 Rx Parity Error		     */

 Rx Type Packet		     */

 Rx Long Error		     */

 Rx Overflow		     */

 Rx CRC Error		     */

 Rx Alignment Error		     */

 Rx 10Mbps Status		     */

 Rx Interrupt		     */

 Rx Control Receive		     */

 Rx In Range Frame Length Error  */

 Rx All Status Mask		     */

 Int_En bit assign -------------------------------------------------------- */

 1:Non-recoverable Abort Enable  */

 1:Transmit Ctl Complete Enable  */

 1:DMA Parity Error Enable	     */

 1:Data Parity Error Enable	     */

 1:Early Notify Enable	     */

 1:Detected Parity Error Enable  */

 1:Signalled System Error Enable */

 1:Received Master Abort Enable  */

 1:Received Target Abort Enable  */

 1:Signalled Target Abort Enable */

 1:Buffer List Exhausted Enable  */

 1:Free Descriptor Area	     */

		   Exhausted Enable  */

 Int_Src bit assign ------------------------------------------------------- */

 1:Non Recoverable error	     */

 1:DMA Parity Error & Clear	     */

 1:Buffer List Empty & Clear     */

 1:FDA Empty & Clear	     */

 1:Non Recoverable Abort	     */

 1:MAC control packet complete   */

 1:Interrupt Extra BD & Clear    */

 1:DMA Parity Error & Clear	     */

 1:Receive Data write & Clear    */

 1:Software request & Clear	     */

 1:Buffer List Empty & Clear     */

 1:FDA Empty & Clear	     */

 1:PCI controller & Clear	     */

 1:Rx controller & Clear	     */

 1:Tx controller & Clear	     */

 MD_CA bit assign --------------------------------------------------------- */

 1:Preamble Suppress		     */

 1:Busy (Start Operation)	     */

 1:Write 0:Read		     */

/*

 * Descriptors

 Frame descriptor */

 Buffer descriptor */

 Frame Descriptor bit assign ---------------------------------------------- */

 Length MASK		     */

 BD count MASK in FD	     */

 Frame option MASK		     */

 Tx/Rx */

 Tx only */

 Tx only */

 Tx only */

 Rx only */

 FD Controller owner bit	     */

 FD EOL indicator		     */

 Buffer Descriptor bit assign --------------------------------------------- */

 Receive Data Size		     */

 BD ID Number MASK		     */

 Rx BD Sequence Number	     */

 BD Controller owner bit	     */

 Some useful constants. */

 maybe  0x7b01 */

 Do not use Rx_StripCRC -- it causes trouble on BLEx/FDAEx condition */

 maybe 0x6f01 */

 maybe 0xb7f*/

 Tuning parameters */

 used threshold with packet max byte for low pci transfer ability.*/

 setting threshold max value when overrun error occurred this count. */

 16 + RX_BUF_NUM * 8 + RX_FD_NUM * 16 + TX_FD_NUM * 32 <= PAGE_SIZE*FD_PAGE_NUM */

 < 256 */

 >= 32 */

 max 2 BD per RxFD */

 variable length */

 Information that need to be kept for each controller. */

 statistics */

	/* Tx control lock.  This protects the transmit buffer ring

	 * state along with the "tx full" state of the driver.  This

	 * means all netif_queue flow control actions are protected

	 * by this lock as well.

	/*

	 * Transmitting: Batch Mode.

	 *	1 BD in 1 TxFD.

	 * Receiving: Non-Packing Mode.

	 *	1 circular FD for Free Buffer List.

	 *	RX_BUF_NUM BD in Free Buffer FD.

	 *	One Free Buffer BD has ETH_FRAME_LEN data buffer.

 for TxFD, RxFD, FrFD */

 make IP header 4byte aligned */

 Index to functions, as function prototypes. */

 Example routines you must write ;->. */

 it takes 32 x 400ns at least */

 it takes 32 x 400ns at least */

		/*

		 * TX4939 PCFG.SPEEDn bit will be changed on

		 * NETDEV_CHANGE event.

		/*

		 * WORKAROUND: enable LostCrS only if half duplex

		 * operation.

		 * (TX4939 does not have EnLCarr)

 delayed promiscuous enabling */

 attach the mac to the phy */

 mask with MAC supported features */

/*

 * Find a platform_device providing a MAC address.  The platform code

 * should provide a "tc35815-mac" device with a MAC address in its

 * platform_data.

 dev zeroed in alloc_etherdev */

 enable device (incl. PCI PM wakeup), and bus-mastering */

 Initialize the device structure. */

 Soft reset the chip. */

 Retrieve the ethernet address. */

 Free Descriptors (for Receive) */

 Transmit Descriptors */

 Buffer List (for Receive) */

	/*

	 * move all allocated skbs to head of rx_skbs[] array.

	 * fbl_count mighe not be RX_BUF_NUM if alloc_rxbuf_skb() in

	 * tc35815_rx() had failed.

 BDID is index of FrFD.bd[] */

 skip BDs */

 Reconfigure CAM again since tc35815_chip_init() initialize it. */

 disable interrupts */

 Try to restart the adaptor. */

/*

 * Open/initialize the controller. This is called (in the current kernel)

 * sometime after booting when the 'ifconfig' program is run.

 *

 * This routine should set everything up anew at each open, even

 * registers that "should" only need to be set once at boot, so that

 * there is non-reboot way to recover if something goes wrong.

	/*

	 * This is used if the interrupt line can turned off (shared).

	 * See 3c503.c for an example of selecting the IRQ at config-time.

 Reset the hardware here. Don't forget to set the station address. */

 schedule a link state check */

	/* We are now ready to accept transmit requeusts from

	 * the queueing layer of the networking.

/* This will only be invoked if your driver is _not_ in XOFF state.

 * What this means is that you need not check it, and that this

 * invariant will hold if you make sure that the netif_*_queue()

 * calls are done at the proper times.

	/* If some error occurs while trying to transmit this

	 * packet, you should return '1' from this function.

	 * In such a case you _may not_ do anything to the

	 * SKB, it is still owned by the network queueing

	 * layer when an error is returned.  This means you

	 * may not modify any SKB fields, you may not free

	 * the SKB, etc.

	/* This is the most common case for modern hardware.

	 * The spinlock protects this code from the TX complete

	 * hardware interrupt handler.  Queue flow control is

	 * thus managed under this lock as well.

 failsafe... (handle txdone now if half of FDs are used) */

add to ring */

 Start DMA Transmitter. */

	/* If we just used up the very last entry in the

	 * TX ring on this device, tell the queueing

	 * layer to send no more.

	/* When the TX completion hw interrupt arrives, this

	 * is when the transmit statistics are updated.

 Try to restart the adaptor. */

 Fatal errors... */

 recoverable errors */

 normal notification */

 Got a packet(s). */

 Transmit complete. */

/*

 * The typical workload of the driver:

 * Handle the network interface interrupts.

 disable interrupts */

 flush */

 We have a good packet(s), get it/them out of the buffers. */

 WORKAROUND: LongErr and CRCErr means Overflow. */

 put Free Buffer back to controller */

 free old buffers */

 pass BD to controller */

 try on next reception */

 Note: BDLength was modified by chip. */

 put RxFD back to controller */

 pass FD to controller */

 BLEx, FDAEx will be cleared later */

 write to clear */

 enable interrupts */

 count collisions */

 TX4939 does not have NCarr */

 WORKAROUND: ignore LostCrS in full duplex operation */

 no error. */

/* This handles TX complete events posted by the device

 * via interrupts.

 DMA Transmitter has been stopping... */

 log max queue length */

 start DMA Transmitter again */

	/* If we had stopped the queue due to a "tx full"

	 * condition, and space has now been made available,

	 * wake up the queue.

 The inverse routine to tc35815_open(). */

 Flush the Tx and disable Rx here. */

/*

 * Get the current statistics.

 * This may be called with the card open or closed.

 Update the statistics from the device registers. */

 read modify write */

 write whole word */

 write whole word */

 read modify write */

/*

 * Set or clear the multicast filter for this adaptor.

 * num_addrs == -1	Promiscuous mode, receive all packets

 * num_addrs == 0	Normal mode, clear multicast list

 * num_addrs > 0	Multicast mode, receive normal and MC packets,

 *			and do best-effort filtering.

		/* With some (all?) 100MHalf HUB, controller will hang

		 * if we enabled promiscuous mode before linkup...

 Enable promiscuous mode */

 CAM 0, 1, 20 are reserved. */

 Disable promiscuous mode, use normal mode. */

 Walk the address list, and load the filter */

 entry 0,1 is reserved. */

 reset the controller */

 3200ns */

 initialize registers to default value */

 Write 1 to clear */

 Read to clear */

 initialize internal SRAM */

 load station address to CAM */

 Enable CAM (broadcast and unicast) */

 Use DMA_RxAlign_2 to make IP header 4-byte aligned. */

 Batch mode */

 set queues */

	/*

	 * Activation method:

	 * First, enable the MAC Transmitter and the DMA Receive circuits.

	 * Then enable the DMA Transmitter and the MAC Receive circuits.

 start DMA receiver */

 start MAC receiver */

 start MAC transmitter */

 TX4939 does not have EnLCarr */

 WORKAROUND: ignore LostCrS in full duplex operation */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

 Copyright (c) 2021, Microsoft Corporation. */

/* Structures labeled with "HW DATA" are exchanged with the hardware. All of

 * them are naturally aligned and hence don't need __packed.

/* Shared memory channel protocol header

 *

 * msg_type: set on request and response; response matches request.

 * msg_version: newer PF writes back older response (matching request)

 *  older PF acts on latest version known and sets that version in result

 *  (less than request).

 * direction: 0 for request, VF->PF; 1 for response, PF->VF.

 * status: 0 on request,

 *   operation result on response (success = 0, failure = 1 or greater).

 * reset_vf: If set on either establish or destroy request, indicates perform

 *  FLR before/after the operation.

 * owner_is_pf: 1 indicates PF owned, 0 indicates VF owned.

 HW DATA */

	/* Poll the hardware for the ownership bit. This should be pretty fast,

	 * but let's do it in a loop just in case the hardware or the PF

	 * driver are temporarily busy.

 shmem reads as 0xFFFFFFFF in the reset case */

 If bit_31 is set, the PF currently owns the SMC. */

 Wait for PF to respond. */

 Validate protocol fields from the PF driver */

 Validate the operation result */

 Ensure VF already has possession of shared memory */

	/* Scheme for packing four addresses and extra info into 256 bits.

	 *

	 * Addresses must be page frame aligned, so only frame address bits

	 * are transferred.

	 *

	 * 52-bit frame addresses are split into the lower 48 bits and upper

	 * 4 bits. Lower 48 bits of 4 address are written sequentially from

	 * the start of the 256-bit shared memory region followed by 16 bits

	 * containing the upper 4 bits of the 4 addresses in sequence.

	 *

	 * A 16 bit EQ vector number fills out the next-to-last 32-bit dword.

	 *

	 * The final 32-bit dword is used for protocol control information as

	 * defined in smc_proto_hdr.

 EQ addr: low 48 bits of frame address */

 CQ addr: low 48 bits of frame address */

 RQ addr: low 48 bits of frame address */

 SQ addr: low 48 bits of frame address */

 High 4 bits of the four frame addresses */

 EQ MSIX vector number */

 32-bit protocol header in final dword */

	/* Write 256-message buffer to shared memory (final 32-bit write

	 * triggers HW to set possession bit to PF).

	/* Read shmem response (polling for VF possession) and validate.

	 * For setup, waiting for response on shared memory is not strictly

	 * necessary, since wait occurs later for results to appear in EQE's.

 Ensure already has possession of shared memory */

 Set up protocol header for HWC destroy message */

	/* Write message in high 32 bits of 256-bit shared memory, causing HW

	 * to set possession bit to PF.

	/* Read shmem response (polling for VF possession) and validate.

	 * For teardown, waiting for response is required to ensure hardware

	 * invalidates MST entries before software frees memory.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

 Copyright (c) 2021, Microsoft Corporation. */

 Microsoft Azure Network Adapter (MANA) functions */

 Ensure port state updated before txq state */

 No csum offloading */

 Can't do offload of this type of checksum */

 skb may be freed after mana_gd_post_work_request. Do not use it. */

			/* If the CQE type is unexpected, log an error, assert,

			 * and go through the error path.

 Ensure tail updated before checking q stop */

 Ensure checking txq_stopped before apc->port_is_up. */

 data packets should never have packetlength of zero */

 refresh the rxbuf_oob with the new page */

 drop the packet if no memory */

 verify recv cqe references the right rxq */

	/*  The minimum size of the WQE is 32 bytes, hence

	 *  MAX_SEND_BUFFERS_PER_QUEUE represents the maximum number of WQEs

	 *  the SQ can store. This value is then used to size other queues

	 *  to prevent overflow.

 Create SQ */

 Create SQ's CQ */

 Create RQ */

 Create RQ's CQ */

 Ensure port state updated before txq state */

	/* No packet can be transmitted now since apc->port_is_up is false.

	 * There is still a tiny chance that mana_poll_tx_cq() can re-enable

	 * a txq because it may not timely see apc->port_is_up being cleared

	 * to false, but it doesn't matter since mana_start_xmit() drops any

	 * new packets due to apc->port_is_up being false.

	 *

	 * Drain all the in-flight TX packets

	/* We're 100% sure the queues can no longer be woken up, because

	 * we're sure now mana_poll_tx_cq() can't be running.

 TODO: Implement RX fencing */

 Ensure port state updated before txq state */

		/* All cleanup actions should stay after rtnl_lock(), otherwise

		 * other functions may access partially cleaned up data.

 No need to unregister the ndev. */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

 Copyright (c) 2021, Microsoft Corporation. */

 Toeplitz */

 recover to original values */

 Try to roll it back to the old configuration. */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

 Copyright (c) 2021, Microsoft Corporation. */

 The Hardware Channel (HWC) used 1 MSI-X */

 HWC is already detected in mana_hwc_create_channel(). */

 Ensure all writes are done before ring doorbell */

 Process up to 5 EQEs at a time, and update the HW head. */

 No more entries */

 At most num_online_cpus() + 1 interrupts are used. */

 Unused*/

 Linux */

	/* The size of gdma_wqe + client_oob_size must be less than or equal

	 * to one Basic Unit (i.e. 32 bytes), so the pointer can't go beyond

	 * the queue memory buffer boundary.

 Return 0 if no more entries. */

 Return -1 if overflow detected. */

 Need 1 interrupt for the Hardware communication Channel (HWC) */

 Each port has 2 CQs, each CQ has at most 1 EQE at a time */

 The 'state' parameter is not used. */

/* In case the NIC hardware stops working, the suspend and resume callbacks will

 * fail -- if this happens, it's safer to just report an error than try to undo

 * what has been done.

 Quiesce the device for kexec. This is also called upon reboot/shutdown. */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

 Copyright (c) 2021, Microsoft Corporation. */

 Ignore unknown events, which should never happen. */

 Select the RX work request for virtual address and for reposting. */

	/* Do no longer use 'resp', because the buffer is posted to the HW

	 * in the below mana_hwc_post_rx_wqe().

 Post all WQEs on the RQ */

 Both were set in mana_hwc_init_event_handler(). */

	/* CQ is shared by SQ and RQ, so CQ's queue depth is the sum of SQ

	 * queue depth and RQ queue depth.

 mana_hwc_create_channel() will do the cleanup.*/

 HWC's instance number is always 0. */

	/* mana_hwc_init_queues() only creates the required data structures,

	 * and doesn't touch the HWC device.

	/* gc->max_num_cqs is set in mana_hwc_init_event_handler(). If it's

	 * non-zero, the HWC worked and we should tear down the HWC here.

 SPDX-License-Identifier: GPL-2.0

/* Ethernet device driver for Cortina Systems Gemini SoC

 * Also known as the StorLink SL3512 and SL3516 (SL351x) or Lepus

 * Net Engine and Gigabit Ethernet MAC (GMAC)

 * This hardware contains a TCP Offload Engine (TOE) but currently the

 * driver does not make use of it.

 *

 * Authors:

 * Linus Walleij <linus.walleij@linaro.org>

 * Tobias Waldvogel <tobias.waldvogel@gmail.com> (OpenWRT)

 * Michał Mirosław <mirq-linux@rere.qmqm.pl>

 * Paulius Zaleckas <paulius.zaleckas@gmail.com>

 * Giuseppe De Robertis <Giuseppe.DeRobertis@ba.infn.it>

 * Gary Chen & Ch Hsu Storlink Semiconductor

 max: 6 */

/**

 * struct gmac_queue_page - page buffer per-page info

 * @page: the page struct

 * @mapping: the dma address handle

 0 or 1 */

 Locks config register */

 Locks IRQ-related registers */

 Locks queue from reentrance */

 let GMAC consume packet */

 set PHY interface type */

/* The maximum frame length is not logically enumerated in the

 * hardware, so we do a table lookup to find the applicable max

 * frame length.

	/* Mark every quarter of the queue a packet for interrupt

	 * in order to be able to wake up the queue if it was stopped

 Remap a slew of memory to use for the RX queue */

 Only look for even pages */

 Look up a ring buffer page from virtual mapping */

	/* Loop from read pointer to write pointer of the RX queue

	 * and free up all pages by the queue.

 Freeq pointers are one page off */

 Release the RX queue reference to the page */

 First allocate and DMA map a single page */

	/* The assign the page mapping (physical address) to the buffer address

	 * in the hardware queue. PAGE_SHIFT on ARM is 12 (1 page is 4096 bytes,

	 * 4k), and the default RX frag order is 11 (fragments are up 20 2048

	 * bytes, 2k) so fpp_order (fragments per page order) is default 1. Thus

	 * each page normally needs two entries in the queue.

 Usually 2048 */

 If the freeq entry already has a page mapped, then unmap it. */

		/* This should be the last reference to the page so it gets

		 * released

 Then put our new mapping into the page table */

/**

 * geth_fill_freeq() - Fill the freeq with empty fragments to use

 * @geth: the ethernet adapter

 * @refill: whether to reset the queue by filling in all freeq entries or

 * just refill it, usually the interrupt to refill the queue happens when

 * the queue is half empty.

 Mask for page */

 Loop over the freeq ring buffer entries */

 Add one reference per fragment in the page */

 Allocate a mapping to page look-up index */

/**

 * geth_cleanup_freeq() - cleanup the DMA mappings and free the queue

 * @geth: the Gemini global ethernet state

/**

 * geth_resize_freeq() - resize the software queue depth

 * @port: the port requesting the change

 *

 * This gets called at least once during probe() so the device queue gets

 * "resized" from the hardware defaults. Since both ports/net devices share

 * the same hardware queue, some synchronization between the ports is

 * needed.

 Disable the software queue IRQs */

 Drop the old queue */

 Allocate a new queue with the desired order */

	/* Restart the interrupts - NOTE if this is the first resize

	 * after probe(), this is where the interrupts get turned on

	 * in the first place.

 IPv6 */

 Reset interrupt as all packages until here are taken into account */

 Freeq pointers are one page off */

 append page frag to skb */

 Interrupt status */

 Interrupt enable */

 RX DMA status */

 TX DMA status */

 FREE queues status */

/**

 * gmac_get_intr_flags() - get interrupt status flags for a port from

 * @netdev: the net device for the port to get flags from

 * @i: the interrupt status register 0..4

 Calculate the offset using the stride of the status registers */

 Oh, crap */

 don't know how to recover, just reduce losses */

	/* It's fine if it's just busy, the other port has set up

	 * the freeq in that case.

 Racing with RX NAPI */

 Racing with MIB and TX completion interrupts */

 Racing with hard_start_xmit */

 Racing with MIB interrupt */

 Racing with RX NAPI */

 Racing with TX start_xmit */

 The queue is half empty so refill it */

 ACK queue interrupt */

 Enable queue interrupt again */

		/* Disable the queue empty interrupt while we work on

		 * processing the queue. Also disable overrun interrupts

		 * as there is not much we can do about it here.

 Only do this once both ports are online */

	/* Interrupt config:

	 *

	 *	GMAC0 intr bits ------> int0 ----> eth0

	 *	GMAC1 intr bits ------> int1 ----> eth1

	 *	TOE intr -------------> int1 ----> eth1

	 *	Classification Intr --> int0 ----> eth0

	 *	Default Q0 -----------> int0 ----> eth0

	 *	Default Q1 -----------> int1 ----> eth1

	 *	FreeQ intr -----------> int1 ----> eth1

 edge-triggered interrupts packed to level-triggered one... */

 Set up queue */

	/* This makes the queue resize on probe() so that we

	 * set up and enable the queue IRQ. FIXME: fragile.

 DMA memory */

 GMAC config memory */

 Interrupt */

 Clock the port */

 Maybe there is a nice ethernet address we should use */

 Reset the port */

 Assign pointer in the main state container */

 This will just be done once both ports are up and reset */

 Set up and register the netdev */

	/* We can handle jumbo frames up to 10236 bytes so, let's accept

	 * payloads of 10236 bytes minus VLAN and ethernet header

 Global registers */

 Wait for ports to stabilize */

 The children will use this */

 Spawn child devices for the two ports */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/net/ethernet/micrel/ksx884x.c - Micrel KSZ8841/2 PCI Ethernet driver

 *

 * Copyright (c) 2009-2010 Micrel, Inc.

 * 	Tristram Ha <Tristram.Ha@micrel.com>

 DMA Registers */

 MTR0 */

 MTR1 */

 Interrupt Registers */

 INTEN */

 INTST */

 MAC Additional Station Address */

 MAAL0 */

 MAAH0 */

 MAAL1 */

 MAAH1 */

 MAAL2 */

 MAAH2 */

 MAAL3 */

 MAAH3 */

 MAAL4 */

 MAAH4 */

 MAAL5 */

 MAAH5 */

 MAAL6 */

 MAAH6 */

 MAAL7 */

 MAAH7 */

 MAAL8 */

 MAAH8 */

 MAAL9 */

 MAAH9 */

 MAAL10 */

 MAAH10 */

 MAAL11 */

 MAAH11 */

 MAAL12 */

 MAAH12 */

 MAAL13 */

 MAAH13 */

 MAAL14 */

 MAAH14 */

 MAAL15 */

 MAAH15 */

 Miscellaneous Registers */

 MARL */

 MARM */

 MARH */

 OBCR */

 EEPCR */

 MBIR */

 GCR */

 WFCR */

 WF0 */

 IACR */

 IADR1 */

 P1MBCR */

 P2MBCR */

 P1VCT */

 P2VCT */

 SIDER */

 SGCR1 */

 SGCR2 */

 SGCR3 */

 SGCR4 */

 SGCR5 */

 SGCR6 */

 SGCR7 */

 MACAR1 */

 TOSR1 */

 P1CR1 */

 P2CR1 */

 P3CR1 */

/*

#define STATIC_MAC_TABLE_ADDR		00-0000FFFF-FFFFFFFF

#define STATIC_MAC_TABLE_FWD_PORTS	00-00070000-00000000

#define STATIC_MAC_TABLE_VALID		00-00080000-00000000

#define STATIC_MAC_TABLE_OVERRIDE	00-00100000-00000000

#define STATIC_MAC_TABLE_USE_FID	00-00200000-00000000

#define STATIC_MAC_TABLE_FID		00-03C00000-00000000

/*

#define VLAN_TABLE_VID			00-00000000-00000FFF

#define VLAN_TABLE_FID			00-00000000-0000F000

#define VLAN_TABLE_MEMBERSHIP		00-00000000-00070000

#define VLAN_TABLE_VALID		00-00000000-00080000

/*

#define DYNAMIC_MAC_TABLE_ADDR		00-0000FFFF-FFFFFFFF

#define DYNAMIC_MAC_TABLE_FID		00-000F0000-00000000

#define DYNAMIC_MAC_TABLE_SRC_PORT	00-00300000-00000000

#define DYNAMIC_MAC_TABLE_TIMESTAMP	00-00C00000-00000000

#define DYNAMIC_MAC_TABLE_ENTRIES	03-FF000000-00000000

#define DYNAMIC_MAC_TABLE_MAC_EMPTY	04-00000000-00000000

#define DYNAMIC_MAC_TABLE_RESERVED	78-00000000-00000000

#define DYNAMIC_MAC_TABLE_NOT_READY	80-00000000-00000000

/*

#define MIB_COUNTER_VALUE		00-00000000-3FFFFFFF

#define MIB_COUNTER_VALID		00-00000000-40000000

#define MIB_COUNTER_OVERFLOW		00-00000000-80000000

 Change default LED mode. */

 total transmit errors */

 total receive errors */

/*

 * Hardware descriptor definitions

/**

 * struct ksz_hw_desc - Hardware descriptor data structure

 * @ctrl:	Descriptor control value.

 * @buf:	Descriptor buffer value.

 * @addr:	Physical address of memory buffer.

 * @next:	Pointer to next hardware descriptor.

/**

 * struct ksz_sw_desc - Software descriptor data structure

 * @ctrl:	Descriptor control value.

 * @buf:	Descriptor buffer value.

 * @buf_size:	Current buffers size value in hardware descriptor.

/**

 * struct ksz_dma_buf - OS dependent DMA buffer data structure

 * @skb:	Associated socket buffer.

 * @dma:	Associated physical DMA address.

 * @len:	Actual len used.

/**

 * struct ksz_desc - Descriptor structure

 * @phw:	Hardware descriptor pointer to uncached physical memory.

 * @sw:		Cached memory to hold hardware descriptor values for

 * 		manipulation.

 * @dma_buf:	Operating system dependent data structure to hold physical

 * 		memory buffer allocation information.

/**

 * struct ksz_desc_info - Descriptor information data structure

 * @ring:	First descriptor in the ring.

 * @cur:	Current descriptor being manipulated.

 * @ring_virt:	First hardware descriptor in the ring.

 * @ring_phys:	The physical address of the first descriptor of the ring.

 * @size:	Size of hardware descriptor.

 * @alloc:	Number of descriptors allocated.

 * @avail:	Number of descriptors available for use.

 * @last:	Index for last descriptor released to hardware.

 * @next:	Index for next descriptor available for use.

 * @mask:	Mask for index wrapping.

/*

 * KSZ8842 switch definitions

/**

 * struct ksz_mac_table - Static MAC table data structure

 * @mac_addr:	MAC address to filter.

 * @vid:	VID value.

 * @fid:	FID value.

 * @ports:	Port membership.

 * @override:	Override setting.

 * @use_fid:	FID use setting.

 * @valid:	Valid setting indicating the entry is being used.

/**

 * struct ksz_vlan_table - VLAN table data structure

 * @vid:	VID value.

 * @fid:	FID value.

 * @member:	Port membership.

/**

 * struct ksz_port_mib - Port MIB data structure

 * @cnt_ptr:	Current pointer to MIB counter index.

 * @link_down:	Indication the link has just gone down.

 * @state:	Connection status of the port.

 * @mib_start:	The starting counter index.  Some ports do not start at 0.

 * @counter:	64-bit MIB counter value.

 * @dropped:	Temporary buffer to remember last read packet dropped values.

 *

 * MIB counters needs to be read periodically so that counters do not get

 * overflowed and give incorrect values.  A right balance is needed to

 * satisfy this condition and not waste too much CPU time.

 *

 * It is pointless to read MIB counters when the port is disconnected.  The

 * @state provides the connection status so that MIB counters are read only

 * when the port is connected.  The @link_down indicates the port is just

 * disconnected so that all MIB counters are read one last time to update the

 * information.

/**

 * struct ksz_port_cfg - Port configuration data structure

 * @vid:	VID value.

 * @member:	Port membership.

 * @port_prio:	Port priority.

 * @rx_rate:	Receive priority rate.

 * @tx_rate:	Transmit priority rate.

 * @stp_state:	Current Spanning Tree Protocol state.

/**

 * struct ksz_switch - KSZ8842 switch data structure

 * @mac_table:	MAC table entries information.

 * @vlan_table:	VLAN table entries information.

 * @port_cfg:	Port configuration information.

 * @diffserv:	DiffServ priority settings.  Possible values from 6-bit of ToS

 * 		(bit7 ~ bit2) field.

 * @p_802_1p:	802.1P priority settings.  Possible values from 3-bit of 802.1p

 * 		Tag priority field.

 * @br_addr:	Bridge address.  Used for STP.

 * @other_addr:	Other MAC address.  Used for multiple network device mode.

 * @broad_per:	Broadcast storm percentage.

 * @member:	Current port membership.  Used for STP.

/**

 * struct ksz_port_info - Port information data structure

 * @state:	Connection status of the port.

 * @tx_rate:	Transmit rate divided by 10000 to get Mbit.

 * @duplex:	Duplex mode.

 * @advertised:	Advertised auto-negotiation setting.  Used to determine link.

 * @partner:	Auto-negotiation partner setting.  Used to determine link.

 * @port_id:	Port index to access actual hardware register.

 * @pdev:	Pointer to OS dependent network device.

 Hardware features and bug fixes. */

 Software overrides. */

/**

 * struct ksz_hw - KSZ884X hardware data structure

 * @io:			Virtual address assigned.

 * @ksz_switch:		Pointer to KSZ8842 switch.

 * @port_info:		Port information.

 * @port_mib:		Port MIB information.

 * @dev_count:		Number of network devices this hardware supports.

 * @dst_ports:		Destination ports in switch for transmission.

 * @id:			Hardware ID.  Used for display only.

 * @mib_cnt:		Number of MIB counters this hardware has.

 * @mib_port_cnt:	Number of ports with MIB counters.

 * @tx_cfg:		Cached transmit control settings.

 * @rx_cfg:		Cached receive control settings.

 * @intr_mask:		Current interrupt mask.

 * @intr_set:		Current interrup set.

 * @intr_blocked:	Interrupt blocked.

 * @rx_desc_info:	Receive descriptor information.

 * @tx_desc_info:	Transmit descriptor information.

 * @tx_int_cnt:		Transmit interrupt count.  Used for TX optimization.

 * @tx_int_mask:	Transmit interrupt mask.  Used for TX optimization.

 * @tx_size:		Transmit data size.  Used for TX optimization.

 * 			The maximum is defined by MAX_TX_HELD_SIZE.

 * @perm_addr:		Permanent MAC address.

 * @override_addr:	Overridden MAC address.

 * @address:		Additional MAC address entries.

 * @addr_list_size:	Additional MAC address list size.

 * @mac_override:	Indication of MAC address overridden.

 * @promiscuous:	Counter to keep track of promiscuous mode set.

 * @all_multi:		Counter to keep track of all multicast mode set.

 * @multi_list:		Multicast address entries.

 * @multi_bits:		Cached multicast hash table settings.

 * @multi_list_size:	Multicast address list size.

 * @enabled:		Indication of hardware enabled.

 * @rx_stop:		Indication of receive process stop.

 * @reserved2:		none

 * @features:		Hardware features to enable.

 * @overrides:		Hardware features to override.

 * @parent:		Pointer to parent, network device private structure.

/**

 * struct ksz_port - Virtual port data structure

 * @duplex:		Duplex mode setting.  1 for half duplex, 2 for full

 * 			duplex, and 0 for auto, which normally results in full

 * 			duplex.

 * @speed:		Speed setting.  10 for 10 Mbit, 100 for 100 Mbit, and

 * 			0 for auto, which normally results in 100 Mbit.

 * @force_link:		Force link setting.  0 for auto-negotiation, and 1 for

 * 			force.

 * @flow_ctrl:		Flow control setting.  PHY_NO_FLOW_CTRL for no flow

 * 			control, and PHY_FLOW_CTRL for flow control.

 * 			PHY_TX_ONLY and PHY_RX_ONLY are not supported for 100

 * 			Mbit PHY.

 * @first_port:		Index of first port this port supports.

 * @mib_port_cnt:	Number of ports with MIB counters.

 * @port_cnt:		Number of ports this port supports.

 * @counter:		Port statistics counter.

 * @hw:			Pointer to hardware structure.

 * @linked:		Pointer to port information linked to this port.

/**

 * struct ksz_timer_info - Timer information data structure

 * @timer:	Kernel timer.

 * @cnt:	Running timer counter.

 * @max:	Number of times to run timer; -1 for infinity.

 * @period:	Timer period in jiffies.

/**

 * struct ksz_shared_mem - OS dependent shared memory data structure

 * @dma_addr:	Physical DMA address allocated.

 * @alloc_size:	Allocation size.

 * @phys:	Actual physical address used.

 * @alloc_virt:	Virtual address allocated.

 * @virt:	Actual virtual address used.

/**

 * struct ksz_counter_info - OS dependent counter information data structure

 * @counter:	Wait queue to wakeup after counters are read.

 * @time:	Next time in jiffies to read counter.

 * @read:	Indication of counters read in full or not.

/**

 * struct dev_info - Network device information data structure

 * @dev:		Pointer to network device.

 * @pdev:		Pointer to PCI device.

 * @hw:			Hardware structure.

 * @desc_pool:		Physical memory used for descriptor pool.

 * @hwlock:		Spinlock to prevent hardware from accessing.

 * @lock:		Mutex lock to prevent device from accessing.

 * @dev_rcv:		Receive process function used.

 * @last_skb:		Socket buffer allocated for descriptor rx fragments.

 * @skb_index:		Buffer index for receiving fragments.

 * @skb_len:		Buffer length for receiving fragments.

 * @mib_read:		Workqueue to read MIB counters.

 * @mib_timer_info:	Timer to read MIB counters.

 * @counter:		Used for MIB reading.

 * @mtu:		Current MTU used.  The default is REGULAR_RX_BUF_SIZE;

 * 			the maximum is MAX_RX_BUF_SIZE.

 * @opened:		Counter to keep track of device open.

 * @rx_tasklet:		Receive processing tasklet.

 * @tx_tasklet:		Transmit processing tasklet.

 * @wol_enable:		Wake-on-LAN enable set by ethtool.

 * @wol_support:	Wake-on-LAN support used by ethtool.

 * @pme_wait:		Used for KSZ8841 power management.

/**

 * struct dev_priv - Network device private data structure

 * @adapter:		Adapter device information.

 * @port:		Port information.

 * @monitor_timer_info:	Timer to monitor ports.

 * @proc_sem:		Semaphore for proc accessing.

 * @id:			Device ID.

 * @mii_if:		MII interface information.

 * @advertising:	Temporary variable to store advertised settings.

 * @msg_enable:		The message flags controlling driver output.

 * @media_state:	The connection status of the device.

 * @multicast:		The all multicast state of the device.

 * @promiscuous:	The promiscuous state of the device.

/*

 * Interrupt processing primary routines

/**

 * hw_turn_on_intr - turn on specified interrupts

 * @hw: 	The hardware instance.

 * @bit:	The interrupt bits to be on.

 *

 * This routine turns on the specified interrupts in the interrupt mask so that

 * those interrupts will be enabled.

/**

 * hw_block_intr - block hardware interrupts

 * @hw: The hardware instance.

 *

 * This function blocks all interrupts of the hardware and returns the current

 * interrupt enable mask so that interrupts can be restored later.

 *

 * Return the current interrupt enable mask.

/*

 * Hardware descriptor routines

 Switch functions */

/**

 * sw_r_table - read 4 bytes of data from switch table

 * @hw:		The hardware instance.

 * @table:	The table selector.

 * @addr:	The address of the table entry.

 * @data:	Buffer to store the read data.

 *

 * This routine reads 4 bytes of data from the table of the switch.

 * Hardware interrupts are disabled to minimize corruption of read data.

/**

 * sw_w_table_64 - write 8 bytes of data to the switch table

 * @hw:		The hardware instance.

 * @table:	The table selector.

 * @addr:	The address of the table entry.

 * @data_hi:	The high part of data to be written (bit63 ~ bit32).

 * @data_lo:	The low part of data to be written (bit31 ~ bit0).

 *

 * This routine writes 8 bytes of data to the table of the switch.

 * Hardware interrupts are disabled to minimize corruption of written data.

/**

 * sw_w_sta_mac_table - write to the static MAC table

 * @hw: 	The hardware instance.

 * @addr:	The address of the table entry.

 * @mac_addr:	The MAC address.

 * @ports:	The port members.

 * @override:	The flag to override the port receive/transmit settings.

 * @valid:	The flag to indicate entry is valid.

 * @use_fid:	The flag to indicate the FID is valid.

 * @fid:	The FID value.

 *

 * This routine writes an entry of the static MAC table of the switch.  It

 * calls sw_w_table_64() to write the data.

/**

 * sw_r_vlan_table - read from the VLAN table

 * @hw: 	The hardware instance.

 * @addr:	The address of the table entry.

 * @vid:	Buffer to store the VID.

 * @fid:	Buffer to store the VID.

 * @member:	Buffer to store the port membership.

 *

 * This function reads an entry of the VLAN table of the switch.  It calls

 * sw_r_table() to get the data.

 *

 * Return 0 if the entry is valid; otherwise -1.

/**

 * port_r_mib_cnt - read MIB counter

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @addr:	The address of the counter.

 * @cnt:	Buffer to store the counter.

 *

 * This routine reads a MIB counter of the port.

 * Hardware interrupts are disabled to minimize corruption of read data.

/**

 * port_r_mib_pkt - read dropped packet counts

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @last:	last one

 * @cnt:	Buffer to store the receive and transmit dropped packet counts.

 *

 * This routine reads the dropped packet counts of the port.

 * Hardware interrupts are disabled to minimize corruption of read data.

/**

 * port_r_cnt - read MIB counters periodically

 * @hw: 	The hardware instance.

 * @port:	The port index.

 *

 * This routine is used to read the counters of the port periodically to avoid

 * counter overflow.  The hardware should be acquired first before calling this

 * routine.

 *

 * Return non-zero when not all counters not read.

/**

 * port_init_cnt - initialize MIB counter values

 * @hw: 	The hardware instance.

 * @port:	The port index.

 *

 * This routine is used to initialize all counters to zero if the hardware

 * cannot do it after reset.

/*

 * Port functions

/**

 * port_chk - check port register bits

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @offset:	The offset of the port register.

 * @bits:	The data bits to check.

 *

 * This function checks whether the specified bits of the port register are set

 * or not.

 *

 * Return 0 if the bits are not set.

/**

 * port_cfg - set port register bits

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @offset:	The offset of the port register.

 * @bits:	The data bits to set.

 * @set:	The flag indicating whether the bits are to be set or not.

 *

 * This routine sets or resets the specified bits of the port register.

/**

 * port_chk_shift - check port bit

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @addr:	The offset of the register.

 * @shift:	Number of bits to shift.

 *

 * This function checks whether the specified port is set in the register or

 * not.

 *

 * Return 0 if the port is not set.

/**

 * port_cfg_shift - set port bit

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @addr:	The offset of the register.

 * @shift:	Number of bits to shift.

 * @set:	The flag indicating whether the port is to be set or not.

 *

 * This routine sets or resets the specified port in the register.

/**

 * port_r8 - read byte from port register

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @offset:	The offset of the port register.

 * @data:	Buffer to store the data.

 *

 * This routine reads a byte from the port register.

/**

 * port_r16 - read word from port register.

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @offset:	The offset of the port register.

 * @data:	Buffer to store the data.

 *

 * This routine reads a word from the port register.

/**

 * port_w16 - write word to port register.

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @offset:	The offset of the port register.

 * @data:	Data to write.

 *

 * This routine writes a word to the port register.

/**

 * sw_chk - check switch register bits

 * @hw: 	The hardware instance.

 * @addr:	The address of the switch register.

 * @bits:	The data bits to check.

 *

 * This function checks whether the specified bits of the switch register are

 * set or not.

 *

 * Return 0 if the bits are not set.

/**

 * sw_cfg - set switch register bits

 * @hw: 	The hardware instance.

 * @addr:	The address of the switch register.

 * @bits:	The data bits to set.

 * @set:	The flag indicating whether the bits are to be set or not.

 *

 * This function sets or resets the specified bits of the switch register.

 Bandwidth */

 Driver set switch broadcast storm protection at 10% rate. */

 148,800 frames * 67 ms / 100 */

/**

 * sw_cfg_broad_storm - configure broadcast storm threshold

 * @hw: 	The hardware instance.

 * @percent:	Broadcast storm threshold in percent of transmit rate.

 *

 * This routine configures the broadcast storm threshold of the switch.

/**

 * sw_get_broad_storm - get broadcast storm threshold

 * @hw: 	The hardware instance.

 * @percent:	Buffer to store the broadcast storm threshold percentage.

 *

 * This routine retrieves the broadcast storm threshold of the switch.

/**

 * sw_dis_broad_storm - disable broadstorm

 * @hw: 	The hardware instance.

 * @port:	The port index.

 *

 * This routine disables the broadcast storm limit function of the switch.

/**

 * sw_ena_broad_storm - enable broadcast storm

 * @hw: 	The hardware instance.

 * @port:	The port index.

 *

 * This routine enables the broadcast storm limit function of the switch.

/**

 * sw_init_broad_storm - initialize broadcast storm

 * @hw: 	The hardware instance.

 *

 * This routine initializes the broadcast storm limit function of the switch.

/**

 * hw_cfg_broad_storm - configure broadcast storm

 * @hw: 	The hardware instance.

 * @percent:	Broadcast storm threshold in percent of transmit rate.

 *

 * This routine configures the broadcast storm threshold of the switch.

 * It is called by user functions.  The hardware should be acquired first.

/**

 * sw_dis_prio_rate - disable switch priority rate

 * @hw: 	The hardware instance.

 * @port:	The port index.

 *

 * This routine disables the priority rate function of the switch.

/**

 * sw_init_prio_rate - initialize switch prioirty rate

 * @hw: 	The hardware instance.

 *

 * This routine initializes the priority rate function of the switch.

 Communication */

 Spanning Tree */

 VLAN */

 Mirroring */

 Priority */

/**

 * sw_dis_diffserv - disable switch DiffServ priority

 * @hw: 	The hardware instance.

 * @port:	The port index.

 *

 * This routine disables the DiffServ priority function of the switch.

/**

 * sw_dis_802_1p - disable switch 802.1p priority

 * @hw: 	The hardware instance.

 * @port:	The port index.

 *

 * This routine disables the 802.1p priority function of the switch.

/**

 * sw_cfg_replace_null_vid -

 * @hw: 	The hardware instance.

 * @set:	The flag to disable or enable.

 *

/**

 * sw_cfg_replace_vid - enable switch 802.10 priority re-mapping

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @set:	The flag to disable or enable.

 *

 * This routine enables the 802.1p priority re-mapping function of the switch.

 * That allows 802.1p priority field to be replaced with the port's default

 * tag's priority value if the ingress packet's 802.1p priority has a higher

 * priority than port's default tag's priority.

/**

 * sw_cfg_port_based - configure switch port based priority

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @prio:	The priority to set.

 *

 * This routine configures the port based priority of the switch.

/**

 * sw_dis_multi_queue - disable transmit multiple queues

 * @hw: 	The hardware instance.

 * @port:	The port index.

 *

 * This routine disables the transmit multiple queues selection of the switch

 * port.  Only single transmit queue on the port.

/**

 * sw_init_prio - initialize switch priority

 * @hw: 	The hardware instance.

 *

 * This routine initializes the switch QoS priority functions.

	/*

	 * Init all the 802.1p tag priority value to be assigned to different

	 * priority queue.

	/*

	 * Init all the DiffServ priority value to be assigned to priority

	 * queue 0.

 All QoS functions disabled. */

/**

 * port_get_def_vid - get port default VID.

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @vid:	Buffer to store the VID.

 *

 * This routine retrieves the default VID of the port.

/**

 * sw_init_vlan - initialize switch VLAN

 * @hw: 	The hardware instance.

 *

 * This routine initializes the VLAN function of the switch.

 Read 16 VLAN entries from device's VLAN table. */

/**

 * sw_cfg_port_base_vlan - configure port-based VLAN membership

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @member:	The port-based VLAN membership.

 *

 * This routine configures the port-based VLAN membership of the port.

/**

 * sw_get_addr - get the switch MAC address.

 * @hw: 	The hardware instance.

 * @mac_addr:	Buffer to store the MAC address.

 *

 * This function retrieves the MAC address of the switch.

/**

 * sw_set_addr - configure switch MAC address

 * @hw: 	The hardware instance.

 * @mac_addr:	The MAC address.

 *

 * This function configures the MAC address of the switch.

/**

 * sw_set_global_ctrl - set switch global control

 * @hw: 	The hardware instance.

 *

 * This routine sets the global control of the switch function.

 Enable switch MII flow control. */

 Enable aggressive back off algorithm in half duplex mode. */

 Enable automatic fast aging when link changed detected. */

 Enable no excessive collision drop. */

/**

 * port_set_stp_state - configure port spanning tree state

 * @hw: 	The hardware instance.

 * @port:	The port index.

 * @state:	The spanning tree state.

 *

 * This routine configures the spanning tree state of the port.

/*

 * No need to turn on transmit because of port direct mode.

 * Turning on receive is required if static MAC table is not setup.

/*

 * Need to setup static MAC table with override to keep receiving BPDU

 * messages.  See sw_init_stp routine.

/**

 * sw_clr_sta_mac_table - clear static MAC table

 * @hw: 	The hardware instance.

 *

 * This routine clears the static MAC table.

/**

 * sw_init_stp - initialize switch spanning tree support

 * @hw: 	The hardware instance.

 *

 * This routine initializes the spanning tree support of the switch.

/**

 * sw_block_addr - block certain packets from the host port

 * @hw: 	The hardware instance.

 *

 * This routine blocks certain packets from reaching to the host port.

/**

 * hw_r_phy - read data from PHY register

 * @hw: 	The hardware instance.

 * @port:	Port to read.

 * @reg:	PHY register to read.

 * @val:	Buffer to store the read data.

 *

 * This routine reads data from the PHY register.

/**

 * hw_w_phy - write data to PHY register

 * @hw: 	The hardware instance.

 * @port:	Port to write.

 * @reg:	PHY register to write.

 * @val:	Word data to write.

 *

 * This routine writes data to the PHY register.

/*

 * EEPROM access functions

 Initial start bit */

 AT93C operation */

 Address location */

 User defined EEPROM data */

/**

 * eeprom_read - read from AT93C46 EEPROM

 * @hw: 	The hardware instance.

 * @reg:	The register offset.

 *

 * This function reads a word from the AT93C46 EEPROM.

 *

 * Return the data value.

/**

 * eeprom_write - write to AT93C46 EEPROM

 * @hw: 	The hardware instance.

 * @reg:	The register offset.

 * @data:	The data value.

 *

 * This procedure writes a word to the AT93C46 EEPROM.

 Enable write. */

 Erase the register. */

 Check operation complete. */

 Write the register. */

 Check operation complete. */

 Disable write. */

/*

 * Link detection routines

 Not supported. */

 Disable flow control in the half duplex mode. */

/**

 * port_get_link_speed - get current link status

 * @port: 	The port instance.

 *

 * This routine reads PHY registers to determine the current link status of the

 * switch ports.

		/*

		 * Link status is changing all the time even when there is no

		 * cable connection!

 No change to status. */

 Remember the first linked port. */

 Indicate the link just goes down. */

/**

 * port_set_link_speed - set port speed

 * @port: 	The port instance.

 *

 * This routine sets the link speed of the switch ports.

 Check if manual configuration is specified by the user. */

/**

 * port_force_link_speed - force port speed

 * @port: 	The port instance.

 *

 * This routine forces the link speed of the switch ports.

/*

 * KSZ8841 power management functions

/**

 * hw_chk_wol_pme_status - check PMEN pin

 * @hw: 	The hardware instance.

 *

 * This function is used to check PMEN pin is asserted.

 *

 * Return 1 if PMEN pin is asserted; otherwise, 0.

/**

 * hw_clr_wol_pme_status - clear PMEN pin

 * @hw: 	The hardware instance.

 *

 * This routine is used to clear PME_Status to deassert PMEN pin.

 Clear PME_Status to deassert PMEN pin. */

/**

 * hw_cfg_wol_pme - enable or disable Wake-on-LAN

 * @hw: 	The hardware instance.

 * @set:	The flag indicating whether to enable or disable.

 *

 * This routine is used to enable or disable Wake-on-LAN.

/**

 * hw_cfg_wol - configure Wake-on-LAN features

 * @hw: 	The hardware instance.

 * @frame:	The pattern frame bit.

 * @set:	The flag indicating whether to enable or disable.

 *

 * This routine is used to enable or disable certain Wake-on-LAN features.

/**

 * hw_set_wol_frame - program Wake-on-LAN pattern

 * @hw: 	The hardware instance.

 * @i:		The frame index.

 * @mask_size:	The size of the mask.

 * @mask:	Mask to ignore certain bytes in the pattern.

 * @frame_size:	The size of the frame.

 * @pattern:	The frame data.

 *

 * This routine is used to program Wake-on-LAN pattern.

/**

 * hw_add_wol_arp - add ARP pattern

 * @hw: 	The hardware instance.

 * @ip_addr:	The IPv4 address assigned to the device.

 *

 * This routine is used to add ARP pattern for waking up the host.

/**

 * hw_add_wol_bcast - add broadcast pattern

 * @hw: 	The hardware instance.

 *

 * This routine is used to add broadcast pattern for waking up the host.

/**

 * hw_add_wol_mcast - add multicast pattern

 * @hw: 	The hardware instance.

 *

 * This routine is used to add multicast pattern for waking up the host.

 *

 * It is assumed the multicast packet is the ICMPv6 neighbor solicitation used

 * by IPv6 ping command.  Note that multicast packets are filtred through the

 * multicast hash table, so not all multicast packets can wake up the host.

/**

 * hw_add_wol_ucast - add unicast pattern

 * @hw: 	The hardware instance.

 *

 * This routine is used to add unicast pattern to wakeup the host.

 *

 * It is assumed the unicast packet is directed to the device, as the hardware

 * can only receive them in normal case.

/**

 * hw_enable_wol - enable Wake-on-LAN

 * @hw: 	The hardware instance.

 * @wol_enable:	The Wake-on-LAN settings.

 * @net_addr:	The IPv4 address assigned to the device.

 *

 * This routine is used to enable Wake-on-LAN depending on driver settings.

/**

 * hw_init - check driver is correct for the hardware

 * @hw: 	The hardware instance.

 *

 * This function checks the hardware is correct for this driver and sets the

 * hardware up for proper initialization.

 *

 * Return number of ports or 0 if not right.

 Set bus speed to 125MHz. */

 Check KSZ884x chip ID. */

 Setup hardware features or bug workarounds. */

/**

 * hw_reset - reset the hardware

 * @hw: 	The hardware instance.

 *

 * This routine resets the hardware.

 Wait for device to reset. */

 Write 0 to clear device reset. */

/**

 * hw_setup - setup the hardware

 * @hw: 	The hardware instance.

 *

 * This routine setup the hardware for proper operation.

 Change default LED mode. */

 Setup transmit control. */

 Setup receive control. */

 Hardware cannot handle UDP packet in IP fragments. */

/**

 * hw_setup_intr - setup interrupt mask

 * @hw: 	The hardware instance.

 *

 * This routine setup the interrupt mask for proper operation.

/**

 * hw_set_desc_base - set descriptor base addresses

 * @hw: 	The hardware instance.

 * @tx_addr:	The transmit descriptor base.

 * @rx_addr:	The receive descriptor base.

 *

 * This routine programs the descriptor base addresses after reset.

 Set base address of Tx/Rx descriptors. */

/**

 * hw_start_rx - start receiving

 * @hw: 	The hardware instance.

 *

 * This routine starts the receive function of the hardware.

 Notify when the receive stops. */

 Variable overflows. */

/**

 * hw_stop_rx - stop receiving

 * @hw: 	The hardware instance.

 *

 * This routine stops the receive function of the hardware.

/**

 * hw_start_tx - start transmitting

 * @hw: 	The hardware instance.

 *

 * This routine starts the transmit function of the hardware.

/**

 * hw_stop_tx - stop transmitting

 * @hw: 	The hardware instance.

 *

 * This routine stops the transmit function of the hardware.

/**

 * hw_disable - disable hardware

 * @hw: 	The hardware instance.

 *

 * This routine disables the hardware.

/**

 * hw_enable - enable hardware

 * @hw: 	The hardware instance.

 *

 * This routine enables the hardware.

/**

 * hw_alloc_pkt - allocate enough descriptors for transmission

 * @hw: 	The hardware instance.

 * @length:	The length of the packet.

 * @physical:	Number of descriptors required.

 *

 * This function allocates descriptors for transmission.

 *

 * Return 0 if not successful; 1 for buffer copy; or number of descriptors.

 Always leave one descriptor free. */

 Allocate a descriptor for transmission and mark it current. */

 Keep track of number of transmit descriptors used so far. */

 Cannot hold on too much data. */

/**

 * hw_send_pkt - mark packet for transmission

 * @hw: 	The hardware instance.

 *

 * This routine marks the packet for transmission in PCI version.

 Interrupt only after specified number of descriptors used. */

 KSZ8842 supports port directed transmission. */

/**

 * hw_set_addr - set MAC address

 * @hw: 	The hardware instance.

 *

 * This routine programs the MAC address of the hardware when the address is

 * overridden.

/**

 * hw_read_addr - read MAC address

 * @hw: 	The hardware instance.

 *

 * This routine retrieves the MAC address of the hardware.

/**

 * hw_clr_multicast - clear multicast addresses

 * @hw: 	The hardware instance.

 *

 * This routine removes all multicast addresses set in the hardware.

/**

 * hw_set_grp_addr - set multicast addresses

 * @hw: 	The hardware instance.

 *

 * This routine programs multicast addresses for the hardware to accept those

 * addresses.

/**

 * hw_set_multicast - enable or disable all multicast receiving

 * @hw: 	The hardware instance.

 * @multicast:	To turn on or off the all multicast feature.

 *

 * This routine enables/disables the hardware to accept all multicast packets.

 Stop receiving for reconfiguration. */

/**

 * hw_set_promiscuous - enable or disable promiscuous receiving

 * @hw: 	The hardware instance.

 * @prom:	To turn on or off the promiscuous feature.

 *

 * This routine enables/disables the hardware to accept all packets.

 Stop receiving for reconfiguration. */

/**

 * sw_enable - enable the switch

 * @hw: 	The hardware instance.

 * @enable:	The flag to enable or disable the switch

 *

 * This routine is used to enable/disable the switch in KSZ8842.

 Set port-base vlan membership with host port. */

/**

 * sw_setup - setup the switch

 * @hw: 	The hardware instance.

 *

 * This routine setup the hardware switch engine for default operation.

 Enable switch broadcast storm protection at 10% percent rate. */

/**

 * ksz_start_timer - start kernel timer

 * @info:	Kernel timer information.

 * @time:	The time tick.

 *

 * This routine starts the kernel timer after the specified time tick.

 infinity */

/**

 * ksz_stop_timer - stop kernel timer

 * @info:	Kernel timer information.

 *

 * This routine stops the kernel timer.

/**

 * ksz_alloc_soft_desc - allocate software descriptors

 * @desc_info:	Descriptor information structure.

 * @transmit:	Indication that descriptors are for transmit.

 *

 * This local function allocates software descriptors for manipulation in

 * memory.

 *

 * Return 0 if successful.

/**

 * ksz_alloc_desc - allocate hardware descriptors

 * @adapter:	Adapter information structure.

 *

 * This local function allocates hardware descriptors for receiving and

 * transmitting.

 *

 * Return 0 if successful.

 Allocate memory for RX & TX descriptors. */

 Align to the next cache line boundary. */

 Allocate receive/transmit descriptors. */

/**

 * free_dma_buf - release DMA buffer resources

 * @adapter:	Adapter information structure.

 * @dma_buf:	pointer to buf

 * @direction:	to or from device

 *

 * This routine is just a helper function to release the DMA buffer resources.

/**

 * ksz_init_rx_buffers - initialize receive descriptors

 * @adapter:	Adapter information structure.

 *

 * This routine initializes DMA buffers for receiving.

 Set descriptor. */

/**

 * ksz_alloc_mem - allocate memory for hardware descriptors

 * @adapter:	Adapter information structure.

 *

 * This function allocates memory for use by hardware descriptors for receiving

 * and transmitting.

 *

 * Return 0 if successful.

 Determine the number of receive and transmit descriptors. */

 Determine how many descriptors to skip transmit interrupt. */

 Determine the descriptor size. */

 Allocate descriptors. */

/**

 * ksz_free_desc - free software and hardware descriptors

 * @adapter:	Adapter information structure.

 *

 * This local routine frees the software and hardware descriptors allocated by

 * ksz_alloc_desc().

 Reset descriptor. */

 Free memory. */

 Reset resource pool. */

/**

 * ksz_free_buffers - free buffers used in the descriptors

 * @adapter:	Adapter information structure.

 * @desc_info:	Descriptor information structure.

 * @direction:	to or from device

 *

 * This local routine frees buffers used in the DMA buffers.

/**

 * ksz_free_mem - free all resources used by descriptors

 * @adapter:	Adapter information structure.

 *

 * This local routine frees all the resources allocated by ksz_alloc_mem().

 Free transmit buffers. */

 Free receive buffers. */

 Free descriptors. */

/**

 * send_packet - send packet

 * @skb:	Socket buffer.

 * @dev:	Network device.

 *

 * This routine is used to send a packet out to the network.

	/*

	 * KSZ8842 with multiple device interfaces needs to be told which port

	 * to send.

 Hardware will pad the length to 60. */

 Remember the very first descriptor. */

 Get a new descriptor. */

 Keep track of descriptors used so far. */

 Do not release the last descriptor here. */

 current points to the last descriptor. */

 Release the first descriptor. */

	/*

	 * The last descriptor holds the packet so that it can be returned to

	 * network subsystem after all descriptors are transmitted.

 Update transmit statistics. */

/**

 * transmit_cleanup - clean up transmit descriptors

 * @hw_priv:	Network device.

 * @normal:	break if owned

 *

 * This routine is called to clean up the transmitted buffers.

 Get next descriptor which is not hardware owned. */

 This descriptor contains the last buffer in the packet. */

 Release the packet back to network subsystem. */

 Free the transmitted descriptor. */

 Notify the network subsystem that the packet has been sent. */

/**

 * tx_done - transmit done processing

 * @hw_priv:	Network device.

 *

 * This routine is called when the transmit interrupt is triggered, indicating

 * either a packet is sent successfully or there are transmit errors.

/**

 * netdev_tx - send out packet

 * @skb:	Socket buffer.

 * @dev:	Network device.

 *

 * This function is used by the upper network layer to send out a packet.

 *

 * Return 0 if successful; otherwise an error code indicating failure.

 Stop the transmit queue until packet is allocated. */

/**

 * netdev_tx_timeout - transmit timeout processing

 * @dev:	Network device.

 * @txqueue:	index of hanging queue

 *

 * This routine is called when the transmit timer expires.  That indicates the

 * hardware is not running correctly because transmit interrupts are not

 * triggered to free up resources so that the transmit routine can continue

 * sending out packets.  The hardware is reset to correct the problem.

		/*

		 * Only reset the hardware if time between calls is long

		 * enough.

 Received length includes 4-byte CRC. */

 skb->data != skb->head */

		/*

		 * Align socket buffer in 4-byte boundary for better

		 * performance.

 Update receive statistics. */

 Notify upper layer for received packet. */

 Get next descriptor which is not hardware owned. */

 Status valid only when last descriptor bit is set. */

 Get next descriptor which is not hardware owned. */

 Get received port number. */

 Status valid only when last descriptor bit is set. */

 Get next descriptor which is not hardware owned. */

 Get received port number. */

 Status valid only when last descriptor bit is set. */

			/*

			 * Receive without error.  With receive errors

			 * disabled, packets with receive errors will be

			 * dropped, so no need to check the error bit.

 Update receive error statistics. */

 In case receive process is suspended because of overrun. */

 tasklets are interruptible. */

 tasklets are interruptible. */

 Receive just has been stopped. */

 Receive just has been started. */

/**

 * netdev_intr - interrupt handling

 * @irq:	Interrupt number.

 * @dev_id:	Network device.

 *

 * This function is called by upper network layer to signal interrupt.

 *

 * Return IRQ_HANDLED if interrupt is handled.

 Not our interrupt! */

/*

 * Linux network device functions

 No ports in forwarding state. */

/**

 * netdev_close - close network device

 * @dev:	Network device.

 *

 * This function process the close operation of network device.  This is caused

 * by the user command "ifconfig ethX down."

 *

 * Return 0 if successful; otherwise an error code indicating failure.

 Need to shut the port manually in multiple device interfaces mode. */

 Port is closed.  Need to change bridge setting. */

 Delay for receive task to stop scheduling itself. */

 Clean out static MAC table when the switch is shutdown. */

 Remember the network device that requests interrupts. */

/**

 * netdev_open - open network device

 * @dev:	Network device.

 *

 * This function process the open operation of network device.  This is caused

 * by the user command "ifconfig ethX up."

 *

 * Return 0 if successful; otherwise an error code indicating failure.

 Reset device statistics. */

		/*

		 * Initialize to invalid value so that link detection

		 * is done.

 Need to open the port in multiple device interfaces mode. */

 RX errors = rx_errors */

 RX dropped = rx_dropped */

 RX overruns = rx_fifo_errors */

 RX frame = rx_crc_errors + rx_frame_errors + rx_length_errors */

 TX errors = tx_errors */

 TX dropped = tx_dropped */

 TX overruns = tx_fifo_errors */

 TX carrier = tx_aborted_errors + tx_carrier_errors + tx_window_errors */

 collisions = collisions */

/**

 * netdev_query_statistics - query network device statistics

 * @dev:	Network device.

 *

 * This function returns the statistics of the network device.  The device

 * needs not be opened.

 *

 * Return network device statistics.

 Reset to zero to add count later. */

/**

 * netdev_set_mac_address - set network device MAC address

 * @dev:	Network device.

 * @addr:	Buffer of MAC address.

 *

 * This function is used to set the MAC address of the network device.

 *

 * Return 0 to indicate success.

 Turn on/off promiscuous mode. */

		/*

		 * Port is not in promiscuous mode, meaning it is released

		 * from the bridge.

 Turn on/off all multicast mode. */

/**

 * netdev_set_rx_mode

 * @dev:	Network device.

 *

 * This routine is used to set multicast addresses or put the network device

 * into promiscuous mode.

 Cannot use different hashes in multiple device interfaces mode. */

 List too big to support so turn on all multicast mode. */

 Cannot use different MTU in multiple device interfaces mode. */

/**

 * netdev_ioctl - I/O control processing

 * @dev:	Network device.

 * @ifr:	Interface request structure.

 * @cmd:	I/O control code.

 *

 * This function is used to process I/O control calls.

 *

 * Return 0 to indicate success.

 Get address of MII PHY in use. */

 Read MII PHY register. */

 Write MII PHY register. */

/*

 * MII support

/**

 * mdio_read - read PHY register

 * @dev:	Network device.

 * @phy_id:	The PHY id.

 * @reg_num:	The register number.

 *

 * This function returns the PHY register value.

 *

 * Return the register value.

/**

 * mdio_write - set PHY register

 * @dev:	Network device.

 * @phy_id:	The PHY id.

 * @reg_num:	The register number.

 * @val:	The register value.

 *

 * This procedure sets the PHY register value.

/*

 * ethtool support

 These functions use the MII functions in mii.c. */

/**

 * netdev_get_link_ksettings - get network device settings

 * @dev:	Network device.

 * @cmd:	Ethtool command.

 *

 * This function queries the PHY and returns its state in the ethtool command.

 *

 * Return 0 if successful; otherwise an error code.

 Save advertised settings for workaround in next function. */

/**

 * netdev_set_link_ksettings - set network device settings

 * @dev:	Network device.

 * @cmd:	Ethtool command.

 *

 * This function sets the PHY according to the ethtool command.

 *

 * Return 0 if successful; otherwise an error code.

	/*

	 * ethtool utility does not change advertised setting if auto

	 * negotiation is not specified explicitly.

/**

 * netdev_nway_reset - restart auto-negotiation

 * @dev:	Network device.

 *

 * This function restarts the PHY for auto-negotiation.

 *

 * Return 0 if successful; otherwise an error code.

/**

 * netdev_get_link - get network device link status

 * @dev:	Network device.

 *

 * This function gets the link status from the PHY.

 *

 * Return true if PHY is linked and false otherwise.

/**

 * netdev_get_drvinfo - get network driver information

 * @dev:	Network device.

 * @info:	Ethtool driver info data structure.

 *

 * This procedure returns the driver information.

/**

 * netdev_get_regs_len - get length of register dump

 * @dev:	Network device.

 *

 * This function returns the length of the register dump.

 *

 * Return length of the register dump.

/**

 * netdev_get_regs - get register dump

 * @dev:	Network device.

 * @regs:	Ethtool registers data structure.

 * @ptr:	Buffer to store the register values.

 *

 * This procedure dumps the register values in the provided buffer.

/**

 * netdev_get_wol - get Wake-on-LAN support

 * @dev:	Network device.

 * @wol:	Ethtool Wake-on-LAN data structure.

 *

 * This procedure returns Wake-on-LAN support.

/**

 * netdev_set_wol - set Wake-on-LAN support

 * @dev:	Network device.

 * @wol:	Ethtool Wake-on-LAN data structure.

 *

 * This function sets Wake-on-LAN support.

 *

 * Return 0 if successful; otherwise an error code.

 Need to find a way to retrieve the device IP address. */

 Link wakeup cannot really be disabled. */

/**

 * netdev_get_msglevel - get debug message level

 * @dev:	Network device.

 *

 * This function returns current debug message level.

 *

 * Return current debug message flags.

/**

 * netdev_set_msglevel - set debug message level

 * @dev:	Network device.

 * @value:	Debug message flags.

 *

 * This procedure sets debug message level.

/**

 * netdev_get_eeprom_len - get EEPROM length

 * @dev:	Network device.

 *

 * This function returns the length of the EEPROM.

 *

 * Return length of the EEPROM.

/**

 * netdev_get_eeprom - get EEPROM data

 * @dev:	Network device.

 * @eeprom:	Ethtool EEPROM data structure.

 * @data:	Buffer to store the EEPROM data.

 *

 * This function dumps the EEPROM data in the provided buffer.

 *

 * Return 0 if successful; otherwise an error code.

/**

 * netdev_set_eeprom - write EEPROM data

 * @dev:	Network device.

 * @eeprom:	Ethtool EEPROM data structure.

 * @data:	Data buffer.

 *

 * This function modifies the EEPROM data one byte at a time.

 *

 * Return 0 if successful; otherwise an error code.

/**

 * netdev_get_pauseparam - get flow control parameters

 * @dev:	Network device.

 * @pause:	Ethtool PAUSE settings data structure.

 *

 * This procedure returns the PAUSE control flow settings.

/**

 * netdev_set_pauseparam - set flow control parameters

 * @dev:	Network device.

 * @pause:	Ethtool PAUSE settings data structure.

 *

 * This function sets the PAUSE control flow settings.

 * Not implemented yet.

 *

 * Return 0 if successful; otherwise an error code.

/**

 * netdev_get_ringparam - get tx/rx ring parameters

 * @dev:	Network device.

 * @ring:	Ethtool RING settings data structure.

 *

 * This procedure returns the TX/RX ring settings.

/**

 * netdev_get_strings - get statistics identity strings

 * @dev:	Network device.

 * @stringset:	String set identifier.

 * @buf:	Buffer to store the strings.

 *

 * This procedure returns the strings used to identify the statistics.

/**

 * netdev_get_sset_count - get statistics size

 * @dev:	Network device.

 * @sset:	The statistics set number.

 *

 * This function returns the size of the statistics to be reported.

 *

 * Return size of the statistics to be reported.

/**

 * netdev_get_ethtool_stats - get network device statistics

 * @dev:	Network device.

 * @stats:	Ethtool statistics data structure.

 * @data:	Buffer to store the statistics.

 *

 * This procedure returns the statistics.

 Remember first port that requests read. */

/**

 * netdev_set_features - set receive checksum support

 * @dev:	Network device.

 * @features:	New device features (offloads).

 *

 * This function sets receive checksum support setting.

 *

 * Return 0 if successful; otherwise an error code.

 see note in hw_setup() */

/*

 * Hardware monitoring

 Reading MIB counters or requested to read. */

 Need to process receive interrupt. */

 Finish reading counters. */

 Only read MIB counters when the port is connected. */

 Port is just disconnected. */

 Read counters one last time after link is lost. */

 This is used to verify Wake-on-LAN is working. */

 PME is asserted.  Wait 2 seconds to clear it. */

/**

 * dev_monitor - periodic monitoring

 * @t:	timer list containing a network device pointer.

 *

 * This routine is run in a kernel timer to monitor the network device.

/*

 * Linux network device interface functions

 Driver exported variables */

/*

 * This enables multiple network device mode for KSZ8842, which contains a

 * switch with two physical ports.  Some users like to take control of the

 * ports for running Spanning Tree Protocol.  The driver will create an

 * additional eth? device for the other port.

 *

 * Some limitations are the network devices cannot have different MTU and

 * multicast hash tables.

/*

 * As most users select multiple network device mode to use Spanning Tree

 * Protocol, this enables a feature in which most unicast and multicast packets

 * are forwarded inside the switch and not passed to the host.  Only packets

 * that need the host's attention are passed to it.  This prevents the host

 * wasting CPU time to examine each and every incoming packets and do the

 * forwarding itself.

 *

 * As the hack requires the private bridge header, the driver cannot compile

 * with just the kernel headers.

 *

 * Enabling STP support also turns on multiple network device mode.

/*

 * This enables fast aging in the KSZ8842 switch.  Not sure what situation

 * needs that.  However, fast aging is used to flush the dynamic MAC table when

 * STP support is enabled.

/**

 * netdev_init - initialize network device.

 * @dev:	Network device.

 *

 * This function initializes the network device.

 *

 * Return 0 if successful; otherwise an error code indicating failure.

 500 ms timeout */

 500 ms timeout */

	/*

	 * Hardware does not really support IPv6 checksum generation, but

	 * driver actually runs faster with this on.

 Replace x in "Micrel KSZ884x" */

 Assume device is KSZ8841. */

 KSZ8842 has a switch with multiple ports. */

 Multiple network device interfaces are required. */

 Single network device has multiple ports. */

 Default MTU is 1500. */

 Read MAC address and initialize override address if not overridden. */

 Multiple device interfaces mode requires a second MAC address. */

 500 ms timeout */

 MTU range: 60 - 1894 */

 Need to find a way to retrieve the device IP address. */

 SPDX-License-Identifier: GPL-2.0-only

/* drivers/net/ethernet/micrel/ks8851.c

 *

 * Copyright 2009 Simtec Electronics

 *	http://www.simtec.co.uk/

 *	Ben Dooks <ben@simtec.co.uk>

/**

 * struct ks8851_net_spi - KS8851 SPI driver private data

 * @lock: Lock to ensure that the device is not accessed when busy.

 * @tx_work: Work queue for tx packets

 * @ks8851: KS8851 driver common private data

 * @spidev: The spi device we're bound to.

 * @spi_msg1: pre-setup SPI transfer with one message, @spi_xfer1.

 * @spi_msg2: pre-setup SPI transfer with two messages, @spi_xfer2.

 * @spi_xfer1: @spi_msg1 SPI transfer structure

 * @spi_xfer2: @spi_msg2 SPI transfer structure

 *

 * The @lock ensures that the chip is protected when certain operations are

 * in progress. When the read or write packet transfer is in progress, most

 * of the chip registers are not ccessible until the transfer is finished and

 * the DMA has been de-asserted.

 SPI frame opcodes */

 shift for byte-enable data */

 turn register number and byte-enable mask into data for start of packet */

/**

 * ks8851_lock_spi - register access lock

 * @ks: The chip state

 * @flags: Spinlock flags

 *

 * Claim chip register access lock

/**

 * ks8851_unlock_spi - register access unlock

 * @ks: The chip state

 * @flags: Spinlock flags

 *

 * Release chip register access lock

/* SPI register read/write calls.

 *

 * All these calls issue SPI transactions to access the chip's registers. They

 * all require that the necessary lock is held to prevent accesses when the

 * chip is busy transferring packet data (RX/TX FIFO accesses).

/**

 * ks8851_wrreg16_spi - write 16bit register value to chip via SPI

 * @ks: The chip state

 * @reg: The register address

 * @val: The value to write

 *

 * Issue a write to put the value @val into the register specified in @reg.

/**

 * ks8851_rdreg - issue read register command and return the data

 * @ks: The device state

 * @op: The register address and byte enables in message format.

 * @rxb: The RX buffer to return the result into

 * @rxl: The length of data expected.

 *

 * This is the low level read call that issues the necessary spi message(s)

 * to read data from the register specified in @op.

/**

 * ks8851_rdreg16_spi - read 16 bit register from device via SPI

 * @ks: The chip information

 * @reg: The register address

 *

 * Read a 16bit register from the chip, returning the result

/**

 * ks8851_rdfifo_spi - read data from the receive fifo via SPI

 * @ks: The device state.

 * @buff: The buffer address

 * @len: The length of the data to read

 *

 * Issue an RXQ FIFO read command and read the @len amount of data from

 * the FIFO into the buffer specified by @buff.

 set the operation we're issuing */

/**

 * ks8851_wrfifo_spi - write packet to TX FIFO via SPI

 * @ks: The device state.

 * @txp: The sk_buff to transmit.

 * @irq: IRQ on completion of the packet.

 *

 * Send the @txp to the chip. This means creating the relevant packet header

 * specifying the length of the packet and the other information the chip

 * needs, such as IRQ on completion. Send the header and the packet data to

 * the device.

 irq on completion */

 start header at txb[1] to align txw entries */

/**

 * ks8851_rx_skb_spi - receive skbuff

 * @ks: The device state

 * @skb: The skbuff

/**

 * ks8851_tx_work - process tx packet(s)

 * @work: The work strucutre what was scheduled.

 *

 * This is called when a number of packets have been scheduled for

 * transmission and need to be sent to the device.

/**

 * ks8851_flush_tx_work_spi - flush outstanding TX work

 * @ks: The device state

/**

 * calc_txlen - calculate size of message to send packet

 * @len: Length of data

 *

 * Returns the size of the TXFIFO message needed to send

 * this packet.

/**

 * ks8851_start_xmit_spi - transmit packet using SPI

 * @skb: The buffer to transmit

 * @dev: The device used to transmit the packet.

 *

 * Called by the network layer to transmit the @skb. Queue the packet for

 * the device and schedule the necessary work to transmit the packet when

 * it is free.

 *

 * We do this to firstly avoid sleeping with the network device locked,

 * and secondly so we can round up more than one packet to transmit which

 * means we can try and avoid generating too many transmit done interrupts.

 Link Change */	\

 TX done */		\

 RX done */		\

 SPI bus error */	\

 TX process stop */	\

 RX process stop */

 initialise pre-made spi transfer messages */

 SPDX-License-Identifier: GPL-2.0-only

/* drivers/net/ethernet/micrel/ks8851.c

 *

 * Copyright 2009 Simtec Electronics

 *	http://www.simtec.co.uk/

 *	Ben Dooks <ben@simtec.co.uk>

 Byte Enable 3 */

 Byte Enable 2 */

 Byte Enable 1 */

 Byte Enable 0 */

/**

 * struct ks8851_net_par - KS8851 Parallel driver private data

 * @ks8851: KS8851 driver common private data

 * @lock: Lock to ensure that the device is not accessed when busy.

 * @hw_addr	: start address of data register.

 * @hw_addr_cmd	: start address of command register.

 * @cmd_reg_cache	: command register cached.

 *

 * The @lock ensures that the chip is protected when certain operations are

 * in progress. When the read or write packet transfer is in progress, most

 * of the chip registers are not accessible until the transfer is finished

 * and the DMA has been de-asserted.

/**

 * ks8851_lock_par - register access lock

 * @ks: The chip state

 * @flags: Spinlock flags

 *

 * Claim chip register access lock

/**

 * ks8851_unlock_par - register access unlock

 * @ks: The chip state

 * @flags: Spinlock flags

 *

 * Release chip register access lock

/**

 * ks_check_endian - Check whether endianness of the bus is correct

 * @ks	  : The chip information

 *

 * The KS8851-16MLL EESK pin allows selecting the endianness of the 16bit

 * bus. To maintain optimum performance, the bus endianness should be set

 * such that it matches the endianness of the CPU.

	/*

	 * Read CIDER register first, however read it the "wrong" way around.

	 * If the endian strap on the KS8851-16MLL in incorrect and the chip

	 * is operating in different endianness than the CPU, then the meaning

	 * of BE[3:0] byte-enable bits is also swapped such that:

	 *    BE[3,2,1,0] becomes BE[1,0,3,2]

	 *

	 * Luckily for us, the byte-enable bits are the top four MSbits of

	 * the address register and the CIDER register is at offset 0xc0.

	 * Hence, by reading address 0xc0c0, which is not impacted by endian

	 * swapping, we assert either BE[3:2] or BE[1:0] while reading the

	 * CIDER register.

	 *

	 * If the bus configuration is correct, reading 0xc0c0 asserts

	 * BE[3:2] and this read returns 0x0000, because to read register

	 * with bottom two LSbits of address set to 0, BE[1:0] must be

	 * asserted.

	 *

	 * If the bus configuration is NOT correct, reading 0xc0c0 asserts

	 * BE[1:0] and this read returns non-zero 0x8872 value.

/**

 * ks8851_wrreg16_par - write 16bit register value to chip

 * @ks: The chip state

 * @reg: The register address

 * @val: The value to write

 *

 * Issue a write to put the value @val into the register specified in @reg.

/**

 * ks8851_rdreg16_par - read 16 bit register from chip

 * @ks: The chip information

 * @reg: The register address

 *

 * Read a 16bit register from the chip, returning the result

/**

 * ks8851_rdfifo_par - read data from the receive fifo

 * @ks: The device state.

 * @buff: The buffer address

 * @len: The length of the data to read

 *

 * Issue an RXQ FIFO read command and read the @len amount of data from

 * the FIFO into the buffer specified by @buff.

/**

 * ks8851_wrfifo_par - write packet to TX FIFO

 * @ks: The device state.

 * @txp: The sk_buff to transmit.

 * @irq: IRQ on completion of the packet.

 *

 * Send the @txp to the chip. This means creating the relevant packet header

 * specifying the length of the packet and the other information the chip

 * needs, such as IRQ on completion. Send the header and the packet data to

 * the device.

 irq on completion */

/**

 * ks8851_rx_skb_par - receive skbuff

 * @ks: The device state.

 * @skb: The skbuff

/**

 * ks8851_start_xmit_par - transmit packet

 * @skb: The buffer to transmit

 * @dev: The device used to transmit the packet.

 *

 * Called by the network layer to transmit the @skb. Queue the packet for

 * the device and schedule the necessary work to transmit the packet when

 * it is free.

 *

 * We do this to firstly avoid sleeping with the network device locked,

 * and secondly so we can round up more than one packet to transmit which

 * means we can try and avoid generating too many transmit done interrupts.

 Link Change */	\

 RX done */		\

 RX process stop */

 SPDX-License-Identifier: GPL-2.0-only

/* drivers/net/ethernet/micrel/ks8851.c

 *

 * Copyright 2009 Simtec Electronics

 *	http://www.simtec.co.uk/

 *	Ben Dooks <ben@simtec.co.uk>

/**

 * ks8851_lock - register access lock

 * @ks: The chip state

 * @flags: Spinlock flags

 *

 * Claim chip register access lock

/**

 * ks8851_unlock - register access unlock

 * @ks: The chip state

 * @flags: Spinlock flags

 *

 * Release chip register access lock

/**

 * ks8851_wrreg16 - write 16bit register value to chip

 * @ks: The chip state

 * @reg: The register address

 * @val: The value to write

 *

 * Issue a write to put the value @val into the register specified in @reg.

/**

 * ks8851_rdreg16 - read 16 bit register from device

 * @ks: The chip information

 * @reg: The register address

 *

 * Read a 16bit register from the chip, returning the result

/**

 * ks8851_soft_reset - issue one of the soft reset to the device

 * @ks: The device state.

 * @op: The bit(s) to set in the GRR

 *

 * Issue the relevant soft-reset command to the device's GRR register

 * specified by @op.

 *

 * Note, the delays are in there as a caution to ensure that the reset

 * has time to take effect and then complete. Since the datasheet does

 * not currently specify the exact sequence, we have chosen something

 * that seems to work with our device.

 wait a short time to effect reset */

 wait for condition to clear */

/**

 * ks8851_set_powermode - set power mode of the device

 * @ks: The device state

 * @pwrmode: The power mode value to write to KS_PMECR.

 *

 * Change the power mode of the chip.

/**

 * ks8851_write_mac_addr - write mac address to device registers

 * @dev: The network device

 *

 * Update the KS8851 MAC address registers from the address in @dev.

 *

 * This call assumes that the chip is not running, so there is no need to

 * shutdown the RXQ process whilst setting this.

	/*

	 * Wake up chip in case it was powered off when stopped; otherwise,

	 * the first write to the MAC address does not take effect.

/**

 * ks8851_read_mac_addr - read mac address from device registers

 * @dev: The network device

 *

 * Update our copy of the KS8851 MAC address from the registers of @dev.

/**

 * ks8851_init_mac - initialise the mac address

 * @ks: The device structure

 * @np: The device node pointer

 *

 * Get or create the initial mac address for the device and then set that

 * into the station address register. A mac address supplied in the device

 * tree takes precedence. Otherwise, if there is an EEPROM present, then

 * we try that. If no valid mac address is found we use eth_random_addr()

 * to create a new one.

/**

 * ks8851_dbg_dumpkkt - dump initial packet contents to debug

 * @ks: The device state

 * @rxpkt: The data for the received packet

 *

 * Dump the initial data from the packet to dev_dbg().

/**

 * ks8851_rx_skb - receive skbuff

 * @ks: The device state.

 * @skb: The skbuff

/**

 * ks8851_rx_pkts - receive packets from the host

 * @ks: The device information.

 *

 * This is called from the IRQ work queue when the system detects that there

 * are packets in the receive queue. Find out how many packets there are and

 * read them from the FIFO.

	/* Currently we're issuing a read per packet, but we could possibly

	 * improve the code by issuing a single read, getting the receive

	 * header, allocating the packet and then reading the packet data

	 * out in one go.

	 *

	 * This form of operation would require us to hold the SPI bus'

	 * chipselect low during the entie transaction to avoid any

	 * reset to the data stream coming from the chip.

 the length of the packet includes the 32bit CRC */

 set dma read address */

 start DMA access */

				/* 4 bytes of status header + 4 bytes of

				 * garbage: we put them before ethernet

				 * header, so that they are copied,

				 * but ignored.

 end DMA access and dequeue packet */

/**

 * ks8851_irq - IRQ handler for dealing with interrupt requests

 * @irq: IRQ number

 * @_ks: cookie

 *

 * This handler is invoked when the IRQ line asserts to find out what happened.

 * As we cannot allow ourselves to sleep in HARDIRQ context, this handler runs

 * in thread context.

 *

 * Read the interrupt status, work out what needs to be done and then clear

 * any of the interrupts that are not needed.

 no lock here, tx queue should have been stopped */

		/* update our idea of how much tx space is available to the

		/* the datasheet says to disable the rx interrupt during

		 * packet read-out, however we're masking the interrupt

		 * from the device so do not bother masking just the RX

	/* if something stopped the rx process, probably due to wanting

	 * to change the rx settings, then do something about restarting

 update the multicast hash table */

/**

 * ks8851_flush_tx_work - flush outstanding TX work

 * @ks: The device state

/**

 * ks8851_net_open - open network device

 * @dev: The network device being opened.

 *

 * Called when the network device is marked active, such as a user executing

 * 'ifconfig up' on the device.

	/* lock the card, even if we may not actually be doing anything

 bring chip out of any power saving mode it was in */

	/* issue a soft reset to the RX/TX QMU to put it into a known

 setup transmission parameters */

 enable transmit process */

 pad to min length */

 add CRC */

 enable flow control */

 auto-increment tx data, reset tx pointer */

 setup receiver control */

  from mac filter */

 enable flow control */

 broadcast enable */

 unicast enable */

 enable rx block */

 transfer entire frames out in one go */

 set receive counter timeouts */

 1ms after first frame to IRQ */

 >4Kbytes in buffer to IRQ */

 10 frames to IRQ */

 IRQ on frame count exceeded */

 IRQ on byte count exceeded */

 IRQ on time exceeded */

 clear then enable interrupts */

/**

 * ks8851_net_stop - close network device

 * @dev: The device being closed.

 *

 * Called to close down a network device which has been active. Cancell any

 * work, shutdown the RX and TX process and then place the chip into a low

 * power state whilst it is not being used.

 turn off the IRQs and ack any outstanding */

 stop any outstanding work */

 shutdown RX process */

 shutdown TX process */

 set powermode to soft power down to save power */

 ensure any queued tx buffers are dumped */

/**

 * ks8851_start_xmit - transmit packet

 * @skb: The buffer to transmit

 * @dev: The device used to transmit the packet.

 *

 * Called by the network layer to transmit the @skb. Queue the packet for

 * the device and schedule the necessary work to transmit the packet when

 * it is free.

 *

 * We do this to firstly avoid sleeping with the network device locked,

 * and secondly so we can round up more than one packet to transmit which

 * means we can try and avoid generating too many transmit done interrupts.

/**

 * ks8851_rxctrl_work - work handler to change rx mode

 * @work: The work structure this belongs to.

 *

 * Lock the device and issue the necessary changes to the receive mode from

 * the network device layer. This is done so that we can do this without

 * having to sleep whilst holding the network device lock.

 *

 * Since the recommendation from Micrel is that the RXQ is shutdown whilst the

 * receive parameters are programmed, we issue a write to disable the RXQ and

 * then wait for the interrupt handler to be triggered once the RXQ shutdown is

 * complete. The interrupt handler then writes the new values into the chip.

 need to shutdown RXQ before modifying filter parameters */

 interface to receive everything */

 accept all multicast packets */

 accept some multicast */

 get top six bits */

 just accept broadcast / unicast */

 unicast enable */

 broadcast enable */

 RX process enable */

 enable flow control */

 schedule work to do the actual set of the data if needed */

 ethtool support */

 EEPROM support */

 default - eeprom access on */

/**

 * ks8851_eeprom_claim - claim device EEPROM and activate the interface

 * @ks: The network device state.

 *

 * Check for the presence of an EEPROM, and then activate software access

 * to the device.

 start with clock low, cs high */

/**

 * ks8851_eeprom_release - release the EEPROM interface

 * @ks: The device state

 *

 * Release the software access to the device EEPROM

 currently only support byte writing */

	/* ethtool currently only supports writing bytes, which means

 must be 2 byte aligned */

 currently, we assume it is an 93C46 attached, so return 128 */

 MII interface controls */

/**

 * ks8851_phy_reg - convert MII register into a KS8851 register

 * @reg: MII register number.

 *

 * Return the KS8851 register number for the corresponding MII PHY register

 * if possible. Return zero if the MII register has no direct mapping to the

 * KS8851 register set.

/**

 * ks8851_phy_read - MII interface PHY register read.

 * @dev: The network device the PHY is on.

 * @phy_addr: Address of PHY (ignored as we only have one)

 * @reg: The register to read.

 *

 * This call reads data from the PHY register specified in @reg. Since the

 * device does not support all the MII registers, the non-existent values

 * are always returned as zero.

 *

 * We return zero for unsupported registers as the MII code does not check

 * the value returned for any error status, and simply returns it to the

 * caller. The mii-tool that the driver was tested with takes any -ve error

 * as real PHY capabilities, thus displaying incorrect data to the user.

 no error return allowed, so use zero */

 KS8851 PHY ID registers are swapped in HW, swap them back. */

/**

 * ks8851_read_selftest - read the selftest memory info.

 * @ks: The device state

 *

 * Read and check the TX/RX memory selftest information.

 driver bus management functions */

 setup EEPROM state */

 setup mii state */

 set the default message enable */

 issue a global soft reset to reset the device. */

 simple check for a valid chip being connected to the bus */

 cache the contents of the CCR register for EEPROM, etc. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ks8842.c timberdale KS8842 ethernet driver

 * Copyright (c) 2009 Intel Corporation

/* Supports:

 * The Micrel KS8842 behind the timberdale FPGA

 * The genuine Micrel KS8841/42 device with ISA 16/32bit bus interface

 Timberdale specific Registers */

 KS8842 registers */

 bank 0 registers */

 bank 2 registers */

 bank 3 registers */

 bank 16 registers */

 bank 17 registers */

 bank 18 registers */

/* When running via timberdale in DMA mode, the RX interrupt should be

   enabled in the KS8842, but not in the FPGA IP, since the IP handles

   RX DMA internally.

   TX interrupts are not needed it is handled by the FPGA the driver is

   notified via DMA callbacks.

 bank 32 registers */

 bank 39 registers */

 bank 45 registers */

 bank 46 registers */

 bank 48 registers */

 bank 49 registers */

 flags passed by platform_device for configuration */

 0=Timeberdale(FPGA), 1=Micrel */

  1=16bit, 0=32bit */

 copy of platform_device config */

 spinlock to be interrupt safe */

		/* The KS8842 goes haywire when doing softare reset

		* a work around in the timberdale IP is implemented to

		* do a hardware reset instead

		ks8842_write16(adapter, 3, 1, REG_GRR);

		msleep(10);

		iowrite16(0, adapter->hw_addr + REG_GRR);

 check the status of the link */

 reset the HW */

 Enable QMU Transmit flow control / transmit padding / Transmit CRC */

	/* enable the receiver, uni + multi + broadcast + flow ctrl

 TX frame pointer autoincrement */

 RX frame pointer autoincrement */

 RX 2 kb high watermark */

 aggressive back off in half duplex */

 enable no excessive collison drop */

 Enable port 1 force flow control / back pressure / transmit / recv */

 restart port auto-negotiation */

 Enable the transmitter */

 Enable the receiver */

 clear all interrupts */

 enable interrupts */

		/* When running in DMA Mode the RX interrupt is not enabled in

		   timberdale because RX data is received by DMA callbacks

		   it must still be enabled in the KS8842 because it indicates

 enable the switch */

		/*

		the sequence of saving mac addr between MAC and Switch is

		different.

 make sure the switch port uses the same MAC as the QMU */

		/*

		the sequence of saving mac addr between MAC and Switch is

		different.

 transfer ongoing */

 copy data to the TX buffer */

 the control word, enable IRQ, port 1 and the length */

 Port 1 */

 make sure the length is a multiple of 4 */

 check FIFO buffer space, we need space for CRC and command bits */

 copy buffer */

 the control word, enable IRQ, port 1 and the length */

 copy buffer */

 enqueue packet */

 kick next transfer going */

 now handle the data we got */

 check the status */

 reserve 4 bytes which is the status word */

 check the status */

 set high watermark to 3K */

 release the frame */

 set high watermark to 2K */

 read current bank to be able to set it back */

	/* when running in DMA mode, do not ack RX interrupts, it is handled

	   internally by timberdale, otherwise it's DMA FIFO:s would stop

 Ack */

 Ack in the timberdale IP as well */

 should not get IRQ_RX when running DMA mode */

 should only happen when in PIO mode */

 re-enable interrupts, put back the bank selection register */

	/* Make sure timberdale continues DMA operations, they are stopped while

 disable all but RX IRQ, since the FPGA relies on it*/

 disable IRQ */

 schedule tasklet */

	/* After an interrupt, tell timberdale to continue DMA operations.

	   DMA is disabled while we are handling the ks8842 because we might

 schedule tasklet */

 allocate DMA buffer */

 Netdevice operations */

 start RX dma */

 reset the HW */

 free the irq */

 disable the switch */

 for now only allow one transfer at the time */

 disable interrupts */

 DMA is only supported when accessed via timberdale */

 Check if a mac address was given */

 an address was passed, use it */

 atp.c: Attached (pocket) ethernet adapter driver for linux. */

/*

	This is a driver for commonly OEM pocket (parallel port)

	ethernet adapters based on the Realtek RTL8002 and RTL8012 chips.



	Written 1993-2000 by Donald Becker.



	This software may be used and distributed according to the terms of

	the GNU General Public License (GPL), incorporated herein by reference.

	Drivers based on or derived from this code fall under the GPL and must

	retain the authorship, copyright and license notice.  This file is not

	a complete program and may only be used when the entire operating

	system is licensed under the GPL.



	Copyright 1993 United States Government as represented by the Director,

	National Security Agency.  Copyright 1994-2000 retained by the original

	author, Donald Becker. The timer-based reset code was supplied in 1995

	by Bill Carlson, wwc@super.org.



	The author may be reached as becker@scyld.com, or C/O

	Scyld Computing Corporation

	410 Severn Ave., Suite 210

	Annapolis MD 21403



	Support information and updates available at

	http://www.scyld.com/network/atp.html





	Modular support/softnet added by Alan Cox.

	_bit abuse fixed up by Alan Cox



/* The user-configurable values.

 1 normal messages, 0 quiet .. 7 verbose. */

 Maximum events (Rx packets, etc.) to handle at each interrupt. */

 The standard set of ISA module parameters. */

 The data transfer mode. */

 Operational parameters that are set at compile time. */

 Time in jiffies before concluding the transmitter is hung. */

/*

	This file is a device driver for the RealTek (aka AT-Lan-Tec) pocket

	ethernet adapter.  This is a common low-cost OEM pocket ethernet

	adapter, sold under many names.



  Sources:

	This driver was written from the packet driver assembly code provided by

	Vincent Bono of AT-Lan-Tec.	 Ever try to figure out how a complicated

	device works just from the assembly code?  It ain't pretty.  The following

	description is written based on guesses and writing lots of special-purpose

	code to test my theorized operation.



	In 1997 Realtek made available the documentation for the second generation

	RTL8012 chip, which has lead to several driver improvements.

	  http://www.realtek.com.tw/



					Theory of Operation



	The RTL8002 adapter seems to be built around a custom spin of the SEEQ

	controller core.  It probably has a 16K or 64K internal packet buffer, of

	which the first 4K is devoted to transmit and the rest to receive.

	The controller maintains the queue of received packet and the packet buffer

	access pointer internally, with only 'reset to beginning' and 'skip to next

	packet' commands visible.  The transmit packet queue holds two (or more?)

	packets: both 'retransmit this packet' (due to collision) and 'transmit next

	packet' commands must be started by hand.



	The station address is stored in a standard bit-serial EEPROM which must be

	read (ughh) by the device driver.  (Provisions have been made for

	substituting a 74S288 PROM, but I haven't gotten reports of any models

	using it.)  Unlike built-in devices, a pocket adapter can temporarily lose

	power without indication to the device driver.  The major effect is that

	the station address, receive filter (promiscuous, etc.) and transceiver

	must be reset.



	The controller itself has 16 registers, some of which use only the lower

	bits.  The registers are read and written 4 bits at a time.  The four bit

	register address is presented on the data lines along with a few additional

	timing and control bits.  The data is then read from status port or written

	to the data port.



	Correction: the controller has two banks of 16 registers.  The second

	bank contains only the multicast filter table (now used) and the EEPROM

	access registers.



	Since the bulk data transfer of the actual packets through the slow

	parallel port dominates the driver's running time, four distinct data

	(non-register) transfer modes are provided by the adapter, two in each

	direction.  In the first mode timing for the nibble transfers is

	provided through the data port.  In the second mode the same timing is

	provided through the control port.  In either case the data is read from

	the status port and written to the data port, just as it is accessing

	registers.



	In addition to the basic data transfer methods, several more are modes are

	created by adding some delay by doing multiple reads of the data to allow

	it to stabilize.  This delay seems to be needed on most machines.



	The data transfer mode is stored in the 'dev->if_port' field.  Its default

	value is '4'.  It may be overridden at boot-time using the third parameter

	to the "ether=..." initialization.



	The header file <atp.h> provides inline functions that encapsulate the

	register and data access methods.  These functions are hand-tuned to

	generate reasonable object code.  This header file also documents my

	interpretations of the device registers.

 The number of low I/O ports used by the ethercard. */

 Sequence to switch an 8012 from printer mux to ethernet mode. */

 Media selection timer. */

 Timer dev. */

 Last Rx, in jiffies, to handle Rx hang. */

 Number of packet retransmissions. */

 Current Rx filter e.g. promiscuous, etc. */

/* This code, written by wwc@super.org, resets the adapter every

   TIMED_CHECKER ticks.  This recovers from an unknown error which

 Index to functions, as function prototypes. */

 A list of all installed ATP devices, for removing the driver module. */

/* Check for a network adapter of this type, and return '0' iff one exists.

   If dev->base_addr == 0, probe all likely locations.

   If dev->base_addr == 1, always return failure.

   If dev->base_addr == 2, allocate space for the device and return success

   (detachable devices only).



   FIXME: we should use the parport layer for this

 Check a single specified location. */

 Don't probe at all. */

	/* Save the original value of the Control register, in case we guessed

 IRQEN=0, SLCTB=high INITB=high, AUTOFDB=high, STBB=high. */

 Turn off the printer multiplexer on the 8012. */

 Turn off the printer multiplexer on the 8012. */

 udelay() here? */

 The pocket adapter probe failed, restore the control register. */

 Find the IRQ used by triggering an interrupt. */

 No accept mode, IRQ out. */

 Enable Tx and Rx. */

 Omit autoIRQ routine for now. Use "table lookup" instead.  Uhgggh. */

 Disable Tx and Rx units. */

 Read the station address PROM.  */

 Reset the ethernet hardware and activate the printer pass-through. */

 For the ATP adapter the "if_port" is really the data transfer mode. */

 Read the station address PROM, usually a word-wide EEPROM. */

 Point to the EEPROM control registers. */

	/* Some adapters have the station address at offset 15 instead of offset

/*

  An EEPROM read command starts by shifting out 0x60+address, and then

  shifting in the serial data. See the NatSemi databook for details.

 *		   ________________

 * CS : __|

 *			   ___	   ___

 * CLK: ______|	  |___|	  |

 *		 __ _______ _______

 * DI :	 __X_______X_______X

 * DO :	 _________X_______X

/* Open/initialize the board.  This is called (in the current kernel)

   sometime after booting when the 'ifconfig' program is run.



   This routine sets everything up anew at each open, even

   registers that "should" only need to be set once at boot, so that

   there is non-reboot way to recover if something goes wrong.



   This is an attachable device: if there is no private entry then it wasn't

   probed for at boot-time, and we need to probe for it again.

	/* The interrupt line is turned off (tri-stated) when the device isn't in

	   use.  That's especially important for "attached" interfaces where the

/* This routine resets the hardware.  We initialize everything, assuming that

 Turn off the printer multiplexer on the 8012. */

 Enable the interrupt line from the serial port. */

 Unmask the interesting interrupts. */

 Write the packet out, starting with the write addr. */

 Write the packet out in slow mode. */

 Terminate the Tx frame.  End of write: ECB. */

 Try to restart the adapter. */

 prevent tx timeout */

	/* Disable interrupts by writing 0x00 to the Interrupt Mask Register.

 Redundant */

 Re-enable the LPT interrupts. */

/* The typical workload of the driver:

 Disable additional spurious interrupts. */

 The adapter's output is currently the IRQ line, switch it to data. */

 Clear the Rx interrupt. */

				/* We acknowledged the normal Rx interrupt, so if the interrupt

 Overrun. */

 Set to no-accept mode long enough to remove a packet. */

 Clear the interrupt and return to normal Rx mode. */

			/* Clear the Tx interrupt.  We should check for too many failures

 Attempt to retransmit. */

 Finish up the transmit. */

 Inform upper layers. */

	/* This following code fixes a rare (and very difficult to track down)

 Tell the adapter that it can go back to using the output line as IRQ. */

 Enable the physical interrupt line, which is sure to be low until.. */

 .. we enable the interrupt sources. */

 Hmmm, really needed? */

/* This following code fixes a rare (and very difficult to track down)

 We have a good packet(s), get it/them out of the buffers. */

 Process the received packet. */

 Malloc up new buffer. The "-4" omits the FCS (CRC). */

 Align IP on 16 byte boundaries */

 Mode 0 or 1 */

 Mode 0 or 1 */

 Mode 2 or 3 */

 The inverse routine to net_open(). */

 Flush the Tx and disable Rx here. */

 Free the IRQ line. */

 Reset the ethernet hardware and activate the printer pass-through. */

/*

 *	Set or clear the multicast filter for this adapter.

 Emit version even if no cards detected. */

 No need to release_region(), since we never snarf it. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * r8169_phy_config.c: RealTek 8169/8168/8101 ethernet driver.

 *

 * Copyright (c) 2002 ShuChen <shuchen@realtek.com.tw>

 * Copyright (c) 2003 - 2007 Francois Romieu <romieu@fr.zoreil.com>

 * Copyright (c) a lot of people too. Please respect their work.

 *

 * See MAINTAINERS file for support contact information.

 Channel Estimation */

	/*

	 * Tx Error Issue

	 * Enhance line driver power

	/*

	 * Can not link to 1Gbps with bad cable

	 * Decrease SNR threshold form 21.07dB to 19.04dB

	/*

	 * Rx Error Issue

	 * Fine Tune Switching regulator parameter

 RSET couple improve */

 Fine tune PLL performance */

 Fine tune PLL performance */

 Switching regulator Slew rate */

 Channel estimation fine tune */

 Enable Delay cap */

 Update PFM & 10M TX idle timer */

 DCO enable for 10M IDLE Power */

 For impedance matching */

 PHY auto speed down */

 Enable Delay cap */

 Channel estimation fine tune */

 Green Setting */

 For 4-corner performance improve */

 PHY auto speed down */

 improve 10M EEE waveform */

 Improve 2-pair detection performance */

 Green feature */

 For 4-corner performance improve */

 PHY auto speed down */

 Improve 10M EEE waveform */

 Channel estimation fine tune */

 Modify green table for giga & fnet */

 Modify green table for 10M */

 Disable hiimpedance detection (RTCT) */

 Improve 2-pair detection performance */

 Improve 2-pair detection performance */

 Channel estimation fine tune */

 Modify green table for giga & fnet */

 Modify green table for 10M */

 Disable hiimpedance detection (RTCT) */

 Modify green table for giga */

 uc same-seed solution */

 Green feature */

 Enable PHY auto speed down */

 EEE auto-fallback function */

 Enable UC LPF tune function */

 Improve SWR Efficiency */

 CHN EST parameters adjust - giga master */

 CHN EST parameters adjust - giga slave */

 CHN EST parameters adjust - fnet */

 enable R-tune & PGA-retune function */

 SAR ADC performance */

 disable phy pfm mode */

 CHIN EST parameter update */

 enable R-tune & PGA-retune function */

 Modify rlen (TX LPF corner frequency) level */

 disable phy pfm mode */

 Enable PHY auto speed down */

 Enable EEE auto-fallback function */

 Enable UC LPF tune function */

 set rg_sel_sdm_rate */

 Enable UC LPF tune function */

 Set rg_sel_sdm_rate */

 Channel estimation parameters */

 Force PWM-mode */

 CHN EST parameters adjust - fnet */

 Disable ALDPS before ram code */

 Disable ALDPS before setting firmware */

 EEE setting */

 Disable ALDPS before ram code */

 PCI devices. */

 PCI-E devices. */

 8139cp.c: A Linux PCI Ethernet driver for the RealTek 8139C+ chips. */

/*

	Copyright 2001-2004 Jeff Garzik <jgarzik@pobox.com>



	Copyright (C) 2001, 2002 David S. Miller (davem@redhat.com) [tg3.c]

	Copyright (C) 2000, 2001 David S. Miller (davem@redhat.com) [sungem.c]

	Copyright 2001 Manfred Spraul				    [natsemi.c]

	Copyright 1999-2001 by Donald Becker.			    [natsemi.c]

	Written 1997-2001 by Donald Becker.			    [8139too.c]

	Copyright 1998-2001 by Jes Sorensen, <jes@trained-monkey.org>. [acenic.c]



	This software may be used and distributed according to the terms of

	the GNU General Public License (GPL), incorporated herein by reference.

	Drivers based on or derived from this code fall under the GPL and must

	retain the authorship, copyright and license notice.  This file is not

	a complete program and may only be used when the entire operating

	system is licensed under the GPL.



	See the file COPYING in this distribution for more information.



	Contributors:



		Wake-on-LAN support - Felipe Damasio <felipewd@terra.com.br>

		PCI suspend/resume  - Felipe Damasio <felipewd@terra.com.br>

		LinkChg interrupt   - Felipe Damasio <felipewd@terra.com.br>



	TODO:

	* Test Tx checksumming thoroughly



	Low priority TODO:

	* Complete reset on PciErr

	* Consider Rx interrupt mitigation using TimerIntr

	* Investigate using skb->priority with h/w VLAN priority

	* Investigate using High Priority Tx Queue with skb->priority

	* Adjust Rx FIFO threshold and Max Rx DMA burst on Rx FIFO error

	* Adjust Tx FIFO threshold and Max Tx DMA burst on Tx FIFO error

	* Implement Tx software interrupt mitigation via

	  Tx descriptor bit

	* The real minimum of CP_MIN_MTU is 4 bytes.  However,

	  for this to be supported, one must(?) turn on packet padding.

	* Support external MII transceivers (patch available)



	NOTES:

	* TX checksumming is considered experimental.  It is off by

	  default, use ethtool to turn it on.



 These identify the driver base version and may not be removed. */

/* Maximum number of multicast addresses to filter (vs. Rx-all-multicast).

 struct cp_dma_stats, plus one */

 size in bytes of DMA stats block */

 version 1 */

 Size of each temporary Rx buffer.*/

 The following settings are log_2(bytes)-4:  0 == 16 bytes .. 6==1024, 7==end of packet. */

 Rx buffer level before first PCI xfer.  */

 Maximum PCI burst, '4' is 256 */

 Maximum PCI burst, '6' is 1024 */

 Early Tx threshold, in bytes */

 Time in jiffies before concluding the transmitter is hung. */

 hardware minimum and maximum for a single frame's data payload */

 TODO: allow lower, but pad */

 NIC register offsets */

 Ethernet hardware address. */

 Multicast filter. */

 64-bit start addr of 64-byte DMA stats blk */

 64-bit start addr of Tx ring */

 64-bit start addr of high priority Tx ring */

 Command register */

 Interrupt mask */

 Interrupt status */

 Tx configuration */

 8-bit chip version, inside TxConfig */

 Rx configuration */

 24 bits valid, write clears */

 EEPROM select/control; Cfg reg [un]lock */

 Config1 */

 Config3 */

 Config4 */

 Multiple interrupt select */

 MII BMCR */

 MII BMSR */

 MII ADVERTISE */

 MII LPA */

 MII Expansion */

 Low 16 bit address of a Tx descriptor. */

 Config5 */

 Tell chip to check Tx descriptors for work */

 Max size of an Rx packet (8169 only) */

 C+ Command register (C+ mode only) */

 rx/tx interrupt mitigation control */

 64-bit start addr of Rx ring */

 Early Tx threshold */

 DMA address of Rx ring buffer (C mode) */

 DMA address of first Tx desc (C mode) */

 Tx and Rx status descriptors */

 Descriptor is owned by NIC */

 End of descriptor ring */

 First segment of a packet */

 Final segment of a packet */

 TCP Large Send Offload (TSO) */

 MSS value position */

 MSS value: 11 bits */

 Tx error summary */

 Rx error summary */

 Calculate IP checksum */

 Calculate UDP/IP checksum */

 Calculate TCP/IP checksum */

 Add VLAN tag */

 Rx VLAN tag available */

 IP checksum failed */

 UDP/IP checksum failed */

 TCP/IP checksum failed */

 One or more normal Tx packets to send */

 2 protocol id bits:  0==non-IP, */

 1==UDP/IP, 2==TCP/IP, 3==IP */

 Tx FIFO underrun */

 Tx Out-of-window collision */

 Link failed during Tx of packet */

 Tx aborted due to excessive collisions */

 Shift, to get 4-bit Tx collision cnt */

 4-bit collision count */

 Rx frame alignment error */

 Rx multicast packet rcv'd */

 Rx CRC error */

 Rx error, packet < 64 bytes */

 Rx error, packet > 4096 bytes */

 Rx error, FIFO overflowed, pkt bad */

 StatsAddr register */

 Begin stats dump */

 RxConfig register */

 Shift, to get Rx FIFO thresh value */

 Shift, to get Rx Max DMA value */

 Accept packets with CRC errors */

 Accept runt (<64 bytes) packets */

 Accept broadcast packets */

 Accept multicast packets */

 Accept pkts with our MAC as dest */

 Accept all pkts w/ physical dest */

 IntrMask / IntrStatus registers */

 System error on the PCI bus */

 Asserted when TCTR reaches TimerInt value */

 Cable length change */

 Software-requested interrupt */

 No Tx descriptors available */

 Rx FIFO Overflow */

 Packet underrun, or link change */

 No Rx descriptors available */

 Tx error */

 Tx packet sent */

 Rx error */

 Rx packet received */

	IntrResvd	= (1 << 10), /* reserved, according to RealTek engineers,

 C mode command register */

 Enable to reset; self-clearing */

 Rx mode enable */

 Tx mode enable */

 C+ mode command register */

 Rx VLAN de-tagging enable */

 Rx checksum offload enable */

 PCI Dual Address Cycle (64-bit PCI) */

 Enable PCI read/write multiple */

 Rx mode enable */

 Tx mode enable */

 Cfg9436 EEPROM control register */

 Lock ConfigX/MII register access */

 Unlock ConfigX/MII register access */

 TxConfig register */

 standard IEEE interframe gap */

 DMA burst value (0-7) is shift this many bits */

 Early Tx Threshold register */

 Mask bits 5-0 */

 Max early Tx threshold */

 Config1 register */

 Software marker, driver is loaded */

 LWAKE active mode */

 Enable various PM features of chip */

 Config3 register */

 Enable auto-loading of PHY parms */

 Wake up when receives a Magic Packet */

 Wake up when the cable connection is re-established */

 Config4 register */

 LWAKE Pattern */

 LANWAKE vs PMEB */

 Config5 register */

 Accept Broadcast wakeup frame */

 Accept Multicast wakeup frame */

 Accept Unicast wakeup frame */

 Enable LANWake signal */

 PME status can be reset by PCI RST# */

 Is Wake-on-LAN enabled? */

 MTU + ethernet header + FCS + optional VLAN tag */

			/* we don't support incoming fragmented frames.

			 * instead, we attempt to ensure that the

			 * pre-allocated RX skbs are properly sized such

			 * that RX fragments are never encountered

 Handle checksum offloading for incoming packets. */

	/* if we did not reach work limit, then we're done with

	 * this round of polling

 close possible race's with dev_close */

 TODO: reset hardware */

/*

 * Polling receive - used by netconsole and other diagnostic tools

 * to allow network i/o with interrupts disabled.

 This is a hard error, log it. */

		/* We must give this initial chunk to the device last.

		 * Otherwise we could race with the device.

/* Set or clear the multicast filter for this adaptor.

 Multicast hash filter */

 Note: do not reorder, GCC is clever about common statements. */

 Unconditionally log net taps. */

 Too many to filter perfectly -- accept all multicasts. */

 We can safely update without stopping the chip. */

 only lower 24 bits valid; write any value to clear */

 The chip only need report frame silently dropped. */

	/*

	 * These (at least TxRingAddr) need to be configured after the

	 * corresponding bits in CpCmd are enabled. Datasheet v1.6 §6.33

	 * (C+ Command Register) recommends that these and more be configured

	 * *after* the [RT]xEnable bits in CpCmd are set. And on some hardware

	 * it's been observed that the TxRingAddr is actually reset to garbage

	 * when C+ mode Tx is enabled in CpCmd.

	/*

	 * Strictly speaking, the datasheet says this should be enabled

	 * *before* setting the descriptor addresses. But what, then, would

	 * prevent it from doing DMA to random unconfigured addresses?

	 * This variant appears to work fine.

 Restore our idea of the MAC address. */

 XXX convert magic num to a constant */

 Disable Wake-on-LAN. Can be turned on with ETHTOOL_SWOL */

 if network interface not up, no need for complexity */

 set new rx buf size */

 network IS up, close it, reset MTU, and come up again. */

 Set the ethtool Wake-on-LAN settings */

 If WOL is being disabled, no need for complexity */

 Paranoia setting */

 If WOL is being disabled, no need for complexity */

 Get the ethtool Wake-on-LAN settings */

 Start from scratch */

 We don't need to go on if WOL is disabled */

 Paranoia setting */

 -EINVAL */;

 begin NIC statistics dump */

 Serial EEPROM section. */

  EEPROM_Ctrl bits. */

 EEPROM shift clock. */

 EEPROM chip select. */

 EEPROM chip data in. */

 EEPROM chip data out. */

/* Delay between EEPROM clock transitions.

   No extra delay is needed with 33Mhz PCI, but 66Mhz may change this.

 The EEPROM commands include the alway-set leading bit. */

 Shift the command bits out. */

 Put the board into D3cold state and wait for WakeUp signal */

 Enable PME# generation */

 Configure DMA attributes. */

 read MAC address from EEPROM */

 MTU range: 60 - 4096 */

 enable busmastering and memory-write-invalidate */

 Disable Rx and Tx */

 FIXME: sh*t may happen if the Rx ring buffer is depleted */

 SPDX-License-Identifier: GPL-2.0-only

/* r8169_firmware.c: RealTek 8169/8168/8101 ethernet driver.

 *

 * Copyright (c) 2002 ShuChen <shuchen@realtek.com.tw>

 * Copyright (c) 2003 - 2007 Francois Romieu <romieu@fr.zoreil.com>

 * Copyright (c) a lot of people too. Please respect their work.

 *

 * See MAINTAINERS file for support contact information.

/*



	8139too.c: A RealTek RTL-8139 Fast Ethernet driver for Linux.



	Maintained by Jeff Garzik <jgarzik@pobox.com>

	Copyright 2000-2002 Jeff Garzik



	Much code comes from Donald Becker's rtl8139.c driver,

	versions 1.13 and older.  This driver was originally based

	on rtl8139.c version 1.07.  Header of rtl8139.c version 1.13:



	-----<snip>-----



		Written 1997-2001 by Donald Becker.

		This software may be used and distributed according to the

		terms of the GNU General Public License (GPL), incorporated

		herein by reference.  Drivers based on or derived from this

		code fall under the GPL and must retain the authorship,

		copyright and license notice.  This file is not a complete

		program and may only be used when the entire operating

		system is licensed under the GPL.



		This driver is for boards based on the RTL8129 and RTL8139

		PCI ethernet chips.



		The author may be reached as becker@scyld.com, or C/O Scyld

		Computing Corporation 410 Severn Ave., Suite 210 Annapolis

		MD 21403



		Support and updates available at

		http://www.scyld.com/network/rtl8139.html



		Twister-tuning table provided by Kinston

		<shangh@realtek.com.tw>.



	-----<snip>-----



	This software may be used and distributed according to the terms

	of the GNU General Public License, incorporated herein by reference.



	Contributors:



		Donald Becker - he wrote the original driver, kudos to him!

		(but please don't e-mail him for support, this isn't his driver)



		Tigran Aivazian - bug fixes, skbuff free cleanup



		Martin Mares - suggestions for PCI cleanup



		David S. Miller - PCI DMA and softnet updates



		Ernst Gill - fixes ported from BSD driver



		Daniel Kobras - identified specific locations of

			posted MMIO write bugginess



		Gerard Sharp - bug fix, testing and feedback



		David Ford - Rx ring wrap fix



		Dan DeMaggio - swapped RTL8139 cards with me, and allowed me

		to find and fix a crucial bug on older chipsets.



		Donald Becker/Chris Butterworth/Marcus Westergren -

		Noticed various Rx packet size-related buglets.



		Santiago Garcia Mantinan - testing and feedback



		Jens David - 2.2.x kernel backports



		Martin Dennett - incredibly helpful insight on undocumented

		features of the 8139 chips



		Jean-Jacques Michel - bug fix



		Tobias Ringström - Rx interrupt status checking suggestion



		Andrew Morton - Clear blocked signals, avoid

		buffer overrun setting current->comm.



		Kalle Olavi Niemitalo - Wake-on-LAN ioctls



		Robert Kuebel - Save kernel thread from dying on any signal.



	Submitting bug reports:



		"rtl8139-diag -mmmaaavvveefN" output

		enable RTL8139_DEBUG below, and look at 'dmesg' or kernel log



 Default Message level */

 define to 1, 2 or 3 to enable copious debugging info */

 define to 1 to disable lightweight runtime debugging checks */

 A few user-configurable values. */

 media options */

 Whether to use MMIO or PIO. Default to MMIO. */

/* Maximum number of multicast addresses to filter (vs. Rx-all-multicast).

 bitmapped message enable number */

/*

 * Receive ring size

 * Warning: 64K ring has hardware issues and may lock up.

 8K ring */

 32K ring */

 spare padding to handle lack of packet wrap */

 Number of Tx descriptor registers. */

 max supported ethernet frame size -- must be at least (dev->mtu+18+4).*/

 max supported payload size */

 Size of the Tx bounce buffers -- must be at least (dev->mtu+18+4). */

/* PCI Tuning Parameters

 In bytes, rounded down to 32 byte units. */

 The following settings are log_2(bytes)-4:  0 == 16 bytes .. 6==1024, 7==end of packet. */

 Rx buffer level before first PCI xfer.  */

 Maximum PCI burst, '6' is 1024 */

 Maximum PCI burst, '6' is 1024 */

 0-15.  retries = 16 + (TX_RETRY * 16) */

 Operational parameters that usually are not changed. */

 Time in jiffies before concluding the transmitter is hung. */

 number of ETHTOOL_GSTATS u64's */

 version of reg. data in ETHTOOL_GREGS */

 indexed by board_t, above */

 Bogus 8139 silicon reports 8129 without external PROM :-( */

	/* some crazy cards report invalid vendor ids like

	 * 0x0001 here.  The other ids are valid and constant,

	 * so we simply don't match on the main vendor id.

 The rest of these values should never change. */

 Symbolic offsets to registers. */

 Ethernet hardware address. */

 Multicast filter. */

 Transmit status (Four 32bit registers). */

 Tx descriptors (also four 32bit). */

 A general-purpose counter. */

 24 bits valid, write clears. */

 absent on RTL-8139A */

 Undocumented registers, but required for proper operation. */

 FIFO Control and test. */

 Chip Status and Configuration Register. */

 Communication with Flash ROM, four bytes. */

 Magic transceiver parameter register. */

 absent on RTL-8139A */

 Interrupt register bits, using my own meaningful names. */

 Bits in RxConfig. */

 Bits in TxConfig. */

 Interframe Gap Time. Only TxIFG96 doesn't violate IEEE 802.3 */

 8.4us / 840ns (10 / 100Mbps) */

 8.8us / 880ns (10 / 100Mbps) */

 9.2us / 920ns (10 / 100Mbps) */

 9.6us / 960ns (10 / 100Mbps) */

 enable loopback test mode */

 DISABLE Tx pkt CRC append */

 Clear abort (WO) */

 DMA burst value (0-7) is shifted X many bits */

 TXRR value (0-15) is shifted X many bits */

 mask out version bits 30-26, 23 */

 Bits in Config1 */

 not on 8139, 8139A */

 only on 8139, 8139A */

 only on 8139, 8139A */

 Bits in Config3 */

 1	= Fast Back to Back */

 1	= enable CardBus Function registers */

 1	= enable CLKRUN */

 1	= enable CardBus registers */

 1	= wake up on link up */

 1	= wake up on Magic Packet (tm) */

 0	= software can set twister parameters */

 1	= delay 1 clock from PCI GNT signal */

 Bits in Config4 */

 not on 8139, 8139A */

 Bits in Config5 */

 1	= PCI reset resets PME_Status */

 1	= enable LANWake signal */

 0	= save power when link is down */

 Realtek internal SRAM testing */

 1 = accept unicast wakeup frame */

 1 = accept multicast wakeup frame */

 1 = accept broadcast wakeup frame */

 rx fifo threshold */

 Max DMA burst */

 rx ring buffer length */

 Disable packet wrap at end of Rx buffer. (not possible with 64k) */

/* Twister tuning parameters from RealTek.

 directly indexed by chip_t, above */

 from RTL8139C/RTL8139D docs */

 XXX undocumented? */

 XXX undocumented? */

 XXX undocumented? */

 RX buf index of next pkt */

 Tx bounce buffers */

 Tx bounce buffer region. */

 MII device addresses. */

 Twister tune state. */

 Last dev->if_port value. */

 write MMIO register, with flush */

 Flush avoids rtl8139 bug w/ posted MMIO writes */

 write MMIO register */

 read MMIO register */

 it's ok to call this even if we have no regions to free */

 Soft reset the chip. */

 Check that the chip has finished the reset. */

 dev and priv zeroed in alloc_etherdev */

 enable device (incl. PCI PM wakeup and hotplug setup) */

 PIO bar register comes first. */

 Bring old chips out of low-power mode. */

 check for missing/broken hardware */

 identify chip attached to board */

 if unknown chip, assume array element #0, original RTL-8139 in this case */

	/* when we're built into the kernel, the driver version message

	 * is only printed if at least one 8139 board has been found

 The Rtl8139-specific entries in the device structure. */

	/* note: the hardware is not capable of sg/csum/highdma, however

	 * through the use of skb_copy_and_csum_dev we enable these

	 * features

 MTU range: 68 - 1770 */

 tp zeroed and aligned in alloc_etherdev */

 note: tp->chipset set in rtl8139_init_board */

 dev is fully set up and ready to use now */

	/* Find the connected MII xcvrs.

	   Doing this in open() would allow detecting external xcvrs later, but

 The lower four bits are the media type. */

		/* Changing the MII-advertised media because might prevent

 100Mbps? */

 Full duplex? */

 Put the chip into low-power mode. */

 'R' would leave the clock running. */

 Serial EEPROM section. */

  EEPROM_Ctrl bits. */

 EEPROM shift clock. */

 EEPROM chip select. */

 EEPROM chip data in. */

 EEPROM chip data out. */

/* Delay between EEPROM clock transitions.

   No extra delay is needed with 33Mhz PCI, but 66Mhz may change this.

 The EEPROM commands include the alway-set leading bit. */

 Shift the read command bits out. */

 Terminate the EEPROM access. */

 MII serial management: mostly bogus for now. */

/* Read and write the MII management registers using software-generated

   serial MDIO protocol.

   The maximum data clock rate is 2.5 Mhz.  The minimum timing is usually

   met by back-to-back PCI I/O cycles, but we insert a delay to avoid

 Syncronize the MII management interface by shifting 32 one bits out. */

 Really a 8139.  Use internal registers. */

 Shift the read command bits out. */

 Read the two transition, 16 data, and wire-idle bits. */

 Really a 8139.  Use internal registers. */

 Shift the command bits out. */

 Clear out extra bits. */

 Start the hardware at open or resume. */

 Bring old chips out of low-power mode. */

 unlock Config[01234] and BMCR register writes */

 Restore our idea of the MAC address. */

 init Rx ring buffer DMA address */

 Must enable Tx/Rx before setting transfer thresholds! */

		/* Disable magic packet scanning, which is enabled

		 * when PM is enabled in Config1.  It can be reenabled

 Lock Config[01234] and BMCR register writes */

 init Tx buffer DMA addresses */

 no early-rx interrupts */

 make sure RxTx has started */

 Enable all known interrupts by setting the interrupt mask. */

 Initialize the Rx and Tx rings, along with various 'dev' bits. */

 This must be global for CONFIG_8139TOO_TUNE_TWISTER case */

 param[0][3] */

	/* This is a complicated state machine to configure the "twister" for

	   impedance/echos based on the cable length.

	   All of this is magic and undocumented.

 We have link beat, let us tune the twister. */

 Change to state 2. */

 Just put in some reasonable defaults for when beat returns. */

 Turn on cable test mode. */

 Bail from future actions. */

 Read how long it took to hear the echo. */

 Change to state 2. */

 Put out four tuning parameters, one per 100msec. */

			/* For short cables we are done.

 Special case for long cables: check for mistune. */

 Retune for shorter cable (column 2). */

 do nothing */

 CONFIG_8139TOO_TUNE_TWISTER */

 XXX account for unsent Tx packets in tp->stats.tx_dropped */

 Emit info to figure out what went wrong. */

 disable Tx ASAP, if not already */

 Disable interrupts by clearing the interrupt mask. */

 Stop a shared interrupt from scavenging while we are. */

 ...and finally, reset everything */

 Calculate the next Tx descriptor entry. */

 Note: the chip doesn't have auto-pad! */

	/*

	 * Writing to TxStatus triggers a DMA transfer of the data

	 * copied to tp->tx_buf[entry] above. Use a memory barrier

	 * to make sure that the device sees the updated data.

 It still hasn't been Txed */

 Note: TxCarrierLost is always asserted at 100mbps. */

 There was an major error, log it. */

 Add 64 to the Tx FIFO threshold. */

 RTL8139_NDEBUG */

 only wake the queue if we did work, and the queue is stopped */

 TODO: clean this up!  Rx reset need not be this intensive */

 A.C.: The chip hangs here. */

 Reset the receiver, based on RealTek recommendation. (Bug?) */

 disable receive */

 restart receive */

 and reinitialize all rx related registers */

 Must enable Tx/Rx before setting transfer thresholds! */

 Lock Config[01234] and BMCR register writes */

 init Rx ring buffer DMA address */

 A.C.: Reset the multicast list. */

 Clear out errors and receive interrupts */

 read size+status of next frame from DMA ring buffer */

		/* Packet copy from FIFO still in progress.

		 * Theoretically, this should never happen

		 * since EarlyRx is disabled.

		/* If Rx err or invalid rx_size/rx_status received

		 * (which happens if we get lost in the ring),

		 * Rx process gets reset, so we abort any further

		 * Rx processing.

				/* Length is at least mostly OK, but pkt has

				 * error.  I'm hoping we can handle some of these

				 * errors without resetting the chip. --Ben

 Malloc up new buffer, compatible with net-2e. */

 Omit the four octet CRC from the length. */

	/*

	 * The receive buffer should be mostly empty.

	 * Tell NAPI to reenable the Rx irq.

 Update the error count. */

/* The interrupt handler does all of the Rx thread work and cleans up

 avoid bogus "uninit" warning */

 shared irq? */

 h/w no longer present (hotplug?) or major error, bail */

 close possible race's with dev_close */

	/* Acknowledge all of the current interrupt sources ASAP, but

	/* Receive packets are processed by poll routine.

 Check uncommon events with one test. */

/*

 * Polling receive - used by netconsole and other diagnostic tools

 * to allow network i/o with interrupts disabled.

 Stop the chip's Tx and Rx DMA processes. */

 Disable interrupts by clearing the interrupt mask. */

 Update the error counts. */

 Green! Put the chip in low-power mode. */

 'R' would leave the clock running. */

/* Get the ethtool Wake-on-LAN settings.  Assumes that wol points to

   kernel memory, *wol has been initialized as {ETHTOOL_GWOL}, and

		/* (KON)FIXME: See how netdev_set_wol() handles the

/* Set the ethtool Wake-on-LAN settings.  Return 0 or -errno.  Assumes

   that wol points to kernel memory and other threads or interrupts

	/* (KON)FIXME: These are untested.  We may have to set the

	   CRC0, Wakeup0 and LSBCRC0 registers too, but I have no

 need not unlock via Cfg9346 */

 TODO: we are too slack to do reg dumping for pio, for now */

 TODO: we are too slack to do reg dumping for pio, for now */

/* Set or clear the multicast filter for this adaptor.

 Multicast hash filter */

 Note: do not reorder, GCC is clever about common statements. */

 Too many to filter perfectly -- accept all multicasts. */

 We can safely update without stopping the chip. */

 Disable interrupts, stop Tx and Rx. */

 Update the error counts. */

	/* when we're a module, we always print a version message,

	 * even if no 8139 board is found.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * r8169.c: RealTek 8169/8168/8101 ethernet driver.

 *

 * Copyright (c) 2002 ShuChen <shuchen@realtek.com.tw>

 * Copyright (c) 2003 - 2007 Francois Romieu <romieu@fr.zoreil.com>

 * Copyright (c) a lot of people too. Please respect their work.

 *

 * See MAINTAINERS file for support contact information.

/* Maximum number of multicast addresses to filter (vs. Rx-all-multicast).

 Maximum PCI burst, '7' is unlimited */

 3 means InterFrameGap = the shortest one */

 Number of Tx descriptor registers */

 Number of Rx descriptor registers */

 write/read MMIO register */

 PCI devices. */

 PCI-E devices. */

 reserve 62 for CFG_METHOD_4 in the vendor driver */

 Ethernet hardware address. */

 Multicast filter. */

 8111e-vl */

 8111e-vl */

 8111c and later */

 8111c only */

 No threshold before first PCI xfer */

 Unlimited maximum PCI burst. */

 8168c and later */

 8169. Unit of 32 bytes. */

 Max value : no early transmit. */

 8101/8168. Unit of 128 bytes. */

 OCP GPHY access */

 8168c only. Undocumented on 8168dp */

 8168e only. */

 Enable GPIO pin */

 InterruptStatusBits */

 RxStatusDesc */

 ChipCmdBits */

 TXPoll register p.5 */

 Poll cmd on the high prio queue */

 Poll cmd on the low prio queue */

 Forced software interrupt */

 Cfg9346Bits */

 rx_mode_bits */

 TxConfigBits */

 DMA burst value (0-7) is shift this many bits */

 Config1 register p.24 */

 Power Management Enable */

 Config2 register p. 25 */

 Clock Request Enable */

 8169 only. Reserved in the 8168. */

 Config3 register p.25 */

 Wake up when receives a Magic Packet */

 Wake up when the cable connection is re-established */

 8168 only. Reserved in the 8168b */

 L23 Enable */

 8168 only. Reserved in the 8168b */

 Config4 register */

 8168 only. Reserved in the 8168b */

 Config5 register p.27 */

 Accept Broadcast wakeup frame */

 Accept Multicast wakeup frame */

 Accept Unicast wakeup frame */

 LanWake enable/disable */

 PME status can be reset by PCI RST# */

 ASPM enable */

 CPlusCmd p.31 */

 8168 8101

 8168 8101

 8169

 unused

 8168 8101

 8168 8101

 8168 8101

 8168 8101

 8168 8101

 8168 8101

 8168

 rtl8169_PHYstatus */

 ResetCounterCommand */

 DumpCounterCommand */

 magic enable v2 */

 Wake up when receives a Magic Packet */

 First doubleword. */

 Descriptor is owned by NIC */

 End of descriptor ring */

 First segment of a packet */

 Final segment of a packet */

 Generic case. */

 First doubleword. */

 Large Send Offload */

 MSS value */

 Second doubleword. */

 Add VLAN tag */

 8169, 8168b and 810x except 8102e. */

 First doubleword. */

 MSS position (11 bits) */

 Calculate TCP/IP checksum */

 Calculate UDP/IP checksum */

 Calculate IP checksum */

 8102e, 8168c and beyond. */

 First doubleword. */

 Giant Send for IPv4 */

 Giant Send for IPv6 */

 Second doubleword. */

 MSS position (11 bits) */

 Calculate IPv6 checksum */

 Calculate IPv4 checksum */

 Calculate TCP/IP checksum */

 Calculate UDP/IP checksum */

 Rx private */

 Protocol ID bit 1/2 */

 Protocol ID bit 0/2 */

 IP checksum failed */

 UDP/IP checksum failed */

 TCP/IP checksum failed */

 VLAN tag available */

 memory map physical address */

 Index into the Rx descriptor buffer of next Rx pkt. */

 Index into the Tx descriptor buffer of next Rx pkt. */

 256-aligned Tx descriptor ring */

 256-aligned Rx descriptor ring */

 Rx data buffers */

 Tx data buffers */

 Read an arbitrary register to commit a preceding PCI write */

 based on RTL8168FP_OOBMAC_BASE in vendor driver */

/* Work around a hw issue with RTL8168g PHY, the quirk disables

 * PHY MCU interrupts before PHY power-down.

	/*

	 * According to hardware specs a 20us delay is required after write

	 * complete indication, but before sending next command.

	/*

	 * According to hardware specs a 20us delay is required after read

	 * complete indication, but before sending next command.

 Work around issue with chip reporting wrong PHY ID */

	/*

	 * Some chips are unable to dump tally counters when the receiver

	 * is disabled. If 0xff chip may be in a PCI power-save state.

	/*

	 * rtl8169_init_counter_offsets is called from rtl_open.  On chip

	 * versions prior to RTL_GIGA_MAC_VER_19 the tally counters are only

	 * reset by a power cycle, while the counter values collected by the

	 * driver are reset at every driver unload/load cycle.

	 *

	 * To make sure the HW values returned by @get_stats64 match the SW

	 * values, we collect the initial values at first open(*) and use them

	 * as offsets to normalize the values returned by @get_stats64.

	 *

	 * (*) We can't call rtl8169_init_counter_offsets from rtl_init_one

	 * for the reason stated in rtl8169_update_counters; CmdRxEnb is only

	 * set at open time by rtl_hw_start.

/*

 * Interrupt coalescing

 *

 * > 1 - the availability of the IntrMitigate (0xe2) register through the

 * >     8169, 8168 and 810x line of chipsets

 *

 * 8169, 8168, and 8136(810x) serial chipsets support it.

 *

 * > 2 - the Tx timer unit at gigabit speed

 *

 * The unit of the timer depends on both the speed and the setting of CPlusCmd

 * (0xe0) bit 1 and bit 0.

 *

 * For 8169

 * bit[1:0] \ speed        1000M           100M            10M

 * 0 0                     320ns           2.56us          40.96us

 * 0 1                     2.56us          20.48us         327.7us

 * 1 0                     5.12us          40.96us         655.4us

 * 1 1                     10.24us         81.92us         1.31ms

 *

 * For the other

 * bit[1:0] \ speed        1000M           100M            10M

 * 0 0                     5us             2.56us          40.96us

 * 0 1                     40us            20.48us         327.7us

 * 1 0                     80us            40.96us         655.4us

 * 1 1                     160us           81.92us         1.31ms

 rx/tx scale factors for all CPlusCmd[0:1] cases */

 produce array with base delay *1, *8, *8*2, *8*2*2 */

 get rx/tx scale vector corresponding to current speed */

 if speed is unknown assume highest one */

 get rx/tx scale corresponding to current speed and CPlusCmd[0:1] */

 ethtool_coalesce states usecs and max_frames must not both be 0 */

 choose appropriate scale factor and CPlusCmd[0:1] for (speed, usec) */

	/* Accept max_frames=1 we returned in rtl_get_coalesce. Accept it

	 * not only when usecs=0 because of e.g. the following scenario:

	 *

	 * - both rx_usecs=0 & rx_frames=0 in hardware (no delay on RX)

	 * - rtl_get_coalesce returns rx_usecs=0, rx_frames=1

	 * - then user does `ethtool -C eth0 rx-usecs 100`

	 *

	 * Since ethtool sends to kernel whole ethtool_coalesce settings,

	 * if we want to ignore rx_frames then it has to be set to 0.

 HW requires time limit to be set if frame limit is set */

 Meaning of PktCntrDisable bit changed from RTL8168e-vl */

 disable packet counter */

 respect EEE advertisement the user may have set */

	/*

	 * The driver currently handles the 8168Bf and the 8168Be identically

	 * but they can be identified more specifically through the test below

	 * if needed:

	 *

	 * (RTL_R32(tp, TxConfig) & 0x700000) == 0x500000 ? 8168Bf : 8168Be

	 *

	 * Same thing for the 8101Eb and the 8101Ec:

	 *

	 * (RTL_R32(tp, TxConfig) & 0x700000) == 0x200000 ? 8101Eb : 8101Ec

 8125B family. */

 8125A family. */

 RTL8117 */

 8168EP family. */

 8168H family. */

 8168G family. */

 8168F family. */

 8168E family. */

 8168D family. */

 8168DP family. */

		/* It seems this early RTL8168dp version never made it to

		 * the wild. Support has been removed.

		 * { 0x7cf, 0x288,      RTL_GIGA_MAC_VER_27 },

 8168C family. */

 8168B family. */

 8101 family. */

		/* FIXME: where did these entries come from ? -- FR

		 * Not even r8101 vendor driver knows these id's,

		 * so let's disable detection for now. -- HK

		 * { 0xfc8, 0x388,	RTL_GIGA_MAC_VER_13 },

		 * { 0xfc8, 0x308,	RTL_GIGA_MAC_VER_13 },

 8110 family. */

 Catch-all */

 TODO: release firmware if rtl_fw_write_firmware signals failure. */

 At least one firmware doesn't reset tp->ocp_base. */

 PHY soft reset may still be in progress */

 Adjust EEE LED frequency */

 set undocumented MAC Reg C+CR Offset 0x82h */

 We may have called phy_speed_down before */

 Chip doesn't support pause in jumbo mode */

 firmware loaded already or no firmware available */

 IntrMitigate has new functionality on RTL8125 */

 Low hurts. Let's disable the filtering. */

	/*

	 * Magic spell: some iop3xx ARM board needs the TxDescAddrHigh

	 * register to be written before TxDescAddrLow to work.

	 * Switching from MMIO to I/O access fixes the issue as well.

 Multicast hash filter */

 accept all multicasts */

	/* According to Realtek the value at config space address 0x070f

	 * controls the L0s/L1 entrance latency. We try standard ECAM access

	 * first and if it fails fall back to CSI.

	 * bit 0..2: L0: 0 = 1us, 1 = 2us .. 6 = 7us, 7 = 7us (no typo)

	 * bit 3..5: L1: 0 = 1us, 1 = 2us .. 6 = 64us, 7 = 64us

 L0 7us, L1 16us */

 work around an issue when PCI reset occurs during L2/L3 state */

	/* Bits control which events trigger ASPM L1 exit:

	 * Bit 12: rxdv

	 * Bit 11: ltr_msg

	 * Bit 10: txdma_poll

	 * Bit  9: xadm

	 * Bit  8: pktavi

	 * Bit  7: txpla

 Don't enable ASPM in the chip if OS can't control ASPM */

	/* Usage of dynamic vs. static FIFO is controlled by bit

	 * TXCFG_AUTO_FIFO. Exact meaning of FIFO values isn't known.

 FIFO thresholds for pause flow control */

 Magic. */

 Reset tx FIFO pointer */

 disable aspm and clock request before access ephy */

 disable aspm and clock request before access ephy */

 disable aspm and clock request before access ephy */

	/* The following Realtek-provided magic fixes an issue with the RX unit

	 * getting confused after the PHY having been powered-down.

 disable aspm and clock request before access ephy */

 disable aspm and clock request before access ephy */

 disable aspm and clock request before access ephy */

 disable aspm and clock request before access ephy */

 disable aspm and clock request before access ephy */

 firmware is for MAC only */

 Force LAN exit from ASPM if Rx/Tx are not idle */

 Disable Early Tally Counter */

 Force LAN exit from ASPM if Rx/Tx are not idle */

 disable EEE */

 Force LAN exit from ASPM if Rx/Tx are not idle */

 L0 7us, L1 32us - needed to avoid issues with link-up detection */

 disable EEE */

 disable UPS */

 disable new tx descriptor format */

 disable aspm and clock request before access ephy */

 disable aspm and clock request before access ephy */

 disable interrupt coalescing */

 disable interrupt coalescing */

 disable interrupt coalescing */

 Initially a 10 us delay. Turned it into a PCI commit. - FR */

 Force memory writes to complete before releasing descriptor */

 mark as last descriptor in the ring */

 Give a racing hard_start_xmit a few cycles to complete. */

 Disable interrupts */

 see rtl8125_get_patch_pad_len() in r8125 vendor driver */

 dest is a standard PTP port */

 skb_padto would free the skb on error */

 A skbuff with nr_frags needs nr_frags+1 entries in the tx queue */

 Versions RTL8102e and from RTL8168c onwards support csum_v2 */

 Force memory writes to complete before releasing descriptor */

 rtl_tx needs to see descriptor changes before updated tp->cur_tx */

		/* Avoid wrongly optimistic queue wake-up: rtl_tx thread must

		 * not miss a ring update when it notices a stopped queue.

		/* Sync with rtl_tx:

		 * - publish queue status and cur_tx ring index (write barrier)

		 * - refresh dirty_tx ring index (read barrier).

		 * May the current thread have a pessimistic view of the ring

		 * status and forget to wake up queue, a racing rtl_tx thread

		 * can't.

 Workaround for hw issues with TSO on RTL8168evl */

 IPv4 header has options field */

 IPv4 TCP header has options field */

 work around hw bug on some chip versions */

		/* Sync with rtl8169_start_xmit:

		 * - publish dirty_tx ring index (write barrier)

		 * - refresh cur_tx ring index and queue status (read barrier)

		 * May the current thread miss the stopped queue condition,

		 * a racing xmit thread can only have a right view of the

		 * ring status.

		/*

		 * 8168 hack: TxPoll requests are lost when the Tx packets are

		 * too close. Let's kick an extra TxPoll request when a burst

		 * of start_xmit activity is detected (if it is not detected,

		 * it is slow enough). -- FR

		 * If skb is NULL then we come here again once a tx irq is

		 * triggered after the last fragment is marked transmitted.

		/* This barrier is needed to keep us from reading

		 * any other fields out of the Rx descriptor until

		 * we know the status of DescOwn

		/* The driver does not support incoming fragmented frames.

		 * They are seen as a symptom of over-mtu sized frames.

 Clear all task flags */

	/*

	 * Rx and Tx descriptors needs 256 bytes alignment.

	 * dma_alloc_coherent provides more.

	/*

	 * Fetch additional counter values missing in stats collected by driver

	 * from tally counters.

	/*

	 * Subtract values fetched during initalization.

	 * See rtl8169_init_counter_offsets for a description why we do that.

 Reportedly at least Asus X453MA truncates packets otherwise */

 CONFIG_PM */

 WoL fails with 8168b when the receiver is disabled. */

 Restore original MAC address */

 restore original MAC address */

 special workaround needed */

 Get MAC address */

		/* Most chip versions fail with the genphy driver.

		 * Therefore ensure that the dedicated PHY driver is loaded.

 PHY will be woken up in rtl_open() */

 Non-GBit versions don't support jumbo frames */

 RTL8169 */

 RTL8168b */

 RTL8168c */

 clk-core allows NULL (for suspend / resume) */

 Get the *optional* external "ether_clk" used on some boards */

	/* Disable ASPM L1 as that cause random device stop working

	 * problems as well as full system hangs for some PCIe devices users.

 enable device (incl. PCI PM wakeup and hotplug setup) */

 use first MMIO region */

 check for weird/broken PCI region reporting */

 Identify chip attached to board */

	/*

	 * Pretend we are using VLANs; This bypasses a nasty bug where

	 * Interrupts stop flowing on high load on 8110SCd controllers.

 Disallow toggling */

	/* There has been a number of reports that using SG/TSO results in

	 * tx timeouts. However for a lot of people SG/TSO works fine.

	 * Therefore disable both features by default, but allow users to

	 * enable them. Use at own risk!

 configure chip for default features */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Applied Micro X-Gene SoC Ethernet v2 Driver

 *

 * Copyright (c) 2017, Applied Micro Circuits Corporation

 * Author(s): Iyappan Subramanian <isubramanian@apm.com>

 *	      Keyur Chudgar <kchudgar@apm.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Applied Micro X-Gene SoC Ethernet v2 Driver

 *

 * Copyright (c) 2017, Applied Micro Circuits Corporation

 * Author(s): Iyappan Subramanian <isubramanian@apm.com>

 *	      Keyur Chudgar <kchudgar@apm.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Applied Micro X-Gene SoC Ethernet v2 Driver

 *

 * Copyright (c) 2017, Applied Micro Circuits Corporation

 * Author(s): Iyappan Subramanian <isubramanian@apm.com>

 *	      Keyur Chudgar <kchudgar@apm.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Applied Micro X-Gene SoC Ethernet v2 Driver

 *

 * Copyright (c) 2017, Applied Micro Circuits Corporation

 * Author(s): Iyappan Subramanian <isubramanian@apm.com>

 *	      Keyur Chudgar <kchudgar@apm.com>

 create circular linked list of descriptors */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Applied Micro X-Gene SoC Ethernet v2 Driver

 *

 * Copyright (c) 2017, Applied Micro Circuits Corporation

 * Author(s): Iyappan Subramanian <isubramanian@apm.com>

 *	      Keyur Chudgar <kchudgar@apm.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Applied Micro X-Gene SoC Ethernet v2 Driver

 *

 * Copyright (c) 2017, Applied Micro Circuits Corporation

 * Author(s): Iyappan Subramanian <isubramanian@apm.com>

 *	      Keyur Chudgar <kchudgar@apm.com>

 Packet buffers should be 64B aligned */

 clear pktstart address and pktsize */

 create tx ring */

 create rx ring */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Applied Micro X-Gene SoC Ethernet Driver

 *

 * Copyright (c) 2014, Applied Micro Circuits Corporation

 * Authors: Iyappan Subramanian <isubramanian@apm.com>

 *	    Ravi Patel <rapatel@apm.com>

 *	    Keyur Chudgar <kchudgar@apm.com>

 Hardware expects descriptor in little endian format */

 Free up the buffers held by hardware */

 Free up the buffers held by hardware */

 Checking for error */

 Reuse the slot if MSS matches */

 Overwrite the slot with ref_count = 0 */

 HW requires header must reside in 3 buffer */

 Hardware expects descriptor in little endian format */

 scatter gather */

 Errata 10GE_10 and ENET_15 - Fix duplicated HW statistic counters */

 Errata 10GE_8 and ENET_11 - allow packet with length <=64B */

 checking for error */

 strip off CRC as HW isn't doing this */

 read fpqnum field after dataaddr field */

 allocate rx descriptor ring */

 allocate buffer pool for receiving packets */

 allocate next buffer pool for jumbo packets */

 allocate tx descriptor ring */

 allocate tx completion descriptor ring */

			/* Abort if the clock is defined but couldn't be

			 * retrived. Always abort if the clock is missing on

			 * DT system as the driver can't cope with this case.

 Firmware may have set up the clock already. */

 setup buffer pool */

 Initialize and Enable  PreClassifier Tree */

	/*

	 * If necessary, free_netdev() will call netif_napi_del() and undo

	 * the effects of xgene_enet_napi_add()'s calls to netif_napi_add().

 SPDX-License-Identifier: GPL-2.0-or-later

/* Applied Micro X-Gene SoC Ethernet Driver

 *

 * Copyright (c) 2014, Applied Micro Circuits Corporation

 * Authors: Iyappan Subramanian <isubramanian@apm.com>

 *	    Ravi Patel <rapatel@apm.com>

 *	    Keyur Chudgar <kchudgar@apm.com>

 Adjust MDC clock frequency */

 Enable drop if bufpool not available */

 Rtype should be copied from FP */

 Configure HW pause frame generation */

 Rx-Tx traffic resume */

 Errata: 10GE_4 - Fix ICM_ECM_DROP_COUNT not clear-on-read */

 Mask out all PHYs from auto probing. */

 Register the MDIO bus */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Applied Micro X-Gene SoC Ethernet Driver

 *

 * Copyright (c) 2014, Applied Micro Circuits Corporation

 * Authors: Iyappan Subramanian <isubramanian@apm.com>

 *	    Keyur Chudgar <kchudgar@apm.com>

 wait for write command to complete */

 wait for read command to complete */

 Errata: 10GE_4 - ICM_ECM_DROP_COUNT not clear-on-read */

 Errata 10GE_1 - FIFO threshold default value incorrect */

 Errata 10GE_1 - FIFO threshold default value incorrect */

 Configure HW pause frame generation */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Applied Micro X-Gene SoC Ethernet Driver

 *

 * Copyright (c) 2015, Applied Micro Circuits Corporation

 * Author: Iyappan Subramanian <isubramanian@apm.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/* Applied Micro X-Gene SoC Ethernet Driver

 *

 * Copyright (c) 2014, Applied Micro Circuits Corporation

 * Authors: Iyappan Subramanian <isubramanian@apm.com>

 *	    Keyur Chudgar <kchudgar@apm.com>

 Errata: 10GE_4 - ICM_ECM_DROP_COUNT not clear-on-read */

 Adjust MDC clock frequency */

 Enable drop if bufpool not available */

 Configure HW pause frame generation */

 Bypass traffic gating */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Applied Micro X-Gene SoC Ethernet Classifier structures

 *

 * Copyright (c) 2016, Applied Micro Circuits Corporation

 * Authors: Khuong Dinh <kdinh@apm.com>

 *          Tanmay Inamdar <tinamdar@apm.com>

 *          Iyappan Subramanian <isubramanian@apm.com>

 interfaces to convert structures to HW recognized bit formats */

 PTREE_RAM onwards, DRAM regions are common for all parsers */

 1G port has to advance 4 bytes and 10G has to advance 8 bytes */

 PKT_TYPE_NODE */

 IPV4 */

 PKT_PROT_NODE */

 TCP */

 UDP */

 RSS_IPV4_TCP_NODE */

 SRC IPV4 B01 */

 SRC IPV4 B23 */

 DST IPV4 B01 */

 DST IPV4 B23 */

 TCP SRC Port */

 TCP DST Port */

 RSS_IPV4_UDP_NODE */

 SRC IPV4 B01 */

 SRC IPV4 B23 */

 DST IPV4 B01 */

 DST IPV4 B23 */

 TCP SRC Port */

 TCP DST Port */

 RSS_IPV4_OTHERS_NODE */

 SRC IPV4 B01 */

 SRC IPV4 B23 */

 DST IPV4 B01 */

 DST IPV4 B23 */

 TCP SRC Port */

 TCP DST Port */

 LAST NODE */

 continue node index for key node */

 Sideband: IPV4/TCP packets */

 Sideband: IPv4/UDP packets */

 Sideband: IPv4/RAW packets */

 Sideband: Ethernet II/RAW packets */

 16 Bytes*/

 enable RSS */

 setup sideband data */

 setup indirection table */

 Ethertype */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Applied Micro X-Gene SoC Ethernet Driver

 *

 * Copyright (c) 2014, Applied Micro Circuits Corporation

 * Authors: Iyappan Subramanian <isubramanian@apm.com>

 Errata 10GE_10 - SW should intepret RALN as 0 */

 Errata ENET_15 - Fixes RFCS, RFLR, TFCS counter */

 Errata 10GE_8 -  Update Frame recovered from Errata 10GE_8/ENET_11 */

 Errata ENET_15 - Jabber Frame recov'ed from Errata 10GE_10/ENET_15 */

/*======================================================================



    A PCMCIA ethernet driver for NS8390-based cards



    This driver supports the D-Link DE-650 and Linksys EthernetCard

    cards, the newer D-Link and Linksys combo cards, Accton EN2212

    cards, the RPTI EP400, and the PreMax PE-200 in non-shared-memory

    mode, and the IBM Credit Card Adapter, the NE4100, the Thomas

    Conrad ethernet card, and the Kingston KNE-PCM/x in shared-memory

    mode.  It will also handle the Socket EA card in either mode.



    Copyright (C) 1999 David A. Hinds -- dahinds@users.sourceforge.net



    pcnet_cs.c 1.153 2003/11/09 18:53:09



    The network driver code is based on Donald Becker's NE2000 code:



    Written 1992,1993 by Donald Becker.

    Copyright 1993 United States Government as represented by the

    Director, National Security Agency.  This software may be used and

    distributed according to the terms of the GNU General Public License,

    incorporated herein by reference.

    Donald Becker may be reached at becker@scyld.com



    Based also on Keith Moore's changes to Don Becker's code, for IBM

    CCAE support.  Drivers merged back together, and shared-memory

    Socket EA support added, by Ken Raeburn, September 1995.



 NatSemi-defined port window offset. */

 Issue a read to reset, a write to clear. */

 For IBM CCAE and Socket EA cards */

 First page of TX buffer */

 Last page +1 of RX ring */

 Socket EA cards have a larger packet buffer */

 Max wait in jiffies for Tx RDC */

====================================================================*/

 Module parameters */

 Transceiver type */

 use 64K packet buffer? */

 shared mem speed, in ns */

 pause after xmit? */

 in usec */

 use shared memory? */

 full duplex? */

 Ugh!  Let the user hardwire the hardware address for queer cards */

 ... */ };

====================================================================*/

====================================================================*/

 autodetected */

 HomePNA PHY */

 10baseT PHY */

 Accton EN2212 */ 0x0ff0, 0x00, 0x00, 0xe8, DELAY_OUTPUT },

 Allied Telesis LA-PCM */ 0x0ff0, 0x00, 0x00, 0xf4, 0 },

 APEX MultiCard */ 0x03f4, 0x00, 0x20, 0xe5, 0 },

 ASANTE FriendlyNet */ 0x4910, 0x00, 0x00, 0x94,

 Danpex EN-6200P2 */ 0x0110, 0x00, 0x40, 0xc7, 0 },

 DataTrek NetCard */ 0x0ff0, 0x00, 0x20, 0xe8, 0 },

 Dayna CommuniCard E */ 0x0110, 0x00, 0x80, 0x19, 0 },

 D-Link DE-650 */ 0x0040, 0x00, 0x80, 0xc8, 0 },

 EP-210 Ethernet */ 0x0110, 0x00, 0x40, 0x33, 0 },

 EP4000 Ethernet */ 0x01c0, 0x00, 0x00, 0xb4, 0 },

 Epson EEN10B */ 0x0ff0, 0x00, 0x00, 0x48,

 ELECOM Laneed LD-CDWA */ 0xb8, 0x08, 0x00, 0x42, 0 },

 Hypertec Ethernet */ 0x01c0, 0x00, 0x40, 0x4c, 0 },

 IBM CCAE */ 0x0ff0, 0x08, 0x00, 0x5a,

 IBM CCAE */ 0x0ff0, 0x00, 0x04, 0xac,

 IBM CCAE */ 0x0ff0, 0x00, 0x06, 0x29,

 IBM FME */ 0x0374, 0x08, 0x00, 0x5a,

 IBM FME */ 0x0374, 0x00, 0x04, 0xac,

 Kansai KLA-PCM/T */ 0x0ff0, 0x00, 0x60, 0x87,

 NSC DP83903 */ 0x0374, 0x08, 0x00, 0x17,

 NSC DP83903 */ 0x0374, 0x00, 0xc0, 0xa8,

 NSC DP83903 */ 0x0374, 0x00, 0xa0, 0xb0,

 NSC DP83903 */ 0x0198, 0x00, 0x20, 0xe0,

 I-O DATA PCLA/T */ 0x0ff0, 0x00, 0xa0, 0xb0, 0 },

 Katron PE-520 */ 0x0110, 0x00, 0x40, 0xf6, 0 },

 Kingston KNE-PCM/x */ 0x0ff0, 0x00, 0xc0, 0xf0,

 Kingston KNE-PCM/x */ 0x0ff0, 0xe2, 0x0c, 0x0f,

 Kingston KNE-PC2 */ 0x0180, 0x00, 0xc0, 0xf0, 0 },

 Maxtech PCN2000 */ 0x5000, 0x00, 0x00, 0xe8, 0 },

 NDC Instant-Link */ 0x003a, 0x00, 0x80, 0xc6, 0 },

 NE2000 Compatible */ 0x0ff0, 0x00, 0xa0, 0x0c, 0 },

 Network General Sniffer */ 0x0ff0, 0x00, 0x00, 0x65,

 Panasonic VEL211 */ 0x0ff0, 0x00, 0x80, 0x45,

 PreMax PE-200 */ 0x07f0, 0x00, 0x20, 0xe0, 0 },

 RPTI EP400 */ 0x0110, 0x00, 0x40, 0x95, 0 },

 SCM Ethernet */ 0x0ff0, 0x00, 0x20, 0xcb, 0 },

 Socket EA */ 0x4000, 0x00, 0xc0, 0x1b,

 Socket LP-E CF+ */ 0x01c0, 0x00, 0xc0, 0x1b, 0 },

 SuperSocket RE450T */ 0x0110, 0x00, 0xe0, 0x98, 0 },

 Volktek NPL-402CT */ 0x0060, 0x00, 0x40, 0x05, 0 },

 NEC PC-9801N-J12 */ 0x0ff0, 0x00, 0x00, 0x4c, 0 },

 PCMCIA Technology OEM */ 0x01c8, 0x00, 0xa0, 0x0c, 0 }

 Create new ethernet device */

 pcnet_attach */

 pcnet_detach */

/*======================================================================



    This probes for a card's hardware address, for card types that

    encode this information in their CIS.



 Allocate a small memory window */

 get_hwinfo */

/*======================================================================



    This probes for a card's hardware address by reading the PROM.

    It checks the address against a list of known types, then falls

    back to a simple NE2000 clone signature check.



 This is lifted straight from drivers/net/ethernet/8390/ne.c */

 Select page 0*/

 Set byte-wide (0x48) access. */

 Clear the count regs. */

 Mask completion irq. */

 0x20  Set to monitor */

 0x02  and loopback mode. */

 DMA starting at 0x0000. */

 get_prom */

/*======================================================================



    For DL10019 based cards, like the Linksys EtherFast



/*======================================================================



    For Asix AX88190 based cards



 Not much of a test, but the alternatives are messy */

 Set word-wide access. */

 DMA starting at 0x0400. */

/*======================================================================



    This should be totally unnecessary... but when we can't figure

    out the hardware address any other way, we'll let the user hard

    wire it when the module is initialized.



 get_hwired */

 for master/slave multifunction cards */

 This should be two 16-port windows */

 check whether forcing io_lines to 16 helps... */

 Check for user overrides */

 has_shmem is ignored if use_shmem != -1 */

 pcnet_config */

/*======================================================================



    MII interface support for DL10019 and DL10022 based cards



    On the DL10019, the MII IO direction bit is 0x10; on the DL10022

    it is 0x20.  Setting both bits seems to work on both card types.



/*======================================================================



    EEPROM access routines for DL10019 and DL10022 based cards



 DataOut for ASIC */

 DL10019 Full duplex mode */

 Shift the read command bits out. */

 Terminate the EEPROM access. */

/*

    The internal ASIC registers can be changed by EEPROM READ access

    with EE_ASIC bit set.

    In ASIC mode, EE_ADOT is used to output the data to the ASIC.

 Shift the read command bits out. */

 sync

 Terminate the ASIC access. */

====================================================================*/

 Advertise 100F, 100H, 10F, 10H */

 Restart MII autonegotiation */

 Advertise 100F, 100H, 10F, 10H */

 Restart MII autonegotiation */

====================================================================*/

 Clear bogus intr. */

 pcnet_open */

====================================================================*/

 pcnet_close */

/*======================================================================



    Hard reset the card.  This used to pause for the same period that

    a 8390 reset command required, but that shouldn't be necessary.



 Ack intr. */

 pcnet_reset_8390 */

====================================================================*/

====================================================================*/

    /* Check for pending interrupt with expired latency timer: with

 Disable collision detection on full duplex links */

 Disable collision detection on full duplex links */

 isolate this MII and try flipping to the other one */

====================================================================*/

 Read MII PHY register. */

 Write MII PHY register. */

====================================================================*/

 On page boundary */

 Fix for big endian systems */

 Ack intr. */

====================================================================*/

    /* This was for the ALPHA version only, but enough people have been

 DMA termination address check... */

	    /* DON'T check for 'inb_p(EN0_ISR) & ENISR_RDC' here

 Ack intr. */

 dma_block_input */

====================================================================*/

    /* Round the count up for word writes.  Do we need to do this?

       What effect will an odd byte count have on the 8390?

 We should already be in page 0, but to be safe... */

 Now the normal output. */

    /* This was for the ALPHA version only, but enough people have been

 DMA termination address check... */

 Ack intr. */

====================================================================*/

 set up block i/o functions */

====================================================================*/

 get last byte by fetching a word and masking */

 copy last byte doing a read-modify-write */

====================================================================*/

 Fix for big endian systems */

====================================================================*/

 We must wrap the input move. */

====================================================================*/

====================================================================*/

 Make sure it's a power of two.  */

 Allocate a memory window */

 Try scribbling on the buffer */

 set up block i/o functions */

====================================================================*/

 too generic! */

 PCMCIA_DEVICE_PROD_ID12("PCMCIA", "10/100 Ethernet Card", 0x281f1c5d, 0x11b0ffc0), */

/*

 *  Support for ColdFire CPU based boards using a NS8390 Ethernet device.

 *

 *  Derived from the many other 8390 drivers.

 *

 *  (C) Copyright 2012,  Greg Ungerer <gerg@uclinux.org>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of the Linux

 *  distribution for more details.

 NatSemi-defined port window offset */

 Issue a read to reset ,a write to clear */

 First page of TX buffer */

 Last page +1 of RX ring */

/*

 * A lot of the ColdFire boards use a separate address region for odd offset

 * register addresses. The following functions convert and map as required.

 * Note that the data port accesses are treated a little differently, and

 * always accessed via the insX/outsX functions.

 !NE2000_ODDOFFSET */

 !NE2000_ODDOFFSET */

/*

 * Hard reset the card. This used to pause for the same period that a

 * 8390 reset command required, but that shouldn't be necessary.

 This check _should_not_ be necessary, omit eventually. */

/*

 * This *shouldn't* happen.

 * If it does, it's the last thing you'll see

/*

 * Grab the 8390 specific header. Similar to the block_input routine, but

 * we don't need to be concerned with ring wrap as the header will be at

 * the start of a page, so we optimize accordingly.

 On page boundary */

 Ack intr */

/*

 * Block input and output, similar to the Crynwr packet driver.

 * If you are porting to a new ethercard, look at the packet driver source

 * for hints. The NEx000 doesn't share the on-board packet memory --

 * you have to put the packet out through the "remote DMA" dataport

 * using z_writeb.

 Ack intr */

 Make sure we transfer all bytes if 16bit IO writes */

 We should already be in page 0, but to be safe... */

 Now the normal output. */

 20ms */

 Ack intr */

	/*

	 * Read the 16 bytes of station address PROM.

	 * We must first initialize registers,

	 * similar to NS8390_init(eifdev, 0).

	 * We can't reliably read the SAPROM address without this.

	 * (I learned the hard way!).

 Select page 0 */

 0x48: Set byte-wide access */

 Clear the count regs */

 Mask completion irq */

 0x20 Set to monitor */

 0x02 and loopback mode */

 DMA starting at 0x0000 */

 We must set the 8390 for word mode. */

 Install the Interrupt handler */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/acorn/net/etherh.c

 *

 *  Copyright (C) 2000-2002 Russell King

 *

 * NS8390 I-cubed EtherH and ANT EtherM specific driver

 * Thanks to I-Cubed for information on their cards.

 * EtherM conversion (C) 1999 Chris Kemp and Tim Watterton

 * EtherM integration (C) 2000 Aleph One Ltd (Tak-Shing Chan)

 * EtherM integration re-engineered by Russell King.

 *

 * Changelog:

 *  08-12-1996	RMK	1.00	Created

 *		RMK	1.03	Added support for EtherLan500 cards

 *  23-11-1997	RMK	1.04	Added media autodetection

 *  16-04-1998	RMK	1.05	Improved media autodetection

 *  10-02-2000	RMK	1.06	Updated for 2.3.43

 *  13-05-2000	RMK	1.07	Updated for 2.3.99-pre8

 *  12-10-1999  CK/TEW		EtherM driver first release

 *  21-12-2000	TTC		EtherH/EtherM integration

 *  25-12-2000	RMK	1.08	Clean integration of EtherM into this driver.

 *  03-01-2002	RMK	1.09	Always enable IRQs if we're in the nic slot.

 MEMC */

 MEMC */

 IOC  */

 MEMC */

 MEMC */

 MEMC */

/*

 * These came from CK/TEW

 MEMC */

 MEMC */

 MEMC */

 ------------------------------------------------------------------------ */

 set the interface type */

/*

 * Configure the interface.  Note that we ignore the other

 * parts of ifmap, since its mostly meaningless for this driver.

		/*

		 * If the user explicitly sets the interface

		 * media type, turn off automedia detection.

/*

 * Reset the 8390 (hard reset).  Note that we can't actually do this.

	/*

	 * See if we need to change the interface type.

	 * Note that we use 'interface_num' as a flag

	 * to indicate that we need to change the media.

/*

 * Write a block of data out to the 8390

	/*

	 * Make sure we have a round number of bytes if we're in word mode.

 20ms */

/*

 * Read a block of data from the 8390

/*

 * Read a header from the 8390

/*

 * Open/initialize the board.  This is called (in the current kernel)

 * sometime after booting when the 'ifconfig' program is run.

 *

 * This routine should set everything up anew at each open, even

 * registers that "should" only need to be set once at boot, so that

 * there is non-reboot way to recover if something goes wrong.

	/*

	 * Make sure that we aren't going to change the

	 * media type on the next reset - we are about to

	 * do automedia manually now.

	/*

	 * If we are doing automedia detection, do it now.

	 * This is more reliable than the 8390's detection.

/*

 * The inverse routine to etherh_open().

/*

 * Read the ethernet address string from the on board rom.

 * This is an ascii string...

/*

 * Create an ethernet address from the system serial number.

	/*

	 * IRQ and control port handling - only for non-NIC slot cards.

		/*

		 * If we're in the NIC slot, make sure the IRQ is enabled

 wd.c: A WD80x3 ethernet driver for linux. */

/*

	Written 1993-94 by Donald Becker.



	Copyright 1993 United States Government as represented by the

	Director, National Security Agency.



	This software may be used and distributed according to the terms

	of the GNU General Public License, incorporated herein by reference.



	The author may be reached as becker@scyld.com, or C/O

	Scyld Computing Corporation

	410 Severn Ave., Suite 210

	Annapolis MD 21403



	This is a driver for WD8003 and WD8013 "compatible" ethercards.



	Thanks to Russ Nelson (nelson@crnwyr.com) for loaning me a WD8013.



	Changelog:



	Paul Gortmaker	: multiple card support for module users, support

			  for non-standard memory sizes.





 A zero-terminated list of I/O addresses to be probed. */

 First page of TX buffer */

 Last page +1 of RX ring */

 Last page +1 of RX ring */

 Offset to ASIC command register. */

 Board reset, in WD_CMDREG. */

 Enable the shared memory. */

 Offset to 16-bit-only ASIC register 5. */

 Enable 16 bit access from the ISA bus. */

 Enable 16 bit access from the 8390. */

 Offset to the 8390 from the base_addr. */

/*	Probe for the WD8003 and WD8013.  These cards have the station

	address PROM at I/O ports <base>+8 to <base>+13, with a checksum

	following. A Soundblaster can have the same checksum as an WDethercard,

	so we have an extra exclusionary check for it.



	The wd_probe1() routine initializes the card and fills the

 Check a user specified location. */

 Don't probe at all. */

 An old card without config registers. */

 0 = 8 bit, 1 = 16 bit */

 Extra check to avoid soundcard. */

 Check for semi-valid mem_start/end values if supplied. */

	/* The following PureData probe code was contributed by

	   Mike Jagdis <jaggy@purplet.demon.co.uk>. Puredata does software

	   configuration differently from others so we have to check for them.

	   This detects an 8 bit, 16 bit or dumb (Toshiba, jumpered) card.

 Either 0x01 (dumb) or they've released a new version. */

 End of PureData probe */

		/* This method of checking for a 16-bit board is borrowed from the

		   we.c driver.  A simpler method is just to look in ASIC reg. 0x03.

		   I'm comparing the two method in alpha test to make certain they

		/* Check for the old 8 bit board - it has register 0/8 aliasing.

 fiddle with 16bit bit */

 attempt to clear 16bit bit */

 A 16 bit card */

 In a 16 slot. */

 Magic to set ASIC to word-wide mode. */

 We have a 16bit board here! */

 Restore original reg1 value. */

 Allow a compile-time override.	 */

 Sanity and old 8003 check */

 Future plan: this could check a few likely locations first. */

 Some boards don't have the register 5 -- it returns 0xff. */

 The 8390 isn't at the base address -- the ASIC regs are there! */

 Ack!! No way to read the IRQ! */

			/* We have an old-style ethercard that doesn't report its IRQ

			   line.  Do autoirq to find the IRQ line. Note that this IS NOT

 Disable all intrs. */

 Enable all interrupts. */

 Trigger it... */

 Mask all intrs. again. */

 Fixup bogosity: IRQ2 is really IRQ9 */

	/* Snarf the interrupt now.  There's no point in waiting since we cannot

 OK, were are certain this is going to work.  Setup the device. */

 Don't map in the shared memory until the board is actually opened. */

 Some cards (eg WD8003EBT) can be jumpered for more (32k!) memory. */

 Enable interrupt generation on softconfig cards -- M.U */

 .. but possibly potentially unsafe - Donald */

 WD_CMDREG */

  /* Map in the shared memory. Always set register 0 last to remain

 WD_CMDREG */

 WD_CMDREG */

 Set up the ASIC registers, just in case something changed them. */

/* Grab the 8390 specific header. Similar to the block_input routine, but

   we don't need to be concerned with ring wrap as the header will be at

 WD_CMDREG */

	/* We'll always get a 4 byte header read followed by a packet read, so

 Officially this is what we are doing, but the readl() is faster */

 unfortunately it isn't endian aware of the struct               */

/* Block input and output are easy on shared memory ethercards, and trivial

   on the Western digital card where there is no choice of how to do it.

   The only complications are that the ring buffer wraps, and need to map

 WD_CMDREG */

 We must wrap the input move. */

 Packet is in one chunk -- we can copy + cksum. */

 Turn off 16 bit access so that reboot works.	 ISA brain-damage */

 WD_CMDREG */

 Turn on and off 16 bit access so that reboot works. */

 WD_CMDREG */

 Change from 16-bit to 8-bit shared memory so reboot works. */

 And disable the shared memory. */

 Max number of wd cards per module */

 for non std. mem size */

/* This is set up so that only a single autoprobe takes place per call.

 only autoprobe 1st one */

 MODULE */

/*

 * Amiga Linux/68k 8390 based PCMCIA Ethernet Driver for the Amiga 1200

 *

 * (C) Copyright 1997 Alain Malek

 *                    (Alain.Malek@cryogen.com)

 *

 * ----------------------------------------------------------------------------

 *

 * This program is based on

 *

 * ne.c:       A general non-shared-memory NS8390 ethernet driver for linux

 *             Written 1992-94 by Donald Becker.

 *

 * 8390.c:     A general NS8390 ethernet driver core for linux.

 *             Written 1992-94 by Donald Becker.

 *

 * cnetdevice: A Sana-II ethernet driver for AmigaOS

 *             Written by Bruce Abbott (bhabbott@inhb.co.nz)

 *

 * ----------------------------------------------------------------------------

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of the Linux

 * distribution for more details.

 *

 * ----------------------------------------------------------------------------

 *

 ---- No user-serviceable parts below ---- */

 NatSemi-defined port window offset. */

 Issue a read to reset, a write to clear. */

 First page of TX buffer */

 Last page +1 of RX ring */

 First page of TX buffer */

 Last page +1 of RX ring */

 IO base address used for nic */

/*

   use MANUAL_CONFIG and MANUAL_OFFSET for enabling IO by hand

   you can find the values to use by looking at the cnet.device

   config file example (the default values are for the CNET40BC card)

/*

#define MANUAL_CONFIG 0x20

#define MANUAL_OFFSET 0x3f8



#define MANUAL_HWADDR0 0x00

#define MANUAL_HWADDR1 0x12

#define MANUAL_HWADDR2 0x34

#define MANUAL_HWADDR3 0x56

#define MANUAL_HWADDR4 0x78

#define MANUAL_HWADDR5 0x9a

 signal if card already owned */

 check if a card is inserted */

 disable pcmcia irq for readtuple */

 XXX: shouldn't we re-enable irq here? */

 XXX: shouldn't we re-enable irq here? */

 Reset card. Who knows what dain-bramaged state it was left in. */

 Ack all intr. */

    /* Read the 16 bytes of station address PROM.

       We must first initialize registers, similar to NS8390_init(eifdev, 0).

       We can't reliably read the SAPROM address without this.

 Select page 0*/

 Set byte-wide (0x48) access. */

 Clear the count regs. */

 Mask completion irq. */

 0x20  Set to monitor */

 0x02  and loopback mode. */

 DMA starting at 0x0000. */

sizeof(SA_prom)*/; i+=2) {

    /*	At this point, wordlength *only* tells us if the SA_prom is doubled

	up or not because some broken PCI cards don't respect the byte-wide

	request in program_seq above, and hence don't have doubled up values.

 We must set the 8390 for word mode. */

 Set up the rest of the parameters. */

 We must set the 8390 for word mode. */

 Install the Interrupt handler */

 ack PCMCIA int req */

/* Hard reset the card.  This used to pause for the same period that a

 This check _should_not_ be necessary, omit eventually. */

 Ack intr. */

/* Grab the 8390 specific header. Similar to the block_input routine, but

   we don't need to be concerned with ring wrap as the header will be at

 This *shouldn't* happen. If it does, it's the last thing you'll see */

 On page boundary */

 Ack intr. */

/* Block input and output, similar to the Crynwr packet driver.  If you

   are porting to a new ethercard, look at the packet driver source for hints.

   The NEx000 doesn't share the on-board packet memory -- you have to put

 This *shouldn't* happen. If it does, it's the last thing you'll see */

 Ack intr. */

    /* Round the count up for word writes.  Do we need to do this?

       What effect will an odd byte count have on the 8390?

 This *shouldn't* happen. If it does, it's the last thing you'll see */

 We should already be in page 0, but to be safe... */

 Now the normal output. */

 20ms */

 Ack intr. */

 to get rid of the sti() within ei_interrupt */

 get and write config byte to enable IO port */

/*======================================================================



    A PCMCIA ethernet driver for Asix AX88190-based cards



    The Asix AX88190 is a NS8390-derived chipset with a few nasty

    idiosyncracies that make it very inconvenient to support with a

    standard 8390 driver.  This driver is based on pcnet_cs, with the

    tweaked 8390 code grafted on the end.  Much of what I did was to

    clean up and update a similar driver supplied by Asix, which was

    adapted by William Lee, william@asix.com.tw.



    Copyright (C) 2001 David A. Hinds -- dahinds@users.sourceforge.net



    axnet_cs.c 1.28 2002/06/29 06:27:37



    The network driver code is based on Donald Becker's NE2000 code:



    Written 1992,1993 by Donald Becker.

    Copyright 1993 United States Government as represented by the

    Director, National Security Agency.  This software may be used and

    distributed according to the terms of the GNU General Public License,

    incorporated herein by reference.

    Donald Becker may be reached at becker@scyld.com



 NatSemi-defined port window offset. */

 Issue a read to reset, a write to clear. */

 Offset of MII access port */

 Offset of TEST Register port */

 Offset of General Purpose Register Port */

 First page of TX buffer */

 Last page +1 of RX ring */

 Max wait in jiffies for Tx RDC */

====================================================================*/

 Module parameters */

====================================================================*/

====================================================================*/

 axnet_attach */

 axnet_detach */

/*======================================================================



    This probes for a card's hardware address by reading the PROM.



 This is based on drivers/net/ethernet/8390/ne.c */

 Select page 0*/

 Set word-wide access. */

 Clear the count regs. */

 Mask completion irq. */

 0x60  Set to monitor */

 0x02  and loopback mode. */

 DMA starting at 0x0400. */

 Not much of a test, but the alternatives are messy */

 get_prom */

 for master/slave multifunction cards */

 This should be two 16-port windows */

 don't trust the CIS on this; Linksys got it wrong */

 select Internal PHY */

	/* Maybe PHY is in power down mode. (PPD_SET = 1)

 axnet_config */

/*======================================================================



    MII interface support



====================================================================*/

 Clear bogus intr. */

 axnet_open */

====================================================================*/

 axnet_close */

/*======================================================================



    Hard reset the card.  This used to pause for the same period that

    a 8390 reset command required, but that shouldn't be necessary.



 Ack intr. */

 axnet_reset_8390 */

====================================================================*/

    /* Check for pending interrupt with expired latency timer: with

====================================================================*/

 Read MII PHY register. */

 Write MII PHY register. */

====================================================================*/

 On page boundary */

 Fix for big endian systems */

====================================================================*/

====================================================================*/

    /* Round the count up for word writes.  Do we need to do this?

       What effect will an odd byte count have on the 8390?

====================================================================*/

 8390.c: A general NS8390 ethernet driver core for linux. */

/*

	Written 1992-94 by Donald Becker.

  

	Copyright 1993 United States Government as represented by the

	Director, National Security Agency.



	This software may be used and distributed according to the terms

	of the GNU General Public License, incorporated herein by reference.



	The author may be reached as becker@scyld.com, or C/O

	Scyld Computing Corporation

	410 Severn Ave., Suite 210

	Annapolis MD 21403



  This is the chip-specific code for many 8390-based ethernet adaptors.

  This is not a complete driver, it must be combined with board-specific

  code such as ne.c, wd.c, 3c503.c, etc.



  Seeing how at least eight drivers use this code, (not counting the

  PCMCIA ones either) it is easy to break some card by what seems like

  a simple innocent change. Please contact me or Donald if you think

  you have found something that needs changing. -- PG



  Changelog:



  Paul Gortmaker	: remove set_bit lock, other cleanups.

  Paul Gortmaker	: add ei_get_8390_hdr() so we can pass skb's to 

			  ei_block_input() for eth_io_copy_and_sum().

  Paul Gortmaker	: exchange static int ei_pingpong for a #define,

			  also add better Tx error handling.

  Paul Gortmaker	: rewrite Rx overrun handling as per NS specs.

  Alexey Kuznetsov	: use the 8390's six bit hash multicast filter.

  Paul Gortmaker	: tweak ANK's above multicast changes a bit.

  Paul Gortmaker	: update packet statistics for v2.1.x

  Alan Cox		: support arbitrary stupid port mappings on the

			  68K Macintosh. Support >16bit I/O spaces

  Paul Gortmaker	: add kmod support for auto-loading of the 8390

			  module by all drivers that require it.

  Alan Cox		: Spinlocking work, added 'BUG_83C690'

  Paul Gortmaker	: Separate out Tx timeout code from Tx path.



  Sources:

  The National Semiconductor LAN Databook, and the 3Com 3c503 databook.



/* These are the operational function interfaces to board-specific

   routines.

	void reset_8390(struct net_device *dev)

		Resets the board associated with DEV, including a hardware reset of

		the 8390.  This is only called when there is a transmit timeout, and

		it is always followed by 8390_init().

	void block_output(struct net_device *dev, int count, const unsigned char *buf,

					  int start_page)

		Write the COUNT bytes of BUF to the packet buffer at START_PAGE.  The

		"page" value uses the 8390's 256-byte pages.

	void get_8390_hdr(struct net_device *dev, struct e8390_hdr *hdr, int ring_page)

		Read the 4 byte, page aligned 8390 header. *If* there is a

		subsequent read, it will be of the rest of the packet.

	void block_input(struct net_device *dev, int count, struct sk_buff *skb, int ring_offset)

		Read COUNT bytes from the packet buffer into the skb data area. Start 

		reading from RING_OFFSET, the address as the 8390 sees it.  This will always

		follow the read of the 8390 header. 

 Index to functions. */

 Routines generic to NS8390-based boards. */

/*

 *	SMP and the 8390 setup.

 *

 *	The 8390 isn't exactly designed to be multithreaded on RX/TX. There is

 *	a page register that controls bank and packet buffer access. We guard

 *	this with ei_local->page_lock. Nobody should assume or set the page other

 *	than zero when the lock is not held. Lock holders must restore page 0

 *	before unlocking. Even pure readers must take the lock to protect in 

 *	page 0.

 *

 *	To make life difficult the chip can also be very slow. We therefore can't

 *	just use spinlocks. For the longer lockups we disable the irq the device

 *	sits on and hold the lock. We must hold the lock because there is a dual

 *	processor case other than interrupts (get stats/set multicast list in

 *	parallel with each other and transmit).

 *

 *	Note: in theory we can just disable the irq on the card _but_ there is

 *	a latency on SMP irq delivery. So we can easily go "disable irq" "sync irqs"

 *	enter lock, take the queued irq. So we waddle instead of flying.

 *

 *	Finally by special arrangement for the purpose of being generally 

 *	annoying the transmit function is called bh atomic. That places

 *	restrictions on the user context callers as disable_irq won't save

 *	them.

/**

 * ax_open - Open/initialize the board.

 * @dev: network device to initialize

 *

 * This routine goes all-out, setting everything

 * up anew at each open, even though many of these registers should only

 * need to be set once at boot.

	/*

	 *	Grab the page lock so we own the register set, then call

	 *	the init function.

	/* Set the flag before we drop the lock, That way the IRQ arrives

/**

 * ax_close - shut down network device

 * @dev: network device to close

 *

 * Opposite of ax_open(). Only used when "ifconfig <devname> down" is done.

	/*

	 *      Hold the page lock during close

/**

 * axnet_tx_timeout - handle transmit time out condition

 * @dev: network device which has apparently fallen asleep

 * @txqueue: unused

 *

 * Called by kernel when device never acknowledges a transmit has

 * completed (or failed) - i.e. never posted a Tx related interrupt.

 The 8390 probably hasn't gotten on the cable yet. */

 Try a different xcvr.  */

 Ugly but a reset can be slow, yet must be protected */

 Try to restart the card.  Perhaps the user has fixed something. */

/**

 * axnet_start_xmit - begin packet transmission

 * @skb: packet to be sent

 * @dev: network device to which packet is sent

 *

 * Sends a packet to an 8390 network device.

	/* Mask interrupts from the ethercard. 

	   SMP: We have to grab the lock here otherwise the IRQ handler

	   on another CPU can flip window and race the IRQ mask set. We end

	/*

	 *	Slow phase with lock held.

	/*

	 * We have two Tx slots available for use. Find the first free

	 * slot, and then perform some sanity checks. With two Tx bufs,

	 * you get very close to transmitting back-to-back packets. With

	 * only one Tx buf, the transmitter sits idle while you reload the

	 * card, leaving a substantial gap between each transmitted packet.

 We should never get here. */

	/*

	 * Okay, now upload the packet and trigger a send if the transmitter

	 * isn't already sending. If it is busy, the interrupt handler will

	 * trigger the send later, upon receiving a Tx done interrupt.

 Turn 8390 interrupts back on. */

/**

 * ax_interrupt - handle the interrupts from an 8390

 * @irq: interrupt number

 * @dev_id: a pointer to the net_device

 *

 * Handle the ether interface interrupts. We pull packets from

 * the 8390 via the card specific functions and fire them at the networking

 * stack. We also handle transmit completions and wake the transmit path if

 * necessary. We also update the counters and do other housekeeping as

 * needed.

	/*

	 *	Protect the irq test too.

 This might just be an interrupt for a PCI device sharing this line */

 The "irqlock" check is only for testing. */

 !!Assumption!! -- we stay in page 0.	 Don't break this. */

 AX88190 bug fix. */

 Got a good (?) packet. */

 Push the next to-transmit packet through. */

 0xFF is valid for a card removal */

 Ack. most intrs. */

 Ack. all intrs. */

 Turn 8390 interrupts back on. */

/**

 * ei_tx_err - handle transmitter error

 * @dev: network device which threw the exception

 *

 * A transmitter error has happened. Most likely excess collisions (which

 * is a fairly normal condition). If the error is one where the Tx will

 * have been aborted, we try and send another one right away, instead of

 * letting the failed packet sit and collect dust in the Tx buffer. This

 * is a much better solution as it avoids kernel based Tx timeouts, and

 * an unnecessary card reset.

 *

 * Called with lock held.

/**

 * ei_tx_intr - transmit interrupt handler

 * @dev: network device for which tx intr is handled

 *

 * We have finished a transmit: check for errors and then trigger the next

 * packet to be sent. Called with lock held.

	/*

	 * There are two Tx buffers, see which one finished, and trigger

	 * the send of another one if it exists.

	else

		netdev_warn(dev, "unexpected TX-done interrupt, lasttx=%d\n",

			    ei_local->lasttx);

 Minimize Tx latency: update the statistics after we restart TXing. */

/**

 * ei_receive - receive some packets

 * @dev: network device with which receive will be run

 *

 * We have a good packet(s), get it/them out of the buffers. 

 * Called with lock held.

 Get the rx page (incoming packet pointer). */

 Remove one frame from the ring.  Boundary is always a page behind. */

		/* Someday we'll omit the previous, iff we never get this message.

		   (There is at least one clone claimed to have a problem.)  

		   

		   Keep quiet if it looks like a card removal. One problem here

		   is that some clones crash in roughly the same way.

 Read all the frames? */

 Done for now */

 IP headers on 16 byte boundaries */

 Make room */

 NB: The NIC counts CRC, frame and missed errors. */

 This _should_ never happen: it's here for avoiding bad clones. */

/**

 * ei_rx_overrun - handle receiver overrun

 * @dev: network device which threw exception

 *

 * We have a receiver overrun: we have to kick the 8390 to get it started

 * again. Problem is that you have to kick it exactly as NS prescribes in

 * the updated datasheets, or "the NIC may act in an unpredictable manner."

 * This includes causing "the NIC to defer indefinitely when it is stopped

 * on a busy network."  Ugh.

 * Called with lock held. Don't call this with the interrupts off or your

 * computer will hate you - it takes 10ms or so. 

	/*

	 * Record whether a Tx was in progress and then issue the

	 * stop command.

	/* 

	 * Wait a full Tx time (1.2ms) + some guard time, NS says 1.6ms total.

	 * We wait at least 2ms.

	/*

	 * Reset RBCR[01] back to zero as per magic incantation.

	/*

	 * See if any Tx was interrupted or not. According to NS, this

	 * step is vital, and skipping it will cause no end of havoc.

	/*

	 * Have to enter loopback mode and then restart the NIC before

	 * you are allowed to slurp packets up off the ring.

	/*

	 * Clear the Rx ring of all the debris, and ack the interrupt.

	/*

	 * Leave loopback mode, and resend any packet that got stopped.

/*

 *	Collect the stats. This is called unlocked and from several contexts.

 If the card is stopped, just return the present stats. */

 Read the counter registers, assuming we are in page 0. */

/*

 * Form the 64 bit 8390 multicast table from the linked list of addresses

 * associated with this dev structure.

		/* 

		 * The 8390 uses the 6 most significant bits of the

		 * CRC to index the multicast table.

/**

 * do_set_multicast_list - set/clear multicast filter

 * @dev: net device for which multicast filter is adjusted

 *

 *	Set or clear the multicast filter for this adaptor.

 *	Must be called with lock held. 

 set to accept-all */

/*

 *	Called without lock held. This is invoked from user context and may

 *	be parallel to just about everything else. Its also fairly quick and

 *	not called too often. Must protect against both bh and irq users

 This page of functions should be 8390 generic */

 Follow National Semi's recommendations for initializing the "NIC". */

/**

 * AX88190_init - initialize 8390 hardware

 * @dev: network device to initialize

 * @startp: boolean.  non-zero value to initiate chip processing

 *

 *	Must be called with lock held.

 Follow National Semi's recommendations for initing the DP83902. */

 0x21 */

 0x48 or 0x49 */

 Clear the remote byte count registers. */

 Set to monitor and loopback mode -- this is vital!. */

 0x60 */

 0x02 */

 Set the transmit page and receive ring. */

 3c503 says 0x3f,NS0x26*/

 assert boundary+1 */

 Clear the pending interrupts and mask. */

 Copy the station address into the DS8390 registers. */

 0x61 */

 select Internal PHY */

 xmit on. */

 3c503 TechMan says rxconfig only after the NIC is started. */

 rx on, */

 (re)load the mcast table */

/* Trigger a transmit start, assuming the length is valid. 

 New Hydra driver using generic 8390 core */

 Based on old hydra driver by Topi Kanerva (topi@susanna.oulu.fi) */

 This file is subject to the terms and conditions of the GNU General      */

 Public License.  See the file COPYING in the main directory of the       */

 Linux distribution for more details.                                     */

 Peter De Schrijver (p2@mind.be) */

 Oldenburg 2000 */

 The Amiganet is a Zorro-II board made by Hydra Systems. It contains a    */

 NS8390 NIC (network interface controller) clone, 16 or 64K on-board RAM  */

 and 10BASE-2 (thin coax) and AUI connectors.                             */

 First page of TX buffer */

 Last page +1 of RX ring */

 We must set the 8390 for word mode. */

 Install the Interrupt handler */

 smc-ultra.c: A SMC Ultra ethernet driver for linux. */

/*

	This is a driver for the SMC Ultra and SMC EtherEZ ISA ethercards.



	Written 1993-1998 by Donald Becker.



	Copyright 1993 United States Government as represented by the

	Director, National Security Agency.



	This software may be used and distributed according to the terms

	of the GNU General Public License, incorporated herein by reference.



	The author may be reached as becker@scyld.com, or C/O

	Scyld Computing Corporation

	410 Severn Ave., Suite 210

	Annapolis MD 21403



	This driver uses the cards in the 8390-compatible mode.

	Most of the run-time complexity is handled by the generic code in

	8390.c.  The code in this file is responsible for



		ultra_probe()	 	Detecting and initializing the card.

		ultra_probe1()

		ultra_probe_isapnp()



		ultra_open()		The card-specific details of starting, stopping

		ultra_reset_8390()	and resetting the 8390 NIC core.

		ultra_close()



		ultra_block_input()		Routines for reading and writing blocks of

		ultra_block_output()	packet buffer memory.

		ultra_pio_input()

		ultra_pio_output()



	This driver enables the shared memory only when doing the actual data

	transfers to avoid a bug in early version of the card that corrupted

	data transferred by a AHA1542.



	This driver now supports the programmed-I/O (PIO) data transfer mode of

	the EtherEZ. It does not use the non-8390-compatible "Altego" mode.

	That support (if available) is in smc-ez.c.



	Changelog:



	Paul Gortmaker	: multiple card support for module users.

	Donald Becker	: 4/17/96 PIO support, minor potential problems avoided.

	Donald Becker	: 6/6/96 correctly set auto-wrap bit.

	Alexander Sotirov : 1/20/01 Added support for ISAPnP cards



	Note about the ISA PnP support:



	This driver can not autoprobe for more than one SMC EtherEZ PnP card.

	You have to configure the second card manually through the /proc/isapnp

	interface and then load the module with an explicit io=0x___ option.

 A zero-terminated list of I/O addresses to be probed. */

 terminate list */

 First page of TX buffer */

 Offset to ASIC command register. */

 Board reset, in ULTRA_CMDREG. */

 Enable the shared memory. */

 I/O Pipe Data (16 bits), PIO operation. */

 I/O Pipe Address for PIO operation. */

 NIC register offset from the base_addr. */

 Early receive warning count. */

/*	Probe for the Ultra.  This looks like a 8013 with the station

	address PROM at I/O ports <base>+8 to <base>+13, with a checksum

	following.

 Check a single specified location. */

 Don't probe at all. */

 Look for any installed ISAPnP cards */

 Values from various config regs. */

 Check the ID nibble. */

 SMC Ultra */

 SMC EtherEZ */

 Select the station address register set. */

	/* Switch from the station address to the alternate register set and

 Enabled FINE16 mode to avoid BIOS ROM width mismatches @ reboot. */

	/* Switch back to the station address register set so that the MS-DOS driver

 The IRQ bits are split. */

 The 8390 isn't at the base address, so fake the offset */

 Avoid already found cards from previous calls */

 if no io and irq, search for next */

 found it */

 Shouldn't happen. */

 ASIC addr */

 Disable shared memory for safety. */

 Set the IRQ line. */

 Enable interrupts and PIO. */

 Enable ring read auto-wrap. */

 Enable interrupts and memory. */

	/* Set the early receive warning level in window 0 high enough not

 ASIC base addr */

 Disable shared memory for safety. */

 Enable interrupts and PIO. */

 Enable interrupts and memory. */

/* Grab the 8390 specific header. Similar to the block_input routine, but

   we don't need to be concerned with ring wrap as the header will be at

 shmem on */

 Officially this is what we are doing, but the readl() is faster */

 unfortunately it isn't endian aware of the struct               */

 shmem off */

/* Block input and output are easy on shared memory ethercards, the only

 Enable shared memory. */

 We must wrap the input move. */

 Disable memory. */

 Enable shared memory. */

 Disable memory. */

/* The identical operations for programmed I/O cards.

   The PIO model is trivial to use: the 16 bit start address is written

   byte-sequentially to IOPA, with no intervening I/O operations, and the

   data is read or written to the IOPD data port.

   The only potential complication is that the address register is shared

   and must be always be rewritten between each read/write direction change.

   This is no problem for us, as the 8390 code ensures that we are single

 ASIC addr */

 Set the address, LSB first. */

 ASIC addr */

 For now set the address again, although it should already be correct. */

 Set the address, LSB first. */

 We know skbuffs are padded to at least word alignment. */

 ASIC addr */

 Set the address, LSB first. */

 An extra odd byte is OK here as well. */

 CMDREG */

 Disable interrupts. */

	/* We should someday disable shared memory and change to 8-bit mode

 Max number of Ultra cards per module */

/* This is set up so that only a single autoprobe takes place per call.

 only autoprobe 1st one */

 NB: ultra_close_card() does free_irq */

 MODULE */

 SPDX-License-Identifier: GPL-2.0

/* Longword-access area. Translated to 2 16-bit access cycles by the

 * X-Surf 100 FPGA

 Sub-Areas for fast data register access; addresses relative to area begin */

 force unsigned long back to 'void __iomem *' */

 define EI_SHIFT() to take into account our register offsets */

 Ensure we have our RCR base value */

 from ne.c */

/* These functions guarantee that the iomem is accessed with 32 bit

 * cycles only. z_memcpy_fromio / z_memcpy_toio don't

 copy whole blocks */

 copy whole dwords */

 copy whole blocks */

 copy whole dwords */

/* Block input and output, similar to the Crynwr packet driver. If

 * you are porting to a new ethercard, look at the packet driver

 * source for hints. The NEx000 doesn't share the on-board packet

 * memory -- you have to put the packet out through the "remote DMA"

 * dataport using ei_outb.

	/* Round the count up for word writes. Do we need to do this?

	 * What effect will an odd byte count have on the 8390?  I

	 * should check someday.

	/* This *shouldn't* happen. If it does, it's the last thing

	 * you'll see

 We should already be in page 0, but to be safe... */

 Now the normal output. */

 20ms */

 Ack intr. */

	/* This table is referenced in the device structure, so it must

	 * outlive the scope of xsurf100_probe.

	/* X-Surf 100 control and 32 bit ring buffer data access areas.

	 * These resources are not used by the ax88796 driver, so must

	 * be requested here and passed via platform data.

 error handling for ioremap regs */

 error handling for ioremap data */

/* mac8390.c: New driver for 8390-based Nubus (or Nubus-alike)

/* Based on the former daynaport.c driver, by Alan Cox.  Some code

   taken from or inspired by skeleton.c by Donald Becker, acenic.c by

   Jes Sorensen, and ne2k-pci.c by Donald Becker and Paul Gortmaker.



   This software may be used and distributed according to the terms of

/* 2000-02-28: support added for Dayna and Kinetics cards by

 2000-04-04: support added for Dayna2 by bart@etpmod.phys.tue.nl */

 2001-04-18: support for DaynaPort E/LC-M by rayk@knightsmanor.org */

/* 2001-05-15: support for Cabletron ported from old daynaport driver

 * and fixed access to Sonic Sys card which masquerades as a Farallon

 2002-12-30: Try to support more cards, some clues from NetBSD driver */

 2003-12-26: Make sure Asante cards always work. */

 First page of TX buffer */

 First page of RX buffer */

 Last page +1 of RX ring */

 First page of TX buffer */

/*

 * Unfortunately it seems we have to hardcode these for the moment

 * Shouldn't the card know about this?

 * Does anyone know where to read it off the card?

 * Do we trust the data provided by the card?

 apple */

 asante */

 farallon */

 cabletron */

 dayna */

 interlan */

 kinetics */

 on which cards do we use NuBus resources? */

 apple */

 asante */

 farallon */

 cabletron */

 dayna */

 interlan */

 kinetics */

 Sane (32-bit chunk memory read/write) - Some Farallon and Apple do this*/

 dayna_memcpy to and from card */

 Dayna - Dayna/Kinetics use this */

 Slow Sane (16-bit chunk memory read/write) Cabletron uses this */

		/*

		 * These correspond to Dayna Sonic cards

		 * which use the macsonic driver

 Try writing 32 bits */

 Now read it back */

 Write 16 bit output */

 Now read it back */

 Check up to 32K in 4K increments */

		/* Unwriteable - we have a fully decoded card and the

 write a distinctive byte */

 check that we read back what we wrote */

 check for partial decode and wrap */

	/*

	 * in any case, we stopped once we tried one block too many,

	 * or once we reached 32K

 This is getting to be a habit */

	/*

	 * Get some Nubus info - we will trust the card's idea

	 * of where its memory and registers are.

 Get the MAC address */

 yes, this is how the Apple driver does it */

 it's the same */

			/* The base address is unreadable if 0x00

			 * has been written to the command register

			 * Reset the chip by writing E8390_NODMA +

			 *   E8390_PAGE0 + E8390_STOP just to be

			 *   sure

 Now fill in our stuff */

 GAR, ei_status is actually a macro even though it looks global */

 Cabletron's TX/RX buffers are backwards */

 Fill in model-specific information and functions */

 16 bit card, register map is reversed */

 32 bit card, register map is reversed */

		/* Some Asante cards pass the 32 bit test

		 * but overwrite system memory when run at 32 bit.

		 * so we run them all at 16 bit.

 16 bit card, register map is short forward */

 16 bit memory, register map is forward */

 dayna and similar */

 16 bit memory, register map is forward */

 Good, done, now spit out some messages */

 dayna_memcpy_fromio/dayna_memcpy_toio */

 directly from daynaport.c by Alan Cox */

 word, skip overhead */

 Leading byte? */

 skip cruft */

 Trailing byte? */

 word, skip overhead */

 Leading byte? */

 avoid a byte write (stomps on other data) */

 Copy and */

 skip cruft */

 Trailing byte? */

 card doesn't like byte writes */

 sane block input/output */

 Fix endianness */

 We must wrap the input move. */

 dayna block input/output */

 Fix endianness */

	/* Note the offset math is done in card memory space which is word

 We must wrap the input move. */

 Cabletron block I/O */

 Register endianism - fix here rather than 8390.c */

 We must wrap the input move. */

 SPDX-License-Identifier: GPL-2.0-only

 8390 core for usual drivers */

 MODULE */

 8390.c: A general NS8390 ethernet driver core for linux. */

/*

	Written 1992-94 by Donald Becker.



	Copyright 1993 United States Government as represented by the

	Director, National Security Agency.



	This software may be used and distributed according to the terms

	of the GNU General Public License, incorporated herein by reference.



	The author may be reached as becker@scyld.com, or C/O

	Scyld Computing Corporation

	410 Severn Ave., Suite 210

	Annapolis MD 21403





  This is the chip-specific code for many 8390-based ethernet adaptors.

  This is not a complete driver, it must be combined with board-specific

  code such as ne.c, wd.c, 3c503.c, etc.



  Seeing how at least eight drivers use this code, (not counting the

  PCMCIA ones either) it is easy to break some card by what seems like

  a simple innocent change. Please contact me or Donald if you think

  you have found something that needs changing. -- PG





  Changelog:



  Paul Gortmaker	: remove set_bit lock, other cleanups.

  Paul Gortmaker	: add ei_get_8390_hdr() so we can pass skb's to

			  ei_block_input() for eth_io_copy_and_sum().

  Paul Gortmaker	: exchange static int ei_pingpong for a #define,

			  also add better Tx error handling.

  Paul Gortmaker	: rewrite Rx overrun handling as per NS specs.

  Alexey Kuznetsov	: use the 8390's six bit hash multicast filter.

  Paul Gortmaker	: tweak ANK's above multicast changes a bit.

  Paul Gortmaker	: update packet statistics for v2.1.x

  Alan Cox		: support arbitrary stupid port mappings on the

			  68K Macintosh. Support >16bit I/O spaces

  Paul Gortmaker	: add kmod support for auto-loading of the 8390

			  module by all drivers that require it.

  Alan Cox		: Spinlocking work, added 'BUG_83C690'

  Paul Gortmaker	: Separate out Tx timeout code from Tx path.

  Paul Gortmaker	: Remove old unused single Tx buffer code.

  Hayato Fujiwara	: Add m32r support.

  Paul Gortmaker	: use skb_padto() instead of stack scratch area



  Sources:

  The National Semiconductor LAN Databook, and the 3Com 3c503 databook.



/* These are the operational function interfaces to board-specific

   routines.

	void reset_8390(struct net_device *dev)

		Resets the board associated with DEV, including a hardware reset of

		the 8390.  This is only called when there is a transmit timeout, and

		it is always followed by 8390_init().

	void block_output(struct net_device *dev, int count, const unsigned char *buf,

					  int start_page)

		Write the COUNT bytes of BUF to the packet buffer at START_PAGE.  The

		"page" value uses the 8390's 256-byte pages.

	void get_8390_hdr(struct net_device *dev, struct e8390_hdr *hdr, int ring_page)

		Read the 4 byte, page aligned 8390 header. *If* there is a

		subsequent read, it will be of the rest of the packet.

	void block_input(struct net_device *dev, int count, struct sk_buff *skb, int ring_offset)

		Read COUNT bytes from the packet buffer into the skb data area. Start

		reading from RING_OFFSET, the address as the 8390 sees it.  This will always

		follow the read of the 8390 header.

 Index to functions. */

 Routines generic to NS8390-based boards. */

/*

 *	SMP and the 8390 setup.

 *

 *	The 8390 isn't exactly designed to be multithreaded on RX/TX. There is

 *	a page register that controls bank and packet buffer access. We guard

 *	this with ei_local->page_lock. Nobody should assume or set the page other

 *	than zero when the lock is not held. Lock holders must restore page 0

 *	before unlocking. Even pure readers must take the lock to protect in

 *	page 0.

 *

 *	To make life difficult the chip can also be very slow. We therefore can't

 *	just use spinlocks. For the longer lockups we disable the irq the device

 *	sits on and hold the lock. We must hold the lock because there is a dual

 *	processor case other than interrupts (get stats/set multicast list in

 *	parallel with each other and transmit).

 *

 *	Note: in theory we can just disable the irq on the card _but_ there is

 *	a latency on SMP irq delivery. So we can easily go "disable irq" "sync irqs"

 *	enter lock, take the queued irq. So we waddle instead of flying.

 *

 *	Finally by special arrangement for the purpose of being generally

 *	annoying the transmit function is called bh atomic. That places

 *	restrictions on the user context callers as disable_irq won't save

 *	them.

 *

 *	Additional explanation of problems with locking by Alan Cox:

 *

 *	"The author (me) didn't use spin_lock_irqsave because the slowness of the

 *	card means that approach caused horrible problems like losing serial data

 *	at 38400 baud on some chips. Remember many 8390 nics on PCI were ISA

 *	chips with FPGA front ends.

 *

 *	Ok the logic behind the 8390 is very simple:

 *

 *	Things to know

 *		- IRQ delivery is asynchronous to the PCI bus

 *		- Blocking the local CPU IRQ via spin locks was too slow

 *		- The chip has register windows needing locking work

 *

 *	So the path was once (I say once as people appear to have changed it

 *	in the mean time and it now looks rather bogus if the changes to use

 *	disable_irq_nosync_irqsave are disabling the local IRQ)

 *

 *

 *		Take the page lock

 *		Mask the IRQ on chip

 *		Disable the IRQ (but not mask locally- someone seems to have

 *			broken this with the lock validator stuff)

 *			[This must be _nosync as the page lock may otherwise

 *				deadlock us]

 *		Drop the page lock and turn IRQs back on

 *

 *		At this point an existing IRQ may still be running but we can't

 *		get a new one

 *

 *		Take the lock (so we know the IRQ has terminated) but don't mask

 *	the IRQs on the processor

 *		Set irqlock [for debug]

 *

 *		Transmit (slow as ****)

 *

 *		re-enable the IRQ

 *

 *

 *	We have to use disable_irq because otherwise you will get delayed

 *	interrupts on the APIC bus deadlocking the transmit path.

 *

 *	Quite hairy but the chip simply wasn't designed for SMP and you can't

 *	even ACK an interrupt without risking corrupting other parallel

 *	activities on the chip." [lkml, 25 Jul 2007]

/**

 * ei_open - Open/initialize the board.

 * @dev: network device to initialize

 *

 * This routine goes all-out, setting everything

 * up anew at each open, even though many of these registers should only

 * need to be set once at boot.

	/*

	 *	Grab the page lock so we own the register set, then call

	 *	the init function.

	/* Set the flag before we drop the lock, That way the IRQ arrives

/**

 * ei_close - shut down network device

 * @dev: network device to close

 *

 * Opposite of ei_open(). Only used when "ifconfig <devname> down" is done.

	/*

	 *	Hold the page lock during close

/**

 * ei_tx_timeout - handle transmit time out condition

 * @dev: network device which has apparently fallen asleep

 *

 * Called by kernel when device never acknowledges a transmit has

 * completed (or failed) - i.e. never posted a Tx related interrupt.

 The 8390 probably hasn't gotten on the cable yet. */

 Try a different xcvr.  */

 Ugly but a reset can be slow, yet must be protected */

 Try to restart the card.  Perhaps the user has fixed something. */

/**

 * ei_start_xmit - begin packet transmission

 * @skb: packet to be sent

 * @dev: network device to which packet is sent

 *

 * Sends a packet to an 8390 network device.

 more efficient than doing just the needed bits */

	/* Mask interrupts from the ethercard.

	   SMP: We have to grab the lock here otherwise the IRQ handler

	   on another CPU can flip window and race the IRQ mask set. We end

	/*

	 *	Slow phase with lock held.

	/*

	 * We have two Tx slots available for use. Find the first free

	 * slot, and then perform some sanity checks. With two Tx bufs,

	 * you get very close to transmitting back-to-back packets. With

	 * only one Tx buf, the transmitter sits idle while you reload the

	 * card, leaving a substantial gap between each transmitted packet.

 We should never get here. */

	/*

	 * Okay, now upload the packet and trigger a send if the transmitter

	 * isn't already sending. If it is busy, the interrupt handler will

	 * trigger the send later, upon receiving a Tx done interrupt.

 Turn 8390 interrupts back on. */

/**

 * ei_interrupt - handle the interrupts from an 8390

 * @irq: interrupt number

 * @dev_id: a pointer to the net_device

 *

 * Handle the ether interface interrupts. We pull packets from

 * the 8390 via the card specific functions and fire them at the networking

 * stack. We also handle transmit completions and wake the transmit path if

 * necessary. We also update the counters and do other housekeeping as

 * needed.

	/*

	 *	Protect the irq test too.

		/*

		 * This might just be an interrupt for a PCI device sharing

		 * this line

 Change to page 0 and read the intr status reg. */

 !!Assumption!! -- we stay in page 0.	 Don't break this. */

 rmk - acknowledge the interrupts */

 Got a good (?) packet. */

 Push the next to-transmit packet through. */

 Ack intr. */

 Ignore any RDC interrupts that make it back to here. */

 0xFF is valid for a card removal */

 Ack. most intrs. */

 Ack. all intrs. */

/**

 * ei_tx_err - handle transmitter error

 * @dev: network device which threw the exception

 *

 * A transmitter error has happened. Most likely excess collisions (which

 * is a fairly normal condition). If the error is one where the Tx will

 * have been aborted, we try and send another one right away, instead of

 * letting the failed packet sit and collect dust in the Tx buffer. This

 * is a much better solution as it avoids kernel based Tx timeouts, and

 * an unnecessary card reset.

 *

 * Called with lock held.

 ei_local is used on some platforms via the EI_SHIFT macro */

 Ack intr. */

/**

 * ei_tx_intr - transmit interrupt handler

 * @dev: network device for which tx intr is handled

 *

 * We have finished a transmit: check for errors and then trigger the next

 * packet to be sent. Called with lock held.

 Ack intr. */

	/*

	 * There are two Tx buffers, see which one finished, and trigger

	 * the send of another one if it exists.

	} /* else

		netdev_warn(dev, "unexpected TX-done interrupt, lasttx=%d\n",

			    ei_local->lasttx);

 Minimize Tx latency: update the statistics after we restart TXing. */

/**

 * ei_receive - receive some packets

 * @dev: network device with which receive will be run

 *

 * We have a good packet(s), get it/them out of the buffers.

 * Called with lock held.

 Get the rx page (incoming packet pointer). */

 Remove one frame from the ring.  Boundary is always a page behind. */

		/* Someday we'll omit the previous, iff we never get this message.

		   (There is at least one clone claimed to have a problem.)



		   Keep quiet if it looks like a card removal. One problem here

		   is that some clones crash in roughly the same way.

 Read all the frames? */

 Done for now */

		/* Check for bogosity warned by 3c503 book: the status byte is never

		   written.  This happened a lot during testing! This code should be

 IP headers on 16 byte boundaries */

 Make room */

 NB: The NIC counts CRC, frame and missed errors. */

 This _should_ never happen: it's here for avoiding bad clones. */

	/* We used to also ack ENISR_OVER here, but that would sometimes mask

/**

 * ei_rx_overrun - handle receiver overrun

 * @dev: network device which threw exception

 *

 * We have a receiver overrun: we have to kick the 8390 to get it started

 * again. Problem is that you have to kick it exactly as NS prescribes in

 * the updated datasheets, or "the NIC may act in an unpredictable manner."

 * This includes causing "the NIC to defer indefinitely when it is stopped

 * on a busy network."  Ugh.

 * Called with lock held. Don't call this with the interrupts off or your

 * computer will hate you - it takes 10ms or so.

 ei_local is used on some platforms via the EI_SHIFT macro */

	/*

	 * Record whether a Tx was in progress and then issue the

	 * stop command.

	/*

	 * Wait a full Tx time (1.2ms) + some guard time, NS says 1.6ms total.

	 * Early datasheets said to poll the reset bit, but now they say that

	 * it "is not a reliable indicator and subsequently should be ignored."

	 * We wait at least 10ms.

	/*

	 * Reset RBCR[01] back to zero as per magic incantation.

	/*

	 * See if any Tx was interrupted or not. According to NS, this

	 * step is vital, and skipping it will cause no end of havoc.

	/*

	 * Have to enter loopback mode and then restart the NIC before

	 * you are allowed to slurp packets up off the ring.

	/*

	 * Clear the Rx ring of all the debris, and ack the interrupt.

	/*

	 * Leave loopback mode, and resend any packet that got stopped.

/*

 *	Collect the stats. This is called unlocked and from several contexts.

 If the card is stopped, just return the present stats. */

 Read the counter registers, assuming we are in page 0. */

/*

 * Form the 64 bit 8390 multicast table from the linked list of addresses

 * associated with this dev structure.

		/*

		 * The 8390 uses the 6 most significant bits of the

		 * CRC to index the multicast table.

/**

 * do_set_multicast_list - set/clear multicast filter

 * @dev: net device for which multicast filter is adjusted

 *

 *	Set or clear the multicast filter for this adaptor. May be called

 *	from a BH in 2.1.x. Must be called with lock held.

 mcast set to accept-all */

	/*

	 * DP8390 manuals don't specify any magic sequence for altering

	 * the multicast regs on an already running card. To be safe, we

	 * ensure multicast mode is off prior to loading up the new hash

	 * table. If this proves to be not enough, we can always resort

	 * to stopping the NIC, loading the table and then restarting.

	 *

	 * Bug Alert!  The MC regs on the SMC 83C690 (SMC Elite and SMC

	 * Elite16) appear to be write-only. The NS 8390 data sheet lists

	 * them as r/w so this is a bug.  The SMC 83C790 (SMC Ultra and

	 * Ultra32 EISA) appears to have this bug fixed.

/*

 *	Called without lock held. This is invoked from user context and may

 *	be parallel to just about everything else. Its also fairly quick and

 *	not called too often. Must protect against both bh and irq users

/**

 * ethdev_setup - init rest of 8390 device struct

 * @dev: network device structure to init

 *

 * Initialize the rest of the 8390 device structure.  Do NOT __init

 * this, as it is used by 8390 based modular drivers too.

/**

 * alloc_ei_netdev - alloc_etherdev counterpart for 8390

 * @size: extra bytes to allocate

 *

 * Allocate 8390-specific net_device.

 This page of functions should be 8390 generic */

 Follow National Semi's recommendations for initializing the "NIC". */

/**

 * NS8390_init - initialize 8390 hardware

 * @dev: network device to initialize

 * @startp: boolean.  non-zero value to initiate chip processing

 *

 *	Must be called with lock held.

 Follow National Semi's recommendations for initing the DP83902. */

 0x21 */

 0x48 or 0x49 */

 Clear the remote byte count registers. */

 Set to monitor and loopback mode -- this is vital!. */

 0x20 */

 0x02 */

 Set the transmit page and receive ring. */

 3c503 says 0x3f,NS0x26*/

 assert boundary+1 */

 Clear the pending interrupts and mask. */

 Copy the station address into the DS8390 registers. */

 0x61 */

 xmit on. */

 3c503 TechMan says rxconfig only after the NIC is started. */

 rx on,  */

 (re)load the mcast table */

/* Trigger a transmit start, assuming the length is valid.

/* A Linux device driver for PCI NE2000 clones.

 *

 * Authors and other copyright holders:

 * 1992-2000 by Donald Becker, NE2000 core and various modifications.

 * 1995-1998 by Paul Gortmaker, core modifications and PCI support.

 * Copyright 1993 assigned to the United States Government as represented

 * by the Director, National Security Agency.

 *

 * This software may be used and distributed according to the terms of

 * the GNU General Public License (GPL), incorporated herein by reference.

 * Drivers based on or derived from this code fall under the GPL and must

 * retain the authorship, copyright and license notice.  This file is not

 * a complete program and may only be used when the entire operating

 * system is licensed under the GPL.

 *

 * The author may be reached as becker@scyld.com, or C/O

 * Scyld Computing Corporation

 * 410 Severn Ave., Suite 210

 * Annapolis MD 21403

 *

 * Issues remaining:

 * People are making PCI NE2000 clones! Oh the horror, the horror...

 * Limited full-duplex support.

/* The user-configurable values.

 * These may be modified when a driver module is loaded.

 More are supported, limit only on options */

 Used to pass the full-duplex flag, etc. */

 Force a non std. amount of memory.  Units are 256 byte pages. */

 #define PACKETBUF_MEMSIZE	0x40 */

/* Some defines that people can play with if so inclined.

 Use 32 bit data-movement operations instead of 16 bit. */

 Do we implement the read before write bugfix ? */

 #define NE_RW_BUGFIX */

/* Flags.  We rename an existing ei_status field to store flags!

 * Thus only the low 8 bits are usable for non-init-time flags.

 Chip can do only 16/32-bit xfers. */

 User override. */

 ---- No user-serviceable parts below ---- */

 NatSemi-defined port window offset. */

 Issue a read to reset, a write to clear. */

 First page of TX buffer */

 Last page +1 of RX ring */

/* There is no room in the standard 8390 structure for extra info we need,

 * so we build a meta/outer-wrapper structure..

/* NEx000-clone boards have a Station Address (SA) PROM (SAPROM) in the packet

 * buffer memory space.  By-the-spec NE2000 clones have 0x57,0x57 in bytes

 * 0x0e,0x0f of the SAPROM, while other supposed NE2000 clones must be

 * detected by their SA prefix.

 *

 * Reading the SAPROM from a word-wide card with the 8390 set in byte-wide

 * mode results in doubled values, which can be detected and compensated for.

 *

 * The probe is also responsible for initializing the card and filling

 * in the 'dev' and 'ei_status' structures.

 Do a preliminary verification that we have a 8390. */

 Clear the counter by reading. */

  Restore the old values. */

 Allocate net_device, dev->priv; fill in 8390 specific dev fields. */

 Reset card. Who knows what dain-bramaged state it was left in. */

		/* This looks like a horrible timing loop, but it should never

		 * take more than a few cycles.

 Limit wait: '2' avoids jiffy roll-over. */

 Ack all intr. */

	/* Read the 16 bytes of station address PROM.

	 * We must first initialize registers, similar

	 * to NS8390_init(eifdev, 0).

	 * We can't reliably read the SAPROM address without this.

	 * (I learned the hard way!).

 Select page 0 */

 Set word-wide access */

 Clear the count regs. */

 Mask completion IRQ */

 0x20 Set to monitor */

 0x02 and loopback mode */

 DMA starting at 0x0000 */

	/* Note: all PCI cards have at least 16 bit access, so we don't have

	 * to check for 8 bit cards.  Most cards permit 32 bit access.

 sizeof(SA_prom )*/; i++)

 We always set the 8390 registers for word mode. */

 Set up the rest of the parameters. */

 Allow the packet buffer size to be overridden by know-it-alls. */

/* Magic incantation sequence for full duplex on the supported cards.

 Page 3 */

 Enable writes to CONFIG3 */

 Enable full duplex */

 Disable writes to CONFIG3 */

 Page 0 */

/* Hard reset the card.  This used to pause for the same period that a

 * 8390 reset command required, but that shouldn't be necessary.

 This check _should_not_ be necessary, omit eventually. */

 Ack intr. */

/* Grab the 8390 specific header. Similar to the block_input routine, but

 * we don't need to be concerned with ring wrap as the header will be at

 * the start of a page, so we optimize accordingly.

	/* This *shouldn't* happen. If it does, it's the last thing you'll see

 On page boundary */

 Ack intr. */

/* Block input and output, similar to the Crynwr packet driver.  If you

 *are porting to a new ethercard, look at the packet driver source for hints.

 *The NEx000 doesn't share the on-board packet memory -- you have to put

 *the packet out through the "remote DMA" dataport using outb.

	/* This *shouldn't* happen.

	 * If it does, it's the last thing you'll see.

 Ack intr. */

	/* On little-endian it's always safe to round the count up for

	 * word writes.

	/* This *shouldn't* happen.

	 * If it does, it's the last thing you'll see.

 We should already be in page 0, but to be safe... */

	/* Handle the read-before-write bug the same way as the

	 * Crynwr packet driver -- the NatSemi method doesn't work.

	 * Actually this doesn't always work either, but if you have

	 * problems with your NEx000 this is better than nothing!

 Now the normal output. */

 Avoid clock roll-over. */

 Ack intr. */

 SPDX-License-Identifier: GPL-2.0-only

 8390 core for ISA devices needing bus delays */

/*

 *  Amiga Linux/m68k and Linux/PPC Zorro NS8390 Ethernet Driver

 *

 *  (C) Copyright 1998-2000 by some Elitist 680x0 Users(TM)

 *

 *  ---------------------------------------------------------------------------

 *

 *  This program is based on all the other NE2000 drivers for Linux

 *

 *  ---------------------------------------------------------------------------

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of the Linux

 *  distribution for more details.

 *

 *  ---------------------------------------------------------------------------

 *

 *  The Ariadne II and X-Surf are Zorro-II boards containing Realtek RTL8019AS

 *  Ethernet Controllers.

 NatSemi-defined port window offset */

#define NE_RESET	(0x1f * 2)	/* Issue a read to reset,

 First page of TX buffer */

 Last page +1 of RX ring */

/* Hard reset the card.  This used to pause for the same period that a

 * 8390 reset command required, but that shouldn't be necessary.

 This check _should_not_ be necessary, omit eventually. */

 Ack intr */

/* Grab the 8390 specific header. Similar to the block_input routine, but

 * we don't need to be concerned with ring wrap as the header will be at

 * the start of a page, so we optimize accordingly.

	/* This *shouldn't* happen.

	 * If it does, it's the last thing you'll see

 On page boundary */

 Ack intr */

/* Block input and output, similar to the Crynwr packet driver.

 * If you are porting to a new ethercard, look at the packet driver source

 * for hints. The NEx000 doesn't share the on-board packet memory --

 * you have to put the packet out through the "remote DMA" dataport

 * using z_writeb.

	/* This *shouldn't* happen.

	 * If it does, it's the last thing you'll see

 Ack intr */

	/* Round the count up for word writes.  Do we need to do this?

	 * What effect will an odd byte count have on the 8390?

	 * I should check someday.

	/* This *shouldn't* happen.

	 * If it does, it's the last thing you'll see

 We should already be in page 0, but to be safe... */

 Now the normal output. */

 20ms */

 Ack intr */

 Reset card. Who knows what dain-bramaged state it was left in. */

 Ack all intr. */

	/* Read the 16 bytes of station address PROM.

	 * We must first initialize registers,

	 * similar to NS8390_init(eifdev, 0).

	 * We can't reliably read the SAPROM address without this.

	 * (I learned the hard way!).

 Select page 0 */

 0x48: Set byte-wide access */

 Clear the count regs */

 Mask completion irq */

 0x20 Set to monitor */

 0x02 and loopback mode */

 DMA starting at 0x0000 */

 We must set the 8390 for word mode. */

 Install the Interrupt handler */

/* stnic.c : A SH7750 specific part of driver for NS DP83902A ST-NIC.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 *

 * Copyright (C) 1999 kaz Kojima

 1 == Run, 0 == reset. */

 First page of TX buffer */

 Last page +1 of RX ring */

 Alias */

 FIXME! YOU MUST SET YOUR OWN ETHER ADDRESS.  */

 SH7750 specific read/write io. */

 If we are not running on a SolutionEngine, give up now */

 New style probing API */

 Set the base address to point to the NIC, not the "real" base! */

  /* Snarf the interrupt now.  There's no point in waiting since we cannot

/* Block input and output, similar to the Crynwr packet driver. If you are

   porting to a new ethercard look at the packet driver source for hints.

   The HP LAN doesn't use shared memory -- we put the packet

 Write non-zero value */

 This function resets the STNIC if something screws up.  */

 SPDX-License-Identifier: GPL-2.0-only

/* drivers/net/ethernet/8390/ax88796.c

 *

 * Copyright 2005,2007 Simtec Electronics

 *	Ben Dooks <ben@simtec.co.uk>

 *

 * Asix AX88796 10/100 Ethernet controller support

 *	Based on ne.c, by Donald Becker, et-al.

 Rename the lib8390.c functions to show that they are in this driver */

 force unsigned long back to 'void __iomem *' */

 define EI_SHIFT() to take into account our register offsets */

 Ensure we have our RCR base value */

 from ne.c */

 First page of TX buffer */

 Last page +1 of RX ring */

 First page of TX buffer */

 Last page +1 of RX ring */

 device private data */

/*

 * ax_initial_check

 *

 * do an initial probe for the card to check whether it exists

 * and is functional

 Clear the counter by reading. */

 Restore the old values. */

/*

 * Hard reset the card. This used to pause for the same period that a

 * 8390 reset command required, but that shouldn't be necessary.

 This check _should_not_ be necessary, omit eventually. */

 Ack intr. */

/* Wrapper for __ei_interrupt for platforms that have a platform-specific

 * way to find out whether the interrupt request might be caused by

 * the ax88796 chip.

 This *shouldn't* happen. If it does, it's the last thing you'll see */

 On page boundary */

 Ack intr. */

/*

 * Block input and output, similar to the Crynwr packet driver. If

 * you are porting to a new ethercard, look at the packet driver

 * source for hints. The NEx000 doesn't share the on-board packet

 * memory -- you have to put the packet out through the "remote DMA"

 * dataport using ei_outb.

	/*

	 * Round the count up for word writes. Do we need to do this?

	 * What effect will an odd byte count have on the 8390?  I

	 * should check someday.

 This *shouldn't* happen. If it does, it's the last thing you'll see */

 We should already be in page 0, but to be safe... */

 Now the normal output. */

 20ms */

 Ack intr. */

 definitions for accessing MII/EEPROM interface */

 find the first phy */

 turn the phy on (if turned off) */

 unregister mdiobus */

 turn the phy off */

 ethtool ops */

 Input pin */

 setup code */

 Select page 0 */

 set to byte access */

/*

 * ax_init_dev

 *

 * initialise the specified device, taking care to note the MAC

 * address it may already have (if configured), ensure

 * the device is ready to be used by lib8390.c and registerd with

 * the network layer.

 setup goes here */

 read the mac from the card prom if we need it */

 Ack intr. */

 We must set the 8390 for word mode. */

 load the mac-address from the device */

 0x61 */

 Allow the packet buffer size to be overridden by know-it-alls. */

/*

 * ax_probe

 *

 * This is the entry point when the platform device system uses to

 * notify us of a new device to attach to. Allocate memory, find the

 * resources and information passed, and map the necessary registers.

 ok, let's setup our device */

 find the platform resources */

	/*

	 * setup the register offsets from either the platform data or

	 * by using the size of the resource provided

 look for reset area */

 got resources, now initialise and register device */

 suspend and resume */

 ne.c: A general non-shared-memory NS8390 ethernet driver for linux. */

/*

    Written 1992-94 by Donald Becker.



    Copyright 1993 United States Government as represented by the

    Director, National Security Agency.



    This software may be used and distributed according to the terms

    of the GNU General Public License, incorporated herein by reference.



    The author may be reached as becker@scyld.com, or C/O

    Scyld Computing Corporation, 410 Severn Ave., Suite 210, Annapolis MD 21403



    This driver should work with many programmed-I/O 8390-based ethernet

    boards.  Currently it supports the NE1000, NE2000, many clones,

    and some Cabletron products.



    Changelog:



    Paul Gortmaker	: use ENISR_RDC to monitor Tx PIO uploads, made

			  sanity checks and bad clone support optional.

    Paul Gortmaker	: new reset code, reset card after probe at boot.

    Paul Gortmaker	: multiple card support for module users.

    Paul Gortmaker	: Support for PCI ne2k clones, similar to lance.c

    Paul Gortmaker	: Allow users with bad cards to avoid full probe.

    Paul Gortmaker	: PCI probe changes, more PCI cards supported.

    rjohnson@analogic.com : Changed init order so an interrupt will only

    occur after memory is allocated for dev->priv. Deallocated memory

    last in cleanup_modue()

    Richard Guenther    : Added support for ISAPnP cards

    Paul Gortmaker	: Discontinued PCI support - use ne2k-pci.c instead.

    Hayato Fujiwara	: Add m32r support.



 Routines for the NatSemi-based designs (NE[12]000). */

 Some defines that people can play with if so inclined. */

 Do we support clones that don't adhere to 14,15 of the SAprom ? */

 0xbad = bad sig or no reset ack */

 Max number of NE cards per module */

 MODULE */

 Do we perform extra sanity checks on stuff ? */

 #define NE_SANITY_CHECK */

 Do we implement the read before write bugfix ? */

 #define NE_RW_BUGFIX */

 Do we have a non std. amount of memory? (in units of 256 byte pages) */

 #define PACKETBUF_MEMSIZE	0x40 */

/* This is set up so that no ISA autoprobe takes place. We can't guarantee

that the ne2k probe is the last 8390 based probe to take place (as it

is at boot) and so the probe will get confused by any other 8390 cards.

 Do we need a portlist for the ISA auto-probe ? */

 A zero-terminated list of I/O addresses to be probed at boot. */

 terminate list */

 A list of bad clones that we none-the-less recognize. */

 Original, eh?  */

 Ancient real NE1000. */

 Outlaw no-name clone. */

 Outlaw 4-Dimension cards. */

 Connect Int'nl */

 YANG and YA clone */

 Broken ISA Compex cards */

 Broken ne1000 clones */

 Broken Advantech MoBo */

 no-name with Realtek chip */

 Toshiba built-in */

 ShinyNet (SET) */

 ---- No user-serviceable parts below ---- */

 NatSemi-defined port window offset. */

 Issue a read to reset, a write to clear. */

 First page of TX buffer */

 Last page +1 of RX ring */

 First page of TX buffer */

 Last page +1 of RX ring */

 8-bit mode */

 8-bit mode on Atari, normal on Q40 */

/*  Probe for various non-shared-memory ethercards.



   NEx000-clone boards have a Station Address PROM (SAPROM) in the packet

   buffer memory space.  NE2000 clones have 0x57,0x57 in bytes 0x0e,0x0f of

   the SAPROM, while other supposed NE2000 clones must be detected by their

   SA prefix.



   Reading the SAPROM from a word-wide card with the 8390 set in byte-wide

   mode results in doubled values, which can be detected and compensated for.



   The probe is also responsible for initializing the card and filling

   in the 'dev' and 'ei_status' structures.



   We use the minimum memory size for some ethercard product lines, iff we can't

   distinguish models.  You can increase the packet buffer size by setting

   PACKETBUF_MEMSIZE.  Reported Cabletron packet buffer locations are:

	E1010   starts at 0x100 and ends at 0x2000.

	E1010-x starts at 0x100 and ends at 0x8000. ("-x" means "more memory")

	E2010	 starts at 0x100 and ends at 0x4000.

 First check any supplied i/o locations. User knows best. <cough> */

 Check a single specified location. */

 Don't probe at all. */

 Then look for any installed ISAPnP clones */

 Last resort. The semi-risky ISA auto-probe. */

 Avoid already found cards from previous calls */

 if no io and irq, search for next */

 found it */

 Shouldn't happen. */

 Do a preliminary verification that we have a 8390. */

 Clear the counter by reading. */

 Restore the old values. */

	/* A user with a poor card that fails to ack the reset, or that

	   does not have a valid 0x57,0x57 signature can still use this

	   without having to recompile. Specifying an i/o address along

	   with an otherwise unused dev->mem_end value of "0xBAD" will

 Reset card. Who knows what dain-bramaged state it was left in. */

 DON'T change these to inb_p/outb_p or reset will fail on clones. */

 Ack all intr. */

	/* Read the 16 bytes of station address PROM.

	   We must first initialize registers, similar to NS8390p_init(eifdev, 0).

	   We can't reliably read the SAPROM address without this.

 Select page 0*/

 Set byte-wide (0x48) access. */

 Clear the count regs. */

 Mask completion irq. */

 0x20  Set to monitor */

 0x02  and loopback mode. */

 DMA starting at 0x0000. */

sizeof(SA_prom)*/; i+=2) {

 We must set the 8390 for word mode. */

		/*

		 * Realtek RTL8019AS datasheet says that the PSTOP register

		 * shouldn't exceed 0x60 in 8-bit mode.

		 * This chip can be identified by reading the signature from

		 * the  remote byte count registers (otherwise write-only)...

 8-bit mode */

 Set up the rest of the parameters. */

		/* Ack!  Well, there might be a *bad* NE*000 clone there.

 Enable one interrupt. */

 Trigger it... */

 wait 10ms for interrupt to propagate */

 Mask it again. */

		/* Fixup for users that don't know that IRQ 2 is really IRQ 9,

	/* Snarf the interrupt now.  There's no point in waiting since we cannot

 Use 16-bit mode only if this wasn't overridden by DCR_VAL */

 Allow the packet buffer size to be overridden by know-it-alls. */

/* Hard reset the card.  This used to pause for the same period that a

 DON'T change these to inb_p/outb_p or reset will fail on clones. */

 This check _should_not_ be necessary, omit eventually. */

 Ack intr. */

/* Grab the 8390 specific header. Similar to the block_input routine, but

   we don't need to be concerned with ring wrap as the header will be at

 This *shouldn't* happen. If it does, it's the last thing you'll see */

 On page boundary */

 Ack intr. */

/* Block input and output, similar to the Crynwr packet driver.  If you

   are porting to a new ethercard, look at the packet driver source for hints.

   The NEx000 doesn't share the on-board packet memory -- you have to put

 This *shouldn't* happen. If it does, it's the last thing you'll see */

	/* This was for the ALPHA version only, but enough people have

	   been encountering problems so it is still here.  If you see

	   this message you either 1) have a slightly incompatible clone

 DMA termination address check... */

			/* DON'T check for 'inb_p(EN0_ISR) & ENISR_RDC' here

 Ack intr. */

	/* Round the count up for word writes.  Do we need to do this?

	   What effect will an odd byte count have on the 8390?

 This *shouldn't* happen. If it does, it's the last thing you'll see */

 We should already be in page 0, but to be safe... */

	/* Handle the read-before-write bug the same way as the

	   Crynwr packet driver -- the NatSemi method doesn't work.

	   Actually this doesn't always work either, but if you have

 Make certain that the dummy read has occurred. */

 Now the normal output. */

	/* This was for the ALPHA version only, but enough people have

 DMA termination address check... */

 20ms */

 Ack intr. */

	/* ne.c doesn't populate resources in platform_device, but

	 * rbtx4927_ne_init and rbtx4938_ne_init do register devices

	 * with resources.

	/* Update with any values found by probing, don't update if

	 * resources were specified.

		/* Careful ne_drv_remove can be called twice, once from

		 * the platform_driver.remove and again when the

		 * platform_device is being removed.

 Remove unused devices or all if true. */

 No network device == unused */

 Unregister unused platform_devices. */

 Find an empty slot, that is no net_device and zero io port. */

 Get irq, io from kernel command line */

 return the first device found */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Gigabit Ethernet adapters based on the Session Layer

 * Interface (SLIC) technology by Alacritech. The driver does not

 * support the hardware acceleration features provided by these cards.

 *

 * Copyright (C) 2016 Lino Sanfilippo <LinoSanfilippo@gmx.de>

 reset desc */

 check for wraparound */

 make sure new status descriptors are immediately available */

 ensure tail idx is updated */

 trigger processing of the next upr in list */

	/* Get the CRC polynomial for the mac address: we use bits 1-8 (lsb),

	 * bitwise reversed, msb (= lsb bit 0 before bitrev) is automatically

	 * discarded.

 we only have space on the SLIC for 64 entries */

 must be called with link_lock held */

 must be called with link_lock held */

 must be called with link_lock held */

 enable GMII */

 (re)configure link settings */

		/* Turn on all multicast addresses. We have to do this for

		 * promiscuous mode as well as ALLMCAST mode (it saves the

		 * microcode from having to keep state about the MAC

		 * configuration).

	/* Limit processing to SLIC_MAX_TX_COMPLETIONS frames to avoid that new

	 * completions during processing keeps the loop running endlessly.

 make sure xmit sees the new value for done_idx */

 drop skb */

 ensure head buffer descriptors are 256 byte aligned */

 the HW expects dma chunks for descriptor + frame data */

 temporarily sync descriptor for CPU to clear status */

 return it to HW again */

 complete write to descriptor before it is handed to HW */

 head buffer descriptors are placed immediately before skb */

 transport layer */

 ip layer */

 link layer */

 mojave */

 transport layer */

 ip layer */

 link layer */

 skip rx descriptor that is placed before the frame data */

 remove upr that caused this irq (always the first entry in list) */

 try again */

 reenable irqs */

 make sure sm_data->isr is cleard before irqs are reenabled */

 make sure sm_data->isr is read after ICR_INT_MASK is set */

 spurious interrupt */

 flush write by means of config space */

 ensure correct alignment */

 free rx buffers */

		/* We've got a fiber gigabit interface, and register 4 is

		 * different in fiber mode than in copper mode.

 advertise FD only @1000 Mb */

 enable PAUSE frames */

 reset phy, enable auto-neg  */

 copper gigabit */

		/* We've got a copper gigabit interface, and register 4 is

		 * different in copper mode than in fiber mode.

 advertise 10/100 Mb modes   */

 enable PAUSE frames  */

 required by the Cicada PHY  */

 advertise FD only @1000 Mb  */

 if a Marvell PHY enable auto crossover */

 reset phy, enable auto-neg  */

 enable and restart auto-neg (don't reset)  */

	/* Do an initial sanity check concerning firmware size now. A further

	 * check follows below.

 do another sanity check against firmware size */

 download sequencer code to card */

 write out instruction address */

 write out the instruction data low addr */

 write out the instruction data high addr */

 finish download */

	/* Do an initial sanity check concerning firmware size now. A further

	 * check follows below.

 do another sanity check against firmware size */

 get sections */

 write out instruction address */

 write out instruction to low addr */

 write out instruction to high addr */

 write out instruction address */

 write out instruction to low addr */

 write out instruction to high addr */

 everything OK, kick off the card */

 wait long enough for ucode to init card and reach the mainloop */

 disable irq mitigation */

 request initial link status */

 stop irq handling */

 turn off RCV and XMT and power down PHY */

 complete writes to RAM and DMA before hardware is informed */

 check eeprom size, magic and checksum */

 cut checksum bytes */

 setup ISP temporarily */

 set mac address */

 we need the shared memory to read EEPROM so set it up temporarily */

 Mojave */

 Oasis */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * forcedeth: Ethernet driver for NVIDIA nForce media access controllers.

 *

 * Note: This driver is a cleanroom reimplementation based on reverse

 *      engineered documentation written by Carl-Daniel Hailfinger

 *      and Andrew de Quincey.

 *

 * NVIDIA, nForce and other NVIDIA marks are trademarks or registered

 * trademarks of NVIDIA Corporation in the United States and other

 * countries.

 *

 * Copyright (C) 2003,4,5 Manfred Spraul

 * Copyright (C) 2004 Andrew de Quincey (wol support)

 * Copyright (C) 2004 Carl-Daniel Hailfinger (invalid MAC handling, insane

 *		IRQ rate fixes, bigendian fixes, cleanups, verification)

 * Copyright (c) 2004,2005,2006,2007,2008,2009 NVIDIA Corporation

 *

 * Known bugs:

 * We suspect that on some hardware no TX done interrupts are generated.

 * This means recovery from netif_stop_queue only happens if the hw timer

 * interrupt fires (100 times/second, configurable with NVREG_POLL_DEFAULT)

 * and the timer is active in the IRQMask, or if a rx packet arrives by chance.

 * If your hardware reliably generates tx done interrupts, then you can remove

 * DEV_NEED_TIMERIRQ from the driver_data flags.

 * DEV_NEED_TIMERIRQ will not harm you on sane hardware, only generating a few

 * superfluous timer interrupts from the nic.

/*

 * Hardware access:

 set the timer irq flag in the irq mask */

 poll link settings. Relies on the timer irq */

 device supports jumbo frames and needs packet format 2 */

 device supports 64bit dma */

 device supports tx and rx checksum offloads */

 device supports vlan tagging and striping */

 device supports MSI */

 device supports MSI-X */

 device supports power savings */

 device supports hw statistics version 1 */

 device supports hw statistics version 2 */

 device supports hw statistics version 3 */

 device supports hw statistics version 1 and 2 */

 device supports hw statistics version 1, 2, and 3 */

 device supports extended diagnostic test */

 device supports management unit */

 device supports correct mac address order */

 device supports tx collision fix */

 device supports tx pause frames version 1 */

 device supports tx pause frames version 2 */

 device supports tx pause frames version 3 */

 device needs to limit tx */

 device needs to limit tx, expect for some revs */

 device supports gear mode */

 device needs specific phy workaround */

 device needs special power up workaround */

 device needs msi workaround */

/*

 * NVREG_POLL_DEFAULT is the interval length of the timer source on the nic

 * NVREG_POLL_DEFAULT=97 would result in an interval length of 1 ms

 backup tx cleanup if loop max reached */

 Big endian: should work, but is untested */

 error and valid are the same for both */

 error and avail are the same for both */

 Miscellaneous hardware related defines: */

 various timeout delays: all in usec */

 General driver defaults */

 rx/tx mac addr + type + vlan + align + slack*/

 even more slack. */

 maximum mtu size */

 hard limit not known */

 Actual limit according to NVidia: 9202 */

/*

 * desc_ver values:

 * The nic supports three different descriptor types:

 * - DESC_VER_1: Original

 * - DESC_VER_2: support for jumbo frames.

 * - DESC_VER_3: 64-bit format.

 PHY defines */

 MSI/MSI-X defines */

 statistics */

 includes Ethernet FCS CRC */

 version 2 stats */

 includes Ethernet FCS CRC */

 version 3 stats */

 should be ifconfig->tx_bytes + 4*tx_packets */

 should be ifconfig->rx_packets */

 version 2 stats */

 should be ifconfig->tx_packets */

 should be ifconfig->rx_bytes + 4*rx_packets */

 version 3 stats */

 diagnostics */

 not always available in HW */

 not always available in HW */

/*

 * SMP locking:

 * All hardware access under netdev_priv(dev)->lock, except the performance

 * critical parts:

 * - rx is (pseudo-) lockless: it relies on the single-threading provided

 *	by the arch code for interrupts.

 * - tx setup is lockless: it relies on netif_tx_lock. Actual submission

 *	needs netdev_priv(dev)->lock :-(

 * - set_multicast_list: preparation lockless, relies on netif_tx_lock.

 *

 * Hardware stats updates are protected by hwstats_lock:

 * - updated by nv_do_stats_poll (timer). This is meant to avoid

 *   integer wraparound in the NIC stats registers, at low frequency

 *   (0.1 Hz)

 * - updated by nv_get_ethtool_stats + nv_get_stats64

 *

 * Software stats are accessed only through 64b synchronization points

 * and are not subject to other synchronization techniques (single

 * update thread on the TX or RX paths).

 in dev: base, irq */

 hardware stats are updated in syscall and timer */

 General data: RO fields */

	/* rx specific fields.

	 * Locking: Within irq hander or disable_irq+spin_lock(&np->lock);

 RX software stats */

	/* media detection workaround.

	 * Locking: Within irq hander or disable_irq+spin_lock(&np->lock);

	/*

	 * tx specific fields.

 TX software stats */

 msi/msi-x fields */

 flow control */

 power saved state */

 for different msi-x irq type */

 -rx    */

 -tx    */

 -other */

/*

 * Maximum number of loops until we assume that a bit in the irq mask

 * is stuck. Overridable with module param.

/*

 * Optimization can be either throuput mode or cpu mode

 *

 * Throughput Mode: Every tx and rx packet will generate an interrupt.

 * CPU Mode: Interrupts are controlled by a timer.

/*

 * Poll interval for timer irq

 *

 * This interval determines how frequent an interrupt is generated.

 * The is value is determined by [(time_in_micro_secs * 100) / (2^10)]

 * Min = 0, and Max = 65535

/*

 * MSI interrupts

/*

 * MSIX interrupts

/*

 * DMA 64bit

/*

 * Debug output control for tx_timeout

/*

 * Crossover Detection

 * Realtek 8201 phy + some OEM boards do not work properly.

/*

 * Power down phy when interface is down (persists through reboot;

 * older Linux and other OSes may not power it up again)

 force out pending posted writes */

 0 if 32bit, shift down by 32 if 64bit */

 In MSIX mode, a write to irqmask behaves as XOR */

/* mii_rw: read/write a register on the PHY.

 *

 * Caller must guarantee serialization

 it was a write operation - fewer failures are detectable */

 wait for 500ms */

 must wait till reset is deasserted */

 FIXME: 100 tries seem excessive */

 need to perform hw phy reset */

 phy errata for E3016 phy */

 set advertise register */

 get phy interface type */

 see if gigabit phy */

 start autoneg since we already performed hw reset above */

		/* reset the phy

		 * (certain phys need bmcr to be setup with reset)

 phy vendor specific configuration */

 reset could have cleared these out, set them back */

 some phys clear out pause advertisement on reset, set it back */

 restart auto negotiation, power down phy */

 Already running? Stop it. */

 save registers since they will be cleared on reset */

 restore saved registers */

 Caller must appropriately lock netdev_priv(dev)->hwstats_lock */

 query hardware */

/*

 * nv_get_stats64: dev->ndo_get_stats64 function

 * Get latest stats value from the nic.

 * Called with read_lock(&dev_base_lock) held for read -

 * only synchronized against unregister_netdevice.

	/*

	 * Note: because HW stats are not always available and for

	 * consistency reasons, the following ifconfig stats are

	 * managed by software: rx_bytes, tx_bytes, rx_packets and

	 * tx_packets. The related hardware stats reported by ethtool

	 * should be equivalent to these ifconfig stats, with 4

	 * additional bytes per packet (Ethernet FCS CRC), except for

	 * tx_packets when TSO kicks in.

 software stats */

 If the nic supports hw counters then retrieve latest values */

 generic stats */

 meaningful only when NIC supports stats v3 */

 detailed rx_errors */

 detailed tx_errors */

/*

 * nv_alloc_rx: fill rx ring entries.

 * Return 1 if the allocations for the skbs failed and the

 * rx engine is without Available descriptors

 If rx bufs are exhausted called after 50ms to attempt to refresh */

 Just reschedule NAPI rx processing */

	/* Need to stop tx before change takes effect.

	 * Caller has already gained np->lock.

 Gear Backoff Seeds */

 Known Good seed sets */

 Setup seed for free running LFSR */

	/* We are going to read the time stamp counter 3 times

 Seeds can not be zero */

 No need to disable tx here */

 Setup seeds for all gear LFSRs. */

/*

 * nv_start_xmit: dev->hard_start_xmit function

 * Called with netif_tx_lock held.

 add fragments to entries count */

		/* When normal packets and/or xmit_more packets fill up

		 * tx_desc, it is necessary to trigger NIC tx reg.

 setup the header buffer */

 on DMA mapping error - drop the packet */

 setup the fragments */

 Unwind the mapped fragments */

 set last fragment flag  */

 save skb in this slot's context area */

 set tx flags */

 add fragments to entries count */

		/* When normal packets and/or xmit_more packets fill up

		 * tx_desc, it is necessary to trigger NIC tx reg.

 setup the header buffer */

 on DMA mapping error - drop the packet */

 setup the fragments */

 Unwind the mapped fragments */

 set last fragment flag  */

 save skb in this slot's context area */

 vlan tag */

		/* Limit the number of outstanding tx. Setup all fragments, but

		 * do not set the VALID bit on the first descriptor. Save a pointer

		 * to that descriptor and also for next skb_map element.

 remove VALID bit */

 set tx flags */

/*

 * nv_tx_done: check for completed packets, release the skbs.

 *

 * Caller must own np->lock.

/*

 * nv_tx_timeout: dev->tx_timeout function

 * Called with netif_tx_lock held.

 %08x %08x "

 %08x %08x 
 %08x %08x %08x "

 %08x %08x %08x "

 %08x %08x %08x\n",

 1) stop tx engine */

 2) complete any outstanding tx and do not give HW any limited tx pkts */

 prevent giving HW any limited pkts */

 prevent waking tx queue */

 save current HW position */

 3) clear all tx state */

 4) restore state to current HW position */

 5) restart tx engine */

/*

 * Called when the nic notices a mismatch between the actual data len on the

 * wire and the len indicated in the 802 header

 length of the 802 header */

 length as stored in the proto field */

 1) calculate len according to header */

 Value in proto field not a len, no checks possible */

 consistency checks: */

			/* more data on wire than in 802 header, trim of

			 * additional data.

			/* less data on wire than mentioned in header.

			 * Discard the packet.

 short packet. Accept only if 802 values are also short */

		/*

		 * the packet is for us - immediately tear down the pci mapping.

		 * TODO: check if a prefetch of the first cacheline improves

		 * the performance.

 look at what we actually got: */

 framing errors are soft errors */

 the rest are hard errors */

 framing errors are soft errors */

 the rest are hard errors */

ip and tcp */

ip and udp */

 got a valid packet - forward it to the network core */

		/*

		 * the packet is for us - immediately tear down the pci mapping.

		 * TODO: check if a prefetch of the first cacheline improves

		 * the performance.

 look at what we actually got: */

 framing errors are soft errors */

 the rest are hard errors */

ip and tcp */

ip and udp */

 got a valid packet - forward it to the network core */

			/*

			 * There's need to check for NETIF_F_HW_VLAN_CTAG_RX

			 * here. Even if vlan rx accel is disabled,

			 * NV_RX3_VLAN_TAG_PRESENT is pseudo randomly set.

/*

 * nv_change_mtu: dev->change_mtu function

 * Called with dev_base_lock held for read.

 return early if the buffer sizes will not change */

 synchronized against open : rtnl_lock() held by caller */

		/*

		 * It seems that the nic preloads valid ring entries into an

		 * internal buffer. The procedure for flushing everything is

		 * guessed, there is probably a simpler approach.

		 * Changing the MTU is a rare event, it shouldn't matter.

 stop engines */

 drain rx queue */

 reinit driver view of the rx queue */

 reinit nic view of the rx queue */

 restart rx engine */

/*

 * nv_set_mac_address: dev->set_mac_address function

 * Called with rtnl_lock() held.

 synchronized against open : rtnl_lock() held by caller */

 stop rx engine */

 set mac address */

 restart rx engine */

/*

 * nv_set_multicast: dev->set_multicast function

 * Called with netif_tx_lock held.

 limit the number of tx pause frames to a default of 8 */

 see if gigabit phy */

/**

 * nv_update_linkspeed - Setup the MAC according to the link partner

 * @dev: Network device to be configured

 *

 * The function queries the PHY and checks if there is a link partner.

 * If yes, then it sets up the MAC accordingly. Otherwise, the MAC is

 * set to 10 MBit HD.

 *

 * The function returns 0 if there is no link partner and 1 if there is

 * a good link partner.

	/* If device loopback is enabled, set carrier on and enable max link

	 * speed.

	/* BMSR_LSTATUS is latched, read it twice:

	 * we want the current value.

 check auto negotiation is complete */

 still in autonegotiation - configure nic for 10 MBit HD and wait. */

 FIXME: handle parallel detection properly */

 The transmitter and receiver must be restarted for safe update */

 autoneg capable */

 setup pause frame */

	/* Need to toggle the msi irq mask within the ethernet device,

	 * otherwise, future interrupts will not be detected.

 transition to poll based interrupts */

				/* reached a period of low activity, switch

		/*

		 * Disable further irq's (msix not enabled with napi)

/* All _optimized functions are used to help increase performance

 * (reduce CPU and increase throughput). They use descripter version 3,

 * compiler directives, and reduce memory accesses.

		/*

		 * Disable further irq's (msix not enabled with napi)

 disable interrupts on the nic */

		/* re-enable interrupts

 disable interrupts on the nic */

 check tx in case we reached max loop limit in tx isr */

 disable interrupts on the nic */

 disable interrupts on the nic */

	/* Each interrupt bit can be mapped to a MSIX vector (4 bits).

	 * MSIXMap0 represents the first 8 interrupts and MSIXMap1 represents

	 * the remaining 8 interrupts.

 Request irq for rx handling */

 Request irq for tx handling */

 Request irq for link and timer handling */

 map interrupts to their respective vector */

 Request irq for all interrupts */

 map interrupts to vector 0 */

 map interrupts to vector 0 */

 enable msi vector 0 */

	/*

	 * First disable irq(s) and then

	 * reenable interrupts on the nic, we have to do this before calling

	 * nv_nic_irq because that may decide to do otherwise

 stop engines */

 drain rx queue */

 reinit driver view of the rx queue */

 reinit nic view of the rx queue */

 clear interrupts */

 restart rx engine */

	/* If lock is currently taken, the stats are being refreshed

		/* We do not track link speed / duplex setting if the

 ignore maxtxpkt, maxrxpkt for now */

		/* TODO: support switching between multiple phys. Should be

		/* Note: autonegotiation disable, speed 1000 intentionally

 with plain spinlock lockdep complains */

 stop engines */

		/* FIXME:

		 * this can take some time, and interrupts are disabled

		 * due to spin_lock_irqsave, but let's hope no daemon

		 * is going to change the settings very often...

		 * Worst case:

		 * NV_RXSTOP_DELAY1MAX + NV_TXSTOP_DELAY1MAX

		 * + some minor delays, which is up to a second approximately

 advertise only what has been requested */

 for rx we set both advertisements but disable tx pause */

			/* reset the phy in order for settings to stick,

 for rx we set both advertisements but disable tx pause */

 reset the phy in order for forced mode settings to stick */

 Wait a bit and then reconfigure the nic. */

 stop engines */

 reset the phy in order for settings to stick*/

 allocate new rings */

 fall back to old rings */

 stop engines */

 drain queues */

 delete queues */

 set new values */

 reinit driver view of the queues */

 reinit nic view of the queues */

 restart engines */

 stop engines */

 for rx we set both advertisements but disable tx pause */

 Turn on loopback mode */

 Force 1000 Mbps full-duplex */

 Force link up */

 Turn off loopback */

 vlan is dependent on rx checksum offload */

 check phy link status */

 xor with mask to toggle bits */

 restore original value */

 free current irq */

 flag to test interrupt handler */

 setup test irq */

 setup 1 vector */

 setup timer interrupt */

 wait for at least one interrupt */

 flag should be set within ISR */

 restore original irq */

 reinit driver view of the rx queue */

 setup hardware for loopback */

 reinit nic view of the rx queue */

 restart rx engine */

 setup packet for tx */

 check for rx of the packet */

 stop engines */

 drain rx queue */

 stop engines */

 drain rx queue */

 bail out */

 reinit driver view of the rx queue */

 reinit nic view of the rx queue */

 restart rx engine */

 The mgmt unit and driver use a semaphore to access the phy during init */

 verify that semaphore was acquired */

 power up phy */

 erase previous misconfiguration */

 initialize descriptor rings */

 give hw rings */

 setup legacy backoff */

 ask for interrupts */

	/* One manual link speed update: Interrupts are enabled, future link

	 * speed changes cause interrupts and are handled by nv_link_irq().

	/* set linkspeed to invalid value, thus force nv_update_linkspeed

 start statistics timer */

	/* If the loopback feature was set while the device was down, make sure

	 * that it's set correctly now.

 otherwise stop_tx bricks NIC */

 disable interrupts on the nic or we will lock up */

 power down phy */

 FIXME: power down nic */

 copy of driver data */

 copy of device id */

 handle different descriptor versions */

 packet format 3: supports 40-bit addressing */

 packet format 2: supports jumbo frames */

 original packet format */

 Add loopback capability to the device. */

 MTU range: 64 - 1500 or 9100 */

 read the mac address */

 check the workaround bit for correct mac address order */

 mac address is already in correct order */

 mac address is already in correct order */

		/*

		 * Set orig mac address back to the reversed version.

		 * This flag will be cleared during low power transition.

		 * Therefore, we should always put back the reversed address.

 need to reverse mac address to correct order */

		/*

		 * Bad mac address. At least one bios sets the mac address

		 * to 01:23:45:67:89:ab

 set mac address */

 disable WOL */

 take phy and nic out of low power mode */

		/* msix has had reported issues when modifying irqmask

		   as in the case of napi, therefore, disable for now

 set number of vectors */

 start off in throughput mode */

 remove support for msix mode */

 set number of vectors */

 Limit the number of tx's outstanding for hw bug */

 clear phy state and temporarily halt phy interrupts */

 management unit running on the mac? */

 management unit setup the phy already? */

 phy is inited by mgmt unit */

 we need to init the phy */

 find a suitable phy */

 Realtek hardcoded phy id1 to all zero's on certain phys */

 Setup phy revision for Realtek */

 reset it */

 see if it is a gigabit phy */

 set default link speed settings */

	/* Some NICs freeze when TX pause is enabled while NIC is

	 * down, and this stays across warm reboots. The sequence

	 * below should be enough to recover from that state.

 restart auto negotiation */

	/* special op: write back the misordered MAC address - otherwise

	 * the next nv_probe would see a wrong address.

 restore any phy related changes */

 free all structures */

 Gross. */

 save non-pci configuration space */

 restore non-pci configuration space */

 restore phy state, including autoneg */

 CONFIG_PM_SLEEP */

	/*

	 * Restore the MAC so a kernel started by kexec won't get confused.

	 * If we really go for poweroff, we must not restore the MAC,

	 * otherwise the MAC for WOL will be reversed at least on some boards.

	/*

	 * Apparently it is not possible to reinitialise from D3 hot,

	 * only put the device into D3 if we really go for poweroff.

 CONFIG_PM */

 nForce Ethernet Controller */

 nForce2 Ethernet Controller */

 nForce3 Ethernet Controller */

 nForce3 Ethernet Controller */

 nForce3 Ethernet Controller */

 nForce3 Ethernet Controller */

 nForce3 Ethernet Controller */

 CK804 Ethernet Controller */

 CK804 Ethernet Controller */

 MCP04 Ethernet Controller */

 MCP04 Ethernet Controller */

 MCP51 Ethernet Controller */

 MCP51 Ethernet Controller */

 MCP55 Ethernet Controller */

 MCP55 Ethernet Controller */

 MCP61 Ethernet Controller */

 MCP61 Ethernet Controller */

 MCP61 Ethernet Controller */

 MCP61 Ethernet Controller */

 MCP65 Ethernet Controller */

 MCP65 Ethernet Controller */

 MCP65 Ethernet Controller */

 MCP65 Ethernet Controller */

 MCP67 Ethernet Controller */

 MCP67 Ethernet Controller */

 MCP67 Ethernet Controller */

 MCP67 Ethernet Controller */

 MCP73 Ethernet Controller */

 MCP73 Ethernet Controller */

 MCP73 Ethernet Controller */

 MCP73 Ethernet Controller */

 MCP77 Ethernet Controller */

 MCP77 Ethernet Controller */

 MCP77 Ethernet Controller */

 MCP77 Ethernet Controller */

 MCP79 Ethernet Controller */

 MCP79 Ethernet Controller */

 MCP79 Ethernet Controller */

 MCP79 Ethernet Controller */

 MCP89 Ethernet Controller */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/* Google virtual Ethernet (gve) driver

 *

 * Copyright (C) 2015-2021 Google, Inc.

	/* If the length or feature mask doesn't match, continue without

	 * enabling the feature.

		/* If we don't recognize the option just continue

		 * without doing anything.

 Process all device options for a given describe device call. */

 The options struct directly follows the device descriptor. */

 Setup Admin queue with the device */

 Tell the device the adminq is leaving */

		/* If this is reached the device is unrecoverable and still

		 * holding memory. Continue looping to avoid memory corruption,

		 * but WARN so it is visible what is going on.

/* Flushes all AQ commands currently queued and waits for them to complete.

 * If there are failures, it will return the first error.

 Return the first error if we failed.

/* This function is not threadsafe - the caller is responsible for any

 * necessary locks.

 Check if next command will overflow the buffer.

 Flush existing commands to make room.

 Retry.

 This should never happen. We just flushed the

 command queue so there should be enough space.

/* This function is not threadsafe - the caller is responsible for any

 * necessary locks.

 * The caller is also responsible for making sure there are no commands

 * waiting to be executed.

 This is not a valid path

/* The device specifies that the management vector can either be the first irq

 * or the last irq. ntfy_blk_msix_base_idx indicates the first irq assigned to

 * the ntfy blks. It if is 0 then the management vector is last, if it is 1 then

 * the management vector is first.

 *

 * gve arranges the msix vectors so that the management vector is last.

	/* Before control reaches this point, the page-size-capped max MTU from

	 * the gve_device_descriptor field has already been stored in

	 * priv->dev->max_mtu. We overwrite it with the true max MTU below.

	/* If the GQI_RAW_ADDRESSING option is not enabled and the queue format

	 * is not set to GqiRda, choose the queue format in a priority order:

	 * DqoRda, GqiRda, GqiQpl. Use GqiQpl as default.

 DQO supports LRO. */

 Populate ptype_lut. */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/* Google virtual Ethernet (gve) driver

 *

 * Copyright (C) 2015-2021 Google, Inc.

 The page already has 1 ref */

	/* Allocate one page per Rx queue slot. Each page is split into two

	 * packet buffers, when possible we "page flip" between the two.

 Make sure everything is zeroed to start with */

 alloc rx data ring */

 Ensure data ring slots (packet buffers) are visible. */

 Alloc gve_queue_resources */

 alloc rx desc ring */

	/* Allocating half-page buffers allows page-flipping which is faster

	 * than copying or allocating new pages.

 Unallocate if there was an error */

 "flip" to other packet buffer on this page */

 This page is not being used by any SKBs - reuse */

 This page is still being used by an SKB - we can't reuse */

	/* Optimistically stop the kernel from freeing the page.

	 * We will check again in refill to determine if we need to alloc a

	 * new page.

	/* if raw_addressing mode is not enabled gvnic can only receive into

	 * registered segments. If the buffer can't be recycled, our only

	 * choice is to copy the data out of it so that we can return it to the

	 * device.

 No point in recycling if we didn't get the skb */

 Make sure that the page isn't freed. */

	/** In QPL mode, we only flip buffers when all buffers containing the packet

	 * can be flipped. RDA can_flip decisions will be made later, per frag.

 Just copy small packets */

 Prefetch two packet buffers ahead, we will need it soon. */

 Kernel page struct. */

 Packet header. */

 Next cacheline too. */

 NIC passes up the partial sum */

 parse flags & pass relevant info up */

 Make sure we have synchronized the seq no with the device */

			/* The other half of the page is free because it was

			 * free when we processed the descriptor. Flip to it.

			/* It is possible that the networking stack has already

			 * finished processing all outstanding packets in the buffer

			 * and it can be reused.

			 * Flipping is unnecessary here - if the networking stack still

			 * owns half the page it is impossible to tell which half. Either

			 * the whole page is free or it needs to be replaced.

 We can't reuse the buffer - alloc a new one*/

 restock ring slots */

 In QPL mode buffs are refilled as the desc are processed */

		/* In raw addressing mode buffs are only refilled if the avail

		 * falls below a threshold.

		/* If we were not able to completely refill buffers, we'll want

		 * to schedule this queue for work again to refill buffers.

 If budget is 0, do all the work */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/* Google virtual Ethernet (gve) driver

 *

 * Copyright (C) 2015-2021 Google, Inc.

 Remove buf_state from free list */

 Point buf_state to itself to mark it as allocated */

 Remove buf_state from list */

 Point buf_state to itself to mark it as allocated */

 Recycled buf states are immediately usable. */

	/* Used buf states are only usable when ref count reaches 0, which means

	 * no SKBs refer to them.

	 *

	 * Search a limited number before giving up.

	/* If there are no free buf states discard an entry from

	 * `used_buf_states` so it can be used.

 The page already has 1 ref. */

 Set up linked list of buffer IDs */

 Allocate RX completion queue */

 Allocate RX buffer queue */

 Can't reuse if we only fit one buffer per page */

	/* Record the offset when we have a single remaining reference.

	 *

	 * When this happens, we know all of the other offsets of the page are

	 * usable.

 Use the next buffer sized chunk in the page. */

	/* If we wrap around to the same offset without ever dropping to 1

	 * reference, then we don't know if this offset was ever freed.

 HW did not identify and process L3 and L4 headers. */

 Checksum should be skipped if this flag is set. */

/* Chains multi skbs for single rx packet.

 * Returns 0 if buffer is appended, -1 otherwise.

/* Returns 0 if descriptor is completed successfully.

 * Returns -EINVAL if descriptor is invalid.

 * Returns -ENOMEM if data cannot be copied to skb.

	/* Page might have not been used for awhile and was likely last written

	 * by a different thread.

 Sync the portion of dma buffer for CPU to read. */

 Append to current skb if one exists. */

 Only TCP is supported right now. */

 Returns 0 if skb is completed successfully, -1 otherwise. */

	/* RSC packets must set gso_size otherwise the TCP stack will complain

	 * that packets are larger than MTU.

 No more new packets */

 Prefetch the next two descriptors. */

 Do not read data until we own the descriptor */

 When the ring wraps, the generation bit is flipped. */

		/* Receiving a completion means we have space to post another

		 * buffer on the buffer queue.

 Free running counter of completed descriptors */

		/* The ethernet header (first ETH_HLEN bytes) is snipped off

		 * by eth_type_trans.

 gve_rx_complete_skb() will consume skb if successful */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/* Google virtual Ethernet (gve) driver

 *

 * Copyright (C) 2015-2021 Google, Inc.

 Minimum amount of time between queue kicks in msec (10 seconds)

 NIC requests to report stats */

 Set up timer for the report-stats task */

 Interrupts are automatically masked */

 Complete processing - don't unmask irq if busy polling is enabled */

		/* Ensure IRQ ACK is visible before we check pending work.

		 * If queue had issued updates, it would be truly visible.

	/* Clear PCI MSI-X Pending Bit Array (PBA)

	 *

	 * This bit is set if an interrupt event occurs while the vector is

	 * masked. If this bit is set and we reenable the interrupt, it will

	 * fire again. Since we're just about to poll the queue state, we don't

	 * need it to fire again.

	 *

	 * Under high softirq load, it's possible that the interrupt condition

	 * is triggered twice before we got the chance to process it.

do_clean=*/true);

		/* Enable interrupts again.

		 *

		 * We don't need to repoll afterwards because HW supports the

		 * PCI MSI-X PBA feature.

		 *

		 * Another interrupt would be triggered if a new event came in

		 * since the last one.

 Half the notification blocks go to TX and half to RX */

 Setup Management Vector  - the last vector */

 Setup the other blocks - the first n-1 vectors */

 Free the irqs */

 Tell device its resources are being freed */

 detach the stats report */

			/* This failure will trigger a reset - no need to clean

			 * up

 This failure will trigger a reset - no need to clean up */

		/* This failure will trigger a reset - no need to clean

		 * up

		/* This failure will trigger a reset - no need to clean

		 * up

		/* Rx data ring has been prefilled with packet buffers at queue

		 * allocation time.

		 *

		 * Write the doorbell to provide descriptor slots and packet

		 * buffers to the NIC.

 Post buffers and ring doorbell. */

 Add tx napi & init sync stats*/

 Add rx napi  & init sync stats*/

 Setup tx rings */

 Setup rx rings */

 This failure will trigger a reset - no need to clean up */

 This failure will trigger a reset - no need to clean up */

 caller handles clean up */

 caller handles clean up */

 caller handles clean up */

 Raw addressing means no QPLs */

 Raw addressing means no QPLs */

/* Use this to schedule a reset when the device is capable of continuing

 * to handle other requests in its current state. If it is not, do a reset

 * in thread instead.

		/* Hard code this for now. This may be tuned in the future for

		 * performance.

	/* This must have been called from a reset due to the rtnl lock

	 * so just return at this point.

 Otherwise reset before returning */

 if this fails there is nothing we can do so just ignore the return */

 return the original error */

	/* This must have been called from a reset due to the rtnl lock

	 * so just return at this point.

 Otherwise reset before returning */

		/* To make this process as simple as possible we teardown the

		 * device, set the new configuration, and then bring the device

		 * up again.

		/* we have already tried to reset in close,

		 * just fail at this point

 Set the config for the next up. */

 Disable napi to prevent more work from coming in */

 Stop tx queues */

 Start the tx queues */

 Enable napi and unmask interrupts for all queues */

	/* Check to see if there are missed completions, which will allow us to

	 * kick the queue.

 Else reset.

			/* To make this process as simple as possible we

			 * teardown the device, set the new configuration,

			 * and then bring the device up again.

			/* We have already tried to reset in close, just fail

			 * at this point.

 Reverts the change on error. */

	/* A service task will be scheduled at the end of probe to catch any

	 * resets that need to happen, and we don't want to reset until

	 * probe is done.

 tx stats */

 DQO doesn't currently support these metrics. */

 rx stats */

 Handle NIC status register changes, reset requests and report stats */

 Set up the adminq */

 Get the initial information we need from the device */

	/* gvnic has one Notification Block per MSI-x vector, except for the

	 * management vector

 Reset the device by releasing the AQ */

 With the reset having already happened, close cannot fail */

	/* If we aren't attempting to teardown normally, just go turndown and

	 * reset right away.

 Otherwise attempt to close normally */

 If that fails reset as we did above */

 Clean up any remaining resources */

 Set it all back up */

 Get max queues to alloc etherdev */

 Alloc and setup the netdev and priv */

	/* Set default and supported features.

	 *

	 * Features might be set in other locations as well (such as

	 * `gve_adminq_describe_device`).

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/* Google virtual Ethernet (gve) driver

 *

 * Copyright (C) 2015-2021 Google, Inc.

		/* If we have run out of bias - set it back up to INT_MAX

		 * minus the existing refs.

 Set pagecount back up to max. */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/* Google virtual Ethernet (gve) driver

 *

 * Copyright (C) 2015-2021 Google, Inc.

/* gvnic can only transmit from a Registered Segment.

 * We copy skb payloads into the registered segment before writing Tx

 * descriptors and ringing the Tx doorbell.

 *

 * gve_tx_fifo_* manages the Registered Segment as a FIFO - clients must

 * free allocations in the order they were allocated.

/* gve_tx_alloc_fifo - Allocate fragment(s) from Tx FIFO

 * @fifo: FIFO to allocate from

 * @bytes: Allocation size

 * @iov: Scatter-gather elements to fill with allocation fragment base/len

 *

 * Returns number of valid elements in iov[] or negative on error.

 *

 * Allocations from a given FIFO must be externally synchronized but concurrent

 * allocation and frees are allowed.

	/* This check happens before we know how much padding is needed to

	 * align to a cacheline boundary for the payload, but that is fine,

	 * because the FIFO head always start aligned, and the FIFO's boundaries

	 * are aligned, so if there is space for the data, there is space for

	 * the padding to the next alignment.

		/* If the allocation did not fit in the tail fragment of the

		 * FIFO, also use the head fragment.

 Start of fifo*/

 Re-align to a cacheline boundary */

/* gve_tx_free_fifo - Return space to Tx FIFO

 * @fifo: FIFO to return fragments to

 * @bytes: Bytes to free

 Make sure everything is zeroed to start */

 alloc metadata */

 alloc tx queue */

 map Tx FIFO */

 Unallocate if there was an error */

/* gve_tx_avail - Calculates the number of slots available in the ring

 * @tx: tx ring to check

 *

 * Returns the number of slots available

 *

 * The capacity of the queue is mask + 1. We don't need to reserve an entry.

 We need to take into account the header alignment padding. */

/* The most descriptors we could need is MAX_SKB_FRAGS + 3 : 1 for each skb frag,

 * +1 for the skb linear portion, +1 for when tcp hdr needs to be in separate descriptor,

 * and +1 if the payload wraps to the beginning of the FIFO.

/* Check if sufficient resources (descriptor ring space, FIFO space) are

 * available to transmit the given number of bytes.

 Stops the queue if the skb cannot be transmitted. */

 Only try to clean if there is hope for TX */

 No space, so stop the queue */

 l4_hdr_offset and csum_offset are in units of 16-bit words */

	/* If the skb is gso, then we want the tcp header in the first segment

	 * otherwise we want the linear portion of the skb (which will contain

	 * the checksum because skb->csum_start and skb->csum_offset are given

	 * relative to skb->head) in the first segment.

	/* We don't want to split the header, so if necessary, pad to the end

	 * of the fifo and then put the header at the beginning of the fifo.

	/* If the skb is gso, then we want only up to the tcp header in the first segment

	 * to efficiently replicate on each segment otherwise we want the linear portion

	 * of the skb (which will contain the checksum because skb->csum_start and

	 * skb->csum_offset are given relative to skb->head) in the first segment.

		/* For gso the rest of the linear portion of the skb needs to

		 * be in its own descriptor.

		/* We need to ring the txq doorbell -- we have stopped the Tx

		 * queue for want of resources, but prior calls to gve_tx()

		 * may have added descriptors without ringing the doorbell.

 If the packet is getting sent, we need to update the skb */

	/* Give packets to NIC. Even if this packet failed to send the doorbell

	 * might need to be rung because of xmit_more.

 Unmap the buffer */

 Mark as free */

 FIFO free */

 start the queue if we've stopped it */

 Make sure that the doorbells are synced */

 If budget is 0, do all the work */

	/* In TX path, it may try to clean completed pkts in order to xmit,

	 * to avoid cleaning conflict, use spin_lock(), it yields better

	 * concurrency between xmit/clean than netif's lock.

 Find out how much work there is to be done */

 If we still have work we want to repoll */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/* Google virtual Ethernet (gve) driver

 *

 * Copyright (C) 2015-2021 Google, Inc.

 total rx dropped packets */

 Skip tx_dropped */

 For rx cross-reporting stats, start from nic rx stats in report */

 Preprocess the stats report for rx, map queue id to start index */

 no stats written by NIC yet */

 walk RX rings */

 rx dropped packets */

 stats from NIC */

 skip NIC rx stats */

 For tx cross-reporting stats, start from nic tx stats in report */

 Preprocess the stats report for tx, map queue id to start index */

 no stats written by NIC yet */

 walk TX rings */

				/* DQO doesn't currently support

				 * posted/completed descriptor counts;

 stats from NIC */

 skip NIC tx stats */

 AQ Stats */

 Changing combined is not allowed */

 Only 1 flag exists currently: report-stats (BIT(O)), so set that flag. */

 Only one priv flag exists: report-stats (BIT(0))*/

 start report-stats timer when user turns report stats on. */

 Zero off gve stats when report-stats turned off and */

 delete report stats timer. */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/* Google virtual Ethernet (gve) driver

 *

 * Copyright (C) 2015-2021 Google, Inc.

 Returns true if a gve_tx_pending_packet_dqo object is available. */

 Check TX path's list. */

 Check completion handler's list. */

	/* No pending_packets available, try to steal the list from the

	 * completion handler.

 Remove pending_packet from free list */

/* gve_tx_free_desc - Cleans up all pending tx requests and buffers.

 Queue sizes must be a power of 2 */

	/* The max number of pending packets determines the maximum number of

	 * descriptors which maybe written to the completion queue.

	 *

	 * We must set the number small enough to make sure we never overrun the

	 * completion queue.

	/* Reserve space for descriptor completions, which will be reported at

	 * most every GVE_TX_MIN_RE_INTERVAL packets.

	/* Each packet may have at most 2 buffer completions if it receives both

	 * a miss and reinjection completion.

 Set up linked list of pending packets */

napi=*/NULL);

 Returns the number of slots available in the ring */

/* Stops the queue if available descriptors is less than 'count'.

 * Return: 0 if stop is not required.

 Update cached TX head pointer */

 No space, so stop the queue */

 Sync with restarting queue in `gve_tx_poll_dqo()` */

	/* After stopping queue, check if we can transmit again in order to

	 * avoid TOCTOU bug.

/* Validates and prepares `skb` for TSO.

 *

 * Returns header length, or < 0 if invalid.

	/* Note: HW requires MSS (gso_size) to be <= 9728 and the total length

	 * of the TSO to be <= 262143.

	 *

	 * However, we don't validate these because:

	 * - Hypervisor enforces a limit of 9K MTU

	 * - Kernel will not produce a TSO larger than 64k

 Needed because we will modify header. */

 Remove payload length from checksum. */

 Compute length of segmentation header. */

/* Returns 0 on success, or < 0 on error.

 *

 * Before this function is called, the caller must ensure

 * gve_has_pending_packet(tx) returns true.

	/* Note: HW requires that the size of a non-TSO packet be within the

	 * range of [17, 9728].

	 *

	 * We don't double check because

	 * - We limited `netdev->min_mtu` to ETH_MIN_MTU.

	 * - Hypervisor won't allow MTU larger than 9216.

 Map the linear portion of skb */

eop=*/shinfo->nr_frags == 0, is_gso);

 Commit the changes to our state */

	/* Request a descriptor completion on the last descriptor of the

	 * packet if we are allowed to by the HW enforced interval.

/* Returns true if HW is capable of sending TSO represented by `skb`.

 *

 * Each segment must not span more than GVE_TX_MAX_DATA_DESCS buffers.

 * - The header is counted as one buffer for every single segment.

 * - A buffer which is split between two segments is counted for both.

 * - If a buffer contains both header and payload, it is counted as two buffers.

/* Attempt to transmit specified SKB.

 *

 * Returns 0 if the SKB was transmitted or dropped.

 * Returns -1 if there is not currently enough space to transmit the SKB.

		/* If TSO doesn't meet HW requirements, attempt to linearize the

		 * packet.

 Metadata + (optional TSO) + data descriptors. */

 Transmit a given skb and ring the doorbell. */

		/* We need to ring the txq doorbell -- we have stopped the Tx

		 * queue for want of resources, but prior calls to gve_tx()

		 * may have added descriptors without ringing the doorbell.

 Node is head */

 Node is tail */

 SKB linear portion is guaranteed to be mapped */

/* Completion types and expected behavior:

 * No Miss compl + Packet compl = Packet completed normally.

 * Miss compl + Re-inject compl = Packet completed normally.

 * No Miss compl + Re-inject compl = Skipped i.e. packet not completed.

 * Miss compl + Packet compl = Skipped i.e. packet not completed.

			/* Packet was already completed as a result of timeout,

			 * so just remove from list and free pending packet.

			/* No outstanding miss completion but packet allocated

			 * implies packet receives a re-injection completion

			 * without a a prior miss completion. Return without

			 * completing the packet.

 Packet is allocated but not a pending data completion. */

 jiffies can wraparound but time comparisons can handle overflows. */

 Break early because packets should timeout in order. */

		/* Unmap buffers and free skb but do not unallocate packet i.e.

		 * the completion tag is not freed to ensure that the driver

		 * can take appropriate action if a corresponding valid

		 * completion is received later.

 This indicates the packet was dropped. */

		/* Maintain pending packet in another list so the packet can be

		 * unallocated at a later time.

 Break early because packets should timeout in order. */

 Limit in order to avoid blocking for too long */

 Prefetch the next descriptor. */

 Do not read data until we own the descriptor */

 This is the last descriptor fetched by HW plus one */

is_reinjection=*/false);

is_reinjection=*/true);

 Flip the generation bit when we wrap around */

 Sync with queue being stopped in `gve_maybe_stop_tx_dqo()` */

 Return true if we still have work. */

/* MOXA ART Ethernet (RTL8201CP) driver.

 *

 * Copyright (C) 2013 Jonas Jensen

 *

 * Jonas Jensen <jonas.jensen@gmail.com>

 *

 * Based on code from

 * Moxa Technology Co., Ltd. <www.moxa.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 reset the MAC controller TX/RX descriptor base address */

 disable all interrupts */

 disable all functions */

 ensure desc0 is up to date */

 prevent setting ownership back too early */

 ensure data is only read that had TX_DESC0_DMA_OWN cleared */

 flush descriptor before transferring ownership */

 start to send packet */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2020 MediaTek Corporation

 * Copyright (c) 2020 BayLibre SAS

 *

 * Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>

/* Normally we'd use NET_IP_ALIGN but on arm64 its value is 0 and it doesn't

 * work for this controller.

 PHY Control Register 0 */

 PHY Control Register 1 */

 MAC Configuration Register */

 Flow-Control Configuration Register */

 ARL Configuration Register */

 MAC High and Low Bytes Registers */

 Hash Table Control Register */

 TX DMA Control Register */

 RX DMA Control Register */

 DMA Address Registers */

 Interrupt Status Register */

 Interrupt Mask Register */

 Misc. Config Register */

 Extended Configuration Register */

 EthSys Configuration Register */

 MAC Clock Configuration Register */

 Counter registers. */

 Ethernet CFG Control */

/* Represents the actual structure of descriptors used by the MAC. We can

 * reuse the same structure for both TX and RX - the layout is the same, only

 * the flags differ slightly.

 Contains both the status flags as well as packet length. */

/* Helper structure for storing data read from/written to descriptors in order

 * to limit reads from/writes to DMA memory.

 Protects against concurrent descriptor access. */

 Make sure we read the status bits before checking it. */

 Flush previous modifications before ownership change. */

 Data pointer for the RX DMA descriptor must be aligned to 4N + 2. */

 Unmask the three interrupts we care about, mask all others. */

 Set DMA pointers. */

 Take back all descriptors. */

/* Try to get as many stats as possible from the internal registers instead

 * of tracking them ourselves.

 OK packets and bytes. */

 RX & TX multicast. */

 Collisions. */

 RX Errors. */

 Sum of the general RX error counter + all of the above. */

 Align to 16 bytes. */

	/* Ensure 16-byte alignment of the skb pointer: eth_type_trans() will

	 * extract the Ethernet header (14 bytes) so we need two more bytes.

/* All processing for TX and RX happens in the napi poll callback.

 *

 * FIXME: The interrupt handling should be more fine-grained with each

 * interrupt enabled/disabled independently when needed. Unfortunatly this

 * turned out to impact the driver's stability and until we have something

 * working properly, we're disabling all interrupts during TX & RX processing

 * or when resetting the counter registers.

/* Wait for the completion of any previous command - CMD_START bit must be

 * cleared by hardware.

 Wait for BIST_DONE bit. */

 Check the BIST_OK bit. */

 Only full-duplex supported for now. */

 Configure the MAC */

 Enable Hash Table BIST and reset it */

 Setup the hashing algorithm */

 Don't strip VLAN tags */

 Setup DMA */

 Request the interrupt */

 Connect to and start PHY */

/* Returns the number of bytes sent or a negative number on the first

 * descriptor owned by DMA.

 Clear previous settings. */

 Should be -EIO */

 TODO Add ethtool stats. */

 Error packet -> drop and reuse skb. */

	/* Prepare new skb before receiving the current one. Reuse the current

	 * skb if we fail at any point.

 We can't fail anymore at this point: it's safe to unmap the skb. */

 update dma_addr for new skb */

 Clean-up all TX descriptors. */

 Receive up to $budget packets. */

	/* We won't be checking the return values of regmap read & write

	 * functions. They can only fail for mmio if there's a clock attached

	 * to regmap which is not the case here.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2020 Felix Fietkau <nbd@nbd.name>

 handled earlier */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (C) 2020 Felix Fietkau <nbd@nbd.name> */

	/* need to allocate a separate device, since it PPE DMA access is

	 * not coherent.

 skip all entries that cross the 1024 byte boundary */

 enable PPE */

 disable offload engine */

 disable aging */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *   Copyright (C) 2009-2016 John Crispin <blogic@openwrt.org>

 *   Copyright (C) 2009-2016 Felix Fietkau <nbd@openwrt.org>

 *   Copyright (C) 2013-2016 Michael Lee <igvtee@gmail.com>

 strings used by ethtool */

	/* Check DDR memory type.

	 * Currently TRGMII mode with DDR2 memory is not supported.

 MT76x8 has no hardware settings between for the MAC */

 Setup soc pin functions */

 Setup clock for 1st gmac */

 mt7623_pad_clk_setup */

 Assert/release MT7623 RXC reset */

 put the gmac into the right mode */

 SGMII */

		/* The path GMAC to SGMII will be enabled once the SGMIISYS is

		 * being setup done.

 Decide how GMAC and SGMIISYS be mapped */

 Setup SGMIISYS with the determined property */

 Setup gmac */

 Only update control register when needed! */

 Configure speed */

 Configure duplex */

 Configure pause modes - phylink will avoid these for half duplex */

	/* We can only operate at 2500BaseX or 1000BaseX. If requested

	 * to advertise both, only report advertising at 2500BaseX.

 make sure buf_size will be at least MTK_MAX_RX_LENGTH */

 the qdma core needs scratch memory to be setup */

 set the forward port */

 TX Checksum offload */

 VLAN header offload */

 TX SG offload */

 store skb to cleanup */

	/* make sure that all changes to the dma ring are flushed before we

	 * continue

 unmap dma */

	/* normally we can rely on the stack not calling this more than once,

	 * however we have 2 queues running on the same ring so we need to lock

	 * the ring access

 TSO: fill MSS info in tcp checksum field */

 find out which mac the packet come from. values start at 1 */

 alloc new buffer */

 receive data */

		/* make sure that all changes to the dma ring are flushed before

		 * we continue

	/* On MT7688 (PDMA only) this driver uses the ring->dma structs

	 * only as the framework. The real HW descriptors are the PDMA

	 * descriptors in ring->dma_pdma.

	/* make sure that all changes to the dma ring are flushed before we

	 * continue

	/* make sure that all changes to the dma ring are flushed before we

	 * continue

 set LRO rings to auto-learn modes */

 validate LRO ring */

 set AGE timer (unit: 20us) */

 set max AGG timer (unit: 20us) */

 set max LRO AGG count */

 IPv4 checksum update enable */

 switch priority comparison to packet count mode */

 bandwidth threshold setting */

 auto-learn score delta setting */

 set refresh timer for altering flows to 1 sec. (unit: 20us) */

 set HW LRO mode & the max aggregation count for rx packets */

 the minimal remaining room of SDL0 in RXD for lro aggregation */

 enable HW LRO */

 relinquish lro rings, flush aggregated packets */

 wait for relinquishments done */

 invalidate lro rings */

 disable HW LRO */

 invalidate the IP setting */

 validate the IP setting */

 invalidate the IP setting */

 only tcp dst ipv4 is meaningful, others are meaningless */

 wait for DMA to finish whatever it is doing before we start using it again */

		/* QDMA needs scratch memory for internal reordering of the

		 * descriptors

		/* Enable random early drop and set drop threshold

		 * automatically

 default setup the forward port to send frame to PDMA */

 Enable RX checksum */

 Reset and enable PSE */

 we run 2 netdevs on the same dma ring so we only bring it up once */

 stop the dma engine */

 wait for dma stop */

 only shutdown DMA if this is the last user */

 set interrupt delays based on current Net DIM sample */

 disable delay and normal interrupt */

 Non-MT7628 handling... */

 Set GE2 driving and slew rate */

 set GE2 TDSEL */

 set GE2 TUNE */

	/* Set linkdown as the default for each GMAC. Its own MCR would be set

	 * up with the more appropriate value when mtk_mac_config call is being

	 * invoked.

	/* Indicates CDM to parse the MTK special tag from CPU

	 * which also is working out for untag packets.

 Enable RX VLan Offloading */

 set interrupt delays based on current Net DIM sample */

 disable delay and normal interrupt */

 FE int grouping */

 If the mac address is invalid, use random mac address */

 stop all devices to make sure that dma is properly shut down */

	/* restart underlying hardware such as power, clock, pin mux

	 * and the connected phy

 restart DMA and enable IRQs */

 phylink create */

 mac config is not set */

 No MT7628/88 support yet */

	/* we run 2 devices on the same DMA ring so we need a dummy device

	 * for NAPI to work

 stop all devices to make sure that dma is properly shut down */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2018-2019 MediaTek Inc.

/* A library for configuring path from GMAC/GDM to target PHY

 *

 * Author: Sean Wang <sean.wang@mediatek.com>

 *

 Setup MUX in path fabric */

 Setup proper MUXes along the path */

 Setup proper MUXes along the path */

 Setup proper MUXes along the path */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2018-2019 MediaTek Inc.

/* A library for MediaTek SGMII circuit

 *

 * Author: Sean Wang <sean.wang@mediatek.com>

 *

 Setup the link timer and QPHY power up inside SGMIISYS */

 Disable SGMII AN */

 SGMII force mode setting */

 Release PHYA power down state */

 Decide how GMAC and SGMIISYS be mapped */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (C) 2020 Felix Fietkau <nbd@nbd.name> */

/* lasi_82596.c -- driver for the intel 82596 ethernet controller, as

   munged into HPPA boxen .



   This driver is based upon 82596.c, original credits are below...

   but there were too many hoops which HP wants jumped through to

   keep this code in there in a sane manner.



   3 primary sources of the mess --

   1) hppa needs *lots* of cacheline flushing to keep this kind of

   MMIO running.



   2) The 82596 needs to see all of its pointers as their physical

   address.  Thus virt_to_bus/bus_to_virt are *everywhere*.



   3) The implementation HP is using seems to be significantly pickier

   about when and how the command and RX units are started.  some

   command ordering was changed.



   Examination of the mach driver leads one to believe that there

   might be a saner way to pull this off...  anyone who feels like a

   full rewrite can be my guest.



   Split 02/13/2000 Sam Creasey (sammy@oh.verio.com)



   02/01/2000  Initial modifications for parisc by Helge Deller (deller@gmx.de)

   03/02/2000  changes for better/correct(?) cache-flushing (deller)

 82596.c: A generic 82596 ethernet driver for linux. */

/*

   Based on Apricot.c

   Written 1994 by Mark Evans.

   This driver is for the Apricot 82596 bus-master interface



   Modularised 12/94 Mark Evans





   Modified to support the 82596 ethernet chips on 680x0 VME boards.

   by Richard Hirst <richard@sleepie.demon.co.uk>

   Renamed to be 82596.c



   980825:  Changed to receive directly in to sk_buffs which are

   allocated at open() time.  Eliminates copy on incoming frames

   (small ones are still copied).  Shared data now held in a

   non-cached page, so we can run on 68060 in copyback mode.



   TBD:

   * look at deferring rx frames rather than discarding (as per tulip)

   * handle tx ring full as per tulip

   * performance test to tune rx_copybreak



   Most of my modifications relate to the braindead big-endian

   implementation by Intel.  When the i596 is operating in

   'big-endian' mode, it thinks a 32 bit value of 0x12345678

   should be stored as 0x56781234.  This is a real pain, when

   you have linked lists which are shared by the 680x0 and the

   i596.



   Driver skeleton

   Written 1993 by Donald Becker.

   Copyright 1993 United States Government as represented by the Director,

   National Security Agency. This software may only be used and distributed

   according to the terms of the GNU General Public License as modified by SRC,

   incorporated herein by reference.



   The author may be reached as becker@scyld.com, or C/O

   Scyld Computing Corporation, 410 Severn Ave., Suite 210, Annapolis MD 21403



 Offsets relative to LASI-LAN-Addr.*/

 Need to wordswp on the MPU port */

 big endian CPU, 82596 "big" endian mode */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/acorn/net/ether1.c

 *

 *  Copyright (C) 1996-2000 Russell King

 *

 *  Acorn ether1 driver (82586 chip) for Acorn machines

 *

 * We basically keep two queues in the cards memory - one for transmit

 * and one for receive.  Each has a head and a tail.  The head is where

 * we/the chip adds packets to be transmitted/received, and the tail

 * is where the transmitter has got to/where the receiver will stop.

 * Both of these queues are circular, and since the chip is running

 * all the time, we have to be careful when we modify the pointers etc

 * so that the buffer memory contents is valid all the time.

 *

 * Change log:

 * 1.00	RMK			Released

 * 1.01	RMK	19/03/1996	Transfers the last odd byte onto/off of the card now.

 * 1.02	RMK	25/05/1997	Added code to restart RU if it goes not ready

 * 1.03	RMK	14/09/1997	Cleaned up the handling of a reset during the TX interrupt.

 *				Should prevent lockup.

 * 1.04 RMK	17/09/1997	Added more info when initialisation of chip goes wrong.

 *				TDR now only reports failure when chip reports non-zero

 *				TDR time-distance.

 * 1.05	RMK	31/12/1997	Removed calls to dev_tint for 2.1

 * 1.06	RMK	10/02/2000	Updated for 2.3.43

 * 1.07	RMK	13/05/2000	Updated for 2.3.99-pre8

 ------------------------------------------------------------------------- */

 ------------------------------------------------------------------------- */

/*

 * Some inline assembler to allow fast transfers on to/off of the card.

 * Since this driver depends on some features presented by the ARM

 * specific architecture, and that you can't configure this driver

 * without specifying ARM mode, this is not a problem.

 *

 * This routine is essentially an optimised memcpy from the card's

 * onboard RAM to kernel memory.

/*

 * These are the structures that are loaded into the ether RAM card to

 * initialise the 82586

 at 0x0100 */

 at 0x003a */

 at 0x002e */

 at 0x0022 */

 at 0x0010 */

 at 0x0000 */

 at 0xffee */

 at 0xfff6 */

 load data structures into ether1 RAM */

	/*

	 * setup circularly linked list of { rfd, rbd, buffer }, with

	 * all rfds circularly linked, rbds circularly linked.

	 * First rfd is linked to scp, first rbd is linked to first

	 * rfd.  Last rbd has a suspend command.

 release reset & give 586 a prod */

 586 should now unset iscp.busy */

 check status of commands that we issued */

 ------------------------------------------------------------------------- */

	/*

	 * insert packet followed by a nop

 now reset the previous nop pointer */

 handle transmit */

 check to see if we have room for a full sized ether frame */

 special case */

 nexttail should be rx_head */

 we suspended due to lack of buffer space */

/*

 * Set or clear the multicast filter for this adaptor.

 * num_addrs == -1	Promiscuous mode, receive all packets.

 * num_addrs == 0	Normal mode, clear multicast list.

 * num_addrs > 0	Multicast mode, receive normal and MC packets, and do

 *			best-effort filtering.

 ------------------------------------------------------------------------- */

/* lasi_82596.c -- driver for the intel 82596 ethernet controller, as

   munged into HPPA boxen .



   This driver is based upon 82596.c, original credits are below...

   but there were too many hoops which HP wants jumped through to

   keep this code in there in a sane manner.



   3 primary sources of the mess --

   1) hppa needs *lots* of cacheline flushing to keep this kind of

   MMIO running.



   2) The 82596 needs to see all of its pointers as their physical

   address.  Thus virt_to_bus/bus_to_virt are *everywhere*.



   3) The implementation HP is using seems to be significantly pickier

   about when and how the command and RX units are started.  some

   command ordering was changed.



   Examination of the mach driver leads one to believe that there

   might be a saner way to pull this off...  anyone who feels like a

   full rewrite can be my guest.



   Split 02/13/2000 Sam Creasey (sammy@oh.verio.com)



   02/01/2000  Initial modifications for parisc by Helge Deller (deller@gmx.de)

   03/02/2000  changes for better/correct(?) cache-flushing (deller)

 82596.c: A generic 82596 ethernet driver for linux. */

/*

   Based on Apricot.c

   Written 1994 by Mark Evans.

   This driver is for the Apricot 82596 bus-master interface



   Modularised 12/94 Mark Evans





   Modified to support the 82596 ethernet chips on 680x0 VME boards.

   by Richard Hirst <richard@sleepie.demon.co.uk>

   Renamed to be 82596.c



   980825:  Changed to receive directly in to sk_buffs which are

   allocated at open() time.  Eliminates copy on incoming frames

   (small ones are still copied).  Shared data now held in a

   non-cached page, so we can run on 68060 in copyback mode.



   TBD:

   * look at deferring rx frames rather than discarding (as per tulip)

   * handle tx ring full as per tulip

   * performance test to tune rx_copybreak



   Most of my modifications relate to the braindead big-endian

   implementation by Intel.  When the i596 is operating in

   'big-endian' mode, it thinks a 32 bit value of 0x12345678

   should be stored as 0x56781234.  This is a real pain, when

   you have linked lists which are shared by the 680x0 and the

   i596.



   Driver skeleton

   Written 1993 by Donald Becker.

   Copyright 1993 United States Government as represented by the Director,

   National Security Agency. This software may only be used and distributed

   according to the terms of the GNU General Public License as modified by SRC,

   incorporated herein by reference.



   The author may be reached as becker@scyld.com, or C/O

   Scyld Computing Corporation, 410 Severn Ave., Suite 210, Annapolis MD 21403



/* DEBUG flags

/*

 * The MPU_PORT command allows direct access to the 82596. With PORT access

 * the following commands are available (p5-18). The 32-bit port command

 * must be word-swapped with the most significant word written first.

 * This only applies to VME boards.

 reset 82596 */

 selftest */

 alternate SCB address */

 Alternate DUMP address */

/* Copy frames shorter than rx_copybreak, otherwise pass on up in

 * a full sized sk_buff.  Value of 100 stolen from tulip.c (!alpha).

 The last command of the list, stop. */

 Suspend after doing cmd. */

 Interrupt after doing cmd. */

 Enable flexible memory model */

 Set to 0 after execution */

 Command being executed */

 Command executed ok */

 Command aborted */

 Total 32 bytes... */

/* The command structure has two 'next' pointers; v_next is the address of

 * the next command as seen by the CPU, b_next is the address of the next

 * command as seen by the 82596.  The b_next pointer, as used by the 82596

 * always references the status field of the next command, rather than the

 * v_next field, because the 82596 is unaware of v_next.  It may seem more

 * logical to put v_next at the end of the structure, but we cannot do that

 * because the 82596 expects other fields to be there, depending on command

 * type.

 Address from CPUs viewpoint */

 Address from i596 viewpoint */

 So we can free it after tx */

 Total 64 bytes... */

 Total 32 bytes... */

 Address from i596 viewpoint */

 Address from CPUs viewpoint */

 Total 32 bytes... */

 hardware data */

 Address from i596 viewpoint */

 driver data */

 This rbd addr from i596 view */

 Address from CPUs viewpoint */

 Total 32 bytes... */

 These values as chosen so struct i596_dma fits in one page... */

 serialize access to chip */

 length, prefetch on */

 fifo to 8, monitor off */

 don't save bad frames */

 No source address insertion, 8 byte preamble */

 priority and backoff defaults */

 interframe spacing */

 slot time LSB */

 slot time and retries */

 promiscuous mode */

 collision detect */

 minimum frame length */

  *multi IA */ };

 NONCOHERENT_DMA */

 First build the Receive Buffer Descriptor List */

 Now build the Receive Frame Descriptor List */

 Ensure rx frame/buffer descriptors are tidy */

 Wait 100us - seems to help */

 change the scp address */

 Ensure rx frame/buffer descriptors are tidy */

 Ref next frame to check */

 Loop while complete frames */

 XXX Now what? */

 a good frame */

			/* Check if the packet is long enough to just accept

			 * without copying to a properly sized skbuff.

 Get fresh skbuff to replace filled one. */

 drop pkt */

 Pass up the skb already on the Rx ring. */

 XXX tulip.c can defer packets here!! */

 16 byte align the data fields */

 Clear the buffer descriptor count and EOF + F flags */

 Tidy the frame descriptor, marking it as end of list */

 Update record of next frame descriptor to process */

 Remove end-of-list from old end descriptor */

 Mark as free */

 FIXME: this command might cause an lpmc */

 wait for shutdown */

 Transmitter timeout, serious problems. */

 Try to restart the adaptor */

 Shutdown and restart */

 Issue a channel attention signal */

 prevent tx timeout */

 This lot is ensure things have been cache line aligned. */

 Mark free */

				/*

				 * Zap command so set_multicast_list() know

				 * it is free

		/* This mess is arranging that only the last of any outstanding

		 * commands has the interrupt bit set.  Should probably really

		 * only add to the cmd queue when the CU is stopped.

 Only RX_START if stopped - RGH 07-07-96 */

	/* DANGER: I suspect that some kind of interrupt

	 acknowledgement aside from acking the 82596 might be needed

/*

 *    Set or clear the multicast filter for this adaptor.

/*

 * Sun3 i82586 Ethernet driver

 *

 * Cloned from ni52.c for the Sun3 by Sam Creasey (sammy@sammy.net)

 *

 * Original copyright follows:

 * --------------------------

 *

 * net-3-driver for the NI5210 card (i82586 Ethernet chip)

 *

 * This is an extension to the Linux operating system, and is covered by the

 * same Gnu Public License that covers that work.

 *

 * Alphacode 0.82 (96/09/29) for Linux 2.0.0 (or later)

 * Copyrights (c) 1994,1995,1996 by M.Hipp (hippm@informatik.uni-tuebingen.de)

 * --------------------------

 *

 * Consult ni52.c for further notes from the original driver.

 *

 * This incarnation currently supports the OBIO version of the i82586 chip

 * used in certain sun3 models.  It should be fairly doable to expand this

 * to support VME if I should every acquire such a board.

 *

 debug-printk 0: off 1: a few 2: more */

 experimental .. better should be zero */

 rfdadd=1 may be better for 8K MEM cards */

 don't change */

 debug on */

 16 Bit */

/******************* how to calculate the buffers *****************************



  * IMPORTANT NOTE: if you configure only one NUM_XMIT_BUFFS, the driver works

  * --------------- in a different (more stable?) mode. Only in this mode it's

  *                 possible to configure the driver with 'NO_NOPCOMMANDS'



sizeof(scp)=12; sizeof(scb)=16; sizeof(iscp)=8;

sizeof(scp)+sizeof(iscp)+sizeof(scb) = 36 = INIT

sizeof(rfd) = 24; sizeof(rbd) = 12;

sizeof(tbd) = 8; sizeof(transmit_cmd) = 16;

sizeof(nop_cmd) = 8;



 slightly oversized */

 slightly oversized */

 config for 32K shmem */

 config for 32K shared mem */

 config for 32K shared mem */

 config for 32K shared mem */

 only possible with NUM_XMIT_BUFFS=1 */

*************************************************************************/

 different DELAYs */

 wait for command with timeout: */

 helper-functions */

 volatile is important */

 volatile is important */

 volatile is important */

/**********************************************

 * close device

 the hard way to stop the receiver */

/**********************************************

 * open device

 most done by init */

/**********************************************

 * Check to see if there's an 82586 out there.

 memory was writeable? */

 1 = 8Bit-Bus, 0 = 16 Bit */

 wait a while... */

 i82586 clears 'busy' after successful init */

/******************************************************************

 * set iscp at the right place, called by sun3_82586_probe1 and open586.

 check that this machine has an onboard 82586 */

 these machines have 82586 */

 copy in the ethernet address from the prom */

	/*

	 * check (or search) IO-Memory, 32K

 set number of receive-buffs according to memsize */

 configure-command */

 number of cfg bytes */

 fifo-limit (8=tx:32/rx:64) */

 hold or discard bad recv frames (bit 7) */

 addr_len |!src_insert |pre-len |loopback */

 cmd.-unit start */

	/*

	 * individual address setup

 cmd.-unit start */

	/*

	 * TDR, wire check .. e.g. no resistor e.t.c

 cmd.-unit start */

 wait for result */

 ack the interrupts */

 time == 0 -> strange :-) */

	/*

	 * Multicast setup

	/*

	 * alloc nop/xmit-cmds

 init receive-frame-area */

	/*

	 * alloc xmit-buffs / init xmit_cmds

transmit cmd/buff 0*/

 char-buffs */

 TBD */

	 /*

		* 'start transmitter'

	/*

	 * ack. interrupts

/******************************************************

 * This is a helper routine for sun3_82586_rnr_int() and init586().

 * It sets up the Receive Frame Area (RFA).

 RU suspend */

 clr descriptors */

/**************************************************

 * Interrupt Handler ...

 wait for last command	*/

 received a frame */

 RU went 'not ready' */

 special case: RU_SUSPEND */

 command with I-bit set complete */

 CU went 'not ready' */

 wait for ack. (sun3_82586_xmt_int can be faster than ack!!) */

 timed out? */

/*******************************************************

 * receive-interrupt

 frame received without error? */

 the first and the last buffer? */

 length of this frame */

 free all RBD's until RBD_LAST is set */

 frame !(ok), only with 'save-bad-frames' */

 maybe exchange by RFD_LAST */

 delete RFD_SUSP	*/

 step to next RFD */

/**********************************************************

 * handle 'Receiver went not ready'.

 wait for the last cmd, WAIT_4_FULLSTAT?? */

 usually the RU is in the 'no resource'-state .. abort it now. */

 wait for accept cmd. */

 maybe add a check here, before restarting the RU */

 restart RU */

/**********************************************************

 * handle xmit - interrupt

/***********************************************************

 * (re)start the receiver

 start cmd. */

 wait for accept cmd. (no timeout!!) */

 COMMAND-UNIT active? */

 prevent tx timeout */

 prevent tx timeout */

/******************************************************

 * send frame

 test it, because CU sometimes doesn't start immediately */

 linkpointer of xmit-command already points to next nop cmd */

/*******************************************

 * Someone wanna have the statistics

 get error-statistic from the ni82586 */

/********************************************************

 * Set MC list ..

/*

 * DUMP .. we expect a not running CMD unit and enough space

 82596.c: A generic 82596 ethernet driver for linux. */

/*

   Based on Apricot.c

   Written 1994 by Mark Evans.

   This driver is for the Apricot 82596 bus-master interface



   Modularised 12/94 Mark Evans





   Modified to support the 82596 ethernet chips on 680x0 VME boards.

   by Richard Hirst <richard@sleepie.demon.co.uk>

   Renamed to be 82596.c



   980825:  Changed to receive directly in to sk_buffs which are

   allocated at open() time.  Eliminates copy on incoming frames

   (small ones are still copied).  Shared data now held in a

   non-cached page, so we can run on 68060 in copyback mode.



   TBD:

   * look at deferring rx frames rather than discarding (as per tulip)

   * handle tx ring full as per tulip

   * performance test to tune rx_copybreak



   Most of my modifications relate to the braindead big-endian

   implementation by Intel.  When the i596 is operating in

   'big-endian' mode, it thinks a 32 bit value of 0x12345678

   should be stored as 0x56781234.  This is a real pain, when

   you have linked lists which are shared by the 680x0 and the

   i596.



   Driver skeleton

   Written 1993 by Donald Becker.

   Copyright 1993 United States Government as represented by the Director,

   National Security Agency. This software may only be used and distributed

   according to the terms of the GNU General Public License as modified by SRC,

   incorporated herein by reference.



   The author may be reached as becker@scyld.com, or C/O

   Scyld Computing Corporation, 410 Severn Ave., Suite 210, Annapolis MD 21403



/* DEBUG flags

/*

 * Define various macros for Channel Attention, word swapping etc., dependent

 * on architecture.  MVME and BVME are 680x0 based, otherwise it is Intel.

/*

 * These were the intel versions, left here for reference. There

 * are currently no x86 users of this legacy i82596 chip.

/*

 * The MPU_PORT command allows direct access to the 82596. With PORT access

 * the following commands are available (p5-18). The 32-bit port command

 * must be word-swapped with the most significant word written first.

 * This only applies to VME boards.

 reset 82596 */

 selftest */

 alternate SCB address */

 Alternate DUMP address */

/* Copy frames shorter than rx_copybreak, otherwise pass on up in

 * a full sized sk_buff.  Value of 100 stolen from tulip.c (!alpha).

 The last command of the list, stop. */

 Suspend after doing cmd. */

 Interrupt after doing cmd. */

 Enable flexible memory model */

 Set to 0 after execution */

 Command being executed */

 Command executed ok */

 Command aborted */

/* The command structure has two 'next' pointers; v_next is the address of

 * the next command as seen by the CPU, b_next is the address of the next

 * command as seen by the 82596.  The b_next pointer, as used by the 82596

 * always references the status field of the next command, rather than the

 * v_next field, because the 82596 is unaware of v_next.  It may seem more

 * logical to put v_next at the end of the structure, but we cannot do that

 * because the 82596 expects other fields to be there, depending on command

 * type.

 Address from CPUs viewpoint */

 Address from i596 viewpoint */

 So we can free it after tx */

 Address from i596 viewpoint */

 Address from CPUs viewpoint */

 Address from i596 viewpoint */

 This rbd addr from i596 view */

 Address from CPUs viewpoint */

 length, prefetch on */

 fifo to 8, monitor off */

 don't save bad frames */

 don't save bad frames */

 No source address insertion, 8 byte preamble */

 priority and backoff defaults */

 interframe spacing */

 slot time LSB */

 slot time and retries */

 promiscuous mode */

 collision detect */

 minimum frame length */

  *multi IA */ };

 First build the Receive Buffer Descriptor List */

 Now build the Receive Frame Descriptor List */

 Ensure rx frame/buffer descriptors are tidy */

 Wait 100us - seems to help */

 Disable all ints for now */

		/* Following disables snooping.  Snooping is not required

		 * as we make appropriate use of non-cached pages for

		 * shared data, and cache_push/cache_clear.

 change the scp address */

 Ensure rx frame/buffer descriptors are tidy */

 Enable ints, etc. now */

 Edge sensitive */

 Ref next frame to check */

 Loop while complete frames */

 XXX Now what? */

 a good frame */

			/* Check if the packet is long enough to just accept

			 * without copying to a properly sized skbuff.

 Get fresh skbuff to replace filled one. */

 drop pkt */

 Pass up the skb already on the Rx ring. */

 XXX tulip.c can defer packets here!! */

 16 byte align the data fields */

 Clear the buffer descriptor count and EOF + F flags */

 Tidy the frame descriptor, marking it as end of list */

 Remove end-of-list from old end descriptor */

 Update record of next frame descriptor to process */

 Mark as free */

 wait for shutdown */

 Transmitter timeout, serious problems. */

 Try to restart the adaptor */

 Shutdown and restart */

 Issue a channel attention signal */

 prevent tx timeout */

 YUCK! Get addr from NOVRAM */

 Stored in RTC RAM at offset 1 */

 The 82596-specific entries in the device structure. */

	/* XXX This assumes default cache mode to be IOMAP_FULL_CACHING,

	 * XXX which may be invalid (CONFIG_060_WRITETHROUGH)

 Mark free */

 Zap command so set_multicast_list() knows it is free */

 Only RX_START if stopped - RGH 07-07-96 */

 Ack the interrupt */

 Disable all ints */

 Set snooping bits now! */

/*

 *    Set or clear the multicast filter for this adaptor.

	/* XXX This assumes default cache mode to be IOMAP_FULL_CACHING,

	 * XXX which may be invalid (CONFIG_060_WRITETHROUGH)

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sni_82596.c -- driver for intel 82596 ethernet controller, as

 *  		  used in older SNI RM machines

 big endian CPU, 82596 little endian */

 order writes to MPU port */

 order writes to MPU port */

 someone seems to like messed up stuff */

/*

 * Copyright (c) 2007 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 Partition Tx queues evenly amongst UP's */

 CONFIG_MLX4_EN_DCB */

 RFS infrastructure id */

 mlx4_en driver id */

 Flow steering API id */

	u8 activated;			/* Used to prevent expiry before filter

					 * is attached

/* Must not acquire state_lock, as its corresponding work_sync

 * is done under it.

 Add VID to port VLAN filter */

 Remove VID from port VLAN filter */

 do nothing */

 Remove old MAC and insert the new one */

	/* Find all the entries that should be removed from dst,

	 * These are the entries that are not found in src

	/* Add entries that exist in src but not in dst

	 * mark them as need to add

 Enable promiscouos mode */

			/* Add the default qp number as multicast

			 * promisc

 Disable port multicast filter (unconditionally) */

 Disable promiscouos mode */

 Disable Multicast promisc */

 Enable/disable the multicast filter according to IFF_ALLMULTI */

 Add the default qp number as multicast promisc */

 Disable Multicast promisc */

 Flush mcast filter and init it with broadcast address */

		/* Update multicast list - we cache all addresses so they won't

 detach this address and delete from list */

 remove from list */

 attach the address */

 needed for B0 steering support */

	/* Note that we do not need to protect our mac_hash traversal with rcu,

	 * since all modification code is protected by mdev->state_lock

 find what to remove */

 MAC address of the port is not in uc list */

	/* if we didn't remove anything, there is no use in trying to add

	 * again once we are in a forced promisc mode state

 find what to add */

 Promsicuous mode: disable all filters */

 Not in promiscuous mode */

	/* If we haven't received a specific coalescing setting

	 * (module param), we set the moderation parameters as follows:

	 * - moder_cnt is set to the number of mtu sized packets to

	 *   satisfy our coalescing target.

	 * - moder_time is set to a fixed value.

 Setup cq moderation params */

 Reset auto-moderation params */

		/* Apply auto-moderation only when packet rate

/* mlx4_en_service_task - Run service task for tasks that needed to be done

 * periodically

 Calculate Rx buf size */

 Configure rx cq's and rings */

 Set qp number */

 Configure tx cq's and rings */

 Configure cq */

 Configure ring */

 Arm CQ for TX completions */

 XDP TX CQ should never be armed */

 Set initial ownership of all Tx TXBBs to SW (1) */

 Configure port */

 Set default qp number */

 Init port */

 Set Unicast and VXLAN steering rules */

 Attach rx QP to bradcast address */

 needed for B0 steering support */

 Must redo promiscuous mode setup. */

 Schedule multicast task to populate multicast list */

	/* Process all completions if exist to prevent

	 * the queues freezing if they are full

 need to close devices */

 close port*/

 Synchronize with tx routine */

 Set port as not active */

 Promsicuous mode */

 Disable promiscouos mode */

 Disable Multicast promisc */

 Detach All multicasts */

 needed for B0 steering support */

 Flush multicast filter */

 Remove flow steering rules for the port*/

 Free TX Rings */

 Free RSS qps */

 Unregister Mac address for the port */

 Free RX Rings */

 Reset HW statistics and SW counters */

 Create tx Rings */

 Create rx Rings */

 All rx_rings has the same xdp_prog.  Pick the first one. */

 Unregister device - this will close the port if it was up */

 flush any pending task for this netdev */

 Detach the netdev so tasks would not attempt to access it */

			/* NIC is probably restarting - let restart task reset

 reserved for future extensions */

 device doesn't support time stamping */

 TX HW timestamp */

 RX HW timestamp */

	/* Since there is no support for separate RX C-TAG/S-TAG vlan accel

	 * enable/disable make sure S-TAG flag is always in same state as

	 * C-TAG.

	/* The ConnectX-3 doesn't support outer IPv6 checksums but it does

	 * support inner IPv6 checksums and segmentation so  we need to

	 * strip that feature if this is an IPv6 encapsulated frame.

 rate provided to us in Mbs, check if it fits into 12 bits, if not use Gbs */

 zero serves to revoke the QP rate-limitation */

	/* No need to reconfigure buffers when simply swapping the

	 * program for a new one.

	/* Go into this mode only when two network devices set on two ports

	 * of the same mlx4 device are slaves of the same bonding master

 condition not met: network device is a slave */

 condition not met: same master */

 condition not met: 2 salves */

 handle only events that come with enough info */

 required mode 1, 2 or 4 */

 require exactly 2 slaves */

 calc v2p */

				/* in active-backup mode virtual ports are

				 * mapped to the physical port of the active

 BOND_STATE_ACTIVE */

 Active-Active */

				/* in active-active mode a virtual port is

				 * mapped to the native physical port if and only

 BOND_LINK_DOWN || BOND_LINK_BACK */

	/*

	 * Initialize driver private data

 Query for default mac and max mtu */

 Set default MAC */

		/* Random MAC was assigned in mlx4_slave_cap

		 * in mlx4_core module

 Initialize time stamping config */

 Allocate page for receive rings */

	/*

	 * Initialize netdev entry points

	/*

	 * Set driver features

 Setting a default hash function value */

 MTU range: 68 - hw-specific max */

 Configure port */

 Init port */

 Initialize time stamp mechanism */

 Nothing to change */

		/* RX time-stamping is OFF, update the RX vlan offload

		 * to the latest wanted state

	/* RX vlan offload and RX time-stamping can't co-exist !

	 * Regardless of the caller's choice,

	 * Turn Off RX vlan offload in case of time-stamping is ON

/*

 * Copyright (c) 2004 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005, 2006, 2007 Cisco Systems, Inc. All rights reserved.

 * Copyright (c) 2005, 2006, 2007, 2008 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2004 Voltaire, Inc. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 QP to support BF should have bits 6,7 cleared */

 used for INIT/CLOSE port logic */

 this procedure is called after we already know we are on the master */

 qp0 is either the proxy qp0, or the real qp0 */

 Turn off all unsupported QP allocation flags */

	/*  We have a single zone for the A0 steering QPs area of the FW. This area

	 *  needs to be split into subareas. One set of subareas is for RSS QPs

	 *  (in which qp number bits 6 and/or 7 are set); the other set of subareas

	 *  is for RAW_ETH QPs, which require that both bits 6 and 7 are zero.

	 *  Currently, the values returned by the FW (A0 steering area starting qp number

	 *  and A0 steering area size) are such that there are only two subareas -- one

	 *  for RSS and one for RAW_ETH.

		/* Assuming MLX4_BF_QP_SKIP_MASK is consecutive ones, this calculates

		 * a mask of all LSB bits set until (and not including) the first

		 * set bit of  MLX4_BF_QP_SKIP_MASK. For example, if MLX4_BF_QP_SKIP_MASK

		 * is 0xc0, bf_mask will be 0x3f.

 From this point, the BF bits are 0 */

 need to skip */

					/*  We will not take this path if last_offset was

					 *  already set above to candidate_offset

			/* mlx4_bitmap_alloc_range will find a contiguous range of "size"

			 * QPs in which both bits 6 and 7 are zero, because we pass it the

			 * MLX4_BF_SKIP_MASK).

			/* Add an empty bitmap, we'll allocate from different zones (since

			 * at least one is reserved)

	/* We reserve 2 extra QPs per port for the special QPs.  The

	 * block of special QPs must be aligned to a multiple of 8, so

	 * round up.

	 *

	 * We also reserve the MSB of the 24-bit QP number to indicate

	 * that a QP is an XRC QP.

 We reserve at least 1 extra for bitmaps that we don't have enough space for*/

       /* Reserve 8 real SQPs in both native and SRIOV modes.

	* In addition, in SRIOV mode, reserve 8 proxy SQPs per function

	* (for all PFs and VFs), and 8 corresponding tunnel QPs.

	* Each proxy SQP works opposite its own tunnel QP.

	*

	* The QPs are arranged as follows:

	* a. 8 real SQPs

	* b. All the proxy SQPs (8 per function)

	* c. All the tunnel QPs (8 per function)

 for PPF use */

		/* In mfunc, calculate proxy and tunnel qp offsets for the PF here,

/*

 * Copyright (c) 2006, 2007 Cisco Systems, Inc. All rights reserved.

 * Copyright (c) 2007, 2008 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 In mlx4_remove_one on a VF */

/*

 * Copyright (c) 2007 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Mac not found */

 check that same mac is not in the tables at different indices */

		/* If the mac is already in the primary table, the slot must be

		 * available in the duplicate table as well.

		/* If the mac is already in the duplicate table, check that the

		 * corresponding index is not occupied in the primary table, or

		 * the primary table already contains the mac at the same index.

		 * Otherwise, you cannot bond (primary contains a different mac

		 * at that index).

 MAC already registered, increment ref count */

 No free mac entries */

 Register new MAC */

 retry using old REG_MAC format */

 use old unregister mac format */

 CX1 doesn't support multi-functions */

 VLAN already registered, increase reference count */

 No free vlan entries */

 check that same vlan is not in the tables at different indices */

		/* If the vlan is already in the primary table, the slot must be

		 * available in the duplicate table as well.

		/* If the vlan is already in the duplicate table, check that the

		 * corresponding index is not occupied in the primary table, or

		 * the primary table already contains the vlan at the same index.

		 * Otherwise, you cannot bond (primary contains a different vlan

		 * at that index).

 Vlan already registered, increase references count */

 Register new VLAN */

 Slave is a VF */

 Zero-out gids belonging to that slave in the port GID table */

 Now, copy roce port gids table to mailbox for passing to FW */

 have ETH ports.  Alloc mailbox for SET_PORT command */

	/* Mtu is configured as the max USER_MTU among all

	 * the functions on the port.

	/* User Mtu is configured as the max USER_MTU among all

	 * the functions on the port.

 Slave cannot change Global Pause configuration */

	/* Slaves cannot perform SET_PORT operations,

	 * except for changing MTU and USER_MTU.

			/* change to MULTIPLE entries: number of guest's gids

			 * need a FOR-loop here over number of gids the guest has.

			 * 1. Check no duplicates in gids passed by slave

 found duplicate */

			/* 2. Check that do not have duplicates in OTHER

			 *    entries in the port GID table

 don't compare to slave's current gids */

 found duplicate */

 insert slave GIDs with memcpy, starting at slave's base index */

 Now, copy roce port gids table to current mailbox for passing to FW */

 Slaves are not allowed to SET_PORT beacon (LED) blink */

	/* For IB, we only consider:

	 * - The capability mask, which is set to the aggregate of all

	 *   slave function capabilities

	 * - The QKey violatin counter - reset according to each request.

 slave may not set the IS_SM capability for the port */

 No DEV_MGMT in multifunc mode */

	/* only clear mailbox for guests.  Master may be setting

	* MTU or PKEY table size

 bit locations for set port command with zero op modifier */

 bits 7:4 */

 bits 15:12 */

 IB VL CAP enum isn't used by the firmware, just numerical values */

		/* Calculate a slave_gid which is the slave number in the gid

		 * table and not a globally unique slave number.

 Calculate the globally unique slave id */

 Calculate how many VFs are on the previous port, if exists */

			/* candidate_slave_gid isn't necessarily the correct slave, but

			 * it has the same number of ports and is assigned to the same

			 * ports as the real slave we're looking for. On dual port VF,

			 * slave_gid = [single port VFs on port <port>] +

			 * [offset of the current slave from the first dual port VF] +

			 * 1 (for the PF).

 Calculate the real slave number */

 Cable Module Info */

 Module Info Data */

 Get */

 Module Info */

 Mad returned with bad status */

	/* Offsets 0-255 belong to page 0.

	 * Offsets 256-639 belong to pages 01, 02, 03.

	 * For example, offset 400 is page 02: 1 + (400 - 256) / 128 = 2

/**

 * mlx4_get_module_info - Read cable module eeprom data

 * @dev: mlx4_dev.

 * @port: port number.

 * @offset: byte offset in eeprom to start reading data from.

 * @size: num of bytes to read.

 * @data: output buffer to put the requested data into.

 *

 * Reads cable module eeprom data, puts the outcome data into

 * data pointer paramer.

 * Returns num of read bytes on success or a negative error

 * code.

 Get */

 Module Info */

		/* Cross pages reads are not allowed

		 * read until offset 256 in low page

 Mad returned with bad status */

			/* Some SFP cables do not support i2c slave

			 * address 0x51 (high page), abort silently.

/*

 * Copyright (c) 2007 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 build the pkt before xmit */

 fill our packet */

 xmit the pkt */

 xmit */

 polling for result */

 When not in MSI_X or slave, test only async */

	/* A loop over all completion vectors of current port,

	 * for each vector check whether it works by mapping command

	 * completions to that vector and performing a NOP command

 The device supports 100M, 1G, 10G, 20G, 40G and 56G speed */

 disable the interface */

		/* Wait until all tx queues are empty.

		 * there should not be any additional incoming traffic

/*

 * Copyright (c) 2006, 2007 Cisco Systems, Inc. All rights reserved.

 * Copyright (c) 2007, 2008 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Copyright (c) 2007 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

	/*

	 * If sensed nothing, remain in current configuration.

/*

 * Copyright (c) 2004, 2005 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005, 2006, 2007, 2008 Mellanox Technologies.

 * All rights reserved.

 * Copyright (c) 2005, 2006, 2007 Cisco Systems, Inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 QP number was allocated */

 ICM memory for QP context was mapped */

 QP is in hw ownership */

 saved qp params before VST enforcement in order to restore on VGT */

 VF DMFS mbox with port flipped */

 > 0 --> apply mirror when getting into HA mode      */

 = 0 --> un-apply mirror when getting out of HA mode */

 Figure out where to put new node */

 Add new node and rebalance tree. */

 For Debug uses */

 portion may need to be obtained from free area */

 grant the request */

 portion may need to be returned to reserved area */

 reserved mtts will be taken out of the PF allocation */

 quotas for VFs are initialized in mlx4_slave_cap */

 For master, only allocate according to the number of phys ports */

 calculate real number of ports for the VF */

	/* If we do not have enough counters for this VF, do not

	 * allocate any for it. '-1' to reduce the sink counter.

 Reduce the sink counter */

 Calculate the max vfs per port for */

 both ports.			      */

 free master's vlans */

		/* the reserved QPs (special, proxy, tunnel)

		 * do not operate over vlans

 force strip vlan by clear vsd, MLX QP refers to Raw Ethernet */

 preserve IF_COUNTER flag */

				/* vst QinQ should block untagged on TX,

				 * but cvlan is in payload and phv is set so

				 * hw see it as untagged. Block tagged instead.

 vst 802.1Q */

 priority tagged */

 No existing counter, need to allocate a new counter */

		/* Turn off all unsupported QP allocation flags that the

		 * slave tries to set.

 mac found. update ref count */

 dereference the mac the num times the slave referenced it */

 vlan found. update ref count */

 dereference the vlan the num times the slave referenced it */

 upstream kernels had NOP for reg/unreg vlan. Continue this. */

 ugly but other choices are uglier */

 Disable memory windows for VFs. */

 Make sure that the PD bits related to the slave id are zeros. */

 FMR and Bind Enable are forbidden in slave devices. */

 FMR and Memory Windows are also forbidden. */

		/* In order to allow rereg in SRIOV, we need to alter the MPT entry. To do

		 * that, the VF must read the MPT. But since the MPT entry memory is not

		 * in the VF's virtual memory space, it must use QUERY_MPT to obtain the

		 * entry contents. To guarantee that the MPT cannot be changed, the driver

		 * must perform HW2SW_MPT before this query and return the MPT entry to HW

		 * ownership fofollowing the change. The change here allows the VF to

		 * perform QUERY_MPT also when the entry is in SW ownership.

 adjust qkey in qp context */

 Save param3 for dynamic changes from VST back to VGT */

 setting QP rate-limit is disallowed for VFs */

 only enabled VFs may create MLX proxy QPs */

	/* Call the SW implementation of write_mtt:

	 * - Prepare a dummy mtt struct

	mtt.offset = 0;  /* TBD this is broken but I don't handle it since

 check for slave valid, slave not PF, and slave active */

 Create the event only if the slave is registered */

	/* if no error, save sched queue value passed in by VF. This is

	 * essentially the QOS value provided by the VF. This will be useful

	 * if we allow dynamic changes from VST back to VGT

 dummy for calling attach/detach */

/*

 * MAC validation for Flow Steering rules.

 * VF can attach rules only with a mac address which is assigned to it.

 make sure it isn't multicast or broadcast mac*/

/*

 * In case of missing eth header, append eth header with a MAC address

 * assigned to the VF.

 Clear a space in the inbox for eth header */

 Just change the smac for the QP */

 set different port */

 detach rule on error */

 Release the rule form busy state before removal */

 dummy for calling attach/detach */

 detach rule */

 block all */

 vst 802.1Q */

 no INIT2RTR trans yet */

	/* unregister previous vlan_id if needed and we had no errors

	 * while updating the QPs

/*

 * Copyright (c) 2005, 2006, 2007, 2008 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2006, 2007 Cisco Systems, Inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * We allocate in as big chunks as we can, up to a maximum of 256 KB

 * per chunk. Note that the chunks are not necessarily in contiguous

 * physical memory.

 We use sg_set_buf for coherent allocs, which assumes low memory */

				/* XXX: we should never do this for highmem

				 * allocation.  This function either needs

				 * to be split, or the kernel virtual address

				 * return needs to be made optional.

			/*

			 * DMA mapping can merge pages but not split them,

			 * so if we found the page, dma_handle has already

			 * been assigned to.

		/*

		 * Add a reference to this ICM chunk so that it never

		 * gets freed (since it contains reserved firmware objects).

/*

 * Copyright (c) 2007 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

	/* This command is always accessed from Ethtool context

 Reset and recalculate the port flags */

/* Each counter set is located in struct mlx4_en_stat_out_mbox

 * with a const offset between its prio components.

 * This function runs over a counter set and sum all of it's prio components.

 0xffs indicates invalid value */

 net device stats */

 RX stats */

 Tx stats */

 if pfc is not in use, all priorities counters have the same value */

/*

 * Copyright (c) 2007 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 force user priority per tx ring */

 disable multicast loopback to qp with same counter */

 this fills bits 30:28 */

/*

 * Copyright (c) 2004, 2005 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005, 2006, 2007, 2008 Mellanox Technologies.

 * All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 allocate vpp opcode modifiers */

 set vport qos opcode modifiers */

 3-100Mbps, 4-1Gbps, other values - reserved */

 Granular Qos (per VF) section */

 Total number of supported VPPs */

/*

 * Copyright (c) 2011 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

/* Definitions for QCN

/* On success returns a non-zero 802.1p user priority bitmap

 * otherwise returns 0 as the invalid user priority bitmap to

 * indicate an error.

 higher TC means higher priority => lower pg */

 rate-limit HW unit in Kbps */

		/* Convert from Kbps into HW units, rounding result up.

		 * Setting to 0, means unlimited BW.

		/* Before updating QCN parameter,

		 * need to set it's modify enable bit to 1

/*

 * Copyright (c) 2004, 2005 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005, 2006, 2007, 2008 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2005, 2006, 2007 Cisco Systems, Inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 command completed successfully: */

 Internal error (such as a bus error) occurred while processing command: */

 Operation/command not supported or opcode modifier not supported: */

 Parameter not supported or parameter out of range: */

 System not enabled or bad system state: */

 Attempt to access reserved or unallocaterd resource: */

 Requested resource is currently executing a command, or is otherwise busy: */

 Required capability exceeds device limits: */

 Resource is not in the appropriate state or ownership: */

 Index out of range: */

 FW image corrupted: */

 Error in ICM mapping (e.g. not enough auxiliary ICM pages to execute command): */

 Attempt to modify a QP/EE which is not in the presumed state: */

 Bad segment parameters (Address/Size): */

 Memory Region has Memory Windows bound to: */

 HCA local attached memory not present: */

 Bad management packet (silently discarded): */

 More outstanding CQEs in CQ than new CQ size: */

 Multi Function device support required: */

 On Detach case return success */

 Any error during the closing commands below is considered fatal */

	/* Error on MLX4_CMD_HW2SW_MPT is fatal except when fw status equals

	  * CMD_STAT_REG_BOUND.

	  * This status indicates that memory region has memory windows bound to it

	  * which may result from invalid user space usage and is not fatal.

	/* Only if reset flow is really active return code is based on

	  * command, otherwise current error code is returned.

	/* To avoid writing to unknown addresses after the device state was

	 * changed to internal error and the function was rest,

	 * check the INTERNAL_ERROR flag which is updated under

	 * device_state_mutex lock.

 First, verify that the master reports correct status */

 Write command */

		/* Only in case the device state is INTERNAL_ERROR,

		 * mlx4_comm_cmd_post returns with an error

		/* check if the slave is trying to boot in the middle of

		 * FLR process. The only non-zero result in the RESET command

		/* Only in case the device state is INTERNAL_ERROR,

		 * mlx4_comm_cmd_post returns with an error

	/* wait for comm channel ready

	 * this is necessary for prevention the race

	 * when switching between event to polling mode

	 * Skipping this section in case the device is in FATAL_ERROR state,

	 * In this state, no commands are sent via the comm channel until

	 * the device has returned from reset.

	/* To avoid writing to unknown addresses after the device state was

	  * changed to internal error and the chip was reset,

	  * check the INTERNAL_ERROR flag which is updated under

	  * device_state_mutex lock.

		/*

		 * Device is going through error recovery

		 * and cannot accept commands.

			/*

			 * Device is going through error recovery

			 * and cannot accept commands.

	/*

	 * We use writel (instead of something like memcpy_toio)

	 * because writes of less than 32 bits to the HCR don't work

	 * (and some architectures such as ia64 implement memcpy_toio

	 * in terms of writeb).

 __raw_writel may not order writes. */

		/*

		 * Device is going through error recovery

		 * and cannot accept commands.

			/*

			 * Device is going through error recovery

			 * and cannot accept commands.

 previously timed out command completing at long last */

		/* Since we do not want to have this error message always

		 * displayed at driver start when there are ConnectX2 HCAs

		 * on the host, we deprecate the error message for this

		 * specific command/input_mod/opcode_mod/fw-status to be debug.

 network-view bit is for driver use only, and should not be passed to FW */

 clear netw view bit */

 host view is paravirtualized */

				/* need to get the full pkey table because the paravirtualized

				 * pkeys may be scattered among several pkey blocks.

get the slave specific caps:*/

do the command */

 modify the response for slaves */

				/* set the PF admin guid to the FW/HW burned

				 * GUID, if it wasn't yet set

 clean all other gids */

	/* Non-privileged VFs are only allowed "host" view LID-routed 'Get' MADs.

	 * These are the MADs used by ib verbs (such as ib_query_gids).

 XXX verify: only demux can do this */

 Native multicast commands are not available for guests */

 Ethernet specific commands */

 flow steering commands */

 Create sw representation of Virtual HCR */

 DMA in the vHCR */

 Fill SW VHCR fields */

 Lookup command */

 Read inbox */

 Apply permission and bound checks if applicable */

 Allocate outbox */

 Execute the command! */

 Write outbox if command completed successfully */

			/* If we failed to write back the outbox after the

			 *command was successfully executed, we must fail this

 DMA back vhcr result */

		/* even if the UPDATE_QP command isn't supported, we still want

		 * to set this VF link according to the admin directive

 save original vlan ix and vlan id */

 handle new qos */

 iterate over QPs owned by this slave, using UPDATE_QP */

 Enable only default prio at PF init routine */

 Query actual allocated VPP, just to make sure */

		/*check if we are in the middle of FLR process,

 write the version in the event field */

command from slave in the middle of FLR*/

 cleanup any slave resources */

		/* Turn on internal error letting slave reset itself immeditaly,

		 * otherwise it might take till timeout on command is passed

with slave in the middle of flr, no need to clean resources again.*/

 master command processing */

 PCI might be offline */

			/* If device removal has been requested,

			 * do not continue retrying.

	/*

	 * we could reach here if for example the previous VM using this

	 * function misbehaved and left the channel with unsynced state. We

	 * should fix this here and give this VM a chance to use a properly

	 * synced channel

	/* If the comm channel has not yet been initialized,

	 * skip reporting the internal error event to all

	 * the communication channels.

	/* Report an internal error event to all

	 * communication channels.

/*

 * Switch to using events to issue FW commands (can only be called

 * after event queue for command events has been initialized).

		/* To support fatal error flow, initialize all

		 * cmd contexts to allow simulating completions

		 * with complete() at any time.

 nothing */

/*

 * Switch back to polling (used when shutting down the device)

 Query for default QoS values from Vport 0 is needed */

			/* if user supplied tx_rate == 0, meaning no rate limit

			 * configuration is required. so we are leaving the

			 * value of max_avg_bw as queried from Vport 0.

	/* VF wants to move to other VST state which is valid with current

	 * rate limit. Either differnt default vlan in VST or other

	 * supported QoS priority. Otherwise we don't allow this change when

	 * the TX rate is still configured.

	/* If rate was configured prior to VST, we saved the configured rate

	 * in vf_admin->rate and now, if priority supported we enforce the QoS

	/* Try to activate new vf state without restart,

	 * this option is not supported while moving to VST QinQ mode.

	/* if VF is not in supported mode (VST with supported prio),

	 * we do not change vport configuration for its QPs, but save

	 * the rate, so it will be enforced when it moves to supported

	 * mode next time.

 If user sets rate 0 assigning default vport for its QPs */

 /* mlx4_get_slave_default_vlan -

 * return true if VST ( default vlan)

 * if VST, will return vlan & qos (if not NULL)

 need to convert it to a func */

 get current link state */

 send event */

/*

 * Copyright (c) 2007 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

/*

 * Device scope module parameters

 Enable RSS UDP traffic */

 Priority pausing */

	/* Drop the packet if SRIOV is not enabled

	 * and not performing the selftest or flb disabled

	/* Set dmac in Tx WQE if we are in SRIOV mode or if loopback selftest

	 * is requested

		/* To prevent races, we poll the link state in a separate

 Create a netdev for each port */

 register notifier */

 Build device profile according to supplied module parameters */

 Configure which ports to start according to module parameters */

 Set default number of RX rings*/

	/* Create our own workqueue for reset/multicast tasks

	 * Note: we cannot use the shared workqueue because of deadlocks caused

	/* At this stage all non-port specific tasks are complete:

/*

 * Copyright (c) 2012 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

/* mlx4_en_read_clock - read raw cycle counter (to be used by time counter)

/**

 * mlx4_en_remove_timestamp - disable PTP device

 * @mdev: board private structure

 *

 * Stop the PTP support.

/* By scheduling the overflow check every 5 seconds, we have a reasonably

 * good chance we wont miss a wrap around.

 * TOTO: Use a timer instead of a work queue to increase the guarantee.

/**

 * mlx4_en_phc_adjfreq - adjust the frequency of the hardware clock

 * @ptp: ptp clock structure

 * @delta: Desired frequency change in parts per billion

 *

 * Adjust the frequency of the PHC cycle counter by the indicated delta from

 * the base frequency.

/**

 * mlx4_en_phc_adjtime - Shift the time of the hardware clock

 * @ptp: ptp clock structure

 * @delta: Desired change in nanoseconds

 *

 * Adjust the timer by resetting the timecounter structure.

/**

 * mlx4_en_phc_gettime - Reads the current time from the hardware clock

 * @ptp: ptp clock structure

 * @ts: timespec structure to hold the current time value

 *

 * Read the timecounter and return the correct value in ns after converting

 * it into a struct timespec.

/**

 * mlx4_en_phc_settime - Set the current time on the hardware clock

 * @ptp: ptp clock structure

 * @ts: timespec containing the new time for the cycle counter

 *

 * Reset the timecounter to use a new base value instead of the kernel

 * wall timer value.

 reset the timecounter */

/**

 * mlx4_en_phc_enable - enable or disable an ancillary feature

 * @ptp: ptp clock structure

 * @request: Desired resource to enable or disable

 * @on: Caller passes one to enable or zero to disable

 *

 * Enable (or disable) ancillary features of the PHC subsystem.

 * Currently, no ancillary features are supported.

/* This function calculates the max shift that enables the user range

 * of MLX4_EN_WRAP_AROUND_SEC values in the cycles register.

 calculate max possible multiplier in order to fit in 64bit */

 This comes from the reverse of clocksource_khz2mult */

	/* mlx4_en_init_timestamp is called for each netdev.

	 * mdev->ptp_clock is common for all ports, skip initialization if

	 * was done for other port.

 Configure the PHC */

/*

 * Copyright (c) 2004, 2005 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2006, 2007 Cisco Systems, Inc. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/*

	 * We want to scale the number of MTTs with the size of the

	 * system memory, since it makes sense to register a lot of

	 * memory on a system with a lot of memory.  As a heuristic,

	 * make sure we have enough MTTs to cover twice the system

	 * memory (with PAGE_SIZE entries).

	 *

	 * This number has to be a power of two and fit into 32 bits

	 * due to device limitations, so cap this at 2^31 as well.

	 * That limits us to 8TB of memory registration per HCA with

	 * 4KB pages, which is probably OK for the next few months.

	/*

	 * Sort the resources in decreasing order of size.  Since they

	 * all have sizes that are powers of 2, we'll be able to keep

	 * resources aligned to their size and pack them without gaps

	 * using the sorted order.

 nothing */

	/*

	 * PDs don't take any HCA memory, but we assign them as part

	 * of the HCA profile anyway.

/*

 * Copyright (c) 2005, 2006, 2007, 2008 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2005, 2006, 2007 Cisco Systems, Inc. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *	- Redistributions of source code must retain the above

 *	  copyright notice, this list of conditions and the following

 *	  disclaimer.

 *

 *	- Redistributions in binary form must reproduce the above

 *	  copyright notice, this list of conditions and the following

 *	  disclaimer in the documentation and/or other materials

 *	  provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 We still want ordering, just not swabbing, so add a barrier */

 (entry & (eq->nent - 1)) gives us a cyclic array */

	/* CX3 is capable of extending the EQE from 32 to 64 bytes with

	 * strides of 64B,128B and 256B.

	 * When 64B EQE is used, the first (in the lower addresses)

	 * 32 bytes in the 64 byte EQE are reserved and the next 32 bytes

	 * contain the legacy EQE information.

	 * In all other cases, the first 32B contains the legacy EQE info.

 All active slaves need to receive the event */

 VF doesn't have this port */

 ensure all information is written before setting the ownersip bit */

don't send if we don't have the that slave */

don't send if we don't have the that slave */

/**************************************************************************

	The function get as input the new event to that port,

	and according to the prev state change the slave's port state.

	The events are:

		MLX4_PORT_STATE_DEV_EVENT_PORT_DOWN,

		MLX4_PORT_STATE_DEV_EVENT_PORT_UP

		MLX4_PORT_STATE_IB_EVENT_GID_VALID

		MLX4_PORT_STATE_IB_EVENT_GID_INVALID

			/* In case of 'Reset flow' FLR can be generated for

			 * a slave before mlx4_load_one is done.

			 * make sure interface is up before trying to delete

			 * slave resources which weren't allocated yet.

return the slave to running mode*/

notify the FW:*/

		/*

		 * Make sure we read EQ entry contents after we've

		 * checked the ownership bit.

 forward only to slave owning the QP */

 forward only to slave owning the SRQ */

 IB port */

we can be in pending state, then do not send port_down event*/

 IB port */

					/* port-up event will be sent to a slave when the

					 * slave's alias-guid is set. This is done in alias_GUID.c

			/* FW commands can't be executed from interrupt context

			 * working in deferred task

		/*

		 * The HCA will think the queue has overflowed if we

		 * don't tell it we've been processing events.  We

		 * create our EQs with MLX4_NUM_SPARE_EQE extra

		 * entries, so we must update our consumer index at

		 * least that often.

 MSI-X vectors always belong to us */

	/*

	 * Each UAR holds 4 EQ doorbells.  To figure out how many UARs

	 * we need to map, take the difference of highest index and

	 * the lowest index we'll use and add 1.

	/* CX3 is capable of extending the CQE/EQE from 32 to 64 bytes, with

	 * strides of 64B,128B and 256B.

	/* CX3 is capable of extending the CQE/EQE from 32 to 64 bytes, with

	 * strides of 64B,128B and 256B

 arm ASYNC eq */

/* A test that verifies that we can accept interrupts

 * on the vector allocated for asynchronous events

/* A test that verifies that we can accept interrupts

 * on the given irq vector of the tested port.

 * Interrupts are checked using the NOP command.

 Temporary use polling for command completions */

 Map the new eq to handle all asynchronous events */

 Go back to using events */

 Return to default */

	/* once we allocated EQ, we don't release it because it might be binded

	 * to cpu_rmap.

/*

 * Copyright (c) 2007 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 main statistics */

 port statistics */

 pf statistics */

 priority flow control statistics rx */

 flow control statistics rx */

 priority flow control statistics tx */

 flow control statistics tx */

 packet statistics */

 xdp statistics */

 phy statistics */

 if set, force no increments */

 Add main counters */

 link down */

 Translates mlx4 link mode to equivalent ethtool Link modes/speed */

 Convert actual speed (SPEED_XXX) to ptys link modes */

 reset supported/advertising masks */

 ETH PROT CRTL is not supported or PTYS CMD failed */

 Calculate PTYS admin according ethtool speed (SPEED_XXX) */

 Speed = 0 ==> Reset Link modes */

 nothing to change due to bad input */

 Nothing to change */

 Setting TX coalescing parameters */

 Set adaptive coalescing params */

 check if requested function is supported by the device */

	/* Calculate RSS table size and make sure flows are spread evenly

	 * between rings

 RSS table size must be an order of 2 */

 dest mac mask must be ff:ff:ff:ff:ff:ff */

 don't allow mask which isn't all 0 or 1 */

 source mac mask must not be set */

 dest mac mask must be ff:ff:ff:ff:ff:ff */

 Allow direct QP attaches if the EN_ETHTOOL_QP_ATTACH flag is set */

 Read first 2 bytes to get Module & REV ID */

offset*/, 2
 identifier */) {

 revision id */

 Done reading */

/*

 * Copyright (c) 2006, 2007 Cisco Systems, Inc.  All rights reserved.

 * Copyright (c) 2007, 2008 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 not found */

/*

 * Add new entry to steering data structure.

 * All promisc QPs should be added as well

	/* If the given qpn is also a promisc qp,

	 * it should be inserted to duplicates list

 if no promisc qps for this vep, we are done */

	/* now need to add all the promisc qps to the new

	 * steering entry, as they should also receive the packets

 don't add already existing qpn */

 out of space */

 add the qpn */

 update the qps count and update the entry with all the promisc qps*/

 update the data structures with existing steering entry */

 nothing to do */

	/* the given qpn is listed as a promisc qpn

	 * we need to add it as a duplicate to this entry

 qp is already duplicated */

 add the qp as a duplicate on this index */

/* Check whether a qpn is a duplicate on steering entry

 if qp is not promisc, it cannot be duplicated */

	/* The qp is promisc qp so it is a duplicate on this index

/* Returns true if all the QPs != tqpn contained in this entry

 * are Promisc QPs. Returns false otherwise.

 the qp is not promisc, the entry can't be removed */

 IF a steering entry contains only promisc QPs, it can be removed. */

	/* All the qps currently registered for this entry are promiscuous,

				/* If there is only 1 entry in duplicates then

				 * this is the QP we want to delete, going over

				 * the list and deleting the entry.

 This entry contains duplicates so it shouldn't be removed */

 Noting to do, already exists */

		/* The promisc QP needs to be added for each one of the steering

		 * entries. If it already exists, needs to be added as

		 * a duplicate for this entry.

					/* Entry already exists.

					 * Add to duplicates.

 Need to add the qpn to mgm */

 entry is full */

 add the new qpn to list of promisc qps */

 now need to add all the promisc qps to default entry */

 entry is full */

 nothing to do */

remove from list of promisc qps */

 set the default entry not to include the removed one */

 Remove the QP from all the steering entries */

				/* A duplicate, no need to change the MGM,

				 * only update the duplicates list

				/* Copy the last QP in this MGM

				 * over removed QP

/*

 * Caller must hold MCG table semaphore.  gid and mgm parameters must

 * be properly aligned for command interface.

 *

 *  Returns 0 unless a firmware command error occurs.

 *

 * If GID is found in MGM or MGM is empty, *index = *hash, *prev = -1

 * and *mgm holds MGM entry.

 *

 * if GID is found in AMGM, *index = index in AMGM, *prev = index of

 * previous entry in hash chain and *mgm holds AMGM entry.

 *

 * If no AMGM exists for given gid, *index = -1, *prev = index of last

 * entry in hash chain and *mgm holds end of hash chain.

 any vxlan header */

 any inner eth header */

 manage the steering entry for promisc mode */

	/* If this QP is also a promisc QP, it shouldn't be removed only if

	 * at least one none promisc QP is also attached to this MCG

 copy the last QP in this MGM over removed QP */

 We are going to delete the entry, members count should be 0 */

 Remove entry from MGM */

 Remove entry from AMGM */

 In case device is under an error, return success as a closing command */

 Promiscuous unicast is not allowed in mfunc */

 No need for mcg_table when fw managed the mcg table*/

/*

 * Copyright (c) 2007 Cisco Systems, Inc. All rights reserved.

 * Copyright (c) 2007, 2008 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

		/* If PCI can't be accessed to read vendor ID we assume that its

		 * link was disabled and chip was already reset.

		/* Reading rst_req again since the communication channel can

		 * be reset at any time by the PF and all its bits will be

		 * set to zero.

		/* EEH could have disabled the PCI channel during reset. That's

		 * recoverable and the PCI error flow will handle it.

 At that step HW was already reset, now notify clients */

/*

 * Copyright (c) 2004, 2005 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005, 2006, 2007, 2008 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2005, 2006, 2007 Cisco Systems, Inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Warn and revert the request to set vst QinQ mode */

 when opcode modifier = 1 */

 phys-port = logical-port */

 Set nic_info bit to mark new fields support */

 size is now the QP number */

		/* enable rdma and ethernet interfaces, new quota locations,

		 * and reserved lkey

 set PF behaviours */

 protected FMR support not available as yet */

 0 = general, 1 = logical port */

		/* Mailbox data from 0x6c and onward should only be treated if

		 * QUERY_FUNC_CAP_FLAG_VALID_MAILBOX is set in func_cap->flags

 logical port query */

	/* All other resources are allocated by the master, but we still report

	 * 'num' and 'reserved' capabilities as follows:

	 * - num remains the maximum resource index

	 * - 'num - reserved' is the total available objects of a resource, but

	 *   resource indices may be less than 'reserved'

	/*

	 * Each UAR has 4 EQ doorbells; so if a UAR is reserved, then

	 * we can't use any EQs whose doorbell falls on that page,

	 * even if the EQ itself isn't reserved.

	/* add port mng change event capability and disable mw type 1

	 * unconditionally to slaves

 Not exposing RSS IP fragments to guests */

 For guests, disable timestamp */

 For guests, disable vxlan tunneling and QoS support */

 For guests, disable port BEACON */

 For guests, report Blueflame disabled */

 For guests, disable mw type 2 and port remap*/

 turn off device-managed steering capability if not enabled */

 turn off ipoib managed steering for guests */

 turn off host side virt features (VST, FSM, etc) for guests */

 turn off QCN for guests */

 turn off QP max-rate limiting for guests */

 turn off QoS per VF support for guests */

 turn off ignore FCS feature for guests */

	/* Protect against untrusted guests: enforce that this is the

	 * QUERY_PORT general query.

 get port type - currently only eth is enabled */

 No link sensing allowed */

 set port type to currently operating port type */

 slave max gids */

		/*

		 * We have to pass pages that are aligned to their

		 * size, so find the least significant 1 in the

		 * address or size and use that as our log2 size.

	/*

	 * FW subminor version is at more significant bits than minor

	 * version, so swap here.

	/*

	 * Round up number of system pages needed in case

	 * MLX4_ICM_PAGE_SIZE < PAGE_SIZE.

	/* for slaves, set pci PPF ID to invalid and zero out everything

		/*

		 * The board ID is a string but the firmware byte

		 * swaps each 4-byte word before passing it back to

		 * us.  Therefore we need to swab it before printing.

 Check port for UD address vector: */

 Enable IPoIB checksumming if we can: */

 Enable QoS support if module parameter set */

 enable counters */

 Enable RSS spread to fragmented IP packets when supported */

 CX3 is capable of extending CQEs/EQEs from 32 to 64 bytes */

 CX3 is capable of extending CQEs\EQEs to strides larger than 64B */

 User still need to know to support CQE > 32B */

 QPC/EEC/CQC/EQC/RDMARC attributes */

 steering attributes */

		/* Enable Ethernet flow steering

		 * with udp unicast and tcp unicast

		/* Enable IPoIB flow steering

		 * with udp unicast and tcp unicast

 TPT attributes */

 UAR attributes */

 set parser VXLAN attributes */

 QPC/EEC/CQC/EQC/RDMARC attributes */

 steering attributes */

 CX3 is capable of extending CQEs/EQEs from 32 to 64 bytes */

 64-bytes eqe enabled */

 64-bytes cqe enabled */

 CX3 is capable of extending CQEs\EQEs to strides larger than 64B */

 TPT attributes */

 UAR attributes */

 phv_check enable */

/* for IB-type ports only in SRIOV mode. Checks that both proxy QP0

 * and real QP0 are active, so that the paravirtualized QP0 is ready

 irrelevant if not infiniband */

 Enable port only if it was previously disabled */

 infiniband port */

/* Conversion between the HW values and the actual functionality.

 * The value represented by the array index,

 * and the functionality determined by the flags.

	/*

	 * Round up number of system pages needed in case

	 * MLX4_ICM_PAGE_SIZE < PAGE_SIZE.

 Input modifier of 0x1f means "finish as soon as possible." */

 Check if mad_demux is supported */

 Query mad_demux to find out which MADs are handled by internal sma */

 subn mgmt class */,

 Config mad_demux to handle all MADs returned by the query above */

 subn mgmt class */,

 Access Reg commands */

/**

 * mlx4_ACCESS_REG - Generic access reg command.

 * @dev: mlx4_dev.

 * @reg_id: register ID to access.

 * @method: Access method Read/Write.

 * @reg_len: register length to Read/Write in bytes.

 * @reg_data: reg_data pointer to Read/Write From/To.

 *

 * Access ConnectX registers FW command.

 * Returns 0 on success and copies outbox mlx4_access_reg data

 * field into reg_data or a negative error code.

 ConnectX registers IDs */

/**

 * mlx4_ACCESS_PTYS_REG - Access PTYs (Port Type and Speed)

 * register

 * @dev: mlx4_dev.

 * @method: Access method Read/Write.

 * @ptys_reg: PTYS register data pointer.

 *

 * Access ConnectX PTYS register, to Read/Write Port Type/Speed

 * configuration

 * Returns 0 on success or a negative error code.

/*

 * Copyright (c) 2007 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

	/* We need to clear all fields, otherwise a change of priv->log_rx_info

	 * could lead to see garbage later in frag->page.

 Set size and memtype fields */

	/* If the number of used fragments does not fill up the ring stride,

	 * remaining (unused) fragments must be padded with null address/size

 XDP uses a single page per frame */

 slow path */

 Function not in fast-path */

 Unmap and free Rx buffers */

 Allocate HW buffers on provided NUMA node */

 Stamp first unused send wqe */

 Move pointer to start of rx section */

 Initialize all descriptors */

/* We recover from out of memory by scheduling our napi poll

 * function (mlx4_en_process_cq), which tries to allocate

 * all missing RX buffers (call to mlx4_en_refill_rx_buffers).

/* When the rx ring is running in page-per-packet mode, a released frame can go

 * directly into a small cache, to avoid unmapping or touching the page

 * allocator. In bpf prog performance scenarios, buffers are either forwarded

 * or dropped, never converted to skbs, so every page can come directly from

 * this cache when it is sized to be a multiple of the napi budget.

 Collect used fragments while replacing them in the HW descriptors */

			/* rx_headroom for non XDP setup is always 0.

			 * When XDP is set, the above condition will

			 * guarantee page is always released.

 Loopback found */

 Try to batch allocations, but not too much. */

/* When hardware doesn't strip the vlan, we need to calculate the checksum

 * over it and add it to the hardware's checksum calculation

/* Although the stack expects checksum which doesn't include the pseudo

 * header, the HW adds it. To address that, we are subtracting the pseudo

 * header checksum from the checksum value provided by the HW.

/* In IPv6 packets, hw_checksum lacks 6 bytes from IPv6 header:

 * 4 first bytes : priority, version, flow_lbl

 * and 2 additional bytes : nexthdr, hop_limit.

 priority, version, flow_lbl */

 nexthdr and hop_limit */

/* We reach this function only after checking that any of

 * the (IPv4 | IPv6) bits are set in cqe->status.

	/* CQE csum doesn't cover padding octets in short ethernet

	 * frames. And the pad field is appended prior to calculating

	 * and appending the FCS field.

	 *

	 * Detecting these padded frames requires to verify and parse

	 * IP headers, so we simply force all those small frames to skip

	 * checksum complete.

	/* We assume a 1:1 mapping between CQEs and Rx descriptors, so Rx

	 * descriptor offset can be deduced from the CQE index instead of

 Process all completed CQEs */

		/*

		 * make sure we read the CQE after we read the ownership bit

 Drop packet on bad receive or bad checksum */

		/* Check if we need to drop the packet if SRIOV is not enabled

		 * and not performing the selftest or flb disabled

			/* Get pointer to first fragment since we haven't

			 * skb yet and cast it to ethhdr struct

 Drop the packet, since HW loopback-ed it */

		/*

		 * Packet is OK - process it.

		/* A bpf program gets first chance to drop the packet. It may

		 * read bytes but not past the end of the frag.

 Drop on xmit failure */

			/* TODO: For IP non TCP/UDP packets when csum complete is

			 * not an option (not supported or any other reason) we can

			 * actually check cqe IPOK status bit and report

			 * CHECKSUM_UNNECESSARY rather than CHECKSUM_NONE

 ensure HW sees CQ consumer before we post new buffers */

 Rx CQ polling - called by NAPI */

 If we used up all the quota - we're probably not done yet... */

 in case we got here because of !clean_complete */

		/* Current cpu is not according to smp_irq_affinity -

		 * probably affinity changed. Need to stop this NAPI

		 * poll, and restart it on the right CPU.

		 * Try to avoid returning a too small value (like 0),

		 * to not fool net_rx_action() and its netdev_budget

 Done for now */

	/* bpf requires buffers to be set up as 1 packet per page.

	 * This only works when num_frags == 1.

		/* This will gain efficient xdp frame recycling at the

		 * expense of more costly truesize accounting

 should not happen, right ? */

			/* We can only pack 2 1536-bytes frames in on 4K page

			 * Therefore, each frame would consume more bytes (truesize)

 RSS related functions */

 Cancel FCS removal if FW allows */

 Allocate rx qp's and configure them according to rss map */

 Configure RSS indirection qp */

/*

 * Copyright (c) 2006, 2007 Cisco Systems, Inc.  All rights reserved.

 * Copyright (c) 2005 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Copyright (c) 2018, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Set to true in case cr enable bit was set to true before crdump */

 Get current enable bit value */

 Enable FW CR filter (set bit6 to 0) */

 Enable block volatile crspace accesses */

 Disable block volatile crspace accesses */

 Restore FW CR filter value (set bit6 to original value) */

 Try to collect CR space */

 Try to collect health buffer */

 Get the available snapshot ID for the dumps */

 Try to capture dumps */

 Release reference on the snapshot id */

 Create cr-space region */

 Create fw-health region */

/*

 * Copyright (c) 2007 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

	/* Allocate HW buffers on provided NUMA node.

	 * dev->numa_node is used in mtt range allocation flow.

		/* For TX we use the same irq per

 nothing regarding napi, it's shared with rx ring */

 Set rx cq moderation parameters */

/*

 * Copyright (c) 2007 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 Allocate HW buffers on provided NUMA node */

 Optimize the common case when there are no wraparounds */

 Stamp the freed descriptor */

 Stamp the freed descriptor */

	/* We do not touch skb here, so prefetch skb->users location

	 * to speedup consume_skb()

 Optimize the common case when there are no wraparounds */

 Check for wraparound before unmapping */

 Skip last polled descriptor */

 Non-NAPI caller */);

 Process all completed CQEs */

		/*

		 * make sure we read the CQE after we read the

		 * ownership bit

 Skip over last polled CQE */

 free next descriptor */

	/*

	 * To prevent CQ overflow we first update CQ consumer and only then

	 * the ring consumer.

 we want to dirty this cache line once */

	/* Wakeup Tx queue if this stopped, and ring is not full.

 TX CQ polling - called by NAPI */

 Return real descriptor location */

/* Decide if skb can be inlined in tx descriptor to avoid dma mapping

 *

 * It seems strange we do not simply use skb_copy_bits().

 * This would allow to inline all skbs iff skb->len <= inline_thold

 *

 * Note that caller already checked skb was not a gso packet

			/* We add a segment for the skb linear buffer only if

	/* Since there is no iowrite*_native() that writes the

	 * value as is, without byteswapping - using the one

	 * the doesn't do byteswapping in the relevant arch

	 * endianness.

		/* Ensure new descriptor hits memory

		 * before setting ownership of this descriptor to HW

		/* Ensure new descriptor hits memory

		 * before setting ownership of this descriptor to HW

 Map fragments if any */

 Map linear part if needed */

 tx completion can avoid cache line miss for common cases */

 Align descriptor to TXBB size */

 Packet is good - grab an index and transmit it */

	/* See if we have enough space for whole descriptor TXBB for setting

 Save skb in tx_info ring */

 valid only for none inline segments */

	/*

	 * For timestamping add flag to skb_shinfo and

	 * set flag for further reference

	/* Prepare ctrl segement apart opcode+ownership, which depends on

		/* Copy dst mac address to wqe. This allows loopback in eSwitch,

		 * so that VFs and PF can communicate with each other

 Handle LSO (TSO) packets */

 Mark opcode as LSO */

 Fill in the LSO prefix */

		/* Copy headers;

 Normal (Non LSO) packet */

 If we used a bounce buffer then copy descriptor back into place */

 Check available TXBBs And 2K spare for prefetch */

		/* If queue was emptied after the if (stop_queue) , and before

		 * the netif_tx_stop_queue() - need to wake the queue,

		 * or else it will remain stopped forever.

		 * Need a memory barrier to make sure ring->cons was not

		 * updated before queue was stopped.

 tx completion can avoid cache line miss for common cases */

	/* Ensure new descriptor hits memory

	 * before setting ownership of this descriptor to HW

/*

 * Copyright (c) 2006, 2007 Cisco Systems, Inc.  All rights reserved.

 * Copyright (c) 2007, 2008 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/*

	 * Reset the chip.  This is somewhat ugly because we have to

	 * save off the PCI header before reset and then restore it

	 * after the chip reboots.  We skip config space offsets 22

	 * and 23 since those have a special meaning.

 Do we need to save off the full 4K PCI Express header?? */

 grab HW semaphore to lock out flash updates */

 actually hit reset */

 Docs say to wait one second before accessing device */

 Now restore the PCI headers */

/*

 * Copyright (c) 2004, 2005 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.

 * Copyright (c) 2005, 2006, 2007 Cisco Systems, Inc. All rights reserved.

 * Copyright (c) 2005, 2006, 2007, 2008 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2004 Voltaire, Inc. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/* When migrating CQs between EQs will be implemented, please note

	 * that you need to sync this point. It is possible that

	 * while migrating a CQ, completions on the old EQs could

	 * still arrive.

	/* Acessing the CQ outside of rcu_read_lock is safe, because

	 * the CQ is freed only after interrupt handling is completed.

	/* Acessing the CQ outside of rcu_read_lock is safe, because

	 * the CQ is freed only after interrupt handling is completed.

	/* Populate a list of CQ entries to reduce the number of

	 * copy_to_user calls. 0xcc is the initialization value

	 * required by the FW.

 Nothing to do to clean up radix_tree */

/*

 * Copyright (c) 2004 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005, 2006, 2007, 2008 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2006, 2007 Cisco Systems, Inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Must protect against concurrent access */

 Make sure any changes to this entry are flushed */

 Make sure the new status is written */

 The wrapper function will put the slave's id here */

 fast register MR in free state */

 fast register MR in free state */

 compute how may mtts fit in the first page */

	/* Note that the MLX4_MPT_FLAG_REGION bit in mpt_entry->flags is turned

	 * off, thus creating a memory window and not a memory region.

	/* Nothing to do for slaves - all MR handling is forwarded

/*

 * Copyright (c) 2006, 2007 Cisco Systems, Inc.  All rights reserved.

 * Copyright (c) 2007, 2008 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 num must be a power of 2 */

 protect the zone_allocator from concurrent accesses */

 Should be called under a lock */

 Check if we need to add an alternative node to the prio list */

 Should be called under a lock */

 Should be called under a lock */

 Should be called under a lock */

 Should be called under a lock */

	/* Search for the smallest zone that this obj could be

	 * allocated from. This is done in order to handle

	 * situations when small bitmaps are allocated from bigger

	 * bitmaps (and the allocated space is marked as reserved in

	 * the bigger bitmap.

/* Handling for queue buffers -- we allocate a bunch of memory and

 * register it in a memory region at HCA virtual address 0. If the

 *  requested size is > max_direct, we split the allocation into

 *  multiple pages, so we don't require too much contiguous memory.

 This should never fail -- we just allocated an empty page: */

/*

 * Copyright (c) 2004, 2005 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.

 * Copyright (c) 2005, 2006, 2007, 2008 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2006, 2007 Cisco Systems, Inc. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 0 by default */

 CONFIG_MLX4_DEBUG */

 CONFIG_PCI_MSI */

 CONFIG_PCI_MSI */

 It is really num mtt segements */

 Log2 max number of VLANs per ETH port (0-7) */

	/* The reserved_uars is calculated by system page size unit.

	 * Therefore, adjustment is added when the uar page size is less

	 * than the system page size

 FW not supporting or cancelled by user */

	/* Must have 64B CQE_EQE enabled by FW to use bigger stride

	 * When FW has NCSI it may decide not to report 64B CQE/EQEs

 Changing the real data inside CQE size to 32B */

	/* set gid and pkey table operating lengths by default

	 * to non-sriov values

	/*

	 * Subtract 1 from the limit because we need to allocate a

	 * spare CQE to enable resizing the CQ.

 Save uar page shift */

		/* Virtual PCI function needs to determine UAR page size from

		 * firmware. Only master PCI function can set the uar page size

		/* Turn off PHV_EN flag in case phv_check_en is set.

		 * phv_check_en is a HW check that parse the packet and verify

		 * phv bit was reported correctly in the wqe. To allow QinQ

		 * PHV_EN flag should be set and phv_check_en must be cleared

		 * otherwise QinQ packets will be drop by the HW.

 Sense port always allowed on supported devices for ConnectX-1 and -2 */

 Don't do sense port on multifunction devices (for now at least) */

 if only ETH is supported - assign ETH */

 if only IB is supported, assign IB */

				/* if IB and ETH are supported, we set the port

				 * type according to user selection of port type;

		/*

		 * Link sensing is allowed on the port if 3 conditions are true:

		 * 1. Both protocols are supported on the port.

		 * 2. Different types are supported on the port

		 * 3. FW declared that it supports link sensing

		/*

		 * If "default_sense" bit is set, we move the port to "AUTO" mode

		 * and perform sense_port FW command to try and set the correct

		 * port type from beginning

The function checks if there are live vf, return the num of them*/

the ppf is 0*/; i < dev->num_slaves; ++i) {

 tunnel qp */

	/* fail if the hca has an unknown global capability

	 * at this time global_caps should be always zeroed

 Set uar_page_shift for VF */

 Make sure the master uar page size is valid */

 Set reserved_uars based on the uar_page_shift */

	/* Although uar page size in FW differs from system page size,

	 * upper software layers (mlx4_ib, mlx4_en and part of mlx4_core)

	 * still works with assumption that uar page size == system page size

 User still need to know when CQE > 32B */

/*

 * Change the port configuration of the device.

 * Every user of this function must hold the port mutex.

		/* Change the port type only if the new type is different

 Possible type is always the one that was delivered */

	/* We are about to apply the changes after the configuration

	 * was verified, no need to remember the temporary types

 bond for multi-function device */

 only single port vfs are allowed */

	/* number of virtual functions is number of total functions minus one

	 * physical function for each port.

 limit on maximum allowed VFs */

 zero means keep current mapping for this port */

		/* besides boundary checks cross mapping makes

	/*

	 * Reserved MTT entries must be aligned up to a cacheline

	 * boundary, since the FW will write to them, while the driver

	 * writes to all other MTT entries. (The variable

	 * dev->caps.mtt_entry_sz below is really the MTT segment

	 * size, not the raw entry size)

	/*

	 * For flow steering device managed mode it is required to use

	 * mlx4_init_icm_table. For B0 steering mode it's not strictly

	 * required, but for simplicity just map the whole multicast

	 * group table now.  The table isn't very big and it's a lot

	 * easier than trying to track ref counts.

		/* If device removal has been requested,

		 * do not continue retrying.

		/* There are cases as part of AER/Reset flow that PF needs

		 * around 100 msec to load. We therefore sleep for 100 msec

		 * to allow other tasks to make use of that CPU during this

		 * time interval.

	/* if we are in the middle of flr the slave will try

	/* check the driver version - the slave I/F revision

		/*

		 * If TS is supported by FW

		 * read HCA frequency by QUERY_HCA command

			/* In case we got HCA frequency 0 - disable timestamping

			 * to avoid dividing by zero

				/*

				 * Map internal clock,

				 * in case of failure disable timestamping

Only the master set the ports, all the rest got it from it.*/

 Query CONFIG_DEV parameters */

 reserve last counter index for sink counter */

 hw GUID */

 initialize per-slave default ib port capabilities */

 Meaning EQs are shared, and this call comes from the second port */

 1 is reserved for events (asyncrounous EQ) */

				/* We don't set affinity hint when there

				 * aren't enough EQs

			/* We divide the Eqs evenly between the two ports.

			 * (dev->caps.num_comp_vectors / dev->caps.num_ports)

			 * refers to the number of Eqs per port

			 * (i.e eqs_per_port). Theoretically, we would like to

			 * write something like (i + 1) % eqs_per_port == 0.

			 * However, since there's an asynchronous Eq, we have

			 * to skip over it by comparing this condition to

			 * !!((i + 1) > MLX4_EQ_ASYNC).

				/* If dev->caps.num_comp_vectors < dev->caps.num_ports,

				 * everything is shared anyway.

	/* Ethernet and IB drivers will normally set the port type,

	 * but if they are not built set the type now to prevent

	 * devlink_port_type_warn() from firing.

 Checking for 64 VFs as a limitation of CX2 */

 Detect if this device is a virtual function */

		/* We reset the device and enable SRIOV only for physical

		 * devices.  Try to claim ownership on the device;

		/*

		 * Now reset the HCA before we touch the PCI capabilities or

		 * attempt a firmware command, since a boot ROM may have left

		 * the HCA in an undefined state.

	/* on load remove any previous indication of internal error,

	 * device is up.

	/* In slave functions, the communication channel must be initialized

	 * before posting commands. Also, init num_slaves before calling

 when we hit the goto slave_start below, dev_cap already initialized */

			/* Legacy mode FW requires SRIOV to be enabled before

			 * doing QUERY_DEV_CAP, since max_eq's value is different if

			 * SRIOV is enabled.

			/* Not primary Physical function

 We're not a PF */

				/* Only VHCR is cleaned up, so could still

				 * send FW commands

	/* check if the device is functioning at its maximum possible speed.

	 * No return code for this call, just warn the user in case of PCI

	 * express device capabilities are under-satisfied by the bus.

	/* In master functions, the communication channel must be initialized

		/* In master functions, the communication channel

		 * must be initialized after obtaining its address from fw

	/* When PF resources are ready arm its comm channel to enable

	 * getting commands

	/* Due to requirement that all VFs and the PF are *guaranteed* 2 MACS

	 * per port, we must limit the number of VFs to 63 (since their are

	 * 128 MACs)

 Check for BARs. */

 Allow large DMA segments, up to the firmware limit of 1 GB */

 Detect if this device is a virtual function */

		/* When acting as pf, we normally skip vfs unless explicitly

		 * requested to probe them.

 Notify on value changed on runtime configuration mode */

 saving current ports type for further use */

 Disabling SR-IOV is not allowed while there are active vf's */

	/* device marked to be under deletion running now without the lock

	 * letting other tasks to be terminated

 MT25408 "Hermon" */

 SDR */

 DDR */

 QDR */

 DDR Gen2 */

 QDR Gen2 */

 EN 10GigE */

 EN 10GigE Gen2 */

 MT25458 ConnectX EN 10GBASE-T */

 Gen2 */

 MT26468 ConnectX EN 10GigE PCIe Gen2*/

 MT26438 ConnectX EN 40GigE PCIe Gen2 5GT/s */

 MT26478 ConnectX2 40GigE PCIe Gen2 */

 MT25400 Family [ConnectX-2] */

 Virtual Function */

 CONFIG_MLX4_CORE_GEN2 */

 MT27500 Family [ConnectX-3] */

 Virtual Function */

 MT27510 Family */

 MT27511 Family */

 MT27520 Family */

 MT27521 Family */

 MT27530 Family */

 MT27531 Family */

 MT27540 Family */

 MT27541 Family */

 MT27550 Family */

 MT27551 Family */

 MT27560 Family */

 MT27561 Family */

	/*

	 * See the mellanox_check_broken_intx_masking() quirk when

	 * adding devices

 Check if module param for ports type has legal combination */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2019 Mellanox Technologies. All rights reserved */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2019 Mellanox Technologies. All rights reserved */

/*               MFA2 FILE

 *  +----------------------------------+

 *  |        MFA2 finger print         |

 *  +----------------------------------+

 *  |   package descriptor multi_tlv   |

 *  | +------------------------------+ |     +-----------------+

 *  | |    package descriptor tlv    +-----> |num_devices=n    |

 *  | +------------------------------+ |     |num_components=m |

 *  +----------------------------------+     |CB offset        |

 *  |    device descriptor multi_tlv   |     |...              |

 *  | +------------------------------+ |     |                 |

 *  | |           PSID tlv           | |     +-----------------+

 *  | +------------------------------+ |

 *  | |     component index tlv      | |

 *  | +------------------------------+ |

 *  +----------------------------------+

 *  |  component descriptor multi_tlv  |

 *  | +------------------------------+ |     +-----------------+

 *  | |  component descriptor tlv    +-----> |Among others:    |

 *  | +------------------------------+ |     |CB offset=o      |

 *  +----------------------------------+     |comp index=i     |

 *  |                                  |     |...              |

 *  |                                  |     |                 |

 *  |                                  |     +-----------------+

 *  |        COMPONENT BLOCK (CB)      |

 *  |                                  |

 *  |                                  |

 *  |                                  |

 *  +----------------------------------+

 *

 * On the top level, an MFA2 file contains:

 *  - Fingerprint

 *  - Several multi_tlvs (TLVs of type MLXFW_MFA2_TLV_MULTI, as defined in

 *    mlxfw_mfa2_format.h)

 *  - Compresses content block

 *

 * The first multi_tlv

 * -------------------

 * The first multi TLV is treated as package descriptor, and expected to have a

 * first TLV child of type MLXFW_MFA2_TLV_PACKAGE_DESCRIPTOR which contains all

 * the global information needed to parse the file. Among others, it contains

 * the number of device descriptors and component descriptor following this

 * multi TLV.

 *

 * The device descriptor multi_tlv

 * -------------------------------

 * The multi TLVs following the package descriptor are treated as device

 * descriptor, and are expected to have the following children:

 *  - PSID TLV child of type MLXFW_MFA2_TLV_PSID containing that device PSID.

 *  - Component index of type MLXFW_MFA2_TLV_COMPONENT_PTR that contains that

 *    device component index.

 *

 * The component descriptor multi_tlv

 * ----------------------------------

 * The multi TLVs following the device descriptor multi TLVs are treated as

 * component descriptor, and are expected to have a first child of type

 * MLXFW_MFA2_TLV_COMPONENT_DESCRIPTOR that contains mostly the component index,

 * needed for the flash process and the offset to the binary within the

 * component block.

 Check that all children are valid */

 Validate the device has PSID tlv */

 Validate the device has COMPONENT_PTR */

 Check that component have COMPONENT_DESCRIPTOR as first child */

 check that all the devices exist */

 Check each device */

 check that all the components exist */

 Check each component */

 for each device tlv */

 find psid child and compare */

 decode up to the offset */

 decode the needed section */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2019 Mellanox Technologies. All rights reserved */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2019 Mellanox Technologies. All rights reserved */

 Whether policer binding can change */

/* All driver-specific traps must be documented in

 * Documentation/networking/devlink/mlxsw.rst

 Packet was mirrored from ingress. */

 Packet was mirrored from policy engine. */

 Packet was early dropped. */

 Packet was mirrored from egress. */

	/* The PTP handler expects skb->data to point to the start of the

	 * Ethernet header.

/* The latency units are determined according to MOGCR.mirror_latency_units. It

 * defaults to 64 nanoseconds.

	/* The psample module expects skb->data to point to the start of the

	 * Ethernet header.

	/* Locally generated packets are not reported from the policy engine

	 * trigger, so do not report them from the egress trigger as well.

	/* Packet was sampled from Tx, so we need to retrieve the sample

	 * parameters based on the Tx port and not the Rx port.

	/* The psample module expects skb->data to point to the start of the

	 * Ethernet header.

	/* The psample module expects skb->data to point to the start of the

	 * Ethernet header.

 Ordered by policer identifier */

		/* IPV6_ROUTER_ALERT is defined in uAPI as 22, but it is not

		 * used in this file, so undefine it.

	/* The purpose of "thin" policer is to drop as many packets

	 * as possible. The dummy group is using it.

 Initialize policer items array with pre-defined policers. */

	/* Initialize policer items array with the rest of the available

	 * policers.

		/* Use parameters set for first policer and override

		 * relevant ones.

	/* The group items array is created by concatenating the common trap

	 * group items and the ASIC-specific trap group items.

	/* The trap items array is created by concatenating the common trap

	 * items and the ASIC-specific trap items.

	/* We should be able to allocate a policer because the number of

	 * policers we registered with devlink is in according with the number

	 * of available policers.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 This struct maps to one RIGR2 register entry */

	/* If either there is no erif_entry or the last one is full, allocate a

	 * new one.

 Add the eRIF to the last entry's last index */

 If the sublist is not the last one, pack the next index */

 Pack all the erifs */

 Write the entry */

			/* No need of a rollback here because this

			 * hardware entry should not be pointed yet.

		/* If we are about to append a multicast router action, commit

		 * the erif_list.

 Create the egress RIFs list */

 Create the flow counter */

 Create the flexible action block */

 Write the route to the TCAM */

 Create a new flexible action block */

 Update the TCAM route entry */

 Delete the old one */

 Create a new flexible action block */

 Update the TCAM route entry */

 Delete the old one */

 Commit the action only if the route action is not TRAP */

 Create a copy of the original erif_list without the deleted entry */

 Create the flexible action block pointing to the new erif_list */

 Update the TCAM route entry */

 Create a new erif_list */

 Create the flexible action block pointing to the new erif_list */

 Update the TCAM route entry */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2015-2018 Mellanox Technologies. All rights reserved */

/* tx_hdr_version

 * Tx header version.

 * Must be set to 1.

/* tx_hdr_ctl

 * Packet control type.

 * 0 - Ethernet control (e.g. EMADs, LACP)

 * 1 - Ethernet data

/* tx_hdr_proto

 * Packet protocol type. Must be set to 1 (Ethernet).

/* tx_hdr_rx_is_router

 * Packet is sent from the router. Valid for data packets only.

/* tx_hdr_fid_valid

 * Indicates if the 'fid' field is valid and should be used for

 * forwarding lookup. Valid for data packets only.

/* tx_hdr_swid

 * Switch partition ID. Must be set to 0.

/* tx_hdr_control_tclass

 * Indicates if the packet should use the control TClass and not one

 * of the data TClasses.

/* tx_hdr_etclass

 * Egress TClass to be used on the egress device on the egress port.

/* tx_hdr_port_mid

 * Destination local port for unicast packets.

 * Destination multicast ID for multicast packets.

 *

 * Control packets are directed to a specific egress port, while data

 * packets are transmitted through the CPU port (0) into the switch partition,

 * where forwarding rules are applied.

/* tx_hdr_fid

 * Forwarding ID used for L2 forwarding lookup. Valid only if 'fid_valid' is

 * set, otherwise calculated based on the packet's VID using VID to FID mapping.

 * Valid for data packets only.

/* tx_hdr_type

 * 0 - Data packets

 * 6 - Control packets

 Rx & Tx */

	/* TX header is consumed by HW on the way so we shouldn't count its

	 * bytes as being sent.

	/* Due to a race we might fail here because of a full queue. In that

	 * unlikely case we simply drop the packet.

 tx_dropped is u32, updated without syncp protection. */

		/* Note: mlxsw_sp_port_down_wipe_counters() clears the cache as

		 * necessary when port goes down.

/* Return the stats from a cache that is updated periodically,

 * as this function might get called in an atomic context.

	/* VLAN 0 is added to HW filter when device goes up, but it is

	 * reserved in our case, so simply return.

	/* VLAN 0 is removed from HW filter when device goes down, but

	 * it is reserved in our case, so simply return.

	/* Set advertised speeds to speeds supported by both the driver

	 * and the device.

	/* Setup the elements hierarcy, so that each TC is linked to

	 * one subgroup, which are all member in the same group.

	/* Make sure the max shaper is disabled in all hierarchies that support

	 * it. Note that this disables ptps (PTP shaper), but that is intended

	 * for the initial configuration.

 Configure the min shaper for multicast TCs. */

 Map all priorities to traffic class 0. */

	/* Each packet needs to have a Tx header (metadata) on top all other

	 * headers.

 ETS and buffers must be initialized before DCB. */

	/* Set SPVC.et0=true and SPVC.et1=false to make the local port to treat

	 * only packets with 802.1q header as tagged packets.

 This calls ndo_stop */

 Go over original unsplit ports in the gap and recreate them. */

 Events */

 L2 traps */

 L3 traps */

 Multicast Router Traps */

 NVE traps */

 Events */

 RCU read lock must be held */

	/* Initialize SPAN before router and switchdev, so that those components

	 * can call mlxsw_sp_span_respin().

 NULL is a valid return value from clock_init */

 NULL is a valid return value from ptp_ops->init */

	/* Initialize netdevice notifier after router and SPAN is initialized,

	 * so that the event handler can use router structures and call SPAN

	 * respin.

/* Per-FID flood tables are used for both "true" 802.1D FIDs and emulated

 * 802.1Q FIDs

	/* The hash part is what left of the kvd without the

	 * linear part. It is split to the single size and

	 * double size by the parts ratio from the profile.

	 * Both sizes must be a multiplications of the

	 * granularity from the profile. In case the user

	 * provided the sizes they are obtained via devlink.

 Check results are legal. */

 Port is no longer usable as a router interface */

 Join a router interface configured on the LAG, if exists */

 Any VLANs configured on the port are no longer valid */

	/* Make the LAG and its directly linked uppers leave bridges they

	 * are memeber in

 Make sure untagged frames are allowed to ingress */

 VRF enslavement is handled in mlxsw_sp_netdevice_vrf_event() */

			/* When the bridge is VLAN-aware, the VNI of the VxLAN

			 * device needs to be mapped to a VLAN, but at this

			 * point no VLANs are configured on the VxLAN device

			/* VLANs were already flushed, which triggered the

			 * necessary cleanup

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 Protects rules list */

 ms */

 Member of acl HT */

 priv has to be always the last item */

 Member of rule HT */

 HT key */

 priv has to be always the last item */

 We hold a reference on ruleset ourselves */

		/* If out_dev is NULL, the caller wants to

		 * set forward to ingress port.

	/* Even though both Linux and Spectrum switches support 16 priorities,

	 * spectrum_qdisc only processes the first eight priomap elements, and

	 * the DCB and PFC features are tied to 8 priorities as well. Therefore

	 * bounce attempts to prioritize packets to higher priorities.

 Offset is u32-aligned. */

 Mask bits are unset for the modified field. */

 Shift required to extract the set value. */

		/* We only need ruleset with chain index 0, the implicit

		 * one, to be directly bound to device. The rest of the

		 * rulesets are bound by "Goto action set".

 Create the delayed work for the rule activity_update */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 devlink resource name */

 devlink resource id */

 Usage bitmap */

 Protects counter pool allocations */

	/* The sub-pools can contain non-integer number of entries

	 * so we must check for overflow

	/* Allocation is based on bank count which should be

	 * specified for each sub pool statically.

 The last bank can't be fully used */

 Check config is valid, no bank over subscription */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 TCP_CONTROL+TCP_ECN */

 RX_ACL_SYSTEM_PORT */

 TCP_CONTROL + TCP_ECN */

/* A block in Spectrum-2 is of the following form:

 *

 * +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

 * |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |35|34|33|32|

 * +-----------------------------------------------------------------------------------------------+

 * |31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|

 * +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

/* The key / mask block layout in Spectrum-2 is of the following form:

 *

 * +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

 * |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                block11_high                   |

 * +-----------------------------------------------------------------------------------------------+

 * |                    block11_low                               |         block10_high           |

 * +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

 * ...

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2018 Mellanox Technologies. All rights reserved */

 Initialize IPv4 ACL group. */

 MC Router groups should be bound before routes are inserted. */

 Initialize IPv6 ACL group */

 MC Router groups should be bound before routes are inserted. */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

/* afa_set_type

 * Type of the record at the end of the action set.

/* afa_set_next_action_set_ptr

 * A pointer to the next action set in the KVD Centralized database.

/* afa_set_goto_g

 * group - When set, the binding is of an ACL group. When cleared,

 * the binding is of an ACL.

 * Must be set to 1 for Spectrum.

 continue go the next binding point */

 jump to the next binding point no return */

 terminate the acl binding */

 afa_set_goto_binding_cmd */

/* afa_set_goto_next_binding

 * ACL/ACL group identifier. If the g bit is set, this field should hold

 * the acl_group_id, else it should hold the acl_id.

/* afa_all_action_type

 * Action Type.

 Encoded set */

/* Set structure holds one action set record. It contains up to three

 * actions (depends on size of particular actions). The set is either

 * put directly to a rule, or it is stored in KVD linear area.

 * To prevent duplicate entries in KVD linear area, a hashtable is

 * used to track sets that were previously inserted and may be shared.

	u8 shared:1, /* Inserted in hashtable (doesn't mean that

		      * kvdl_index is valid).

 Pointer to the next set. */

	struct mlxsw_afa_set *prev; /* Pointer to the previous set,

				     * note that set may have multiple

				     * sets from multiple blocks

				     * pointing at it. This is only

				     * usable until commit.

 Member of policer_list */

 Need to initialize the set to pass by default */

	/* There is a hashtable of sets maintained. If a set with the exact

	 * same encoding exists, we reuse it. Otherwise, the current set

	 * is shared by making it available to others using the hash table.

/* Block structure holds a list of action sets. One action block

 * represents one chain of actions executed upon match of a rule.

 In current set. */

	struct list_head resource_list; /* List of resources held by actions

					 * in this block.

 At least one action set is always present, so just create it here */

	/* In case user instructs to have dummy first set, we leave it

	 * empty here and create another, real, set right away.

	/* Go over all linked sets starting from last

	 * and try to find existing set in the hash table.

	 * In case it is not there, assign a KVD linear index

	 * and insert it.

			/* No rollback is needed since the chain is

			 * in consistent state and mlxsw_afa_block_destroy

			 * will take care of putting it away.

	/* First set is never in KVD linear. So the first set

	 * with valid KVD linear index is always the second one.

/* 20 bits is a maximum that hardware can handle in trap with userdef action

 * and carry along with the trapped packet.

	/* Start cookie indexes with 1. Leave the 0 index unused. Packets

	 * that come from the HW which are not dropped by drop-with-cookie

	 * action are going to pass cookie_index 0 to lookup.

 RCU read lock must be held */

 0 index means no cookie */

	/* Due to a hardware limitation, police action cannot be in the same

	 * action set with MLXSW_AFA_TRAP_CODE or MLXSW_AFA_TRAPWU_CODE

	 * actions. Work around this limitation by creating a new action set

	 * and place the new action there.

		/* The appended action won't fit into the current action set,

		 * so create a new set.

/* VLAN Action

 * -----------

 * VLAN action is used for manipulating VLANs. It can be used to implement QinQ,

 * VLAN translation, change of PCP bits of the VLAN tag, push, pop as swap VLANs

 * and more.

/* afa_vlan_vlan_tag_cmd

 * Tag command: push, pop, nop VLAN header.

 afa_vlan_vid_cmd */

 afa_vlan_vid */

 afa_vlan_ethertype_cmd */

/* afa_vlan_ethertype

 * Index to EtherTypes in Switch VLAN EtherType Register (SVER).

 afa_vlan_pcp_cmd */

 afa_vlan_pcp */

/* Trap Action / Trap With Userdef Action

 * --------------------------------------

 * The Trap action enables trapping / mirroring packets to the CPU

 * as well as discarding packets.

 * The ACL Trap / Discard separates the forward/discard control from CPU

 * trap control. In addition, the Trap / Discard action enables activating

 * SPAN (port mirroring).

 *

 * The Trap with userdef action action has the same functionality as

 * the Trap action with addition of user defined value that can be set

 * and used by higher layer applications.

/* afa_trap_trap_action

 * Trap Action.

/* afa_trap_forward_action

 * Forward Action.

/* afa_trap_trap_id

 * Trap ID to configure.

/* afa_trap_mirror_agent

 * Mirror agent.

/* afa_trap_mirror_enable

 * Mirror enable.

/* user_def_val

 * Value for the SW usage. Can be used to pass information of which

 * rule has caused a trap. This may be overwritten by later traps.

 * This field does a set on the packet's user_def_val only if this

 * is the first trap_id or if the trap_id has replaced the previous

 * packet's trap_id.

/* QoS Action

 * ----------

 * The QOS_ACTION is used for manipulating the QoS attributes of a packet. It

 * can be used to change the DCSP, ECN, Color and Switch Priority of the packet.

 * Note that PCP field can be changed using the VLAN action.

 Do nothing */

 Set ECN to afa_qos_ecn */

/* afa_qos_ecn_cmd

/* afa_qos_ecn

 * ECN value.

 Do nothing */

 Set DSCP 3 LSB bits according to dscp[2:0] */

 Set DSCP 3 MSB bits according to dscp[5:3] */

 Set DSCP 6 bits according to dscp[5:0] */

/* afa_qos_dscp_cmd

 * DSCP command.

/* afa_qos_dscp

 * DSCP value.

 Do nothing */

 Set Switch Priority to afa_qos_switch_prio */

/* afa_qos_switch_prio_cmd

/* afa_qos_switch_prio

 * Switch Priority.

/* afa_qos_dscp_rw

 * DSCP Re-write Enable. Controlling the rewrite_enable for DSCP.

/* Forwarding Action

 * -----------------

 * Forwarding Action can be used to implement Policy Based Switching (PBS)

 * as well as OpenFlow related "Output" action.

 PBS, Policy Based Switching */

 Output, OpenFlow output type */

 afa_forward_type */

/* afa_forward_pbs_ptr

 * A pointer to the PBS entry configured by PPBS register.

 * Reserved when in_port is set.

/* afa_forward_in_port

 * Packet is forwarded back to the ingress port.

/* Policing and Counting Action

 * ----------------------------

 * Policing and Counting action is used for binding policer and counter

 * to ACL rules.

/* afa_polcnt_c_p

 * Counter or policer.

 * Indicates whether the action binds a policer or a counter to the flow.

 * 0: Counter

 * 1: Policer

 No count */

 Count packets and bytes */

 Count only packets */

/* afa_polcnt_counter_set_type

 * Counter set type for flow counters.

/* afa_polcnt_counter_index

 * Counter index for flow counters.

/* afa_polcnt_pid

 * Policer ID.

 * Reserved when c_p = 0

/* Virtual Router and Forwarding Domain Action

 * -------------------------------------------

 * Virtual Switch action is used for manipulate the Virtual Router (VR),

 * MPLS label space and the Forwarding Identifier (FID).

 Do nothing */

 Set the Forwarding Identifier (FID) to fid */

 afa_virfwd_fid_cmd */

/* afa_virfwd_fid

 * The FID value.

/* MC Routing Action

 * -----------------

 * The Multicast router action. Can be used by RMFT_V2 - Router Multicast

 * Forwarding Table Version 2 Register.

 afa_mcrouter_rpf_action */

 afa_mcrouter_expected_irif */

 afa_mcrouter_min_mtu */

/* afa_mcrouter_vrmid

 * Valid RMID: rigr_rmid_index is used as RMID

/* afa_mcrouter_rigr_rmid_index

 * When the vrmid field is set to invalid, the field is used as pointer to

 * Router Interface Group (RIGR) Table in the KVD linear.

 * When the vrmid is set to valid, the field is used as RMID index, ranged

 * from 0 to max_mid - 1. The index is to the Port Group Table.

/* L4 Port Action

 * --------------

 * The L4_PORT_ACTION is used for modifying the sport and dport fields of the packet, e.g. for NAT.

 * If (the L4 is TCP) or if (the L4 is UDP and checksum field!=0) then the L4 checksum is updated.

 configure src_l4_port */

 configure dst_l4_port */

/* afa_l4port_s_d

 * Source or destination.

/* afa_l4port_l4_port

 * Number of port to change to.

/* Mirror Sampler Action

 * ---------------------

 * The SAMPLER_ACTION is used to mirror packets with a probability (sampling).

/* afa_sampler_mirror_agent

 * Mirror (SPAN) agent.

/* afa_sampler_mirror_probability_rate

 * Mirroring probability.

 * Valid values are 1 to 2^24 - 1

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 Set Match RIF index */

 Set Action Forwarding */

 Set Match RIF index */

 Set Match DIP */

 Set Action DMAC */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2018 Mellanox Technologies. All rights reserved */

 Protects Bloom Filter updates. */

/* Bloom filter uses a crc-16 hash over chunks of data which contain 4 key

 * blocks, eRP ID and region ID. In Spectrum-2, region key is combined of up to

 * 12 key blocks, so there can be up to 3 chunks in the Bloom filter key,

 * depending on the actual number of key blocks used in the region.

 * The layout of the Bloom filter key is as follows:

 *

 * +-------------------------+------------------------+------------------------+

 * | Chunk 2 Key blocks 11-8 | Chunk 1 Key blocks 7-4 | Chunk 0 Key blocks 3-0 |

 * +-------------------------+------------------------+------------------------+

/* Each chunk size is 23 bytes. 18 bytes of it contain 4 key blocks, each is

 * 36 bits, 2 bytes which hold eRP ID and region ID, and 3 bytes of zero

 * padding.

 * The layout of each chunk is as follows:

 *

 * +---------+----------------------+-----------------------------------+

 * | 3 bytes |        2 bytes       |              18 bytes             |

 * +---------+-----------+----------+-----------------------------------+

 * | 183:158 |  157:148  | 147:144  |               143:0               |

 * +---------+-----------+----------+-----------------------------------+

 * |    0    | region ID |  eRP ID  |      4 Key blocks (18 Bytes)      |

 * +---------+-----------+----------+-----------------------------------+

/* The offset of the key block within a chunk is 5 bytes as it comes after

 * 3 bytes of zero padding and 16 bits of region ID and eRP ID.

/* Each chunk contains 4 key blocks. Chunk 2 uses key blocks 11-8,

 * and we need to populate it with 4 key blocks copied from the entry encoded

 * key. Since the encoded key contains a padding, key block 11 starts at offset

 * 2. block 7 that is used in chunk 1 starts at offset 20 as 4 key blocks take

 * 18 bytes.

 * This array defines key offsets for easy access when copying key blocks from

 * entry key to Bloom filter chunk.

/* This table is just the CRC of each possible byte. It is

 * computed, Msbit first, for the Bloom filter polynomial

 * which is 0x8529 (1 + x^3 + x^5 + x^8 + x^10 + x^15 and

 * the implicit x^16).

	/* Bloom filter size per erp_table_bank

	 * is 2^ACL_MAX_BF_LOG

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2016-2018 Mellanox Technologies. All rights reserved */

 NULL for underlay RIF */

 Reserved for Spectrum-2. */

 Reserved for Spectrum. */

	/* This is a special case of local delivery, where a packet should be

	 * decapsulated on reception. Note that there is no corresponding ENCAP,

	 * because that's a type of next hop, not of FIB entry. (There can be

	 * several next hops in a REMOTE entry, and some of them may be

	 * encapsulating entries.)

 No need to have priv */

 Valid for decap entries. */

 tree ID */

 virtual router ID */

 kernel fib table id */

 tree 0 is reserved */

 Bind to tree 0 which is default */

 For our purpose, squash main, default and local tables into one */

	/* At this stage we're guaranteed not to have new incoming

	 * FIB notifications and the work queue is free from FIBs

	 * sitting on top of mlxsw netdevs. However, we can still

	 * have other FIBs queued. Flush the queue before flushing

	 * the device's tables. No need for locks, as we're the only

	 * writer.

	/* Not all tunnels require to increase the default pasing depth

	 * (96 bytes).

 Unlink this node from the IPIP entry that it's the decap entry of. */

 Given an IPIP entry, find the corresponding decap route. */

 Given decap parameters, find the corresponding IPIP entry. */

/**

 * __mlxsw_sp_ipip_entry_update_tunnel - Update offload related to IPIP entry.

 * @mlxsw_sp: mlxsw_sp.

 * @ipip_entry: IPIP entry.

 * @recreate_loopback: Recreates the associated loopback RIF.

 * @keep_encap: Updates next hops that use the tunnel netdevice. This is only

 *              relevant when recreate_loopback is true.

 * @update_nexthops: Updates next hops, keeping the current loopback RIF. This

 *                   is only relevant when recreate_loopback is false.

 * @extack: extack.

 *

 * Return: Non-zero value on failure.

	/* RIFs can't be edited, so to update loopback, we need to destroy and

	 * recreate it. That creates a window of opportunity where RALUE and

	 * RATR registers end up referencing a RIF that's already gone. RATRs

	 * are handled in mlxsw_sp_ipip_entry_ol_lb_update(), and to take care

	 * of RALUE, demote the decap route back.

	/* Moving underlay to a different VRF might cause local address

	 * conflict, and the conflicting tunnels need to be demoted.

	/* A down underlay device causes encapsulated packets to not be

	 * forwarded, but decap still works. So refresh next hops without

	 * touching anything else.

		/* A change might make a tunnel eligible for offloading, but

		 * that is currently not implemented. What falls to slow path

		 * stays there.

 A change might make a tunnel not eligible for offloading. */

/* The configuration where several tunnels have the same local address in the

 * same underlay table needs special treatment in the HW. That is currently not

 * implemented in the driver. This function finds and demotes the first tunnel

 * with a given source address, except the one passed in in the argument

 * `except'.

				/* This can't be cached from previous iteration,

				 * because that entry could be gone now.

	/* It is valid to create a tunnel with a local IP and only later

	 * assign this IP address to a local interface

	struct list_head nexthop_list; /* list of nexthops using

					* this neigh entry

 Hardware starts counting at 0, so add 1. */

 Each record consists of several neighbour entries. */

 One record contains one entry. */

 Ensure the RIF we read from the device does not change mid-dump. */

		/* If this neigh have nexthops, make the kernel think this neigh

		 * is active regardless of the traffic.

	/* Iterate over nexthop neighbours, find those who are unresolved and

	 * send arp on them. This solves the chicken-egg problem when

	 * the nexthop wouldn't get offloaded until the neighbor is resolved

	 * but it wouldn't get resolved ever in case traffic is flowing in HW

	 * using different nexthop.

	/* Packets with a link-local destination address are trapped

	 * after LPM lookup and never reach the neighbour table, so

	 * there is no need to program such neighbours to the device.

	/* If these parameters are changed after we release the lock,

	 * then we are guaranteed to receive another event letting us

	 * know about it.

 We don't care about changes in the default table. */

		/* We are in atomic context and can't take RTNL mutex,

		 * so use RCU variant to walk the device chain.

		/* Take a reference to ensure the neighbour won't be

		 * destructed until we drop the reference in delayed

		 * work.

	/* Initialize the polling interval according to the default

	 * table.

 Create the delayed works for the activity_update */

 Nexthop forwards packets to an egress RIF */

 Nexthop discards packets */

 Nexthop traps packets */

 member of neigh entry list */

	struct mlxsw_sp_nexthop_group_info *nhgi; /* pointer back to the group

						   * this nexthop belongs to

	u8 should_offload:1, /* set indicates this nexthop should be written

			      * to the adjacency table.

	   offloaded:1, /* set indicates this nexthop was written to the

			 * adjacency table.

	   update:1; /* set indicates this nexthop should be updated in the

		      * adjacency table (f.e., its MAC changed).

 routes using the group use a gateway */

 member in nh_res_grp_list */

 member in vr_list */

 member in vr_ht */

 list of fib entries that use this group */

	/* When action is discard or trap, the nexthop must be

	 * programmed as an Ethernet nexthop.

 base */

 Inclusive */

 Inclusive */

 Ordered by range start value */

 Ordered by range start value */

	/* Round up the requested group size to the next size supported

	 * by the device and make sure the request can be satisfied.

	/* It is possible the allocation results in more allocated

	 * entries than requested. Try to use as much of them as

	 * possible.

	/* Unfortunately, in IPv6 the route and the nexthop are described by

	 * the same struct, so we need to iterate over all the routes using the

	 * nexthop group and set / clear the offload indication for them.

	/* Do not update the flags if the nexthop group is being destroyed

	 * since:

	 * 1. The nexthop objects is being deleted, in which case the flags are

	 * irrelevant.

	 * 2. The nexthop group was replaced by a newer group, in which case

	 * the flags of the nexthop object were already updated based on the

	 * new group.

	/* Update flags of individual nexthop buckets in case of a resilient

	 * nexthop group.

		/* Nothing was added or removed, so no need to reallocate. Just

		 * update MAC on existing adjacency indexes.

		/* Flags of individual nexthop buckets might need to be

		 * updated.

		/* No neigh of this group is connected so we just set

		 * the trap and let everthing flow through kernel.

 No valid allocation size available. */

		/* We ran out of KVD linear space, just set the

		 * trap and let everything flow through kernel.

		/* The trap was set for fib entries, so we have to call

		 * fib entry update to unset it and use adjacency index.

	/* Take a reference of neigh here ensuring that neigh would

	 * not be destructed before the nexthop entry is finished.

	 * The reference is taken either in neigh_lookup() or

	 * in neigh_create() in case n is not found.

	/* If that is the first nexthop connected to that neigh, add to

	 * nexthop_neighs_list

	/* If that is the last nexthop connected to that neigh, remove from

	 * nexthop_neighs_list

 ms */

	/* Device only nexthops with an IPIP device are programmed as

	 * encapsulating adjacency entries.

 Already validated earlier. */

	/* While nexthops that discard packets do not forward packets

	 * via an egress RIF, they still need to be programmed using a

	 * valid RIF, so use the loopback RIF created during init.

	/* In a resilient nexthop group, all the nexthops must be written to

	 * the adjacency table. Even if they do not have a valid neighbour or

	 * RIF.

	/* Add resilient nexthop groups to a list so that the activity of their

	 * nexthop buckets will be periodically queried and cleared.

		/* Both the old adjacency index and the new one are valid.

		 * Routes are currently using the old one. Tell the device to

		 * replace the old adjacency index with the new one.

		/* The old adjacency index is valid, while the new one is not.

		 * Iterate over all the routes using the group and change them

		 * to trap packets to the CPU.

		/* The old adjacency index is invalid, while the new one is.

		 * Iterate over all the routes using the group and change them

		 * to forward packets using the new valid index.

	/* Make sure the flags are set / cleared based on the new nexthop group

	 * information.

	/* At this point 'nh_grp' is just a shell that is not used by anyone

	 * and its nexthop group info is the old info that was just replaced

	 * with the new one. Remove it.

	/* If the group still has routes using it, then defer the delete

	 * operation until the last route using it is deleted.

	/* Clear the opcode and activity on both the old and new payload as

	 * they are irrelevant for the comparison.

	/* If the contents of the adjacency entry are consistent with the

	 * replacement request, then replacement was successful.

	/* No point in trying an atomic replacement if the idle timer interval

	 * is smaller than the interval in which we query and clear activity.

 The old adjacency entry was not overwritten */

	/* In IPv6 a multipath route is represented using multiple routes, so

	 * we need to set the flags on all of them.

	/* In IPv6 a multipath route is represented using multiple routes, so

	 * we need to set the flags on all of them.

	/* In case the nexthop group adjacency index is valid, use it

	 * with provided ECMP size. Otherwise, setup trap and pass

	 * traffic to kernel.

		/* Packets hitting these routes need to be trapped, but

		 * can do so with a lower priority than packets directed

		 * at the host, so use action type local instead of trap.

	/* Try to construct a new LPM tree from the current prefix usage

	 * minus the unused one. If we fail, continue using the old one.

 Nothing to replace */

	/* Multicast routes aren't supported, so ignore them. Neighbour

	 * Discovery packets are specifically trapped.

 Cloned routes are irrelevant in the forwarding path. */

	/* In case of route replace, replaced route is deleted with

	 * no notification. Take reference to prevent accessing freed

	 * memory.

	/* The route and the nexthop are described by the same struct, so we

	 * need to the update the nexthop offload indication for the new route.

	/* In case this entry is offloaded, then the adjacency index

	 * currently associated with it in the device's table is that

	 * of the old group. Start using the new one instead.

 Nothing to replace */

	/* Multipath routes are first added to the FIB trie and only then

	 * notified. If we vetoed the addition, we will get a delete

	 * notification for a route we do not have. Therefore, do not warn if

	 * route was not found.

	/* If not all the nexthops are deleted, then only reduce the nexthop

	 * group.

		/* If virtual router was only used for IPv4, then it's no

		 * longer used.

 node in fib queue */

	/* Router lock is held here to make sure per-instance

	 * operation context is not used in between FIB4/6 events

	 * processing.

		/* Check if the next entry in the queue exists and it is

		 * of the same type (family and event) as the currect one.

		 * In that case it is permitted to do the bulking

		 * of multiple FIB entries to a single register write.

		/* In case family of this and the previous entry are different, context

		 * reinitialization is going to be needed now, indicate that.

		 * Note that since last_family is initialized to AF_UNSPEC, this is always

		 * going to happen for the first entry processed in the work.

			/* Unlock here as inside FIBMR the lock is taken again

			 * under RTNL. The per-instance operation context

			 * is not used by FIBMR.

		/* Take reference on fib_info to prevent it from being

		 * freed while event is queued. Release it afterwards.

 nothing to do at the moment */

 Rule only affects locally generated traffic */

 Called with rcu_read_lock() */

 Enqueue the event and trigger the work */

	/* We only return the VID for VLAN RIFs. Otherwise we return an

	 * invalid value (0).

		/* macvlans do not have a RIF, but rather piggy back on the

		 * RIF of their lower device.

		/* It is possible we already removed the RIF ourselves

		 * if it was assigned to a netdev that is now a bridge

		 * or LAG slave.

 Otherwise RIF type is derived from the type of the underlying FID. */

 Loopback RIFs are not associated with a FID. */

 FID was already created, just take a reference */

	/* Make sure the bridge driver does not have this MAC pointing at

	 * some other port.

	/* If we do not have a RIF, then we already took care of

	 * removing the macvlan's MAC during RIF deletion.

 NETDEV_UP event is handled by mlxsw_sp_inetaddr_valid_event */

 Called with rcu_read_lock() */

 NETDEV_UP event is handled by mlxsw_sp_inet6addr_valid_event */

		/* The RIF is relevant only to its mr_table instance, as unlike

		 * unicast routing, in multicast routing a RIF cannot be shared

		 * between several multicast routing tables.

	/* If netdev is already associated with a RIF, then we need to

	 * destroy it and create a new one with the new virtual router ID.

	/* We do not create a RIF for a macvlan, but only use it to

	 * direct more MAC addresses to the router.

	/* Flush pending FIB notifications and then flush the device's

	 * table before requesting another dump. The FIB notification

	 * block is unregistered, so no need to take RTNL.

 IPv4 inner */

 IPv6 inner */

 IPv4 Inner */

 IPv6 inner */

 L4 inner */

 Outer */

 Inner */

 Outer */

 Inner */

 Outer */

 Inner */

 Outer */

 Inner */

	/* HW is determining switch priority based on DSCP-bits, but the

	 * kernel is still doing that based on the ToS. Since there's a

	 * mismatch in bits we need to make sure to translate the right

	 * value ToS would observe, skipping the 2 least-significant ECN bits.

	/* Create a generic loopback RIF associated with the main table

	 * (default VRF). Any table can be used, but the main table exists

	 * anyway, so we do not waste resources.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2020 Mellanox Technologies. All rights reserved */

/* Maximum delay buffer needed in case of PAUSE frames. Similar to PFC delay, but is

 * measured in bytes. Assumes 100m cable and does not take into account MTU.

 IEEE 802.3 Counters */

 RFC 2863 Counters */

 RFC 2819 Counters */

 RFC 3635 Counters */

 Extended Counters */

 Discard Counters */

 Per-Priority Counters */

 Per-TC Counters */

 PTP counters */

 Transceiver counters */

				/* If number of lanes was not set by user space,

				 * choose the link mode that supports the width

				 * of the port.

				/* Else if the number of lanes was set, choose

				 * the link mode that its actual width equals to

				 * it.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

	/* unoffload - to be used for a qdisc that stops being offloaded without

	 * being destroyed.

	/* When a PRIO or ETS are added, the invisible FIFOs in their bands are

	 * created first. When notifications for these FIFOs arrive, it is not

	 * known what qdisc their parent handle refers to. It could be a

	 * newly-created PRIO that will replace the currently-offloaded one, or

	 * it could be e.g. a RED that will be attached below it.

	 *

	 * As the notifications start to arrive, use them to note what the

	 * future parent handle is, and keep track of which child FIFOs were

	 * seen. Then when the parent is known, retroactively offload those

	 * FIFOs.

 Protects qdisc state. */

 This is a TC TBF. */

 This is root TBF. */

	/* Check if the Qdisc changed. That includes a situation where an

	 * invisible Qdisc replaces another one, or is being added for the

	 * first time.

		/* In case this location contained a different qdisc of the

		 * same type we can override the old qdisc configuration.

		 * Otherwise, we need to remove the old qdisc before setting the

		 * new one.

 calculate probability in percentage */

	/* RED and TBF are formally classful qdiscs, but all class references,

	 * including X:0, just refer to the same one class.

	/* Configure subgroup shaper, so that both UC and MC traffic is subject

	 * to shaping. That is unlike RED, however UC queue lengths are going to

	 * be different than MC ones due to different pool and quota

	 * configurations, so the configuration is not applicable. For shaper on

	 * the other hand, subjecting the overall stream to the configured

	 * shaper makes sense. Also note that that is what we do for

	 * ieee_setmaxrate().

	/* TBF burst size is configured in bytes. The ASIC burst size value is

	 * ((2 ^ bs) * 512 bits. Convert the TBF bytes to 512-bit units.

 Demand a power of two. */

	/* TBF interface is in bytes/s, whereas Spectrum ASIC is configured in

	 * Kbits/s.

 check_params above was supposed to reject this value. */

			/* This notifications is for a different Qdisc than

			 * previously. Wipe the future cache.

 Handled above. */

/* Linux allows linking of Qdiscs to arbitrary classes (so long as the resulting

 * graph is free of cycles). These operations do not change the parent handle

 * though, which means it can be incomplete (if there is more than one class

 * where the Qdisc in question is grafted) or outright wrong (if the Qdisc was

 * linked to a different class and then removed from the original class).

 *

 * E.g. consider this sequence of operations:

 *

 *  # tc qdisc add dev swp1 root handle 1: prio

 *  # tc qdisc add dev swp1 parent 1:3 handle 13: red limit 1000000 avpkt 10000

 *  RED: set bandwidth to 10Mbit

 *  # tc qdisc link dev swp1 handle 13: parent 1:2

 *

 * At this point, both 1:2 and 1:3 have the same RED Qdisc instance as their

 * child. But RED will still only claim that 1:3 is its parent. If it's removed

 * from that band, its only parent will be 1:2, but it will continue to claim

 * that it is in fact 1:3.

 *

 * The notification for child Qdisc replace (e.g. TC_RED_REPLACE) comes before

 * the notification for parent graft (e.g. TC_PRIO_GRAFT). We take the replace

 * notification to offload the child Qdisc, based on its parent handle, and use

 * the graft operation to validate that the class where the child is actually

 * grafted corresponds to the parent handle. If the two don't match, we

 * unoffload the child.

		/* This is an invisible FIFO replacing the original Qdisc.

		 * Ignore it--the original Qdisc's destroy will follow.

	/* See if the grafted qdisc is already offloaded on any tclass. If so,

	 * unoffload it.

 This should have been validated away. */

	/* It should not currently be possible to replace a matchall rule. So

	 * this must be a new rule.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 Range and flood configuration must match mlxsw_config_profile */

 There are 4K-2 emulated 802.1Q FIDs, starting right after the 802.1D FIDs */

 Range and flood configuration must match mlxsw_config_profile */

 rFIDs are allocated by the device during init */

	/* We only need to transition the port to virtual mode since

	 * {Port, VID} => FID is done by the firmware upon RIF creation.

	/* Track number of FIDs configured on the port with mapping type

	 * PORT_VID_TO_FID, so that we know when to transition the port

	 * back to non-virtual (VLAN) mode.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2015-2018 Mellanox Technologies. All rights reserved */

 ms */

	/* It is possible we already have VXLAN devices enslaved to the bridge.

	 * In which case, we need to replay their configuration as if they were

	 * just now enslaved to the bridge.

	/* It's possible we failed to enslave the port, yet this

	 * operation is executed due to it being deferred.

	/* It's possible we failed to enslave the port, yet this

	 * operation is executed due to it being deferred.

	/* It's possible we failed to enslave the port, yet this

	 * operation is executed due to it being deferred.

 Dis-allow untagged packets */

 No need to continue if only VLAN flags were changed */

	/* The only valid scenario in which a port-vlan already exists, is if

	 * the VLAN flags were changed and the port-vlan is associated with the

	 * correct bridge port

		/* The event is emitted before the changes are actually

		 * applied to the bridge. Therefore schedule the respin

		 * call for later, so that the respin logic sees the

		 * updated bridge state.

 Port is no longer usable as a router interface */

 Make sure untagged frames are allowed to ingress */

	/* If the VLAN is 0, we need to find the VLAN that is configured as

	 * PVID and egress untagged on the bridge port of the VxLAN device.

	 * It is possible no such VLAN exists

 Port is no longer usable as a router interface */

 The only valid VLAN for a VLAN-unaware bridge is 0 */

	/* The EtherType of decapsulated packets is determined at the egress

	 * port to allow 802.1d and 802.1ad bridges with VXLAN devices to

	 * co-exist.

 If the VxLAN device is down, then the FID does not have a VNI */

	/* Drop both the reference we just took during lookup and the reference

	 * the VXLAN device took.

	/* Remove an FDB entry in case we cannot process it. Otherwise the

	 * device will keep sending the same notification over and over again.

		/* These events are only used to potentially update an existing

		 * SPAN mirror.

	/* The device has a single FDB table, whereas Linux has two - one

	 * in the bridge driver and another in the VxLAN driver. We only

	 * program an entry to the device if the MAC points to the VxLAN

	 * device in the bridge's FDB table

 Called under rcu_read_lock() */

 Tunnel devices are not our uppers, so check their master instead */

		/* Take a reference on the device. This can be either

		 * upper device containig mlxsw_sp_port or just a

		 * mlxsw_sp_port

	/* We cannot have the same VLAN as PVID and egress untagged on multiple

	 * VxLAN devices. Note that we get this notification before the VLAN is

	 * actually added to the bridge's database, so it is not possible for

	 * the lookup function to return 'vxlan_dev'

	/* First case: FID is not associated with this VNI, but the new VLAN

	 * is both PVID and egress untagged. Need to enable NVE on the FID, if

	 * it exists

	/* Second case: FID is associated with the VNI and the VLAN associated

	 * with the FID is the same as the notified VLAN. This means the flags

	 * (PVID / egress untagged) were toggled and that NVE should be

	 * disabled on the FID

	/* Third case: A new VLAN was configured on the VxLAN device, but this

	 * VLAN is not PVID, so there is nothing to do.

	/* Fourth case: Thew new VLAN is PVID, which means the VLAN currently

	 * mapped to the VNI should be unmapped

	/* Fifth case: The new VLAN is also egress untagged, which means the

	 * VLAN needs to be mapped to the VNI

 A different VLAN than the one mapped to the VNI is deleted */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

	/* The first action set of a TCAM entry is stored directly in TCAM,

	 * not KVD linear area.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

/* Copyright (c) 2016-2018 Mellanox Technologies. All rights reserved

 * Copyright (c) 2016 Ivan Vecera <cera@cera.cz>

 ms */

 ms */

 75C */

 85C */

 105C */

 5C */

 External cooling devices, allowed for binding to mlxsw thermal zones. */

 In range - 0-40% PWM */

 In range - 40-100% PWM */

 Warning */

 Make sure all trips are writable */

 Module or gearbox number */

 Allow mlxsw thermal zone binding to an external cooling device */

	/* Do not try to query temperature thresholds directly from the module's

	 * EEPROM if we got valid thresholds from MTMP.

	/* According to the system thermal requirements, the thermal zones are

	 * defined with three trip points. The critical and emergency

	 * temperature thresholds, provided by QSFP module are set as "active"

	 * and "hot" trip points, "normal" trip point is derived from "active"

	 * by subtracting double hysteresis value.

	/* Calculate thermal zone score, if temperature is above the hot

	 * threshold score is set to MLXSW_THERMAL_TEMP_SCORE_MAX.

 If the cooling device is one of ours bind it */

 If the cooling device is our one unbind it */

 If the cooling device is one of ours bind it */

 If the cooling device is one of ours unbind it */

 Read module temperature and thresholds. */

		/* Set temperature and thresholds to zero to avoid passing

		 * uninitialized data back to the caller.

 Read module temperature and thresholds. */

 Update trip points. */

 Normalize the state to the valid speed range. */

 Skip if parent is already set (case of port split). */

 Initialize all trip point. */

 Read module temperature and thresholds. */

 Update trip point according to the module data. */

 We need to query the register to preserve maximum */

 set the minimal RPMs to 0 */

 Initialize cooling levels per PWM state. */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 Nothing to do */

 Count action is inserted first */

			/* Forbid block with this rulei to be bound

			 * to ingress/egress in future. Ingress rule is

			 * a blocker for egress and vice versa.

			/* Forbid block with this rulei to be bound

			 * to egress in future.

			/* The kernel might adjust the requested burst size so

			 * that it is not exactly a power of two. Re-adjust it

			 * here since the hardware only supports burst sizes

			 * that are a power of two.

		/* Forbid block with this rulei to be bound

		 * to egress in future.

 No matchall filters installed on this chain. */

 keep the reference to the ruleset */

 put the reference to the ruleset kept in create */

		/* In case there are no flower rules, the caller

		 * receives -ENOENT to indicate there is no need

		 * to check the priorities.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2020 Mellanox Technologies. All rights reserved */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2015-2018 Mellanox Technologies. All rights reserved */

 for type MLXSW_PCI_QUEUE_TYPE_SDQ */

 for type MLXSW_PCI_QUEUE_TYPE_RDQ */

 for type MLXSW_PCI_QUEUE_TYPE_CQ */

 for type MLXSW_PCI_QUEUE_TYPE_EQ */

 unused */

 unused */

 for type MLXSW_PCI_QUEUE_TYPE_CQ */

 for type MLXSW_PCI_QUEUE_TYPE_EQ */

 pointer to actual dma mapped element mem chunk */

 for queue accesses */

 number of elements in queue */

 queue number */

 size of one element */

 queue processing tasklet */

 number of queues in group */

 Lock access to command registers */

 Maximal supported CQE version */

 Number of CQs used for SDQs */

 ensure all writes are done before we ring a bell */

 ensure all writes are done before we ring a bell */

 ensure all writes are done before we ring a bell */

 Set CQ of same number of this SDQ. */

 8 pages */

	/* Set CQ of same number of this RDQ with base

	 * above SDQ count as the lower ones are assigned to SDQs.

 8 pages */

 Everything is set up, ring doorbell to pass elem to HW */

 For SDQ it is pointless to use CQEv2, so use CQEv1 instead */

 Everything is set up, ring doorbell to pass elem to HW */

 make sure we read owned bit before the rest of elem */

 MSI-X used */

 armed */

 make sure we read owned bit before the rest of elem */

		/* Command interface completion events are always received on

		 * queue MLXSW_PCI_EQ_ASYNC_NUM (EQ0) and completion events

		 * are mapped to queue MLXSW_PCI_EQ_COMP_NUM (EQ1).

	/* Initialize dma mapped elements info elem_info for

	 * future easy access.

 We have to poll in command interface until queues are initialized */

 1 page */

 We must wait for the HW to become responsive. */

 queue is full */

 always report completion */

 Set unused sq entries byte count to zero. */

 Everything is set up, ring producer doorbell to get HW going */

 all needs to be written before we write control register */

		/* Some commands don't use output param as address to mailbox

		 * but they store output directly into registers. In that case,

		 * copy registers into mbox buffer.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2015-2018 Mellanox Technologies. All rights reserved */

 Update status and temperature cache. */

		/* Untrusted cable is connected. Reading temperature from its

		 * sensor is faulty.

	/* Add extra attributes for module temperature. Sensor index is

	 * assigned to sensor_count value, while all indexed before

	 * sensor_count are already utilized by the sensors connected through

	 * mtmp register by mlxsw_hwmon_temp_init().

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 Protects table_list */

 ms */

 priv has to be always the last item */

	/* A list of route_vif_entry structs that point to routes that the VIF

	 * instance is used as one of the egress VIFs

	/* A list of route_vif_entry structs that point to routes that the VIF

	 * instance is used as an ingress VIF

 Protocol specific operations for a VIF */

 Protects route_list */

 catchall_route_priv has to be always the last item */

 A list of route_vif_entry structs that point to the egress VIFs */

 A route_vif_entry struct that point to the ingress VIF */

 If the ingress port is not regular and resolved, trap the route */

	/* The kernel does not match a (*,G) route that the ingress interface is

	 * not one of the egress interfaces, so trap these kind of routes.

 If the route has no valid eVIFs, trap it. */

	/* If one of the eVIFs has no RIF, trap-and-forward the route as there

	 * is some more routing to do in software too.

 Allocate and init a new route and fill it with parameters */

 Find min_mtu and link iVIF and eVIFs */

 Create a new route */

 Find any route with a matching key */

		/* On replace case, make the route point to the new route_priv.

		/* On non replace case, if another route with the same key was

		 * found, abort, as duplicate routes are used for proxy routes.

 Write the route to the hardware */

 Put it in the table data-structures */

 Destroy the original route */

 Should be called after the VIF struct is updated */

 rve->mr_vif->rif is guaranteed to be valid at this stage */

		/* No need to rollback here because the iRIF change only takes

		 * place after the action has been updated.

 Should be called after the RIF struct is updated */

 Add the eRIF */

	/* Update the route action, as the new eVIF can be a tunnel or a pimreg

	 * device which will require updating the action.

 Update the minimum MTU */

 Should be called before the RIF struct is updated */

 If the unresolved RIF was not valid, no need to delete it */

	/* Update the route action: if there is only one valid eVIF in the

	 * route, set the action to trap as the VIF deletion will lead to zero

	 * valid eVIFs. On any other case, use the mlxsw_sp_mr_route_action to

	 * determine the route action.

 Delete the erif from the route */

 Update the VIF */

 Update all routes where this VIF is used as an unresolved iRIF */

 Update all routes where this VIF is used as an unresolved eRIF */

 Update all routes where this VIF is used as an unresolved eRIF */

 Update all routes where this VIF is used as an unresolved iRIF */

 Update the VIF */

 Search for a VIF that use that RIF */

 Update all the routes that uses that VIF as eVIF */

 Protocol specific functions */

	/* If the route is a (*,*) route, abort, as these kind of routes are

	 * used for proxy routes.

	/* If the route is a (*,*) route, abort, as these kind of routes are

	 * used for proxy routes.

 Create the delayed work for counter updates */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2015-2018 Mellanox Technologies. All rights reserved */

	/* Ports with eight lanes use two headroom buffers between which the

	 * configured headroom size is split. Therefore, multiply the calculated

	 * headroom size by two.

	/* In the worst case scenario the delay will be made up of packets that

	 * are all of size CELL_SIZE + 1, which means each packet will require

	 * almost twice its true size when buffered in the switch. We therefore

	 * multiply this value by the "cell factor", which is close to 2.

	 *

	 * Another MTU is added in case the transmitting host already started

	 * transmitting a maximum length frame when the PFC packet was received.

 Internal buffer. */

 PG buffers. */

			/* Do not allow going below the minimum size, even if

			 * the user requested it.

	/* Port buffers need to be configured in three steps. First, all buffers

	 * with non-zero size are configured. Then, prio-to-buffer map is

	 * updated, allowing traffic to flow to the now non-zero buffers.

	 * Finally, zero-sized buffers are configured, because now no traffic

	 * should be directed to them anymore. This way, in a non-congested

	 * system, no packet drops are introduced by the reconfiguration.

 Buffer 9 is used for control traffic. */

 Order according to mlxsw_sp1_sb_pool_dess */

 Order according to mlxsw_sp2_sb_pool_dess */

 Round down, unlike mlxsw_sp_bytes_cells(). */

	/* Calculate how much space to give to the "REST" pools in either

	 * direction.

 dummy, this PG does not exist */

 dummy, this PG does not exist */

 PG number 8 does not exist, skip it */

 Order according to mlxsw_sp1_sb_pool_dess */

 50% occupancy */

 Order according to mlxsw_sp2_sb_pool_dess */

 50% occupancy */

 Order according to mlxsw_sp*_sb_pool_dess */

		/* All pools used by sb_mm's are initialized using dynamic

		 * thresholds, therefore 'max_buff' isn't specified in cells.

 Round down, because this limit must not be overstepped. */

 3->1, 16->14 */

 Ingress quotas are not supported for the CPU port */

 Ingress quotas are not supported for the CPU port */

 Ingress quotas are not supported for the CPU port */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2018 Mellanox Technologies. All rights reserved */

 gen_pool_alloc() returns 0 when allocation fails, so use an offset */

 guards objagg manipulation */

 We only allow allocations of entire rows */

	/* It is possible we do not have a master RP when we disable the

	 * table when there are no rules in the A-TCAM and the last C-TCAM

	 * rule is deleted

 Initially, allocate a single eRP row. Expand later as needed */

	/* Transition the sole RP currently configured (the master RP)

	 * to the eRP table

	/* Make sure the master RP is using a valid index, as

	 * only a single eRP row is currently allocated.

	/* Update Bloom filter before enabling eRP table, as rules

	 * on the master RP were not set to Bloom filter up to this

	 * point.

 No need to re-enable lookup in the C-TCAM */

 Only disable C-TCAM lookup when last C-TCAM eRP is deleted */

	/* If there are C-TCAM eRP or deltas in use we need to transition

	 * the region to use eRP table, if it is not already done

 When C-TCAM or deltas are used, the eRP table must be used */

	/* If there are no C-TCAM eRP or deltas in use, the state we

	 * transition to depends on the number of A-TCAM eRPs currently

	 * in use.

		/* Keep using the eRP table, but correctly set the

		 * operations pointer so that when an A-TCAM eRP is

		 * deleted we will transition to use the master mask

		/* We only kept the eRP table because we had C-TCAM

		 * eRPs in use. Now that the last C-TCAM eRP is gone we

		 * can stop using the table and transition to use the

		 * master mask

		/* There are no more eRPs of any kind used by the region

		 * so free its eRP table and transition to initial state

 Expand the eRP table for the new eRP, if needed */

 Transition to use eRP table instead of master mask */

 Transition to use master mask instead of eRP table */

 The difference between 2 masks can be up to 8 consecutive bits. */

		/* The masks are the same, this can happen in case eRPs with

		 * the same mask were created in both A-TCAM and C-TCAM.

		 * The only possible condition under which this can happen

		 * is identical rule insertion. Delta is not possible here.

	/* For hints purposes, two objects are considered equal

	 * in case the masks are the same. Does not matter what

	 * the "ctcam" value is.

 Very basic criterion for now. */

 Initialize the region's master mask to all zeroes */

 Initialize the region to not use the eRP table */

 Different regions require masks of different sizes */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2018 Mellanox Technologies. All rights reserved */

 Entries */

	/* Find partition with smallest allocation size satisfying the

	 * requested size.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2018 Mellanox Technologies. All rights reserved */

	/* Create flex action block, set default action (continue)

	 * but don't commit. We need just the current set encoding

	 * to be written using PEFA register to all indexes for all regions.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2016-2018 Mellanox Technologies. All rights reserved */

 Egress configuration. */

 Ingress configuration. */

 Warn about any DSCP APP entries with the same PID. */

 Take the highest configured priority. */

		/* A failure to set trust DSCP means that the QPDPM and QPDSM

		 * maps installed above are not in effect. And since we are here

		 * attempting to set trust DSCP, we couldn't have attempted to

		 * switch trust to PCP. Thus no cleanup is necessary.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2020 Mellanox Technologies. All rights reserved */

 Currently unused. */

 Stores items about to be flushed from cache */

 Member of router_xm->ltable_ht */

 Parent node */

 Store for processing from commit op */

	unsigned int trans_offset; /* Offset of the current command within one

				    * transaction of XMDR register.

	unsigned int trans_item_len; /* The current command length. This is used

				      * to advance 'trans_offset' when the next

				      * command is appended.

	/* Currently the M-index is set to linear mode. That means it is defined

	 * as 16 MSB of IP address.

 currently unused */

 Member of router_xm->flush_ht */

 By how many flush calls this was reused. */

 usecs */

 Leaving flush-all mode. */

		/* In case the flush prefix length is bigger than M-value,

		 * it makes no sense to flush M entries. So just flush

		 * the ML entries.

	/* In case there is the same flushing work pending, check

	 * if we can consolidate with it. We can do it up to MAX_WAIT.

	 * Cancel the delayed work. If the work was still pending.

	/* Check if the queued number of flushes reached critical amount after

	 * which it is better to just flush the whole cache.

 Entering flush-all mode. */

	/* Take a reference so the object is not freed before possible

	 * delayed work cancel could be done.

		 /* Original work was within wait period and was canceled.

		  * That means that the reference is still held and the

		  * flush_node_put() call above did not free the flush_node.

		  * Reschedule it with fresh delay.

 The L-value is bigger then the one currently set, update. */

		/* The L value for prefix/M is increased.

		 * Therefore, all entries in M and ML caches matching

		 * {prefix/M, proto, VR} need to be flushed. Set the flush

		 * prefix length to M to achieve that.

 Find the biggest L-value left out there. */

		/* The L value for prefix/M is decreased.

		 * Therefore, all entries in M and ML caches matching

		 * {prefix/M, proto, VR} need to be flushed. Set the flush

		 * prefix length to M to achieve that.

	/* Check if bulking is possible and there is still room for another

	 * FIB entry record. The size of 'trans_item_len' is either size of IPv4

	 * command or size of IPv6 command. Not possible to mix those in a

	 * single XMDR write.

		/* The L-table is updated inside. It has to be done before

		 * the prefix is inserted.

		/* The L-table is updated inside. It has to be done after

		 * the prefix was removed.

	/* At the very end, do the XLT cache flushing to evict stale

	 * M and ML cache entries after prefixes were inserted/removed.

 Next pack call is going to do reinitialization */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

/* For the purpose of the driver, define an internal storage scratchpad

 * that will be used to store key/mask values. For each defined element type

 * define an internal storage geometry.

 *

 * When adding new elements, MLXSW_AFK_ELEMENT_STORAGE_SIZE must be increased

 * accordingly.

	int element_to_block[MLXSW_AFK_ELEMENT_MAX]; /* index is element, value

						      * is index inside "blocks"

 Should never happen to return this */

	/* Since the same elements could be present in multiple blocks,

	 * we must find out optimal block list in order to make the

	 * block count as low as possible.

	 *

	 * First, we count hits. We go over all available blocks and count

	 * how many of requested elements are covered by each.

	 *

	 * Then in loop, we find block with most hits and add it to

	 * output key_info. Then we have to subtract this block hits so

	 * the next iteration will find most suitable block for

	 * the rest of requested elements.

 If mask is zero */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2018 Mellanox Technologies. All rights reserved */

 Protects 'module_info'. */

	/* MCIA register accepts buffer size <= 48. Page of size 128 should be

	 * read by chunks of size 48, 48, 32. Align the size of the last chunk

	 * to avoid reading after the end of the page.

 Cross pages read, read until offset 256 in low page */

			/* When reading upper pages 1, 2 and 3 the offset

			 * starts at 128. Please refer to "QSFP+ Memory Map"

			 * figure in SFF-8436 specification and to "CMIS Module

			 * Memory Map" figure in CMIS specification for

			 * graphical depiction.

			/* When reading upper pages 1, 2 and 3 the offset

			 * starts at 0 and I2C high address is used. Please refer

			 * refer to "Memory Organization" figure in SFF-8472

			 * specification for graphical depiction.

	/* Validate if threshold reading is available through MTMP register,

	 * otherwise fallback to read through MCIA.

	/* Read Free Side Device Temperature Thresholds from page 03h

	 * (MSB at lower byte address).

	 * Bytes:

	 * 128-129 - Temp High Alarm (SFP_TEMP_HIGH_ALARM);

	 * 130-131 - Temp Low Alarm (SFP_TEMP_LOW_ALARM);

	 * 132-133 - Temp High Warning (SFP_TEMP_HIGH_WARN);

	 * 134-135 - Temp Low Warning (SFP_TEMP_LOW_WARN);

 Validate module identifier value. */

		/* For QSFP/CMIS module-defined thresholds are located in page

		 * 02h, otherwise in page 03h.

 Verify if transceiver provides diagnostic monitoring page */

		/* Use SFF_8636 as base type. ethtool should recognize specific

		 * type through the identifier value.

		/* Verify if module EEPROM is a flat memory. In case of flat

		 * memory only page 00h (0-255 bytes) can be read. Otherwise

		 * upper pages 01h and 02h can also be read. Upper pages 10h

		 * and 11h are currently not supported by the driver.

 Validate module identifier value. */

 Offset cannot be larger than 2 * ETH_MODULE_EEPROM_PAGE_LEN */

 Mask all the bits except low power mode. */

 If any ports are up, we are already in high power mode. */

		/* In case it is not possible to query the module's threshold,

		 * use the default value.

			/* mlxsw_env_module_temp_thresholds_get() multiplies

			 * Celsius degrees by 1000 whereas MTMP expects

			 * temperature in 0.125 Celsius degrees units.

			 * Convert threshold_hi to correct units.

		/* 64-127 of sensor_index are mapped to the port modules

		 * sequentially (module 0 is mapped to sensor_index 64,

		 * module 1 to sensor_index 65 and so on)

			/* Current state is "warning" and MTWE still reports

			 * warning OR current state in "no warning" and MTWE

			 * does not report warning.

			/* MTWE reports "no warning", turn is_overheat off.

			/* Current state is "no warning" and MTWE reports

			 * "warning", increase the counter and turn is_overheat

			 * on.

	/* Do not disable events on modules without sensors or faulty sensors

	 * because FW returns errors.

	/* Transition to high power mode following first port using the module

	 * being put administratively up.

	/* Transition to low power mode following last port using the module

	 * being put administratively down.

	/* Firmware defaults to high power mode policy where modules are

	 * transitioned to high power mode following plug-in.

 Make sure there is no more event work scheduled. */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2018 Mellanox Technologies. All rights reserved */

	/* For each defined partititon we need to know how many

	 * usage bits we need and how many indexes there are

	 * represented by a single bit. This could be got from FW

	 * querying appropriate resources. So have the resource

	 * ids for for this purpose in partition definition.

 Usage bits */

 We need to ask FW to delete previously used KVD linear index */

	/* For some partitions, one usage bit represents a group of indexes.

	 * That's why we compute the number of indexes per usage bit here,

	 * according to queried resources.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 Only the first action set belongs here, the rest is in KVD */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2016-2018 Mellanox Technologies. All rights reserved */

 Protects kvdl allocations */

 priv has to be always the last item */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2015-2018 Mellanox Technologies. All rights reserved */

 protects trans_list writes */

 lag_id+port_index to local_port mapping */

 driver_priv has to be always the last item */

 Switch ports are numbered from 1 to queried value */

/******************

 * EMAD processing

/* emad_eth_hdr_dmac

 * Destination MAC in EMAD's Ethernet header.

 * Must be set to 01:02:c9:00:00:01

/* emad_eth_hdr_smac

 * Source MAC in EMAD's Ethernet header.

 * Must be set to 00:02:c9:01:02:03

/* emad_eth_hdr_ethertype

 * Ethertype in EMAD's Ethernet header.

 * Must be set to 0x8932

/* emad_eth_hdr_mlx_proto

 * Mellanox protocol.

 * Must be set to 0x0.

/* emad_eth_hdr_ver

 * Mellanox protocol version.

 * Must be set to 0x0.

/* emad_op_tlv_type

 * Type of the TLV.

 * Must be set to 0x1 (operation TLV).

/* emad_op_tlv_len

 * Length of the operation TLV in u32.

 * Must be set to 0x4.

/* emad_op_tlv_dr

 * Direct route bit. Setting to 1 indicates the EMAD is a direct route

 * EMAD. DR TLV must follow.

 *

 * Note: Currently not supported and must not be set.

/* emad_op_tlv_status

 * Returned status in case of EMAD response. Must be set to 0 in case

 * of EMAD request.

 * 0x0 - success

 * 0x1 - device is busy. Requester should retry

 * 0x2 - Mellanox protocol version not supported

 * 0x3 - unknown TLV

 * 0x4 - register not supported

 * 0x5 - operation class not supported

 * 0x6 - EMAD method not supported

 * 0x7 - bad parameter (e.g. port out of range)

 * 0x8 - resource not available

 * 0x9 - message receipt acknowledgment. Requester should retry

 * 0x70 - internal error

/* emad_op_tlv_register_id

 * Register ID of register within register TLV.

/* emad_op_tlv_r

 * Response bit. Setting to 1 indicates Response, otherwise request.

/* emad_op_tlv_method

 * EMAD method type.

 * 0x1 - query

 * 0x2 - write

 * 0x3 - send (currently not supported)

 * 0x4 - event

/* emad_op_tlv_class

 * EMAD operation class. Must be set to 0x1 (REG_ACCESS).

/* emad_op_tlv_tid

 * EMAD transaction ID. Used for pairing request and response EMADs.

/* emad_string_tlv_type

 * Type of the TLV.

 * Must be set to 0x2 (string TLV).

/* emad_string_tlv_len

 * Length of the string TLV in u32.

/* emad_string_tlv_string

 * String provided by the device's firmware in case of erroneous register access

/* emad_reg_tlv_type

 * Type of the TLV.

 * Must be set to 0x3 (register TLV).

/* emad_reg_tlv_len

 * Length of the operation TLV in u32.

/* emad_end_tlv_type

 * Type of the TLV.

 * Must be set to 0x0 (end TLV).

/* emad_end_tlv_len

 * Length of the end TLV in u32.

 * Must be set to 1.

 If string TLV is present, it must come after the operation TLV. */

 called with rcu read lock held */

	/* Set the upper 32 bits of the transaction ID field to a random

	 * number. This allows us to discard EMADs addressed to other

	 * devices.

	/* Since this can be changed during emad_reg_access, read it once and

	 * use the value all the way.

/*****************

 * Core functions

 Don't check if driver does not require it */

 Don't check if devlink 'fw_load_policy' param is 'flash' */

 Validate driver & FW are compatible */

	/* On FW flash success, tell the caller FW reset is needed

	 * if current FW supports it.

 User-triggered dumps are not possible */

 Read the register first to make sure no other bits are changed. */

 Read the register first to make sure no other bits are changed. */

 Make sure there is no more event work scheduled */

	/* -EAGAIN is returned in case the FW was updated. FW needs

	 * a reset, so lets try to call __mlxsw_core_bus_device_register()

	 * again.

			/* Only the parts that were not de-initialized in the

			 * failed reload attempt need to be de-initialized.

	/* No reason to save item if we did not manage to register an RX

	 * listener for it.

 Not supported for event listener */

 first error to be returned */

	/* There is a special treatment needed for MRSR (reset) register.

	 * The command interface will return error after the command

	 * is executed, so tell the lower layer to expect it

	 * and cope accordingly.

	/* During initialization EMAD interface is not available to us,

	 * so we default to command interface. We switch to EMAD interface

	 * after setting the appropriate traps.

		/* Upper layer does not care if the skb came from LAG or not,

		 * so just get the local_port for the lag port and push it up.

	/* If after MLXSW_RESOURCES_QUERY_MAX_QUERIES we still didn't get

	 * MLXSW_RESOURCES_TABLE_END_ID, something went bad in the FW.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2018 Mellanox Technologies. All rights reserved */

 MSB blocks */

 For now, just assume that every region has 12 key blocks */

	/* We already know the blocks count can not exceed the maximum

	 * blocks count.

	/* Compute all needed delta information and clear the delta bits

	 * from the encrypted key.

	/* Add rule to the list of A-TCAM rules, assuming this

	 * rule is intended to A-TCAM. In case this rule does

	 * not fit into A-TCAM it will be removed from the list.

	/* We can't insert identical rules into the A-TCAM, so fail and

	 * let the rule spill into C-TCAM

	/* Bloom filter must be updated here, before inserting the rule into

	 * the A-TCAM.

	/* It is possible we failed to add the rule to the A-TCAM due to

	 * exceeded number of masks. Try to spill into C-TCAM.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2020 Mellanox Technologies. All rights reserved */

 Inclusive */

 Exclusive */

 Protects policer_idr */

	/* Provided burst size is in bytes. The ASIC burst size value is

	 * (2 ^ bs) * 512 bits. Convert the provided size to 512-bit units.

	/* CPU policers are allocated from the first N policers in the global

	 * range, so skip them.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2020 Mellanox Technologies. All rights reserved */

 No flower filters are installed in specified chain. */

 sample RX packets may be in-flight */

		/* In case there are no matchall rules, the caller

		 * receives -ENOENT to indicate there is no need

		 * to check the priorities.

 Mirror to CPU. */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2018 Mellanox Technologies. All rights reserved */

	/* If this is a new record and not the first one, then we need to

	 * update the next pointer of the previous entry

	/* When the record continues to exist we only need to invalidate

	 * the requested entry

	/* If the record needs to be deleted, but it is not the first,

	 * then we need to make sure that the previous record no longer

	 * points to it. Remove deleted record from the list to reflect

	 * that and then re-add it at the end, so that it could be

	 * properly removed by the record destruction code

	/* If the first record needs to be deleted, but the list is not

	 * singular, then the second record needs to be written in the

	 * first record's address, as this address is stored as a property

	 * of the FID

	/* This is the last case where the last remaining record needs to

	 * be deleted. Simply delete the entry

	/* The address of the first record in the list is a property of

	 * the FID and we never change it. It only needs to be set when

	 * a new list is created

	/* The address of the first record needs to be invalidated only when

	 * the last record is about to be removed

 Iterate over inner ECN values */

 Iterate over inner ECN values */

 Iterate over outer ECN values */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2019 Mellanox Technologies. All rights reserved */

 6.4nSec */

 ms */

/* How long, approximately, should the unmatched entries stay in the hash table

 * before they are collected. Should be evenly divisible by the GC interval.

 ms */

 protects the HT */

 protect this structure */

 wrap around */

	/* Calculate period in seconds to call the overflow watchdog - to make

	 * sure counter is checked at least twice every wrap around.

	 * The period is calculated as the minimum between max HW cycles count

	 * (The clock source mask) and max amount of cycles that can be

	 * multiplied by clock multiplier where the result doesn't exceed

	 * 64bits.

/* Returns NULL on successful insertion, a pointer on conflict, or an ERR_PTR on

 * error.

/* This function is called in the following scenarios:

 *

 * 1) When a packet is matched with its timestamp.

 * 2) In several situation when it is necessary to immediately pass on

 *    an SKB without a timestamp.

 * 3) From GC indirectly through mlxsw_sp1_ptp_unmatched_finish().

 *    This case is similar to 2) above.

	/* Between capturing the packet and finishing it, there is a window of

	 * opportunity for the originating port to go away (e.g. due to a

	 * split). Also make sure the SKB device reference is still valid.

 skb_tstamp_tx() allows hwtstamps to be NULL. */

	/* This is invoked at a point where the ports are gone already. Nothing

	 * to do with whatever is left in the HT but to free it.

		/* Either there is no entry to match, or one that is there is

		 * incompatible.

	/* For packets whose timestamping was not enabled on this port, don't

	 * bother trying to match the timestamp.

	/* For message types whose timestamping was not enabled on this port,

	 * don't bother with the timestamp.

	/* If an unmatched entry has an SKB, it has to be handed over to the

	 * networking stack. This is usually done from a trap handler, which is

	 * invoked in a softirq context. Here we are going to do it in process

	 * context. If that were to be interrupted by a softirq, it could cause

	 * a deadlock when an attempt is made to take an already-taken lock

	 * somewhere along the sending path. Disable softirqs to prevent this.

 The packet was matched with timestamp during the walk. */

	/* mlxsw_sp1_ptp_unmatched_finish() invokes netif_receive_skb(). While

	 * the comment at that function states that it can only be called in

	 * soft IRQ context, this pattern of local_bh_disable() +

	 * netif_receive_skb(), in process context, is seen elsewhere in the

	 * kernel, notably in pktgen.

 Delive these message types as PTP0. */

 Everything else is PTP1. */

	/* MTPPPC configures timestamping globally, not per port. Find the

	 * configuration that contains all configured timestamping requests.

 Notify the ioctl caller what we are actually timestamping. */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

 ms */

 ms */

 number of entries */

 Use 1:1 mapping between ACL region and TCAM region */

 Priority range is 1..cap_kvd_size-1. */

 Unlike in TC, in HW, higher number means higher priority. */

 guards region list updates */

	struct mlxsw_sp_acl_tcam_vchunk *current_vchunk; /* vchunk being

							  * currently migrated.

	struct mlxsw_sp_acl_tcam_ventry *start_ventry; /* ventry to start

							* migration from in

							* a vchunk being

							* currently migrated.

	struct mlxsw_sp_acl_tcam_ventry *stop_ventry; /* ventry to stop

						       * migration at

						       * a vchunk being

						       * currently migrated.

	struct mutex lock; /* Protects consistency of region, region2 pointers

			    * and vchunk_list.

 Used during migration */

 Member of a TCAM group */

 Member of a TCAM */

 List of vchunks under this vregion */

 priv has to be always the last item */

 Used during migration */

 Member of a TCAM vregion */

 Member of a chunk HT */

 Priority within the vregion and group */

 priv has to be always the last item */

 Member of a TCAM vchunk */

 Check if the next entry in the list has the same vregion. */

 As a priority of a vregion, return priority of the first vchunk */

		/* If the next region is defined, place the new one

		 * before it. The next one is a sibling.

 Position the region inside the list according to priority */

 Position the vregion inside the list according to priority */

		/* First, check if the requested priority does not rather belong

		 * under some of the next vregions.

 not last */

		/* If requested element usage would not fit and the priority

		 * is lower than the currently inspected vregion we cannot

		 * use this region, so return NULL to indicate new vregion has

		 * to be created.

		/* If requested element usage would not fit and the priority

		 * is higher than the currently inspected vregion we cannot

		 * use this vregion. There is still some hope that the next

		 * vregion would be the fit. So let it be processed and

		 * eventually break at the check right above this.

		/* Indicate if the vregion needs to be split in order to add

		 * the requested priority. Split is needed when requested

		 * element usage won't fit into the found vregion.

 New vregion has to be created. */

	/* In case the template is set, we don't have to look up the pattern

	 * and just use the template.

		/* Rehash gone out of credits so it was interrupted.

		 * Schedule the work as soon as possible to continue.

	/* If a rule was added or deleted from vchunk which is currently

	 * under rehash migration, we have to reset the ventry pointers

	 * to make sure all rules are properly migrated.

	/* If a chunk was added or deleted from vregion we have to reset

	 * the current chunk pointer to make sure all chunks

	 * are properly migrated.

 Create the delayed work for vregion periodic rehash */

			/* According to priority, new vchunk should belong to

			 * an existing vregion. However, this vchunk needs

			 * elements that vregion does not contain. We need

			 * to split the existing vregion into two and create

			 * a new vregion for the new vchunk in between.

			 * This is not supported now.

 Position the vchunk inside the list according to priority */

 First check if the entry is not already where we want it to be. */

 The chunk is already as it should be, nothing to do. */

	/* If the migration got interrupted, we have the ventry to start from

	 * stored in context.

		/* During rollback, once we reach the ventry that failed

		 * to migrate, we are done.

				/* Save the ventry which we ended with and try

				 * to continue later on.

			/* Swap the chunk and chunk2 pointers so the follow-up

			 * rollback call will see the original chunk pointer

			 * in vchunk->chunk.

			/* The rollback has to be done from beginning of the

			 * chunk, that is why we have to null the start_ventry.

			 * However, we know where to stop the rollback,

			 * at the current ventry.

			/* We are out of credits, the rest of the ventries

			 * will be migrated later. Save the ventry

			 * which we ended with.

	/* If the migration got interrupted, we have the vchunk

	 * we are working on stored in context.

		/* In case migration was not successful, we need to swap

		 * so the original region pointer is assigned again

		 * to vregion->region.

 Let the rollback to be continued later on. */

	/* vregion->region contains the pointer to the new region

	 * we are going to migrate to.

	/* Check if the previous rehash work was interrupted

	 * which means we have to continue it now.

	 * If not, start a new rehash.

	/* For most of the TCAM clients it would make sense to take a tcam chunk

	 * only when the first rule is written. This is not the case for

	 * multicast router as it is required to bind the multicast router to a

	 * specific ACL Group ID which must exist in HW before multicast router

	 * is initialized.

 Binding is done when initializing multicast router */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2016-2019 Mellanox Technologies. All rights reserved */

 This calls ndo_stop */

 Fill out to local port mapping array */

 Skip, if port belongs to the cluster */

 Invalidate the entries of module to local port mapping array */

 Fill out module to local port mapping array */

 Create port objects for each valid entry */

	/* Validate driver and FW are compatible.

	 * Do not check major version, since it defines chip type, while

	 * driver is supposed to support any type.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2018 Mellanox Technologies. All rights reserved */

 Protects analyzed_ports_list */

 Member of analyzed_ports_list */

 Member of trigger_entries_list */

 Create a new port analayzer entry for local_port. */

 We assume "dev" stays valid after rt is put. */

 can not offload if route has an IPv6 gateway */

 Reject tunnels with GRE keys, checksums, etc. */

 Require a fixed TTL and a TOS copied from the mirrored packet. */

 A destination address may not be "any". */

 Create a new port analayzer entry for local_port. */

 We assume "dev" stays valid after dst is released. */

 Reject tunnels with GRE keys, checksums, etc. */

 Require a fixed TTL and a TOS copied from the mirrored packet. */

 A destination address may not be "any". */

 Create a new port analayzer entry for local_port. */

	/* Mirroring to the CPU port is like mirroring to any other physical

	 * port. Its local port is used instead of that of the physical port.

	/* Policers set on SPAN agents must be in the range of

	 * `policer_id_base .. policer_id_base + max_span_agents - 1`. If the

	 * base is set and the new policer is not within the range, then we

	 * must error out.

 Base must be even. */

 find a free entry to use */

 Already exists, just take a reference */

	/* An egress mirror buffer should be allocated on the egress port which

	 * does the mirroring.

	/* Remove egress mirror buffer now that port is no longer analyzed

	 * at egress.

 Port trigger are enabled during binding. */

	/* There is no unbinding for global triggers. The trigger should be

	 * disabled on all ports by now.

	/* Query existing configuration in order to only change the state of

	 * the specified traffic class.

	/* Must be first to avoid NULL pointer dereference by subsequent

	 * can_handle() callbacks.

	/* Must be first to avoid NULL pointer dereference by subsequent

	 * can_handle() callbacks.

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2016-2018 Mellanox Technologies. All rights reserved */

/**

 * struct mlxsw_i2c - device private data:

 * @cmd: command attributes;

 * @cmd.mb_size_in: input mailbox size;

 * @cmd.mb_off_in: input mailbox offset in register space;

 * @cmd.mb_size_out: output mailbox size;

 * @cmd.mb_off_out: output mailbox offset in register space;

 * @cmd.lock: command execution lock;

 * @dev: I2C device;

 * @core: switch core pointer;

 * @bus_info: bus info block;

 * @block_size: maximum block size allowed to pass to under layer;

 Routine converts in and out mail boxes offset and size. */

 Local in/out mailboxes: 20 bits for offset, 12 for size */

 Routine obtains register size from mail box buffer. */

 Routine sets I2C device internal offset in the transaction buffer. */

 Routine waits until go bit is cleared. */

 Routine posts a command to ASIC through mail box. */

 Prepare Command Interface Register for transaction */

 Write out Command Interface Register GO bit to push transaction */

 Routine posts initialization command to ASIC through mail box. */

 Prepare Command Interface Register for transaction */

 Write out Command Interface Register GO bit to push transaction */

 Wait until go bit is cleared. */

 Validate transaction completion status. */

 Routine obtains mail box offsets from ASIC register space. */

 Read mail boxes offsets. */

 Convert mail boxes. */

 Routine sends I2C write transaction to ASIC device. */

 Prepare and write out Command Interface Register for transaction. */

 Wait until go bit is cleared. */

 Validate transaction completion status. */

 Routine executes I2C command. */

 No out mailbox is case of write transaction. */

 No input mailbox is case of initialization query command. */

 Send read transaction to get output mailbox content. */

	/* In order to use mailboxes through the i2c, special area is reserved

	 * on the i2c address space that can be used for input and output

	 * mailboxes. Such mailboxes are called local mailboxes. When using a

	 * local mailbox, software should specify 0 as the Input/Output

	 * parameters. The location of the Local Mailbox addresses on the i2c

	 * space can be retrieved through the QUERY_FW command.

	 * For this purpose QUERY_FW is to be issued with opcode modifier equal

	 * 0x01. For such command the output parameter is an immediate value.

	 * Here QUERY_FW command is invoked for ASIC probing and for getting

	 * local mailboxes addresses from immedate output parameters.

 Prepare and write out Command Interface Register for transaction */

 Wait until go bit is cleared. */

 Validate transaction completion status. */

 Get mailbox offsets. */

 Register device bus. */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved */

	/* Linux demuxes tunnels based on packet SIP (which must match tunnel

	 * remote IP). Thus configure decap so that it filters out packets that

	 * are not IPv4 or have the wrong SIP. IPIP_DECAP_ERROR trap is

	 * generated for packets that fail this criterion. Linux then handles

	 * such packets in slow path and generates ICMP destination unreachable.

	/* Tunnels with unset local or remote address are valid in Linux and

	 * used for lightweight tunnels (LWT) and Non-Broadcast Multi-Access

	 * (NBMA) tunnels. In principle these can be offloaded, but the driver

	 * currently doesn't support this. So punt.

 We can't offload any other features. */

		/* Since the local address has changed, if there is another

		 * tunnel with a matching saddr, both need to be demoted.

	/* Linux demuxes tunnels based on packet SIP (which must match tunnel

	 * remote IP). Thus configure decap so that it filters out packets that

	 * are not IPv6 or have the wrong SIP. IPIP_DECAP_ERROR trap is

	 * generated for packets that fail this criterion. Linux then handles

	 * such packets in slow path and generates ICMP destination unreachable.

 We can't offload any other features. */

 Iterate over inner ECN values */

 Iterate over inner ECN values */

 Iterate over outer ECN values */

 SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0

 Copyright (c) 2018 Mellanox Technologies. All rights reserved */

	/* VxLAN driver's default UDP source port range is 32768 (0x8000)

	 * to 60999 (0xee47). Set the upper 8 bits of the UDP source port

	 * to a random number between 0x80 and 0xee

/*

 * Copyright (c) 2013-2015, Mellanox Technologies, Ltd.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Mutex to hold while enabling or disabling RoCE */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB */

 Copyright (c) 2019 Mellanox Technologies. */

	/* In separate host mode, PF enables itself.

	 * When ECPF is eswitch manager, eswitch enables host PF after

	 * eswitch is setup.

	/* ECPF shall enable HCA for host PF in the same way a PF

	 * does this for its VFs when ECPF is not a eswitch manager.

/*

 * Copyright (c) 2013-2015, Mellanox Technologies, Ltd.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 SQ starts within the same page of the RQ */

 CQE_STRIDE_128 and CQE_STRIDE_128_PAD both mean 128B stride */

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 This function should be used after setting a port register only */

 Addresses between 0-255 - page 00 */

	/* Addresses between 256 - 639 belongs to pages 01, 02 and 03

	 * For example, offset = 400 belongs to page 02:

	 * 1 + ((400 - 256)/128) = 2

 Page 0 always start from low page */

 High page */

 Cross pages read, read until offset 256 in low page */

 Default values for FW which do not support MLX5_REG_PCMR */

 Update the corresponding dscp entry */

 dscp2prio[i]: priority that dscp i mapped to */

/*

 * Copyright (c) 2016, Mellanox Technologies, Ltd.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 loopback test */

  Reserve for ethernet and IP header  */

 Fill ETH header */

 Fill UDP header */

 Discard Protocol */

 Fill IP header */

 Fill test header and data */

 We are only going to peek, no need to clone the SKB */

 Don't assume skb_transport_header() was set */

 so close ! */

 bingo */

 Temporarily enable local_lb */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies */

/*

 * Copyright (c) 2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Flow is TCP/UDP */

 Flow is IPv4 */

 Flow is IPv6 */

 Flow is TCP/UDP */

	/*  RSS does not support anything other than hashing to queues

	 *  on src IP, dest IP, TCP/UDP src port and TCP/UDP dest

	 *  port.

/*

 * Copyright (c) 2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Promiscuous, Vlan, mac, ttc, inner ttc, {UDP/ANY/aRFS/accel/{esp, esp_err}} */

 One more level for tc */

/* Delete rule (destination) is special case that

 * requires to lock the FTE for all the deletion process.

 Parent is the root */

 initialize refcnt, add to parent list */

 Add node to group list */

/* If reverse is false, then we search for the first flow table in the

 * root sub-tree from start(closest from right), else we search for the

 * last flow table in the root sub-tree till start(closest from left).

/* If reverse is false then return the first flow table in next priority of

 * prio in the tree, else return the last flow table in the previous priority

 * of prio in the tree.

 Assuming all the tree is locked by mutex chain lock */

 Assuming all the tree is locked by mutex chain lock */

 The driver is out of sync with the FW */

 Connect flow tables from previous priority of prio to ft */

 Don't set any QPN (zero) in case QPN list is empty */

 Modify/set FWD rules that point on old_next_ft to point on new_next_ft  */

	/* new_next_ft and old_next_ft could be NULL only

	 * when we create/destroy the anchor flow table.

 Connect_prev_fts and update_root_ft_create are mutually exclusive */

		/* The level is related to the

		 * priority level range.

	/* The level is related to the

	 * priority level range.

 Align the number of groups according to the largest group size */

 We save place for flow groups in addition to max types */

		/* Add dest to dests list- we need flow tables to be in the

		 * end of the list for forward to next prio rules.

 fte should not be deleted while calling this function */

  max_fte == ft->autogroup.max_types */

 sorted by start_index */

 if one rule only wants to count, it's ok */

 Collect all fgs which has a matching match_criteria */

 RCU is atomic, we can't execute FW commands here */

	/* Try to find an fte with identical match value and attempt update its

	 * action.

 No error check needed here, because insert_fte() is not called */

	/* No group with matching fte found, or we skipped the search.

	 * Try to add a new fte to any matching fg.

	/* Check the ft version, for case that new flow group

	 * was added while the fgs weren't locked

	/* Check the fgs version. If version have changed it could be that an

	 * FTE with the same match value was added while the fgs weren't

	 * locked.

 Collect all fgs which has a matching match_criteria */

	/* In order to consolidate the HW changes we lock the FTE for other

	 * changes, and increase its refcount, in order not to perform the

	 * "del" functions of the FTE. Will handle them here.

	 * The removal of the rules is done under locked FTE.

	 * After removing all the handle's rules, if there are remaining

	 * rules, it means we just need to modify the FTE in FW, and

	 * unlock/decrease the refcount we increased before.

	 * Otherwise, it means the FTE should be deleted. First delete the

	 * FTE in FW. Then, unlock the FTE, and proceed the tree_put_node of

	 * the FTE, which will handle the last decrease of the refcount, as

	 * well as required handling of its parent.

 Avoid double call to del_hw_fte */

 Assuming prio->node.children(flow tables) is sorted by level */

 Don't set any QPN (zero) in case QPN list is empty */

/* Connect flow table from previous priority to

 * the next flow table.

 Must be NIC RX */

 Create the root namespace */

 This updates prio start_level and num_levels */

 This updates start_level and num_levels of ns's priority descendants */

		/* If this a prio with chains, and we can jump from one chain

		 * (namespace) to another, so we accumulate the levels

 Create single prio */

 Create single prio */

 Create single prio */

/* FT and tc chains are stored in the same array so we can re-use the

 * mlx5_get_fdb_sub_ns() and tc api for FT chains.

 * When creating a new ns for each chain store it in the first available slot.

 * Assume tc chains are created and stored first and only then the FT chain.

	/* We put this priority last, knowing that nothing will get here

	 * unless explicitly forwarded to. This is possible because the

	 * slow path tables have catch all rules and nothing gets passed

	 * those tables.

 create 1 prio*/

 create 1 prio*/

/* This function should be called only at init stage of the namespace.

 * It is not safe to call this function while steering operations

 * are executed in the namespace.

 Can't set cmds to non root namespace */

/*

 * Copyright (c) 2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 flip tx/rx as we are reporting the counters for the switch vport */

 Add re-inject rule to the PF/representor sqs */

 non vport rep mlx5e instances don't use this field */

 update HW stats in background for next time */

 SQ */

 RQ */

 CQ moderation params */

	/* Set an initial non-zero value, so that mlx5e_select_queue won't

	 * divide by zero if called before first activating channels.

 The inner_ttc in the ttc params is intentionally not set */

 To give uplik rep TTC a lower level for chaining from root ft */

		/* non uplik reps will skip any bypass tables and go directly to

		 * their own ttc

 uplink root ft will be used to auto chain, to ethtool or ttc tables */

 Empty table, miss rule will always point to next table */

 The stats groups order is opposite to the update_stats() order calls */

 The stats groups order is opposite to the update_stats() order calls */

 XSK is needed so we can replace profile with NIC netdev */

 e-Switch vport representors */

 rpriv->rep to be looked up when profile->init() is called */

 mlx5e_rep_priv */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021 Mellanox Technologies. */

/* Firmware currently has 4 pool of 4 sizes that it supports (FT_POOLS),

 * and a virtual memory region of 16M (MLX5_FT_SIZE), this region is duplicated

 * for each flow table pool. We can allocate up to 16M of each pool,

 * and we keep track of how much we used via mlx5_ft_pool_get_avail_sz.

 * Firmware doesn't report any of this for now.

 * ESW_POOL is expected to be sorted from large to small and match firmware

 * pools.

 size for termination tables */ };

/*

 * Copyright (c) 2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Vport UC/MC hash node */

 UC MAC was added to MPFs */

 A flag indicating that mac was added due to mc promiscuous vport */

 E-Switch vport context HW commands */

 insert only if no vlan in packet */

 E-Switch FDB */

 E-Switch vport UC/MC lists management */

	/* Skip mlx5_mpfs_add_mac for eswitch_managers,

	 * it is already done by its netdev in mlx5e_execute_l2_action

 SRIOV is enabled: Forward UC MAC to vport */

	/* Skip mlx5_mpfs_del_mac for eswitch managers,

	 * it is already done by its netdev in mlx5e_execute_l2_action

 Forward MC MAC to Uplink */

 Add this multicast mac to all the mc promiscuous vports */

	/* If the multicast mac is added as a result of mc promiscuous vport,

	 * don't increment the multicast ref count

 Forward MC MAC to vport */

	/* If the multicast mac is added as a result of mc promiscuous vport,

	 * don't decrement the multicast ref count.

 Remove this multicast mac from all the mc promiscuous vports */

 Apply vport UC/MC list to HW l2 table and FDB table */

 Sync vport UC/MC list from vport context */

			/* If this mac was previously added because of allmulti

			 * promiscuous rx mode, its now converted to be original

			 * vport mac.

/* Sync vport UC/MC list from vport context

 * Must be called after esw_update_vport_addr_list

 Apply vport rx mode to HW FDB table */

 Sync vport rx mode from vport context */

 Attach vport to the eswitch rate limiter */

 Host PF has its own mac/guid. */

 Don't cleanup vport->info, it's needed to restore vport configuration */

 Sync with current vport context */

	/* Esw manager is trusted by default. Host PF (vport 0) is trusted as well

	 * in smartNIC as it's a vport group manager.

	/* External controller host PF has factory programmed MAC.

	 * Read it from the device.

 Mark this vport as disabled to discard new events */

 Disable events from this vport */

	/* We don't assume VFs will cleanup after themselves.

	 * Calling vport change handler while vport is disabled will cleanup

	 * the vport resources.

/**

 * mlx5_esw_query_functions - Returns raw output about functions state

 * @dev:	Pointer to device to query

 *

 * mlx5_esw_query_functions() allocates and returns functions changed

 * raw output memory pointer from device on success. Otherwise returns ERR_PTR.

 * Caller must free the memory using kvfree() when valid pointer is returned.

 Public E-Switch API */

	/* Once vport and representor are ready, take out the external host PF

	 * out of initializing state. Enabling HCA clears the iser->initializing

	 * bit and host PF driver loading can progress.

/* mlx5_eswitch_enable_pf_vf_vports() enables vports of PF, ECPF and VFs

 * whichever are present on the eswitch.

 Enable PF vport */

 Enable external host PF HCA */

 Enable ECPF vport */

 Enable VF vports */

/* mlx5_eswitch_disable_pf_vf_vports() disables vports of PF, ECPF and VFs

 * whichever are previously enabled on the eswitch.

/**

 * mlx5_eswitch_enable_locked - Enable eswitch

 * @esw:	Pointer to eswitch

 * @mode:	Eswitch mode to enable

 * @num_vfs:	Enable eswitch for given number of VFs. This is optional.

 *		Valid value are 0, > 0 and MLX5_ESWITCH_IGNORE_NUM_VFS.

 *		Caller should pass num_vfs > 0 when enabling eswitch for

 *		vf vports. Caller should pass num_vfs = 0, when eswitch

 *		is enabled without sriov VFs or when caller

 *		is unaware of the sriov state of the host PF on ECPF based

 *		eswitch. Caller should pass < 0 when num_vfs should be

 *		completely ignored. This is typically the case when eswitch

 *		is enabled without sriov regardless of PF/ECPF system.

 * mlx5_eswitch_enable_locked() Enables eswitch in either legacy or offloads

 * mode. If num_vfs >=0 is provided, it setup VF related eswitch vports.

 * It returns 0 on success or error code on failure.

/**

 * mlx5_eswitch_enable - Enable eswitch

 * @esw:	Pointer to eswitch

 * @num_vfs:	Enable eswitch switch for given number of VFs.

 *		Caller must pass num_vfs > 0 when enabling eswitch for

 *		vf vports.

 * mlx5_eswitch_enable() returns 0 on success or error code on failure.

	/* Notify eswitch users that it is exiting from current mode.

	 * So that it can do necessary cleanup before the eswitch is disabled.

 Vport Administration */

/**

 * mlx5_esw_hold() - Try to take a read lock on esw mode lock.

 * @mdev: mlx5 core device.

 *

 * Should be called by esw resources callers.

 *

 * Return: true on success or false.

 e.g. VF doesn't have eswitch so nothing to do */

/**

 * mlx5_esw_release() - Release a read lock on esw mode lock.

 * @mdev: mlx5 core device.

/**

 * mlx5_esw_get() - Increase esw user count.

 * @mdev: mlx5 core device.

/**

 * mlx5_esw_put() - Decrease esw user count.

 * @mdev: mlx5 core device.

/**

 * mlx5_esw_try_lock() - Take a write lock on esw mode lock.

 * @esw: eswitch device.

 *

 * Should be called by esw mode change routine.

 *

 * Return:

 * * 0       - esw mode if successfully locked and refcount is 0.

 * * -EBUSY  - refcount is not 0.

 * * -EINVAL - In the middle of switching mode or lock is already held.

/**

 * mlx5_esw_unlock() - Release write lock on esw mode lock

 * @esw: eswitch device.

/**

 * mlx5_esw_lock() - Take write lock on esw mode lock

 * @esw: eswitch device.

/**

 * mlx5_eswitch_get_total_vports - Get total vports of the eswitch

 *

 * @dev: Pointer to core device

 *

 * mlx5_eswitch_get_total_vports returns total number of eswitch vports.

/**

 * mlx5_eswitch_get_core_dev - Get the mdev device

 * @esw : eswitch device.

 *

 * Return the mellanox core device which manages the eswitch.

/*

 * Copyright (c) 2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 destination_id is reserved */

/*

 * Copyright (c) 2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Max percentage of BW allocation */

 Max supported cable length is 1000 meters */

/* If dcbx mode is non-host set the dcbx mode to host.

 Report 0% ets tc if exits*/

 Update tc_tsa based on fw setting*/

 strict group has higher priority than ets group */

 Make sure the total bw for ets zero bw group is 100% */

/* If there are ETS BW 0,

 *   Set ETS group # to 1 for all ETS non zero BW tcs. Their sum must be 100%.

 *   Set group #0 to all the ETS BW 0 tcs and

 *     equally splits the 100% BW between them

 *   Report both group #0 and #1 as ETS type.

 *     All the tcs in group #0 will be reported with 0% BW.

 Validate Priority */

 Validate Bandwidth Sum */

 pfc_en */

 set dcbx to fw controlled */

 Save the old entry info */

 Check if need to switch to dscp trust state */

 Skip the fw command if new and old mapping are the same */

 Delete the old entry if exists */

 Add new entry and update counter */

 Skip if no dscp app entry */

 Check if the entry matches fw setting */

 Delete the app entry */

 Reset the priority mapping back to zero */

 Check if need to switch to pcp trust state */

 Set PFC */

 CEE interfaces */

	/* From driver's point of view, we only care if the mode

	 * is host (HOST) or non-host (AUTO)

 tclass[prio=0]=1, tclass[prio=1]=0, tclass[prio=i]=i (for i>1) */

 No SEL_DSCP entry in non DSCP state */

 Skip if tx_min_inline is the same */

/*

 * Copyright (c) 2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Max number of counters to query in bulk read is 32K */

	/* last{packets,bytes} members are used when calculating the delta since

	 * last reading

/* locking scheme:

 *

 * It is the responsibility of the user to prevent concurrent calls or bad

 * ordering to mlx5_fc_create(), mlx5_fc_destroy() and accessing a reference

 * to struct mlx5_fc.

 * e.g en_tc.c is protected by RTNL lock of its caller, and will never call a

 * dump (access to struct mlx5_fc) after a counter is destroyed.

 *

 * access to counter list:

 * - create (user context)

 *   - mlx5_fc_create() only adds to an addlist to be used by

 *     mlx5_fc_stats_work(). addlist is a lockless single linked list

 *     that doesn't require any additional synchronization when adding single

 *     node.

 *   - spawn thread to do the actual destroy

 *

 * - destroy (user context)

 *   - add a counter to lockless dellist

 *   - spawn thread to do the actual del

 *

 * - dump (user context)

 *   user should not call dump after destroy

 *

 * - query (single thread workqueue context)

 *   destroy/dump - no conflict (see destroy)

 *   query/dump - packets and bytes might be inconsistent (since update is not

 *                atomic)

 *   query/create - no conflict (see create)

 *   since every create/destroy spawn the work, only after necessary time has

 *   elapsed, the thread will actually query the hardware.

 skip counters that are in idr, but not yet in counters list */

 first id must be aligned to 4 when using bulk query */

 number of counters to query inc. the last counter */

	/* Take dellist first to ensure that counters cannot be deleted before

	 * they are inserted.

 Flow counter bluks */

 Flow counters pool API */

/*

 * Copyright (c) 2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/* There are two match-all miss flows, one for unicast dst mac and

 * one for multicast.

/* Actually only the upper 16 bits of reg c0 need to be cleared, but the lower 16 bits

 * are not needed as well in the following process. So clear them all for simplicity.

	/* Use metadata matching because vport is not represented by single

	 * VHCA in dual-port RoCE mode, and matching on source vport may fail.

 if per flow vlan pop/push is emulated, don't set that into the firmware */

 unref the term table */

 vport has vlan push configured, can't offload VF --> wire rules w.o it */

	/* protects against (1) setting rules with different vlans to push and

	 * (2) setting rules w.o vlans (attr->vlan = 0) && w. vlans to push (!= 0)

 nop if we're on the vlan push/pop non emulation mode */

 tracks VF --> wire rules without vlan push action */

 it's the 1st vlan rule, apply global vlan pop policy */

 nop if we're on the vlan push/pop non emulation mode */

 tracks VF --> wire rules without vlan push action */

 no more vlan rules, stop global vlan pop policy */

 source vport is the esw manager */

 total vports is the same for both e-switches */

		/* Disabled when ttl workaround is needed, e.g

		 * when ESWITCH_IPV4_TTL_MODIFY_ENABLE = true in mlxconfig

 Create tc_end_ft which is the always created ft chain */

 Always open the root for fast path */

 Open level 1 for split fdb rules now if prios isn't supported  */

 CONFIG_MLX5_CLS_ACT */

	/* To be strictly correct:

	 *	MLX5_MAX_PORTS * (esw->total_vports * MAX_SQ_NVPORTS + MAX_PF_SQ)

	 * should be:

	 *	esw->total_vports * MAX_SQ_NVPORTS + MAX_PF_SQ +

	 *	peer_esw->total_vports * MAX_SQ_NVPORTS + MAX_PF_SQ

	 * but as the peer device might not be in switchdev mode it's not

	 * possible. We use the fact that by default FW sets max vfs and max sfs

	 * to the same value on both devices. If it needs to be changed in the future note

	 * the peer miss group should also be created based on the number of

	 * total vports of the peer (currently is also uses esw->total_vports).

	/* create the slow path fdb with encap set, so further table instances

	 * can be created at run time while VFs are probed if the FW allows that.

	/* Create empty TC-miss managed table. This allows plugging in following

	 * priorities without directly exposing their level 0 table to

	 * eswitch_offloads and passing it as miss_fdb to following call to

	 * esw_chains_create().

 create send-to-vport group */

 See comment above table_size calculation */

 meta send to vport */

 create peer esw miss group */

 create miss group */

 Holds true only as long as DMFS is the default */

 Holds true only as long as DMFS is the default */

 create vport rx group */

 Copy the mark from vport to its rep */

 Reserve 0xf for internal port offload */

 Only 4 bits of pf_num */

 Metadata is 4 bits of PFNUM and 12 bits of unique id */

 Use only non-zero vport_id (1-4095) for all PF's */

 Metadata contains only 12 bits of actual ida id */

 Number of VFs can only change from "0 to x" or "x to 0". */

 Mark non local controller with non zero controller number. */

 Local controller is always valid */

 External host number starts with zero in device */

 Representor will control the vport link state */

 Uplink vport rep must load first. */

	/* devlink commands in NONE eswitch mode are currently supported only

	 * on ECPF.

 Currently, only ECPF based device has representor for host PF. */

/*

 * Copyright (c) 2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/* mlx5e global resources should be placed in this file.

 * Global resources are common to all the netdevices created on the same nic.

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/* return the offset in bytes from the start of the page to the

	 * blue flame area of the UAR

 pointer to right mutex */

 pointer to right mutex */

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Offline PCI reads return 0xffffffff */

	/* Try to lock GW access, this stage doesn't return

	 * EBUSY because locked GW does not mean that other PF

	 * already started the reset.

	/* At this stage, if the return status == EBUSY, then we know

	 * for sure that another PF started the reset, so don't allow

	 * another reset.

 Unlock GW access */

	/* The reset only needs to be issued by one PF. The health buffer is

	 * shared between all functions, and will be cleared during a reset.

	 * Check again to avoid a redundant 2nd reset. If the fatal errors was

	 * PCI related a reset won't help.

	/* Write the NIC interface field to initiate the reset, the command

	 * interface address also resides here, don't overwrite it.

 protected state setting */

 Mark the device as fatal in order to abort FW commands */

 a previous error is still being handled */

 Get cr-dump and reset FW semaphore */

 Execute SW reset */

 Recover from SW reset */

 Release FW semaphore if you are the lock owner */

		/* The IFC mode field is 3 bits, so it will read 0x7 in 2 cases:

		 * 1. PCI has been disabled (ie. PCI-AER, PF driver unloaded

		 *    and this is a VF), this is not recoverable by SW reset.

		 *    Logging of this is handled elsewhere.

		 * 2. FW reset has been issued by another function, driver can

		 *    be reloaded to recover after the mode switches to

		 *    MLX5_NIC_IFC_DISABLED.

 If the syndrome is 0, the device is OK and no need to print buffer */

		/* If recovery wasn't performed, due to grace period,

		 * unload the driver. This ensures that the driver

		 * closes all its resources and it is not subjected to

		 * requests from the kernel.

/*

 * Copyright (c) 2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/* Handle the race between the application querying need_wakeup and the

	 * driver setting it:

	 * 1. Update need_wakeup both before and after the TX. If it goes to

	 * "yes", it can only happen with the first update.

	 * 2. If the application queried need_wakeup before we set it, the

	 * packets will be transmitted anyway, even w/o a wakeup.

	 * 3. Give a chance to clear need_wakeup after new packets were queued

	 * for TX.

 Pairs with mlx5e_qos_alloc_queues. */

 budget=0 means: don't poll rx rings */

		/* Don't clear the flag if nothing was polled to prevent

		 * queueing more WQEs and overflowing the async ICOSQ.

 Keep after async ICOSQ CQ poll */

/*

 * Copyright (c) 2013-2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Maybe got handled by eq recover ? */

 phew, already handled */

 for the cmd_ent_get() took on schedule delayed work */

		/* Index allocation can fail on heavy load of commands. This is a temporary

		 * situation as the current command already holds the semaphore, meaning that

		 * another command completion is being handled and it is expected to release

		 * the entry index soon.

 Skip sending command to fw if internal error */

 for the _real_ FW event on completion */

 ring doorbell after the descriptor is valid */

 if not in polling don't use ent after this point */

 make sure we read the descriptor after ownership is SW */

	/* Re-wait on the ent->done after executing the recovery flow. If the

	 * recovery flow (or any other recovery flow running simultaneously)

	 * has recovered an EQE, it should cause the entry to be completed by

	 * the command interface.

/*  Notes:

 *    1. Callback functions may not sleep

 *    2. page queue commands do not support asynchrous completion

	/* put for this ent is when consumed, depending on the use case

	 * 1) (!callback) blocking flow: by caller after wait_func completes

	 * 2) (callback) flow: by mlx5_cmd_comp_handler() when ent is handled

 mlx5_cmd_comp_handler() will put(ent) */

 this is a BUG */

 this is a BUG */

 there can be at most 32 command queues */

 if we already completed the command, ignore it */

 only real completion can free the cmd slot */

 timeout work was canceled */

 Real FW completion */

 FW is inaccessible */

 final consumer is done, release ent */

				/* release wait_func() so mlx5_cmd_invoke()

				 * can make the final ent_put()

 wait for pending handlers to complete */

	/* we must increment the allocated entries refcount before triggering the completions

	 * to guarantee pending commands will not get freed in the meanwhile.

	 * For that reason, it also has to be done inside the alloc_lock.

 Unlock cmdif */

 Bad address */

		/* For cached lists, we must explicitly state what is

		 * the real size

 Starts at 1 to avoid doing wake_up if we are not cleaning up */

/**

 * mlx5_cmd_cleanup_async_ctx - Clean up an async_ctx

 * @ctx: The ctx to clean

 *

 * Upon return all callbacks given to mlx5_cmd_exec_cb() have been called. The

 * caller must ensure that mlx5_cmd_exec_cb() is not called during or after

 * the call mlx5_cleanup_async_ctx().

 Initialize and fill the caches with initial entries */

 make sure it is aligned to 4K */

 Make sure firmware sees the complete address before we proceed */

/*

 * Copyright (c) 2013-2015, Mellanox Technologies, Ltd.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 set peer SQs */

 set func RQs */

 unset func RQs */

 unset peer SQs */

 alloc and pair func --> peer hairpin */

 destroy peer SQ */

/*

 * Copyright (c) 2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

		/* cvlan_tag enabled in match criteria and

		 * disabled in match value means both S & C tags

		 * don't exist (untagged of both)

 MLX5E_VLAN_RULE_TYPE_MATCH_CTAG_VID */

 Need to fix some features.. */

 no vlan table for uplink rep */

 no vlan table for uplink rep */

	/* must be called after DESTROY bit is set and

	 * set_rx_mode is called and flushed

 Make sure our own address is pushed first */

 must be last */

 Flow Group for full match */

 Flow Group for allmulti */

 Flow Group for l2 traps */

 must be last */

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Copyright (c) 2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Protect aRFS rules list */

 Flow ID passed to ndo_rx_flow_steer */

 Filter ID returned by ndo_rx_flow_steer */

 Modify ttc rules destination back to their default */

 Modify ttc rules destination to point on the aRFS FTs */

	/* FIXME: Must use mlx5_ttc_get_default_dest(),

	 * but can't since TTC default is not setup yet !

/*

 * Copyright (c) 2015-2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/* Initialize the mkey with all MTTs pointing to a default

	 * page (filler_addr). When the channels are activated, UMR

	 * WQEs will redirect the RX WQEs to the actual memory from

	 * the RQ's pool, while the gaps (wqe_overflow) remain mapped

	 * to the default page.

 prepare next */

 MLX5_WQ_TYPE_CYCLIC */

 Create a page_pool and register it with rxq */

 No-internal DMA mapping in page_pool */

		/* page_pool can be used even when there is no rq->xdp_prog,

		 * given page_pool does not handle DMA mapping there is no

		 * required state to clear. And page_pool gracefully handle

		 * elevated refcnt.

 check if num_frags is not a pow of two */

 MLX5_WQ_TYPE_CYCLIC */

 MLX5_WQ_TYPE_CYCLIC */

		/* With AF_XDP, page_cache is not used, so this loop is not

		 * entered, and it's safe to call mlx5e_page_release_dynamic

		 * directly.

 Outstanding UMR WQEs (in progress) start at wq->head */

 must be FPGA */

	/* We disable csum_complete when XDP is enabled since

	 * XDP programs might manipulate packets which will render

	 * skb->checksum incorrect.

	/* For CQE compression on striding RQ, use stride index provided by

	 * HW if capability is supported.

 Sync with NAPI to prevent mlx5e_post_rx_wqes. */

 Sync with NAPI to prevent netif_tx_wake_queue. */

 last doorbell out, godspeed .. */

 Sync with NAPI. */

 tc = 0 */

 Pre initialize fixed WQE fields */

 Sync with NAPI. */

 nothing to do */

 remove current rl index to free space to next ones */

 remove the rate from the table */

 rate is given in Mb/sec, HW config is in Kb/sec */

 Check whether rate in valid range, 0 is always valid */

 msecs */

		/* Don't wait on the XSK RQ, because the newer xdpsock sample

		 * doesn't provide any Fill Ring entries at the setup stage.

 Update vport context MTU */

 fallback to port oper mtu */

 MTU range: 68 - hw-specific max */

	/* netif_set_real_num_rx_queues could fail only when nch increased. Only

	 * one of nch and ntc is changed in this function. That means, the call

	 * to netif_set_real_num_tx_queues below should not fail, because it

	 * decreases the number of TX queues.

 This function may be called on attach, before priv->rx_res is created. */

 Sync with mlx5e_select_queue. */

	/* FIXME: This is a W/A only for tx timeout watch dog false alarm when

	 * polling for inactive tx queues.

	/* New channels are ready to roll, call the preactivate hook if needed

	 * to modify HW settings or update kernel parameters.

 return carrier back if needed */

	/* May already be CLOSED in case a previous configuration operation

	 * (e.g RX/TX queue size change) that involves close&open failed.

 Mark as unused given "Drop-RQ" packets never reach XDP */

	/* Map netdev TCs to offset 0.

	 * We have our own UP to TXQ mapping for DCB mode of QoS

	/* MQPRIO is another toplevel qdisc that can't be attached

	 * simultaneously with the offloaded HTB.

	/* In switchdev mode, monitor counters doesn't monitor

	 * rx/tx stats of 802_3. The update stats mechanism

	 * should keep the 802_3 layout counters updated

 update HW stats in background for next time */

		/* vport multicast also counts packets that are dropped due to steering

		 * or rx out of buffer

 no rx mode for uplink rep */

		/* HW strips the outer C-tag header, this is a problem

		 * for S-tag traffic.

			/* Two criteria must be met:

			 * 1. HW MTU + all headrooms <= XSK frame size.

			 * 2. Size of SKBs allocated on XDP_PASS <= PAGE_SIZE.

		/* Always reset in linear mode - hw_mtu is used in data path.

		 * Check that the mode was non-linear and didn't change.

		 * If XSK is active, XSK RQs are linear.

 Reset CQE compression to Admin default */

 Disable CQE compression */

 TX HW timestamp */

 RX HW timestamp */

		/* ptp_rx is set if both HW TS is set and CQE

		 * compression is set

 might need to fix some features */

 Verify if UDP port is being offloaded by HW */

 Support Geneve offload for default UDP port */

 Disable CSUM and GSO if the udp dport is not offloaded by HW */

 Validate if the tunneled packet is being offloaded by HW */

 break if tried to reopened channels */

	/* No XSK params: AF_XDP can't be enabled yet at the point of setting

	 * the XDP program.

 no need for full reset when exchanging programs */

	/* exchanging programs w/o reset, we update ref counts on behalf

	 * of the channels RQs here.

 SRIOV E-Switch NDOs */

 The supported periods are organized in ascending order */

	/* Set an initial non-zero value, so that mlx5e_select_queue won't

	 * divide by zero if called before first activating channels.

 SQ */

 XDP SQ */

 set CQE compression */

 RQ */

 HW LRO */

 No XSK params: checking the availability of striding RQ in general. */

 CQ moderation params */

 TX inline */

 AF_XDP */

	/* Do not update netdev->features directly in here

	 * on mlx5e_attach_netdev() we will call mlx5e_update_features()

	 * To update netdev->features please modify mlx5e_fix_features()

 Don't count the space hard-coded to the IANA port */

	/* Tunneled LRO is not supported in the driver, and the same RQs are

	 * shared between inner and outer TIRs, so the driver can't disable LRO

	 * for inner TIRs while having it enabled for outer TIRs. Due to this,

	 * block LRO altogether if the firmware declares tunneled LRO support.

 Defaults */

 Marking the link as currently not needed by the Driver */

 core resources */

 netdev rx queues */

 netdev tx queues */

 mlx5e generic netdev management API (move to en_common.c) */

 priv init */

 bail if change profile failed and also rollback failed */

 features will be updated on netdev registration */

 max number of channels may have changed */

		/* Reducing the number of channels - RXFH has to be reset, and

		 * mlx5e_num_channels_changed below will build the RQT.

	/* 1. Set the real number of queues in the kernel the first time.

	 * 2. Set our default XPS cpumask.

	 * 3. Build the RQT.

	 *

	 * rtnl_lock is required by netif_set_real_num_*_queues in case the

	 * netdev has been registered by this point (if this function was called

	 * in the reload or resume flow).

 cleanup old profile */

 roll back to original profile */

/*

 * Copyright (c) 2014, Mellanox Technologies inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Restore sriov guid and policy settings */

	/* Reversed translation of PCI VF function number to the internal

	 * function_id, which exists in the name of virtfn symlink.

 If sriov VFs exist in PCI level, enable them in device level */

		/* Old FW doesn't support getting total_vfs from esw func

		 * but supports getting it from pci_sriov.

/*

 * Copyright (c) 2017, Mellanox Technologies, Ltd.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Concrete NIC Stats */

gcc.gnu.org/bugzilla/show_bug.cgi?id=92657 */

gcc.gnu.org/bugzilla/show_bug.cgi?id=92657 */

 Pairs with smp_store_release in mlx5e_open_qos_sq. */

gcc.gnu.org/bugzilla/show_bug.cgi?id=92657 */

 xdp redirect */

 AF_XDP zero-copy */

gcc.gnu.org/bugzilla/show_bug.cgi?id=92657 */

 "1" for link_down_events special counter */

 link_down_events_phy has special handling since it is not stored in __be64 format */

 %s is "global" or "prio{i}" */

 Pairs with smp_store_release in mlx5e_open_qos_sq. */

 Pairs with smp_store_release in mlx5e_open_qos_sq. */

 Pairs with smp_store_release in mlx5e_open_qos_sq. */

 The stats groups order is opposite to the update_stats() order calls */

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Firmware doesn't support page with physical address 0 */

 No hard feelings, we want our pages back! */

 In case of internal error we will free the pages manually later */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2013-2021, Mellanox Technologies inc.  All rights reserved.

/* budget must be smaller than MLX5_NUM_SPARE_EQE to guarantee that we update

 * the ci before we polled all the entries in the EQ. MLX5_NUM_SPARE_EQE is

 * used to set the EQ size, budget must be smaller than the EQ size.

 Since CQ DB is stored in async_eq */

 sync async eqs creations */

 caller must eventually call mlx5_cq_put on the returned cq */

		/* Make sure we read EQ entry contents after we've

		 * checked the ownership bit.

 Assume (eqe->type) is always MLX5_EVENT_TYPE_COMP */

/* Some architectures don't latch interrupts when they are disabled, so using

 * mlx5_eq_poll_irq_disabled could end up losing interrupts while trying to

 * avoid losing them.  It is not recommended to use it, unless this is the last

 * resort.

		/*

		 * Make sure we read EQ entry contents after we've

		 * checked the ownership bit.

 Init CQ table */

/**

 * mlx5_eq_enable - Enable EQ for receiving EQEs

 * @dev : Device which owns the eq

 * @eq  : EQ to enable

 * @nb  : Notifier call block

 *

 * Must be called after EQ is created in device.

 *

 * @return: 0 if no error

/**

 * mlx5_eq_disable - Disable EQ for receiving EQEs

 * @dev : Device which owns the eq

 * @eq  : EQ to disable

 * @nb  : Notifier call block

 *

 * Must be called before EQ is destroyed.

 Async EQs */

 type == MLX5_EVENT_TYPE_CQ_ERROR */

 TODO: sriov max_vf + */ 1,

/* Generic EQ API for mlx5_core consumers

 * Needed For RDMA ODP EQ for now

	/* Make sure we read EQ entry contents after we've

	 * checked the ownership bit.

 We still want ordering, just not swabbing, so add a barrier */

 add tail, to keep the list ordered, for mlx5_vector2eqn to work */

 This function should only be called after mlx5_cmd_force_teardown_hca */

 sync with create/destroy_async_eq */

		/* rmap is a mapping between irq number and queue number.

		 * each irq can be assign only to a single rmap.

		 * since SFs share IRQs, rmap mapping cannot function correctly

		 * for irqs that are shared for different core/netdev RX rings.

		 * Hence we don't allow netdev rmap for SFs

/*

 * Copyright (c) 2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 The upper half are XSK queues. */

	/* Don't allow changing the number of channels if there is an active

	 * XSK, because the numeration of the XSK and regular RQs will change.

	/* Don't allow changing the number of channels if HTB offload is active,

	 * because the numeration of the QoS SQs will change, while per-queue

	 * qdiscs are attached.

	/* Don't allow changing the number of channels if non-default RSS contexts exist,

	 * the kernel doesn't protect against set_channels operations that break them.

	/* Don't allow changing the number of channels if MQPRIO mode channel offload is active,

	 * because it defines a partition over the channels queues.

 Switch to new channels, set new parameters and close old ones */

	/* If DIM state hasn't changed, it's possible to modify interrupt

	 * moderation parameters on the fly, even if the channels are open.

	/* active fec is a bit set, find out which bit is set and

	 * advertise the corresponding ethtool bit

	/* Fields: eth_proto_admin and ext_eth_proto_admin  are

	 * mutually exclusive. Hence try reading legacy advertising

	 * when extended advertising is zero.

	 * admin_ext indicates which proto_admin (ext vs. legacy)

	 * should be read and interpreted

 don't fail caps query because of FEC error */

 Extended link-mode has no speed limitations. */

 data[0] = identifier byte */

 data[1] = revision id */

 Done reading */

 Done reading, return how many bytes was read */

	/* Don't allow changing the PTP state if HTB offload is active, because

	 * the numeration of the QoS SQs will change, while per-queue qdiscs are

	 * attached.

	/* Don't allow enabling TX-port-TS if MQPRIO mode channel  offload is

	 * active, since it defines explicitly which TC accepts the packet.

	 * This conflicts with TX-port-TS hijacking the PTP traffic to a specific

	 * HW TX-queue.

	/* No need to verify SQ stop room as

	 * ptpsq.txqsq.stop_room <= generic_sq->stop_room, and both

	 * has the same log_sq_size.

 Need to fix some features.. */

	/* ETHTOOL_GRXRINGS is needed by ethtool -x which is not part

	 * of rxnfc. We keep this logic out of mlx5e_ethtool_get_rxnfc,

	 * to avoid breaking "ethtool -x" when mlx5e_ethtool_get_rxnfc

	 * is compiled out via CONFIG_MLX5_EN_RXNFC=n.

 States relating to the autonegotiation or issues therein */

 Failure during link training */

 Logical mismatch in physical coding sublayer or forward error correction sublayer */

 Signal integrity issues */

 No cable connected */

 Failure is related to cable, e.g., unsupported cable */

 Failure is related to EEPROM, e.g., failure during reading or parsing the data */

 Failure during calibration algorithm */

 The hardware is not able to provide the power required from cable or module */

 The module is overheated */

	/* Exit without data if the interface state is OK, since no extended data is

	 * available in such case

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Copyright (c) 2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/* For NIC rules we store the restore metadata directly

	 * into reg_b that is passed to SW since we don't

	 * jump between steering domains.

/* To avoid false lock dependency warning set the tc_ht lock

 * class different than the lock class of the ht being used when deleting

 * last flow from a group and then deleting a group, we get into del_sw_flow_group()

 * which call rhashtable_destroy on fg->ftes_hash which will take ht->mutex but

 * it's different than the ht->mutex here.

move to correct offset

zero val and mask

add current to mask

back to be32 and write

 Firmware has 5bit length field and 0 means 32bits */

 Firmware has 5bit length field and 0 means 32bits */

 a node of a hash table which keeps all the  hairpin entries */

 protects flows list */

 flows sharing the same hairpin */

	/* hpe's that were not fully initialized when dead peer update event

	 * function traversed them.

 flow wasn't fully initialized */

	/* Mirred tc action holds a refcount on the ifindex net_device (see

	 * net/sched/act_mirred.c:tcf_mirred_get_dev). So, it's okay to continue using mdev

	 * after dev_put(netdev), while we're in the context of adding a tc flow.

	 *

	 * The mdev pointer corresponds to the peer/out net_device of a hairpin. It is then

	 * stored in a hairpin object, which exists until all flows, that refer to it, get

	 * removed.

	 *

	 * On the other hand, after a hairpin object has been created, the peer net_device may

	 * be removed/unbound while there are still some hairpin flows that are using it. This

	 * case is handled by mlx5e_tc_hairpin_update_dead_peer, which is hooked to

	 * NETDEV_UNREGISTER event of the peer net_device.

 no more hairpin flows for us, release the hairpin pair */

 set hairpin pair per each 50Gbs share of the link */

 flow wasn't fully initialized */

 Create the root table here if doesn't exist yet */

	/* Remove root table if no rules are left to avoid

	 * extra steering hops.

/* Caller must obtain uplink_priv->unready_flows_lock mutex before calling this

 * function.

/* Caller must obtain uplink_priv->unready_flows_lock mutex before calling this

 * function.

		/* In lag case we may get devices from different eswitch instances.

		 * If we failed to get vport num, it means, mostly, that we on the wrong

		 * eswitch.

	/* We check chain range only for tc flows.

	 * For ft flows, we checked attr->chain was originally 0 and set it to

	 * FDB_FT_CHAIN which is outside tc range.

	 * See mlx5e_rep_setup_ft_cb().

			/* If decap route device is internal port, change the

			 * source vport value in reg_c0 back to uplink just in

			 * case the rule performs goto chain > 0. If we have a miss

			 * on chain > 0 we want the metadata regs to hold the

			 * chain id so SW will resume handling of this packet

			 * from the proper chain.

	/* we get here if one of the following takes place:

	 * (1) there's no error

	 * (2) there's an encap action and we don't have valid neigh

 Iterate over tmp_list of flows attached to flow_list head. */

 Return ip_version converted from ethertype anyway */

		/* With mpls over udp we decapsulate using packet reformat

		 * object

	/* When doing mpls over udp decap, the user needs to provide

	 * MPLS_UC as the protocol in order to be able to match on mpls

	 * label fields.  However, the actual ethertype is IP so we want to

	 * avoid matching on this, otherwise we'll fail the match.

			/* header pointers should point to the inner headers

			 * if the packet was decapsulated already.

			 * outer headers are set by parse_tunnel_attr.

		/* cvlan_tag enabled in match criteria and

		 * disabled in match value means both S & C tags

		 * don't exist (untagged of both)

 the HW doesn't support frag first/later */

 the HW doesn't need L3 inline to match on frag=no */

 ***  L2 attributes parsing up to here *** */

 ***  L3 attributes parsing up to here *** */

 Currently supported only for MPLS over UDP */

 disallow acting twice on the same location */

/* masked values are the same and there are no rewrites that do not have a

 * match.

 in linux iphdr tcp_flags is 8 bits long */

 avoid seeing bits set from previous iterations */

 nothing to offload here */

 don't rewrite if we have a match on the same value */

 clear to denote we consumed this field */

 add 0 is no change */

 clear to denote we consumed this field */

 if field is bit sized it can start not from first bit */

 length is num of bits to be written, zero means length of 32 */

 FDB offloading */

 namespace is MLX5_FLOW_NAMESPACE_KERNEL - NIC offloading */

 can't be all optimistic */

  The HW recalcs checksums only if re-writing headers */

	/* For IPv4 & IPv6 header check 4 byte word,

	 * to determine that modified fields

	 * are NOT ttl & hop_limit only.

	/* Add ct_state=-trk match so it will be offloaded for non ct flows

	 * (or after clear action), as otherwise, since the tuple is changed,

	 * we can't restore ct state

 for non-IP we only re-write MACs, so we're okay */

		/* All registers used by ct are cleared when using

		 * split rules.

 In case all pedit actions are skipped, remove the MOD_HDR flag. */

	/* Forwarding non encapsulated traffic between

	 * uplink ports is allowed only if

	 * termination_table_raw_traffic cap is set.

	 *

	 * Input vport was stored attr->in_rep.

	 * In LAG case, *priv* is the private data of

	 * uplink which may be not the input vport.

 Forward to root fdb for matching against the new source vport */

			/* we only support mpls pop if it is the first action

			 * and the filter net device is bareudp. Subsequent

			 * actions can be pedit and the last can be mirred

			 * egress redirect.

				/* out_dev is NULL when filters with

				 * non-existing mirred device are replayed to

				 * the driver.

				/* Ignore forward to self rules generated

				 * by adding both mlx5 devs to the flow table

				 * block on a normal nft offload setup.

				/* attr->dests[].rep is resolved when we

				 * handle encap

				/* All mlx5 devices are called to configure

				 * high level device filters. Therefore, the

				 * *attempt* to  install a filter on invalid

				 * eswitch should not trigger an explicit error

 Replace vlan pop+push with vlan modify */

 Forward to/from internal port can only have 1 dest */

 always set IP version for indirect table handling */

		/* For prio tag mode, replace vlan pop with rewrite vlan prio

		 * tag rewrite.

		/* It can be supported if we'll create a mapping for

		 * the tunnel device only (without tunnel), and set

		 * this tunnel id with this decap flow.

		 *

		 * On restore (miss), we'll just set this saved tunnel

		 * device.

	/* Allocate sample attribute only when there is a sample action and

	 * no errors after parsing.

 NIC offload */

 actions validation depends on parsing the ct matches first */

	/* in_mdev is assigned of which the packet originated from.

	 * So packets redirected to uplink use the same mdev of the

	 * original flow and packets redirected from uplink use the

	 * peer mdev.

	/* Offloaded flow rule is allowed to duplicate on non-uplink representor

	 * sharing tc block with other slaves of a lag device. Rpriv can be NULL if this

	 * function is called from NIC mode.

		/* Same flow rule offloaded to non-uplink representor sharing tc block,

		 * just return 0.

	/* Flow rule offloaded to non-uplink representor sharing tc block,

	 * set the flow's owner dev.

	/* Only delete the flow if it doesn't have MLX5E_TC_FLOW_DELETED flag

	 * set.

	/* Under multipath it's possible for one rule to be currently

	 * un-offloaded while the other rule is offloaded.

	/* rate is given in bytes/sec.

	 * First convert to bits/sec and then round to the nearest mbit/secs.

	 * mbit means million bits.

	 * Moreover, if rate is non zero we choose to configure to a minimum of

	 * 1 mbit/sec.

	/* Two last values are reserved for stack devices slow path table mark

	 * and bridge ingress push mark.

 CONFIG_NET_TC_SKB_EXT */

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 intf dev list mutex */

			/* Pay attention that this is not PCI driver that

			 * mlx5_core_dev is connected, but auxiliary driver.

			 *

			 * Here we can race of module unload with devlink

			 * reload, but we don't need to take extra lock because

			 * we are holding global mlx5_intf_mutex.

 Auxiliary driver was unbind manually through sysfs */

			/* We continue to rescan drivers and leave to the caller

			 * to make decision if to release everything or continue.

/* This function is used after mlx5_core_dev is reconfigured.

 Must be called with intf_mutex held */

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Loop until device state turns to disable */

 scans component index sequentially, to find the boot img index */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2018 Mellanox Technologies

/* General events handlers for the low level mlx5_core driver

 *

 * Other Major feature specific events such as

 * clock/eswitch/fpga/FW trace and many others, are handled elsewhere, with

 * separate notifiers callbacks, specifically by those mlx5 components.

 handler which forwards the event to events->fw_nh, driver notifiers */

 Events to be processed by mlx5_core */

 Events to be forwarded (as is) to mlx5 core interfaces (mlx5e/mlx5_ib) */

 QP/WQ resource events to forward */

 SRQ events */

 driver notifier chain for fw events */

 port module events stats */

pcie_core*/

 driver notifier chain for sw events */

 handles all FW events, type == eqe->type */

 type == MLX5_EVENT_TYPE_TEMP_WARN_EVENT */

 MLX5_EVENT_TYPE_PORT_MODULE_EVENT */

 type == MLX5_EVENT_TYPE_PORT_MODULE_EVENT */

 forward event as is to registered interfaces (mlx5e/mlx5_ib) */

/* This API is used only for processing and forwarding firmware

 * events to mlx5 consumer.

/* This API is used only for processing and forwarding driver-specific

 * events to mlx5 consumers.

/*

 * Copyright (c) 2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/* state bit set implies linked-list striding RQ wq type and

	 * HW stride index capability supported

 HW stride index capability not supported */

		/* The `recycle` parameter is ignored, and the page is always

		 * put into the Reuse Ring, because there is no way to return

		 * the page to the userspace when the interface goes down.

		/* On first frag (offset == 0), replenish page (dma_info actually).

		 * Other frags that point to the same dma_info (with a different

		 * offset) should just use the new one without replenishing again

		 * by themselves.

		/* Check in advance that we have enough frames, instead of

		 * allocating one-by-one, failing and moving frames to the

		 * Reuse Ring.

 Aligning len to sizeof(long) optimizes memcpy performance */

 A common case for AF_XDP. */

 ensure wqes are visible to device before updating doorbell record */

/* This function returns the size of the continuous free space inside a bitmap

 * that starts from first and no longer than len including circular ones.

	/* Check in advance that we have enough frames, instead of allocating

	 * one-by-one, failing and moving frames to the Reuse Ring.

/* This function is responsible to dealloc SHAMPO header buffer.

 * close == true specifies that we are in the middle of closing RQ operation so

 * we go over all the entries and if they are not in use we free them,

 * otherwise we only go over a specific range inside the header buffer that are

 * not in use.

 Don't recycle, this function is called on rq/netdev close */

 ensure wqes are visible to device before updating doorbell record */

 assume 1:1 relationship between RQ and icosq */

	/* sq->cc must be updated only after mlx5_cqwq_update_db_record(),

	 * otherwise a cq overrun may occur

	/* If XSK Fill Ring doesn't have enough frames, report the error, so

	 * that one of the actions can be performed:

	 * 1. If need_wakeup is used, signal that the application has to kick

	 * the driver when it refills the Fill Ring.

	 * 2. Otherwise, busy poll by rescheduling the NAPI poll.

 Almost done, don't forget the pseudo header */

 Almost done, don't forget the pseudo header */

 Fixup vlan headers, if any */

		/* CQE csum is calculated from the IP header and does

		 * not cover VLAN headers (if present). This will add

		 * the checksum manually.

 Fixup tail padding, if any */

 True when explicitly set via priv flag, or XDP prog is loaded */

	/* CQE csum doesn't cover padding octets in short ethernet

	 * frames. And the pad field is appended prior to calculating

	 * and appending the FCS field.

	 *

	 * Detecting these padded frames requires to verify and parse

	 * IP headers, so we simply force all those small frames to be

	 * CHECKSUM_UNNECESSARY even if they are not padded.

 CQE csum covers all received bytes */

 csum might need some fixups ...*/

		/* Subtract one since we already counted this as one

		 * "regular" packet in mlx5e_complete_rx_cqe()

 checking CE bit in cqe - MSB in ml_path field */

 xdp_frame data area */

 page/packet was consumed by XDP */

 queue up for recycling/reuse */

	/* XDP is not supported in this configuration, as incoming packets

	 * might spread among multiple pages.

 copy header */

 skb linear part was allocated with headlen and aligned to long */

 probably for XDP */

			/* do not return page to cache,

			 * it will be returned on XDP_TX completion.

 probably for XDP */

			/* do not return page to cache,

			 * it will be returned on XDP_TX completion.

 copy header */

 skb linear part was allocated with headlen and aligned to long */

 Check packet size. Note LRO doesn't use linear SKB */

 xdp_frame data area */

 non-atomic */

 page/packet was consumed by XDP */

 queue up for recycling/reuse */

 build SKB around header */

 queue up for recycling/reuse */

 allocate SKB and copy header for large header */

 skb linear part was allocated with headlen and aligned to long */

 ensure cq space is freed before enabling more cqes */

	/* No mapping present, cannot process SKB. This might happen if a child

	 * interface is going down while having unprocessed CQEs on parent RQ

 TODO: add drop counters support */

	/* Drop packets that this interface sent, ie multicast packets

	 * that the HCA has replicated.

 20 bytes of ipoib header and 4 for encap existing */

 Not supported */

 CONFIG_MLX5_CORE_IPOIB */

 a DROP, save the page-reuse checks */

 CONFIG_MLX5_EN_IPSEC */

 MLX5_WQ_TYPE_CYCLIC */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 max irq_index is 2047, so four chars */

 min num of vectors for SFs to be enabled */

 sync IRQs creations */

/**

 * mlx5_get_default_msix_vec_count - Get the default number of MSI-X vectors

 *                                   to be ssigned to each VF.

 * @dev: PF to work on

 * @num_vfs: Number of enabled VFs

	/* Limit maximum number of MSI-X vectors so the default configuration

	 * has some available in the pool. This will allow the user to increase

	 * the number of vectors in a VF without having to first size-down other

	 * VFs.

/**

 * mlx5_set_msix_vec_count - Set dynamically allocated MSI-X on the VF

 * @dev: PF to work on

 * @function_id: Internal PCI VF function IDd

 * @msix_vec_count: Number of MSI-X vectors to set

	/* free_irq requires that affinity and rmap will be cleared

	 * before calling it. This is why there is asymmetry with set_rmap

	 * which should be called after alloc_irq but before request_irq.

 in case we only have a single irq for the device */

		/* Something very bad happens here, we are enabling EQ

		 * on non-existing IRQ.

 irq_pool API */

 creating an irq from irq_pool */

 looking for the irq with the smallest refcount and the same affinity */

 requesting an irq from a given pool according to given affinity */

		/* We failed to create a new IRQ for the requested affinity,

		 * sharing existing IRQ.

 requesting an irq from a given pool according to given index */

/**

 * mlx5_irq_release - release an IRQ back to the system.

 * @irq: irq to be released.

/**

 * mlx5_irq_request - request an IRQ for mlx5 device.

 * @dev: mlx5 device that requesting the IRQ.

 * @vecidx: vector index of the IRQ. This argument is ignore if affinity is

 * provided.

 * @affinity: cpumask requested for this IRQ.

 *

 * This function returns a pointer to IRQ, or ERR_PTR in case of error.

 we don't have IRQs for SFs, using the PF IRQs */

 In case an SF user request IRQ with vecidx */

	/* There are cases in which we are destrying the irq_table before

	 * freeing all the IRQs, fast teardown for example. Hence, free the irqs

	 * which might not have been freed.

 init pf_pool */

 init sf_ctrl_pool */

 init sf_comp_pool */

 irq_table API */

	/* There are cases where IRQs still will be in used when we reaching

	 * to here. Hence, making sure all the irqs are released.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies.

	/* As this is the terminating action then the termination table is the

	 * same prio as the slow path

 push vlan on RX */

 hairpin */

 only vport destinations can be terminated */

 get the terminating table for the action list */

 link the destination with the termination table */

 at least one destination should reference a termination table */

 create the FTE */

	/* revert the changes that were made to the original flow_act

	 * and fall-back to the original rule actions

		/* search for the destination associated with the

		 * current term table

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Copyright (c) 2013-2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Scheduling element fw management */

/* Finds an entry where we can register the given rate

 * If the rate already exists, return the entry where it is registered,

 * otherwise return the first available entry.

 * If the table is full, return NULL

	/* The index represents the index in HW rate limit table

	 * Index 0 is reserved for unlimited rate

 Clear all configured rates */

 new rate limit */

 0 is a reserved value for unlimited rate */

 First entry is reserved for unlimited rate */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020, Mellanox Technologies inc.  All rights reserved. */

 if this is the driver that initiated the fw reset, devlink completed the reload */

	/* Check that all functions under the pci bridge are PFs of

	 * this device otherwise fail this function.

 PCI link toggle */

 Check link */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies */

 no pending version, return running (stored) version */

		/* Reload results in deleting SF device which further results in

		 * unregistering devlink instance while holding devlink_mutext.

		 * Hence, do not support reload.

 Unsupported action should not get to this function */

 On fw_activate action, also driver is reloaded and reinit performed */

 Unsupported action should not get to this function */

/*

 * Copyright (c) 2015-2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Sync with mlx5e_update_num_tc_x_num_ch - avoid refetching. */

 Order maj_id before defcls - pairs with mlx5e_htb_root_add. */

		/* Fix netdev_pick_tx() not to choose ptp_channel and HTB txqs.

		 * If they are selected, switch to regular queues.

		 * Driver to select these queues only at mlx5e_select_ptpsq()

		 * and mlx5e_select_htb_queue().

	/* Normalize any picked txq_ix to [0, num_channels),

	 * So we can return a txq_ix that matches the channel and

	 * packet UP.

 fill wqe */

 Assumes the session is already running and has at least one packet. */

 Might stop the queue and affect the retval of __netdev_tx_sent_queue. */

 Might stop the queue, but we were asked to ring the doorbell anyway. */

 Unlikely in non-MPWQE workloads; not important in MPWQE workloads. */

 May send SKBs and WQEs. */

 May update the WQE, but may not post other WQEs. */

	/* sq->cc must be updated only after mlx5_cqwq_update_db_record(),

	 * otherwise a cq overrun may occur

 avoid dirtying sq cache line every cqe */

 ensure cq space is freed before enabling more cqes */

 fill wqe */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020, Mellanox Technologies inc. All rights reserved. */

/*

 * Copyright (c) 2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/* When migrating CQs between EQs will be implemented, please note

	 * that you need to sync this point. It is possible that

	 * while migrating a CQ, completions on the old EQs could

	 * still arrive.

 assuming CQ will be deleted before the EQ */

 Add to comp EQ CQ tree to recv comp events */

 Add to async EQ CQ tree to recv async events */

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/* Handling for queue buffers -- we allocate a bunch of memory and

 * register it in a memory region at HCA virtual address 0.

 This should never fail -- we just allocated an empty page: */

/*

 * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

Send the command*/

 Set requestor to host endianness */

 we limit the size of the pkey table to 128 entries for now */

 Check log_max_qp from HCA caps to set in current profile */

 disable cmdif checksum */

	/* Enable 4K UAR only when HCA supports it and page size is bigger

	 * than 4K.

/* Cached MLX5_CAP_GEN(dev, roce) can be out of sync this early in the

 * boot process.

 * In case RoCE cap is writable in FW and user/devlink requested to change the

 * cap, we are yet to query the final state of the above cap.

 * Hence, the need for this function.

 *

 * Returns

 * True:

 * 1) RoCE cap is read only in FW and already disabled

 * OR:

 * 2) RoCE cap is writable in FW and user/devlink requested it off.

 *

 * In any other case, return False.

 Disable local_lb by default */

	/* health work might still be active, and it needs pci bar in

	 * order to know the NIC state. Therefore, drain the health WQ

	 * before removing the pci bars

 Only PFs hold the relevant PCIe information for this query */

	/* wait for firmware to accept initialization segments configurations

 remove any previous indication of internal error */

/* wait for the device to show vital signs by waiting

 * for the health counter to start counting.

	/* Panic tear down fw command will stop the PCI bus communication

	 * with the HCA, so the health polll is no longer needed.

	/* Some platforms requiring freeing the IRQ's in the shutdown

	 * flow. If they aren't freed they can't be allocated after

	 * kexec. There is no need to cleanup the mlx5_core software

	 * contexts.

 Connect-IB VF */

 ConnectX-4 VF */

 ConnectX-4LX VF */

 ConnectX-5, PCIe 3.0 */

 ConnectX-5 VF */

 ConnectX-5 Ex */

 ConnectX-5 Ex VF */

 ConnectX-6 */

 ConnectX-6 VF */

 ConnectX-6 Dx */

 ConnectX Family mlx5Gen Virtual Function */

 ConnectX-6 LX */

 ConnectX-7 */

 BlueField integrated ConnectX-5 network controller */

 BlueField integrated ConnectX-5 network controller VF */

 BlueField-2 integrated ConnectX-6 Dx network controller */

 BlueField-3 integrated ConnectX-7 network controller */

/*

 * Copyright (c) 2018 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 FPGA */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies.

	/* Given the MTU and sync_len, calculates an upper bound for the

	 * number of DUMP WQEs needed for the TX resync of a record.

	/* There are the following cases:

	 * 1. packet ends before start marker: bypass offload.

	 * 2. packet starts before start marker and ends after it: drop,

	 *    not supported, breaks contract with kernel.

	 * 3. packet ends before tls record info starts: drop,

	 *    this packet was already acknowledged and its record info

	 *    was released.

 reduce the part which will be sent with the original SKB */

		/* We might get here if a retransmission reaches the driver

		 * after the relevant record is acked.

		 * It should be safe to drop the packet in this case

	/* If no dump WQE was sent, we need to have a fence NOP WQE before the

	 * actual data xmit.

		/* The put_page() here undoes the page ref obtained in tx_sync_info_get().

		 * Page refs obtained for the DUMP WQEs above (by page_ref_add) will be

		 * released only upon their completions (or in mlx5e_free_txqsq_descs,

		 * if channel closes).

/*

 * Copyright (c) 2017 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 key */

 4 bytes salt at end */

 salt and seq_iv */

 iv len */

 esn */

 rx handle */

 algo type */

 action */

 flags */

 spi */

 source , destination ips */

 check esn */

 create xfrm */

 create hw context */

 Offload with IPv4 options is not supported yet */

 Offload with IPv6 extension headers is not support yet */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020, Mellanox Technologies inc. All rights reserved. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020, Mellanox Technologies inc. All rights reserved. */

 ACCEL_FS_IPV6_TCP */

 Default Flow Group */

 Modify ttc rules destination to point back to the indir TIRs */

 Modify ttc rules destination to point on the accel_fs FTs */

/*

 * Copyright (c) 2018 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

/*

 * Copyright (c) 2017 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 1/MSS in 16bit fixed point, only for LSO */

 LSBs of the first TCP seq, only for LSO */

 Next protocol of ESP */

 from FPGA to host, on successful decrypt */

 from host to FPGA */

 packet type ID field	*/

 Pre-calculated (Q0.16) fixed-point inverse 1/x function */

	/* Tunnel Mode:

	 * SWP:      OutL3       InL3  InL4

	 * Pkt: MAC  IP     ESP  IP    L4

	 *

	 * Transport Mode:

	 * SWP:      OutL3       OutL4

	 * Pkt: MAC  IP     ESP  L4

	 *

	 * Tunnel(VXLAN TCP/UDP) over Transport Mode

	 * SWP:      OutL3                   InL3  InL4

	 * Pkt: MAC  IP     ESP  UDP  VXLAN  IP    L4

 Shared settings */

 Tunnel mode */

 Transport mode */

 IP | ESP | TCP */

 Tunnel(VXLAN TCP/UDP) over Transport Mode */

 Place the SN in the IV field */

 Place the SN in the IV field */

 Add LSO metadata indication */

 Use the metadata */

	/* Calculate 1/x inverse table for use in GSO data path.

	 * Using this table, we provide the IPSec accelerator with the value of

	 * 1/gso_size so that it can infer the position of each segment inside

	 * the GSO, and increment the ESP sequence number, and generate the IV.

	 * The HW needs this value in Q0.16 fixed-point number format

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020, Mellanox Technologies inc. All rights reserved. */

 protect ESP4/ESP6 protocol */

 Protect IPsec TX steering */

 IPsec RX flow steering */

 Action to copy 7 bit ipsec_syndrome to regB[24:30] */

 create fte */

 Create FT */

 Create miss_group */

 Create miss rule */

 The netdev unreg already happened, so all offloaded rule are already removed */

 create FT */

 connect */

 disconnect */

 remove FT */

 IPsec TX flow steering */

 ip_version */

 Non fragmented */

 ESP header */

 SPI number */

 Set bit[31] ipsec marker */

 Set bit[23-0] ipsec_obj_id */

 Add IPsec indicator in metadata_reg_a */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies.

 resync */

 protects resync fields */

 protects list changes */

 Re-sync */

 Runs in work context */

/* Function is called with elevated refcount.

 * It decreases it only if no WQE is posted.

/* Function can be called with the refcount being either elevated or not.

 * It does not affect the refcount.

/* Function can be called with the refcount being either elevated or not.

 * It decreases the refcount and may free the kTLS priv context.

 * Refcount is not elevated only if tls_dev_del has been called, but GET_PSV was

 * already in flight.

/* Runs in NAPI.

 * Function elevates the refcount, unless no work is queued.

 Runs in NAPI */

 End of resync section */

 CQE_TLS_OFFLOAD_ERROR: */

 Sync with NAPI */

		/* completion is needed, as the priv_rx in the add flow

		 * is maintained on the wqe info (wi), not on the socket.

	/* priv_rx should normally be freed here, but if there is an outstanding

	 * GET_PSV, deallocation will be delayed until the CQE for GET_PSV is

	 * processed.

		/* This happens only if ICOSQ is full.

		 * There is no need to mark busy or explicitly ask for a NAPI cycle,

		 * it will be triggered by the outstanding ICOSQ completions.

/*

 * Copyright (c) 2017 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies.

/*

 * Copyright (c) 2018 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 One byte of syndrome followed by 3 bytes of swid */

 from fpga to host */

 from host to fpga */

 packet type ID field	*/

	/* MLX5 devices don't care about the checksum partial start, offset

	 * and pseudo header

		/* We might get here if a retransmission reaches the driver

		 * after the relevant record is acked.

		 * It should be safe to drop the packet in this case

			/* SKB payload doesn't require offload

 FPGA */

 FPGA tls rx handler */

 Use the metadata */

 Authentication failure will be observed and verified by kTLS */

 Bypass the metadata header to others */

 FPGA */

 Resync SKB. */

/*

 * Copyright (c) 2018 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

	/* There is no guarantee on the order between the TX completion

	 * and the command response.

	 * The TX completion is going to touch cmd->buf even in

	 * the case of successful transmission.

	 * So instead of requiring separate allocations for cmd

	 * and cmd->buf we've decided to use a reference counter

	/* mlx5_fpga_sbu_conn_sendmsg is called under pending_cmds_lock

	 * to make sure commands are inserted to the tls->pending_cmds list

	 * and the command QP in the same order.

 Start of context identifiers range (inclusive) */

 End of context identifiers range (exclusive) */

	/* TLS metadata format is 1 byte for syndrome followed

	 * by 3 bytes of swid (software ID)

	 * swid must not exceed 3 bytes.

	 * See tls_rxtx.c:insert_pet() for details

 before kfree(flow) */

 If we failed to send to command resp == NULL */

		/* The process was killed while waiting for the context to be

		 * added, and the add completed successfully.

		 * We need to destroy the HW context, and we can't can't reuse

		 * the command context because we might not have received

		 * the tx completion yet.

 ctx is going to be released in mlx5_fpga_tls_setup_completion */

 in AES-GCM 128 we need to write the key twice */

/*

 * Copyright (c) 2017 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 Item in pending_cmds */

 xfrm lock */

	/* Keep out "cmd" field from the key as it's

	 * value is not constant during the lifetime

	 * of the key object.

 Protects pending_cmds */

	/* Map hardware SA           -->  SA context

	 *     (mlx5_fpga_ipsec_sa)       (mlx5_fpga_ipsec_sa_ctx)

	 * We will use this hash to avoid SAs duplication in fpga which

	 * aren't allowed

 hw_sa -> mlx5_fpga_ipsec_sa_ctx */

	/* Tree holding all rules for this fpga device

	 * Key for searching a rule (mlx5_fpga_ipsec_rule) is (ft, id)

 rules lock */

 Context should be freed by the caller after completion. */

 Each counter is low word, then high. But each word is big-endian */

 key */

 Duplicate 128 bit key twice according to HW layout */

 salt and seq_iv */

 esn */

 rx handle */

 enc mode */

 flags */

 IPs */

 SPI */

 flags */

 alloc SA */

 build candidate SA */

 multiple rules for same accel_xfrm */

 all rules must be with same IPs and SPI */

 This is unbounded fpga_xfrm, try to add to hash */

		/* Can't bound different accel_xfrm to already existing sa_ctx.

		 * This is because we can't support multiple ketmats for

		 * same IPs and SPI

 Bound accel_xfrm to sa_ctx */

 validate */

 get xfrm context */

 IPs */

 SPI */

 create */

 Figure out where to put new node */

 Add new node and rebalance tree. */

 ingress */

 egress */

 assuming no sa_ctx are connected to this xfrm_ctx */

 Unbounded xfrm, change only sw attrs */

 copy original hw sa */

 remove original hw sa from hash */

 update hw_sa with new xfrm attrs*/

 try to insert new hw_sa to hash */

 modify device with new hw_sa */

 return original hw_sa to hash */

/*

 * Copyright (c) 2017 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

/*

 * Copyright (c) 2017, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Copyright (c) 2017 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 RoCE PKEY 0xFFFF is always at index 0 */

 Make sure that descriptors are written before doorbell record. */

 ensure wqe is visible to device before updating doorbell record */

 Make sure that doorbell record is visible before ringing */

 Handle backlog still under the spinlock to ensure message post order */

 ensure cq space is freed before enabling more cqes */

 ~1.07s */

 Infinite retry if RNR NACK */

 Build Modified EUI-64 IPv6 address from the MAC address */

	/* Allow for one cqe per rx/tx wqe, plus one cqe for the next wqe,

	 * created during processing of the cqe

/*

 * Copyright (c) 2017, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 for FPGA lookaside projects FPGA load status is not important */

 No QPs if FPGA does not participate in net processing */

	/* We tear-down the card's interfaces and functionality because

	 * the FPGA bump-on-the-wire is misbehaving and we lose ability

	 * to communicate with the network. User may still be able to

	 * recover by re-programming or debugging the FPGA

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

/*

 * Copyright (c) 2017, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Copyright (c) 2018, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Strings database is aligned to 64, need to read leftovers*/

 add it to the hash */

 replace %llx with %x%x */

 count all the % characters */

 remove it from hash */

 trace with no params */

 keep the new parameter */

 Copy the block to local buffer to avoid HW override while being processed */

 Check block override if it's not the first block */

			/* To avoid block override be the HW in case of buffer

			 * wraparound, the time stamp of the previous block

			 * should be compared to the last timestamp handled

			 * by the driver.

			/* If previous timestamp different from last stored

			 * timestamp then there is a good chance that the

			 * current buffer is overwritten and therefore should

			 * not be parsed.

 Parse events */

 Don't fail since ownership can be acquired on a later FW event */

 enable tracer & trace events */

 Create software resources (Buffers, etc ..) */

 Create HW resources + start tracer */

 Stop tracer + Cleanup HW resources */

 Free software resources (Buffers, etc ..) */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies */

 Verify no other PF is running cr-dump or sw reset */

 Check if space is supported and get space size */

 Unlock and mask error since space is not supported */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

/*

 * Copyright (c) 2016, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/* General purpose, use for short periods of time.

 * Beware of lock dependencies (preferably, no locks should be acquired

 * under it).

 VF LAG is in multipath mode, ignore bond change requests */

	/* The event may still be of interest if the slave does not belong to

	 * us, but is enslaved to a master which has one or more of our netdevs

	 * as slaves (e.g., if a new slave is added to a master that bonds two

	 * of our netdevs, we should unbond).

 None of this lagdev's netdevs are slaves of this master. */

	/* Determine bonding status:

	 * A device is considered bonded if both its physical ports are slaves

	 * of the same lag master, and only them.

 Lag mode must be activebackup or hash. */

	/* This information is used to determine virtual to physical

	 * port mapping.

 Must be called with intf_mutex held */

 Must be called with intf_mutex held */

 Must be called with intf_mutex held */

 Must be called with intf_mutex held */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021, NVIDIA CORPORATION & AFFILIATES. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

/**

 * mlx5_lag_set_port_affinity

 *

 * @ldev: lag device

 * @port:

 *     0 - set normal affinity.

 *     1 - set affinity to port 1.

 *     2 - set affinity to port 2.

 *

 Handle delete event */

 stop track */

 Handle add/replace event */

 Verify next hops are ports of the same hca */

 First time we see multipath route */

 Check the nh event is related to the route */

 nh added/removed */

 peer port */

 Protect internal structures from changes */

		/* Take reference on fib_info to prevent it from being

		 * freed while work is queued. Release it afterwards.

	/* Clear mfi, as it might become stale when a route delete event

	 * has been missed, see mlx5_lag_fib_route_event().

	/* always clear mfi, as it might become stale when a route delete event

	 * has been missed

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Ltd */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Ltd */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Ltd */

 Serializes sf deletion and vhca state change handler. */

		/* If this SF is for external controller, SF manager

		 * needs to arm firmware to receive the events.

	/* SF driver notified through firmware that SF is finally detached.

	 * Hence recycle the sf hardware id for reuse.

 Dealloc SFs whose firmware event has been missed. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Ltd */

 To refer from notifier context. */

 port index based lookup. */

 Serializes sf state among user cmds & vhca event handler. */

		/* Even if its active, it is treated as in_use because by the time,

		 * it is disabled here, it may getting used. So it is safe to

		 * always look for the event to ensure that it is recycled only after

		 * firmware gives confirmation that it is detached by the driver.

	/* When driver is attached or detached to a function, an event

	 * notifies such state change.

	/* At this point, no new user commands can start and no vhca event can

	 * arrive. It is safe to destroy all user created SFs.

	/* Balances with refcount_set; drop the reference so that new user cmd cannot start

	 * and new vhca event handler cannot run.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Ltd */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Ltd */

 Arm the vhca context as the vhca event notifier */

	/* Now that event handler is not running, it is safe to destroy

	 * the sf device without race.

/*

 * Copyright (c) 2017, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 IPoIB mlx5 netdev profile */

 Override RQ params as IPoIB supports only LINKED LIST RQ for now */

 RQ size in ipoib by default is 512 */

 Called directly after IPoIB netdevice was created to initialize SW structs */

 netdev init */

 Called directly before IPoIB netdevice is destroyed to cleanup SW structs */

 The stats groups order is opposite to the update_stats() order calls */

 mlx5i_enable */

 mlx5i_disable */

 mlx5i_update_stats */

 no HW update in IB link */

 mlx5i netdev NDos */

 Set dev address using underlay QP */

 Add QPN to net-device mapping to HT */

 Delete QPN to net-device mapping from HT */

	/* May already be CLOSED in case a previous configuration operation

	 * (e.g RX/TX queue size change) that involves close&open failed.

 IPoIB RDMA netdev callbacks */

 This should only be called once per mdev */

 set rdma_netdev func pointers */

/*

 * Copyright (c) 2017, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Copyright (c) 2017, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Synchronise with NAPI */

 Child NDOs */

 Get QPN to netdevice hash table from parent */

 Called directly after IPoIB netdevice was created to initialize SW structs */

 Override parent ndo */

 Set child limited ethtool support */

 Use dummy rqs */

 Called directly before IPoIB netdevice is destroyed to cleanup SW structs */

	/* Since the rx resources are shared between child and parent, the

	 * parent interface is taking care of rx resource allocation and init

	/* Since the rx resources are shared between child and parent, the

	 * parent interface is taking care of rx resource free and de-init

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2018 Mellanox Technologies. */

 the HW does not calculate GRE csum or sequences */

 GRE key */

 gre protocol */

 gre key */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies

 a node of a hash table which keeps all the mod_hdr entries */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2018 Mellanox Technologies. */

	/* Currently we support only default GENEVE

	 * port, so udp dst port must match.

	/* Reformat type for GENEVE encap is similar to VXLAN:

	 * in both cases the HW adds in the same place a

	 * defined encapsulation header that the SW provides.

 make sure that we're talking about GENEVE options */

	/* max_geneve_tlv_option_data_len comes in multiples of 4 bytes, and it

	 * doesn't include the TLV option header. 'geneve_opt_len' is a total

	 * len of all the options, including the headers, also multiples of 4

	 * bytes. Len that comes from the dissector is in bytes.

 we support matching on one option only, so just get it */

 data can't be all 0 - fail to offload such rule */

 add new GENEVE TLV options object */

	/* In general, after creating the object, need to query it

	 * in order to check which option data to set in misc3.

	 * But we support only geneve_tlv_option_0_data, so no

	 * point querying at this stage.

 match on OAM - packets with OAM bit on should NOT be offloaded */

 Match on GENEVE protocol. We support only Transparent Eth Bridge. */

 keys are equal when both don't have any options attached */

 geneve options stored in memory next to ip_tunnel_info struct */

/*

 * Copyright (c) 2018, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/* Let S := SKB_DATA_ALIGN(sizeof(struct skb_shared_info)).

	 * The condition checked in mlx5e_rx_is_linear_skb is:

	 *   SKB_DATA_ALIGN(sw_mtu + hard_mtu + hr) + S <= PAGE_SIZE         (1)

	 *   (Note that hw_mtu == sw_mtu + hard_mtu.)

	 * What is returned from this function is:

	 *   max_mtu = PAGE_SIZE - S - hr - hard_mtu                         (2)

	 * After assigning sw_mtu := max_mtu, the left side of (1) turns to

	 * SKB_DATA_ALIGN(PAGE_SIZE - S) + S, which is equal to PAGE_SIZE,

	 * because both PAGE_SIZE and S are already aligned. Any number greater

	 * than max_mtu would make the left side of (1) greater than PAGE_SIZE,

	 * so max_mtu is the maximum MTU allowed.

		/* The xdp_buff was in the UMEM and was copied into a newly

		 * allocated page. The UMEM page was returned via the ZCA, and

		 * this new page has to be mapped at this point and has to be

		 * unmapped and returned via xdp_return_frame on completion.

		/* Prevent double recycling of the UMEM page. Even in case this

		 * function returns false, the xdp_buff shouldn't be recycled,

		 * as it was already done in xdp_convert_zc_to_xdp_frame.

 non-atomic */

		/* Driver assumes that xdp_convert_buff_to_frame returns

		 * an xdp_frame that points to the same memory region as

		 * the original xdp_buff. It allows to map the memory only

		 * once and to use the DMA_BIDIRECTIONAL mode.

 returns true if packet was consumed by xdp */

 non-atomic */

 When XDP enabled then page-refcnt==1 here */

 Fill SQ frag edge with NOPs to avoid WQE wrapping two pages. */

 Close session */

 SQ is full, ring doorbell */

		/* Start the session when nothing can fail, so it's guaranteed

		 * that if there is an active session, it has at least one dseg,

		 * and it's safe to complete it at any time.

 SQ is full, ring doorbell */

 copy the inline part if required */

 write the dma part */

 XDP_TX from the XSK RQ and XDP_REDIRECT */

 XDP_TX from the regular RQ */

 AF_XDP send */

	/* sq->cc must be updated only after mlx5_cqwq_update_db_record(),

	 * otherwise a cq overrun may occur

 ensure cq space is freed before enabling more cqes */

 need for xdp_return_frame_bulk */

 this flag is sufficient, no need to test internal sq state */

/*

 * Copyright (c) 2018, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 speed in units of 1Mb */

 buffer[i]: buffer that priority i mapped to */

 First query the pptb register */

 Update the pm and prio_x_buff */

 get/set FEC admin field for a given speed */

 returns FEC capabilities for a given speed */

		/* RS fec in ethtool is mapped to MLX5E_FEC_RS_528_514

		 * to link modes up to 25G per lane and to

		 * MLX5E_FEC_RS_544_514 in the new link modes based on

		 * 50 G per lane

 policy supported for link speed */

 set FEC to auto*/

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021, Mellanox Technologies inc. All rights reserved. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 AF_XDP doesn't build SKBs in place. */

	/* XDP in mlx5e doesn't support multiple packets per page. AF_XDP is a

	 * special case. It can run with frames smaller than a page, as it

	 * doesn't allocate pages dynamically. However, here we pretend that

	 * fragments are page-sized: it allows to treat XSK frames like pages

	 * by redirecting alloc and free operations to XSK rings and by using

	 * the fact there are no multiple packets per "page" (which is a frame).

	 * The latter is important, because frames may come in a random order,

	 * and we will have trouble assemblying a real page of multiple frames.

	/* Even if we can go with a smaller fragment size, we must not put

	 * multiple packets into a single frame.

	/* AF_XDP allocates SKBs on XDP_PASS - ensure they don't occupy more

	 * than one page. For this, check both with and without xsk.

 Numbers are unsigned, don't subtract to avoid underflow. */

		/* A MPWQE can take up to the maximum-sized WQE + all the normal

		 * stop room can be taken if a new packet breaks the active

		 * MPWQE session and allocates its WQEs right away.

		/* XSK params are not considered here. If striding RQ is in use,

		 * and an XSK is being opened, mlx5e_rx_mpwqe_is_linear_skb will

		 * be called with the known XSK params.

	/* Prefer Striding RQ, unless any of the following holds:

	 * - Striding RQ configuration is not possible/supported.

	 * - Slow PCI heuristic.

	 * - Legacy RQ would use linear SKB while Striding RQ would use non-linear.

	 *

	 * No XSK params: checking the availability of striding RQ in general.

 Build queue parameters */

 number of different wqes sharing a page */

 MLX5_WQ_TYPE_CYCLIC */

	/* +1 is for the case that the pkt_per_rsrv dont consume the reservation

	 * so we get a filler cqe for the rest of the reservation.

 MLX5_WQ_TYPE_CYCLIC */

 MLX5_WQ_TYPE_CYCLIC */

/* This function calculates the maximum number of headers entries that are needed

 * per WQE, the formula is based on the size of the reservations and the

 * restriction we have about max packets for reservation that is equal to max

 * headers per reservation.

 Assumption: hd_per_wqe % 8 == 0. */

/* This function calculates the maximum number of headers entries that are needed

 * for the WQ, this value is uesed to allocate the header buffer in HW, thus

 * must be a pow of 2.

 MLX5_WQ_TYPE_CYCLIC */

 for XSK NOP */

 for TLS RX resync NOP */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB */

 Copyright (c) 2018 Mellanox Technologies. */

	/* mlx5_lag_is_sriov() is a blocking function which can't be called

	 * while holding rcu read lock. Take the net_device for correctness

	 * sake.

	/* if the egress device isn't on the same HW e-switch or

	 * it's a LAG device, use the uplink

 add the IP fields */

	/* It's important to add the neigh to the hash table before checking

	 * the neigh validity state. So if we'll get a notification, in case the

	 * neigh changes it's validity state, we would find the relevant neigh

	 * in the hash.

 add ethernet header */

 add ip header */

 add tunneling protocol header */

		/* the encap entry will be made valid on neigh update event

		 * and not used before that.

 add the IP fields */

 add ethernet header */

 add ip header */

 add tunneling protocol header */

		/* the encap entry will be made valid on neigh update event

		 * and not used before that.

	/* It's important to add the neigh to the hash table before checking

	 * the neigh validity state. So if we'll get a notification, in case the

	 * neigh changes it's validity state, we would find the relevant neigh

	 * in the hash.

 add ethernet header */

 add ip header */

 the HW fills up ipv6 payload len */

 add tunneling protocol header */

		/* the encap entry will be made valid on neigh update event

		 * and not used before that.

 add ethernet header */

 add ip header */

 the HW fills up ipv6 payload len */

 add tunneling protocol header */

		/* the encap entry will be made valid on neigh update event

		 * and not used before that.

 Addresses are swapped for decap */

 Addresses are swapped for decap */

 For tunnel addr_type used same key id`s as for non-tunnel */

 let software handle IP fragments */

 Full udp dst port must be given */

 match on UDP protocol and dst port number */

	/* UDP src port on outer header is generated by HW,

	 * so it is probably a bad idea to request matching it.

	 * Nonetheless, it is allowed.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies

 Maximal allowed diff is 1 / 128 second */

	/* If both CQEs arrive, check and report the port tstamp, and clear skb cb as

	 * skb soon to be released.

 ensure cq space is freed before enabling more cqes */

 SQ */

 RQ */

 set == false */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021, Mellanox Technologies inc. All rights reserved. */

			/* Could be a bug in the driver or in the kernel part of

			 * ethtool: indir table refers to non-existent RQs.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2018 Mellanox Technologies

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2018 Mellanox Technologies */

 Guards hashtable and xarray */

 Guards pending list */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2018 Mellanox Technologies. */

 check the UDP destination port validity */

 match on VNI is required */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021, Mellanox Technologies inc. All rights reserved. */

 FS_IPV6_UDP */

 FS_IPV6_UDP */

 Match on udp protocol, Ipv4/6 and dport */

 Default Flow Group */

 Modify ttc rules destination to point back to the indir TIRs */

 Modify ttc rules destination to point on the accel_fs FTs */

 Match on ethertype */

 Default Flow Group */

 Modify ttc rules destination to point back to the indir TIRs */

 Modify ttc rules destination to point on the accel_fs FTs */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2019 Mellanox Technologies.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2018 Mellanox Technologies. */

 Only support matching the first LSE */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021, Mellanox Technologies inc. All rights reserved. */

 API for rx_res_rss_* */

 Updates the indirection table SW shadow, does not update the HW resources yet */

 End of API rx_res_rss_* */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 guards parallel adds/dels */

 protects ft entries */

	/* Make another copy of zone id in reg_b for

	 * NIC rx flows since we don't copy reg_c1 to

	 * reg_b upon miss.

 Handled earlier */

 get the reversed tuple */

 Use the same counter as the reverse direction */

 this function reference */

 add flow rule */

 add miss rule */

 create flow group */

 create miss group */

/* To avoid false lock dependency warning set the ct_entries_ht lock

 * class different than the lock class of the ht being used when deleting

 * last flow from a group and then deleting a group, we get into del_sw_flow_group()

 * which call rhashtable_destroy on fg->ftes_hash which will take ht->mutex but

 * it's different than the ht->mutex here.

/* We translate the tc filter with CT action to the following HW model:

 *

 * +---------------------+

 * + ft prio (tc chain) +

 * + original match      +

 * +---------------------+

 *      | set chain miss mapping

 *      | set fte_id

 *      | set tunnel_id

 *      | do decap

 *      v

 * +---------------------+

 * + pre_ct/pre_ct_nat   +  if matches     +-------------------------+

 * + zone+nat match      +---------------->+ post_act (see below) +

 * +---------------------+  set zone       +-------------------------+

 *      | set zone

 *      v

 * +--------------------+

 * + CT (nat or no nat) +

 * + tuple + zone match +

 * +--------------------+

 *      | set mark

 *      | set labels_id

 *      | set established

 *	| set zone_restore

 *      | do nat (if needed)

 *      v

 * +--------------+

 * + post_act  + original filter actions

 * + fte_id match +------------------------>

 * +--------------+

 Register for CT established events */

 Base flow attributes of both rules on original rule attribute */

 Modify the original rule's action to fwd and modify, leave decap */

	/* Write chain miss tag for miss in ct table as we

	 * don't go though all prios of this chain as normal tc rules

	 * miss.

	/* If original flow is decap, we do it before going into ct table

	 * so add a rewrite for the tunnel match_id.

 Change original rule point to ct table */

 Base esw attributes on original rule attribute */

	/* We are called on error to clean up stuff from parsing

	 * but we don't have anything for now

		/* vlan workaround should be avoided for multi chain rules.

		 * This is just a sanity check as pop vlan action should

		 * be supported by any FW that supports ignore_flow_level

		/* CT always writes to registers which are mod header actions.

		 * Therefore, mod header and goto is required

 cannot restore chain ID on HW miss */

		/* Ignore_flow_level support isn't supported by default for VFs and so post_act

		 * won't be supported. Skip showing error msg.

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2019 Mellanox Technologies.

 At this point, both the rq and the icosq are disabled */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021 Mellanox Technologies. */

 protects route_tbl */

	/* Only set the flag if both src and dst ip addresses exist. They are

	 * required to establish routing.

	/* Flow can be associated with multiple encap entries.

	 * Before offloading the flow verify that all of them have

	 * a valid neighbour.

 Do not offload flows with unresolved neighbors */

 update from slow path rule to encap rule */

 was unset when slow path rule removed */

 update from encap rule to slow path rule */

 mark the flow's encap dest as non-valid */

 was unset when fast path rule removed */

 we know that the encap is valid */

		/* Flow is being deleted concurrently. Wait for it to be

		 * unoffloaded from hardware, otherwise deleting encap will

		 * fail.

/* Takes reference to all flows attached to encap and adds the flows to

 * flow_list using 'tmp_list' list_head in mlx5e_tc_flow.

/* Takes reference to all flows attached to route and adds the flows to

 * flow_list using 'tmp_list' list_head in mlx5e_tc_flow.

 find encap with non-zero reference counter value */

 release starting encap */

 wait for encap to be fully initialized */

 continue searching if encap entry is not in valid state after completion */

	/* mlx5e_get_next_valid_encap() releases previous encap before returning

	 * next one.

 release current encap before breaking the loop */

		/* find the relevant neigh according to the cached device and

		 * dst ip pair

 flow wasn't fully initialized */

 must verify if encap is valid or not */

 Check that entry was not already attached to this flow */

 Protect against concurrent neigh update. */

 Protect against concurrent neigh update. */

		/* If device doesn't support int port offload,

		 * redirect to uplink vport.

	/* Routing changed concurrently. FIB event handler might have missed new

	 * entry, schedule update.

	/* Routing changed concurrently. FIB event handler might have missed new

	 * entry, schedule update.

 update from slow path rule to encap rule */

 mark the flow's encap dest as non-valid */

 sync with concurrent neigh updates */

	/* Can't fail after this point because releasing reference to r

	 * requires obtaining sleeping mutex which we can't do in atomic

	 * context.

	/* Can't fail after this point because releasing reference to r

	 * requires obtaining sleeping mutex which we can't do in atomic

	 * context.

 flush fib event works */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020, Mellanox Technologies inc.  All rights reserved. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020, Mellanox Technologies inc. All rights reserved. */

 Software representation of the QoS tree (internal to this file) */

 16-bit, except root. */

 TX datapath API */

	/* These channel params are safe to access from the datapath, because:

	 * 1. This function is called only after checking priv->htb.maj_id != 0,

	 *    and the number of queues can't change while HTB offload is active.

	 * 2. When priv->htb.maj_id becomes 0, synchronize_rcu waits for

	 *    mlx5e_select_queue to finish while holding priv->state_lock,

	 *    preventing other code from changing the number of queues.

 SQ lifecycle */

		/* Order max_qos_sqs increment after writing the array pointer.

		 * Pairs with smp_load_acquire in en_stats.c.

	/* Make the change to txq2sq visible before the queue is started.

	 * As mlx5e_xmit runs under a spinlock, there is an implicit ACQUIRE,

	 * which pairs with this barrier.

 Handle the case when the SQ failed to open. */

 The queue is disabled, no synchronization with datapath is needed. */

 Handle the case when the SQ failed to open. */

 Sync with NAPI. */

 Sync with NAPI. */

 Handle the case when the SQ failed to open. */

 Pairs with mlx5e_napi_poll. */

 Sync with NAPI. */

 Handle the case when the SQ failed to open. */

 The queue is disabled, no synchronization with datapath is needed. */

 HTB API */

	/* Order maj_id after defcls - pairs with

	 * mlx5e_select_queue/mlx5e_select_htb_queues.

 Sync with mlx5e_select_htb_queue and TX data path. */

 Intentionally reuse the qid for the upcoming first child. */

 No fail point. */

 Pairs with mlx5e_get_txq_by_classid. */

 Not fatal. */

 Not fatal. */

 Store qid for reuse. */

 Not fatal. */

 The last QoS SQ was just destroyed. */

 The highest QoS SQ was just destroyed. */

 Stop traffic to the old queue. */

 Prevent packets from the old class from getting into the new one. */

 Store qid for reuse and prevent clearing the bit. */

 Pairs with mlx5e_get_txq_by_classid. */

 Prevent packets from the old class from getting into the new one. */

 Not fatal. */

	/* Early return on error in force mode. Parent will still be an inner

	 * node to be deleted by a following delete operation.

 Not fatal. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021, NVIDIA CORPORATION & AFFILIATES.

/* Fill the "tirn" output parameter.

 * Create the requested TIR if it's its first usage.

 TIR doesn't exist, create one */

		/* Partial update happened. Try to revert - it may fail too, but

		 * there is nothing more we can do.

 SPDX-License-Identifier: GPL-2.0 */

 Copyright (c) 2018 Mellanox Technologies. */

/* Driver will set the following watch counters list:

 * Ppcnt.802_3:

 * a_in_range_length_errors      Type: 0x0, Counter:  0x0, group_id = N/A

 * a_out_of_range_length_field   Type: 0x0, Counter:  0x1, group_id = N/A

 * a_frame_too_long_errors       Type: 0x0, Counter:  0x2, group_id = N/A

 * a_frame_check_sequence_errors Type: 0x0, Counter:  0x3, group_id = N/A

 * a_alignment_errors            Type: 0x0, Counter:  0x4, group_id = N/A

 * if_out_discards               Type: 0x0, Counter:  0x5, group_id = N/A

 * Q_Counters:

 * Q[index].rx_out_of_buffer   Type: 0x1, Counter:  0x4, group_id = counter_ix

 check if mlx5e_monitor_counter_supported before calling this function*/

 check if mlx5e_monitor_counter_supported before calling this function*/

 check if mlx5e_monitor_counter_supported before calling this function*/

 SPDX-License-Identifier: GPL-2.0 */

 Copyright (c) 2019 Mellanox Technologies. */

	/* At this point, no new packets will arrive from the stack as TXQ is

	 * marked with QUEUE_STATE_DRV_XOFF. In addition, NAPI cleared all

	 * pending WQEs. SQ can safely reset the SQ.

 this sq recovered */

 all channels recovered */

/* state lock cannot be grabbed within this function.

 * It can cause a dead lock or a read-after-free.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies */

	/* Traps are unarmed when interface is down, no need to update

	 * them. The configuration is saved in the core driver,

	 * queried and applied upon interface up operation in

	 * mlx5e_open_locked().

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021, Mellanox Technologies inc. All rights reserved. */

 max() doesn't work inside square brackets. */

	/* Skip mutex if list_del is no-op (the TIR wasn't registered in the

	 * list). list_empty will never return true for an item of tirs_list,

	 * and READ_ONCE/WRITE_ONCE in list_empty/list_del guarantee consistency

	 * of the list->next value.

/*

 * Copyright (c) 2018, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/* xoff = ((301+2.16 * len [m]) * speed [Gbps] + 2.72 MTU [B])

 * minimum speed value is 40Gbps

/**

 *	update_buffer_lossy	- Update buffer configuration based on pfc

 *	@max_mtu: netdev's max_mtu

 *	@pfc_en: <input> current pfc configuration

 *	@buffer: <input> current prio to buffer mapping

 *	@xoff:   <input> xoff value

 *	@port_buff_cell_sz: <input> port buffer cell_size

 *	@port_buffer: <output> port receive buffer configuration

 *	@change: <output>

 *

 *	Update buffer configuration based on pfc configuration and

 *	priority to buffer mapping.

 *	Buffer's lossy bit is changed to:

 *		lossless if there is at least one PFC enabled priority

 *		mapped to this buffer lossy if all priorities mapped to

 *		this buffer are PFC disabled

 *

 *	@return: 0 if no error,

 *	sets change to true if buffer configuration was modified.

 lossy_count < prio_count */

	/* If global pause enabled, set all active buffers to lossless.

	 * Otherwise, check PFC setting.

 Need to update buffer configuration if xoff value is changed */

 Apply the settings */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

/* It matches XDP_UMEM_MIN_CHUNK_SIZE, but as this constant is private and may

 * change unexpectedly, and mlx5e has a minimum valid stride size for striding

 * RQ, keep this check in the driver.

 AF_XDP doesn't support frames larger than PAGE_SIZE. */

 Current MTU and XSK headroom don't allow packets to fit the frames. */

	/* frag_sz is different for regular and XSK RQs, so ensure that linear

	 * SKB mode is possible.

 MLX5_WQ_TYPE_CYCLIC */

	/* Create a separate SQ, so that when the buff pool is disabled, we could

	 * close this SQ safely and stop receiving CQEs. In other case, e.g., if

	 * the XDPSQ was used instead, we might run into trouble when the buff pool

	 * is disabled and then re-enabled, but the SQ continues receiving CQEs

	 * from the old buff pool.

 Sync with the XSK wakeup and with NAPI. */

 TX queue is created active. */

 TX queue is disabled on close. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 RX data path */

 Check packet size. Note LRO doesn't use linear SKB */

	/* head_offset is not used in this function, because xdp->data and the

	 * DMA address point directly to the necessary place. Furthermore, in

	 * the current implementation, UMR pages are mapped to XSK frames, so

	 * head_offset should always be 0.

	/* Possible flows:

	 * - XDP_REDIRECT to XSKMAP:

	 *   The page is owned by the userspace from now.

	 * - XDP_TX and other XDP_REDIRECTs:

	 *   The page was returned by ZCA and recycled.

	 * - XDP_DROP:

	 *   Recycle the page.

	 * - XDP_PASS:

	 *   Allocate an SKB, copy the data and recycle the page.

	 *

	 * Pages to be recycled go to the Reuse Ring on MPWQE deallocation. Its

	 * size is the same as the Driver RX Ring's size, and pages for WQEs are

	 * allocated first from the Reuse Ring, so it has enough space.

 non-atomic */

 page/packet was consumed by XDP */

	/* XDP_PASS: copy the data from the UMEM to a new SKB and reuse the

	 * frame. On SKB allocation failure, NULL is returned.

	/* wi->offset is not used in this function, because xdp->data and the

	 * DMA address point directly to the necessary place. Furthermore, the

	 * XSK allocator allocates frames per packet, instead of pages, so

	 * wi->offset should always be 0.

 page/packet was consumed by XDP */

	/* XDP_PASS: copy the data from the UMEM to a new SKB. The frame reuse

	 * will be handled by mlx5e_put_rx_frag.

	 * On SKB allocation failure, NULL is returned.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019-2020, Mellanox Technologies inc. All rights reserved. */

 XSK objects will be created on open. */

		/* XSK objects will be created when an XDP program is set,

		 * and the channels are reopened.

	/* Don't wait for WQEs, because the newer xdpsock sample doesn't provide

	 * any Fill Ring entries at the setup stage.

	/* Check the configuration in advance, rather than fail at a later stage

	 * (in mlx5e_xdp_set or on open) and end up with no channels.

 XSK RQ and SQ are only created if XDP program is set. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

		/* To avoid WQE overrun, don't post a NOP if async_icosq is not

		 * active and not polled by NAPI. Return 0, because the upcoming

		 * activate will trigger the IRQ for us.

/* When TX fails (because of the size of the packet), we need to get completions

 * in order, so post a NOP to get a CQE. Since AF_XDP doesn't distinguish

 * between successful TX and errors, handling in mlx5e_poll_xdpsq_cq is the

 * same.

			/* TX will get stuck until something wakes it up by

			 * triggering NAPI. Currently it's expected that the

			 * application calls sendto() if there are consumed, but

			 * not completed frames.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies. */

	/* If these parameters are changed after we release the lock,

	 * we'll receive another event letting us know about it.

	 * We use this lock to avoid inconsistency between the neigh validity

	 * and it's hw address.

	/* mlx5e_get_next_init_encap() releases previous encap before returning

	 * the next one.

	/* Obtain reference to nhe as last step in order not to release it in

	 * atomic context.

		/* We check the device is present since we don't care about

		 * changes in the default table, we only care about changes

		 * done per device delay prob time parameter.

 flush neigh update works */

/* This function must only be called under the representor's encap_lock or

 * inside rcu read lock section.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021 Mellanox Technologies. */

 only handle the event on native eswtich of representor */

 only handle the event on peers */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies. */

		/* Update the encap source mac, in case that we delete

		 * the flows when encap source mac changed.

		/* Re-use tc offload path by moving the ft flow to the

		 * reserved ft chain.

		 *

		 * FT offload can use prio range [0, INT_MAX], so we normalize

		 * it to range [1, mlx5_esw_chains_get_prio_range(esw)]

		 * as with tc, where prio 0 isn't supported.

		 *

		 * We only support chain 0 of FT offload.

 init shared tc flow table */

 delete shared tc flow table */

		/* Re-use tc offload path by moving the ft flow to the

		 * reserved ft chain.

		 *

		 * FT offload can use prio range [0, INT_MAX], so we normalize

		 * it to range [1, mlx5_esw_chains_get_prio_range(esw)]

		 * as with tc, where prio 0 isn't supported.

		 *

		 * We only support chain 0 of FT offload.

 init indirect block notifications */

 Set fwd_dev so we do dev_put() after datapath */

 CONFIG_NET_TC_SKB_EXT */

 Tunnel restore takes precedence over int port restore */

 Set fwd_dev for future dev_put */

	/* If reg_c0 is not equal to the default flow tag then skb->mark

	 * is not supported and must be reset back to 0.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Inc. All rights reserved. */

 link to global list of rep_bond_metadata */

 private of uplink holding rep bond metadata list */

 slaves list */

 This must be called under rtnl_lock */

 First netdev becomes slave, no metadata presents the lag_dev. Create one */

 This must be called under rtnl_lock */

	/* Reset bond_metadata to zero first then reset all ingress/egress

	 * acls and rx rules of unslave representor's vport

 A given netdev is not a representor or not a slave of LAG configuration */

 Egress acl forward to vport is supported only non-uplink representor */

 This is not an event of a representor becoming active slave */

 Point everyone's egress acl to the vport of the active representor */

			/* Only single rx_rule for unique bond_metadata should be

			 * present, delete it if it's saved as passive vport's

			 * rx_rule with destination as passive vport's root_ft

	/* Insert new rx_rule for unique bond_metadata, save it as active vport's

	 * rx_rule with new destination as active vport's root_ft

/* Bond device of representors and netdev events are used here in specific way

 * to support eswitch vports bonding and to perform failover of eswitch vport

 * by modifying the vport's egress acl of lower dev representors. Thus this

 * also change the traditional behavior of lower dev under bond device.

 * All non-representor netdevs or representors of other vendors as lower dev

 * of bond device are not supported.

/* If HW support eswitch vports bonding, register a specific notifier to

 * handle it when two or more representors are bonded

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021 Mellanox Technologies. */

 default num of groups */

 protect hashtbl */

 protect restore_hashtbl */

/* obj_id is used to restore the sample parameters.

 * Set fte_id in original flow table, then match it in the default table.

 * Only set it for NICs can preserve reg_c or decap action. For other cases,

 * use the same match in the default table.

 * Use one header rewrite for both obj_id and fte_id.

	/* Allocate default table per vport, chain and prio. Otherwise, there is

	 * only one default table for the same sampler object. Rules with different

	 * prio and chain may overlap. For CT sample action, per vport default

	 * table is needed to resotre the metadata.

	/* Perform the original matches on the default table.

	 * Offload all actions except the sample action.

	/* When offloading sample and encap action, if there is no valid

	 * neigh data struct, a slow path rule is offloaded first. Source

	 * port metadata match is set at that time. A per vport table is

	 * already allocated. No need to match it again. So clear the source

	 * port metadata match.

/* For the following typical flow table:

 *

 * +-------------------------------+

 * +       original flow table     +

 * +-------------------------------+

 * +         original match        +

 * +-------------------------------+

 * + sample action + other actions +

 * +-------------------------------+

 *

 * We translate the tc filter with sample action to the following HW model:

 *

 *         +---------------------+

 *         + original flow table +

 *         +---------------------+

 *         +   original match    +

 *         +---------------------+

 *               | set fte_id (if reg_c preserve cap)

 *               | do decap (if required)

 *               v

 * +------------------------------------------------+

 * +                Flow Sampler Object             +

 * +------------------------------------------------+

 * +                    sample ratio                +

 * +------------------------------------------------+

 * +    sample table id    |    default table id    +

 * +------------------------------------------------+

 *            |                            |

 *            v                            v

 * +-----------------------------+  +-------------------+

 * +        sample table         +  +   default table   +

 * +-----------------------------+  +-------------------+

 * + forward to management vport +             |

 * +-----------------------------+             |

 *                                     +-------+------+

 *                                     |              |reg_c preserve cap

 *                                     |              |or decap action

 *                                     v              v

 *                        +-----------------+   +-------------+

 *                        + per vport table +   + post action +

 *                        +-----------------+   +-------------+

 *                        + original match  +

 *                        +-----------------+

 *                        + other actions   +

 *                        +-----------------+

	/* For NICs with reg_c_preserve support or decap action, use

	 * post action instead of the per vport, chain and prio table.

	 * Only match the fte id instead of the same match in the

	 * original flow table.

 Create sampler object. */

 Create an id mapping reg_c0 value to sample object. */

 Create sample restore context. */

	/* Perform the original matches on the original table. Offload the

	 * sample action. The destination is the sampler object.

	/* For decap action, do decap in the original flow table instead of the

	 * default flow table.

	/* The following delete order can't be changed, otherwise,

	 * will hit fw syndromes.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021, NVIDIA CORPORATION & AFFILIATES. All rights reserved.

 Splits were handled before post action */

	/* Post action rule matches on fte_id and executes original rule's

	 * tc rule action

 Allocate a header modify action to write the post action handle fte id to a register. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021, NVIDIA CORPORATION & AFFILIATES. All rights reserved. */

 Protects int ports list */

 Uses int_ports_lock */

 Set when uplink is performing teardown */

 Metadata for source port rewrite and matching */

	/* For egress forwarding we can have the case

	 * where the packet came from a vport and redirected

	 * to int port or it came from the uplink, going

	 * via internal port and hairpinned back to uplink

	 * so we set the source to any port in this case.

	/* Overwrite flow tag with the int port metadata mapping

	 * instead of the chain mapping.

 Fill upper 4 bits of PFNUM with reserved value */

 Must be called with priv->int_ports_lock held */

 map metadata to reg_c0 object for miss handling */

 Create a match on internal vport metadata in vport table */

 Must be called with priv->int_ports_lock held */

	/* The following parameters are not used by the

	 * rcu readers of this int_port object so it is

	 * safe to release them.

 Must be called with rcu_read_lock held */

 Reject request if ul rep not ready */

 Alloc and add new int port to list */

/* Int port rx rules reside in ul rep rx tables.

 * It is possible the ul rep will go down while there are

 * still int port rules in its rx table so proper cleanup

 * is required to free resources.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2018 Mellanox Technologies

 Make sure len bytes were read successfully  */

/*

 * Copyright (c) 2015, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 wrap around */

 HW time adjustment range is s16. If out of range, settime instead */

 Reject requests with unsupported flags */

 Reject requests to enable time stamping on both edges. */

 Reject requests with unsupported flags */

 TODOL clock->ptp can be NULL if ptp_clock_register fails */

	/* Calculate period in seconds to call the overflow watchdog - to make

	 * sure counter is checked at least twice every wrap around.

	 * The period is calculated as the minimum between max HW cycles count

	 * (The clock source mask) and max amount of cycles that can be

	 * multiplied by clock multiplier where the result doesn't exceed

	 * 64bits.

 Configure the PHC */

 Initialize 1PPS data structures */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies */

 Check if semaphore is already locked */

		/* Read and write counter value, if written value is

		 * the same, semaphore was acquired successfully.

 Get a unique val */

 Try to modify the lock */

 Verify lock was modified */

 Get space max address if indicated by size valid bit */

 Set flag to 0x1 */

 Wait for the flag to be cleared */

 Get a unique ID based on the counter */

 Try to modify lock */

 Verify lock was modified */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021, NVIDIA CORPORATION & AFFILIATES. All rights reserved. */

/* Time register consists of two fields to_multiplier(time out multiplier)

 * and to_value(time out value). to_value is the quantity of the time units and

 * to_multiplier is the type and should be one off these four values.

 * 0x0: millisecond

 * 0x1: seconds

 * 0x2: minutes

 * 0x3: hours

 * this function converts the time stored in the two register fields into

 * millisecond.

 convert hours/minutes/seconds to miliseconds */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies.

 Protects above chains_ht and prios_ht */

 We should get here only for eswitch case */

 We should get here only for eswitch case */

 Same value for FDB and NIC RX tables */

	/* We use tc_default_ft(chains) as the table's next_ft till

	 * ignore_flow_level is allowed on FT creation and not just for FTEs.

	 * Instead caller should add an explicit miss rule if needed.

	/* The root table(chain 0, prio 1, level 0) is required to be

	 * connected to the previous fs_core managed prio.

	 * We always create it, as a managed table, in order to align with

	 * fs_core logic.

		/* Firmware doesn't allow us to create another level 0 table,

		 * so we create all unmanaged tables as level 1.

		 *

		 * To connect them, we use explicit miss rules with

		 * ignore_flow_level. Caller is responsible to create

		 * these rules (if needed).

		/* we got the special default flow tag id, so we won't know

		 * if we actually marked the packet with the restore rule

		 * we create.

		 *

		 * This case isn't possible with MLX5_FS_DEFAULT_FLOW_TAG = 0.

		/* For NIC RX we don't need a restore rule

		 * since we write the metadata to reg_b

		 * that is passed to SW directly.

 Datapath can't find this mapping, so we can safely remove it */

	/* Iterate in reverse order until reaching the level 0 rule of

	 * the previous priority, adding all the miss rules first, so we can

	 * revert them if any of them fails.

 Success, delete old miss rules, and update the pointers. */

	/* Chain's prio list is sorted by prio and level.

	 * And all levels of some prio point to the next prio's level 0.

	 * Example list (prio, level):

	 * (3,0)->(3,1)->(5,0)->(5,1)->(6,1)->(7,0)

	 * In hardware, we will we have the following pointers:

	 * (3,0) -> (5,0) -> (7,0) -> Slow path

	 * (3,1) -> (5,0)

	 * (5,1) -> (7,0)

	 * (6,1) -> (7,0)

 Default miss for each chain: */

 exit on first pos that is larger */

 Get next level 0 table */

 Add miss rule to next_ft */

 Table is ready, connect it */

	/* create earlier levels for correct fs_core lookup when

	 * connecting tables.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB */

 Copyright (c) 2019 Mellanox Technologies. */

 Default values for FW which do not support MLX5_REG_PCMR */

	/* Tunnel entropy calculation may be controlled either on port basis

	 * for all tunneling protocols or specifically for GRE protocol.

	 * Prioritize GRE protocol control (if capable) over global port

	 * configuration.

		/* Other applications may change the global FW entropy

		 * calculations settings. Check that the current entropy value

		 * is the negative of the updated value.

		/* GRE requires disabling entropy calculation. if there are

		 * enabling entries (i.e VXLAN) we cannot turn it off for them,

		 * thus fail.

 if we turn on the entropy we don't need to force it anymore */

/* the function manages the refcount for enabling/disabling tunnel types.

 * the return value indicates if the inc is successful or not, depending on

 * entropy capabilities and configuration.

		/* in case entropy calculation is enabled for all tunneling

		 * types, it is ok for VXLAN, so approve.

		 * otherwise keep the error default.

		/* turn off the entropy only for the first GRE rule.

		 * for the next rules the entropy was already disabled

		 * successfully.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies.

 avoid leaking key on the stack */

/*

 * Copyright (c) 2017, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2018 Mellanox Technologies */

 Must be called with intf_mutex held */

 Must be called with intf_mutex held */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2018 Mellanox Technologies

 Protect agents array */

 control */)

 In case no capabilities, send empty block in return */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 protect GENEVE obj operations */

 We already have TLV options obj allocated */

			/* TLV options obj allocated, but its params

			 * do not match the new request.

			 * We support only one such object.

 We don't have any TLV options obj allocated */

		/* We've just removed the last user of Geneve option.

		 * Now delete the object in FW.

 Lockless since we are unloading */

/*

 * Copyright (c) 2016, Mellanox Technologies, Ltd.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 max_num_ports is usually 4, 16 buckets is more than enough */

 sync add/del port HW operations */

 Hardware adds 4789 (IANA_VXLAN_UDP_PORT) by default */

		/* Don't delete default UDP port added by the HW.

		 * Remove only user configured ports

/*

 * Copyright (c) 2017, Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 HW L2 Table (MPFS) management */

 UC L2 table hash node */

 index in HW l2 table */

 Synchronize l2 table access */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021 NVIDIA CORPORATION & AFFILIATES.

 L3/L4 traffic type classifier */

 L4 Group */

 L3 Group */

 Any Group */

 L4 Group */

 L3 Group */

 Any Group */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies

 protect access to icm bitmask */

/*

 * Copyright (c) 2018 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

/*

 * Copyright (c) 2017 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020, Mellanox Technologies inc. All rights reserved. */

 hw ctx */

 reference counter of SA ctx */

 protects mlx5_ipsec_esp_xfrm */

	/* We can accommodate up to 2^24 different IPsec objects

	 * because we use up to 24 bit in flow table metadata

	 * to hold the IPsec Object unique handle.

 assuming no sa_ctx are connected to this xfrm_ctx */

 salt and seq_iv */

 esn */

 general object fields set */

 alloc SA context */

 key */

 general object fields set */

 esn */

 general object fields set */

 Not bound xfrm, change only sw attrs */

 need to add find and replace in ipsec_rhash_sa the sa_ctx */

 modify device with new hw_sa */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

	/* Per vport cached FW FT for checksum recalculation, this

	 * recalculation is needed due to a HW bug in STEv0.

 Table hasn't been created yet */

 caps were already stored by another thread */

	/* Query eswitch manager and uplink vports only. Rest of the

	 * vports (vport 0, VFs and SFs) will be queried dynamically.

 Allocate resources */

/* Assure synchronization of the device steering tables with updates made by SW

 * insertion.

 make sure resources are not used by the hardware */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/* Copyright (c) 2004 Topspin Communications. All rights reserved.

 * Copyright (c) 2005 - 2008 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2006 - 2007 Cisco Systems, Inc. All rights reserved.

 * Copyright (c) 2020 NVIDIA CORPORATION. All rights reserved.

 Allocating max_order bitmaps, one for each order */

	/* In the beginning, we have only one order that is available for

	 * use (the biggest one), so mark the first bit in both bitmaps.

/**

 * mlx5dr_buddy_alloc_mem() - Update second level bitmap.

 * @buddy: Buddy to update.

 * @order: Order of the buddy to update.

 * @segment: Segment number.

 *

 * This function finds the first area of the ICM memory managed by this buddy.

 * It uses the data structures of the buddy system in order to find the first

 * area of free place, starting from the current order till the maximum order

 * in the system.

 *

 * Return: 0 when segment is set, non-zero error status otherwise.

 *

 * The function returns the location (segment) in the whole buddy ICM memory

 * area - the index of the memory segment that is available for use.

	/* If we found free memory in some order that is bigger than the

	 * required order, we need to split every order between the required

	 * order and the order that we found into two parts, and mark accordingly.

	/* Whenever a segment is free,

	 * the mem is added to the buddy that gave it.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 NVIDIA CORPORATION. All rights reserved. */

 Miss address for TX and RX STEs located in the same offsets */

	/* Set GVMI once, this is the same for RX/TX

	 * bits 63_48 of next table base / miss address encode the next GVMI

 This can be used for both rx_steering_mult and for sx_transmit */

	/* Due to HW limitation we need to set this bit, otherwise reformat +

	 * push vlan will not work.

 The hardware expects here size in words (2 byte) */

	/* We want to make sure the modify header comes before L2

	 * encapsulation. The reason for that is that we support

	 * modify headers for outer headers only

		/* Modify header and encapsulation require a different STEs.

		 * Since modify header STE format doesn't support encapsulation

		 * tunneling_action.

		/* Whenever prio_tag_required enabled, we can be sure that the

		 * previous table (ACL) already push vlan to our packet,

		 * And due to HW limitation we need to set this bit, otherwise

		 * push vlan + reformat will not work.

 dmac_47_16 */

 smac_47_16 */

 dmac_15_0 */

 ethertype + (optional) vlan */

 smac_15_0 */

	/* STEs with lookup type FLEX_PARSER_{0/1} includes

	 * flex parsers_{0-3}/{4-7} respectively.

	/* STEs with lookup type FLEX_PARSER_{0/1} includes

	 * flex parsers_{0-3}/{4-7} respectively.

	/* STEs with lookup type FLEX_PARSER_{0/1} includes

	 * flex parsers_{0-3}/{4-7} respectively.

 Find port GVMI based on the eswitch_owner_vhca_id */

	/* STEs with lookup type FLEX_PARSER_{0/1} includes

	 * flex parsers_{0-3}/{4-7} respectively.

 Builders */

 Getters and Setters */

 Actions */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 Using flex_parser 0 means that id is zero, thus value must be set. */

 Create a temporary mask to track and clear used mask fields */

	/* Optimize RX pipe by reducing source port match, since

	 * the FDB RX part is connected only to the wire.

 Outer */

 Inner */

 Empty matcher, takes all */

 Check that all mask fields were consumed */

 Connect end anchor hash table to next_htbl or to the default address */

 Connect start hash table to end anchor */

 Connect previous hash table to matcher start hash table */

 Update the pointing ste and next hash table */

 make sure the tables exist while empty */

 Check that all mask data was consumed */

 Connect previous anchor hash table to next matcher or to the default address */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 One destination only */

		/* icm_addr_0 used for FDB RX / NIC TX / NIC_RX

		 * icm_addr_1 used for FDB TX

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 NVIDIA CORPORATION. All rights reserved. */

 Lookup type is built from 2B: [ Definer mode 1B ][ Definer index 1B ] */

 Regular push header (e.g. push vlan) */

 Encapsulation / Tunneling */

 IPsec */

 use for special cases */

 Backup tag */

 Swap mask and tag  both are the same size */

 The hardware expects here size in words (2 byte) */

 The hardware expects here size and offset in words (2 byte) */

 The hardware expects here size and offset in words (2 byte) */

 The hardware expects offset to vlan header in words (2 byte) */

 The hardware expects here size in words (2 byte) */

 Remove L2 headers */

 Encapsulate with given reformat ID */

 The hardware expects here size in words (2 byte) */

 Modify header and decapsulation must use different STEs */

		/* Counter action set after decap and before insert_hdr

		 * to exclude decaped / encaped header respectively.

 Modify header, decap, and encap must use different STEs */

 Add an alignment padding  */

 Remove L2L3 outer headers */

 Remove and NOP are a single double action */

 Point to the last dword of the header */

	/* Add the new header using inline action 4Byte at a time, the header

	 * is added in reversed order to the beginning of the packet to avoid

	 * incorrect parsing by the HW. Since header is 14B or 18B an extra

	 * two bytes are padded and later removed.

 The hardware expects here offset to words (2 bytes) */

 Copy bytes one by one to avoid endianness problem */

 Remove first 2 extra bytes */

 The hardware expects here size in words (2 bytes) */

 ?

 ?

	/* STEs with lookup type FLEX_PARSER_{0/1} includes

	 * flex parsers_{0-3}/{4-7} respectively.

	/* STEs with lookup type FLEX_PARSER_{0/1} includes

	 * flex parsers_{0-3}/{4-7} respectively.

 Find port GVMI based on the eswitch_owner_vhca_id */

	/* STEs with lookup type FLEX_PARSER_{0/1} includes

	 * flex parsers_{0-3}/{4-7} respectively.

 Builders */

 Getters and Setters */

 Actions */

 Send */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 The new entry will be inserted after the last */

 Create new table for miss entry */

 One and only entry, never grows */

 In collision entry, all members share the same miss_list_head */

 Next table */

	/* Copy data to ste, only reduced size or control, the last 16B (mask)

	 * is already written to the hw.

 Check if hw_ste is present in the list */

 Update collision pointing STE */

 In collision entry, all members share the same miss_list_head */

 Update the previous from the list */

	/* We need to copy the refcount since this ste

	 * may have been traversed several times

 Link old STEs rule to the new ste */

 Copy STE mask from the matcher */

 Copy STE control and tag */

 Empty, nothing to copy */

 Write new table to HW */

	/* Writing to the hw is done in regular order of rehash_table_send_list,

	 * in order to have the origin data written before the miss address of

	 * collision entries, if exists.

 Connect previous hash table to current */

 The previous table is an anchor, anchors size is always one STE */

 On matcher s_anchor we keep an extra refcount */

		/* It is safe to operate dr_ste_set_hit_addr on the hw_ste here

		 * (48B len) which works only on first 32B

 Clean all ste_info's from the new table */

 Skip rehash, we already at the max size */

	/* Update rule member is usually done for the last STE or during rule

	 * creation to recover from mid-creation failure (for this peruse the

	 * force flag is used)

 Update is required since each rule keeps track of its last STE */

 Iterate from last to first */

	/* Two cases:

	 * 1. num_of_builders is equal to new_hw_ste_arr_sz, the action in the ste

	 * 2. num_of_builders is less then new_hw_ste_arr_sz, new ste was added

	 *    to support the action.

 While free ste we go over the miss list, so add this ste to the list */

 Point current ste to the new action */

 Take ref on table, only on first time this ste is used */

 new entry -> new branch */

 Hash table index in use, check if this ste is in the miss list */

			/* If it is last STE in the chain, and has the same tag

			 * it means that all the previous stes are the same,

			 * if so, this rule is duplicated.

 Hash table index in use, try to resize of the hash */

			/* Hold the table till we update.

			 * Release in dr_rule_create_rule()

 Hash table index in use, add another collision (miss) */

 Set the tag values inside the ste array */

 Set the actions values/addresses inside the ste array */

	/* Go over the array of STEs, and build dr_ste accordingly.

	 * The loop is over only the builders which are equal or less to the

	 * number of stes, in case we have actions that lives in other stes.

 Calculate CRC and keep new ste entry */

 Connect actions */

 Clean all ste_info's */

	/* Copy match_param since they will be consumed during the first

	 * nic_rule insertion.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies */

 turn off encap/decap if not supported for sw-str by fw */

 Drop reformat action bit if destination vport set with reformat */

	/* The order of the actions are must to be keep, only the following

	 * order is supported by SW steering:

	 * TX: modify header -> push vlan -> encap

	 * RX: decap -> pop vlan -> modify header

 The order of the actions below is not important */

 Free in reverse order to handle action dependencies */

 Free in reverse order to handle action dependencies */

 Backup current dr rule details */

 First add the new updated rule, then delete the old rule */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 memory management */

 protect the ICM pool and ICM buddy */

 Align base is 64B */

 Register device memory */

 add it to the -start- of the list in order to search in it first */

 chunk now is part of the used_list */

 find the next free place from the buddy list */

 We have new memory pool, first in the list */

 no more available allocators in that pool, create new */

 mark we have new memory, first in list */

/* Allocate an ICM chunk, each chunk holds a piece of ICM memory and

 * also memory used for HW STE management for optimizations.

 find mem, get back the relevant buddy pool and seg in that mem */

 move the memory to the waiting list AKA "hot" */

 Check if we have chunks that are waiting for sync-ste */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

/* Apply the actions on the rule STE array starting from the last_ste.

 * Actions might require more than one STE, new_num_stes will return

 * the new size of the STEs array, rule with actions.

 Check action state machine is valid */

		/* Allow destination flow table only if table is a terminating

		 * table, since there is an *assumption* that in such case FW

		 * will recalculate the CS.

		/* If destination is vport we will get the FW flow table

		 * that recalculates the CS and forwards to the vport.

 get the relevant addresses */

 Check action duplication */

 Check action state machine is valid */

	/* Due to a HW bug in some devices, modifying TTL on RX flows will

	 * cause an incorrect checksum calculation. In this case we will

	 * use a FW table to recalculate.

 General checks */

 Get SW modify action data */

 Convert SW data to HW modify action format */

 Get SW modify action data */

 Convert SW data to HW modify action format */

 PRM defines that length zero specific length of 32bits */

 Get SW modify action data */

 Convert SW data to HW modify action format */

 PRM defines that length zero specific length of 32bits */

 Get SW modify action type */

 Convert SW action to HW action */

 Due to a HW limitation we cannot modify 2 different L3 types */

 Due to a HW limitation we cannot modify two different L4 types */

		/* HW reads and executes two actions at once this means we

		 * need to create a gap if two actions access the same field

			/* Check if after gap insertion the total number of HW

			 * modify actions doesn't exceeds the limit

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 Release old action */

 Set new miss action */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 Modify TTL action by adding zero to trigger CS recalculation */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 After wmb() the hw aware of new work */

/**

 * mlx5dr_send_fill_and_append_ste_send_info: Add data to be sent

 * with send_list parameters:

 *

 *     @ste:       The data that attached to this specific ste

 *     @size:      of data to write

 *     @offset:    of the data from start of the hw_ste entry

 *     @data:      data

 *     @ste_info:  ste to be sent with send_list

 *     @send_list: to append into it

 *     @copy_data: if true indicates that the data should be kept because

 *                 it's not backuped any where (like in re-hash).

 *                 if false, it lets the data to be updated after

 *                 it was added to the list.

/* The function tries to consume one wc each time, unless the queue is full, in

 * that case, which means that the hw is behind the sw in a full queue len

 * the function will drain the cq till it empty.

 Queue is full start drain it */

 Read into the same write area */

 Copy to ring mr */

/**

 * mlx5dr_send_postsend_ste: write size bytes into offset from the hw cm.

 *

 *     @dmn:    Domain

 *     @ste:    The ste struct that contains the data (at

 *              least part of it)

 *     @data:   The real data to send size data

 *     @size:   for writing.

 *     @offset: The offset from the icm mapped data to

 *              start write to this for write only part of the

 *              buffer.

 *

 * Return: 0 on success.

 Send the data iteration times */

		/* Copy all ste's on the data buffer

		 * need to add the bit_mask

 Copy data */

 Copy bit_mask */

 Only when we have mask we need to re-arrange the STE */

 Initialize htble with default STEs */

 Copy the reduced STE to hash table ste_arr */

 Copy the same STE on the data buffer */

 Send the data iteration times */

 ~1ms */

	/* Check whether RC RoCE QP creation with force loopback is allowed.

	 * There are two separate capability bits for this:

	 *  - force loopback when RoCE is enabled

	 *  - force loopback when RoCE is disabled

 Init */

 RTR */

	/* If QP creation with force loopback is allowed, then there

	 * is no need for GID index when creating the QP.

	 * Otherwise we query GID attributes and use GID index.

 RTS */

	/* set no-zero value, in order to avoid the HW to run db-recovery on

	 * CQ that used in polling mode.

 Isolated VL is applicable only if force loopback is supported */

 Prepare qp to be used */

 Allocating the max size as a buffer for writing */

 Sending this amount of requests makes sure we will get drain */

 Send fake requests forcing the last to be signaled */

 Using the sync_mr in order to write/read */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2019 Mellanox Technologies. */

 Don't calculate CRC if the result is predicted */

 Mask tag using byte mask, bit per byte */

/* Replace relevant fields, except of:

 * htbl - keep the origin htbl

 * miss_list + list - already took the src from the list.

 * icm_addr/mr_addr - depends on the hosting table.

 *

 * Before:

 * | a | -> | b | -> | c | ->

 *

 * After:

 * | a | -> | c | ->

 * While the data that was in b copied to a.

 Free ste which is the head and the only one in miss_list */

	/* Use temp ste because dr_ste_always_miss_addr

	 * touches bit_mask area which doesn't exist at ste->hw_ste.

 Write full STE size in order to have "always_miss" */

 Copy data */);

/* Free ste which is the head but NOT the only one in miss_list:

 * |_ste_| --> |_next_ste_| -->|__| -->|__| -->/0

 Remove from the miss_list the next_ste before copy */

 Move data from next into ste */

 Update the rule on STE change */

 Copy all 64 hw_ste bytes */

	/* Del the htbl that contains the next_ste.

	 * The origin htbl stay with the same number of entries.

 Copy data */);

/* Free ste that is located in the middle of the miss list:

 * |__| -->|_prev_ste_|->|_ste_|-->|_next_ste_|

 Copy data*/);

	/* Two options:

	 * 1. ste is head:

	 *	a. head ste is the only ste in the miss list

	 *	b. head ste is not the only ste in the miss-list

	 * 2. ste is not head

 Ste is the head */

 One and only entry in the list */

 First but not only entry in the list */

 Ste in the middle of the list */

 Update HW */

 Init one ste as a pattern for ste data array */

 Write new table to HW */

 Only Ethernet frame is supported, with VLAN (18) or without (14) */

 Connect the STEs */

			/* Need the next builder for these fields,

			 * not relevant for the last ste in the chain.

 Set vhca_id_valid before we reset source_eswitch_owner_vhca_id */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021 Mellanox Technologies Ltd */

 num FTE 2, num FG 2 */

 Addresses group : Full match unicast/multicast addresses */

 Preserve 2 entries for allmulti and promisc rules*/

 Allmulti group : One rule that forwards any mcast traffic */

	/* Promiscuous group :

	 * One rule that forward all unmatched traffic from previous groups

 Uplink rule forward uplink traffic to FDB */

 Star rule to forward all traffic to uplink vport */

 Only non manager vports need ACL in legacy mode */

 compatibility with libvirt */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021 Mellanox Technologies.

/* This struct is used as a key to the hash table and we need it to be packed

 * so hash result is consistent

 caller must hold vports.lock */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Ltd. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021 Mellanox Technologies. */

		/* FDB is added asynchronously on wq while port might have been deleted

		 * concurrently. Report on 'info' logging level and skip the FDB offload.

		/* FDB is added asynchronously on wq while vlan might have been deleted

		 * concurrently. Report on 'info' logging level and skip the FDB offload.

 Take over dynamic entries to prevent kernel bridge from aging them out. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021 Mellanox Technologies. */

 protects table */

	/* Use indirect table for all IP traffic from UL to VF with vport

	 * destination when source rewrite flag is set.

 Modify flow source to recirculate packet */

 Hold one entry */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2021, NVIDIA CORPORATION & AFFILIATES. All rights reserved. */

 Minimum supported BW share value by the HW is 1 Mbit/sec */

	/* If vports min rate divider is 0 but their group has bw_share configured, then

	 * need to set bw_share for vports to minimal value.

		/* All the group's vports need to be set with default bw_share

		 * to enable them with QOS

	/* If parent group has rate limit need to set to group

	 * value when new max rate is 0.

 Attempt restoring previous configuration */

	/* Any unlimited vports in the group should be set

	 * with the value of the group.

	/* If vport is unlimited, we set the group's value.

	 * Therefore, if the group is limited it will apply to

	 * the vport as well and if not, vport will remain unlimited.

 Recalculate bw share weights of old and new groups */

 1Mbps in Bps */

/* Converts bytes per second value passed in a pointer into megabits per

 * second, rewriting last. If converted rate exceed link speed or is not a

 * fraction of Mbps - returns error.

 Eswitch devlink rate API */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Inc. All rights reserved. */

	/* The ingress acl table contains 4 groups

	 * (2 active rules at the same time -

	 *      1 allow rule from one of the first 3 groups.

	 *      1 drop rule from the last group):

	 * 1)Allow untagged traffic with smac=original mac.

	 * 2)Allow untagged traffic.

	 * 3)Allow traffic with smac=original mac.

	 * 4)Drop all other traffic.

 Create ingress allow rule */

 Attach drop flow counter */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Inc. All rights reserved. */

	/* For prio tag mode, there is only 1 FTEs:

	 * 1) Untagged packets - push prio tag VLAN and modify metadata if

	 * required, allow

	 * Unmatched traffic is allowed by default

 Untagged packets - push prio tag VLAN, allow */

		/* This group is to hold FTE to match untagged packets when prio_tag

		 * is enabled.

		/* This group holds an FTE with no match to add metadata for

		 * tagged packets if prio-tag is enabled, or for all untagged

		 * traffic in case prio-tag is disabled.

 Caller must hold rtnl_lock */

 Recreate ingress acl rules with vport->metadata */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Inc. All rights reserved. */

 Delete the old egress forward-to-vport rule if any */

		/* For prio tag mode, there is only 1 FTEs:

		 * 1) prio tag packets - pop the prio tag VLAN, allow

		 * Unmatched traffic is allowed by default

 prio tag vlan rule - pop it so vport receives untagged packets */

	/* This group holds 1 FTE to forward all packets to other vport

	 * when bond vports is supported.

 Cleanup and recreate rules WITHOUT fwd2vport of active vport */

 Cleanup and recreate all rules + fwd2vport rule of passive vport to forward */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Inc. All rights reserved. */

	/* The egress acl table contains 2 rules:

	 * 1)Allow traffic with vlan_tag=vst_vlan_id

	 * 2)Drop all other traffic.

 Allowed vlan rule */

 Attach egress drop flow counter */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Inc. All rights reserved. */

 SPDX-License-Identifier: GPL-2.0-only OR BSD-3-Clause

/* MDIO support for Mellanox Gigabit Ethernet driver

 *

 * Copyright (C) 2020-2021 NVIDIA CORPORATION & AFFILIATES

 Support clause 22 */

 Busy bit is set by software and cleared by hardware */

 MDIO GW register bits */

 MDIO config register bits */

/* Formula for encoding the MDIO period. The encoded value is

 * passed to the MDIO config register.

 *

 * mdc_clk = 2*(val + 1)*i1clk

 *

 * 400 ns = 2*(val + 1)*(((1/430)*1000) ns)

 *

 * val = (((400 * 430 / 1000) / 2) - 1)

 Send mdio read request */

 Only return ad bits of the gw register */

 Send mdio write request */

 If the poll timed out, drop the request */

 Configure mdio parameters */

 SPDX-License-Identifier: GPL-2.0-only OR BSD-3-Clause

/* Packet receive logic for Mellanox Gigabit Ethernet driver

 *

 * Copyright (C) 2020-2021 NVIDIA CORPORATION & AFFILIATES

 Write destination MAC to specified MAC RX filter */

 Enable MAC receive filter mask for specified index */

 Read destination MAC from specified MAC RX filter */

 Enable MAC_ID_RANGE match functionality */

 Set start of destination MAC range check to 0 */

 Set end of destination MAC range check to all FFs */

 Disable MAC_ID_RANGE match functionality */

	/* NOTE: no need to change DMAC_RANGE_START or END;

	 * those values are ignored since MAC_ID_RANGE_EN=0

/* Receive Initialization

 * 1) Configures RX MAC filters via MMIO registers

 * 2) Allocates RX WQE array using coherent DMA mapping

 * 3) Initializes each element of RX WQE array with a receive

 *    buffer pointer (also using coherent DMA mapping)

 * 4) Allocates RX CQE array using coherent DMA mapping

 * 5) Completes other misc receive initialization

 Configure MAC RX filter #0 to allow RX of broadcast pkts */

	/* Initialize 'rx_wqe_ptr' to point to first RX WQE in array

	 * Each RX WQE is simply a receive buffer pointer, so walk

	 * the entire array, allocating a 2KB buffer for each element

 Write RX WQE base address into MMIO reg */

 Write RX CQE base address into MMIO reg */

 Write RX_WQE_PI with current number of replenished buffers */

 Enable removal of CRC during RX */

 Enable RX MAC filter pass and discard counters */

	/* Clear MLXBF_GIGE_INT_MASK 'receive pkt' bit to

	 * indicate readiness to receive interrupts

 Enable RX DMA to write new packets to memory */

/* Receive Deinitialization

 * This routine will free allocations done by mlxbf_gige_rx_init(),

 * namely the RX WQE and RX CQE arrays, as well as all RX buffers

 Disable RX DMA to prevent packet transfers to memory */

 Index into RX buffer array is rx_pi w/wrap based on RX_CQE_SIZE */

 Packet is OK, increment stats */

 device did not checksum packet */

 Alloc another RX SKB for this same index */

 Let hardware know we've replenished one buffer */

 Ensure completion of all writes before notifying HW of replenish */

 Driver poll() function called by NAPI infrastructure */

	/* If amount of work done < budget, turn off NAPI polling

	 * via napi_complete_done(napi, work_done) and then

	 * re-enable interrupts.

		/* Clear MLXBF_GIGE_INT_MASK 'receive pkt' bit to

		 * indicate receive readiness

 SPDX-License-Identifier: GPL-2.0-only OR BSD-3-Clause

/* Ethtool support for Mellanox Gigabit Ethernet driver

 *

 * Copyright (C) 2020-2021 NVIDIA CORPORATION & AFFILIATES

 Start of struct ethtool_ops functions */

	/* Read entire MMIO register space and store results

	 * into the provided buffer. Each 64-bit word is converted

	 * to big-endian to make the output more readable.

	 *

	 * NOTE: by design, a read to an offset without an existing

	 *       register will be acknowledged and return zero.

	/* Fill data array with interface statistics

	 *

	 * NOTE: the data writes must be in

	 *       sync with the strings shown in

	 *       the mlxbf_gige_ethtool_stats_keys[] array

	 *

	 * NOTE2: certain statistics below are zeroed upon

	 *        port disable, so the calculation below

	 *        must include the "cached" value of the stat

	 *        plus the value read directly from hardware.

	 *        Cached statistics are currently:

	 *          rx_din_dropped_pkts

	 *          rx_filter_passed_pkts

	 *          rx_filter_discard_pkts

 SPDX-License-Identifier: GPL-2.0-only OR BSD-3-Clause

/* Interrupt related logic for Mellanox Gigabit Ethernet driver

 *

 * Copyright (C) 2020-2021 NVIDIA CORPORATION & AFFILIATES

		/* This error condition is latched into MLXBF_GIGE_INT_STATUS

		 * when the GigE silicon operates on the offending

		 * TX WQE. The write to MLXBF_GIGE_INT_STATUS at the bottom

		 * of this routine clears this error condition.

		/* This condition happens when the networking stack invokes

		 * this driver's "start_xmit()" method with a packet whose

		 * size < 60 bytes.  The GigE silicon will automatically pad

		 * this small frame up to a minimum-sized frame before it is

		 * sent. The "tx_small_frame" condition is latched into the

		 * MLXBF_GIGE_INT_STATUS register when the GigE silicon

		 * operates on the offending TX WQE. The write to

		 * MLXBF_GIGE_INT_STATUS at the bottom of this routine

		 * clears this condition.

	/* Clear all error interrupts by writing '1' back to

	 * all the asserted bits in INT_STATUS.  Do not write

	 * '1' back to 'receive packet' bit, since that is

	 * managed separately.

	/* NOTE: GigE silicon automatically disables "packet rx" interrupt by

	 *       setting MLXBF_GIGE_INT_MASK bit0 upon triggering the interrupt

	 *       to the ARM cores.  Software needs to re-enable "packet rx"

	 *       interrupts by clearing MLXBF_GIGE_INT_MASK bit0.

 SPDX-License-Identifier: GPL-2.0-only OR BSD-3-Clause

/* Gigabit Ethernet driver for Mellanox BlueField SoC

 *

 * Copyright (C) 2020-2021 NVIDIA CORPORATION & AFFILIATES

/* Allocate SKB whose payload pointer aligns with the Bluefield

 * hardware DMA limitation, i.e. DMA operation can't cross

 * a 4KB boundary.  A maximum packet size of 2KB is assumed in the

 * alignment formula.  The alignment logic overallocates an SKB,

 * and then adjusts the headroom so that the SKB data pointer is

 * naturally aligned to a 2KB boundary.

	/* Overallocate the SKB so that any headroom adjustment (to

	 * provide 2KB natural alignment) does not exceed payload area

	/* Adjust the headroom so that skb->data is naturally aligned to

	 * a 2KB boundary, which is the maximum packet size supported.

 Return streaming DMA mapping to caller */

		/* Provide a random MAC if for some reason the device has

		 * not been configured with a valid MAC address already.

 Cache stats that will be cleared by clean port operation */

 Set the CLEAN_PORT_EN bit to trigger SW reset */

 Ensure completion of "clean port" write before polling status */

 Clear the CLEAN_PORT_EN bit at end of this loop */

	/* Clear driver's valid_polarity to match hardware,

	 * since the above call to clean_port() resets the

	 * receive polarity used by hardware.

 Set bits in INT_EN that we care about */

 Ensure completion of all initialization before enabling interrupts */

	/* Only write to the hardware registers if the new setting

	 * of promiscuous mode is different from the current one.

 Perform general init of GigE block */

 Attach MDIO device */

 Write initial MAC address to hardware */

 MAC only supports 1000T full duplex mode */

	/* Only symmetric pause with flow control enabled is supported so no

	 * need to negotiate pause.

 Display information about attached PHY device */

 SPDX-License-Identifier: GPL-2.0-only OR BSD-3-Clause

/* Packet transmit logic for Mellanox Gigabit Ethernet driver

 *

 * Copyright (C) 2020-2021 NVIDIA CORPORATION & AFFILIATES

/* Transmit Initialization

 * 1) Allocates TX WQE array using coherent DMA mapping

 * 2) Allocates TX completion counter using coherent DMA mapping

 Write TX WQE base address into MMIO reg */

 Allocate address for TX completion count */

 Write TX CC base address into MMIO reg */

/* Transmit Deinitialization

 * This routine will free allocations done by mlxbf_gige_tx_init(),

 * namely the TX WQE array and the TX completion counter

/* Function that returns status of TX ring:

 *          0: TX ring is full, i.e. there are no

 *             available un-used entries in TX ring.

 *   non-null: TX ring is not full, i.e. there are

 *             some available entries in TX ring.

 *             The non-null value is a measure of

 *             how many TX entries are available, but

 *             it is not the exact number of available

 *             entries (see below).

 *

 * The algorithm makes the assumption that if

 * (prev_tx_ci == tx_pi) then the TX ring is empty.

 * An empty ring actually has (tx_q_entries-1)

 * entries, which allows the algorithm to differentiate

 * the case of an empty ring vs. a full ring.

	/* Transmit completion logic needs to loop until the completion

	 * index (in SW) equals TX consumer index (from HW).  These

	 * parameters are unsigned 16-bit values and the wrap case needs

	 * to be supported, that is TX consumer index wrapped from 0xFFFF

	 * to 0 while TX completion index is still < 0xFFFF.

		/* Each TX WQE is 16 bytes. The 8 MSB store the 2KB TX

		 * buffer address and the 8 LSB contain information

		 * about the TX WQE.

 Ensure completion of updates across all cores */

	/* Since the TX ring was likely just drained, check if TX queue

	 * had previously been stopped and now that there are TX buffers

	 * available the TX queue can be awakened.

 Function to advance the tx_wqe_next pointer to next TX WQE */

 Advance tx_wqe_next pointer */

 Check if 'next' pointer is beyond end of TX ring */

 If so, set 'next' back to 'base' pointer of ring */

 If needed, linearize TX SKB as hardware DMA expects this */

	/* Verify that payload pointer and data length of SKB to be

	 * transmitted does not violate the hardware DMA limitation.

 DMA operation would fail as-is, alloc new aligned SKB */

 Free original skb, could not alloc new aligned SKB */

 Free the original SKB */

 Get address of TX WQE */

 Put PA of buffer address into first 64-bit word of TX WQE */

	/* Set TX WQE pkt_len appropriately

	 * NOTE: GigE silicon will automatically pad up to

	 *       minimum packet length if needed.

 Write entire 2nd word of TX WQE */

 Create memory barrier before write to TX PI */

 Check if the last TX entry was just used */

 TX ring is full, inform stack */

		/* Since there is no separate "TX complete" interrupt, need

		 * to explicitly schedule NAPI poll.  This will trigger logic

		 * which processes TX completions, and will hopefully drain

		 * the TX ring allowing the TX queue to be awakened.

/*

 * Copyright 2008-2010 Cisco Systems, Inc.  All rights reserved.

 * Copyright 2007 Nuova Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 Wait for HW to ACK disable request */

 SPDX-License-Identifier: GPL-2.0

/* enic_addfltr_5t - Add ipv4 5tuple filter

 *	@enic: enic struct of vnic

 *	@keys: flow_keys of ipv4 5tuple

 *	@rq: rq number to steer to

 *

 * This function returns filter_id(hardware_id) of the filter

 * added. In case of error it returns a negative number.

/* enic_delfltr - Delete clsf filter

 *	@enic: enic struct of vnic

 *	@filter_id: filter_is(hardware_id) of filter to be deleted

 *

 * This function returns zero in case of success, negative number incase of

 * error.

/* enic_rfs_flw_tbl_init - initialize enic->rfs_h members

 *	@enic: enic data

 entry already present  */

		/* desired rq changed for the flow, we need to delete

		 * old fltr and add new one

		 *

		 * The moment we delete the fltr, the upcoming pkts

		 * are put it default rq based on rss. When we add

		 * new filter, upcoming pkts are put in desired queue.

		 * This could cause ooo pkts.

		 *

		 * Lets 1st try adding new fltr and then del old one.

 clsf tbl is full, we have to del old fltr first*/

 add new fltr 1st then del old fltr */

			/* deleting old fltr failed. Add old fltr to list.

			 * enic_flow_may_expire() will try to delete it later.

 entry not present */

 CONFIG_RFS_ACCEL */

/*

 * Copyright 2010 Cisco Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

/*

 * Copyright 2008-2010 Cisco Systems, Inc.  All rights reserved.

 * Copyright 2007 Nuova Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 must be aligned to groups of 32 */

 must be aligned to groups of 32 */

	/* Init RQ/WQ resources.

	 *

	 * RQ[0 - n-1] point to CQ[0 - n-1]

	 * WQ[0 - m-1] point to CQ[n - n+m-1]

	 *

	 * Error interrupt is not enabled for MSI.

	/* Init CQ resources

	 *

	 * CQ[0 - n+m-1] point to INTR[0] for INTx, MSI

	 * CQ[0 - n+m-1] point to INTR[0 - n+m-1] for MSI-X

 flow_control_enable */,

 color_enable */,

 cq_head */,

 cq_tail */,

 cq_tail_color */,

 interrupt_enable */,

 cq_entry_enable */,

 cq_message_enable */,

 cq_message_addr */);

	/* Init INTR resources

	 *

	 * mask_on_assertion is not used for INTx due to the level-

	 * triggered nature of INTx

	/* Allocate queue resources

	/* Hook remaining resource

/*

 * Copyright 2013 Cisco Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

	/* return only when dma_alloc_coherent fails in vnic_dev_fw_info

	 * For other failures, like devcmd failure, we return previously

	 * recorded info.

 must be aligned to groups of 32 */

 must be aligned to groups of 32 */

	/* return only when dma_alloc_coherent fails in vnic_dev_stats_dump

	 * For other failures, like devcmd failure, we return previously

	 * recorded stats.

/*

 * Copyright 2008-2010 Cisco Systems, Inc.  All rights reserved.

 * Copyright 2007 Nuova Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

/*

 * Copyright 2011 Cisco Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

/*

 * Checks validity of vf index that came in

 * port profile request

 Deregister mac addresses */

		/* If pre-associate is not part of an associate.

 If pre-associate is not part of an associate. */

 Enable device as standby */

 Check if a pre-associate was called before */

 Enable device as active */

 Register mac address */

/*

 * Copyright 2008-2010 Cisco Systems, Inc.  All rights reserved.

 * Copyright 2007 Nuova Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 ethernet vnic */

 enet dynamic vnic */

 enet SRIOV VF */

 Supported devices */

 end of table */

/*  Interrupt moderation table, which will be used to decide the

 *  coalescing timer values

 *  {rx_rate in Mbps, mapping percentage of the range}

/* This table helps the driver to pick different ranges for rx coalescing

 * timer depending on the link speed.

 0  - 4  Gbps */

 4  - 10 Gbps */

 10 - 40 Gbps */

	/* HW supports offload of only one UDP port. Remove CSUM and GSO MASK

	 * for other UDP port tunnels

 not our interrupt */

 schedule recovery from WQ/RQ error */

	/* With MSI, there is no sharing of interrupts, so this is

	 * our interrupt and there is no need to ack it.  The device

	 * is not providing per-vector masking, so the OS will not

	 * write to PCI config space to mask/unmask the interrupt.

	 * We're using mask_on_assertion for MSI, so the device

	 * automatically masks the interrupt when the interrupt is

	 * generated.  Later, when exiting polling, the interrupt

	 * will be unmasked (see enic_poll).

	 *

	 * Also, the device uses the same PCIe Traffic Class (TC)

	 * for Memory Write data and MSI, so there are no ordering

	 * issues; the MSI will always arrive at the Root Complex

	 * _after_ corresponding Memory Writes (i.e. descriptor

	 * writes).

 schedule recovery from WQ/RQ error */

 Queue additional data fragments */

 EOP? */

	/* Queue the main skb fragment. The fragments are no larger

	 * than max MTU(9000)+ETH_HDR_LEN(14) bytes, which is less

	 * than WQ_ENET_MAX_DESC_LEN length. So only one descriptor

	 * per fragment is queued.

	/* Queue the main skb fragment. The fragments are no larger

	 * than max MTU(9000)+ETH_HDR_LEN(14) bytes, which is less

	 * than WQ_ENET_MAX_DESC_LEN length. So only one descriptor

	 * per fragment is queued.

	/* Preload TCP csum field with IP pseudo hdr calculated

	 * with IP length set to zero.  HW will later add in length

	 * to each TCP segment resulting from the TSO.

	/* Queue WQ_ENET_MAX_DESC_LEN length descriptors

	 * for the main skb fragment

	/* Queue WQ_ENET_MAX_DESC_LEN length descriptors

	 * for additional data fragments

EOP*/

	/* Hardware will overwrite the checksum fields, calculating from

	 * scratch and ignoring the value placed by software.

	 * Offload mode = 00

	 * mss[2], mss[1], mss[0] bits are set

 SOP */, eop,

 VLAN tag from trunking driver */

		/* while not EOP of previous pkt && queue not empty.

		 * For all non EOP bufs, os_buf is NULL.

 netif_tx_lock held, process context with BHs disabled, or BH */

	/* Non-TSO sends must fit within ENIC_NON_TSO_MAX_DESC descs,

	 * which is very likely.  In the off chance it's going to take

	 * more than * ENIC_NON_TSO_MAX_DESC, linearize the skb.

 This is a hard error, log it */

 dev_base_lock rwlock held, nominally process context */

	/* return only when dma_alloc_coherent fails in vnic_dev_stats_dump

	 * For other failures, like devcmd failure, we return previously

	 * recorded stats.

 netif_tx_lock held, BHs disabled */

 netif_tx_lock held, BHs disabled */

			/*

			 * For sriov vf's set the mac in hw

 Special case handling: mac came from IFLA_VF_MAC */

 SR-IOV VF: get mac from adapter */

			/* Things are still the way they were: Implicit

			 * DISASSOCIATE failed

		/* Set flag to indicate that the port assoc/disassoc

		 * request has been sent out to fw

 If DISASSOCIATE, clean up all assigned/saved macaddresses */

		/* Good receive

		/* Hardware does not provide whole packet checksum. It only

		 * provides pseudo checksum. Since hw validates the packet

		 * checksum but not provide us the checksum value. use

		 * CHECSUM_UNNECESSARY.

		 *

		 * In case of encap pkt tcp_udp_csum_ok/tcp_udp_csum_ok is

		 * inner csum_ok. outer_csum_ok is set by hw when outer udp

		 * csum is correct or is zero.

		/* Buffer overflow

	/* The table takes Mbps

	 * traffic *= 8    => bits

	 * traffic *= (10^6 / delta)    => bps

	 * traffic /= 10^6     => Mbps

	 *

	 * Combining, traffic *= (8 / delta)

 Damping */

	/* Accumulate intr event credits for this polling

	 * cycle.  An intr event is the completion of a

	 * a WQ or RQ packet.

 don't unmask intr */,

 don't reset intr timer */);

	/* Buffer allocation failed. Stay in polling

	 * mode so we can try to fill the ring again.

		/* Call the function which refreshes the intr coalescing timer

		 * value based on the traffic.

		/* Some work done, but not enough to stay in polling,

		 * exit polling

 CONFIG_RFS_ACCEL */

 don't unmask intr */,

 reset intr timer */);

	/* Service RQ

	/* Return intr event credits for this polling

	 * cycle.  An intr event is the completion of a

	 * RQ packet.

 don't unmask intr */,

 don't reset intr timer */);

	/* Buffer allocation failed. Stay in polling mode

	 * so we can try to fill the ring again.

		/* Call the function which refreshes the intr coalescing timer

		 * value based on the traffic.

		/* Some work done, but not enough to stay in polling,

		 * exit polling

	/* 1. Read the link speed from fw

	 * 2. Pick the default range for the speed

	 * 3. Update it in enic->rx_coalesce_setting

 Start with the value provided by UCSM */

 no intr */);

 Using intr for notification for INTx/MSI-X */

 rtnl lock is held, process context */

 enable rq before updating rq desc */

 Need at least one buffer on ring to get going */

 rtnl lock is held, process context */

 flush write */

	/* Wait for func to complete...2 seconds max

	/* Enable VLAN tag stripping.

		/* defaults for old adapters

 Stop any activity from infiniband */

 Allow infiniband to fiddle with the device again */

 Stop any activity from infiniband */

 Allow infiniband to fiddle with the device again */

	/* Set interrupt mode (INTx, MSI, MSI-X) depending

	 * on system capabilities.

	 *

	 * Try MSI-X first

	 *

	 * We need n RQs, m WQs, n+m CQs, and n+m+2 INTRs

	 * (the second to last INTR is used for WQ/RQ errors)

	 * (the last INTR is used for notifications)

	/* Use multiple RQs if RSS is enabled

	/* Next try MSI

	 *

	 * We need 1 RQ, 1 WQ, 2 CQs, and 1 INTR

	/* Next try INTx

	 *

	 * We need 1 RQ, 1 WQ, 2 CQs, and 3 INTRs

	 * (the first INTR is used for WQ/RQ)

	 * (the second INTR is used for WQ/RQ errors)

	 * (the last INTR is used for notifications)

 observe RCU grace period after __netif_napi_del() calls */

 Get interrupt coalesce timer info */

	/* Get vNIC configuration

	/* Get available resource counts

	/* modify resource count if we are in kdump_kernel

	/* Set interrupt mode based on resource counts and system

	 * capabilities

	/* Allocate and configure vNIC resources

	/* Allocate net device structure and initialize.  Private

	 * instance data is initialized to zero.

	/* Setup PCI resources

	/* Query PCI controller on system for DMA addressing

	 * limitation for the device.  Try 47-bit first, and

	 * fail to 32-bit.

	/* Map vNIC resources from BAR0-5

	/* Register vNIC device

 Get number of subvnics */

 Allocate structure for port profiles */

	/* Issue device open to get device in known state

	/* Setup devcmd lock

	/*

	 * Set ingress vlan rewrite mode before vnic initialization

	/* Issue device init to initialize the vnic-to-switch link.

	 * We'll start with carrier off and wait for link UP

	 * notification later to turn on carrier.  We don't need

	 * to wait here for the vnic-to-switch link initialization

	 * to complete; link UP notification is the indication that

	 * the process is complete.

	/* Do not call dev_init for a dynamic vnic.

	 * For a dynamic vnic, init_prov_info will be

	 * called later by an upper layer.

	/* Setup notification timer, HW reset task, and wq locks

	/* Register net device

	/* rx coalesce time already got initialized. This gets used

	 * if adaptive coal is turned off

		/* get bit mask from hw about supported offload bit level

		 * BIT(0) = fw supports patch_level 0

		 *	    fcoe bit = encap

		 *	    fcoe_fc_crc_ok = outer csum ok

		 * BIT(1) = always set by fw

		 * BIT(2) = fw supports patch_level 2

		 *	    BIT(0) in rss_hash = encap

		 *	    BIT(1,2) in rss_hash = outer_ip_csum_ok/

		 *				   outer_tcp_csum_ok

		 * used in enic_rq_indicate_buf

		/* mask bits that are supported by driver

 MTU range: 68 - 9000 */

/*

 * Copyright 2011 Cisco Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 rtnl lock is held */

 rtnl lock is held */

/*

 * Copyright 2008-2010 Cisco Systems, Inc.  All rights reserved.

 * Copyright 2007 Nuova Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

	/* Due to a race condition with clearing RQ "mini-cache" in hw, we need

	 * to disable the RQ twice to guarantee that stale descriptors are not

	 * used when this RQ is re-enabled.

 Wait for HW to ACK disable request */

 Use current fetch_index as the ring starting point */

 check for hardware gone  */

 Hardware surprise removal: reset fetch_index */

	/* Anytime we write fetch_index, we need to re-write 0 to rq->enable

	 * to re-sync internal VIC state.

/*

 * Copyright 2013 Cisco Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

/*

 * Copyright 2008-2010 Cisco Systems, Inc.  All rights reserved.

 * Copyright 2007 Nuova Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 Check for mgmt vnic in addition to normal vnic */

 each count is stride bytes long */

	/* The base address of the desc rings must be 512 byte aligned.

	 * Descriptor count is aligned to groups of 32 descriptors.  A

	 * count of 0 means the maximum 4096 descriptors.  Descriptor

	 * size is aligned to 16 bytes.

 PCI-e target device is gone */

 PCI-e target device is gone */

	/* Adding write memory barrier prevents compiler and/or CPU reordering,

	 * thus avoiding descriptor posting before descriptor is initialized.

	 * Otherwise, hardware can read stale descriptor fields.

 check for hardware gone  */

 only get fw_info once and cache it */

 paddr = 0 to unset notify buffer */

 intr num = -1 to unreg for intr */

			/* Emulate these for old CMD_INIT_v1 which

			 * didn't pass a0 so no CMD_INITF_*.

 Default: hardware intr coal timer is in units of 1.5 usecs */

	/* Use defaults when firmware doesn't support the devcmd at all or

	 * supports it for only specific hardware

/* vnic_dev_classifier: Add/Delete classifier entries

 * @vdev: vdev of the device

 * @cmd: CLSF_ADD for Add filter

 *	 CLSF_DEL for Delete filter

 * @entry: In case of ADD filter, the caller passes the RQ number in this

 *	   variable.

 *

 *	   This function stores the filter_id returned by the firmware in the

 *	   same variable before return;

 *

 *	   In case of DEL filter, the caller passes the RQ number. Return

 *	   value is irrelevant.

 * @data: filter data

	/* rss_hash_type is valid only when a0 is 1. Adapter which does not

	 * support CMD_CAPABILITY for rss_hash_type has a0 = 0

/*

 * Copyright 2008-2010 Cisco Systems, Inc.  All rights reserved.

 * Copyright 2007 Nuova Systems, Inc.  All rights reserved.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * acenic.c: Linux driver for the Alteon AceNIC Gigabit Ethernet card

 *           and other Tigon based cards.

 *

 * Copyright 1998-2002 by Jes Sorensen, <jes@trained-monkey.org>.

 *

 * Thanks to Alteon and 3Com for providing hardware and documentation

 * enabling me to write this driver.

 *

 * A mailing list for discussing the use of this driver has been

 * setup, please subscribe to the lists if you have any questions

 * about the driver. Send mail to linux-acenic-help@sunsite.auc.dk to

 * see how to subscribe.

 *

 * Additional credits:

 *   Pete Wyckoff <wyckoff@ca.sandia.gov>: Initial Linux/Alpha and trace

 *       dump support. The trace dump support has not been

 *       integrated yet however.

 *   Troy Benjegerdes: Big Endian (PPC) patches.

 *   Nate Stahl: Better out of memory handling and stats support.

 *   Aman Singla: Nasty race between interrupt handler and tx code dealing

 *                with 'testing the tx_ret_csm and setting tx_full'

 *   David S. Miller <davem@redhat.com>: conversion to new PCI dma mapping

 *                                       infrastructure and Sparc support

 *   Pierrick Pinasseau (CERN): For lending me an Ultra 5 to test the

 *                              driver under Linux/Sparc64

 *   Matt Domsch <Matt_Domsch@dell.com>: Detect Alteon 1000baseT cards

 *                                       ETHTOOL_GDRVINFO support

 *   Chip Salzenberg <chip@valinux.com>: Fix race condition between tx

 *                                       handler and close() cleanup.

 *   Ken Aaker <kdaaker@rchland.vnet.ibm.com>: Correct check for whether

 *                                       memory mapped IO is enabled to

 *                                       make the driver work on RS/6000.

 *   Takayoshi Kouchi <kouchi@hpc.bs1.fc.nec.co.jp>: Identifying problem

 *                                       where the driver would disable

 *                                       bus master mode if it had to disable

 *                                       write and invalidate.

 *   Stephen Hack <stephen_hack@hp.com>: Fixed ace_set_mac_addr for little

 *                                       endian systems.

 *   Val Henson <vhenson@esscom.com>:    Reset Jumbo skb producer and

 *                                       rx producer index when

 *                                       flushing the Jumbo ring.

 *   Hans Grobler <grobh@sun.ac.za>:     Memory leak fixes in the

 *                                       driver init path.

 *   Grant Grundler <grundler@cup.hp.com>: PCI write posting fixes.

/*

 * Farallon used the DEC vendor ID by mistake and they seem not

 * to care - stinky!

	/*

	 * Farallon used the DEC vendor ID on their cards incorrectly,

	 * then later Alteon's ID.

/*

 * These must be defined before the firmware is included.

/*

 * This driver currently supports Tigon I and Tigon II based cards

 * including the Alteon AceNIC, the 3Com 3C985[B] and NetGear

 * GA620. The driver should also work on the SGI, DEC and Farallon

 * versions of the card, however I have not been able to test that

 * myself.

 *

 * This card is really neat, it supports receive hardware checksumming

 * and jumbo frames (up to 9000 bytes) and does a lot of work in the

 * firmware. Also the programming interface is quite neat, except for

 * the parts dealing with the i2c eeprom on the card ;-)

 *

 * Using jumbo frames:

 *

 * To enable jumbo frames, simply specify an mtu between 1500 and 9000

 * bytes to ifconfig. Jumbo frames can be enabled or disabled at any time

 * by running `ifconfig eth<X> mtu <MTU>' with <X> being the Ethernet

 * interface number and <MTU> being the MTU value.

 *

 * Module parameters:

 *

 * When compiled as a loadable module, the driver allows for a number

 * of module parameters to be specified. The driver supports the

 * following module parameters:

 *

 *  trace=<val> - Firmware trace level. This requires special traced

 *                firmware to replace the firmware supplied with

 *                the driver - for debugging purposes only.

 *

 *  link=<val>  - Link state. Normally you want to use the default link

 *                parameters set by the driver. This can be used to

 *                override these in case your switch doesn't negotiate

 *                the link properly. Valid values are:

 *         0x0001 - Force half duplex link.

 *         0x0002 - Do not negotiate line speed with the other end.

 *         0x0010 - 10Mbit/sec link.

 *         0x0020 - 100Mbit/sec link.

 *         0x0040 - 1000Mbit/sec link.

 *         0x0100 - Do not negotiate flow control.

 *         0x0200 - Enable RX flow control Y

 *         0x0400 - Enable TX flow control Y (Tigon II NICs only).

 *                Default value is 0x0270, ie. enable link+flow

 *                control negotiation. Negotiating the highest

 *                possible link speed with RX flow control enabled.

 *

 *                When disabling link speed negotiation, only one link

 *                speed is allowed to be specified!

 *

 *  tx_coal_tick=<val> - number of coalescing clock ticks (us) allowed

 *                to wait for more packets to arive before

 *                interrupting the host, from the time the first

 *                packet arrives.

 *

 *  rx_coal_tick=<val> - number of coalescing clock ticks (us) allowed

 *                to wait for more packets to arive in the transmit ring,

 *                before interrupting the host, after transmitting the

 *                first packet in the ring.

 *

 *  max_tx_desc=<val> - maximum number of transmit descriptors

 *                (packets) transmitted before interrupting the host.

 *

 *  max_rx_desc=<val> - maximum number of receive descriptors

 *                (packets) received before interrupting the host.

 *

 *  tx_ratio=<val> - 7 bit value (0 - 63) specifying the split in 64th

 *                increments of the NIC's on board memory to be used for

 *                transmit and receive buffers. For the 1MB NIC app. 800KB

 *                is available, on the 1/2MB NIC app. 300KB is available.

 *                68KB will always be available as a minimum for both

 *                directions. The default value is a 50/50 split.

 *  dis_pci_mem_inval=<val> - disable PCI memory write and invalidate

 *                operations, default (1) is to always disable this as

 *                that is what Alteon does on NT. I have not been able

 *                to measure any real performance differences with

 *                this on my systems. Set <val>=0 if you want to

 *                enable these operations.

 *

 * If you use more than one NIC, specify the parameters for the

 * individual NICs with a comma, ie. trace=0,0x00001fff,0 you want to

 * run tracing on NIC #2 but not on NIC #1 and #3.

 *

 * TODO:

 *

 * - Proper multicast support.

 * - NIC dump support.

 * - More tuning parameters.

 *

 * The mini ring is not used under Linux and I am not sure it makes sense

 * to actually use it.

 *

 * New interrupt handler strategy:

 *

 * The old interrupt handler worked using the traditional method of

 * replacing an skbuff with a new one when a packet arrives. However

 * the rx rings do not need to contain a static number of buffer

 * descriptors, thus it makes sense to move the memory allocation out

 * of the main interrupt handler and do it in a bottom half handler

 * and only allocate new buffers when the number of buffers in the

 * ring is below a certain threshold. In order to avoid starving the

 * NIC under heavy load it is however necessary to force allocation

 * when hitting a minimum threshold. The strategy for alloction is as

 * follows:

 *

 *     RX_LOW_BUF_THRES    - allocate buffers in the bottom half

 *     RX_PANIC_LOW_THRES  - we are very low on buffers, allocate

 *                           the buffers in the interrupt handler

 *     RX_RING_THRES       - maximum number of buffers in the rx ring

 *     RX_MINI_THRES       - maximum number of buffers in the mini ring

 *     RX_JUMBO_THRES      - maximum number of buffers in the jumbo ring

 *

 * One advantagous side effect of this allocation approach is that the

 * entire rx processing can be done without holding any spin lock

 * since the rx rings and registers are totally independent of the tx

 * ring and its registers.  This of course includes the kmalloc's of

 * new skb's. Thus start_xmit can run in parallel with rx processing

 * and the memory allocation on SMP systems.

 *

 * Note that running the skb reallocation in a bottom half opens up

 * another can of races which needs to be handled properly. In

 * particular it can happen that the interrupt handler tries to run

 * the reallocation while the bottom half is either running on another

 * CPU or was interrupted on the same CPU. To get around this the

 * driver uses bitops to prevent the reallocation routines from being

 * reentered.

 *

 * TX handling can also be done without holding any spin lock, wheee

 * this is fun! since tx_ret_csm is only written to by the interrupt

 * handler. The case to be aware of is when shutting down the device

 * and cleaning up where it is necessary to make sure that

 * start_xmit() is not running while this is happening. Well DaveM

 * informs me that this case is already protected against ... bye bye

 * Mr. Spin Lock, it was nice to know you.

 *

 * TX interrupts are now partly disabled so the NIC will only generate

 * TX interrupts for the number of coal ticks, not for the number of

 * TX packets in the queue. This should reduce the number of TX only,

 * ie. when no RX processing is done, interrupts seen.

/*

 * Threshold values for RX buffer allocation - the low water marks for

 * when to start refilling the rings are set to 75% of the ring

 * sizes. It seems to make sense to refill the rings entirely from the

 * intrrupt handler once it gets below the panic threshold, that way

 * we don't risk that the refilling is moved to another CPU when the

 * one running the interrupt handler just got the slab code hot in its

 * cache.

/*

 * Size of the mini ring entries, basically these just should be big

 * enough to take TCP ACKs

/*

 * There seems to be a magic difference in the effect between 995 and 996

 * but little difference between 900 and 995 ... no idea why.

 *

 * There is now a default set of tuning parameters which is set, depending

 * on whether or not the user enables Jumbo frames. It's assumed that if

 * Jumbo frames are enabled, the user wants optimal tuning for that case.

 996 */

 was 40 */

 1000 */

 24 */

/*

 * Standard firmware and early modifications duplicate

 * IRQ load without this flag (coal timer is never reset).

 * Note that with this flag tx_coal should be less than

 * time to xmit full tx ring.

 * 400usec is not so bad for tx ring size of 128.

 worth it */

/*

 * With modified firmware, this is not necessary, but still useful.

home.cern.ch/~jes/gige/acenic.html\n";

 we only display this string ONCE */

	/*

	 * Enable master mode before we start playing with the

	 * pci_command word since pci_set_master() will modify

	 * it.

 OpenFirmware on Mac's does not set this - DOH.. */

	/*

	 * Remap the regs into kernel space - this is abuse of

	 * dev->base_addr since it was means for I/O port

	 * addresses but who gives a damn.

	/*

	 * This clears any pending interrupts

 flush */

	/*

	 * Make sure no other CPUs are processing interrupts

	 * on the card before the buffers are being released.

	 * Otherwise one might experience some `interesting'

	 * effects.

	 *

	 * Then release the RX buffers - jumbo buffers were

	 * already released in ace_close().

	/*

	 * Only allocate a host TX ring for the Tigon II, the Tigon I

	 * has to use PCI registers for this ;-(

 Clean up. */

/*

 * Generic cleanup handling data allocated during init. Used when the

 * module is unloaded or if an error occurs during initialization

/*

 * Commands are considered to be slow.

	/*

	 * aman@sgi.com - its useful to do a NIC reset here to

	 * address the `Firmware not running' problem subsequent

	 * to any crashes involving the NIC

 PCI write posting */

	/*

	 * Don't access any other registers before this point!

	/*

	 * This will most likely need BYTE_SWAP once we switch

	 * to using __raw_writel()

 PCI write posting */

	/*

	 * Stop the NIC CPU and clear pending interrupts

 PCI write posting */

 PCI write posting */

		/*

		 * The SRAM bank size does _not_ indicate the amount

		 * of memory on the card, it controls the _bank_ size!

		 * Ie. a 1MB AceNIC will have two banks of 512KB.

	/*

	 * ModeStat _must_ be set after the SRAM settings as this change

	 * seems to corrupt the ModeStat and possible other registers.

	 * The SRAM settings survive resets and setting it to the same

	 * value a second time works as well. This is what caused the

	 * `Firmware not running' problem on the Tigon II.

 PCI write posting */

	/*

	 * Looks like this is necessary to deal with on all architectures,

	 * even this %$#%$# N440BX Intel based thing doesn't get it right.

	 * Ie. having two NICs in the machine, one will have the cache

	 * line set at boot time, the other will not.

	/*

	 * Set the max DMA transfer size. Seems that for most systems

	 * the performance is better when no MAX parameter is

	 * set. However for systems enabling PCI write and invalidate,

	 * DMA writes must be set to the L1 cache line size to get

	 * optimal performance.

	 *

	 * The default is now to turn the PCI write and invalidate off

	 * - that is what Alteon does for NT.

		/*

		 * Tuning parameters only supported for 8 cards

	/*

	 * On this platform, we know what the best dma settings

	 * are.  We use 64-byte maximum bursts, because if we

	 * burst larger than the cache line size (or even cross

	 * a 64byte boundary in a single burst) the UltraSparc

	 * PCI controller will disconnect at 64-byte multiples.

	 *

	 * Read-multiple will be properly enabled above, and when

	 * set will give the PCI controller proper hints about

	 * prefetching.

	/*

	 * All the docs say MUST NOT. Well, I did.

	 * Nothing terrible happens, if we load wrong size.

	 * Bit w&i still works better!

	/*

	 * The Host PCI bus controller driver has to set FBB.

	 * If all devices on that PCI bus support FBB, then the controller

	 * can enable FBB support in the Host PCI Bus controller (or on

	 * the PCI-PCI bridge if that applies).

	 * -ggg

	/*

	 * I have received reports from people having problems when this

	 * bit is enabled.

	/*

	 * Configure DMA attributes.

	/*

	 * Initialize the generic info block and the command+event rings

	 * and the control blocks for the transmit and receive rings

	 * as they need to be setup once and for all.

	/*

	 * Get the memory for the skb rings.

	/*

	 * The Tigon I does not like having the TX ring in host memory ;-(

	/*

	 * Potential item for tuning parameter

 NO */

	/*

	 * McKinley boxes do not like us fiddling with AssistState

	 * this early

	/*

	 * Default link parameters

	/*

	 * Override link default parameters

	/*

	 * Set tx_csm before we start receiving interrupts, otherwise

	 * the interrupt handler might think it is supposed to process

	 * tx ints before we are up and running, which may cause a null

	 * pointer access in the int handler.

	/*

	 * Enable DMA engine now.

	 * If we do this sooner, Mckinley box pukes.

	 * I assume it's because Tigon II DMA engine wants to check

	 * *something* even before the CPU is started.

 enable DMA */

	/*

	 * Start the NIC CPU

	/*

	 * Wait for the firmware to spin up - max 3 seconds.

		/* aman@sgi.com - account for badly behaving firmware/NIC:

		 * - have observed that the NIC may continue to generate

		 *   interrupts for some reason; attempt to stop it - halt

		 *   second CPU for Tigon II cards, and also clear Mb0

		 * - if we're a module, we'll fail to load if this was

		 *   the only GbE card in the system => if the kernel does

		 *   see an interrupt from the NIC, code to handle it is

		 *   gone and OOps! - so free_irq also

	/*

	 * We load the ring here as there seem to be no way to tell the

	 * firmware to wipe the ring without re-initializing it.

	/*

	 * We haven't received a stats update event for more than 2.5

	 * seconds and there is data in the transmit queue, thus we

	 * assume the card is stuck.

 This can happen due to ieee flow control. */

/*

 * Copy the contents of the NIC's trace buffer to kernel memory.

/*

 * Load the standard rx ring.

 *

 * Loading rings is safe without holding the spin lock since this is

 * done only before the device is enabled, thus no interrupts are

 * generated and by the interrupt handler/tasklet handler.

/*

 * Load the jumbo rx ring, this may happen at any time if the MTU

 * is changed to a value > 1500.

/*

 * All events are considered to be slow (RX/TX ints do not generate

 * events) and are handled here, outside the main interrupt handler,

 * to reduce the size of the handler.

 make sure the rx descriptor isn't read before rxretprd */

			/*

			 * Normal frames do not have any flags set

			 *

			 * Mini and normal frames arrive frequently,

			 * so use a local counter to avoid doing

			 * atomic operations for each packet arriving.

		/*

		 * Fly baby, fly!

		/*

		 * Instead of forcing the poor tigon mips cpu to calculate

		 * pseudo hdr checksum, we do this ourselves.

 send it up */

	/*

	 * According to the documentation RxRetCsm is obsolete with

	 * the 12.3.x Firmware - my Tigon I NICs seem to disagree!

	/* So... tx_ret_csm is advanced _after_ check for device wakeup.

	 *

	 * We could try to make it before. In this case we would get

	 * the following race condition: hard_start_xmit on other cpu

	 * enters after we advanced tx_ret_csm and fills space,

	 * which we have just freed, so that we make illegal device wakeup.

	 * There is no good way to workaround this (at entry

	 * to ace_start_xmit detects this condition and prevents

	 * ring corruption, but it is not a good workaround.)

	 *

	 * When tx_ret_csm is advanced after, we wake up device _only_

	 * if we really have some space in ring (though the core doing

	 * hard_start_xmit can see full ring for some period and has to

	 * synchronize.) Superb.

	 * BUT! We get another subtle race condition. hard_start_xmit

	 * may think that ring is full between wakeup and advancing

	 * tx_ret_csm and will stop device instantly! It is not so bad.

	 * We are guaranteed that there is something in ring, so that

	 * the next irq will resume transmission. To speedup this we could

	 * mark descriptor, which closes ring with BD_FLG_COAL_NOW

	 * (see ace_start_xmit).

	 *

	 * Well, this dilemma exists in all lock-free devices.

	 * We, following scheme used in drivers by Donald Becker,

	 * select the least dangerous.

	 *							--ANK

	/*

	 * In case of PCI shared interrupts or spurious interrupts,

	 * we want to make sure it is actually our interrupt before

	 * spending any time in here.

	/*

	 * ACK intr now. Otherwise we will lose updates to rx_ret_prd,

	 * which happened _after_ rxretprd = *ap->rx_ret_prd; but before

	 * writel(0, &regs->Mb0Lo).

	 *

	 * "IRQ avoidance" recommended in docs applies to IRQs served

	 * threads and it is wrong even for that case.

	/*

	 * There is no conflict between transmit handling in

	 * start_xmit and receive processing, thus there is no reason

	 * to take a spin lock for RX handling. Wait until we start

	 * working on the other stuff - hey we don't need a spin lock

	 * anymore.

		/*

		 * If each skb takes only one descriptor this check degenerates

		 * to identity, because new space has just been opened.

		 * But if skbs are fragmented we must check that this index

		 * update releases enough of space, otherwise we just

		 * wait for device to make more work.

	/*

	 * This has to go last in the interrupt handler and run with

	 * the spin lock released ... what lock?

	/*

	 * Setup the bottom half rx ring refill handler

	/*

	 * Without (or before) releasing irq and stopping hardware, this

	 * is an absolute non-sense, by the way. It will be reset instantly

	 * by the first irq.

	/*

	 * Make sure one CPU is not processing packets while

	 * buffers are being released by another.

 NB: TIGON_1 is special, tx_ring is in io space */

 Look at ace_tx_int for explanations. */

				/*

				 * Only the last fragment frees

				 * the skb!

		/*

		 * A TX-descriptor producer (an IRQ) might have gotten

		 * between, making the ring free again. Since xmit is

		 * serialized, this is the only situation we have to

		 * re-test.

	/*

	 * This race condition is unavoidable with lock-free drivers.

	 * We wake up the queue _before_ tx_prd is advanced, so that we can

	 * enter hard_start_xmit too early, while tx ring still looks closed.

	 * This happens ~1-4 times per 100000 packets, so that we can allow

	 * to loop syncing to other CPU. Probably, we need an additional

	 * wmb() in ace_tx_intr as well.

	 *

	 * Note that this race is relieved by reserving one more entry

	 * in tx ring than it is necessary (see original non-SG driver).

	 * However, with SG we need to reserve 2*MAX_SKB_FRAGS+1, which

	 * is already overkill.

	 *

	 * Alternative is to return with 1 not throttling queue. In this

	 * case loop becomes longer, no more useful effects.

 The ring is stuck full. */

	/*

	 * Current struct ethtool_cmd is insufficient

/*

 * Set the hardware MAC address.

	/*

	 * For the time being multicast relies on the upper layers

	 * filtering it properly. The Firmware does not allow one to

	 * set the entire multicast list at a time and keeping track of

	 * it here is going to be messy.

 Firmware is big-endian */

/*

 * Download the firmware into the SRAM on the NIC

 *

 * This operation requires the NIC to be halted and is performed with

 * interrupts disabled and with the spinlock hold.

	/* Firmware blob starts with version numbers, followed by

	   load and start address. Remainder is the blob to be loaded

	   contiguously from load address. We don't bother to represent

	   the BSS/SBSS sections any more, since we were clearing the

	/*

	 * Do not try to clear more than 512KiB or we end up seeing

	 * funny things on NICs with only 512KiB SRAM

/*

 * The eeprom on the AceNIC is an Atmel i2c EEPROM.

 *

 * Accessing the EEPROM is `interesting' to say the least - don't read

 * this code right after dinner.

 *

 * This is all about black magic and bit-banging the device .... I

 * wonder in what hospital they have put the guy who designed the i2c

 * specs.

 *

 * Oh yes, this is only the beginning!

 *

 * Thanks to Stevarino Webinski for helping tracking down the bugs in the

 * code i2c readout code by beta testing all my hacks.

 sample data in middle of high clk */

/*

 * Read a whole byte from the EEPROM.

	/*

	 * Don't take interrupts on this CPU will bit banging

	 * the %#%#@$ I2C device

 sample data mid high clk */

/*

 * Amiga Linux/68k A2065 Ethernet Driver

 *

 * (C) Copyright 1995-2003 by Geert Uytterhoeven <geert@linux-m68k.org>

 *

 * Fixes and tips by:

 *	- Janos Farkas (CHEXUM@sparta.banki.hu)

 *	- Jes Degn Soerensen (jds@kom.auc.dk)

 *	- Matt Domsch (Matt_Domsch@dell.com)

 *

 * ----------------------------------------------------------------------------

 *

 * This program is based on

 *

 *	ariadne.?:	Amiga Linux/68k Ariadne Ethernet Driver

 *			(C) Copyright 1995 by Geert Uytterhoeven,

 *                                            Peter De Schrijver

 *

 *	lance.c:	An AMD LANCE ethernet driver for linux.

 *			Written 1993-94 by Donald Becker.

 *

 *	Am79C960:	PCnet(tm)-ISA Single-Chip Ethernet Controller

 *			Advanced Micro Devices

 *			Publication #16907, Rev. B, Amendment/0, May 1994

 *

 * ----------------------------------------------------------------------------

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of the Linux

 * distribution for more details.

 *

 * ----------------------------------------------------------------------------

 *

 * The A2065 is a Zorro-II board made by Commodore/Ameristar. It contains:

 *

 *	- an Am7990 Local Area Network Controller for Ethernet (LANCE) with

 *	  both 10BASE-2 (thin coax) and AUI (DB-15) connectors

#define DEBUG*/

#define TEST_HITS*/

 Transmit/Receive Ring Definitions */

 Layout of the Lance's RAM Buffer */

 Pre-set mode (reg. 15) */

 Physical ethernet address */

 Multicast filter. */

 Receive and transmit ring base, along with extra bits. */

 receive descriptor addr */

 receive len and high addr */

 transmit descriptor addr */

 transmit len and high addr */

 The Tx and Rx ring entries must aligned on 8-byte boundaries. */

 Private Device Data */

 Hosts view */

 Lance view */

 cable-selection is TPE */

 cable-selection by carrier */

 Load the CSR registers */

 Point back to csr0 */

 Setup the Lance Rx and Tx rings */

 for LANCE_ADDR computations */

 Lock out other processes while setting up hardware */

	/* Copy the ethernet address to the lance init block

	 * Note that on the sparc you need to swap the ethernet address.

 Setup the Tx ring entries */

 The ones required by tmd2 */

 Setup the Rx ring entries */

 Setup the initialization block */

 Setup rx descriptor pointer */

 Setup tx descriptor pointer */

 Clear the multicast filter */

 Wait for the lance to complete initialization */

 Clear IDON by writing a "1", enable interrupts and start lance */

 We got an incomplete frame? */

			/* Count only the end frame as a rx error,

			 * not the beginning

 16 byte align */

 make room */

 Return the packet to the pool */

 csr0 is 2f3 */

 csr0 is 73 */

 If we hit a packet not owned by us, stop */

 Stop the lance */

			/* buffer errors and underflows turn off

			 * the transmitter, so restart the adapter

 Stop the lance */

 So we don't count the packet more than once. */

 One collision before packet was sent. */

 More than one collision, be optimistic. */

 LANCE Controller Status */

 Check if any interrupt has */

 been generated by the Lance. */

 Acknowledge all the interrupt sources ASAP */

 Clear the error condition */

 Log misc errors. */

 Tx babble. */

 Missed a Rx frame. */

 Restart the chip. */

 Stop the Lance */

 Install the Interrupt handler */

 Stop the card */

 Stop the lance */

 prevent tx timeout */

 dump the packet */

 Now, give the packet to the lance */

 Kick the lance: transmit now */

 taken from the depca driver */

 set all multicast bits */

 clear the multicast filter */

 Add addresses */

 Commodore */

 Ameristar */

 pcnet32.c: An AMD PCnet32 ethernet driver for linux. */

/*

 *	Copyright 1996-1999 Thomas Bogendoerfer

 *

 *	Derived from the lance driver written 1993,1994,1995 by Donald Becker.

 *

 *	Copyright 1993 United States Government as represented by the

 *	Director, National Security Agency.

 *

 *	This software may be used and distributed according to the terms

 *	of the GNU General Public License, incorporated herein by reference.

 *

 *	This driver is for PCnet32 and PCnetPCI based ethercards

/**************************************************************************

 *  23 Oct, 2000.

 *  Fixed a few bugs, related to running the controller in 32bit mode.

 *

 *  Carsten Langgaard, carstenl@mips.com

 *  Copyright (C) 2000 MIPS Technologies, Inc.  All rights reserved.

 *

/*

 * PCI device identifiers for "new style" Linux PCI Device Drivers

	/*

	 * Adapters that were sold with IBM's RS/6000 or pSeries hardware have

	 * the incorrect vendor id.

 terminate list */

/*

 * VLB I/O addresses

 Mapping -- 0:20, 1:64, 2:128, 3:~220 (depends on chip vers) */

 check for VLB cards ? */

/*

 * table to translate option values from tulip

 * to internal options

  0 Auto-select      */

  1 BNC/AUI          */

  2 AUI/BNC          */

  3 not supported    */

  4 10baseT-FD       */

  5 not supported    */

  6 not supported    */

  7 not supported    */

  8 not supported    */

  9 MII 10baseT      */

 10 MII 10baseT-FD   */

 11 MII (autosel)    */

 12 10BaseT          */

 13 MII 100BaseTx    */

 14 MII 100BaseTx-FD */

 15 not supported    */

 More are supported, limit only on options */

/*

 *				Theory of Operation

 *

 * This driver uses the same software structure as the normal lance

 * driver. So look for a verbose description in lance.c. The differences

 * to the normal lance driver is the use of the 32bit mode of PCnet32

 * and PCnetPCI chips. Because these chips are 32bit chips, there is no

 * 16MB limitation and we don't need bounce buffers.

/*

 * Set the number of Tx and Rx buffers, using Log_2(# buffers).

 * Reasonable default values are 4 Tx buffers, and 16 Rx buffers.

 * That translates to 2 (4 == 2^^2) and 4 (16 == 2^^4).

 2^9 == 512 */

 actual buffer length after being aligned */

 chip wants twos complement of the (aligned) buffer length */

 Offsets from base I/O address. */

 The PCNET32 Rx and Tx ring descriptors. */

 two`s complement of length */

 two`s complement of length */

 The PCNET32 32-Bit initialization block, described in databook. */

 Receive and transmit ring base, along with extra bits. */

 PCnet32 access functions */

/*

 * The first field of pcnet32_private is read by the ethernet device

 * so the structure should be allocated using dma_alloc_coherent().

 The Tx and Rx ring entries must be aligned on 16-byte boundaries in 32bit mode. */

	dma_addr_t		init_dma_addr;/* DMA address of beginning of the init block,

 The saved address of a sent-in-place packet/buffer, for skfree(). */

 Guard lock */

 The next free ring entry */

 current rx ring size */

 current tx ring size */

 rx ring modular mask */

 tx ring modular mask */

 ring entries to be freed. */

 number of phys found */

 shared irq possible */

 disable transmit stop on uflo */

 mii port available */

 autoneg enabled */

 port set to TP */

 full duplex enabled */

 debug message level */

 each bit indicates an available PHY */

 which variant this is */

 saved registers during ethtool blink */

 prevent tx timeout */

/*

 * Allocate space for the new sized tx ring.

 * Free old resources

 * Save new resources.

 * Any failure keeps old resources.

 * Must be called with lp->lock held.

/*

 * Allocate space for the new sized rx ring.

 * Re-use old receive buffers.

 *   alloc extra buffers

 *   free unneeded buffers

 *   free unneeded buffers

 * Save new resources.

 * Any failure keeps old resources.

 * Must be called with lp->lock held.

 first copy the current receive buffers */

 now allocate any new buffers needed */

 keep the original lists and buffers */

 and free any unneeded buffers */

 free all allocated skbuffs */

 CPU owns buffer */

 Make sure adapter sees owner change */

/*

 * lp->lock must be held.

 really old chips have to be stopped. */

 set SUSPEND (SPND) - CSR5 bit 0 */

 poll waiting for bit to be set */

 clear SUSPEND (SPND) - CSR5 bit 0 */

 card base I/O address */

 only read link if port is set to TP */

 link always up for AUI port or port auto select */

 card base I/O address */

 can not detect link on really old chips */

 stop the chip */

	/* set the minimum ring size to 4, to allow the loopback test to work

	 * unchanged.

 end pcnet32_ethtool_test */

 access to registers */

 card base I/O address */

 sk buff */

 counters */

 number of TX/RX buffers and descs */

 TX ring status */

 test of ring status */

 return code */

 size of packets */

 source packet data */

 length of source packets */

 default to fail */

 stop the chip */

 Reset the PCNET32 */

 auto tx pad */

 switch pcnet32 to 32bit mode */

 purge & init rings but don't actually restart */

 Set STOP bit */

 Initialize Transmit buffers. */

 create space for data */

 put DA and SA into the skb */

 type */

 packet number */

 fill packet with data */

 Make sure owner changes after all others are visible */

 set internal loopback in BCR32 */

 set int loopback in CSR15 */

 Set STRT bit */

 Check status of descriptors */

 Set STOP bit */

 reset bits 6 and 2 */

 reset internal loopback */

 return to 16bit mode */

 end pcnet32_loopback_test  */

 Save the current value of the bcrs */

 cycle on/off twice per second */

 Blink the led */

 Restore the original value of the bcrs */

/*

 * process one receive descriptor entry

 There was an error. */

		/*

		 * There is a tricky error noted by John Murphy,

		 * <murf@perftech.com> to Russ Nelson: Even with full-sized

		 * buffers it's possible for a jabber packet to use two

		 * buffers, with only the last correctly noting the error.

 Only count a general error at the */

 end of a packet. */

 Discard oversize frames. */

		/*

		 * map the new buffer, if mapping fails, drop the packet and

		 * reuse the old buffer

 Make room */

 If we own the next entry, it's a new packet. Send it up. */

		/*

		 * The docs say that the buffer length isn't touched, but Andrew

		 * Boyd of QNX reports that some revs of the 79C965 clear it.

 Make sure owner changes after others are visible */

 It still hasn't been Txed */

 There was a major error, log it. */

 Ackk!  On FIFO errors the Tx unit is turned off! */

 Remove this verbosity later! */

 If controller doesn't recover ... */

 Ackk!  On FIFO errors the Tx unit is turned off! */

 Remove this verbosity later! */

 We must free the original skb */

 The ring is no longer full, clear tbusy. */

 reset the chip to clear the error condition, then restart */

 auto tx pad */

 clear interrupt masks */

 Set interrupt enable. */

 If not stopped */

 read address PROM */

 read control and status registers */

 read bus configuration registers */

 skip bcr30 so as not to hang 79C976 */

 read mii phy registers */

 If not stopped */

/* only probes for non-PCI devices, the rest are handled by

 search for PCnet32 VLB cards at known addresses */

 check if there is really a pcnet chip on that ioaddr */

/* pcnet32_probe1

 *  Called from both pcnet32_probe_vlbus and pcnet_probe_pci.

 *  pdev will be NULL when called from pcnet32_probe_vlbus.

 reset the chip */

 NOTE: 16-bit check is first, otherwise some older PCnet chips fail */

 initialize variables */

 PCI */

 970 gives the wrong chip id back */

 486/VL bus */

 PCI */

 PCI */

 PCI */

 PCI */

 PCI */

		/*

		 * This is based on specs published at www.amd.com.  This section

		 * assumes that a card with a 79C978 wants to go into standard

		 * ethernet mode.  The 79C978 can also go into 1Mb HomePNA mode,

		 * and the module option homepna=1 can select this instead.

 default to 10Mb ethernet */

 switch to home wiring mode */

 PCI */

	/*

	 *  On selected chips turn on the BCR18:NOUFLO bit. This stops transmit

	 *  starting until the packet is loaded. Strike one for reliability, lose

	 *  one for latency - although on PCI this isn't a big loss. Older chips

	 *  have FIFO's smaller than a packet, so you can't do this.

	 *  Turn on BCR18:BurstRdEn and BCR18:BurstWrEn.

	/*

	 * The Am79C973/Am79C975 controllers come with 12K of SRAM

	 * which we can use for the Tx/Rx buffers but most importantly,

	 * the use of SRAM allow us to use the BCR18:NOUFLO bit to avoid

	 * Tx fifo underflows.

		/*

		 * The SRAM is being configured in two steps. First we

		 * set the SRAM size in the BCR25:SRAM_SIZE bits. According

		 * to the datasheet, each bit corresponds to a 512-byte

		 * page so we can have at most 24 pages. The SRAM_SIZE

		 * holds the value of the upper 8 bits of the 16-bit SRAM size.

		 * The low 8-bits start at 0x00 and end at 0xff. So the

		 * address range is from 0x0000 up to 0x17ff. Therefore,

		 * the SRAM_SIZE is set to 0x17. The next step is to set

		 * the BCR26:SRAM_BND midway through so the Tx and Rx

		 * buffers can share the SRAM equally.

 And finally enable the NOUFLO bit */

	/* In most chips, after a chip reset, the ethernet address is read from the

	 * station address PROM at the base address and programmed into the

	 * "Physical Address Registers" CSR12-14.

	 * As a precautionary measure, we read the PROM values and complain if

	 * they disagree with the CSRs.  If they miscompare, and the PROM addr

	 * is valid, then the PROM addr is used.

 There may be endianness issues here. */

 read PROM address and compare with CSR address */

 if the ethernet address is not valid, force to 00:00:00:00:00:00 */

 Version 0x2623 and 0x2624 */

 Check tx_start_pt */

 Check Burst/Bus control */

 dma_alloc_coherent returns page-aligned memory, so we do not have to check the alignment */

 default tx ring size */

 default rx ring size */

 force default port to TP on 79C970A so link detection can work */

 napi.weight is used in both the napi and non-napi cases */

 prior to register_netdev, dev->name is not yet correct */

 detect special T1/E1 WAN card by checking for MAC address */

 Disable Rx and Tx. */

 switch pcnet32 to 32bit mode */

 use the IRQ provided by PCI */

		/*

		 * To auto-IRQ we enable the initialization-done and DMA error

		 * interrupts. For ISA boards we get a DMA error, but VLB and PCI

		 * boards will work.

 Trigger an initialization just for the interrupt. */

 Set the mii phy_id so that we can query the link state */

 lp->phycount and lp->phymask are set to 0 by memset above */

 scan for PHYs */

 79C971 & 79C972 have phantom phy at id 31 */

 The PCNET32-specific entries in the device structure. */

 Fill in the generic fields of the device structure. */

 enable LED writes */

 if any allocation fails, caller must also call pcnet32_free_ring */

 Check for a valid station address */

 Reset the PCNET32 */

 switch pcnet32 to 32bit mode */

 set/reset autoselect bit */

 handle full duplex setting */

 workaround of xSeries250, turn on for 79C975 only */

 set/reset GPSI bit in test register */

 Allied Telesyn AT 2700/2701 FX are 100Mbit only and do not negotiate */

		/*

		 * 24 Jun 2004 according AMD, in order to change the PHY,

		 * DANAS (or DISPM for 79C976) must be set; then select the speed,

		 * duplex, and/or enable auto negotiation, and clear DANAS

 disable Auto Negotiation, set 10Mpbs, HD */

 enable auto negotiate, setup, disable fd */

		/*

		 * There is really no good other way to handle multiple PHYs

		 * other than turning off all automatics

 stop MII manager */

 setup ecmd */

 isolate all but the first PHY */

 use mii_ethtool_sset to setup PHY */

 Disable transmit stop on underflow */

 Re-initialize the PCNET32, and start it when done. */

 auto tx pad */

 Print the link status and start the watchdog */

	/*

	 * We used to clear the InitDone bit, 0x0100, here but Mark Stockton

	 * reports that doing so triggers a bug in the '974.

 Always succeed */

 free any allocated skbuffs */

	/*

	 * Switch back to 16bit mode to avoid problems with dumb

	 * DOS packet driver after a warm reboot

/*

 * The LANCE has been halted for one reason or another (busmaster memory

 * arbitration error, Tx FIFO underflow, driver stopped it to reconfigure,

 * etc.).  Modern LANCE variants always reload their ring-buffer

 * configuration when restarted, so we must reinitialize our ring

 * context before restarting.  As part of this reinitialization,

 * find all packets still on the Tx ring and pretend that they had been

 * sent (in effect, drop the packets on the floor) - the higher-level

 * protocols will time out and retransmit.  It'd be better to shuffle

 * these skbs to a temp list and then actually re-Tx them after

 * restarting the chip, but I'm too lazy to do so right now.  dplatt@3do.com

 CPU owns buffer */

 Make sure adapter sees owner change */

 Initialize the PCNET32 Rx and Tx rings. */

 there is not much we can do at this point */

 there is not much we can do at this point */

 Make sure owner changes after all others are visible */

	/* The Tx buffer address is filled in as needed, but we do need to clear

 CPU owns buffer */

 Make sure adapter sees owner change */

 Make sure all changes are visible */

/* the pcnet32 has been issued a stop or reset.  Wait for the stop bit

 * then flush the pending transmit operations, re-initialize the ring,

 * and tell the chip to initialize.

 wait for stop */

 ReInit Ring */

 Transmitter timeout, serious problems. */

 prevent tx timeout */

	/* Default status -- will not enable Successful-TxDone

	 * interrupt when that option is available to us.

 Fill in a Tx ring entry */

 Mask to ring buffer boundary. */

	/* Caution: the write order is important here, set the status

 Make sure owner changes after all others are visible */

 Trigger an immediate send poll. */

 The PCNET32 interrupt handler. */

 PCMCIA remove happened */

 Acknowledge all of the current interrupt sources ASAP. */

 Log misc errors. */

 Tx babble. */

			/*

			 * This happens when our receive ring is full. This

			 * shouldn't be a problem as we will see normal rx

			 * interrupts for the frames in the receive ring.  But

			 * there are some PCI chipsets (I can reproduce this

			 * on SP3G with Intel saturn chipset) which have

			 * sometimes problems and will fill up the receive

			 * ring with error descriptors.  In this situation we

			 * don't get a rx interrupt, but a missed frame

			 * interrupt sooner or later.

 Missed a Rx frame. */

 unlike for the lance, there is no restart needed */

 set interrupt masks */

 We stop the PCNET32 here -- it occasionally polls memory if we don't. */

	/*

	 * Switch back to 16bit mode to avoid problems with dumb

	 * DOS packet driver after a warm reboot

 taken from the sunlance driver, which it took from the depca driver */

 set all multicast bits */

 clear the multicast filter */

 Add addresses */

/*

 * Set or clear the multicast filter for this adaptor.

 Log any net taps. */

 This routine assumes that the lp->lock is held */

 This routine assumes that the lp->lock is held */

 SIOC[GS]MIIxxx ioctls */

 skip active phy */

 found PHY with active link */

 isolate inactive phy */

 de-isolate new phy */

 set new phy address */

/*

 * Show the status of the media.  Similar to mii_check_media however it

 * correctly shows the link speed for all (tested) pcnet32 variants.

 * Devices with no mii just report link state without speed.

 *

 * Caller is assumed to hold and release the lp->lock.

 card base I/O address */

 only read link if port is set to TP */

 link always up for AUI port or port auto select */

 card base I/O address */

/*

 * Check for loss of link and link establishment.

 * Could possibly be changed to use mii_check_media instead.

 Print the link status if it has changed */

 An additional parameter that may be passed in... */

 Module Parameter for HomePNA cards added by Patrick Simmons, 2004 */

 find the PCI devices */

 should we find any remaining VLbus devices ? */

/*

 * ni6510 (am7990 'lance' chip) driver for Linux-net-3

 * BETAcode v0.71 (96/09/29) for 2.0.0 (or later)

 * copyrights (c) 1994,1995,1996 by M.Hipp

 *

 * This driver can handle the old ni6510 board and the newer ni6510

 * EtherBlaster. (probably it also works with every full NE2100

 * compatible card)

 *

 * driver probes: io: 0x360,0x300,0x320,0x340 / dma: 3,5,6,7

 *

 * This is an extension to the Linux operating system, and is covered by the

 * same GNU General Public License that covers the Linux-kernel.

 *

 * comments/bugs/suggestions can be sent to:

 *   Michael Hipp

 *   email: hippm@informatik.uni-tuebingen.de

 *

 * sources:

 *   some things are from the 'ni6510-packet-driver for dos by Russ Nelson'

 *   and from the original drivers by D.Becker

 *

 * known problems:

 *   - on some PCI boards (including my own) the card/board/ISA-bridge has

 *     problems with bus master DMA. This results in lotsa overruns.

 *     It may help to '#define RCV_PARANOIA_CHECK' or try to #undef

 *     the XMT and RCV_VIA_SKB option .. this reduces driver performance.

 *     Or just play with your BIOS options to optimize ISA-DMA access.

 *     Maybe you also wanna play with the LOW_PERFORAMCE and MID_PERFORMANCE

 *     defines -> please report me your experience then

 *   - Harald reported for ASUS SP3G mainboards, that you should use

 *     the 'optimal settings' from the user's manual on page 3-12!

 *

 * credits:

 *   thanx to Jason Sullivan for sending me a ni6510 card!

 *   lot of debug runs with ASUS SP3G Boards (Intel Saturn) by Harald Koenig

 *

 * simple performance test: (486DX-33/Ni6510-EB receives from 486DX4-100/Ni6510-EB)

 *    average: FTP -> 8384421 bytes received in 8.5 seconds

 *           (no RCV_VIA_SKB,no XMT_VIA_SKB,PARANOIA_CHECK,4 XMIT BUFS, 8 RCV_BUFFS)

 *    peak: FTP -> 8384421 bytes received in 7.5 seconds

 *           (RCV_VIA_SKB,XMT_VIA_SKB,no PARANOIA_CHECK,1(!) XMIT BUF, 16 RCV BUFFS)

/*

 * 99.Jun.8: added support for /proc/net/dev byte count for xosview (HK)

 * 96.Sept.29: virt_to_bus stuff added for new memory modell

 * 96.April.29: Added Harald Koenig's Patches (MH)

 * 96.April.13: enhanced error handling .. more tests (MH)

 * 96.April.5/6: a lot of performance tests. Got it stable now (hopefully) (MH)

 * 96.April.1: (no joke ;) .. added EtherBlaster and Module support (MH)

 * 96.Feb.19: fixed a few bugs .. cleanups .. tested for 1.3.66 (MH)

 *            hopefully no more 16MB limit

 *

 * 95.Nov.18: multicast tweaked (AC).

 *

 * 94.Aug.22: changes in xmit_intr (ack more than one xmitted-packet), ni65_send_packet (p->lock) (MH)

 *

 * 94.July.16: fixed bugs in recv_skb and skb-alloc stuff  (MH)

/*

 * the current setting allows an acceptable performance

 * for 'RCV_PARANOIA_CHECK' read the 'known problems' part in

 * the header of this file

 * 'invert' the defines for max. performance. This may cause DMA problems

 * on some boards (e.g on my ASUS SP3G)

 high performance */

/*

 * a few card/vendor specific defines

/*

 * buffer configuration

 log2(RMDNUM)<<29 */

 log2(TMDNUM)<<29 */

 slightly oversized */

/*

 * lance register defines

/*

 * to access the lance/am7990-regs, you have to write

 * reg-number into L_ADDRREG, then you can access it using L_DATAREG

 irq config-translate */

 dma config-translate and autodetect */

/*

 * set 'performance' registers .. we must STOP lance for that

 STOP */

 FIFO watermarks */

 write ISA 0: DMA_R : isa0 * 50ns */

 write ISA 1: DMA_W : isa1 * 50ns	*/

 switch back to CSR0 */

/*

 * open interface (up)

/*

 * close interface (down)

 that's the hard way */

 set: io,irq,dma or set it when calling insmod */

/*

 * Probe The Card (not the lance-chip)

 Check a single specified location. */

 Don't probe at all. */

/*

 * this is the real card probe ..

 first: reset the card */

 'stuck test' from lance.c */

 trigger memory access */

 trigger interrupt */

 everything is OK */

/*

 * set lance register and trigger init

 busmaster/no word-swap */

 this changes L_ADDRREG to CSR0 */

 init ok ? */

/*

 * allocate memory area and check the 16MB border

 grab the whole space .. (not necessary) */

/*

 * allocate all memory structures .. send/recv buffers etc ...

	/*

	 * we need 8-aligned memory ..

 everything is OK */

/*

 * free buffers and private struct

/*

 * stop and (re)start lance .. e.g after an error

 status is part of buffer field */

 prevent tx timeout */

/*

 * init lance (write init-values .. init-buffers) (open-helper)

 I've never worked with dma, but we do it like the packetdriver */

 first: reset the card */

	/*

	 * ni65_set_lance_mem() sets L_ADDRREG to CSR0

	 * NOW, WE WILL NEVER CHANGE THE L_ADDRREG, CSR0 IS ALWAYS SELECTED

 init OK: start lance , enable interrupts */

 ->OK */

 ->Error */

/*

 * interrupt handler

 ack interrupts, disable int. */

 ack interrupts, interrupts enabled */

 RECV-int? */

 XMIT-int? */

 & RCV_OWN) ); */

 ok, we are 'in sync' again */

/*

 * We have received an Xmit-Interrupt ..

 * send a new packet if necessary

 checking some errors */

 this stops the xmitter */

 test: resend this frame */

 no more Xmit processing .. */

 don't count errors twice */

/*

 * We have received a packet

 error or oversized? */

 don't count errors twice */

 change owner */

/*

 * kick xmitter ..

 prevent tx timeout */

/*

 *	Send a packet

 enable xmit & interrupt */

 MODULE */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * 7990.c -- LANCE ethernet IC generic routines.

 * This is an attempt to separate out the bits of various ethernet

 * drivers that are common because they all use the AMD 7990 LANCE

 * (Local Area Network Controller for Ethernet) chip.

 *

 * Copyright (C) 05/1998 Peter Maydell <pmaydell@chiark.greenend.org.uk>

 *

 * Most of this stuff was obtained by looking at other LANCE drivers,

 * in particular a2065.[ch]. The AMD C-LANCE datasheet was also helpful.

 * NB: this was made easy by the fact that Jes Sorensen had cleaned up

 * most of a2025 and sunlance with the aim of merging them, so the

 * common code was pretty obvious.

 Used for the temporal inet entries and routing */

 Lossage Factor Nine, Mr Sulu. */

 These inlines can be used if only CONFIG_HPLANCE is defined */

 IS_ENABLED(CONFIG_HPLANCE) */

 debugging output macros, various flavours */

 #define TEST_HITS */

 Load the CSR registers. The LANCE has to be STOPped when we do this! */

 load address of init block */

 set byteswap/ALEctrl/byte ctrl */

 Point back to csr0 */

 #define to 0 or 1 appropriately */

 Set up the Lance Rx and Tx rings and the init block */

 for LANCE_ADDR computations */

 normal, enable Tx & Rx */

	/* Copy the ethernet address to the lance init block

	 * Notice that we do a byteswap if we're big endian.

	 * [I think this is the right criterion; at least, sunlance,

	 * a2065 and atarilance do the byteswap and lance.c (PC) doesn't.

	 * However, the datasheet says that the BSWAP bit doesn't affect

	 * the init block, so surely it should be low byte first for

	 * everybody? Um.]

	 * We could define the ib->physaddr as three 16bit values and

	 * use (addr[1] << 8) | addr[0] & co, but this is more efficient.

 Setup the Tx ring entries */

 The ones required by tmd2 */

 Setup the Rx ring entries */

 0xf000 == bits that must be one (reserved, presumably) */

 Setup the initialization block */

 Setup rx descriptor pointer */

 Setup tx descriptor pointer */

 Clear the multicast filter */

 LANCE must be STOPped before we do this, too... */

 Need a hook here for sunlance ledma stuff */

 Wait for the lance to complete initialization */

 Clear IDON by writing a "1", enable interrupts and start lance */

 Stop the lance */

 prevent tx timeout */

 ack Rx int, reenable ints */

 For each Rx ring we own... */

 We got an incomplete frame? */

			/* Count only the end frame as a rx error,

			 * not the beginning

 16 byte align */

 make room */

 Return the packet to the pool */

 csr0 is 2f3 */

 csr0 is 73 */

 If we hit a packet not owned by us, stop */

 Stop the lance */

 buffer errors and underflows turn off the transmitter */

 Restart the adapter */

 Stop the lance */

			/*

			 * So we don't count the packet more than once.

 One collision before packet was sent. */

 More than one collision, be optimistic. */

 LANCE Controller Status */

 Check if any interrupt has */

 been generated by the Lance. */

 Acknowledge all the interrupt sources ASAP */

 Clear the error condition */

 Log misc errors. */

 Tx babble. */

 Missed a Rx frame. */

 Restart the chip. */

 Install the Interrupt handler. Or we could shunt this out to specific drivers? */

 Stop the LANCE */

 prevent tx timeout */

 dump the packet */

 Now, give the packet to the lance */

 Kick the lance: transmit now */

 taken from the depca driver via a2065.c */

 set all multicast bits */

 clear the multicast filter */

 Add addresses */

 lance.c: An AMD LANCE/PCnet ethernet driver for Linux. */

/*

	Written/copyright 1993-1998 by Donald Becker.



	Copyright 1993 United States Government as represented by the

	Director, National Security Agency.

	This software may be used and distributed according to the terms

	of the GNU General Public License, incorporated herein by reference.



	This driver is for the Allied Telesis AT1500 and HP J2405A, and should work

	with most other LANCE-based bus-master (NE2100/NE2500) ethercards.



	The author may be reached as becker@scyld.com, or C/O

	Scyld Computing Corporation

	410 Severn Ave., Suite 210

	Annapolis MD 21403



	Andrey V. Savochkin:

	- alignment problem with 1.3.* kernel and some minor changes.

	Thomas Bogendoerfer (tsbogend@bigbug.franken.de):

	- added support for Linux/Alpha, but removed most of it, because

        it worked only for the PCI chip.

      - added hook for the 32bit lance driver

      - added PCnetPCI II (79C970A) to chip table

	Paul Gortmaker (gpg109@rsphy1.anu.edu.au):

	- hopefully fix above so Linux/Alpha can use ISA cards too.

    8/20/96 Fixed 7990 autoIRQ failure and reversed unneeded alignment -djb

    v1.12 10/27/97 Module support -djb

    v1.14  2/3/98 Module support modified, made PCI support optional -djb

    v1.15 5/27/99 Fixed bug in the cleanup_module(). dev->priv was freed

                  before unregister_netdev() which caused NULL pointer

                  reference later in the chain (in rtnetlink_fill_ifinfo())

                  -- Mika Kuoppala <miku@iki.fi>



    Forward ported v1.14 to 2.1.129, merged the PCI and misc changes from

    the 2.1 version of the old driver - Alan Cox



    Get rid of check_region, check kmalloc return in lance_probe1

    Arnaldo Carvalho de Melo <acme@conectiva.com.br> - 11/01/2001



	Reworked detection, added support for Racal InterLan EtherBlaster cards

	Vesselin Kostadinov <vesok at yahoo dot com > - 22/4/2004

"normal"

NI6510EB

Racal InterLan EtherBlaster

/*

				Theory of Operation



I. Board Compatibility



This device driver is designed for the AMD 79C960, the "PCnet-ISA

single-chip ethernet controller for ISA".  This chip is used in a wide

variety of boards from vendors such as Allied Telesis, HP, Kingston,

and Boca.  This driver is also intended to work with older AMD 7990

designs, such as the NE1500 and NE2100, and newer 79C961.  For convenience,

I use the name LANCE to refer to all of the AMD chips, even though it properly

refers only to the original 7990.



II. Board-specific settings



The driver is designed to work the boards that use the faster

bus-master mode, rather than in shared memory mode.	 (Only older designs

have on-board buffer memory needed to support the slower shared memory mode.)



Most ISA boards have jumpered settings for the I/O base, IRQ line, and DMA

channel.  This driver probes the likely base addresses:

{0x300, 0x320, 0x340, 0x360}.

After the board is found it generates a DMA-timeout interrupt and uses

autoIRQ to find the IRQ line.  The DMA channel can be set with the low bits

of the otherwise-unused dev->mem_start value (aka PARAM1).  If unset it is

probed for by enabling each free DMA channel in turn and checking if

initialization succeeds.



The HP-J2405A board is an exception: with this board it is easy to read the

EEPROM-set values for the base, IRQ, and DMA.  (Of course you must already

_know_ the base address -- that field is for writing the EEPROM.)



III. Driver operation



IIIa. Ring buffers

The LANCE uses ring buffers of Tx and Rx descriptors.  Each entry describes

the base and length of the data buffer, along with status bits.	 The length

of these buffers is set by LANCE_LOG_{RX,TX}_BUFFERS, which is log_2() of

the buffer length (rather than being directly the buffer length) for

implementation ease.  The current values are 2 (Tx) and 4 (Rx), which leads to

ring sizes of 4 (Tx) and 16 (Rx).  Increasing the number of ring entries

needlessly uses extra space and reduces the chance that an upper layer will

be able to reorder queued Tx packets based on priority.	 Decreasing the number

of entries makes it more difficult to achieve back-to-back packet transmission

and increases the chance that Rx ring will overflow.  (Consider the worst case

of receiving back-to-back minimum-sized packets.)



The LANCE has the capability to "chain" both Rx and Tx buffers, but this driver

statically allocates full-sized (slightly oversized -- PKT_BUF_SZ) buffers to

avoid the administrative overhead. For the Rx side this avoids dynamically

allocating full-sized buffers "just in case", at the expense of a

memory-to-memory data copy for each packet received.  For most systems this

is a good tradeoff: the Rx buffer will always be in low memory, the copy

is inexpensive, and it primes the cache for later packet processing.  For Tx

the buffers are only used when needed as low-memory bounce buffers.



IIIB. 16M memory limitations.

For the ISA bus master mode all structures used directly by the LANCE,

the initialization block, Rx and Tx rings, and data buffers, must be

accessible from the ISA bus, i.e. in the lower 16M of real memory.

This is a problem for current Linux kernels on >16M machines. The network

devices are initialized after memory initialization, and the kernel doles out

memory from the top of memory downward.	 The current solution is to have a

special network initialization routine that's called before memory

initialization; this will eventually be generalized for all network devices.

As mentioned before, low-memory "bounce-buffers" are used when needed.



IIIC. Synchronization

The driver runs as two independent, single-threaded flows of control.  One

is the send-packet routine, which enforces single-threaded use by the

dev->tbusy flag.  The other thread is the interrupt handler, which is single

threaded by the hardware and other software.



The send packet thread has partial control over the Tx ring and 'dev->tbusy'

flag.  It sets the tbusy flag whenever it's queuing a Tx packet. If the next

queue slot is empty, it clears the tbusy flag when finished otherwise it sets

the 'lp->tx_full' flag.



The interrupt handler has exclusive control over the Rx ring and records stats

from the Tx ring. (The Tx-done interrupt can't be selectively turned off, so

we can't avoid the interrupt overhead by having the Tx routine reap the Tx

stats.)	 After reaping the stats, it marks the queue entry as empty by setting

the 'base' to zero. Iff the 'lp->tx_full' flag is set, it clears both the

tx_full and tbusy flags.



/* Set the number of Tx and Rx buffers, using Log_2(# buffers).

   Reasonable default values are 16 Tx buffers, and 16 Rx buffers.

   That translates to 4 and 4 (16 == 2^^4).

   This is a compile-time option for efficiency.

 Offsets from base I/O address. */

 The LANCE Rx and Tx ring descriptors. */

 This length is 2s complement (negative)! */

 This length is "normal". */

 Length is 2s complement (negative)! */

 The LANCE initialization block, described in databook. */

 Pre-set mode (reg. 15) */

 Physical ethernet address */

 Multicast filter (unused). */

 Receive and transmit ring base, along with extra bits. */

 Tx and Rx ring base pointers */

 The Tx and Rx ring entries must be aligned on 8-byte boundaries. */

 The saved address of a sent-in-place packet/buffer, for skfree(). */

 The addresses of receive-in-place skbuffs. */

 Address of Rx and Tx buffers. */

 Tx low-memory "bounce buffer" address. */

 The next free ring entry */

 The ring entries to be free()ed. */

 See lance_chip_type. */

/* A mapping from the chip ID number to the part number and features.

   These are from the datasheets -- in real life the '970 version

 Ancient lance chip.  */

 79C960 PCnet/ISA.  */

 79C961 PCnet/ISA+, Plug-n-Play.  */

 79C970 or 79C974 PCnet-SCSI, PCI. */

	/* Bug: the PCnet/PCI actually uses the PCnet/VLB ID number, so just call

 79C965 PCnet for VL bus. */

 79C970A PCInetPCI II. */

/* Non-zero if lance_probe1() needs to allocate low-memory bounce buffers.

 Max number of interfaces (cards) per module */

 only complain once */

 MODULE */

/* Starting in v2.1.*, the LANCE/PCnet probe is now similar to the other

   board probes now that kmalloc() can allocate ISA DMA-able regions.

   This also allows the LANCE driver to be used as a module.

 Detect the card with minimal I/O reads */

yes, the first byte matches*/

Signature OK*/

 Mark spuriously-busy DMA channels */

 Flags for specific chips or boards. */

 HP ISA adaptor */

 HP on-board ethernet. */

 Already printed version info. */

	/* First we look for special cases.

	   Check for HP's on-board ethernet by looking for 'HP' in the BIOS.

	   There are two HP versions, check the BIOS for the configuration port.

	   This method provided by L. Julliard, Laurent_Julliard@grenoble.hp.com.

 We can have boards other than the built-in!  Verify this is on-board. */

 We also recognize the HP Vectra on-board here, but check below. */

 Reset the LANCE.	 */

 Reset the LANCE */

	/* The Un-Reset needed is only needed for the real NE2100, and will

 Switch to window 0 */

 Get the version of the chip. */

 Good, it's a newer chip. */

	/* We can't allocate private data from alloc_etherdev() because it must

	/* There is a 16 byte station address PROM at the base address.

 Make certain the data structures used by the LANCE are aligned and DMAble. */

 Disable Rx and Tx. */

 Set iff PCI card. */

 Native bus-master, no DMA channel needed. */

 The plug-n-play version. */

 The DMA channel may be passed in PARAM1. */

		/* Read the DMA channel status register, so that we can avoid

 7990 boards need DMA detection first. */

		/* To auto-IRQ we enable the initialization-done and DMA error

		   interrupts. For ISA boards we get a DMA error, but VLB and PCI

 Trigger an initialization just for the interrupt. */

		/* Check for the initialization done bit, 0x0100, which means

 OK, we have to auto-DMA. */

			/* Don't enable a permanently busy DMA channel, or the machine

 Clear the memory error bits. */

 Trigger an initialization. */

 Failure: bail. */

 We may auto-IRQ now that we have a DMA channel. */

 Trigger an initialization just for the interrupt. */

		/* Turn on auto-select of media (10baseT or BNC) so that the user

 Don't touch 10base2 power bit. */

 The LANCE-specific entries in the device structure. */

	/* We used to allocate DMA here, but that was silly.

 Reset the LANCE */

 The DMA controller is used as a no-operation slave, "cascade mode". */

 Un-Reset the LANCE, needed only for the NE2100. */

 This is 79C960-specific: Turn on auto-select of media (AUI, BNC). */

 Only touch autoselect bit. */

 Re-initialize the LANCE, and start it when done. */

	/*

	 * We used to clear the InitDone bit, 0x0100, here but Mark Stockton

	 * reports that doing so triggers a bug in the '974.

 Always succeed */

/* The LANCE has been halted for one reason or another (busmaster memory

   arbitration error, Tx FIFO underflow, driver stopped it to reconfigure,

   etc.).  Modern LANCE variants always reload their ring-buffer

   configuration when restarted, so we must reinitialize our ring

   context before restarting.  As part of this reinitialization,

   find all packets still on the Tx ring and pretend that they had been

   sent (in effect, drop the packets on the floor) - the higher-level

   protocols will time out and retransmit.  It'd be better to shuffle

   these skbs to a temp list and then actually re-Tx them after

   restarting the chip, but I'm too lazy to do so right now.  dplatt@3do.com

 Free all the skbuffs in the Rx and Tx queues. */

 Not owned by LANCE chip. */

 Initialize the LANCE Rx and Tx rings. */

	/* The Tx buffer address is filled in as needed, but we do need to clear

 prevent tx timeout */

 Fill in a Tx ring entry */

 Mask to ring buffer boundary. */

	/* Caution: the write order is important here, set the base address

 The old LANCE chips doesn't automatically pad buffers to min. size. */

	/* If any part of this buffer is >16M we must copy it to a low-memory

 Trigger an immediate send poll. */

 The LANCE interrupt handler. */

 Acknowledge all of the current interrupt sources ASAP. */

 Rx interrupt */

 Tx-done interrupt */

 It still hasn't been Txed */

 There was an major error, log it. */

 Ackk!  On FIFO errors the Tx unit is turned off! */

 Remove this verbosity later! */

 Restart the chip. */

				/* We must free the original skb if it's not a data-only copy

 if the ring is no longer full, accept more packets */

 Log misc errors. */

 Tx babble. */

 Missed a Rx frame. */

 Restart the chip. */

 stop the chip to clear the error condition, then restart */

 Clear any other interrupt, and set interrupt enable. */

 If we own the next entry, it's a new packet. Send it up. */

 There was an error. */

			/* There is a tricky error noted by John Murphy,

			   <murf@perftech.com> to Russ Nelson: Even with full-sized

			   buffers it's possible for a jabber packet to use two

 Only count a general error at the */

 end of a packet.*/

 Malloc up new buffer, compatible with net3. */

 16 byte align */

 Make room */

		/* The docs say that the buffer length isn't touched, but Andrew Boyd

	/* We should check that at least two ring entries are free.	 If not,

	/* We stop the LANCE here -- it occasionally polls

/* Set or clear the multicast filter for this adaptor.

 Temporarily stop the lance.	 */

 Set promiscuous mode */

 FIXIT: We don't use the multicast table, but rely on upper-layer filtering. */

 Unset promiscuous mode */

  Resume normal operation */

 SPDX-License-Identifier: GPL-2.0-only

/* hplance.c  : the  Linux/hp300/lance ethernet driver

 *

 * Copyright (C) 05/1998 Peter Maydell <pmaydell@chiark.greenend.org.uk>

 * Based on the Sun Lance driver and the NetBSD HP Lance driver

 * Uses the generic 7990.c LANCE code.

 Used for the temporal inet entries and routing */

/* We have 16392 bytes of RAM for the init block and buffers. This places

 * an upper limit on the number of buffers we can use. NetBSD uses 8 Rx

 * buffers and 2 Tx buffers, it takes (8 + 2) * 1544 bytes.

 use generic LANCE code */

 Our private data structure */

/* function prototypes... This is easy because all the grot is in the

 * generic LANCE support. All we have to support is probing for boards,

 * plus board-specific init, open and close actions.

 * Oh, and we need to tell the generic code how to read and write LANCE registers...

 Find all the HP Lance boards and initialise them... */

 Initialise a single lance board at the given DIO device */

 reset the board */

 ariba! ariba! udelay! udelay! */

 Fill the dev fields */

		/* The NVRAM holds our ethernet address, one nibble per byte,

		 * at bytes NVRAMOFF+1,3,5,7,9...

 CPU addr */

 LANCE addr of same RAM */

 we're bigendian */

/* This is disgusting. We have to check the DIO status register for ack every

 * time we read or write the LANCE registers.

 call generic lance open code */

 enable interrupts at board level. */

 disable interrupts at boardlevel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *    Lance ethernet driver for the MIPS processor based

 *      DECstation family

 *

 *

 *      adopted from sunlance.c by Richard van den Berg

 *

 *      Copyright (C) 2002, 2003, 2005, 2006  Maciej W. Rozycki

 *

 *      additional sources:

 *      - PMAD-AA TURBOchannel Ethernet Module Functional Specification,

 *        Revision 1.2

 *

 *      History:

 *

 *      v0.001: The kernel accepts the code and it shows the hardware address.

 *

 *      v0.002: Removed most sparc stuff, left only some module and dma stuff.

 *

 *      v0.003: Enhanced base address calculation from proposals by

 *              Harald Koerfgen and Thomas Riemer.

 *

 *      v0.004: lance-regs is pointing at the right addresses, added prom

 *              check. First start of address mapping and DMA.

 *

 *      v0.005: started to play around with LANCE-DMA. This driver will not

 *              work for non IOASIC lances. HK

 *

 *      v0.006: added pointer arrays to lance_private and setup routine for

 *              them in dec_lance_init. HK

 *

 *      v0.007: Big shit. The LANCE seems to use a different DMA mechanism to

 *              access the init block. This looks like one (short) word at a

 *              time, but the smallest amount the IOASIC can transfer is a

 *              (long) word. So we have a 2-2 padding here. Changed

 *              lance_init_block accordingly. The 16-16 padding for the buffers

 *              seems to be correct. HK

 *

 *      v0.008: mods to make PMAX_LANCE work. 01/09/1999 triemer

 *

 *      v0.009: Module support fixes, multiple interfaces support, various

 *              bits. macro

 *

 *      v0.010: Fixes for the PMAD mapping of the LANCE buffer and for the

 *              PMAX requirement to only use halfword accesses to the

 *              buffer. macro

 *

 *      v0.011: Converted the PMAD to the driver model. macro

/*

 * card types

 Enable promiscuous mode */

 Error: set if BAB, SQE, MISS or ME is set */

 BAB:  Babble: tx timeout. */

 SQE:  Signal quality error */

 MISS: Missed a packet */

 ME:   Memory error */

 Received interrupt */

 Transmitter Interrupt */

 IFIN: Init finished. */

 Interrupt or error */

 Interrupt enable */

 Receiver on */

 Transmitter on */

 Transmitter demand */

 Stop the card */

 Start the card */

 Init the card */

 SWAP */

 ALE Control */

 Byte control */

 Receive message descriptor 1 */

 Who owns the entry */

 Error: if FRA, OFL, CRC or BUF is set */

 FRA: Frame error */

 OFL: Frame overflow */

 CRC error */

 BUF: Buffer error */

 Start of packet */

 End of packet */

 Packet is complete: SOP + EOP */

 Transmit message descriptor 1 */

 Lance owns the packet */

 Error summary */

 Error: more than one retry needed */

 Error: one retry needed */

 Error: deferred */

 Start of packet */

 End of packet */

 Packet is complete: SOP + EOP */

 Buffer error */

 Error underflow */

 Error late collision */

 Error carrier loss */

 Error retry */

 Time Domain Reflectometry counter */

 Define: 2^4 Tx buffers and 2^4 Rx buffers */

/*

 * The DS2100/3100 have a linear 64 kB buffer which supports halfword

 * accesses only.  Each halfword of the buffer is word-aligned in the

 * CPU address space.

 *

 * The PMAD-AA has a 128 kB buffer on-board.

 *

 * The IOASIC LANCE devices use a shared memory region.  This region

 * as seen from the CPU is (max) 128 kB long and has to be on an 128 kB

 * boundary.  The LANCE sees this as a 64 kB long continuous memory

 * region.

 *

 * The LANCE's DMA address is used as an index in this buffer and DMA

 * takes place in bursts of eight 16-bit words which are packed into

 * four 32-bit words by the IOASIC.  This leads to a strange padding:

 * 16 bytes of valid data followed by a 16 byte gap :-(.

 low address of packet */

	unsigned short rmd1;		/* high address of packet

	short length;			/* 2s complement (negative!)

 actual number of bytes received */

 low address of packet */

	unsigned short tmd1;		/* high address of packet

	short length;			/* 2s complement (negative!)

 First part of the LANCE initialization block, described in databook. */

 pre-set mode (reg. 15) */

 physical ethernet address */

 multicast filter */

 Receive and transmit ring base, along with extra bits. */

 receive descriptor addr */

 receive len and high addr */

 transmit descriptor addr */

 transmit len and high addr */

 The buffer descriptors */

 Pointers to the ring buffers as seen from the CPU */

 Pointers to the ring buffers as seen from the LANCE */

/* The lance control ports are at an absolute address, machine and tc-slot

 * dependent.

 * DECstations do only 32-bit access and the LANCE uses 16 bit addresses,

 * so we have to give the structure an extra member making rap pointing

 * at the right address

 register data port */

 register address port */

 Load the CSR registers */

	/* The address space as seen from the LANCE

	 * begins at address 0. HK

 Point back to csr0 */

/*

 * Our specialized copy routines

 *

		/*

		 * copy 16 Byte chunks

		/*

		 * do the rest, if any.

		/*

		 * copy 16 Byte chunks

		/*

		 * do the rest, if any.

 Setup the Lance Rx and Tx rings */

 Lock out other processes while setting up hardware */

	/* Copy the ethernet address to the lance init block.

	 * XXX bit 0 of the physical address registers has to be zero

 Setup the initialization block */

 Setup rx descriptor pointer */

 Setup tx descriptor pointer */

 Setup the Tx ring entries */

 The ones required by tmd2 */

 Setup the Rx ring entries */

 Wait for the lance to complete initialization */

 We got an incomplete frame? */

			/* Count only the end frame as a rx error,

			 * not the beginning

 16 byte align */

 make room */

 Return the packet to the pool */

 If we hit a packet not owned by us, stop */

 Stop the lance */

			/* Buffer errors and underflows turn off the

			 * transmitter, restart the adapter.

 Stop the lance */

			/*

			 * So we don't count the packet more than once.

 One collision before packet was sent. */

 More than one collision, be optimistic. */

 Acknowledge all the interrupt sources ASAP */

 Clear the error condition */

 Stop the Lance */

	/* Set mode and clear multicast filter only at device open,

	 * so that lance_init_ring() called at any error will not

	 * forget multicast filters.

	 *

	 * BTW it is common bug in all lance drivers! --ANK

 Associate IRQ with lance_interrupt */

 Enable I/O ASIC LANCE DMA.  */

 Stop the card */

 Disable I/O ASIC LANCE DMA.  */

 Stop the lance */

 prevent tx timeout */

 Now, give the packet to the lance */

 Kick the lance: transmit now */

 set all multicast bits */

 clear the multicast filter */

 Add addresses */

	/*

	 * alloc_etherdev ensures the data structures used by the LANCE

	 * are aligned.

 buffer space for the on-board LANCE shared memory */

		/*

		 * FIXME: ugly hack!

 Workaround crash with booting KN04 2.1k from Disk */

		/*

		 * setup the pointer arrays, this sucks [tm] :-(

 Setup I/O ASIC LANCE DMA.  */

		/*

		 * setup the pointer arrays, this sucks [tm] :-(

 prom checks */

 First, check for test pattern */

 Check the prom contents */

	/* Copy the ethernet address to the device structure, later to the

	 * lance initialization block so the lance gets it every time it's

	 * (re)initialized.

 lp->ll is the location of the registers for lance card */

	/* busmaster_regval (CSR3) should be zero according to the PMAD-AA

	 * specification.

	/* We cannot sleep if the chip is busy during a

	 * multicast list update event, because such events

	 * can occur from interrupts (ex. IPv6).  So we

	 * use a timer to try again later when necessary. -DaveM

 Find all the lance cards on the system and initialize them */

 sun3lance.c: Ethernet driver for SUN3 Lance chip */

/*



  Sun3 Lance ethernet driver, by Sam Creasey (sammy@users.qual.net).

  This driver is a part of the linux kernel, and is thus distributed

  under the GNU General Public License.



  The values used in LANCE_OBIO and LANCE_IRQ seem to be empirically

  true for the correct IRQ and address of the lance registers.  They

  have not been widely tested, however.  What we probably need is a

  "proper" way to search for a device in the sun3's prom, but, alas,

  linux has no such thing.



  This driver is largely based on atarilance.c, by Roman Hodek.  Other

  sources of inspiration were the NetBSD sun3 am7990 driver, and the

  linux sparc lance driver (sunlance.c).



  There are more assumptions made throughout this driver, it almost

  certainly still needs work, but it does work at least for RARP/BOOTP and

  mounting the root NFS filesystem.



/* sun3/60 addr/irq for the lance chip.  If your sun is different,

/* Debug level:

 *  0 = silent, print only serious errors

 *  1 = normal, print error messages

 *  2 = debug, print debug infos

 *  3 = debug, print even more debug infos (packet data)

/* we're only using 32k of memory, so we use 4 TX

 These are the derived values */

 Definitions for packet buffer access: */

 Get the address of a packet buffer corresponding to a given buffer head */

 The LANCE Rx and Tx ring descriptors. */

 Low word of base addr */

 High word of base addr (unused) */

 This length is 2s complement! */

 This length is "normal". */

 Low word of base addr */

 High word of base addr (unused) */

 Length is 2s complement! */

 The LANCE initialization block, described in databook. */

 Pre-set mode */

 Physical ethernet address */

 Multicast filter (unused). */

 Receive and transmit ring base, along with length bits. */

 is thie needed? */

 The whole layout of the Lance shared memory */

 The driver's private device structure */

 The next free ring entry */

 ring entry to be processed */

 These two must be longs for set_bit() */

 I/O register access macros */

 Definitions for the Lance */

 tx_head flags */

 end of packet */

 start of packet */

 deferred */

 one retry needed */

 more than one retry needed */

 error summary */

 ownership (set: chip owns) */

 tx_head misc field */

 Time Domain Reflectometry counter */

 failed after 16 retries */

 carrier lost */

 late collision */

 underflow (late memory) */

 buffering error (no ENP) */

 rx_head flags */

 end of packet */

 start of packet */

 buffer error */

 CRC error */

 overflow */

 framing error */

 error summary */

 ownership (set: ship owns) */

 register names */

 mode/status */

 init block addr (low) */

 init block addr (high) */

 misc */

 address filter */

 promiscuous mode */

 CSR0 */

 (R=readable, W=writeable, S=set on write, C=clear on write) */

 initialize (RS) */

 start (RS) */

 stop (RS) */

 transmit demand (RS) */

 transmitter on (R) */

 receiver on (R) */

 interrupt enable (RW) */

 interrupt active (R) */

 initialization done (RC) */

 transmitter interrupt (RC) */

 receiver interrupt (RC) */

 memory error (RC) */

 missed frame (RC) */

 carrier error (no heartbeat :-) (RC) */

 babble: tx-ed too many bits (RC) */

 error (RC) */

 CSR3 */

 byte control */

 ALE control */

 byte swap (1=big endian) */

**************************** Prototypes *****************************/

************************ End of Prototypes **************************/

 check that this machine has an onboard lance */

 these machines have lance */

 test to see if there's really a lance here */

 (CSRO_INIT shouldn't be readable) */

 XXX - leak? */

 informational only */

 copy in the ethernet address from the prom */

 tell the card it's ether address, bytes swapped */

	KLUDGE -- REMOVE ME

 From now on, AREG is kept to point to CSR0 */

 Initialize the LANCE Rx and Tx rings. */

 tell the card it's ether address, bytes swapped */

 tell the lance the address of its init block */

 Transmitter timeout, serious problems. */

		/*

		 * Always set BSWP after a STOP as STOP puts it back into

		 * little endian mode.

	/* Block a timer-based transmit from overlapping.  This could better be

	/* Block a timer-based transmit from overlapping with us by

 don't clear dev->tbusy flag. */

 this weirdness doesn't appear on sun3... */

 Fill in a Tx ring entry */

	/* We're not prepared for the int until the last flags are set/reset.

 Mask to ring buffer boundary. */

	/* Caution: the write order is important here, set the "ownership" bits

	 * last.

	/* the sun3's lance needs it's buffer padded to the minimum

	head->length = -len;

 Trigger an immediate send poll. */

 The LANCE interrupt handler. */

 ack interrupts */

 clear errors */

 Tx-done interrupt */

		if(lance_debug >= 3) {

			int i;



			printk("%s: tx int\n", dev->name);



			for(i = 0; i < TX_RING_SIZE; i++)

				printk("ring %d flag=%04x\n", i,

				       MEM->tx_head[i].flag);

		}

 It still hasn't been Txed */

 The ring is no longer full, clear tbusy. */

 Rx interrupt */

 Log misc errors. */

 Tx babble. */

 Missed a Rx frame. */

 Restart the chip. */

 Clear any other interrupt, and set interrupt enable. */

	DREG = CSR0_BABL | CSR0_CERR | CSR0_MISS | CSR0_MERR |

		   CSR0_IDON | CSR0_INEA;

 get packet, toss into skbuff */

 If we own the next entry, it's a new packet. Send it up. */

 There was an error. */

			/* There is a tricky error noted by John Murphy,

			   <murf@perftech.com> to Russ Nelson: Even with

			   full-sized buffers it's possible for a jabber packet to use two

 Only count a general error at the */

 end of a packet.*/

 Malloc up new buffer, compatible with net-3. */

			short pkt_len = head->msg_length;
 16 byte align */

 Make room */

		head->buf_length = -PKT_BUF_SZ | 0xf000;

 From lance.c (Donald Becker): */

	/* We should check that at least two ring entries are free.

	/* We stop the LANCE here -- it occasionally polls

/* Set or clear the multicast filter for this adaptor.

   num_addrs == -1		Promiscuous mode, receive all packets

   num_addrs == 0		Normal mode, clear multicast list

   num_addrs > 0		Multicast mode, receive normal and MC packets, and do

						best-effort filtering.

 completely untested on a sun3 */

 Only possible if board is already started */

 We take the simple way out and always enable promiscuous mode. */

 Temporarily stop the lance. */

 Log any net taps. */

 Set promiscuous mode */

		/* We don't use the multicast table, but rely on upper-layer

 Unset promiscuous mode */

	/*

	 * Always set BSWP after a STOP as STOP puts it back into

	 * little endian mode.

 Resume normal operation and reset AREG to CSR0 */

/*

 *  Amiga Linux/m68k Ariadne Ethernet Driver

 *

 *  © Copyright 1995-2003 by Geert Uytterhoeven (geert@linux-m68k.org)

 *			     Peter De Schrijver (p2@mind.be)

 *

 *  ---------------------------------------------------------------------------

 *

 *  This program is based on

 *

 *	lance.c:	An AMD LANCE ethernet driver for linux.

 *			Written 1993-94 by Donald Becker.

 *

 *	Am79C960:	PCnet(tm)-ISA Single-Chip Ethernet Controller

 *			Advanced Micro Devices

 *			Publication #16907, Rev. B, Amendment/0, May 1994

 *

 *	MC68230:	Parallel Interface/Timer (PI/T)

 *			Motorola Semiconductors, December, 1983

 *

 *  ---------------------------------------------------------------------------

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of the Linux

 *  distribution for more details.

 *

 *  ---------------------------------------------------------------------------

 *

 *  The Ariadne is a Zorro-II board made by Village Tronic. It contains:

 *

 *	- an Am79C960 PCnet-ISA Single-Chip Ethernet Controller with both

 *	  10BASE-2 (thin coax) and 10BASE-T (UTP) connectors

 *

 *	- an MC68230 Parallel Interface/Timer configured as 2 parallel ports

#define DEBUG*/

 Macros to Fix Endianness problems */

 Swap the Bytes in a WORD */

 Get the Low BYTE in a WORD */

 Get the Swapped High WORD in a LONG */

 Get the Swapped Low WORD in a LONG */

 Transmit/Receive Ring Definitions */

 Private Device Data */

 The next free ring entry */

 The ring entries to be free()ed */

 Structure Created in the Ariadne's RAM Buffer */

 Set up TX Ring */

 Set up RX Ring */

 If we own the next entry, it's a new packet. Send it up */

 There was an error */

			/* There is a tricky error noted by

			 * John Murphy <murf@perftech.com> to Russ Nelson:

			 * Even with full-sized buffers it's possible for a

			 * jabber packet to use two buffers, with only the

			 * last correctly noting the error

 Only count a general error at the end of a packet */

 Malloc up new buffer, compatible with net-3 */

 16 byte align */

 Make room */

	/* We should check that at least two ring entries are free.

	 * If not, we should free one and mark stats->rx_dropped++

 PCnet-ISA Controller Status */

 Check if any interrupt has been */

 generated by the board */

 Acknowledge all of the current interrupt sources ASAP */

 Rx interrupt */

 Tx-done interrupt */

 It still hasn't been Txed */

 There was an major error, log it */

 Ackk!  On FIFO errors the Tx unit is turned off! */

 Remove this verbosity later! */

 Restart the chip */

 The ring is no longer full */

 Log misc errors */

 Tx babble */

 Missed a Rx frame */

 Restart the chip */

 Clear any other interrupt, and set interrupt enable */

 PCnet-ISA Controller Status */

 Reset the LANCE */

 Stop the LANCE */

 PCnet-ISA Controller Status */

 Check the LANCE version */

 Chip ID */

 Chip ID */

 Miscellaneous Stuff */

 Interrupt Masks and Deferral Control */

 Test and Features Control */

 Set the Multicast Table */

 Logical Address Filter, LADRF[15:0] */

 Logical Address Filter, LADRF[31:16] */

 Logical Address Filter, LADRF[47:32] */

 Logical Address Filter, LADRF[63:48] */

 Set the Ethernet Hardware Address */

 Physical Address Register, PADR[15:0] */

 Physical Address Register, PADR[31:16] */

 Physical Address Register, PADR[47:32] */

 Set the Init Block Mode */

 Mode Register */

 Set the Transmit Descriptor Ring Pointer */

 Base Address of Transmit Ring */

 Base Address of transmit Ring */

 Set the Receive Descriptor Ring Pointer */

 Base Address of Receive Ring */

 Base Address of Receive Ring */

 Set the Number of RX and TX Ring Entries */

 Receive Ring Length */

 Transmit Ring Length */

 Enable Media Interface Port Auto Select (10BASE-2/10BASE-T) */

 Miscellaneous Configuration */

 LED Control */

 LED1 Status */

 LED2 Status */

 LED3 Status */

 PCnet-ISA Controller Status */

 Missed Frame Count */

 PCnet-ISA Controller Status */

 We stop the LANCE here -- it occasionally polls memory if we don't */

 PCnet-ISA Controller Status */

 PCnet-ISA Controller Status */

 FIXME: is the 79C960 new enough to do its own padding right ? */

 Fill in a Tx ring entry */

	/* Caution: the write order is important here, set the base address with

 Trigger an immediate send poll */

 PCnet-ISA Controller Status */

 Missed Frame Count */

/* Set or clear the multicast filter for this adaptor.

 * num_addrs == -1	Promiscuous mode, receive all packets

 * num_addrs == 0	Normal mode, clear multicast list

 * num_addrs > 0	Multicast mode, receive normal and MC packets,

 * 			and do best-effort filtering.

 We take the simple way out and always enable promiscuous mode */

 PCnet-ISA Controller Status */

 Temporarily stop the lance */

 Mode Register */

 Set promiscuous mode */

		/* We don't use the multicast table,

		 * but rely on upper-layer filtering

 Logical Address Filter */

 Mode Register */

 Unset promiscuous mode */

 PCnet-ISA Controller Status */

 Resume normal operation */

/* ----------------------------------------------------------------------------

Linux PCMCIA ethernet adapter driver for the New Media Ethernet LAN.

  nmclan_cs.c,v 0.16 1995/07/01 06:42:17 rpao Exp rpao



  The Ethernet LAN uses the Advanced Micro Devices (AMD) Am79C940 Media

  Access Controller for Ethernet (MACE).  It is essentially the Am2150

  PCMCIA Ethernet card contained in the Am2150 Demo Kit.



Written by Roger C. Pao <rpao@paonet.org>

  Copyright 1995 Roger C. Pao

  Linux 2.5 cleanups Copyright Red Hat 2003



  This software may be used and distributed according to the terms of

  the GNU General Public License.



Ported to Linux 1.3.* network driver environment by

  Matti Aarnio <mea@utu.fi>



References



  Am2150 Technical Reference Manual, Revision 1.0, August 17, 1993

  Am79C940 (MACE) Data Sheet, 1994

  Am79C90 (C-LANCE) Data Sheet, 1994

  Linux PCMCIA Programmer's Guide v1.17

  /usr/src/linux/net/inet/dev.c, Linux kernel 1.2.8



  Eric Mears, New Media Corporation

  Tom Pollard, New Media Corporation

  Dean Siasoyco, New Media Corporation

  Ken Lesniak, Silicon Graphics, Inc. <lesniak@boston.sgi.com>

  Donald Becker <becker@scyld.com>

  David Hinds <dahinds@users.sourceforge.net>



  The Linux client driver is based on the 3c589_cs.c client driver by

  David Hinds.



  The Linux network driver outline is based on the 3c589_cs.c driver,

  the 8390.c driver, and the example skeleton.c kernel code, which are

  by Donald Becker.



  The Am2150 network driver hardware interface code is based on the

  OS/9000 driver for the New Media Ethernet LAN by Eric Mears.



  Special thanks for testing and help in debugging this driver goes

  to Ken Lesniak.



-------------------------------------------------------------------------------

Driver Notes and Issues

-------------------------------------------------------------------------------



1. Developed on a Dell 320SLi

   PCMCIA Card Services 2.6.2

   Linux dell 1.2.10 #1 Thu Jun 29 20:23:41 PDT 1995 i386



2. rc.pcmcia may require loading pcmcia_core with io_speed=300:

   'insmod pcmcia_core.o io_speed=300'.

   This will avoid problems with fast systems which causes rx_framecnt

   to return random values.



3. If hot extraction does not work for you, use 'ifconfig eth0 down'

   before extraction.



4. There is a bad slow-down problem in this driver.



5. Future: Multicast processing.  In the meantime, do _not_ compile your

   kernel with multicast ip enabled.



-------------------------------------------------------------------------------

History

-------------------------------------------------------------------------------

Log: nmclan_cs.c,v

 * 2.5.75-ac1 2003/07/11 Alan Cox <alan@lxorguk.ukuu.org.uk>

 * Fixed hang on card eject as we probe it

 * Cleaned up to use new style locking.

 *

 * Revision 0.16  1995/07/01  06:42:17  rpao

 * Bug fix: nmclan_reset() called CardServices incorrectly.

 *

 * Revision 0.15  1995/05/24  08:09:47  rpao

 * Re-implement MULTI_TX dev->tbusy handling.

 *

 * Revision 0.14  1995/05/23  03:19:30  rpao

 * Added, in nmclan_config(), "tuple.Attributes = 0;".

 * Modified MACE ID check to ignore chip revision level.

 * Avoid tx_free_frames race condition between _start_xmit and _interrupt.

 *

 * Revision 0.13  1995/05/18  05:56:34  rpao

 * Statistics changes.

 * Bug fix: nmclan_reset did not enable TX and RX: call restore_multicast_list.

 * Bug fix: mace_interrupt checks ~MACE_IMR_DEFAULT.  Fixes driver lockup.

 *

 * Revision 0.12  1995/05/14  00:12:23  rpao

 * Statistics overhaul.

 *



95/05/13 rpao	V0.10a

		Bug fix: MACE statistics counters used wrong I/O ports.

		Bug fix: mace_interrupt() needed to allow statistics to be

		processed without RX or TX interrupts pending.

95/05/11 rpao	V0.10

		Multiple transmit request processing.

		Modified statistics to use MACE counters where possible.

95/05/10 rpao	V0.09 Bug fix: Must use IO_DATA_PATH_WIDTH_AUTO.

		*Released

95/05/10 rpao	V0.08

		Bug fix: Make all non-exported functions private by using

		static keyword.

		Bug fix: Test IntrCnt _before_ reading MACE_IR.

95/05/10 rpao	V0.07 Statistics.

95/05/09 rpao	V0.06 Fix rx_framecnt problem by addition of PCIC wait states.



/* ----------------------------------------------------------------------------

Conditional Compilation Options

/* ----------------------------------------------------------------------------

Include Files

/* ----------------------------------------------------------------------------

Defines

 8 bytes in Logical Address Filter */

 Loop Control Defines */

	/*

	TBD: Dean brought this up, and I assumed the hardware would

	handle it:



	If MACE_MAX_RX_ITERATIONS is > 1, rx_framecnt may still be

	non-zero when the isr exits.  We may not get another interrupt

	to process the remaining packets for some time.

/*

The Am2150 has a Xilinx XC3042 field programmable gate array (FPGA)

which manages the interface between the MACE and the PCMCIA bus.  It

also includes buffer management for the 32K x 8 SRAM to control up to

four transmit and 12 receive frames at a time.

 Am2150 Ethernet Card I/O Mapping */

 MACE Registers */

 Reserved */

 Reserved */

 Reserved */

 Reserved */

 Reserved */

 MACE Bit Masks */

 Switch MACE register bank (only 0 and 1 are valid) */

 New statistics handling: grab everything */

/* ----------------------------------------------------------------------------

Type Definitions

 MACE_XMTFS */

 MACE_XMTRC */

 RFS1--Receive Status (RCVSTS) */

 RFS2--Runt Packet Count (RNTPC) */

 RFS3--Receive Collision Count (RCVCC) */

 MACE_IR */

 MACE_MPC */

 MACE_RNTPC */

 MACE_RCVCC */

 MACE chip statistics counters */

 restore_multicast_list() state variables */

 Logical address filter */

 Number of free transmit frame buffers */

 MACE TX interrupt disabled */

 Must be held if you step off bank 0 */

/* ----------------------------------------------------------------------------

Private Global Variables

/* ----------------------------------------------------------------------------

Parameters

	These are the parameters that can be set during loading with

	'insmod'.

 0=auto, 1=10baseT, 2 = 10base2, default=auto */

/* ----------------------------------------------------------------------------

Function Prototypes

 Create new ethernet device */

 nmclan_attach */

 nmclan_detach */

/* ----------------------------------------------------------------------------

mace_read

	Reads a MACE register.  This is bank independent; however, the

	caller must ensure that this call is not interruptable.  We are

	assuming that during normal operation, the MACE is always in

	bank 0.

 register 0-15 */

 register 16-31 */

 mace_read */

/* ----------------------------------------------------------------------------

mace_write

	Writes to a MACE register.  This is bank independent; however,

	the caller must ensure that this call is not interruptable.  We

	are assuming that during normal operation, the MACE is always in

	bank 0.

 register 0-15 */

 register 16-31 */

 mace_write */

/* ----------------------------------------------------------------------------

mace_init

	Resets the MACE chip.

 MACE Software reset */

 Wait for reset bit to be cleared automatically after <= 200ns */;

 The Am2150 requires that the MACE FIFOs operate in burst mode. */

 Disable Auto Strip Receive */

 Disable all interrupts until _open */

  /*

   * Bit 2-1 PORTSEL[1-0] Port Select.

   * 00 AUI/10Base-2

   * 01 10Base-T

   * 10 DAI Port (reserved in Am2150)

   * 11 GPSI

   * For this card, only the first two are valid.

   * So, PLSCC should be set to

   * 0x00 for 10Base-2

   * 0x02 for 10Base-T

   * Or just set ASEL in PHYCC below!

 ASEL */ 4);

      /* ASEL Auto Select.  When set, the PORTSEL[1-0] bits are overridden,

	 and the MACE device will automatically select the operating media

 Poll ADDRCHG bit */

 Set PADR register */

 MAC Configuration Control Register should be written last */

 Let set_multicast_list set this. */

 mace_write(lp, ioaddr, MACE_MACCC, MACE_MACCC_ENXMT | MACE_MACCC_ENRCV); */

 mace_init */

 Read the ethernet address from the CIS. */

 Verify configuration by reading the MACE ID. */

 The if_port symbol can be set when the module is loaded */

 nmclan_config */

/* ----------------------------------------------------------------------------

nmclan_reset

	Reset and restore all of the Xilinx and MACE registers.

 Save original COR value */

 Reset Xilinx */

 Need to wait for 20 ms for PCMCIA to finish reset. */

 Restore original COR configuration index */

 Xilinx is now completely reset along with the MACE chip. */

 #if RESET_XILINX */

 Xilinx is now completely reset along with the MACE chip. */

 Reinitialize the MACE chip for operation. */

 Restore the multicast list and enable TX and RX. */

 nmclan_reset */

/* ----------------------------------------------------------------------------

mace_config

	[Someone tell me what this is supposed to do?  Is if_port a defined

	standard?  If so, there should be defines to indicate 1=10Base-T,

	2=10Base-2, etc. including limited automatic detection.]

 mace_config */

/* ----------------------------------------------------------------------------

mace_open

	Open device driver.

 Always succeed */

 mace_open */

/* ----------------------------------------------------------------------------

mace_close

	Closes device driver.

 Mask off all interrupts from the MACE chip. */

 mace_close */

/* ----------------------------------------------------------------------------

mace_start_xmit

	This routine begins the packet transmit function.  When completed,

	it will generate a transmit interrupt.



	According to /usr/src/linux/net/inet/dev.c, if _start_xmit

	returns 0, the "packet is now solely the responsibility of the

	driver."  If _start_xmit returns non-zero, the "transmission

	failed, put skb back into a list."

 #if RESET_ON_TIMEOUT */

 #if RESET_ON_TIMEOUT */

 prevent tx timeout */

 Disable MACE TX interrupts. */

 #if (!TX_INTERRUPTABLE) */

    /* This block must not be interrupted by another transmit request!

       mace_tx_timeout will take care of timer-based retransmissions from

       the upper layers.  The interrupt handler is guaranteed never to

       service a transmit interrupt while we are in here.

 WARNING: Write the _exact_ number of bytes written in the header! */

 Put out the word header [must be an outw()] . . . */

 . . . and the packet [may be any combination of outw() and outb()] */

 Odd byte transfer */

 #if MULTI_TX */

 Re-enable MACE TX interrupts. */

 #if (!TX_INTERRUPTABLE) */

 mace_start_xmit */

/* ----------------------------------------------------------------------------

mace_interrupt

	The interrupt handler.

 WARNING: MACE_IR has been read! */

 WARNING: MACE_IR is a READ/CLEAR port! */

 Transmit Retry Count (XMTRC, reg 4) */

 Transmit Status Valid */

	    /* Underflow.  Indicates that the Transmit FIFO emptied before

 Late Collision */

 MORE than one retry was needed */

 Exactly ONE retry occurred */

 Transmission was defered */

 Loss of carrier */

 Retry error: transmit aborted after 16 attempts */

 if (xmtfs & ~MACE_XMTFS_XMTSV) */

 if (xmtfs & MACE_XMTFS_XMTSV) */

 if (status & MACE_IR_XMTINT) */

 Jabber Error.  Excessive transmit duration (20-150ms). */

 Babble Error.  >1518 bytes transmitted. */

	/* Collision Error.  CERR indicates the absence of the

	   Signal Quality Error Test message after a packet

 Receive Collision Count Overflow; */

 Runt Packet Count Overflow */

 Missed Packet Count Overflow */

 if (status & ~MACE_IMR_DEFAULT & ~MACE_IR_RCVINT & ~MACE_IR_XMTINT) */

 mace_interrupt */

/* ----------------------------------------------------------------------------

mace_rx

	Receives packets.

 rx_framecnt==0xFF if card is extracted. */

 Error, update stats. */

 Auto Strip is off, always subtract 4 */

 runt packet count */

 rcv collision count */

 Send the packet to the upper (protocol) layers. */

 skip to next frame */

 skip to next frame */

 while */

 mace_rx */

/* ----------------------------------------------------------------------------

pr_linux_stats

 pr_linux_stats */

/* ----------------------------------------------------------------------------

pr_mace_stats

 MACE_XMTRC */

 RFS1--Receive Status (RCVSTS) */

 RFS2--Runt Packet Count (RNTPC) */

 RFS3--Receive Collision Count (RCVCC) */

 MACE_IR */

 MACE_MPC */

 MACE_RNTPC */

 MACE_RCVCC */

 pr_mace_stats */

/* ----------------------------------------------------------------------------

update_stats

	Update statistics.  We change to register window 1, so this

	should be run single-threaded if the device is active. This is

	expected to be a rare operation, and it's simpler for the rest

	of the driver to assume that window 0 is always valid rather

	than use a special window-state variable.



	oflo & uflo should _never_ occur since it would mean the Xilinx

	was not able to transfer data between the MACE FIFO and the

	card's SRAM fast enough.  If this happens, something is

	seriously wrong with the hardware.

  /* At this point, mace_stats is fully updated for this call.

  /* The MACE has no equivalent for netdev stats field which are commented

 dev->stats.multicast; */

    /* Collision: The MACE may retry sending a packet 15 times

       before giving up.  The retry count is in XMTRC.

       Does each retry constitute a collision?

 detailed rx_errors: */

 dev->stats.rx_over_errors */

 detailed tx_errors */

 LCAR usually results from bad cabling. */

 dev->stats.tx_window_errors; */

 update_stats */

/* ----------------------------------------------------------------------------

mace_get_stats

	Gathers ethernet statistics from the MACE chip.

 net_device_stats */

/* ----------------------------------------------------------------------------

updateCRC

	Modified from Am79C90 data sheet.

  }; /* CRC polynomial.  poly[n] = coefficient of the x**n term of the

 shift CRC and control bit (CRC[32]) */

 If bit XOR(control bit) = 1, set CRC = CRC XOR polynomial. */

 updateCRC */

/* ----------------------------------------------------------------------------

BuildLAF

	Build logical address filter.

	Modified from Am79C90 data sheet.



Input

	ladrf: logical address filter (contents initialized to 0)

	adr: ethernet address

 CRC register, 1 word/bit + extra control bit */

 temporary array indices */

 the output object */

 BuildLAF */

/* ----------------------------------------------------------------------------

restore_multicast_list

	Restores the multicast filter for MACE chip to the last

	set_multicast_list() call.



Input

	multicast_num_addrs

	multicast_ladrf[]

 Poll ADDRCHG bit */

 Set LADRF register */

 Promiscuous mode: receive all packets */

 Normal mode */

 restore_multicast_list */

/* ----------------------------------------------------------------------------

set_multicast_list

	Set or clear the multicast filter for this adaptor.



Input

	num_addrs == -1	Promiscuous mode, receive all packets

	num_addrs == 0	Normal mode, clear multicast list

	num_addrs > 0	Multicast mode, receive normal and MC packets, and do

			best-effort filtering.

Output

	multicast_num_addrs

	multicast_ladrf[]

 Ethernet address */

 Set multicast_num_addrs. */

 Set multicast_ladrf. */

 Calculate multicast logical address filter */

 set_multicast_list */

 BROKEN_MULTICAST */

 Promiscuous mode: receive all packets */

 Normal mode */

 restore_multicast_list */

 set_multicast_list */

 SPDX-License-Identifier: GPL-2.0-only

/* $Id: sunlance.c,v 1.112 2002/01/15 06:48:55 davem Exp $

 * lance.c: Linux/Sparc/Lance driver

 *

 *	Written 1995, 1996 by Miguel de Icaza

 * Sources:

 *	The Linux  depca driver

 *	The Linux  lance driver.

 *	The Linux  skeleton driver.

 *	The NetBSD Sparc/Lance driver.

 *	Theo de Raadt (deraadt@openbsd.org)

 *	NCR92C990 Lan Controller manual

 *

 * 1.4:

 *	Added support to run with a ledma on the Sun4m

 *

 * 1.5:

 *	Added multiple card detection.

 *

 *	 4/17/96: Burst sizes and tpe selection on sun4m by Eddie C. Dost

 *		  (ecd@skynet.be)

 *

 *	 5/15/96: auto carrier detection on sun4m by Eddie C. Dost

 *		  (ecd@skynet.be)

 *

 *	 5/17/96: lebuffer on scsi/ether cards now work David S. Miller

 *		  (davem@caip.rutgers.edu)

 *

 *	 5/29/96: override option 'tpe-link-test?', if it is 'false', as

 *		  this disables auto carrier detection on sun4m. Eddie C. Dost

 *		  (ecd@skynet.be)

 *

 * 1.7:

 *	 6/26/96: Bug fix for multiple ledmas, miguel.

 *

 * 1.8:

 *		  Stole multicast code from depca.c, fixed lance_tx.

 *

 * 1.9:

 *	 8/21/96: Fixed the multicast code (Pedro Roque)

 *

 *	 8/28/96: Send fake packet in lance_open() if auto_select is true,

 *		  so we can detect the carrier loss condition in time.

 *		  Eddie C. Dost (ecd@skynet.be)

 *

 *	 9/15/96: Align rx_buf so that eth_copy_and_sum() won't cause an

 *		  MNA trap during chksum_partial_copy(). (ecd@skynet.be)

 *

 *	11/17/96: Handle LE_C0_MERR in lance_interrupt(). (ecd@skynet.be)

 *

 *	12/22/96: Don't loop forever in lance_rx() on incomplete packets.

 *		  This was the sun4c killer. Shit, stupid bug.

 *		  (ecd@skynet.be)

 *

 * 1.10:

 *	 1/26/97: Modularize driver. (ecd@skynet.be)

 *

 * 1.11:

 *	12/27/97: Added sun4d support. (jj@sunsite.mff.cuni.cz)

 *

 * 1.12:

 * 	 11/3/99: Fixed SMP race in lance_start_xmit found by davem.

 * 	          Anton Blanchard (anton@progsoc.uts.edu.au)

 * 2.00: 11/9/99: Massive overhaul and port to new SBUS driver interfaces.

 *		  David S. Miller (davem@redhat.com)

 * 2.01:

 *      11/08/01: Use library crc32 functions (Matt_Domsch@dell.com)

 *

 Used for the temporal inet entries and routing */

 Used by the checksum routines */

 For tpe-link-test? setting */

 Define: 2^4 Tx buffers and 2^4 Rx buffers */

 Enable promiscuous mode */

 Error: set if BAB, SQE, MISS or ME is set */

 BAB:  Babble: tx timeout. */

 SQE:  Signal quality error */

 MISS: Missed a packet */

 ME:   Memory error */

 Received interrupt */

 Transmitter Interrupt */

 IFIN: Init finished. */

 Interrupt or error */

 Interrupt enable */

 Receiver on */

 Transmitter on */

 Transmitter demand */

 Stop the card */

 Start the card */

 Init the card */

 SWAP */

 ALE Control */

 Byte control */

 Receive message descriptor 1 */

 Who owns the entry */

 Error: if FRA, OFL, CRC or BUF is set */

 FRA: Frame error */

 OFL: Frame overflow */

 CRC error */

 BUF: Buffer error */

 Start of packet */

 End of packet */

 Packet is complete: SOP + EOP */

 Lance owns the packet */

 Error summary */

 Error: more than one retry needed */

 Error: one retry needed */

 Error: deferred */

 Start of packet */

 End of packet */

 Packet is complete: SOP + EOP */

 Buffer error */

 Error underflow */

 Error late collision */

 Error carrier loss */

 Error retry */

 Time Domain Reflectometry counter */

 low address of packet */

 descriptor bits */

 high address of packet */

	s16	length;		/* This length is 2s complement (negative)!

				 * Buffer length

 This is the actual number of bytes received */

 low address of packet */

 descriptor bits */

 high address of packet */

 Length is 2s complement (negative)! */

 The LANCE initialization block, described in databook. */

 On the Sparc, this block should be on a DMA region     */

 Pre-set mode (reg. 15) */

 Physical ethernet address */

 Multicast filter. */

 Receive and transmit ring base, along with extra bits. */

 receive descriptor addr */

 receive len and high addr */

 transmit descriptor addr */

 transmit len and high addr */

 The Tx and Rx ring entries must aligned on 8-byte boundaries. */

 align rx_buf for copy_and_sum(). */

 Lance RAP/RDP regs.		*/

 DMA controller regs.		*/

 If set this points to ledma	*/

 cable-selection is TPE	*/

 cable-selection by carrier	*/

 ledma SBus burst sizes	*/

 init block in PIO space?	*/

 Backpointer	*/

 Lance registers. */

 register data port		*/

 register address port	*/

 The Lance uses 24 bit addresses */

 On the Sun4c the DVMA will provide the remaining bytes for us */

 On the Sun4m we have to instruct the ledma to provide them    */

/* Even worse, on scsi/ether SBUS cards, the init block and the

 * transmit/receive buffers are addresses as offsets from absolute

 * zero on the lebuffer PIO area. -DaveM

 Load the CSR registers */

 Point back to csr0 */

 Setup the Lance Rx and Tx rings */

 Lock out other processes while setting up hardware */

	/* Copy the ethernet address to the lance init block

	 * Note that on the sparc you need to swap the ethernet address.

 Setup the Tx ring entries */

 The ones required by tmd2 */

 Setup the Rx ring entries */

 Setup the initialization block */

 Setup rx descriptor pointer */

 Setup tx descriptor pointer */

 Lock out other processes while setting up hardware */

	/* Copy the ethernet address to the lance init block

	 * Note that on the sparc you need to swap the ethernet address.

 Setup the Tx ring entries */

 The ones required by tmd2 */

 Setup the Rx ring entries */

 Setup the initialization block */

 Setup rx descriptor pointer */

 Setup tx descriptor pointer */

 E-Cache draining */

 Wait for the lance to complete initialization */

 Clear IDON by writing a "1", enable interrupts and start lance */

 We got an incomplete frame? */

			/* Count only the end frame as a rx error,

			 * not the beginning

 16 byte align */

 make room */

 Return the packet to the pool */

 If we hit a packet not owned by us, stop */

			/* Buffer errors and underflows turn off the

			 * transmitter, restart the adapter.

			/*

			 * So we don't count the packet more than once.

 One collision before packet was sent. */

 More than one collision, be optimistic. */

 We know here that both src and dest are on a 16bit boundary. */

 We got an incomplete frame? */

			/* Count only the end frame as a rx error,

			 * not the beginning

 16 byte align */

 make room */

 Return the packet to the pool */

 If we hit a packet not owned by us, stop */

			/* Buffer errors and underflows turn off the

			 * transmitter, restart the adapter.

			/*

			 * So we don't count the packet more than once.

 One collision before packet was sent. */

 More than one collision, be optimistic. */

 Acknowledge all the interrupt sources ASAP */

 Clear the error condition */

 Build a fake network packet and send it to ourselves. */

 On the 4m, setup the ledma to provide the upper bits for buffers */

	/* Set mode and clear multicast filter only at device open,

	 * so that lance_init_ring() called at any error will not

	 * forget multicast filters.

	 *

	 * BTW it is common bug in all lance drivers! --ANK

 On the 4m, reset the dma too */

 prevent tx timeout */

 Kick the lance: transmit now */

	/* Read back CSR to invalidate the E-Cache.

	 * This is needed, because DMA_DSBL_WR_INV is set.

 taken from the depca driver */

 set all multicast bits */

 Add addresses */

 Ethtool support... */

	/* Copy the IDPROM ethernet address to the device structure, later we

	 * will copy the address in the device structure to the lance

	 * initialization block.

 Get the IO region */

 sanity check */

 Find burst-size property for ledma */

 ledma may be capable of fast bursts, but sbus may not. */

 Get the cable-selection property */

 Reset ledma */

	/* We cannot sleep if the chip is busy during a

	 * multicast list update event, because such events

	 * can occur from interrupts (ex. IPv6).  So we

	 * use a timer to try again later when necessary. -DaveM

 atarilance.c: Ethernet driver for VME Lance cards on the Atari */

/*

	Written 1995/96 by Roman Hodek (Roman.Hodek@informatik.uni-erlangen.de)



	This software may be used and distributed according to the terms

	of the GNU General Public License, incorporated herein by reference.



	This drivers was written with the following sources of reference:

	 - The driver for the Riebl Lance card by the TU Vienna.

	 - The modified TUW driver for PAM's VME cards

	 - The PC-Linux driver for Lance cards (but this is for bus master

       cards, not the shared memory ones)

	 - The Amiga Ariadne driver



	v1.0: (in 1.2.13pl4/0.9.13)

	      Initial version

	v1.1: (in 1.2.13pl5)

	      more comments

		  deleted some debugging stuff

		  optimized register access (keep AREG pointing to CSR0)

		  following AMD, CSR0_STRT should be set only after IDON is detected

		  use memcpy() for data transfers, that also employs long word moves

		  better probe procedure for 24-bit systems

          non-VME-RieblCards need extra delays in memcpy

		  must also do write test, since 0xfxe00000 may hit ROM

		  use 8/32 tx/rx buffers, which should give better NFS performance;

		    this is made possible by shifting the last packet buffer after the

		    RieblCard reserved area

    v1.2: (in 1.2.13pl8)

	      again fixed probing for the Falcon; 0xfe01000 hits phys. 0x00010000

		  and thus RAM, in case of no Lance found all memory contents have to

		  be restored!

		  Now possible to compile as module.

	v1.3: 03/30/96 Jes Sorensen, Roman (in 1.3)

	      Several little 1.3 adaptions

		  When the lance is stopped it jumps back into little-endian

		  mode. It is therefore necessary to put it back where it

		  belongs, in big endian mode, in order to make things work.

		  This might be the reason why multicast-mode didn't work

		  before, but I'm not able to test it as I only got an Amiga

		  (we had similar problems with the A2065 driver).



/* Debug level:

 *  0 = silent, print only serious errors

 *  1 = normal, print error messages

 *  2 = debug, print debug infos

 *  3 = debug, print even more debug infos (packet data)

 Print debug messages on probing? */

/* These define the number of Rx and Tx buffers as log2. (Only powers

 * of two are valid)

 * Much more rx buffers (32) are reserved than tx buffers (8), since receiving

 * is more time critical then sending and packets may have to remain in the

 * board's memory when main memory is low.

 These are the derived values */

 The LANCE Rx and Tx ring descriptors. */

 Low word of base addr */

 High word of base addr (unused) */

 This length is 2s complement! */

 This length is "normal". */

 Low word of base addr */

 High word of base addr (unused) */

 Length is 2s complement! */

 Low 16 bits of address */

 Length bits */

 High 8 bits of address (unused) */

 The LANCE initialization block, described in databook. */

 Pre-set mode */

 Physical ethernet address */

 Multicast filter (unused). */

 Receive and transmit ring base, along with length bits. */

 The whole layout of the Lance shared memory */

	char					packet_area[];	/* packet data follow after the

											 * init block and the ring

											 * descriptors and are located

/* RieblCard specifics:

 * The original TOS driver for these cards reserves the area from offset

 * 0xee70 to 0xeebb for storing configuration data. Of interest to us is the

 * Ethernet address there, and the magic for verifying the data's validity.

 * The reserved area isn't touch by packet buffers. Furthermore, offset 0xfffe

 * is reserved for the interrupt vector number.

/* This is a default address for the old RieblCards without a battery

 * that have no ethernet address at boot time. 00:00:36:04 is the

 * prefix for Riebl cards, the 00:00 at the end is arbitrary.

 I/O registers of the Lance chip */

 base+0x0 */	volatile unsigned short	data;

 base+0x2 */	volatile unsigned short	addr;

 base+0x7 */	volatile unsigned char	ivec;

 base+0xd */	volatile unsigned char	eeprom;

 base+0xf */	volatile unsigned char	mem;

 Types of boards this driver supports */

 old Riebl card without battery */

 new Riebl card with battery */

 PAM card with EEPROM */

 The driver's private device structure */

 The next free ring entry */

 Ring entries to be freed. */

 copy function */

 This must be long for set_bit() */

 I/O register access macros */

 Definitions for packet buffer access: */

 Get the address of a packet buffer corresponding to a given buffer head */

 Possible memory/IO addresses for probing */

 RieblCard VME in TT */

	{ 0xffc10000, 0xffc0fff0, 0 },	/* RieblCard VME in MegaSTE

	{ 0xffe00000, 0xffff7000, 1 },	/* RieblCard in ST

	{ 0xffd00000, 0xffff7000, 1 },	/* RieblCard in ST with hw modif. to

									   avoid conflict with ROM

	{ 0xffcf0000, 0xffcffff0, 0 },	/* PAMCard VME in TT and MSTE

	{ 0xfecf0000, 0xfecffff0, 0 },	/* Rhotron's PAMCard VME in TT and MSTE

 Definitions for the Lance */

 tx_head flags */

 end of packet */

 start of packet */

 deferred */

 one retry needed */

 more than one retry needed */

 error summary */

 ownership (set: chip owns) */

 tx_head misc field */

 Time Domain Reflectometry counter */

 failed after 16 retries */

 carrier lost */

 late collision */

 underflow (late memory) */

 buffering error (no ENP) */

 rx_head flags */

 end of packet */

 start of packet */

 buffer error */

 CRC error */

 overflow */

 framing error */

 error summary */

 ownership (set: ship owns) */

 register names */

 mode/status */

 init block addr (low) */

 init block addr (high) */

 misc */

 address filter */

 promiscuous mode */

 CSR0 */

 (R=readable, W=writeable, S=set on write, C=clear on write) */

 initialize (RS) */

 start (RS) */

 stop (RS) */

 transmit demand (RS) */

 transmitter on (R) */

 receiver on (R) */

 interrupt enable (RW) */

 interrupt active (R) */

 initialization done (RC) */

 transmitter interrupt (RC) */

 receiver interrupt (RC) */

 memory error (RC) */

 missed frame (RC) */

 carrier error (no heartbeat :-) (RC) */

 babble: tx-ed too many bits (RC) */

 error (RC) */

 CSR3 */

 byte control */

 ALE control */

 byte swap (1=big endian) */

**************************** Prototypes *****************************/

************************ End of Prototypes **************************/

		/* Assume there's only one board possible... That seems true, since

 Derived from hwreg_present() in atari/config.c: */

 Test whether memory readable and writable */

 Written values should come back... */

 First port should be readable and writable */

 and written values should be readable */

 The CSR0_INIT bit should not be readable */

 Now ok... */

 informational only */

	/* Now test for type: If the eeprom I/O port is readable, it is a

 Switch back to Ram */

 PAMs card and Riebl on ST use level 5 autovector */

 For VME-RieblCards, request a free VME int */

 Get the ethernet address */

 No ethernet address! (Set some default address) */

 Disable Rx and Tx. */

 <- 16 bit swap! */

 XXX MSch */

 Re-initialize the LANCE, and start it when done. */

 From now on, AREG is kept to point to CSR0 */

 Initialize the LANCE Rx and Tx rings. */

/* If the packet buffer at offset 'o' would conflict with the reserved area

 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX */

	/*

	 * Always set BSWP after a STOP as STOP puts it back into

	 * little endian mode.

 XXX MSch: maybe purge/reinit ring here */

 lance_restart, essentially */

 prevent tx timeout */

 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX */

 The old LANCE chips doesn't automatically pad buffers to min. size. */

 PAM-Card has a bug: Can only send packets with even number of bytes! */

 Fill in a Tx ring entry */

	/* We're not prepared for the int until the last flags are set/reset. And

 Mask to ring buffer boundary. */

	/* Caution: the write order is important here, set the "ownership" bits

	 * last.

 Trigger an immediate send poll. */

 The LANCE interrupt handler. */

 Acknowledge all of the current interrupt sources ASAP. */

 Rx interrupt */

 Tx-done interrupt */

 It still hasn't been Txed */

 There was an major error, log it. */

 Ackk!  On FIFO errors the Tx unit is turned off! */

 Remove this verbosity later! */

 Restart the chip. */

 XXX MSch: free skb?? */

 The ring is no longer full, clear tbusy. */

 Log misc errors. */

 Tx babble. */

 Missed a Rx frame. */

 Restart the chip. */

 Clear any other interrupt, and set interrupt enable. */

 If we own the next entry, it's a new packet. Send it up. */

 There was an error. */

			/* There is a tricky error noted by John Murphy,

			   <murf@perftech.com> to Russ Nelson: Even with full-sized

			   buffers it's possible for a jabber packet to use two

 Only count a general error at the */

 end of a packet.*/

 Malloc up new buffer, compatible with net-3. */

 16 byte align */

 Make room */

 From lance.c (Donald Becker): */

	/* We should check that at least two ring entries are free.	 If not,

	/* We stop the LANCE here -- it occasionally polls

/* Set or clear the multicast filter for this adaptor.

   num_addrs == -1		Promiscuous mode, receive all packets

   num_addrs == 0		Normal mode, clear multicast list

   num_addrs > 0		Multicast mode, receive normal and MC packets, and do

						best-effort filtering.

 Only possible if board is already started */

 We take the simple way out and always enable promiscuous mode. */

 Temporarily stop the lance. */

 Log any net taps. */

 Set promiscuous mode */

		/* We don't use the multicast table, but rely on upper-layer

 Unset promiscuous mode */

	/*

	 * Always set BSWP after a STOP as STOP puts it back into

	 * little endian mode.

 Resume normal operation and reset AREG to CSR0 */

 This is needed for old RieblCards and possible for new RieblCards */

 Only possible while card isn't started */

 <- 16 bit swap! */

 set also the magic for future sessions */

 SPDX-License-Identifier: GPL-2.0-only

/* mvme147.c  : the  Linux/mvme147/lance ethernet driver

 *

 * Copyright (C) 05/1998 Peter Maydell <pmaydell@chiark.greenend.org.uk>

 * Based on the Sun Lance driver and the NetBSD HP Lance driver

 * Uses the generic 7990.c LANCE code.

 Used for the temporal inet entries and routing */

/* We have 32K of RAM for the init block and buffers. This places

 * an upper limit on the number of buffers we can use. NetBSD uses 8 Rx

 * buffers and 2 Tx buffers, it takes (8 + 2) * 1544 bytes.

 use generic LANCE code */

 Our private data structure */

/* function prototypes... This is easy because all the grot is in the

 * generic LANCE support. All we have to support is probing for boards,

 * plus board-specific init, open and close actions.

 * Oh, and we need to tell the generic code how to read and write LANCE registers...

 Initialise the one and only on-board 7990 */

 Fill the dev fields */

 32K */

 CPU addr */

 LANCE addr of same RAM */

 we're bigendian */

 call generic lance open code */

 enable interrupts at board level. */

 clear the interrupts (if any) */

 Enable irq 4 */

 disable interrupts at boardlevel */

 disable interrupts */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Alchemy Au1x00 ethernet driver

 *

 * Copyright 2001-2003, 2006 MontaVista Software Inc.

 * Copyright 2002 TimeSys Corp.

 * Added ethtool/mii-tool support,

 * Copyright 2004 Matt Porter <mporter@kernel.crashing.org>

 * Update: 2004 Bjoern Riemer, riemer@fokus.fraunhofer.de

 * or riemer@riemer-nt.de: fixed the link beat detection with

 * ioctls (SIOCGMIIPHY)

 * Copyright 2006 Herbert Valerio Riedel <hvr@gnu.org>

 *  converted to use linux-2.6.x's PHY framework

 *

 * Author: MontaVista Software, Inc.

 *		ppopov@mvista.com or source@mvista.com

 AU1000 MAC registers and bits */

 Ethernet Controller Enable */

 Ethernet Controller DMA Channels */

 offsets from MAC_TX_RING_ADDR address */

 offsets from MAC_RX_RING_ADDR */

/*

 * Theory of operation

 *

 * The Au1000 MACs use a simple rx and tx descriptor ring scheme.

 * There are four receive and four transmit descriptors.  These

 * descriptors are not in memory; rather, they are just a set of

 * hardware registers.

 *

 * Since the Au1000 has a coherent data cache, the receive and

 * transmit buffers are allocated from the KSEG0 segment. The

 * hardware registers, however, are still mapped at KSEG1 to

 * make sure there's no out-of-order writes, and that all writes

 * complete immediately.

/*

 * board-specific configurations

 *

 * PHY detection algorithm

 *

 * If phy_static_config is undefined, the PHY setup is

 * autodetected:

 *

 * mii_probe() first searches the current MAC's MII bus for a PHY,

 * selecting the first (or last, if phy_search_highest_addr is

 * defined) PHY address not already claimed by another netdev.

 *

 * If nothing was found that way when searching for the 2nd ethernet

 * controller's PHY and phy1_search_mac0 is defined, then

 * the first MII bus is searched as well for an unclaimed PHY; this is

 * needed in case of a dual-PHY accessible only through the MAC0's MII

 * bus.

 *

 * Finally, if no PHY is found, then the corresponding ethernet

 * controller is not registered to the network subsystem.

 autodetection defaults: phy1_search_mac0 */

/* static PHY setup

 *

 * most boards PHY setup should be detectable properly with the

 * autodetection algorithm in mii_probe(), but in some cases (e.g. if

 * you have a switch attached, or want to use the PHY's interrupt

 * notification capabilities) you can provide a static PHY

 * configuration here

 *

 * IRQs may only be set, if a PHY address was configured

 * If a PHY address is given, also a bus id is required to be set

 *

 * ps: make sure the used irqs are configured properly in the board

 * specific irq-map

 drain writebuffer */

 drain writebuffer */

/*

 * MII operations

	/* make sure the MAC associated with this

	 * mii_bus is enabled

	/* make sure the MAC associated with this

	 * mii_bus is enabled

	/* make sure the MAC associated with this

	 * mii_bus is enabled

 drain writebuffer */

 drain writebuffer */

 speed changed */

 duplex mode changed */

 switching duplex mode requires to disable rx and tx! */

 drain writebuffer */

 link state changed */

 link went down */

	/* find the first (lowest address) PHY

	 * on the current MAC's MII bus

 break out with first one found */

 try harder to find a PHY */

 no PHY found, maybe we have a dual PHY? */

			/* find the first (lowest address) non-attached

			 * PHY on the MAC0 MII bus

 no PHY here... */

 already claimed by MAC0 */

 found it */

 now we are supposed to have a proper phydev, to attach to... */

/*

 * Buffer allocation/deallocation routines. The buffer descriptor returned

 * has the virtual and dma address of a buffer suitable for

 * both, receive and transmit operations.

 drain writebuffer */

 drain writebuffer */

 reset control bits */

 reset control bits */

/*

 * Setup the receive and transmit "rings".  These pointers are the addresses

 * of the rx and tx MAC DMA registers so they are fixed by the hardware --

 * these are not descriptors sitting in memory.

/*

 * ethtool operations

/*

 * Initialize the interface.

 *

 * When the device powers up, the clocks are disabled and the

 * mac is in reset state.  When the interface is closed, we

 * do the same -- reset the device and disable the clocks to

 * conserve power. Thus, whenever au1000_init() is called,

 * the device should already be in reset state.

 bring the device out of reset */

 drain writebuffer */

 PHY-less op, assume full-duplex */

 activate vlan support */

 drain writebuffer */

/*

 * Au1000 receive routine.

 good frame */

 Remove FCS */

 16 byte IP header align */

 pass the packet to upper layers */

 drain writebuffer */

 next descriptor */

				/* any other tx errors are only valid

				 * in half duplex mode

/*

 * Called from the interrupt service routine to acknowledge

 * the TX DONE bits.  This is a must if the irq is setup as

 * edge triggered.

 drain writebuffer */

/*

 * Au1000 interrupt service routine.

 Handle RX interrupts first to minimize chance of overrun */

 stop the device */

 disable the interrupt */

/*

 * Au1000 transmit routine.

 We've wrapped around and the transmitter is still busy */

 drain writebuffer */

/*

 * The Tx ring has been full longer than the watchdog timeout

 * value. The transmitter must be hung?

 prevent tx timeout */

 Set promiscuous. */

 Multicast hash filter */

	/* Allocate the data buffers

	 * Snooping works fine with eth on all au1xxx

 aup->mac is the base address of the MAC's registers */

 Setup some variables for quick register address access */

 Set a random MAC since no valid provided by platform_data. */

 if known, set corresponding PHY IRQs */

 setup the data buffer descriptors and attach a buffer to each one */

	/*

	 * The boot code uses the ethernet controller, so reset it to start

	 * fresh.  au1000_init() expects that the device is in reset state.

	/* here we should have a valid dev plus aup-> register addresses

	 * so we can reset the mac properly.

 SPDX-License-Identifier: GPL-2.0-or-later

/* Advanced  Micro Devices Inc. AMD8111E Linux Network Driver

 * Copyright (C) 2004 Advanced Micro Devices

 *

 * Copyright 2001,2002 Jeff Garzik <jgarzik@mandrakesoft.com> [ 8139cp.c,tg3.c ]

 * Copyright (C) 2001, 2002 David S. Miller (davem@redhat.com)[ tg3.c]

 * Copyright 1996-1999 Thomas Bogendoerfer [ pcnet32.c ]

 * Derived from the lance driver written 1993,1994,1995 by Donald Becker.

 * Copyright 1993 United States Government as represented by the

 *	Director, National Security Agency.[ pcnet32.c ]

 * Carsten Langgaard, carstenl@mips.com [ pcnet32.c ]

 * Copyright (C) 2000 MIPS Technologies, Inc.  All rights reserved.

 *



Module Name:



	amd8111e.c



Abstract:



	 AMD8111 based 10/100 Ethernet Controller Driver.



Environment:



	Kernel Mode



Revision History:

	3.0.0

	   Initial Revision.

	3.0.1

	 1. Dynamic interrupt coalescing.

	 2. Removed prev_stats.

	 3. MII support.

	 4. Dynamic IPG support

	3.0.2  05/29/2003

	 1. Bug fix: Fixed failure to send jumbo packets larger than 4k.

	 2. Bug fix: Fixed VLAN support failure.

	 3. Bug fix: Fixed receive interrupt coalescing bug.

	 4. Dynamic IPG support is disabled by default.

	3.0.3 06/05/2003

	 1. Bug fix: Fixed failure to close the interface if SMP is enabled.

	3.0.4 12/09/2003

	 1. Added set_mac_address routine for bonding driver support.

	 2. Tested the driver for bonding support

	 3. Bug fix: Fixed mismach in actual receive buffer lenth and lenth

	    indicated to the h/w.

	 4. Modified amd8111e_rx() routine to receive all the received packets

	    in the first interrupt.

	 5. Bug fix: Corrected  rx_errors  reported in get_stats() function.

	3.0.5 03/22/2004

	 1. Added NAPI support



 This function will read the PHY registers. */

 It takes 30 us to read/write data */

 This function will write into PHY registers. */

 It takes 30 us to read/write the data */

 This is the mii register read function provided to the mii interface. */

 This is the mii register write function provided to the mii interface. */

/* This function will set PHY speed. During initialization sets

 * the original speed to 100 full

 Determine mii register values to set the speed */

 advertise all values */

 Restart auto negotiation */

/* This function will unmap skb->data space and will free

 * all transmit and receive skbuffs.

 Freeing transmit skbs */

 Freeing previously allocated receive buffers */

/* This will set the receive buffer length corresponding

 * to the mtu size of networkinterface.

		/* MTU + ethernet header + FCS

		 * + optional VLAN tag + skb reserve space 2

/* This function will free all the previously allocated buffers,

 * determine new receive buffer length  and will allocate new receive buffers.

 * This function also allocates and initializes both the transmitter

 * and receive hardware descriptors.

 Free previously allocated transmit and receive skbs */

 allocate the tx and rx descriptors */

 Set new receive buff size */

 Allocating receive  skbs */

 Release previos allocated skbs */

 Initilaizing receive descriptors */

 Initializing transmit descriptors */

/* This function will set the interrupt coalescing according

 * to the input arguments

 Start the timer */

 0.5 sec */

 This function initializes the device registers  and starts the device. */

 stop the chip */

 enable the port manager and set auto negotiation always */

 set control registers */

 enable interrupt */

 initialize tx and rx ring base addresses */

 set default IPG to 96 */

 Reset REX_UFLO */

 Should not set REX_UFLO for jumbo frames */

 Setting the MAC address to the device */

 Enable interrupt coalesce */

 set RUN bit to start the chip */

 To avoid PCI posting bug */

 This function clears necessary the device registers. */

 stop the chip */

*TBD default value is 8100 in FPS */
TBD default value is 8100 in FPS */

 Clear RCV_RING_BASE_ADDR */

 Clear XMT_RING_BASE_ADDR */

 Clear CMD0  */

 Clear CMD2 */

 Clear CMD7 */

 Clear DLY_INT_A and DLY_INT_B */

 Clear FLOW_CONTROL */

 Clear INT0  write 1 to clear register */

 Clear STVAL */

 Clear INTEN0 */

 Clear LADRF */

 Set SRAM_SIZE & SRAM_BOUNDARY registers  */

 Clear RCV_RING0_LEN */

 Clear XMT_RING0/1/2/3_LEN */

 Clear XMT_RING_LIMIT */

 Clear MIB */

 Clear LARF */

 SRAM_SIZE register */

 Set default value to CTRL1 Register */

 To avoid PCI posting bug */

/* This function disables the interrupt and clears all the pending

 * interrupts in INT0

 Disable interrupt */

 Clear INT0 */

 To avoid PCI posting bug */

 This function stops the chip. */

 To avoid PCI posting bug */

 This function frees the  transmiter and receiver descriptor rings. */

 Free transmit and receive descriptor rings */

/* This function will free all the transmit skbs that are actually

 * transmitted by the device. It will check the ownership of the

 * skb before freeing the skb.

 Complete all the transmit packet */

 It still hasn't been Txed */

 We must free the original skb */

COAL update tx coalescing parameters */

 The ring is no longer full, clear tbusy. */

 lp->tx_full = 0; */

 This function handles the driver receive operation in polling mode */

		/* There is a tricky error noted by John Murphy,

		 * <murf@perftech.com> to Russ Nelson: Even with

		 * full-sized * buffers it's possible for a

		 * jabber packet to use two buffers, with only

		 * the last correctly noting the error.

 resetting flags */

 check for STP and ENP */

 resetting flags */

 MAC will strip vlan tag */

			/* if allocation fail,

			 * ignore that pkt and go to next one

 COAL update rx coalescing parameters */

 Receive descriptor is empty now */

 This function will indicate the link status to the kernel. */

 read the link change */

 This function reads the mib counters. */

 controller takes MAX 2 us to get mib data */

/* This function reads the mib registers and returns the hardware statistics.

 * It updates previous internal driver statistics with new values.

 stats.rx_packets */

 stats.tx_packets */

stats.rx_bytes */

 stats.tx_bytes */

 stats.rx_errors */

 hw errors + errors driver reported */

 stats.tx_errors */

 stats.rx_dropped*/

 stats.tx_dropped*/

 stats.multicast*/

 stats.collisions*/

 stats.rx_length_errors*/

 stats.rx_over_errors*/

 stats.rx_crc_errors*/

 stats.rx_frame_errors*/

 stats.rx_fifo_errors */

 stats.rx_missed_errors */

 stats.tx_aborted_errors*/

 stats.tx_carrier_errors*/

 stats.tx_fifo_errors*/

 stats.tx_window_errors*/

 Reset the mibs for collecting new statistics */

 writew(MIB_CLEAR, mmio + MIB_ADDR);*/

/* This function recalculate the interrupt coalescing  mode on every interrupt

 * according to the datarate and the packet rate.

 NOW FOR TX INTR COALESC */

/* This is device interrupt function. It handles transmit,

 * receive,link change and hardware timer interrupts.

 disabling interrupt */

 Read interrupt status */

 Process all the INT event until INTR bit is clear. */

 Current driver processes 4 interrupts : RINT,TINT,LCINT,STINT */

 Check if Receive Interrupt has occurred. */

 Disable receive interupts */

 Schedule a polling routine */

 Fix by disable receive interrupts */

 Check if  Transmit Interrupt has occurred. */

 Check if  Link Change Interrupt has occurred. */

 Check if Hardware Timer Interrupt has occurred. */

/* This function closes the network interface and updates

 * the statistics so that most recent statistics will be

 * available after the interface is down.

 Free transmit and receive skbs */

 Delete ipg timer */

 Update the statistics before closing */

/* This function opens new interface.It requests irq for the device,

 * initializes the device,buffers and descriptors, and starts the device.

 Start ipg timer */

/* This function checks if there is any transmit  descriptors

 * available to queue more packet.

/* This function will queue the transmit packets to the

 * descriptors and will trigger the send operation. It also

 * initializes the transmit descriptors with buffer physical address,

 * byte count, ownership to hardware etc.

  Set FCS and LTINT bits */

 Trigger an immediate send poll. */

 This function returns all the memory mapped registers of the device. */

 Read only necessary registers */

/* This function sets promiscuos mode, all-multi mode or the multicast address

 * list to the device.

 get all multicast packet */

 get only own packets */

 disable promiscuous mode */

 load all the multicast addresses in the logic filter */

 To eliminate PCI posting bug */

/* This function handles all the  ethtool ioctls. It gives driver info,

 * gets/sets driver speed, gets memory mapped register values, forces

 * auto negotiation, sets/gets WOL options for ethtool application.

 do nothing */

 Setting the MAC address to the device */

/* This function changes the mtu of the device. It restarts the device  to

 * initialize the descriptor with new receive buffers.

		/* new_mtu will be used

		 * when device starts netxt time

 stop the chip */

 To eliminate PCI posting bug */

 Adapter is already stoped/suspended/interrupt-disabled */

 To eliminate PCI posting bug */

/* This function is called when a packet transmission fails to complete

 * within a reasonable period, on the assumption that an interrupt have

 * failed or the interface is locked up. This function will reinitialize

 * the hardware.

 disable the interrupt */

 stop chip */

 enable wol */

 Restart ipg timer */

 Get the current collision count */

 Find power-management capability. */

 Initialize DMA */

 Initializing MAC address */

 Setting user defined parametrs */

 Initialize driver entry points */

 Probe the external PHY */

 setting mii default values */

 Set receive buffer length and set jumbo option*/

 Initialize software ipg timer */

  display driver and device information */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2014 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2014 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 Descriptors */

 Descriptor information */

 Try to obtain pages, decreasing order if necessary */

 If we couldn't get local pages, try getting from anywhere */

 Map the pages */

 This data descriptor is responsible for unmapping page(s) */

 Get a new allocation next time */

 Set up the header page info */

 Set up the buffer page info */

 Save space for a context descriptor if needed */

 Map the TSO header */

 Map the (remainder of the) packet */

	/* Save the skb address in the last entry. We always have some data

	 * that has been mapped so rdata is always advanced past the last

	 * piece of mapped data - use the entry pointed to by cur_index - 1.

 Save the number of descriptor entries used */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 Only expose the ECC parameters if supported */

 Attempt to use a CPU on the node the device is on */

 Set the allocation node based on the returned CPU */

		/* If we haven't notified the hardware because of xmit_more

		 * support, tell it now

 Mask status with only the interrupts we care about */

 Clear all ECC interrupts */

 Reissue interrupt if status is not clear */

	/* The DMA interrupt status register also reports MAC and MTL

	 * interrupts. So for polling mode, we just need to check for

	 * this register to be non-zero

		/* The TI or RI interrupt bits may still be set even if using

		 * per channel DMA interrupts. Check to be sure those are not

		 * enabled before using the private data napi structure.

 Disable Tx and Rx interrupts */

 Turn on polling */

			/* Don't clear Rx/Tx status if doing per channel DMA

			 * interrupts, these will be cleared by the ISR for

			 * per channel DMA interrupts.

 Restart the device on a Fatal Bus Error */

 Clear interrupt signals */

 Read Tx Timestamp to clear interrupt */

 If there is not a separate AN irq, handle it here */

 If there is not a separate ECC irq, handle it here */

 If there is not a separate I2C irq, handle it here */

 Reissue interrupt if status is not clear */

	/* Per channel DMA interrupts are enabled, so we use the per

	 * channel napi structure and not the private data napi structure

 Disable Tx and Rx interrupts */

 Turn on polling */

 Clear Tx/Rx signals */

 Disable Tx and Rx interrupts */

 Turn on polling */

 Hardware feature register 0 */

 Hardware feature register 1 */

 Hardware feature register 2 */

 Translate the Hash Table size into actual number */

 Translate the address width setting into actual number */

	/* The Queue, Channel and TC counts are zero based so increment them

	 * to get the actual number

 Translate the fifo sizes into actual numbers */

 Hardware feature register 0 */

 Hardware feature register 1 */

 Hardware feature register 2 */

 Using an unsigned int, 'i' will go to UINT_MAX and exit */

 Free the ring descriptors and buffers */

 Free the channel and ring structures */

 Calculate the Rx buffer size before allocating rings */

 Allocate the channel and ring structures */

 Allocate the ring descriptors and buffers */

 Initialize the service and Tx timers */

 Set the number of queues */

 Set RSS lookup table data for programming */

 If not running, "restart" will happen on open */

 If not running, "restart" will happen on open */

 PTP v2, UDP, any kind of event packet */

 to PTP v1, UDP, any kind of event packet */

 PTP v2, UDP, Sync packet */

 to PTP v1, UDP, Sync packet */

 PTP v2, UDP, Delay_req packet */

 to PTP v1, UDP, Delay_req packet */

 802.AS1, Ethernet, any kind of event packet */

 802.AS1, Ethernet, Sync packet */

 802.AS1, Ethernet, Delay_req packet */

 PTP v2/802.AS1, any layer, any kind of event packet */

 PTP v2/802.AS1, any layer, Sync packet */

 PTP v2/802.AS1, any layer, Delay_req packet */

 Another timestamp in progress, ignore this one */

	/* Update the number of packets that will ultimately be transmitted

	 * along with the extra bytes for each extra packet

 TSO requires an extra descriptor if mss is different */

 TSO requires an extra descriptor for TSO header */

 VLAN requires an extra descriptor if tag is different */

 We can share with the TSO context descriptor */

 Create the various names based on netdev name */

 Create workqueues */

 Reset the phy settings */

 Enable the clocks */

 Stop the device */

 Disable the clocks */

 Calculate preliminary packet info */

 Check that there are enough descriptors available */

 Report on the actual number of bytes (to be) sent */

 Configure required descriptor fields for transmission */

 Stop the queue in advance if there may not be enough descriptors */

 End CONFIG_NET_POLL_CONTROLLER */

 VXLAN CSUM requires VXLAN base */

 Can't do one without doing the other */

 Reset rdata values */

 Make sure everything is written before the register write */

	/* Update the Rx Tail Pointer Register with address of

	/* Pull in the header buffer which may contain just the header

	 * or the header plus data

 Always zero if not the first descriptor */

 First descriptor with split header, return header length */

	/* First descriptor but not the last descriptor and no split header,

	 * so the full buffer was used

	/* First descriptor and last descriptor and no split header, so

	 * calculate how much of the buffer was used

 Always the full buffer if not the last descriptor */

	/* Last descriptor so calculate how much of the buffer was used

	 * for the last bit of data

 Nothing to do if there isn't a Tx ring for this channel */

 Be sure we get ring->cur before accessing descriptor data */

		/* Make sure descriptor fields are read after reading the OWN

 Free the SKB and reset the descriptor for re-use */

 Nothing to do if there isn't a Rx ring for this channel */

 First time in loop see if we need to restore state */

 Earlier error, just drain the remaining data */

 Get the data length in the descriptor buffers */

 Be sure we don't exceed the configured MTU */

 Check if we need to save state before leaving */

 Cleanup Tx ring first */

 Process Rx ring next */

 If we processed everything, we are done */

 Enable Tx and Rx interrupts */

 Cleanup Tx ring first */

 Process Rx ring next */

 If we processed everything, we are done */

 Enable Tx and Rx interrupts */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2014 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2014 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

	/* Calculate the addend:

	 *   addend = 2^32 / (PTP ref clock / 50Mhz)

	 *          = (2^32 * 50Mhz) / PTP ref clock

 Setup the timecounter */

 Disable all timestamping to start */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2016 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2016 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 Must be enabled to recognize the abort request */

 Issue the abort */

 Disable failed, try an abort */

 Abort succeeded, try to disable again */

 Configured to never receive Rx overflows, so fill up Tx fifo */

 No more Tx operations, so ignore TX_EMPTY and return */

 Anything to be read? */

 Check for data in the Rx fifo */

 Fill up the Tx fifo next */

 Complete on an error or STOP condition */

 Reissue interrupt if status is not clear */

	/* Enabling the interrupts will cause the TX FIFO empty interrupt to

	 * fire and begin to process the command via the ISR.

 If we have a separate I2C irq, enable it */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2014 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2014 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 Set defaults */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 Set MAC to 10G speed */

 Call PHY implementation support to complete rate change */

 Set MAC to 2.5G speed */

 Call PHY implementation support to complete rate change */

 Set MAC to 1G speed */

 Call PHY implementation support to complete rate change */

 If a KR re-driver is present, change to KR mode instead */

 Set MAC to 10G speed */

 Call PHY implementation support to complete rate change */

 Set MAC to 1G speed */

 Call PHY implementation support to complete rate change */

 Set MAC to 1G speed */

 Call PHY implementation support to complete rate change */

 Set MAC to 1G speed */

 Call PHY implementation support to complete rate change */

 Disable KR training for now */

 Update AN settings */

 If we're not in KR mode then we're done */

 Enable/Disable FEC */

 Start KR training */

 Read Base Ability register 2 first */

 Check for a supported mode, otherwise restart in a different one */

 Check Extended Next Page support */

 Check Extended Next Page support */

 Auto-negotiation timed out, reset state */

 Be sure we aren't looping trying to negotiate */

 Disable AN interrupts */

 Save the interrupt(s) that fired */

 Clear the interrupt(s) that fired and process them */

 Enable AN interrupts */

 Reissue interrupt if status is not clear */

 Disable AN interrupts */

 Save the interrupt(s) that fired */

 Clear the interrupt(s) that fired and process them */

 Enable AN interrupts */

 Reissue interrupt if status is not clear */

	/* Avoid a race between enabling the IRQ and exiting the work by

	 * waiting for the work to finish and then queueing it

 If SGMII is enabled, check the link status */

 Reissue interrupt if status is not clear */

 Set up Advertisement register */

 Full duplex, but not half */

 Set up the Control register */

 Set up Advertisement register 3 first */

 Set up Advertisement register 2 next */

 Set up Advertisement register 1 last */

 We don't intend to perform XNP */

 Set up advertisement registers based on current settings */

 Flow control support */

 Speed support */

 Disable auto-negotiation */

 Set specified mode for specified speed */

 Validate duplex mode */

 Disable auto-negotiation interrupt */

 Start auto-negotiation in a supported mode */

 Disable and stop any in progress auto-negotiation */

 Clear any auto-negotitation interrupts */

 Re-enable auto-negotiation interrupt */

 Indicate the PHY is down */

 Disable auto-negotiation */

 If we have a separate AN irq, enable it */

	/* Set initial mode - call the mode setting routines

	 * directly to insure we are properly configured

 Indicate the PHY is up and running */

 Disable auto-negotiation for now */

 Clear auto-negotiation interrupts */

 Check for FEC support */

 Setup the phy (including supported features) */

 Copy supported link modes to advertising link modes */

 Fix up Flow Control advertising */

 Equivalent to XOR of Asym_Pause */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 Set number of supported traffic classes */

 Check maximum traffic class requested */

 Weights must add up to 100% */

 Set number of supported PFC traffic classes */

 Check PFC for supported number of traffic classes */

 IEEE 802.1Qaz std */

 DCBX configuration */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 Obtain the system clock setting */

 Obtain the PTP clock setting */

 CONFIG_ACPI */

 CONFIG_ACPI */

 Obtain the system clock setting */

 Obtain the PTP clock setting */

		/* Old style device tree:

		 *   The XGBE and PHY resources are separate

		/* New style device tree:

		 *   The XGBE and PHY resources are grouped together with

		 *   the PHY resources listed last

 CONFIG_OF */

 CONFIG_OF */

 Check if we should use ACPI or DT */

 Get the version data */

		/* New style device tree or ACPI:

		 *   The XGBE and PHY resources are grouped together with

		 *   the PHY resources listed last

		/* Old style device tree:

		 *   The XGBE and PHY resources are separate

 Obtain the mmio areas for the device */

 Retrieve the MAC address */

 Retrieve the PHY mode - it must be "xgmii" */

 Check for per channel interrupt support */

 Obtain device settings unique to ACPI/OF */

 Set the DMA coherency values */

 Set the maximum fifo amounts */

 Set the hardware channel and queue counts */

 Always have XGMAC and XPCS (auto-negotiation) interrupts */

 Get the device interrupt */

 Get the per channel DMA interrupts */

 Get the auto-negotiation interrupt */

 Configure the netdev resource */

		/* Schedule a restart in case the link or phy state changed

		 * while we were powered down.

 CONFIG_PM_SLEEP */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2016 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2016 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 I2C target addresses */

 SFP sideband signal indicators */

 Rate-change complete wait/retry count */

 CDR delay values for KR support (in usec) */

 RRC frequency during link status check */

 SFP/SFP+ related definitions */

 SFP Serial ID Base ID values relative to an offset of 0 */

 SFP Serial ID Extended ID values relative to an offset of 64 */

 MDIO PHY reset types */

 Re-driver related definitions */

 PHY related configuration information */

 SFP Support */

 External PHY support */

 Re-driver support */

 KR AN support */

 I2C, MDIO and GPIO lines are muxed, so only one device at a time */

 High byte of register contains read/write indicator */

 Calculate 1 byte checksum */

 Write the specfied register */

 Set the specified register to read */

 Read the specfied register */

 Select no mux channels */

 Select desired mux channel */

	/* The I2C and MDIO/GPIO bus is multiplexed between multiple devices,

	 * the driver needs to take the software mutex and then the hardware

	 * mutexes before being able to use the busses.

 Clear the mutexes */

 Mutex formats are the same for I2C and MDIO/GPIO */

 Must be all zeroes in order to obtain the mutex */

 Obtain the mutex */

 Enable Base-T AN */

 Enable SGMII at 100Base-T/1000Base-T Full Duplex */

 For Bel-Fuse, use the extra AN flag */

 Reset PHY - wait for self-clearing reset bit to clear */

 Disable RGMII mode */

 Enable fiber register bank */

 Power down SerDes */

 Configure SGMII-to-Copper mode */

 Power up SerDes */

 Enable copper register bank */

 Power up SerDes */

 If we already have a PHY, just return */

 Clear the extra AN flag */

 Check for the use of an external PHY */

 For SFP, only use an external PHY if available */

 Set the proper MDIO mode for the PHY */

 Create and connect to the PHY device */

TODO: If c45, add request_module based on one of the MMD ids? */

 Check access to the PHY by reading CTRL1 */

 Successfully accessed the PHY */

 Update transceiver signals (eeprom extd/options) */

 Assume ACTIVE cable unless told it is PASSIVE */

 Determine the type of SFP */

 Read the SFP serial ID eeprom */

 Validate the contents read */

 Check for an added or changed SFP */

 Read the input port registers */

 Reset the SFP signals and info */

 Read the SFP signals and check for module presence */

 Treat any error as if there isn't an SFP plugged in */

 Read the SFP serial ID eeprom */

 Read the SFP diagnostic eeprom */

 Use external PHY to determine flow control */

 Half-duplex not supported */

 Half-duplex not supported */

 Compare Advertisement and Link Partner register */

 Set flow control based on auto-negotiation result */

 Half duplex is not supported */

 Use external PHY to determine flow control */

 Compare Advertisement and Link Partner register 2 */

 Compare Advertisement and Link Partner register 3 */

 Compare Advertisement and Link Partner register 1 */

 Set flow control based on auto-negotiation result */

 Compare Advertisement and Link Partner register 2 */

 Compare Advertisement and Link Partner register 3 */

 Without a re-driver, just return current advertising */

 With the KR re-driver we need to advertise a single speed */

 Advertise FEC support is present */

 A KR re-driver will always require CL73 AN */

 Calculate the register to write */

		/* Mailbox command timed out, reset of RX block is required.

		 * This can be done by asseting the reset bit and wait for

		 * its compeletion.

 Wait for command to complete */

 Disable PLL re-initialization during FW command processing */

 Log if a previous command did not complete */

 Construct the command */

 Issue the command */

 Wait for command to complete */

 Reset on error */

 Enable PLL re-initialization */

 Receiver Reset Cycle */

 Power off */

 10G/SFI */

 1G/X */

 1G/SGMII */

 100M/SGMII */

 10G/KR */

 2.5G/KX */

 1G/KX */

 No switching if not 10GBase-T */

 If we are in KR switch to KX, and vice-versa */

 No switching, so just return current mode */

 Check SFP signals */

 Check external PHY */

	/* Link status is latched low, so read once to clear

	 * and then read again to get current state

 No link, attempt a receiver reset cycle */

 Read the output port registers */

 Prepare to write the GPIO data */

 Set the GPIO pin */

 Write the output port registers */

 Clear the GPIO pin */

 Write the output port registers */

 If we have an external PHY, free it */

 Reset SFP data */

 Reset CDR support */

 Power off the PHY */

 Stop the I2C controller */

 Start the I2C controller */

 Set the proper MDIO mode for the re-driver */

 Start in highest supported mode */

 Reset CDR support */

 After starting the I2C controller, we can check for an SFP */

 If we have an external PHY, start it */

 Reset by power cycling the PHY */

 Reset the external PHY */

 Unregister for driving external PHYs */

 Check if enabled */

 Initialize the I2C controller */

 Validate the connection requested */

 Validate the mode requested */

 Check for and validate MDIO reset support */

 Validate the re-driver information */

 Indicate current mode is unknown */

 Initialize supported features */

 Backplane support */

 MDIO 1GBase-T support */

 MDIO Base-X support */

 MDIO NBase-T support */

 10GBase-T support */

 10GBase-R support */

 SFP support */

 Register for driving external PHYs */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 Equivalent to XOR of Asym_Pause */

 Use smallest possible value if conversion resulted in zero */

 Check the bounds of values for Rx */

 Check the bounds of values for Tx */

	/* Calculate maximums allowed:

	 *   - Take into account the number of available IRQs

	 *   - Do not take into account the number of online CPUs so that

	 *     the user can over-subscribe if desired

	 *   - Tx is additionally limited by the number of hardware queues

 Get current settings based on device state */

	/* Calculate maximums allowed:

	 *   - Take into account the number of available IRQs

	 *   - Do not take into account the number of online CPUs so that

	 *     the user can over-subscribe if desired

	 *   - Tx is additionally limited by the number of hardware queues

 Should not be setting other count */

 Require at least one Combined (Rx and Tx) channel */

 Check combined channels */

 Can have some Rx-only or Tx-only channels, but not both */

 Check that we don't exceed the maximum number of channels */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2016 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2016 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 Default SerDes settings */

 Rate-change complete wait/retry count */

 1000/10000 vs 2500/10000 indicator */

	/* SerDes UEFI configurable settings.

	 *   Switching between modes/speeds requires new values for some

	 *   SerDes settings.  The values can be supplied as device

	 *   properties in array format.  The first array entry is for

	 *   1GbE, second for 2.5GbE and third for 10GbE

 Compare Advertisement and Link Partner register 1 */

 Set flow control based on auto-negotiation result */

 Compare Advertisement and Link Partner register 2 */

 Compare Advertisement and Link Partner register 3 */

 Nothing uniquely required for an configuration */

 Assert Rx and Tx ratechange */

 Release Rx and Tx ratechange */

 Wait for Rx and Tx ready */

 Perform Rx reset for the DFE changes */

 Set PCS to KR/10G speed */

 Set SerDes to 10G speed */

 Set PCS to KX/1G speed */

 Set SerDes to 2.5G speed */

 Set PCS to KX/1G speed */

 Set SerDes to 1G speed */

 If we are in KR switch to KX, and vice-versa */

	/* Link status is latched low, so read once to clear

	 * and then read again to get current state

 Nothing uniquely required for stop */

 Nothing uniquely required for start */

 Perform a software reset of the PCS */

 Nothing uniquely required for exit */

 Retrieve the PHY speedset */

 Retrieve the PHY configuration properties */

 Initialize supported features */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

	/*

	 * Convert the input usec value to the watchdog timer value. Each

	 * watchdog timer value is equivalent to 256 clock cycles.

	 * Calculate the required value as:

	 *   ( usec * ( system_clock_mhz / 10^6 ) / 256

	/*

	 * Convert the input watchdog timer value to the usec value. Each

	 * watchdog timer value is equivalent to 256 clock cycles.

	 * Calculate the required value as:

	 *   ( riwt * 256 ) / ( system_clock_mhz / 10^6 )

 Program the hash key */

 Program the lookup table */

 Set the RSS options */

 Enable RSS */

 Does this queue handle the priority? */

 Get the Traffic Class for this priority */

 Check if PFC is enabled for this traffic class */

 Program the VXLAN port */

 Program the VXLAN port */

 Allow for IPv6/UDP zero-checksum VXLAN packets */

 Enable VXLAN tunneling mode */

 Disable tunneling mode */

 Clear IPv6/UDP zero-checksum VXLAN packets setting */

 Clear the VXLAN port */

 Clear MTL flow control */

 Clear MAC flow control */

 Set MTL flow control */

 Flow control thresholds are established */

 Set MAC flow control */

 Enable transmit flow control */

 Set pause time */

 Set the interrupt mode if supported */

 Clear all the interrupts which are set */

 Clear all interrupt enable bits */

		/* Enable following interrupts

		 *   NIE  - Normal Interrupt Summary Enable

		 *   AIE  - Abnormal Interrupt Summary Enable

		 *   FBEE - Fatal Bus Error Enable

			/* Enable the following Tx interrupts

			 *   TIE  - Transmit Interrupt Enable (unless using

			 *          per channel interrupts in edge triggered

			 *          mode)

			/* Enable following Rx interrupts

			 *   RBUE - Receive Buffer Unavailable Enable

			 *   RIE  - Receive Interrupt Enable (unless using

			 *          per channel interrupts in edge triggered

			 *          mode)

 Clear all the interrupts which are set */

 No MTL interrupts to be enabled */

 Enable Timestamp interrupt */

 Enable all counter interrupts */

 Enable MDIO single command completion interrupt */

 Clear all the interrupts which are set */

 Enable ECC interrupts */

 Disable ECC DED interrupts */

 Disable ECC SEC interrupt */

 Put the VLAN tag in the Rx descriptor */

 Don't check the VLAN type */

 Check only C-TAG (0x8100) packets */

 Don't consider an S-TAG (0x88A8) packet as a VLAN packet */

 Enable VLAN tag stripping */

 Enable VLAN filtering */

 Enable VLAN Hash Table filtering */

 Disable VLAN tag inverse matching */

 Only filter on the lower 12-bits of the VLAN tag */

	/* In order for the VLAN Hash Table filtering to be effective,

	 * the VLAN tag identifier in the VLAN Tag Register must not

	 * be zero.  Set the VLAN tag identifier to "1" to enable the

	 * VLAN Hash Table filtering.  This implies that a VLAN tag of

	 * 1 will always pass filtering.

 Disable VLAN filtering */

 Generate the VLAN Hash Table value */

 Get the CRC32 value of the VLAN ID */

 Set the VLAN Hash Table filtering register */

 Hardware will still perform VLAN filtering in promiscuous mode */

 Clear remaining additional MAC address entries */

 Build the MAC Hash Table register values */

 Set the MAC Hash Table registers */

	/* The PCS registers are accessed using mmio. The underlying

	 * management interface uses indirect addressing to access the MMD

	 * register sets. This requires accessing of the PCS register in two

	 * phases, an address phase and a data phase.

	 *

	 * The mmio interface is based on 16-bit offsets and values. All

	 * register offsets must therefore be adjusted by left shifting the

	 * offset 1 bit and reading 16 bits of data.

	/* The PCS registers are accessed using mmio. The underlying

	 * management interface uses indirect addressing to access the MMD

	 * register sets. This requires accessing of the PCS register in two

	 * phases, an address phase and a data phase.

	 *

	 * The mmio interface is based on 16-bit offsets and values. All

	 * register offsets must therefore be adjusted by left shifting the

	 * offset 1 bit and writing 16 bits of data.

	/* The PCS registers are accessed using mmio. The underlying APB3

	 * management interface uses indirect addressing to access the MMD

	 * register sets. This requires accessing of the PCS register in two

	 * phases, an address phase and a data phase.

	 *

	 * The mmio interface is based on 32-bit offsets and values. All

	 * register offsets must therefore be adjusted by left shifting the

	 * offset 2 bits and reading 32 bits of data.

	/* The PCS registers are accessed using mmio. The underlying APB3

	 * management interface uses indirect addressing to access the MMD

	 * register sets. This requires accessing of the PCS register in two

	 * phases, an address phase and a data phase.

	 *

	 * The mmio interface is based on 32-bit offsets and values. All

	 * register offsets must therefore be adjusted by left shifting the

	 * offset 2 bits and writing 32 bits of data.

	/* Reset the Tx descriptor

	 *   Set buffer 1 (lo) address to zero

	 *   Set buffer 1 (hi) address to zero

	 *   Reset all other control bits (IC, TTSE, B2L & B1L)

	 *   Reset all other control bits (OWN, CTXT, FD, LD, CPC, CIC, etc)

 Make sure ownership is written to the descriptor */

 Initialze all descriptors */

 Initialize Tx descriptor */

 Update the total number of Tx descriptors */

 Update the starting address of descriptor ring */

 No coalescing, interrupt for every descriptor */

 Set interrupt based on Rx frame coalescing setting */

	/* Reset the Rx descriptor

	 *   Set buffer 1 (lo) address to header dma address (lo)

	 *   Set buffer 1 (hi) address to header dma address (hi)

	 *   Set buffer 2 (lo) address to buffer dma address (lo)

	 *   Set buffer 2 (hi) address to buffer dma address (hi) and

	 *     set control bits OWN and INTE

	/* Since the Rx DMA engine is likely running, make sure everything

	 * is written to the descriptor(s) before setting the OWN bit

	 * for the descriptor

 Make sure ownership is written to the descriptor */

 Initialize all descriptors */

 Initialize Rx descriptor */

 Update the total number of Rx descriptors */

 Update the starting address of descriptor ring */

 Update the Rx Descriptor Tail Pointer */

 Set the addend register value and tell the device */

 Wait for addend update to complete */

 Set the time values and tell the device */

 Wait for time update to complete */

 Set one nano-second accuracy */

 Set fine timestamp update */

 Overwrite earlier timestamps */

 Exit if timestamping is not enabled */

 Initialize time registers */

 Initialize the timecounter */

 Make sure everything is written before the register write */

	/* Issue a poll command to Tx DMA by writing address

 Start the Tx timer */

	/* Determine if an interrupt should be generated for this Tx:

	 *   Interrupt:

	 *     - Tx frame count exceeds the frame count setting

	 *     - Addition of Tx frame count to the frame count since the

	 *       last interrupt was set exceeds the frame count setting

	 *   No interrupt:

	 *     - No frame count setting specified (ethtool -C ethX tx-frames 0)

	 *     - Addition of Tx frame count to the frame count since the

	 *       last interrupt was set does not exceed the frame count setting

 Create a context descriptor if this is a TSO packet */

 Set the MSS size */

 Mark it as a CONTEXT descriptor */

 Indicate this descriptor contains the MSS */

 Mark it as a CONTEXT descriptor */

 Set the VLAN tag */

 Indicate this descriptor contains the VLAN tag */

 Update buffer address (for TSO this is the header) */

 Update the buffer length */

 VLAN tag insertion check */

 Timestamp enablement check */

 Mark it as First Descriptor */

 Mark it as a NORMAL descriptor */

 Set OWN bit if not the first descriptor */

 Enable TSO */

 Enable CRC and Pad Insertion */

 Enable HW CSUM */

 Set the total length to be transmitted */

 Update buffer address */

 Update the buffer length */

 Set OWN bit */

 Mark it as NORMAL descriptor */

 Enable HW CSUM */

 Set LAST bit for the last descriptor */

 Set IC bit based on Tx coalescing settings */

 Save the Tx info to report back during cleanup */

	/* In case the Tx DMA engine is running, make sure everything

	 * is written to the descriptor(s) before setting the OWN bit

	 * for the first descriptor

 Set OWN bit for the first descriptor */

 Make sure ownership is written to the descriptor */

 Check for data availability */

 Make sure descriptor fields are read after reading the OWN bit */

 Timestamp Context Descriptor */

 Normal Descriptor, be sure Context Descriptor bit is off */

 Indicate if a Context Descriptor is next */

 Get the header length */

 Get the RSS hash */

 Not all the data has been transferred for this packet */

 This is the last of the data for this packet */

 Get the packet length */

 Set checksum done indicator as appropriate */

 Set the tunneled packet indicator */

 Check for errors (only valid in last descriptor) */

 No error if err is 0 or etlt is 0 */

 Rx and Tx share CTXT bit, so check TDES3.CTXT bit */

 Rx and Tx share LD bit, so check TDES3.LD bit */

 Issue a software reset */

 Poll Until Poll Condition */

	/* To guard against possible incorrectly generated interrupts,

	 * issue the software reset twice.

 Poll Until Poll Condition */

 Set enhanced addressing mode */

 Set the System Bus mode */

 Set descriptor fetching threshold */

 Set Tx to weighted round robin scheduling algorithm */

 Set Tx traffic classes to use WRR algorithm with equal weights */

 Set Rx to strict priority algorithm */

 PFC is active for this queue */

		/* This path deals with just maximum frame sizes which are

		 * limited to a jumbo frame of 9,000 (plus headers, etc.)

		 * so we can never exceed the maximum allowable RFA/RFD

		 * values.

 rx_rfd to zero to signal no flow control */

 Between 2048 and 4096 */

 Full - 1024 bytes */

 Full - 1536 bytes */

 Between 4096 and max-frame */

 Full - 2048 bytes */

 Full - 3584 bytes */

			/* Between max-frame and 3 max-frames,

			 * trigger if we get just over a frame of data and

			 * resume when we have just under half a frame left.

			/* Above 3 max-frames - trigger when just over

			 * 2 frames of space available

 The configured value may not be the actual amount of fifo RAM */

 The configured value may not be the actual amount of fifo RAM */

	/* Calculate the fifo setting by dividing the queue's fifo size

	 * by the fifo allocation increment (with 0 representing the

	 * base allocation increment so decrement the result by 1).

 Distribute the fifo equally amongst the queues */

	/* Rx queues 9 and up are for specialized packets,

	 * such as PTP or DCB control packets, etc. and

	 * don't require a large fifo

 If a delay has been provided, use that */

 Allow for two maximum size frames */

 Allow for PFC frame */

 Allow for miscellaneous delays (LPI exit, cable, etc.) */

 No traffic classes with PFC enabled or can't do lossless */

 Calculate how much fifo we have to play with */

	/* Calculate how much more than base fifo PFC needs, which also

	 * becomes the threshold activation point (RFA)

	/* Calculate DCB fifo settings:

	 *   - distribute remaining fifo between the VLAN priority

	 *     queues based on traffic class PFC enablement and overall

	 *     priority (0 is lowest priority, so start at highest)

 Distribute remaining fifo across queues */

 Clear any DCB related fifo/queue information */

 Assign a minimum fifo to the non-VLAN priority queues */

	/* Map the MTL Tx Queues to Traffic Classes

	 *   Note: Tx Queues >= Traffic Classes

 Map the 8 VLAN priority values to available MTL Rx queues */

 Select dynamic mapping of MTL Rx queue to DMA Rx channel */

	/* Set Tx to deficit weighted round robin scheduling algorithm (when

	 * traffic class is using ETS algorithm)

 Set Traffic Class algorithms */

 Map the priorities to the traffic class */

 Set the traffic class algorithm */

 Just stop the Tx queues while Rx fifo is changed */

 Suspend Rx so that fifo's can be adjusted */

 Resume Rx */

 Resume Tx queues */

 Filtering is done using perfect filtering and hash filtering */

 Indicate that VLAN Tx CTAGs come from context descriptors */

 Set the current VLAN Hash Table register value */

 These registers are always 32 bit */

 These registers are always 64 bit */

 Freeze counters */

 Un-freeze counters */

 Set counters to reset on read */

 Reset the counters */

	/* The Tx engine cannot be stopped if it is actively processing

	 * packets. Wait for the Tx queue to empty the Tx fifo.  Don't

	 * wait forever though...

 Calculate the status register to read and the position within */

	/* The Tx engine cannot be stopped if it is actively processing

	 * descriptors. Wait for the Tx engine to enter the stopped or

	 * suspended state.  Don't wait forever though...

 Enable each Tx DMA channel */

 Enable each Tx queue */

 Enable MAC Tx */

 Prepare for Tx DMA channel stop */

 Disable MAC Tx */

 Disable each Tx queue */

 Disable each Tx DMA channel */

	/* The Rx engine cannot be stopped if it is actively processing

	 * packets. Wait for the Rx queue to empty the Rx fifo.  Don't

	 * wait forever though...

 Enable each Rx DMA channel */

 Enable each Rx queue */

 Enable MAC Rx */

 Disable MAC Rx */

 Prepare for Rx DMA channel stop */

 Disable each Rx queue */

 Disable each Rx DMA channel */

 Enable each Tx DMA channel */

 Enable MAC Tx */

 Prepare for Tx DMA channel stop */

 Disable MAC Tx */

 Disable each Tx DMA channel */

 Enable each Rx DMA channel */

 Disable each Rx DMA channel */

 Flush Tx queues */

	/*

	 * Initialize DMA related features

	/*

	 * Initialize MTL related features

	/*TODO: Error Packet and undersized good Packet forwarding enable

		(FEP and FUP)

	/*

	 * Initialize MAC related features

	/*

	 * Initialize ECC related features

 Descriptor related Sequences have to be initialized here */

 For FLOW ctrl */

 For RX coalescing */

 For RX and TX threshold config */

 For RX and TX Store and Forward Mode config */

 For TX DMA Operating on Second Frame config */

 For MMC statistics support */

 For PTP config */

 For Data Center Bridging config */

 For Receive Side Scaling */

 For ECC */

 For VXLAN */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2014-2016 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 Set all the function pointers */

 Populate the hardware features */

 Set default max values if not provided */

	/* Calculate the number of Tx and Rx rings to be created

	 *  -Tx (DMA) Channels map 1-to-1 to Tx Queues so set

	 *   the number of Tx queues to the number of Tx channels

	 *   enabled

	 *  -Rx (DMA) Channels do not map 1-to-1 so use the actual

	 *   number of Rx queues or maximum allowed

 Initialize ECC timestamps */

 Issue software reset to device */

 Set default configuration data */

 Set the DMA mask */

 Set default max values if not provided */

 Set and validate the number of descriptors for a ring */

 Adjust the number of queues based on interrupts assigned */

 Initialize RSS hash key */

 Call MDIO/PHY initialization routine */

 Set device operations */

 Set device features */

 Use default watchdog timeout */

/*

 * AMD 10Gb Ethernet driver

 *

 * This file is available to you under your choice of the following two

 * licenses:

 *

 * License 1: GPLv2

 *

 * Copyright (c) 2016 Advanced Micro Devices, Inc.

 *

 * This file is free software; you may copy, redistribute and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation, either version 2 of the License, or (at

 * your option) any later version.

 *

 * This file is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 *

 *

 * License 2: Modified BSD

 *

 * Copyright (c) 2016 Advanced Micro Devices, Inc.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *     * Redistributions of source code must retain the above copyright

 *       notice, this list of conditions and the following disclaimer.

 *     * Redistributions in binary form must reproduce the above copyright

 *       notice, this list of conditions and the following disclaimer in the

 *       documentation and/or other materials provided with the distribution.

 *     * Neither the name of Advanced Micro Devices, Inc. nor the

 *       names of its contributors may be used to endorse or promote products

 *       derived from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY

 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND

 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *     The Synopsys DWC ETHER XGMAC Software Driver and documentation

 *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,

 *     Inc. unless otherwise expressly agreed to in writing between Synopsys

 *     and you.

 *

 *     The Software IS NOT an item of Licensed Software or Licensed Product

 *     under any End User Software License Agreement or Agreement for Licensed

 *     Product with Synopsys or any supplement thereto.  Permission is hereby

 *     granted, free of charge, to any person obtaining a copy of this software

 *     annotated with this license and the Software, to deal in the Software

 *     without restriction, including without limitation the rights to use,

 *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies

 *     of the Software, and to permit persons to whom the Software is furnished

 *     to do so, subject to the following conditions:

 *

 *     The above copyright notice and this permission notice shall be included

 *     in all copies or substantial portions of the Software.

 *

 *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"

 *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED

 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A

 *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS

 *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 *     THE POSSIBILITY OF SUCH DAMAGE.

 Get the version data */

 Obtain the mmio areas for the device */

 Set the PCS indirect addressing definition registers */

 Configure the PCS indirect addressing support */

 Enable all interrupts in the hardware */

 Retrieve the MAC address */

 Clock settings */

 Set the DMA coherency values */

 Read the port property registers */

 Set the maximum channels and queues */

 Set the hardware channel and queue counts */

 Set the maximum fifo amounts */

 Configure interrupt support */

 Configure the netdev resource */

		/* Schedule a restart in case the link or phy state changed

		 * while we were powered down.

 Last entry must be zero */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/acorn/net/ether3.c

 *

 *  Copyright (C) 1995-2000 Russell King

 *

 * SEEQ nq8005 ethernet driver for Acorn/ANT Ether3 card

 *  for Acorn machines

 *

 * By Russell King, with some suggestions from borris@ant.co.uk

 *

 * Changelog:

 * 1.04	RMK	29/02/1996	Won't pass packets that are from our ethernet

 *				address up to the higher levels - they're

 *				silently ignored.  I/F can now be put into

 *				multicast mode.  Receiver routine optimised.

 * 1.05	RMK	30/02/1996	Now claims interrupt at open when part of

 *				the kernel rather than when a module.

 * 1.06	RMK	02/03/1996	Various code cleanups

 * 1.07	RMK	13/10/1996	Optimised interrupt routine and transmit

 *				routines.

 * 1.08	RMK	14/10/1996	Fixed problem with too many packets,

 *				prevented the kernel message about dropped

 *				packets appearing too many times a second.

 *				Now does not disable all IRQs, only the IRQ

 *				used by this card.

 * 1.09	RMK	10/11/1996	Only enables TX irq when buffer space is low,

 *				but we still service the TX queue if we get a

 *				RX interrupt.

 * 1.10	RMK	15/07/1997	Fixed autoprobing of NQ8004.

 * 1.11	RMK	16/11/1997	Fixed autoprobing of NQ8005A.

 * 1.12	RMK	31/12/1997	Removed reference to dev_tint for Linux 2.1.

 *      RMK	27/06/1998	Changed asm/delay.h to linux/delay.h.

 * 1.13	RMK	29/06/1998	Fixed problem with transmission of packets.

 *				Chip seems to have a bug in, whereby if the

 *				packet starts two bytes from the end of the

 *				buffer, it corrupts the receiver chain, and

 *				never updates the transmit status correctly.

 * 1.14	RMK	07/01/1998	Added initial code for ETHERB addressing.

 * 1.15	RMK	30/04/1999	More fixes to the transmit routine for buggy

 *				hardware.

 * 1.16	RMK	10/02/2000	Updated for 2.3.43

 * 1.17	RMK	13/05/2000	Updated for 2.3.99-pre8

 --------------------------------------------------------------------------- */

/*

 * ether3 read/write.  Slow things down a bit...

 * The SEEQ8005 doesn't like us writing to its registers

 * too quickly.

/*

 * write data to the buffer memory

/*

 * read data from the buffer memory

/*

 * Switch LED off...

/*

 * switch LED on...

 leave on for 1/50th second */

/*

 * Read the ethernet address string from the on board rom.

 * This is an ascii string!!!

	/* I wonder if we should even let the user continue in this case

	 *   - no, it would be better to disable the device

 --------------------------------------------------------------------------- */

 ------------------------------------------------------------------------------- */

	/*

	 * Set up our hardware address

	/*

	 * There is a problem with the NQ8005 in that it occasionally loses the

	 * last two bytes.  To get round this problem, we receive the CRC as

	 * well.  That way, if we do lose the last two, then it doesn't matter.

 Reset the chip */

/*

 * Open/initialize the board.  This is called (in the current kernel)

 * sometime after booting when the 'ifconfig' program is run.

 *

 * This routine should set everything up anew at each open, even

 * registers that "should" only need to be set once at boot, so that

 * there is non-reboot way to recover if something goes wrong.

/*

 * The inverse routine to ether3_open().

/*

 * Set or clear promiscuous/multicast mode filter for this adaptor.

 *

 * We don't attempt any packet filtering.  The card may have a SEEQ 8004

 * in which does not have the other ethernet address registers present...

 promiscuous mode */

/*

 * Transmit a packet

 unable to queue */

/*

 * If we have a good packet(s), get it/them out of the buffers.

		/*

		 * read the first 16 bytes from the buffer.

		 * This contains the status bytes etc and ethernet addresses,

		 * and we also check the source ethernet address to see if

		 * it originated from us.

		/*

		 * ignore our own packets...

 compensate for loopedback packet */

	/*

	 * If rx went off line, then that means that the buffer may be full.  We

	 * have dropped at least one packet.

/*

 * Update stats for the transmitted packet(s)

		/*

	    	 * Read the packet header

		/*

		 * Check to see if this packet has been transmitted

		/*

		 * Update errors

	/* Reset card...

	/* Test using Receive Pointer (16-bit register) to find out

	 * how the ether3 is connected to the bus...

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sgiseeq.c: Seeq8003 ethernet driver for SGI machines.

 *

 * Copyright (C) 1996 David S. Miller (davem@davemloft.net)

/*

 * If you want speed, you do something silly, it always has worked for me.  So,

 * with that in mind, I've decided to make this driver look completely like a

 * stupid Lance from a driver architecture perspective.  Only difference is that

 * here our "ring buffer" looks and acts like a real Lance one does but is

 * laid out like how the HPC DMA and the Seeq want it to.  You'd be surprised

 * how a stupid idea like this can pay off in performance, not to mention

 * making this driver 2,000 times easier to write. ;-)

 Tune these if we tend to run out often etc. */

/* Copy frames shorter than rx_copybreak, otherwise pass on up in

 * a full sized sk_buff.  Value of 100 stolen from tulip.c (!alpha).

/*

 * Warning: This structure is laid out in a certain way because HPC dma

 *          descriptors must be 8-byte aligned.  So don't touch this without

 *          some care.

 Note the name ;-) */

 Ptrs to the descriptors in uncached space. */

 Ring entry counters. */

 Setup tx ring. */

 And now the rx ring. */

 clear tx ring. */

 And now the rx ring. */

 Setup to field the proper interrupt types. */

 Service every received packet. */

 Packet is OK. */

 We don't want to receive our own packets */

 Silently drop my own packets */

 Return the entry to the ring pool. */

	/* If the HPC aint doin nothin, and there are more packets

	 * with ETXD cleared and XIU set we must make very certain

	 * that we restart the HPC else we risk locking up the

	 * adapter.  The following code is only safe iff the HPCDMA

	 * is not active!

 Oops, HPC detected some sort of error. */

 Ack 'em... */

 Ack the IRQ and set software state. */

 Always check for received packets. */

 Only check for tx acks if we have something queued. */

 Shutdown the Seeq. */

 prevent tx timeout */

 Setup... */

	/* Create entry.  There are so many races with adding a new

	 * descriptor to the chain:

	 * 1) Assume that the HPC is off processing a DMA chain while

	 *    we are changing all of the following.

	 * 2) Do no allow the HPC to look at a new descriptor until

	 *    we have completely set up it's state.  This means, do

	 *    not clear HPCDMA_EOX in the current last descritptor

	 *    until the one we are adding looks consistent and could

	 *    be processes right now.

	 * 3) The tx interrupt code must notice when we've added a new

	 *    entry and the HPC got to the end of the chain before we

	 *    added this new entry and restarted it.

 Advance. */

 Maybe kick the HPC back into motion. */

 prevent tx timeout */

	/* XXX I know this sucks, but is there a better way to reprogram

	 * XXX the receiver? At least, this shouldn't happen too often.

 Make private data page aligned */

 A couple calculations now, saves many cycles later. */

 Setup PIO and DMA transfer timing */

 Setup PIO and DMA transfer timing */

 Reset the chip. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2010-2011 Calxeda, Inc.

 XGMAC Register definitions */

 MAC Configuration */

 MAC Frame Filter */

 MAC Flow Control */

 VLAN Tags */

 Version */

 VLAN tag for tx frames */

 LPI Control and Status */

 LPI Timers Control */

 Transmit Pace and Stretch */

 VLAN Hash Table */

 Debug */

 Interrupt and Control */

 HASH table regs */

 Remote Wake-Up Frm Filter */

 PMT Control and Status */

 XGMAC MMC Control */

 Receive Interrupt */

 Transmit Interrupt */

 Receive Interrupt Mask */

 Transmit Interrupt Mask */

 Hardware TX Statistics Counters */

 Hardware RX Statistics Counters */

 DMA Control and Status Registers */

 Bus Mode */

 Transmit Poll Demand */

 Received Poll Demand */

 Receive List Base */

 Transmit List Base */

 Status Register */

 Ctrl (Operational Mode) */

 Interrupt Enable */

 Missed Frame Counter */

 RX Intr Watchdog Timer */

 AXI Bus Mode */

 AXI Status */

 Enabled Hardware Features */

 PMT Control and Status */

 Speed control */

 Source Addr Insert/Replace */

 CRC Addition/Replacement */

 Disable Padding */

 Disable Watchdog on rx */

 Jabber disable */

 Jumbo frame */

 Loop-back mode */

 Checksum Offload */

 Automatic Pad/FCS Strip */

 Disable Deficit Idle Count */

 Transmitter Enable */

 Receiver Enable */

 XGMAC Frame Filter defines */

 Promiscuous Mode */

 Hash Unicast */

 Hash Multicast */

 DA Inverse Filtering */

 Pass all multicast */

 Disable Broadcast frames */

 Inverse Filtering */

 Source Address Filter */

 Hash or perfect Filter */

 VLAN Hash Filter */

 VLAN Perfect Filter */

 Receive all mode */

 XGMAC FLOW CTRL defines */

 Pause Time Mask */

 Disable Zero-Quanta Phase */

 Pause Low Threshold */

 PLT MASK */

 Unicast Pause Frame Detect */

 Rx Flow Control Enable */

 Tx Flow Control Enable */

 Flow Control Busy ... */

 XGMAC_INT_STAT reg */

 PMT Interrupt Mask */

 PMT Interrupt Status */

 LPI Interrupt Status */

 DMA Bus Mode register defines */

 Software Reset */

 Descriptor Skip Length */

 (in DWORDS) */

 Alternate Descriptor Size */

 Programmable burst length */

 Programmable Burst Len */

 Fixed burst */

 Rx-Programmable Burst Len */

 DMA Bus Mode register defines */

 Rx/Tx priority ratio */

 Fixed Burst */

 DMA Control register defines */

 Start/Stop Transmission */

 Start/Stop Receive */

 Disable flush of rx frames */

 Operate on 2nd tx frame */

 DMA Normal interrupt */

 Normal Summary */

 Abnormal Summary */

 Early Receive */

 Fatal Bus Error */

 Early Transmit */

 Receive Watchdog */

 Receive Stopped */

 Receive Buffer Unavailable */

 Receive Interrupt */

 Tx Underflow */

 Receive Overflow */

 Transmit Jabber */

 Transmit Buffer Unavail */

 Transmit Stopped */

 Transmit Interrupt */

 DMA default interrupt mask */

 DMA Status register defines */

 MMC interrupt */

 GMAC Line interface int */

 Error Bits Mask */

 Error Bits - TX Abort */

 Error Bits - RX Abort */

 Transmit Process State */

 Receive Process State */

 Normal Interrupt Summary */

 Abnormal Interrupt Summary */

 Early Receive Interrupt */

 Fatal Bus Error Interrupt */

 Early Transmit Interrupt */

 Receive Watchdog Timeout */

 Receive Process Stopped */

 Receive Buffer Unavailable */

 Receive Interrupt */

 Transmit Underflow */

 Receive Overflow */

 Transmit Jabber Timeout */

 Transmit Buffer Unavail */

 Transmit Process Stopped */

 Transmit Interrupt */

 Common MAC defines */

 Transmitter Enable */

 Receiver Enable */

 XGMAC Operation Mode Register */

 TX FIFO Store and Forward */

 Flush Transmit FIFO */

 Transmit Threshold Ctrl */

 FC Deactivation Threshold */

 FC Deact Threshold MASK */

 FC Activation Threshold */

 FC Act Threshold MASK */

 Enable Hardware FC */

 Forward Error Frames */

 Drop TCP/IP csum Errors */

 RX FIFO Store and Forward */

 RX Threshold Ctrl */

 RX Threshold Ctrl MASK */

 XGMAC HW Features Register */

 TX Checksum offload */

 XGMAC Descriptor Defines */

 Buffer 1 Address Pointer */

 Buffer 2 Address Pointer */

 Transmit errors */

 Receive errors */

 Tx/Rx IRQ errors */

 XGMAC Configuration Settings */

 minimum number of free TX descriptors required to wake up TX process */

 DMA descriptor ring helpers */

 XGMAC Descriptor Access Helpers */

 Clear all fields and set the owner */

 All frames should fit into a single buffer */

 Check if packet has checksum already */

 Handle any errors */

 Read the MAC address from the hardware */

 Extract the MAC address from the high and low words */

/**

 * xgmac_dma_desc_rings_init - init the RX/TX descriptor rings

 * @dev: net device structure

 * Description:  this function initializes the DMA RX/TX descriptors

 * and allocates the socket buffers.

	/* Set the Buffer size according to the MTU;

	 * The total buffer size including any IP offset must be a multiple

	 * of 8 bytes.

 Release the DMA TX/RX socket buffers */

 Free the consistent memory allocated for descriptor rings */

/**

 * xgmac_tx_complete:

 * @priv: private driver structure

 * Description: it reclaims resources after transmission completes.

 Check if the descriptor is owned by the DMA. */

 Check tx error on the last segment */

 Ensure tx_tail is visible to xgmac_xmit */

 Enable interrupts */

 Save the ctrl register value */

 SW reset */

 Mask power mgt interrupt */

 XGMAC requires AXI bus init. This is a 'magic number' for now */

 Set the HW DMA mode and the COE */

 Reset the MMC counters */

/**

 *  xgmac_open - open entry point of the driver

 *  @dev : pointer to the device structure.

 *  Description:

 *  This function is the open entry point of the driver.

 *  Return value:

 *  0 on success and an appropriate (-)ve integer as defined in errno.h

 *  file on failure.

	/* Check that the MAC address is valid.  If its not, refuse

	 * to bring the device up. The user must specify an

	 * address using the following linux command:

 Initialize the XGMAC and descriptors */

 Enable the MAC Rx/Tx */

 Enable interrupts */

/**

 *  xgmac_stop - close entry point of the driver

 *  @dev : device pointer.

 *  Description:

 *  This is the stop entry point of the driver.

 Disable the MAC core */

 Release and free the Rx/Tx resources */

/**

 *  xgmac_xmit:

 *  @skb : the socket buffer

 *  @dev : device pointer

 *  Description : Tx entry point of the driver.

 Interrupt on completition only for the latest segment */

 Set owner on first desc last to avoid race condition */

 Ensure tx_head update is visible to tx completion */

 Ensure netif_stop_queue is visible to tx completion */

 read the status of the incoming frame */

/**

 *  xgmac_poll - xgmac poll method (NAPI)

 *  @napi : pointer to the napi structure.

 *  @budget : maximum number of packets that the current CPU can receive from

 *	      all interfaces.

 *  Description :

 *   This function implements the the reception process.

 *   Also it runs the TX completion thread

/**

 *  xgmac_tx_timeout

 *  @dev : Pointer to net device structure

 *  @txqueue: index of the hung transmit queue

 *

 *  Description: this function is called when a packet transmission fails to

 *   complete within a reasonable tmrate. The driver will mark the error in the

 *   netdev structure and arrange for the device to be reset to a sane state

 *   in order to transmit a new packet.

/**

 *  xgmac_set_rx_mode - entry point for multicast addressing

 *  @dev : pointer to the device structure

 *  Description:

 *  This function is a driver entry point which gets called by the kernel

 *  whenever multicast addresses must be enabled/disabled.

 *  Return value:

 *  void.

			/* The most significant 4 bits determine the register to

			 * use (H/L) while the other 5 bits determine the bit

			/* The most significant 4 bits determine the register to

			 * use (H/L) while the other 5 bits determine the bit

/**

 *  xgmac_change_mtu - entry point to change MTU size for the device.

 *  @dev : device pointer.

 *  @new_mtu : the new MTU size for the device.

 *  Description: the Maximum Transfer Unit (MTU) is used by the network layer

 *  to drive packet transmission. Ethernet has an MTU of 1500 octets

 *  (ETH_DATA_LEN). This value can be changed with ifconfig.

 *  Return value:

 *  0 on success and an appropriate (-)ve integer as defined in errno.h

 *  file on failure.

 Stop everything, get ready to change the MTU */

 Bring interface down, change mtu and bring interface back up */

 clear the PMT bits 5 and 6 by reading the PMT */

 read the status register (CSR5) */

 It displays the DMA process states (CSR5 register) */

 ABNORMAL interrupts */

 TX/RX NORMAL interrupts */

/* Polling receive - used by NETCONSOLE and other diagnostic tools

/**

 * xgmac_probe

 * @pdev: platform device pointer

 * Description: the driver is initialized through platform_device.

 Figure out how many valid mac address filter registers we have */

 Magic Frame as default */

 MTU range: 46 - 9000 */

 Get the MAC address */

/**

 * xgmac_remove

 * @pdev: platform device pointer

 * Description: this function resets the TX/RX processes, disables the MAC RX/TX

 * changes the link status, releases the DMA descriptor rings,

 * unregisters the MDIO bus and unmaps the allocated memory.

 Free the IRQ lines */

 Stop TX/RX DMA Only */

 Enable the MAC and DMA */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0

/*  Atheros AR71xx built-in ethernet mac driver

 *

 *  Copyright (C) 2019 Oleksij Rempel <o.rempel@pengutronix.de>

 *

 *  List of authors contributed to this driver before mainlining:

 *  Alexander Couzens <lynxis@fe80.eu>

 *  Christian Lamparter <chunkeey@gmail.com>

 *  Chuanhong Guo <gch981213@gmail.com>

 *  Daniel F. Dickinson <cshored@thecshore.com>

 *  David Bauer <mail@david-bauer.net>

 *  Felix Fietkau <nbd@nbd.name>

 *  Gabor Juhos <juhosg@freemail.hu>

 *  Hauke Mehrtens <hauke@hauke-m.de>

 *  Johann Neuhauser <johann@it-neuhauser.de>

 *  John Crispin <john@phrozen.org>

 *  Jo-Philipp Wich <jo@mein.io>

 *  Koen Vandeputte <koen.vandeputte@ncentric.com>

 *  Lucian Cristian <lucian.cristian@gmail.com>

 *  Matt Merhar <mattmerhar@protonmail.com>

 *  Milan Krstic <milan.krstic@gmail.com>

 *  Petr Štetiar <ynezz@true.cz>

 *  Rosen Penev <rosenp@gmail.com>

 *  Stephen Walker <stephendwalker+github@gmail.com>

 *  Vittorio Gambaletta <openwrt@vittgam.net>

 *  Weijie Gao <hackpascal@gmail.com>

 *  Imre Kaloz <kaloz@openwrt.org>

/* For our NAPI weight bigger does *NOT* mean better - it means more

 * D-cache misses and lots more wasted cycles than we'll ever

 * possibly gain from saving instructions.

 Register offsets */

 Tx Enable */

 Synchronize Tx Enable */

 Rx Enable */

 Synchronize Rx Enable */

 Tx Flow Control Enable */

 Rx Flow Control Enable */

 Soft Reset */

 Watermark Module */

 Rx System Module */

 Rx Fabric Module */

 Tx System Module */

 Tx Fabric Module */

 Drop Event */

 RX_DV Event */

 False Carrier */

 Code Error */

 CRC error */

 Length Mismatch */

 Length out of range */

 Packet is OK */

 Multicast Packet */

 Broadcast Packet */

 Dribble */

 Long Event */

 Control Frame */

 Pause Frame */

 Unsupported Opcode */

 VLAN tag detected */

 Frame Truncated */

 Unicast Packet */

 Drop Event */

 RX_DV Event */

 False Carrier */

 Code Error */

 Length Mismatch */

 Length Out of Range */

 Packet is OK */

 Multicast Packet */

 Broadcast Packet */

 Dribble */

 Control Frame */

 Pause Frame */

 Unsupported Opcode */

 VLAN tag detected */

 Long Event */

 Frame Truncated */

 unknown */

 unknown */

 Short Frame */

 Byte Mode */

 Tx Enable */

 Packet Sent */

 Tx Underrun */

 Bus Error */

 Rx Enable */

 Packet Received */

 Rx Overflow */

 Bus Error */

 "Hot" fields in the data path. */

 "Cold" fields - not used in the data path. */

	/* Critical data related to the per-packet data path are clustered

	 * early in this structure to help improve the D-cache footprint.

 From this point onwards we're not looking at per-packet fields. */

 flush write */

 flush write */

 flush write */

 enable read mode */

 disable read mode */

 disable all interrupts and stop the rx/tx engine */

 stop RX and TX */

	/* give the hardware some time to really stop all rx/tx activity

	 * clearing the descriptors too early causes random memory corruption

 clear descriptor addresses */

 clear pending RX/TX interrupts */

 clear pending errors */

 mask out reserved bits */

 setup MAC configuration registers */

 setup max frame length to zero */

 setup FIFO configuration registers */

 setup max frame length */

 start RX engine */

 enable interrupts */

 Not Supported */

 flush descriptors */

 flush descriptors */

 flush descriptors */

 flush descriptors */

 setup max frame length */

			/*  TX will hang if DMA transfers <= 4 bytes,

			 * make sure next segment is more than 4 bytes long.

 prevent early tx attempt of this descriptor */

 setup descriptor fields */

 flush descriptor */

 enable TX engine */

 restart RX */

 enable interrupts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright(c) 2005 - 2006 Attansic Corporation. All rights reserved.

 * Copyright(c) 2006 - 2007 Chris Snook <csnook@redhat.com>

 * Copyright(c) 2006 - 2008 Jay Cliburn <jcliburn@gmail.com>

 *

 * Derived from Intel e1000 driver

 * Copyright(c) 1999 - 2005 Intel Corporation. All rights reserved.

 *

 * Contact Information:

 * Xiong Huang <xiong.huang@atheros.com>

 * Jie Yang <jie.yang@atheros.com>

 * Chris Snook <csnook@redhat.com>

 * Jay Cliburn <jcliburn@gmail.com>

 *

 * This version is adapted from the Attansic reference driver.

 *

 * TODO:

 * Add more ethtool functions.

 * Fix abstruse irq enable/disable condition described here:

 *	http://marc.theaimsgroup.com/?l=linux-netdev&m=116398508500553&w=2

 *

 * NEEDS TESTING:

 * VLAN

 * multicast

 * promiscuous mode

 * interrupt coalescing

 * SMP torture testing

 Temporary hack for merging atl1 and atl2 */

/*

 * This is the only thing that needs to be changed to adjust the

 * maximum number of ports that the driver can manage.

/*

 * Interrupt Moderate Timer in units of 2 us

 *

 * Valid Range: 10-65535

 *

 * Default Value: 100 (200us)

 200us */

 range_option info */

 list_option info */

/**

 * atl1_check_options - Range Checking for Command Line Parameters

 * @adapter: board private structure

 *

 * This routine checks all command line parameters for valid user

 * input.  If an invalid value is given, or if no user specified

 * value exists, a default value is used.  The final value is stored

 * in a variable in the adapter structure.

 Interrupt Moderate Timer */

/*

 * atl1_pci_tbl - PCI Device ID Table

 required last entry */

/*

 * Reset the transmit and receive units; mask and clear all interrupts.

 * hw - Struct containing variables accessed by shared code

 * return : 0  or  idle status (if error)

	/*

	 * Clear Interrupt mask to stop board from generating

	 * interrupts & Clear any pending interrupt events

	/*

	 * atlx_irq_disable(adapter);

	 * iowrite32(0xffffffff, hw->hw_addr + REG_ISR);

	/*

	 * Issue Soft Reset to the MAC.  This will reset the chip's

	 * transmit, receive, DMA.  It will not effect

	 * the current PCI configuration.  The global reset bit is self-

	 * clearing, and should clear within a microsecond.

 delay about 1ms */

 Wait at least 10ms for All module to be Idle */

 delay 1 ms */

 FIXME: still the right way to do this? */

/* function about EEPROM

 *

 * check_eeprom_exist

 * return 0 if eeprom exist

 address do not align */

 timeout */

/*

 * Reads the value from a PHY register

 * hw - Struct containing variables accessed by shared code

 * reg_addr - address of the PHY register to read

/*

 * get_permanent_address

 * return 0 if get valid mac address,

 init */

 Read out all EEPROM content */

 read error */

 see if SPI FLAGS exist ? */

 data end */

 read error */

	/*

	 * On some motherboards, the MAC address is written by the

	 * BIOS directly to the MAC register during POST, and is

	 * not stored in eeprom.  If all else thus far has failed

	 * to fetch the permanent MAC address, try reading it directly.

/*

 * Reads the adapter's MAC address from the EEPROM

 * hw - Struct containing variables accessed by shared code

/*

 * Hashes an address to determine its location in the multicast table

 * hw - Struct containing variables accessed by shared code

 * mc_addr - the multicast address to hash

 *

 * atl1_hash_mc_addr

 *  purpose

 *      set hash value for a multicast address

 *      hash calcu processing :

 *          1. calcu 32bit CRC for multicast address

 *          2. reverse crc with MSB to LSB

/*

 * Sets the bit in the multicast table corresponding to the hash value.

 * hw - Struct containing variables accessed by shared code

 * hash_value - Multicast address hash value

	/*

	 * The HASH Table  is a register array of 2 32-bit registers.

	 * It is treated like an array of 64 bits.  We want to set

	 * bit BitArray[hash_value]. So we figure out what register

	 * the bit is in, read it, OR in the new bit, then write

	 * back the new value.  The register is determined by the

	 * upper 7 bits of the hash value and the bit within that

	 * register are determined by the lower 5 bits of the value.

/*

 * Writes a value to a PHY register

 * hw - Struct containing variables accessed by shared code

 * reg_addr - address of the PHY register to write

 * data - data to write to the PHY

/*

 * Make L001's PHY out of Power Saving State (bug)

 * hw - Struct containing variables accessed by shared code

 * when power on, L001's PHY always on Power saving State

 * (Gigabit Link forbidden)

/*

 * Resets the PHY and make all config validate

 * hw - Struct containing variables accessed by shared code

 *

 * Sets bit 15 and 12 of the MII Control regiser (for F001 bug)

 MEDIA_TYPE_10M_HALF: */

 pcie serdes link may be down! */

/*

 * Configures PHY autoneg and flow control advertisement settings

 * hw - Struct containing variables accessed by shared code

 Read the MII Auto-Neg Advertisement Register (Address 4). */

 Read the MII 1000Base-T Control Register (Address 9). */

	/*

	 * First we clear all the 10/100 mb speed bits in the Auto-Neg

	 * Advertisement Register (Address 4) and the 1000 mb speed bits in

	 * the  1000Base-T Control Register (Address 9).

	/*

	 * Need to parse media_type  and set up

	 * the appropriate PHY registers.

 flow control fixed to enable all */

/*

 * Configures link settings.

 * hw - Struct containing variables accessed by shared code

 * Assumes the hardware has previously been reset and the

 * transmitter and receiver are not enabled.

	/*

	 * Options:

	 *  PHY will advertise value(s) parsed from

	 *  autoneg_advertised and fc

	 *  no matter what autoneg is , We will not wait link result.

 SW.Reset , En-Auto-Neg if needed */

 Atmel */

 Init OP table */

/*

 * Performs basic configuration of the adapter.

 * hw - Struct containing variables accessed by shared code

 * Assumes that the controller has previously been reset and is in a

 * post-reset uninitialized state. Initializes multicast table,

 * and  Calls routines to setup link

 * Leaves the transmit and receive units disabled and uninitialized.

 Zero out the Multicast HASH table */

 clear the old settings from the multicast hash table */

 enable GPHY LinkChange Interrupt */

 make PHY out of power-saving state */

 Call a subroutine to configure the link */

/*

 * Detects the current speed and duplex settings of the hardware.

 * hw - Struct containing variables accessed by shared code

 * speed - Speed of the connection

 * duplex - Duplex setting of the connection

 ; --- Read   PHY Specific Status Register (17) */

	/*

	 * 00-0B-6A-F6-00-DC

	 * 0:  6AF600DC   1: 000B

	 * low dword

 high dword */

/**

 * atl1_sw_init - Initialize general software structures (struct atl1_adapter)

 * @adapter: board private structure to initialize

 *

 * atl1_sw_init initializes the Adapter private data structure.

 * Fields are initialized based on PCI device information and

 * OS network device settings (MTU size).

 100ms */

 hardware init */

 about 2us */

 about 2us */

 about 200ms */

/**

 * atl1_setup_ring_resources - allocate Tx / RX descriptor resources

 * @adapter: board private structure

 *

 * Return 0 on success, negative on failure

	/*

	 * real ring DMA buffer

	 * each ring/block may need up to 8 bytes for alignment, hence the

	 * additional 40 bytes tacked onto the end.

 init TPD ring */

 init RFD ring */

 init RRD ring */

 init CMB */

 init SMB */

/**

 * atl1_clean_rx_ring - Free RFD Buffers

 * @adapter: board private structure

 Free all the Rx ring sk_buffs */

 Zero out the descriptor ring */

/**

 * atl1_clean_tx_ring - Free Tx Buffers

 * @adapter: board private structure

 Free all the Tx ring sk_buffs */

 Zero out the descriptor ring */

/**

 * atl1_free_ring_resources - Free Tx / RX descriptor Resources

 * @adapter: board private structure

 *

 * Free all transmit software resources

 Config MAC CTRL Register */

 duplex */

 speed */

 flow control */

 PAD & CRC */

 preamble length */

 vlan */

	/* rx checksum

	   if (adapter->rx_csum)

	   value |= MAC_CTRL_RX_CHKSUM_EN;

 filter mode */

 value |= MAC_CTRL_LOOPBACK; */

 MII_BMSR must read twice */

 link down */

 old link state: Up */

 Link Up */

 link result is our setting */

 Link down -> Up */

 change original link status */

 MEDIA_TYPE_10M_HALF: */

 auto-neg, insert timer to re-config phy */

 RFD Flow Control */

 RRD Flow Control */

 RXF Flow Control */

 RRD Flow Control */

/**

 * atl1_configure - Configure Transmit&Receive Unit after Reset

 * @adapter: board private structure

 *

 * Configure the Tx /Rx unit of the MAC after a reset.

 clear interrupt status */

 set MAC Address */

 tx / rx ring */

 HI base address */

 LO base address */

 element count */

 Load Ptr */

 config Mailbox */

 config IPG/IFG */

 config  Half-Duplex Control */

 set Interrupt Moderator Timer */

 set Interrupt Clear Timer */

 set max frame size hw will accept */

 jumbo size & rrd retirement timer */

 Flow Control */

 config TXQ */

 min tpd fetch gap & tx jumbo packet size threshold for taskoffload */

 config RXQ */

 config DMA Engine */

 config CMB / SMB */

 --- enable CMB / SMB */

 config failed */

 clear all interrupt status */

/*

 * atl1_pcie_patch - Patch for PCIE module

 much vendor magic here */

 pcie flow control mode change */

/*

 * When ACPI resume on some VIA MotherBoard, the Interrupt Disable bit/0x400

 * on PCI Command register is disable.

 * The function enable this bit.

 * Brackett, 2006/03/15

 Fill out the OS statistics structure */

 Rx Errors */

 Tx Errors */

 clean alloc flag for bad rrd */

	/*

	 * The L1 hardware contains a bug that erroneously sets the

	 * PACKET_FLAG_ERR and ERR_FLAG_L4_CHKSUM bits whenever a

	 * fragmented IP packet is received, even though the packet

	 * is perfectly valid and its checksum is correct. There's

	 * no way to distinguish between one of these good packets

	 * and a packet that actually contains a TCP/UDP checksum

	 * error, so all we can do is allow it to be handed up to

	 * the higher layers and let it be sorted out there.

 not IPv4 */

 checksum is invalid, but it's not an IPv4 pkt, so ok */

 IPv4 packet */

/**

 * atl1_alloc_rx_buffers - Replace used receive buffers

 * @adapter: address of board private structure

 Better luck next round */

		/*

		 * Force memory writes to complete before letting h/w

		 * know there are new descriptors to fetch.  (Only

		 * applicable for weak-ordered memory model archs,

		 * such as IA-64).

 packet valid */

 check rrd status */

 rrd seems to be bad */

 rrd may not be DMAed completely */

 bad rrd */

 see if update RFD index */

 update rrd */

 current rrd still not be updated */

 clean alloc flag for bad rrd */

 update rrd next to clean */

 packet error, don't need upstream */

 Good Receive */

 Receive Checksum Offload */

 let protocol layer free skb */

 update mailbox ? */

 802.3-SNAP frame */

 L1 hardware requires an even number here */

 put skb in last TPD */

 TSO */

 not TSO */

 last tpd's buffer-info */

		/*

		 * if this is the first packet in a TSO chain, set

		 * TPD_HDRFLAG, otherwise, clear it.

	/*

	 * Force memory writes to complete before letting h/w

	 * know there are new descriptors to fetch.  (Only

	 * applicable for weak-ordered memory model archs,

	 * such as IA-64).

 need additional TPD ? */

 not enough descriptors */

 Let's come again to process some more packets */

 re-enable Interrupt */

		/* It is possible in case even the RX/TX ints are disabled via IMR

		 * register the ISR bits are set anyway (but do not produce IRQ).

		 * To handle such situation the napi functions used to check is

		 * something scheduled or not.

	/*

	 * Disable RX/TX ints via IMR register if it is

	 * allowed. NAPI handler must reenable them in same

	 * way.

/**

 * atl1_intr - Interrupt Handler

 * @irq: interrupt number

 * @data: pointer to a network interface device structure

	/* clear CMB interrupt status at once,

	 * but leave rx/tx interrupt status in case it should be dropped

	 * only if rx/tx processing queued. In other case interrupt

	 * can be lost.

 clear phy status */

 clear ISR status, and Enable CMB DMA/Disable Interrupt */

 check if SMB intr */

 check if PCIE PHY Link down */

 reset MAC */

 check if DMA read/write error ? */

 link event */

 transmit or receive event */

 rx exception */

 re-enable Interrupt */

/**

 * atl1_phy_config - Timer Call-back

 * @t: timer_list containing pointer to netdev cast into an unsigned long

/*

 * Orphaned vendor comment left intact here:

 * <vendor comment>

 * If TPD Buffer size equal to 0, PCIE DMAR_TO_INT

 * will assert. We do soft reset <0x1400=1> according

 * with the SPEC. BUT, it seemes that PCIE or DMA

 * state-machine will not be reset. DMAR_TO_INT will

 * assert again and again.

 * </vendor comment>

 hardware has been reset, we need to reload some things */

 no RX BUFFER allocated */

 free rx_buffers */

/**

 * atl1_change_mtu - Change the Maximum Transfer Unit

 * @netdev: network interface device structure

 * @new_mtu: new value for maximum frame size

 *

 * Returns 0 on success, negative on failure

/**

 * atl1_open - Called when a network interface is made active

 * @netdev: network interface device structure

 *

 * Returns 0 on success, negative value on failure

 *

 * The open entry point is called when a network interface is made

 * active by the system (IFF_UP).  At this point all resources needed

 * for transmit and receive operations are allocated, the interrupt

 * handler is registered with the OS, the watchdog timer is started,

 * and the stack is notified that the interface is ready.

 allocate transmit descriptors */

/**

 * atl1_close - Disables a network interface

 * @netdev: network interface device structure

 *

 * Returns 0, this is not allowed to fail

 *

 * The close entry point is called when an interface is de-activated

 * by the OS.  The hardware is still under the drivers control, but

 * needs to be disabled.  A global MAC reset is issued to stop the

 * hardware, and all transmit and receive resources are freed.

 enable magic packet WOL */

 configure the mac */

 poke the PHY */

/**

 * atl1_probe - Device Initialization Routine

 * @pdev: PCI device information struct

 * @ent: entry in atl1_pci_tbl

 *

 * Returns 0 on success, negative on failure

 *

 * atl1_probe initializes an adapter identified by a pci_dev structure.

 * The OS initialization, configuring of the adapter private structure,

 * and a hardware reset occur.

	/*

	 * The atl1 chip can DMA to 64-bit addresses, but it uses a single

	 * shared register for the high 32 bits, so only a single, aligned,

	 * 4 GB physical address range can be used at a time.

	 *

	 * Supporting 64-bit DMA on this hardware is more trouble than it's

	 * worth.  It is far easier to limit to 32-bit DMA than update

	 * various kernel subsystems to support the mechanics required by a

	 * fixed-high-32-bit system.

	/*

	 * Mark all PCI regions associated with PCI device

	 * pdev as being reserved by owner atl1_driver_name

	/*

	 * Enables bus-mastering on the device and calls

	 * pcibios_set_master to do the needed arch specific settings

 get device revision number */

 set default ring resource counts */

 setup the private structure */

 is this valid? see atl1_setup_mac_ctrl() */

 MTU range: 42 - 10218 */

	/*

	 * patch for some L1 of old version,

	 * the final version of L1 may not need these

	 * patches

 atl1_pcie_patch(adapter); */

 really reset GPHY core */

	/*

	 * reset the controller to

	 * put the device in a known good starting state

 copy the MAC address out of the EEPROM */

 mark random mac */

 pre-init the MAC, and setup link */

 assume we have no link for now */

/**

 * atl1_remove - Device Removal Routine

 * @pdev: PCI device information struct

 *

 * atl1_remove is called by the PCI subsystem to alert the driver

 * that it should release a PCI device.  The could be caused by a

 * Hot-Plug event, or because the driver is going to be removed from

 * memory.

 Device not available. Return. */

	/*

	 * Some atl1 boards lack persistent storage for their MAC, and get it

	 * from the BIOS during POST.  If we've been messing with the MAC

	 * address, we need to save the permanent one.

 MEDIA_TYPE_10M_HALF: */

		/*

		 * This switch statement avoids reserved regions

		 * of register space.

 reserved region; don't read it */

 unreserved region */

 try to get new resources before deleting old */

		/*

		 * save the new, restore the old in order to free it,

		 * then restore the new back again

		/*

		 * Save SMB and CMB, since atl1_free_ring_resources

		 * will clear them.

 MEDIA_TYPE_10M_HALF */

 SPDX-License-Identifier: GPL-2.0-or-later

/* atlx.c -- common functions for Attansic network drivers

 *

 * Copyright(c) 2005 - 2006 Attansic Corporation. All rights reserved.

 * Copyright(c) 2006 - 2007 Chris Snook <csnook@redhat.com>

 * Copyright(c) 2006 - 2008 Jay Cliburn <jcliburn@gmail.com>

 * Copyright(c) 2007 Atheros Corporation. All rights reserved.

 *

 * Derived from Intel e1000 driver

 * Copyright(c) 1999 - 2005 Intel Corporation. All rights reserved.

 Including this file like a header is a temporary hack, I promise. -- CHS */

	MFR_NAME  WRSR  READ  PRGM  WREN  WRDI  RDSR  RDID  SEC_ERS CHIP_ERS */

/**

 * atlx_set_mac - Change the Ethernet Address of the NIC

 * @netdev: network interface device structure

 * @p: pointer to an address structure

 *

 * Returns 0 on success, negative on failure

 notify upper layer link down ASAP */

 Link Down */

 old link state: Up */

/**

 * atlx_set_multi - Multicast and Promiscuous mode set

 * @netdev: network interface device structure

 *

 * The set_multi entry point is called whenever the multicast address

 * list or the network interface flags are updated.  This routine is

 * responsible for configuring the hardware for proper multicast,

 * promiscuous mode, and all-multi behavior.

 Check for Promiscuous and All Multicast modes */

 clear the old settings from the multicast hash table */

 compute mc addresses' hash value ,and put it into hash table */

/**

 * atlx_irq_enable - Enable default interrupt generation settings

 * @adapter: board private structure

/**

 * atlx_irq_disable - Mask off interrupt generation on the NIC

 * @adapter: board private structure

/**

 * atlx_tx_timeout - Respond to a Tx Hang

 * @netdev: network interface device structure

 Do the reset outside of interrupt context */

/*

 * atlx_link_chg_task - deal with link change event Out of interrupt context

 enable VLAN tag insert/strip */

 disable VLAN tag insert/strip */

 atlx_irq_disable(adapter); FIXME: confirm/remove */

 atlx_irq_enable(adapter); FIXME */

	/*

	 * Since there is no support for separate rx/tx vlan accel

	 * enable/disable make sure tx flag is always in same state as rx.

 ATLX_C */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright(c) 2006 - 2007 Atheros Corporation. All rights reserved.

 * Copyright(c) 2007 - 2008 Chris Snook <csnook@redhat.com>

 *

 * Derived from Intel e1000 driver

 * Copyright(c) 1999 - 2005 Intel Corporation. All rights reserved.

/*

 * atl2_pci_tbl - PCI Device ID Table

 required last entry */

/**

 * atl2_sw_init - Initialize general software structures (struct atl2_adapter)

 * @adapter: board private structure to initialize

 *

 * atl2_sw_init initializes the Adapter private data structure.

 * Fields are initialized based on PCI device information and

 * OS network device settings (MTU size).

 PCI config space info */

 ~100ms */

 hardware init */

/**

 * atl2_set_multi - Multicast and Promiscuous mode set

 * @netdev: network interface device structure

 *

 * The set_multi entry point is called whenever the multicast address

 * list or the network interface flags are updated.  This routine is

 * responsible for configuring the hardware for proper multicast,

 * promiscuous mode, and all-multi behavior.

 Check for Promiscuous and All Multicast modes */

 clear the old settings from the multicast hash table */

 comoute mc addresses' hash value ,and put it into hash table */

 Read / Write Ptr Initialize: */

/**

 * atl2_configure - Configure Transmit&Receive Unit after Reset

 * @adapter: board private structure

 *

 * Configure the Tx /Rx unit of the MAC after a reset.

 clear interrupt status */

 set MAC Address */

 HI base address */

 LO base address */

 element count */

 config Internal SRAM */

/*

    ATL2_WRITE_REGW(hw, REG_SRAM_TXRAM_END, sram_tx_end);

    ATL2_WRITE_REGW(hw, REG_SRAM_TXRAM_END, sram_rx_end);

 config IPG/IFG */

 config  Half-Duplex Control */

 set Interrupt Moderator Timer */

 set Interrupt Clear Timer */

 set MTU */

 1590 */

 flow control */

 Init mailbox */

 enable DMA read/write */

 config failed */

 clear all interrupt status */

/**

 * atl2_setup_ring_resources - allocate Tx / RX descriptor resources

 * @adapter: board private structure

 *

 * Return 0 on success, negative on failure

 real ring DMA buffer */

 dword align */

 dword align */

 128bytes align */

 Init TXD Ring */

 Init TXS Ring */

 Init RXD Ring */

/*

 * Read / Write Ptr Initialize:

 *      init_ring_ptrs(adapter);

/**

 * atl2_irq_enable - Enable default interrupt generation settings

 * @adapter: board private structure

/**

 * atl2_irq_disable - Mask off interrupt generation on the NIC

 * @adapter: board private structure

 enable VLAN tag insert/strip */

 disable VLAN tag insert/strip */

	/*

	 * Since there is no support for separate rx/tx vlan accel

	 * enable/disable make sure tx flag is always in same state as rx.

 end of tx */

 clear this flag at once */

 alloc new buffer */

				/*

				 * Check that some rx space is free. If not,

				 * free one and mark stats->rx_dropped++.

 advance write ptr */

 update mailbox? */

 tx stop here */

 4for TPH */

 tx statistics: */

 notify upper layer link down ASAP */

 Link Down */

 old link state: Up */

/**

 * atl2_intr - Interrupt Handler

 * @irq: interrupt number

 * @data: pointer to a network interface device structure

 link event */

 clear ISR status, and Enable CMB DMA/Disable Interrupt */

 check if PCIE PHY Link down */

 reset MAC */

 check if DMA read/write error? */

 link event */

 transmit event */

 rx exception */

 re-enable Interrupt */

/**

 * atl2_free_ring_resources - Free Tx / RX descriptor Resources

 * @adapter: board private structure

 *

 * Free all transmit software resources

/**

 * atl2_open - Called when a network interface is made active

 * @netdev: network interface device structure

 *

 * Returns 0 on success, negative value on failure

 *

 * The open entry point is called when a network interface is made

 * active by the system (IFF_UP).  At this point all resources needed

 * for transmit and receive operations are allocated, the interrupt

 * handler is registered with the OS, the watchdog timer is started,

 * and the stack is notified that the interface is ready.

 disallow open during test */

 allocate transmit descriptors */

 hardware has been reset, we need to reload some things */

	/* signal that we're down so the interrupt handler does not

 reset MAC to disable all RX/TX */

/**

 * atl2_close - Disables a network interface

 * @netdev: network interface device structure

 *

 * Returns 0, this is not allowed to fail

 *

 * The close entry point is called when an interface is de-activated

 * by the OS.  The hardware is still under the drivers control, but

 * needs to be disabled.  A global MAC reset is issued to stop the

 * hardware, and all transmit and receive resources are freed.

 not enough resources */

 clear txs before send */

/**

 * atl2_change_mtu - Change the Maximum Transfer Unit

 * @netdev: network interface device structure

 * @new_mtu: new value for maximum frame size

 *

 * Returns 0 on success, negative on failure

 set MTU */

/**

 * atl2_set_mac - Change the Ethernet Address of the NIC

 * @netdev: network interface device structure

 * @p: pointer to an address structure

 *

 * Returns 0 on success, negative on failure

/**

 * atl2_tx_timeout - Respond to a Tx Hang

 * @netdev: network interface device structure

 * @txqueue: index of the hanging transmit queue

 Do the reset outside of interrupt context */

/**

 * atl2_watchdog - Timer Call-back

 * @t: timer list containing a pointer to netdev cast into an unsigned long

 Reset the timer */

/**

 * atl2_phy_config - Timer Call-back

 * @t: timer list containing a pointer to netdev cast into an unsigned long

 hardware has been reset, we need to reload some things */

 Config MAC CTRL Register */

 duplex */

 flow control */

 PAD & CRC */

 preamble length */

 vlan */

 filter mode */

 half retry buffer */

 MII_BMSR must read twise */

 link down */

 old link state: Up */

 disable rx */

 Link Up */

 link result is our setting */

 Link down -> Up */

 change original link status */

 disable rx */

	/* auto-neg, insert timer to re-config phy

/**

 * atl2_link_chg_task - deal with link change event Out of interrupt context

 * @work: pointer to work struct with private info

	/*

	 * some motherboards BIOS(PXE/EFI) driver may set PME

	 * while they transfer control to OS (Windows/Linux)

	 * so we should clear this bit before NIC work normally

/**

 * atl2_probe - Device Initialization Routine

 * @pdev: PCI device information struct

 * @ent: entry in atl2_pci_tbl

 *

 * Returns 0 on success, negative on failure

 *

 * atl2_probe initializes an adapter identified by a pci_dev structure.

 * The OS initialization, configuring of the adapter private structure,

 * and a hardware reset occur.

	/*

	 * atl2 is a shared-high-32-bit device, so we're stuck with 32-bit DMA

	 * until the kernel has the proper infrastructure to support 64-bit DMA

	 * on these devices.

	/* Mark all PCI regions associated with PCI device

	/* Enables bus-mastering on the device and calls

 setup the private structure */

 Init PHY as early as possible due to power saving issue  */

	/* reset the controller to

 copy the MAC address out of the EEPROM */

 ?? */

 assume we have no link for now */

/**

 * atl2_remove - Device Removal Routine

 * @pdev: PCI device information struct

 *

 * atl2_remove is called by the PCI subsystem to alert the driver

 * that it should release a PCI device.  The could be caused by a

 * Hot-Plug event, or because the driver is going to be removed from

 * memory.

/* FIXME: write the original MAC address back in case it was changed from a

	/* flush_scheduled work may reschedule our watchdog task, so

 get current link speed & duplex */

 turn on magic packet wol */

 ignore Link Chg event when Link is up */

 Config MAC CTRL Register */

 magic packet maybe Broadcast&multicast&Unicast */

 pcie patch */

 link is down, so only LINK CHG WOL event enable */

 pcie patch */

 re-init PHY when resume */

 WOL disabled */

 pcie patch */

 re-init PHY when resume */

 clear WOL status */

 Power Management Hooks */

 reset the link */

/*

 * It's sane for this to be empty, but we might want to take advantage of this.

 need read/modify/write of first changed EEPROM word */

 only the second byte of the word is being modified */

		/*

		 * need read/modify/write of last changed EEPROM word

		 * only the first byte of the word is being modified

 Device's eeprom is always little-endian, word addressable */

 these settings will always override what we currently have */

/*

 * Reset the transmit and receive units; mask and clear all interrupts.

 *

 * hw - Struct containing variables accessed by shared code

 * return : 0  or  idle status (if error)

 Workaround for PCI problem when BIOS sets MMRBC incorrectly. */

	/* Clear Interrupt mask to stop board from generating

	 * interrupts & Clear any pending interrupt events

 FIXME */

 ATL2_WRITE_REG(hw, REG_IMR, 0); */

 ATL2_WRITE_REG(hw, REG_ISR, 0xffffffff); */

	/* Issue Soft Reset to the MAC.  This will reset the chip's

	 * transmit, receive, DMA.  It will not effect

	 * the current PCI configuration.  The global reset bit is self-

	 * clearing, and should clear within a microsecond.

 delay about 1ms */

 Wait at least 10ms for All module to be Idle */

 delay 1 ms */

 MFR    WRSR  READ  PROGRAM WREN  WRDI  RDSR  RDID  SECTOR_ERASE CHIP_ERASE */

/*

 * get_permanent_address

 * return 0 if get valid mac address,

 eeprom exists */

 Read out all EEPROM content */

 assume data end while encount an invalid KEYWORD */

 read error */

 see if SPI flash exists? */

 data end */

 read error */

 maybe MAC-address is from BIOS */

/*

 * Reads the adapter's MAC address from the EEPROM

 *

 * hw - Struct containing variables accessed by shared code

 for test */

 FIXME: shouldn't we use eth_random_addr() here? */

/*

 * Hashes an address to determine its location in the multicast table

 *

 * hw - Struct containing variables accessed by shared code

 * mc_addr - the multicast address to hash

 *

 * atl2_hash_mc_addr

 *  purpose

 *      set hash value for a multicast address

 *      hash calcu processing :

 *          1. calcu 32bit CRC for multicast address

 *          2. reverse crc with MSB to LSB

/*

 * Sets the bit in the multicast table corresponding to the hash value.

 *

 * hw - Struct containing variables accessed by shared code

 * hash_value - Multicast address hash value

	/* The HASH Table  is a register array of 2 32-bit registers.

	 * It is treated like an array of 64 bits.  We want to set

	 * bit BitArray[hash_value]. So we figure out what register

	 * the bit is in, read it, OR in the new bit, then write

	 * back the new value.  The register is determined by the

	 * upper 7 bits of the hash value and the bit within that

	 * register are determined by the lower 5 bits of the value.

/*

 * atl2_init_pcie - init PCIE module

 ATMEL */

 Init OP table */

/********************************************************************

* Performs basic configuration of the adapter.

*

* hw - Struct containing variables accessed by shared code

* Assumes that the controller has previously been reset and is in a

* post-reset uninitialized state. Initializes multicast table,

* and  Calls routines to setup link

* Leaves the transmit and receive units disabled and uninitialized.

 Zero out the Multicast HASH table */

 clear the old settings from the multicast hash table */

/*

 * Detects the current speed and duplex settings of the hardware.

 *

 * hw - Struct containing variables accessed by shared code

 * speed - Speed of the connection

 * duplex - Duplex setting of the connection

 Read PHY Specific Status Register (17) */

/*

 * Reads the value from a PHY register

 * hw - Struct containing variables accessed by shared code

 * reg_addr - address of the PHY register to read

/*

 * Writes a value to a PHY register

 * hw - Struct containing variables accessed by shared code

 * reg_addr - address of the PHY register to write

 * data - data to write to the PHY

/*

 * Configures PHY autoneg and flow control advertisement settings

 *

 * hw - Struct containing variables accessed by shared code

 Read the MII Auto-Neg Advertisement Register (Address 4). */

	/* Need to parse autoneg_advertised  and set up

	 * the appropriate PHY registers.  First we will parse for

	 * autoneg_advertised software override.  Since we can advertise

	 * a plethora of combinations, we need to check each bit

	 * individually.

	/* First we clear all the 10/100 mb speed bits in the Auto-Neg

	 * Advertisement Register (Address 4) and the 1000 mb speed bits in

	/* Need to parse MediaType and setup the

 flow control fixed to enable all */

/*

 * Resets the PHY and make all config validate

 *

 * hw - Struct containing variables accessed by shared code

 *

 * Sets bit 15 and 12 of the MII Control regiser (for F001 bug)

 pcie serdes link may be down ! */

 Enable PHY */

 check if the PHY is in powersaving mode */

 024E / 124E 0r 0274 / 1274 ? */

Enable PHY LinkChange Interrupt */

 setup AutoNeg parameters */

 SW.Reset & En-Auto-Neg to restart Auto-Neg */

	/* 00-0B-6A-F6-00-DC

	 * 0:  6AF600DC   1: 000B

 hight dword */

/*

 * check_eeprom_exist

 * return 0 if eeprom exist

 FIXME: This doesn't look right. -- CHS */

 address do not align */

 timeout */

/* This is the only thing that needs to be changed to adjust the

 * maximum number of ports that the driver can manage.

/* All parameters are treated the same, as an integer array of values.

 * This macro just reduces the need to repeat the same declaration code

 * over and over (plus this helps to avoid typo bugs).

/* Module Parameters are always initialized to -1, so that the driver

 * can tell the difference between no user specified value or the

 * user asking for the default value.

 * The true default values are loaded in when atl2_check_options is called.

 *

 * This is a GCC extension to ANSI C.

 * See the item "Labeled Elements in Initializers" in the section

 * "Extensions to the C Language Family" of the GCC documentation.

/*

 * Transmit Memory Size

 * Valid Range: 64-2048

 * Default Value: 128

 4KB */

 64KB */

 8KB */

/*

 * Receive Memory Block Count

 * Valid Range: 16-512

 * Default Value: 128

/*

 * User Specified MediaType Override

 *

 * Valid Range: 0-5

 *  - 0    - auto-negotiate at all supported speeds

 *  - 1    - only link at 1000Mbps Full Duplex

 *  - 2    - only link at 100Mbps Full Duplex

 *  - 3    - only link at 100Mbps Half Duplex

 *  - 4    - only link at 10Mbps Full Duplex

 *  - 5    - only link at 10Mbps Half Duplex

 * Default Value: 0

/*

 * Interrupt Moderate Timer in units of 2048 ns (~2 us)

 * Valid Range: 10-65535

 * Default Value: 45000(90ms)

 200us */

/*

 * FlashVendor

 * Valid Range: 0-2

 * 0 - Atmel

 * 1 - SST

 * 2 - ST

 range_option info */

 list_option info */

/**

 * atl2_check_options - Range Checking for Command Line Parameters

 * @adapter: board private structure

 *

 * This routine checks all command line parameters for valid user

 * input.  If an invalid value is given, or if no user specified

 * value exists, a default value is used.  The final value is stored

 * in a variable in the adapter structure.

 Bytes of Transmit Memory */

 txs ring size: */

 Receive Memory Block Count */

 FIXME */

 ((u16)val)&~1; */	
 init RXD Flow control value */

 Interrupt Moderate Timer */

 Flash Vendor */

 MediaType */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright(c) 2008 - 2009 Atheros Corporation. All rights reserved.

 *

 * Derived from Intel e1000 driver

 * Copyright(c) 1999 - 2005 Intel Corporation. All rights reserved.

/*

 * atl1c_pci_tbl - PCI Device ID Table

 *

 * Wildcard entries (PCI_ANY_ID) should come last

 * Last entry must be all 0s

 *

 * { Vendor ID, Device ID, SubVendor ID, SubDevice ID,

 *   Class, Class Mask, private data (not used) }

 required last entry */

 pclk sel could switch to 25M */

 WoL/PCIE related settings */

 new dev set bit5 of MASTER */

 aspm/PCIE setting only for l2cb 1.0 */

 extend L1 sync timer */

 l2cb 1.x & l1d 1.x */

 clear vendor msg */

 FIXME: no need any more ? */

/*

 * atl1c_init_pcie - init PCIE module

	/*

	 * Clear any PowerSaveing Settings

 wol sts read-clear */

	/*

	 * Mask some pcie error bits

 clear error status */

/**

 * atl1c_irq_enable - Enable default interrupt generation settings

 * @adapter: board private structure

/**

 * atl1c_irq_disable - Mask off interrupt generation on the NIC

 * @adapter: board private structure

/**

 * atl1c_irq_reset - reset interrupt confiure on the NIC

 * @adapter: board private structure

/*

 * atl1c_wait_until_idle - wait up to AT_HW_MAX_IDLE_DELAY reads

 * of the idle status register until the device is actually idle

/**

 * atl1c_phy_config - Timer Call-back

 * @t: timer list containing pointer to netdev cast into an unsigned long

 link down */

 Link Up */

 link result is our setting */

 notify upper layer link down ASAP */

 old link state: Up */

/**

 * atl1c_tx_timeout - Respond to a Tx Hang

 * @netdev: network interface device structure

 * @txqueue: index of hanging tx queue

 Do the reset outside of interrupt context */

/**

 * atl1c_set_multi - Multicast and Promiscuous mode set

 * @netdev: network interface device structure

 *

 * The set_multi entry point is called whenever the multicast address

 * list or the network interface flags are updated.  This routine is

 * responsible for configuring the hardware for proper multicast,

 * promiscuous mode, and all-multi behavior.

 Check for Promiscuous and All Multicast modes */

 clear the old settings from the multicast hash table */

 comoute mc addresses' hash value ,and put it into hash table */

 enable VLAN tag insert/strip */

 disable VLAN tag insert/strip */

/**

 * atl1c_set_mac_addr - Change the Ethernet Address of the NIC

 * @netdev: network interface device structure

 * @p: pointer to an address structure

 *

 * Returns 0 on success, negative on failure

	/*

	 * Since there is no support for separate rx/tx vlan accel

	 * enable/disable make sure tx flag is always in same state as rx.

 These (GbE) devices support jumbo packets, max_mtu 6122 */

 The 10/100 devices don't support jumbo packets, max_mtu 1500 */

/**

 * atl1c_change_mtu - Change the Maximum Transfer Unit

 * @netdev: network interface device structure

 * @new_mtu: new value for maximum frame size

 *

 * Returns 0 on success, negative on failure

 set MTU */

/*

 *  caller should hold mdio_lock

/**

 * atl1c_alloc_queues - Allocate memory for all rings

 * @adapter: board private structure to initialize

 *

 config access mode */

/**

 * atl1c_sw_init - Initialize general software structures (struct atl1c_adapter)

 * @adapter: board private structure to initialize

 *

 * atl1c_sw_init initializes the Adapter private data structure.

 * Fields are initialized based on PCI device information and

 * OS network device settings (MTU size).

 before link up, we assume hibernate is true */

 100ms */

 400ms */

 TODO */

/**

 * atl1c_clean_tx_ring - Free Tx-skb

 * @adapter: board private structure

 * @queue: idx of transmit queue

 Zero out Tx-buffers */

/**

 * atl1c_clean_rx_ring - Free rx-reservation skbs

 * @adapter: board private structure

 * @queue: idx of transmit queue

 zero out the descriptor ring */

/*

 * Read / Write Ptr Initialize:

/**

 * atl1c_free_ring_resources - Free Tx / RX descriptor Resources

 * @adapter: board private structure

 *

 * Free all transmit software resources

	/* Note: just free tdp_ring.buffer_info,

	 * it contain rfd_ring.buffer_info, do not double free

/**

 * atl1c_setup_ring_resources - allocate Tx / RX descriptor resources

 * @adapter: board private structure

 *

 * Return 0 on success, negative on failure

	/* Even though only one tpd queue is actually used, the "high"

	 * priority tpd queue also gets initialized

	/*

	 * real ring DMA buffer

	 * each ring/block may need up to 8 bytes for alignment, hence the

	 * additional bytes tacked onto the end.

 init TPD ring */

 init RFD ring */

 init RRD ring */

 TPD */

 just enable normal priority TX queue */

 RFD */

 RRD */

 TX watermark, to enter l1 state.*/

 RXD threshold.*/

 Load all of base address above */

	/*

	 * if BIOS had changed the dam-read-max-length to an invalid value,

	 * restore it to default value

 aspm for gigabit */

/*

 * Stop the mac, transmit and receive units

 * hw - Struct containing variables accessed by shared code

 * return : 0  or  idle status (if error)

/*

 * Reset the transmit and receive units; mask and clear all interrupts.

 * hw - Struct containing variables accessed by shared code

 * return : 0  or  idle status (if error)

	/*

	 * Issue Soft Reset to the MAC.  This will reset the chip's

	 * transmit, receive, DMA.  It will not effect

	 * the current PCI configuration.  The global reset bit is self-

	 * clearing, and should clear within a microsecond.

 Wait at least 10ms for All module to be Idle */

 driver control speed/duplex */

 clk switch setting */

/*

 * Set ASPM state.

 * Enable/disable L0s/L1 depend on link state.

 L1 timer */

 L0S/L1 enable */

 l2cb & l1d & l2cb2 & l1d2 */

 disable l0s if link down or l2cb */

 l1c */

 link down */

/**

 * atl1c_configure_mac - Configure Transmit&Receive Unit after Reset

 * @adapter: board private structure

 *

 * Configure the Tx /Rx unit of the MAC after a reset.

 clear interrupt status */

  Clear any WOL status */

	/* set Interrupt Clear Timer

	 * HW will enable self to assert interrupt event to system after

	 * waiting x-time for software to notify it accept interrupt.

 set MTU */

 update rx status */

 update tx status */

/**

 * atl1c_get_stats - Get System Network Statistics

 * @netdev: network interface device structure

 *

 * Returns the address of the device statistics structure.

 * The statistics are actually updated from the timer callback.

/**

 * atl1c_intr - Interrupt Handler

 * @irq: interrupt number

 * @data: pointer to a network interface device structure

 link event */

 Ack ISR */

 check if PCIE PHY Link down */

 reset MAC */

 link event */

 re-enable Interrupt*/

	/*

	 * The pid field in RRS in not correct sometimes, so we

	 * cannot figure out if the packet is fragmented or not,

	 * so we tell the KERNEL CHECKSUM_NONE

		/*

		 * Make buffer alignment 2 beyond a 16 byte boundary

		 * this will result in a 16 byte aligned IP header after

		 * the 14 byte MAC header is removed

 TODO: update mailbox here */

 the relationship between rrd and rfd is one map one */

/**

 * atl1c_clean_rx - NAPI Rx polling callback

 * @napi: napi info

 * @budget: limit of packets to clean

 Keep link state information with original netdev */

 TODO support mul rfd*/

 Good Receive */

 TODO */

/*

 * Polling 'interrupt' - used by things like netconsole to send skbs

 * without having to re-enable interrupts. It's not called while

 * the interrupt routine is executing.

/*

 * get next usable tpd

 * Note: should call atl1c_tdp_avail to make sure

 * there is enough tpd to use

 Calculate the transmit packet descript needed*/

 only xsum need */

 check payload == 0 byte ? */

 only xsum need */

 TSO */

		/* mapped_len == 0, means we should use the first tpd,

 The last tpd */

	/* The last buffer info contain the skb address,

 no enough descriptor, just stop queue */

 do TSO and check sum */

 Ethernet frame */

 roll back tpd/buffer */

 release tx-pending skbs and reset tx/rx ring index */

 clear all event */

	/* signal that we're down so the interrupt handler does not

 disable ASPM if device inactive */

 reset MAC to disable all RX/TX */

/**

 * atl1c_open - Called when a network interface is made active

 * @netdev: network interface device structure

 *

 * Returns 0 on success, negative value on failure

 *

 * The open entry point is called when a network interface is made

 * active by the system (IFF_UP).  At this point all resources needed

 * for transmit and receive operations are allocated, the interrupt

 * handler is registered with the OS, the watchdog timer is started,

 * and the stack is notified that the interface is ready.

 disallow open during test */

 allocate rx/tx dma buffer & descriptors */

/**

 * atl1c_close - Disables a network interface

 * @netdev: network interface device structure

 *

 * Returns 0, this is not allowed to fail

 *

 * The close entry point is called when an interface is de-activated

 * by the OS.  The hardware is still under the drivers control, but

 * needs to be disabled.  A global MAC reset is issued to stop the

 * hardware, and all transmit and receive resources are freed.

 TODO: add when ready */

/**

 * atl1c_probe - Device Initialization Routine

 * @pdev: PCI device information struct

 * @ent: entry in atl1c_pci_tbl

 *

 * Returns 0 on success, negative on failure

 *

 * atl1c_probe initializes an adapter identified by a pci_dev structure.

 * The OS initialization, configuring of the adapter private structure,

 * and a hardware reset occur.

 enable device (incl. PCI PM wakeup and hotplug setup) */

	/*

	 * The atl1c chip can DMA to 64-bit addresses, but it uses a single

	 * shared register for the high 32 bits, so only a single, aligned,

	 * 4 GB physical address range can be used at a time.

	 *

	 * Supporting 64-bit DMA on this hardware is more trouble than it's

	 * worth.  It is far easier to limit to 32-bit DMA than update

	 * various kernel subsystems to support the mechanics required by a

	 * fixed-high-32-bit system.

 init mii data */

 setup the private structure */

 set max MTU */

 Init GPHY as early as possible due to power saving issue  */

	/* reset the controller to

 got a random MAC address, set NET_ADDR_RANDOM to netdev */

/**

 * atl1c_remove - Device Removal Routine

 * @pdev: PCI device information struct

 *

 * atl1c_remove is called by the PCI subsystem to alert the driver

 * that it should release a PCI device.  The could be caused by a

 * Hot-Plug event, or because the driver is going to be removed from

 * memory.

 restore permanent address */

/**

 * atl1c_io_error_detected - called when PCI error is detected

 * @pdev: Pointer to PCI device

 * @state: The current pci connection state

 *

 * This function is called after a PCI bus error affecting

 * this device has been detected.

 Request a slot slot reset. */

/**

 * atl1c_io_slot_reset - called after the pci bus has been reset.

 * @pdev: Pointer to PCI device

 *

 * Restart the card from scratch, as if from a cold-boot. Implementation

 * resembles the first-half of the e1000_resume routine.

/**

 * atl1c_io_resume - called when traffic can start flowing again.

 * @pdev: Pointer to PCI device

 *

 * This callback is called when the error recovery driver tells us that

 * its OK to resume normal operation. Implementation resembles the

 * second-half of the atl1c_resume routine.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright(c) 2009 - 2009 Atheros Corporation. All rights reserved.

 *

 * Derived from Intel e1000 driver

 * Copyright(c) 1999 - 2005 Intel Corporation. All rights reserved.

 not exist */

 these settings will always override what we currently have */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright(c) 2007 Atheros Corporation. All rights reserved.

 *

 * Derived from Intel e1000 driver

 * Copyright(c) 1999 - 2005 Intel Corporation. All rights reserved.

/*

 * check_eeprom_exist

 * return 1 if eeprom exist

	/*

	 * 00-0B-6A-F6-00-DC

	 * 0:  6AF600DC 1: 000B

	 * low dword

 hight dword */

 read mac address from hardware register */

/*

 * atl1c_get_permanent_address

 * return 0 if get valid mac address,

 MAC-address from BIOS is the 1st priority */

 init */

 Enable OTP CLK */

 raise voltage temporally for l2cb */

 Disable OTP_CLK */

 address do not align */

/*

 * Reads the adapter's MAC address from the EEPROM

 *

 * hw - Struct containing variables accessed by shared code

/*

 * atl1c_hash_mc_addr

 *  purpose

 *      set hash value for a multicast address

 *      hash calcu processing :

 *          1. calcu 32bit CRC for multicast address

 *          2. reverse crc with MSB to LSB

/*

 * Sets the bit in the multicast table corresponding to the hash value.

 * hw - Struct containing variables accessed by shared code

 * hash_value - Multicast address hash value

	/*

	 * The HASH Table  is a register array of 2 32-bit registers.

	 * It is treated like an array of 64 bits.  We want to set

	 * bit BitArray[hash_value]. So we figure out what register

	 * the bit is in, read it, OR in the new bit, then write

	 * back the new value.  The register is determined by the

	 * upper bit of the hash value and the bit within that

	 * register are determined by the lower 5 bits of the value.

/*

 * wait mdio module be idle

 * return true: idle

 *        false: still busy

/*

 * atl1c_read_phy_core

 * core function to read register in PHY via MDIO control register.

 * ext: extension register (see IEEE 802.3)

 * dev: device address (see IEEE 802.3 DEVAD, PRTAD is fixed to 0)

 * reg: reg to read

 only l2c_b2 & l1d_2 could use slow clock */

/*

 * atl1c_write_phy_core

 * core function to write to register in PHY via MDIO control register.

 * ext: extension register (see IEEE 802.3)

 * dev: device address (see IEEE 802.3 DEVAD, PRTAD is fixed to 0)

 * reg: reg to write

 only l2c_b2 & l1d_2 could use slow clock */

/*

 * Reads the value from a PHY register

 * hw - Struct containing variables accessed by shared code

 * reg_addr - address of the PHY register to read

/*

 * Writes a value to a PHY register

 * hw - Struct containing variables accessed by shared code

 * reg_addr - address of the PHY register to write

 * data - data to write to the PHY

 read from PHY extension register */

 write to PHY extension register */

/*

 * Configures PHY autoneg and flow control advertisement settings

 *

 * hw - Struct containing variables accessed by shared code

 reset PHY core */

 delay 800us */

 switch clock */

 tx-half amplitude issue fix */

 clear bit3 of dbgport 3B to lower voltage */

 power saving config */

 hib */

 disable pws */

 disable hibernate */

 disable AZ(EEE) by default */

 other debug port to set */

 UNH-IOL test issue, set bit7 */

 set phy interrupt mask */

 MII_BMSR must be read twice */

/*

 * Detects the current speed and duplex settings of the hardware.

 *

 * hw - Struct containing variables accessed by shared code

 * speed - Speed of the connection

 * duplex - Duplex setting of the connection

 Read   PHY Specific Status Register (17) */

 select one link mode to get lower power consumption */

 without WoL */

 re-init PHY when resume */

 clear PHY interrupt */

 configure phy after Link change Event */

 link up */

 az with brcm, half-amp */

 threshold adjust */

 link down */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright(c) 2007 Atheros Corporation. All rights reserved.

 *

 * Derived from Intel e1000 driver

 * Copyright(c) 1999 - 2005 Intel Corporation. All rights reserved.

 reset the link */

 not exist */

 need read/modify/write of first changed EEPROM word */

 only the second byte of the word is being modified */

 need read/modify/write of last changed EEPROM word */

 only the first byte of the word is being modified */

 Device's eeprom is always little-endian, word addressable */

 these settings will always override what we currently have */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright(c) 2007 Atheros Corporation. All rights reserved.

 *

 * Derived from Intel e1000 driver

 * Copyright(c) 1999 - 2005 Intel Corporation. All rights reserved.

/*

 * atl1e_pci_tbl - PCI Device ID Table

 *

 * Wildcard entries (PCI_ANY_ID) should come last

 * Last entry must be all 0s

 *

 * { Vendor ID, Device ID, SubVendor ID, SubDevice ID,

 *   Class, Class Mask, private data (not used) }

 required last entry */

/**

 * atl1e_irq_enable - Enable default interrupt generation settings

 * @adapter: board private structure

/**

 * atl1e_irq_disable - Mask off interrupt generation on the NIC

 * @adapter: board private structure

/**

 * atl1e_irq_reset - reset interrupt confiure on the NIC

 * @adapter: board private structure

/**

 * atl1e_phy_config - Timer Call-back

 * @t: timer list containing pointer to netdev cast into an unsigned long

 MII_BMSR must read twice */

 link down */

 old link state: Up */

 disable rx */

 Link Up */

 link result is our setting */

 Link down -> Up */

/**

 * atl1e_link_chg_task - deal with link change event Out of interrupt context

 * @work: work struct with driver info

 notify upper layer link down ASAP */

 old link state: Up */

/**

 * atl1e_tx_timeout - Respond to a Tx Hang

 * @netdev: network interface device structure

 * @txqueue: the index of the hanging queue

 Do the reset outside of interrupt context */

/**

 * atl1e_set_multi - Multicast and Promiscuous mode set

 * @netdev: network interface device structure

 *

 * The set_multi entry point is called whenever the multicast address

 * list or the network interface flags are updated.  This routine is

 * responsible for configuring the hardware for proper multicast,

 * promiscuous mode, and all-multi behavior.

 Check for Promiscuous and All Multicast modes */

 clear the old settings from the multicast hash table */

 comoute mc addresses' hash value ,and put it into hash table */

 enable RX of ALL frames */

 disable RX of ALL frames */

 enable VLAN tag insert/strip */

 disable VLAN tag insert/strip */

/**

 * atl1e_set_mac_addr - Change the Ethernet Address of the NIC

 * @netdev: network interface device structure

 * @p: pointer to an address structure

 *

 * Returns 0 on success, negative on failure

	/*

	 * Since there is no support for separate rx/tx vlan accel

	 * enable/disable make sure tx flag is always in same state as rx.

/**

 * atl1e_change_mtu - Change the Maximum Transfer Unit

 * @netdev: network interface device structure

 * @new_mtu: new value for maximum frame size

 *

 * Returns 0 on success, negative on failure

 set MTU */

/*

 *  caller should hold mdio_lock

	/*

	 * some motherboards BIOS(PXE/EFI) driver may set PME

	 * while they transfer control to OS (Windows/Linux)

	 * so we should clear this bit before NIC work normally

/**

 * atl1e_alloc_queues - Allocate memory for all rings

 * @adapter: board private structure to initialize

 *

/**

 * atl1e_sw_init - Initialize general software structures (struct atl1e_adapter)

 * @adapter: board private structure to initialize

 *

 * atl1e_sw_init initializes the Adapter private data structure.

 * Fields are initialized based on PCI device information and

 * OS network device settings (MTU size).

 hardware init */

 PCI config space info */

 nic type */

 need confirm */

 100ms */

 200ms  */

 2us resolution */

/**

 * atl1e_clean_tx_ring - Free Tx-skb

 * @adapter: board private structure

 first unmmap dma */

 second free skb */

 Zero out Tx-buffers */

/**

 * atl1e_clean_rx_ring - Free rx-reservation skbs

 * @adapter: board private structure

 Zero out the descriptor ring */

 tx ring, qword align */

 rx ring,  32 bytes align */

 tx, rx cmd, dword align   */

/*

 * Read / Write Ptr Initialize:

/**

 * atl1e_free_ring_resources - Free Tx / RX descriptor Resources

 * @adapter: board private structure

 *

 * Free all transmit software resources

/**

 * atl1e_setup_ring_resources - allocate Tx / RX descriptor resources

 * @adapter: board private structure

 *

 * Return 0 on success, negative on failure

 alloced already */

 real ring DMA buffer */

 Init TPD Ring */

 Init RXF-Pages */

 Init CMB dma address */

 RXF Page Physical address / Page Length */

 Page Length */

 Load all of base address above */

 Jumbo frame threshold in QWORD unit */

 configure TXQ param */

 enable TXQ */

 RRS */

 Config MAC CTRL Register */

/**

 * atl1e_configure - Configure Transmit&Receive Unit after Reset

 * @adapter: board private structure

 *

 * Configure the Tx /Rx unit of the MAC after a reset.

 clear interrupt status */

 1. set MAC Address */

 2. Init the Multicast HASH table done by set_muti */

 3. Clear any WOL status */

	/* 4. Descripter Ring BaseMem/Length/Read ptr/Write ptr

	 *    TPD Ring/SMB/RXF0 Page CMBs, they use the same

 5. set Interrupt Moderator Timer */

 6. rx/tx threshold to trig interrupt */

 7. set Interrupt Clear Timer */

 8. set MTU */

 9. config TXQ early tx threshold */

 10. config RXQ */

 11. config  DMA Engine */

 12. smb timer to trig interrupt */

/**

 * atl1e_get_stats - Get System Network Statistics

 * @netdev: network interface device structure

 *

 * Returns the address of the device statistics structure.

 * The statistics are actually updated from the timer callback.

 update rx status */

 update tx status */

/**

 * atl1e_intr - Interrupt Handler

 * @irq: interrupt number

 * @data: pointer to a network interface device structure

 link event */

 Ack ISR */

 check if PCIE PHY Link down */

 reset MAC */

 check if DMA read/write error */

 link event */

 transmit event */

			/*

			 * disable rx interrupts, without

			 * the synchronize_irq bit

 re-enable Interrupt*/

 get new packet's  rrs */

 check sequence number */

 just for debug use */

 error packet */

 hardware error, discard this packet*/

 CRC */

 skip current packet whether it's ok or not. */

 mark this page clean */

/**

 * atl1e_clean - NAPI Rx polling callback

 * @napi: napi info

 * @budget: number of packets to clean

 Keep link state information with original netdev */

 If no Tx and not enough Rx work done, exit the polling mode */

 test debug */

 reenable RX intr */

atl1e_irq_enable(adapter); */

/*

 * Polling 'interrupt' - used by things like netconsole to send skbs

 * without having to re-enable interrupts. It's not called while

 * the interrupt routine is executing.

/*

 * get next usable tpd

 * Note: should call atl1e_tdp_avail to make sure

 * there is enough tpd to use

 Calculate the transmit packet descript needed*/

 only xsum need */

 TSO */

		/* mapped_len == 0, means we should use the first tpd,

 We need to unwind the mappings we've done */

 Reset the tx rings next pointer */

 We need to unwind the mappings we've done */

 Reset the ring next to use pointer */

 note this one is a tcp header */

 The last tpd */

	/* The last buffer info contain the skb address,

	/* Force memory writes to complete before letting h/w

	 * know there are new descriptors to fetch.  (Only

	 * applicable for weak-ordered memory model archs,

 no enough descriptor, just stop queue */

 802.3 frame */

 do TSO and check sum */

 hardware has been reset, we need to reload some things */

	/* signal that we're down so the interrupt handler does not

 reset MAC to disable all RX/TX */

/**

 * atl1e_open - Called when a network interface is made active

 * @netdev: network interface device structure

 *

 * Returns 0 on success, negative value on failure

 *

 * The open entry point is called when a network interface is made

 * active by the system (IFF_UP).  At this point all resources needed

 * for transmit and receive operations are allocated, the interrupt

 * handler is registered with the OS, the watchdog timer is started,

 * and the stack is notified that the interface is ready.

 disallow open during test */

 allocate rx/tx dma buffer & descriptors */

/**

 * atl1e_close - Disables a network interface

 * @netdev: network interface device structure

 *

 * Returns 0, this is not allowed to fail

 *

 * The close entry point is called when an interface is de-activated

 * by the OS.  The hardware is still under the drivers control, but

 * needs to be disabled.  A global MAC reset is issued to stop the

 * hardware, and all transmit and receive resources are freed.

 get link status */

 re-init PHY when resume */

 turn on magic packet wol */

 if orignal link status is link, just wait for retrive link */

 only link up can wake up */

 clear phy interrupt */

 Config MAC Ctrl register */

 set to 10/100M halt duplex */

 magic packet maybe Broadcast&multicast&Unicast frame */

 pcie patch */

 WOL disabled */

 pcie patch */

 re-init PHY when resume */

 clear WOL status */

 MTU range: 42 - 8170 */

 not enabled by default */

/**

 * atl1e_probe - Device Initialization Routine

 * @pdev: PCI device information struct

 * @ent: entry in atl1e_pci_tbl

 *

 * Returns 0 on success, negative on failure

 *

 * atl1e_probe initializes an adapter identified by a pci_dev structure.

 * The OS initialization, configuring of the adapter private structure,

 * and a hardware reset occur.

	/*

	 * The atl1e chip can DMA to 64-bit addresses, but it uses a single

	 * shared register for the high 32 bits, so only a single, aligned,

	 * 4 GB physical address range can be used at a time.

	 *

	 * Supporting 64-bit DMA on this hardware is more trouble than it's

	 * worth.  It is far easier to limit to 32-bit DMA than update

	 * various kernel subsystems to support the mechanics required by a

	 * fixed-high-32-bit system.

 init mii data */

 get user settings */

	/*

	 * Mark all PCI regions associated with PCI device

	 * pdev as being reserved by owner atl1e_driver_name

	 * Enables bus-mastering on the device and calls

	 * pcibios_set_master to do the needed arch specific settings

 setup the private structure */

 Init GPHY as early as possible due to power saving issue  */

	/* reset the controller to

 assume we have no link for now */

/**

 * atl1e_remove - Device Removal Routine

 * @pdev: PCI device information struct

 *

 * atl1e_remove is called by the PCI subsystem to alert the driver

 * that it should release a PCI device.  The could be caused by a

 * Hot-Plug event, or because the driver is going to be removed from

 * memory.

	/*

	 * flush_scheduled work may reschedule our watchdog task, so

	 * explicitly disable watchdog tasks from being rescheduled

/**

 * atl1e_io_error_detected - called when PCI error is detected

 * @pdev: Pointer to PCI device

 * @state: The current pci connection state

 *

 * This function is called after a PCI bus error affecting

 * this device has been detected.

 Request a slot slot reset. */

/**

 * atl1e_io_slot_reset - called after the pci bus has been reset.

 * @pdev: Pointer to PCI device

 *

 * Restart the card from scratch, as if from a cold-boot. Implementation

 * resembles the first-half of the e1000_resume routine.

/**

 * atl1e_io_resume - called when traffic can start flowing again.

 * @pdev: Pointer to PCI device

 *

 * This callback is called when the error recovery driver tells us that

 * its OK to resume normal operation. Implementation resembles the

 * second-half of the atl1e_resume routine.

 Power Management Hooks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright(c) 2007 Atheros Corporation. All rights reserved.

 *

 * Derived from Intel e1000 driver

 * Copyright(c) 1999 - 2005 Intel Corporation. All rights reserved.

/*

 * check_eeprom_exist

 * return 0 if eeprom exist

	/*

	 * 00-0B-6A-F6-00-DC

	 * 0:  6AF600DC 1: 000B

	 * low dword

 hight dword */

/*

 * atl1e_get_permanent_address

 * return 0 if get valid mac address,

 init */

 eeprom exist */

 maybe MAC-address is from BIOS */

 address do not align */

 timeout */

/*

 * Reads the adapter's MAC address from the EEPROM

 *

 * hw - Struct containing variables accessed by shared code

/*

 * atl1e_hash_mc_addr

 *  purpose

 *      set hash value for a multicast address

/*

 * Sets the bit in the multicast table corresponding to the hash value.

 * hw - Struct containing variables accessed by shared code

 * hash_value - Multicast address hash value

	/*

	 * The HASH Table  is a register array of 2 32-bit registers.

	 * It is treated like an array of 64 bits.  We want to set

	 * bit BitArray[hash_value]. So we figure out what register

	 * the bit is in, read it, OR in the new bit, then write

	 * back the new value.  The register is determined by the

	 * upper 7 bits of the hash value and the bit within that

	 * register are determined by the lower 5 bits of the value.

/*

 * Reads the value from a PHY register

 * hw - Struct containing variables accessed by shared code

 * reg_addr - address of the PHY register to read

/*

 * Writes a value to a PHY register

 * hw - Struct containing variables accessed by shared code

 * reg_addr - address of the PHY register to write

 * data - data to write to the PHY

/*

 * atl1e_init_pcie - init PCIE module

	/* comment 2lines below to save more power when sususpend

	   value = LTSSM_TEST_MODE_DEF;

	   AT_WRITE_REG(hw, REG_LTSSM_TEST_MODE, value);

 pcie flow control mode change */

/*

 * Configures PHY autoneg and flow control advertisement settings

 *

 * hw - Struct containing variables accessed by shared code

 Read the MII Auto-Neg Advertisement Register (Address 4/9). */

	/*

	 * Need to parse autoneg_advertised  and set up

	 * the appropriate PHY registers.  First we will parse for

	 * autoneg_advertised software override.  Since we can advertise

	 * a plethora of combinations, we need to check each bit

	 * individually.

	/*

	 * First we clear all the 10/100 mb speed bits in the Auto-Neg

	 * Advertisement Register (Address 4) and the 1000 mb speed bits in

	 * the  1000Base-T control Register (Address 9).

	/*

	 * Need to parse MediaType and setup the

	 * appropriate PHY registers.

 flow control fixed to enable all */

/*

 * Resets the PHY and make all config validate

 *

 * hw - Struct containing variables accessed by shared code

 *

 * Sets bit 15 and 12 of the MII control regiser (for F001 bug)

		/**************************************

		 * pcie serdes link may be down !

 RESET GPHY Core */

 patches */

 p1. eable hibernation mode */

 p2. set Class A/B for all modes */

 remove Class AB */

 phy_val = hw->emi_ca ? 0x02ef : 0x02df; */

 p3. 10B ??? */

 p4. 1000T power */

Enable PHY LinkChange Interrupt */

 setup AutoNeg parameters */

 SW.Reset & En-Auto-Neg to restart Auto-Neg*/

/*

 * Reset the transmit and receive units; mask and clear all interrupts.

 * hw - Struct containing variables accessed by shared code

 * return : 0  or  idle status (if error)

 Workaround for PCI problem when BIOS sets MMRBC incorrectly. */

	/*

	 * Issue Soft Reset to the MAC.  This will reset the chip's

	 * transmit, receive, DMA.  It will not effect

	 * the current PCI configuration.  The global reset bit is self-

	 * clearing, and should clear within a microsecond.

 Wait at least 10ms for All module to be Idle */

/*

 * Performs basic configuration of the adapter.

 *

 * hw - Struct containing variables accessed by shared code

 * Assumes that the controller has previously been reset and is in a

 * post-reset uninitialized state. Initializes multicast table,

 * and  Calls routines to setup link

 * Leaves the transmit and receive units disabled and uninitialized.

 Zero out the Multicast HASH table */

 clear the old settings from the multicast hash table */

/*

 * Detects the current speed and duplex settings of the hardware.

 *

 * hw - Struct containing variables accessed by shared code

 * speed - Speed of the connection

 * duplex - Duplex setting of the connection

 Read   PHY Specific Status Register (17) */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright(c) 2007 Atheros Corporation. All rights reserved.

 *

 * Derived from Intel e1000 driver

 * Copyright(c) 1999 - 2005 Intel Corporation. All rights reserved.

/* This is the only thing that needs to be changed to adjust the

 * maximum number of ports that the driver can manage.

/* All parameters are treated the same, as an integer array of values.

 * This macro just reduces the need to repeat the same declaration code

 * over and over (plus this helps to avoid typo bugs).

/* Transmit Memory count

 *

 * Valid Range: 64-2048

 *

 * Default Value: 128

/* Receive Memory Block Count

 *

 * Valid Range: 16-512

 *

 * Default Value: 128

 8KB   */

 1MB   */

 128KB */

/* User Specified MediaType Override

 *

 * Valid Range: 0-5

 *  - 0    - auto-negotiate at all supported speeds

 *  - 1    - only link at 100Mbps Full Duplex

 *  - 2    - only link at 100Mbps Half Duplex

 *  - 3    - only link at 10Mbps Full Duplex

 *  - 4    - only link at 10Mbps Half Duplex

 * Default Value: 0

/* Interrupt Moderate Timer in units of 2 us

 *

 * Valid Range: 10-65535

 *

 * Default Value: 45000(90ms)

 200us */

 range_option info */

 list_option info */

/**

 * atl1e_check_options - Range Checking for Command Line Parameters

 * @adapter: board private structure

 *

 * This routine checks all command line parameters for valid user

 * input.  If an invalid value is given, or if no user specified

 * value exists, a default value is used.  The final value is stored

 * in a variable in the adapter structure.

 Transmit Ring Size */

 Receive Memory Block Count */

 Interrupt Moderate Timer */

 MediaType */

/*

 * Copyright (c) 2013 Johannes Berg <johannes@sipsolutions.net>

 *

 *  This file is free software: you may copy, redistribute and/or modify it

 *  under the terms of the GNU General Public License as published by the

 *  Free Software Foundation, either version 2 of the License, or (at your

 *  option) any later version.

 *

 *  This file is distributed in the hope that it will be useful, but

 *  WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 *  General Public License for more details.

 *

 *  You should have received a copy of the GNU General Public License

 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *

 * Copyright (c) 2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 use slow clock when it's in hibernation status */

 use slow clock when it's in hibernation status */

 phy in reset */

 addr should be big-endian */

 try to get it from register first */

 try to load from efuse */

 try to load from flash/eeprom (if present) */

 for example: 00-0B-6A-F6-00-DC * STAD0=6AF600DC, STAD1=000B */

 clear Internal OSC settings, switching OSC by hw itself */

	/* 25M clk from chipset may be unstable 1s after de-assert of

	 * PERST, driver need re-calibrate before enter Sleep for WoL

		/* restore over current protection def-val,

		 * this val could be reset by MAC-RST

 a 0->1 change will update the internal val of osc */

 hw will automatically dis OSC after cab. */

 disable isolate for rev A devices */

 disable all interrupts, RXQ/TXQ */

 mac reset workaroud */

 dis l0s/l1 before mac reset */

 reset whole mac safely */

 make sure it's real idle */

 restore l0s / l1 */

	/* clear Internal OSC settings, switching OSC by hw itself,

	 * disable isolate for rev A devices

 driver control speed/duplex, hash-alg */

 (DSP)reset PHY core */

 phy power saving & hib */

 EEE advertisement */

 phy power saving */

 rtl8139c, 120m issue */

 Turn off half amplitude */

 Turn off Green feature */

 Turn off half Bias */

 set phy interrupt mask */

 Workaround for PCI problem when BIOS sets MMRBC incorrectly. */

 clear WoL setting/status */

 mask some pcie error bits */

 wol 25M & pclk */

 ASPM setting */

 1000BT/AZ, wrong cable length */

 threshold adjust */

				/*

				 * Giga link threshold, raise the tolerance of

				 * noise 50%

 speed/duplex result is saved in PHY Specific Status Register */

 clear interrupt status by reading it */

 idle timeout to switch clk_125M */

 intr re-trig timeout */

 tpd threshold to trig int */

	/*

	 * if BIOS had changed the default dma read max length,

	 * restore it to default value

 rxq, flow control */

 default multi-tx-q weights */

	/* since we haven't PMA/PMD status2 register, we can't

	 * use mdio45_probe function for prtad and mmds.

	 * use fixed MMD3 to get mmds.

 RX stats */

 TX stats */

/*

 * Copyright (c) 2013 Johannes Berg <johannes@sipsolutions.net>

 *

 *  This file is free software: you may copy, redistribute and/or modify it

 *  under the terms of the GNU General Public License as published by the

 *  Free Software Foundation, either version 2 of the License, or (at your

 *  option) any later version.

 *

 *  This file is distributed in the hope that it will be useful, but

 *  WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 *  General Public License for more details.

 *

 *  You should have received a copy of the GNU General Public License

 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *

 * Copyright (c) 2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/* The order of these strings must match the order of the fields in

 * struct alx_hw_stats

 * See hw.h

 restart auto-neg for auto-mode */

 flow control on mac */

/*

 * Copyright (c) 2013, 2021 Johannes Berg <johannes@sipsolutions.net>

 *

 *  This file is free software: you may copy, redistribute and/or modify it

 *  under the terms of the GNU General Public License as published by the

 *  Free Software Foundation, either version 2 of the License, or (at your

 *  option) any later version.

 *

 *  This file is distributed in the hope that it will be useful, but

 *  WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 *  General Public License for more details.

 *

 *  You should have received a copy of the GNU General Public License

 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *

 * Copyright (c) 2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

		/*

		 * When DMA RX address is set to something like

		 * 0x....fc0, it will be very likely to cause DMA

		 * RFD overflow issue.

		 *

		 * To work around it, we apply rx skb with 64 bytes

		 * longer space, and offset the address whenever

		 * 0x....fc0 is detected.

		/* Unfortunately, RX descriptor buffers must be 4-byte

		 * aligned, so we can't use IP alignment.

 flush all updates before updating hardware */

 enable interrupt */

		/* suppress PHY interrupt, because the source

		 * is from PHY internal. only the internal status

		 * is cleared, the interrupt status could be cleared.

 ACK interrupt */

 mask rx/tx interrupt, enable them when napi complete */

 mask interrupt to ACK chip */

 clear interrupt status */

 mask interrupt to ACK chip */

 read interrupt status */

 clear interrupt status */

 enable interrupt again */

 load these pointers into the chip */

	/* physical tx/rx ring descriptors

	 *

	 * Allocate them as a single chunk because they must not cross a

	 * 4G boundary (hardware has a single register for high 32 bits

	 * of addresses only)

 alignment requirements */

 allocate alx_napi structures */

 allocate tx queues */

 allocate rx queues */

 tx mappings */

 rx mapping */

 level-1 interrupt switch */

 enable all msix irqs */

 msix request failed, realloc resources */

 fall back to legacy interrupt */

 MTU range: 34 - 9256 */

 disable l0s/l1 */

 hardware setting lost, restore it */

 clear old interrupts */

	/* must be called after alx_request_irq because the chip stops working

	 * if we copy the dma addresses in alx_init_ring_ptrs twice when

	 * requesting msi-x interrupts failed

 clear old interrupts */

	/* clear PHY internal interrupt status, otherwise the main

	 * interrupt status will be asserted forever

 link is now down */

 MAC reset causes all HW settings to be lost, restore all */

 we need one extra descriptor for LSOv2 */

 LSOv2: the first TPD only provides the packet length */

 last TPD, set EOP flag and store skb */

 flush updates before updating hardware */

	/* The alx chip can DMA to 64-bit addresses, but it uses a single

	 * shared register for the high 32 bits, so only a single, aligned,

	 * 4 GB physical address range can be used for descriptors.

 setup link to put it in a known good starting state */

 restore permanent mac address */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PTP 1588 clock using the IXP46X

 *

 * Copyright (C) 2010 OMICRON electronics GmbH

/*

 * Register access functions

/*

 * Interrupt service routine

 this bit seems to be always set */

/*

 * PTP clock operations

 module operations */

 Called from the registered devm action */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel IXP4xx Ethernet driver for Linux

 *

 * Copyright (C) 2007 Krzysztof Halasa <khc@pm.waw.pl>

 *

 * Ethernet port config (0x00 is not present on IXP42X):

 *

 * logical port		0x00		0x10		0x20

 * NPE			0 (NPE-A)	1 (NPE-B)	2 (NPE-C)

 * physical PortId	2		0		1

 * TX queue		23		24		25

 * RX-free queue	26		27		28

 * TX-done queue is always 31, per-port RX and TX-ready queues are configurable

 *

 * Queue entries:

 * bits 0 -> 1	- NPE ID (RX and TX-done)

 * bits 0 -> 2	- priority (TX, per 802.1D)

 * bits 3 -> 4	- port ID (user-set?)

 * bits 5 -> 31	- physical descriptor address

 also length of all RX queues */

 also length of all TX queues */

 dwords */

 0x600 */

 microseconds, typically 30 cycles */

 microseconds, typically 2-3 cycles */

 TX Control Registers */

 reduced MII */

 4 bits */

 RX Control Registers */

 Core Control Register */

 MDIO using NPE-B ETH-0 only */

 NPE message codes */

 000 */

 010 */

 020 */

 030 */

 038 */

 040 */

 050 */

 060 */

 070 */

 080 */

 090 */

 0A0 */

 0C0 */

 0E0 */

 0F0 */

 1FC */

 coherent */

 logical port ID */

 NPE message structure */

 Ethernet packet descriptor */

 pointer to next buffer, unused */

 buffer length */

 packet length */

 pointer to data buffer in RAM */

 packet length */

 buffer length */

 pointer to data buffer in RAM */

 mdio command and status only */

	/*

	 * This really stinks, but we have to poll for the Tx time stamp.

	 * Usually, the time stamp is ready after 4 to 6 microseconds.

 reserved for future extensions */

 Clear out any old time stamps. */

 GO */,

 don't return error */

 mask out non-address bits */

	/* Don't check for queue overflow here, we've allocated sufficient

 not empty again */

 all work done */

 put the desc back on RX-ready queue */

 process received frame */

 put the new buffer on RX-free queue */

 not all work done */

 mask out non-address bits */

 not the draining packet */

 TX-ready queue was empty */

 no need to keep alignment */

 keep 32-bit alignment */

 NPE firmware pads short frames with zeros internally */

 empty */

 we could miss TX ready interrupt */

 really empty in fact */

 first MAC address */

 ethtool support */

 TX-done queue handles skbs sent out by the NPEs */

 tables */

 Setup RX buffers */

 skb or kmalloc()ated memory */

 force "link up" message */

 Populate queues with buffers, no failure after this point */

 we may already have RX data, enables IRQ */

 allocated RX buffers */

 drain RX buffers */

 we have to inject some packet */

 cancel TX */

 NPE ID 0x00, 0x10, 0x20... */

 Check if this device has an MDIO bus */

 DO NOT put the mdio_np, it will be used */

 Get the rx queue as a resource from queue manager */

 Get the txready queue as resource from queue manager */

 If the MDIO bus is not up yet, defer probe */

			/* On all except IXP43x, NPE-B is used for the MDIO bus.

			 * If there is no NPE-B in the feature set, bail out,

			 * else we have the MDIO bus here.

 Else register the MDIO bus on NPE-B */

			/* IXP43x lacks NPE-B and uses NPE-C for the MDIO bus

			 * access, if there is no NPE-C, no bus, nothing works,

			 * so bail out.

 Else register the MDIO bus on NPE-B */

 Get the port resource and remap */

 Register the MDIO bus if we have it */

	/* If the instance with the MDIO bus has not yet appeared,

	 * defer probing until it gets probed.

 Inherit the DMA masks from the platform device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * meth.c -- O2 Builtin 10/100 Ethernet driver

 *

 * Copyright (C) 2001-2003 Ilya Volynets

 struct device, et al */

 struct device, and other headers */

 eth_type_trans */

 struct iphdr */

 struct tcphdr */

 MII definitions */

 The maximum time waited (in jiffies) before assuming a Tx failed. (400ms) */

/*

 * Maximum number of multicast addresses to filter (vs. Rx-all-multicast).

 * MACE Ethernet uses a 64 element hash table based on the Ethernet CRC.

/*

 * This structure is private to each device. It is used to pass

 * packets in and out, so there is place for a packet

 in-memory copy of MAC Control register */

 in-memory copy of DMA Control register */

 address of PHY, used by mdio_* functions, initialized in mdio_probe */

 Multicast filter. */

 global, initialized in ip32-setup.c */

/*

 * Waits for BUSY status of mdio bus to clear

read phy register, return value read */

 check if phy is detected already */

 Init TX ring */

 Now init skb save area */

		/* 8byte status vector + 3quad padding + 2byte padding,

 I'll need to re-sync it after each RX */

 Remove any pending skb */

 Presumes RX DMA engine is stopped, and RX fifo ring is reset */

 Reset card */

 Load ethernet address */

 Should load some "errata", but later */

 Check for device */

 Initial mode: 10 | Half-duplex | Accept normal packets */

 Autonegotiate speed and duplex mode */

 Now set dma control, but don't enable DMA, yet */

============End Helper Routines=====================*/

/*

 * Open and close

 No PHY is known yet... */

 Initialize the hardware */

 Allocate the ring buffers */

 Start DMA */

METH_DMA_TX_INT_EN |*/

 can't transmit any more */

 shut down DMA */

/*

 * Receive a packet: retrieve, encapsulate and pass over to upper levels

 omit CRC */

 length sanity check */

 Ouch! No memory! Drop packet on the floor */

					/* 8byte status vector + 3quad padding + 2byte padding,

 Write metadata, and then pass to the receive level */

 In case there was underflow, and Rx DMA was disabled */

 Stop DMA notification */

 wake up queue if it was stopped */

 check for errors too... */

 Should I do full reset in this case? */

		/* more underflow interrupts will be delivered,

		 * effectively throwing us into an infinite loop.

/*

 * The typical interrupt entry point

		/* First handle errors - if we get Rx underflow,

		 * Rx DMA will be disabled, and Rx handler will reenable

		 * it. I don't think it's possible to get Rx underflow,

 a transmission is over: free the skb */

 send it to meth_rx for handling */

/*

 * Transmits packets that fit into TX descriptor (are <=120B)

 maybe I should set whole thing to 0 first... */

 unaligned part */

 first page */

 unaligned part */

 first page */

 second page */

 Remember the skb, so we can free it at interrupt time */

 Whole packet fits into descriptor */

 Packet crosses page boundary */

 Packet is in one page */

/*

 * Transmit a packet (called by the kernel)

 Stop DMA notification */

 save the timestamp */

 If TX ring is full, tell the upper layer to stop sending packets */

 Restart DMA notification */

/*

 * Deal with a transmit timeout.

 Protect against concurrent rx interrupts */

 Try to reset the interface. */

 Clear all rings */

 Restart dma */

 Enable interrupt */

 prevent tx timeout */

/*

 * Ioctl commands

 XXX Not yet implemented */

 Write the changes to the chip registers. */

 Done! */

/*

 * The init function.

 SPDX-License-Identifier: GPL-2.0

/* Driver for SGI's IOC3 based Ethernet cards as found in the PCI card.

 *

 * Copyright (C) 1999, 2000, 01, 03, 06 Ralf Baechle

 * Copyright (C) 1995, 1999, 2000, 2001 by Silicon Graphics, Inc.

 *

 * References:

 *  o IOC3 ASIC specification 4.51, 1996-04-18

 *  o IEEE 802.3 specification, 2000 edition

 *  o DP38840A Specification, National Semiconductor, March 1997

 *

 * To do:

 *

 *  o Use prefetching for large packets.  What is a good lower limit for

 *    prefetching?

 *  o Use hardware checksums.

 *  o Which PHYs might possibly be attached to the IOC3 in real live,

 *    which workarounds are required for them?  Do we ever have Lucent's?

 *  o For the 2.5 branch kill the mii-tool ioctls.

/* Number of RX buffers.  This is tunable in the range of 16 <= x < 512.

 * The value must be a power of two.

 fixed in hardware */

 128 TX buffers (not tunable) */

 IOC3 does dma transfers in 128 byte blocks */

 Every RX buffer starts with 8 byte descriptor data */

 Private per NIC data of the driver.  */

 pointer to receiver ring */

 RX consumer index */

 RX producer index */

 TX consumer index */

 TX producer index */

 Members used by autonegotiation  */

 ensure buffer is aligned to IOC3_DMA_XFER_LEN */

	/* found nvmem device which is attached to our ioc3

	 * now check for one wire family code 09, 89 and 91

 check, if content is valid */

/* Caller must hold the ioc3_lock ever for MII readers.  This is also

 * used to protect the transmitter side but it's low contention.

	/* Did hardware handle the checksum at all?  The cases we can handle

	 * are:

	 *

	 * - TCP and UDP checksums of IPv4 only.

	 * - IPv6 would be doable but we keep that for later ...

	 * - Only unfragmented packets.  Did somebody already tell you

	 *   fragmentation is evil?

	 * - don't care about packet size.  Worst case when processing a

	 *   malformed packet we'll try to access the packet at ip header +

	 *   64 bytes which is still inside the skb.  Even in the unlikely

	 *   case where the checksum is right the higher layers will still

	 *   drop the packet as appropriate.

 Same as tx - compute csum of pseudo header  */

 Sum up ethernet dest addr, src addr and protocol  */

	/* In the next step we also subtract the 1's complement

	 * checksum of the trailing ethernet CRC.

 points at trailing CRC */

 Ring base */

 RX consume index */

 It's valid ...  */

				/* Ouch, drop packet and just recycle packet

				 * to keep the ring filled.

 Poison  */

 Statistics */

			/* The frame is invalid and the skb never

			 * reached the network layer so we can just

			 * recycle it.

 Statistics */

 Clear valid flag */

 Update erpir */

 Now go on to the next ring entry.  */

 Next */

 More pkts sent?  */

/* Deal with fatal IOC3 errors.  This condition might be caused by a hard or

 * software problems, so we should try to recover

 * more gracefully if this ever happens.  In theory we might be flooded

 * with such error interrupts if something really goes wrong, so we might

 * also consider to take the interface down.

/* The interrupt handler does all of the Rx thread work and cleans up

 * after the Tx thread.

 Flush */

 Print the link status if it has changed */

 1.2s */

/* Try to find a PHY.  There is no apparent relation between the MII addresses

 * in the SGI documentation and what we find in reality, so we simply probe

 * for the PHY.

 1.2 sec. */

	/* Now the rx buffers.  The RX ring may be larger but

	 * we only allocate 16 buffers for now.  Need to tune

	 * this for performance and memory later.

 Clear valid flag */

 Assume the larger size SSRAM and enable parity checking */

 Flush */

 set ssram size to 64 KB */

 Kill if running	*/

 Reset		*/

 Flush WB		*/

 Give it time ...	*/

 Misc registers  */

 Clear on read */

 RX low watermark  */

 Interrupt immediately */

 XXX should be random */

 Now the rx ring base, consume & produce registers.  */

 nothing queued  */

 Now the tx ring base, consume & produce registers.  */

 Flush */

 Shutup */

 Disable interrupts */

 Flush */

 get mac addr from one wire prom */

 not available yet */

 Allocate rx ring.  4kb = 512 entries, must be 4kb aligned */

 Allocate tx rings.  16kb = 128 bufs, must be 16kb aligned  */

 Align TX ring */

 The IOC3-specific entries in the device structure. */

	/* IOC3 has a fairly simple minded checksumming hardware which simply

	 * adds up the 1's complement checksum for the entire packet and

	 * inserts it at an offset which can be specified in the descriptor

	 * into the transmit packet.  This means we have to compensate for the

	 * MAC header which should not be summed and the TCP/UDP pseudo headers

	 * manually.

		/* The MAC header.  skb->mac seem the logic approach

		 * to find the MAC header - except it's a NULL pointer ...

 Sum up dest addr, src addr and protocol  */

		/* Skip IP header; it's sum is always zero and was

		 * already filled in by ip_output.c

 Fold again */

 Short packet, let's copy it directly into the ring.  */

 Very short packet, pad with zeros at the end. */

 Normal sized packet that doesn't cross a page boundary. */

 make sure all descriptor changes are visible */

 Remember skb */

 Fire ... */

/* Given a multicast ethernet address, this routine calculates the

 * address's bit index in the logical address filter mask

 bit reverse lowest 6 bits for hash index */

 Set promiscuous.  */

 Clear promiscuous. */

			/* Too many for hashing to make sense or we want all

			 * multicast packets anyway,  so skip computing all the

			 * hashes and just accept all packets.

 SPDX-License-Identifier: GPL-2.0+

 SPDX-License-Identifier: GPL-2.0

/*

 * Keystone GBE and XGBE subsystem code

 *

 * Copyright (C) 2014 Texas Instruments Incorporated

 * Authors:	Sandeep Nair <sandeep_n@ti.com>

 *		Sandeep Paulraj <s-paulraj@ti.com>

 *		Cyril Chemparathy <cyril@ti.com>

 *		Santosh Shilimkar <santosh.shilimkar@ti.com>

 *		Wingman Kwok <w-kwok2@ti.com>

 1G Ethernet SS defines */

 offset relative to base of GBE_SS_REG_INDEX */

 offset relative to base of GBE_SM_REG_INDEX */

 1G Ethernet NU SS defines */

 10G Ethernet SS defines */

 offset relative to base of XGBE_SS_REG_INDEX */

 offset relative to base of XGBE_SM_REG_INDEX */

 Soft reset register values */

 s: 0-based slave_port */

 Px_TS_CTL register fields */

 Px_TS_SEQ_LTYPE register fields */

 Px_TS_CTL_LTYPE2 register fields */

 The PTP event messages - Sync, Delay_Req, Pdelay_Req, and Pdelay_Resp. */

 CONFIG_TI_CPTS */

 NU */

 NU */

 2U */

 2U */

 2U */

 2U */

 NU */

 NU */

 NU */

 NU */

 2U */

 NU */

 NU */

 NU */

 NU */

 NU */

 NU */

 2U */

 NU */

 2U */

 NU */

 2U */

 2U */

 2U */

 NU: more to add */

 2U */

 NU */

 NU */

 2U */

 2U */

 2U */

 NU */

 NU */

 NU */

 NU */

/* Some hw stat regs are applicable to slave port only.

 * This is handled by gbenu_et_stats struct.  Also some

 * are for SS version NU and some are for 2U.

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave 10G only */

 slave */

 NU */

 NU */

 following NU only */

 2U */

 2U, NU */

 0 based logical number */

 actual port number */

 max_num_slaves + 1 */

  Lock for updating the hwstats */

 Statistic management */

 GBE module A */

 GBE module B */

 GBE module C */

 GBE module D */

 This is the size of entries in GBENU_STATS_HOST */

 This is the size of entries in GBENU_STATS_PORT */

 GBENU Host Module */

 GBENU Module 1 */

 GBENU Module 2 */

 GBENU Module 3 */

 GBENU Module 4 */

 GBENU Module 5 */

 GBENU Module 6 */

 GBENU Module 7 */

 GBENU Module 8 */

 GBE module 0 */

 XGBE module 1 */

 XGBE module 2 */

	/* The hw_stats_regs pointers are already

	 * properly set to point to the right base:

 make the stat module visible */

 CONFIG_TI_CPTS */

/* Reset EMAC

 * Soft reset is set and polled until clear, or until a timeout occurs

 Set the soft reset bit */

 Wait for the bit to clear */

 Timeout on the reset */

 Configure EMAC */

 Enable correct MII mode at SS level */

 Disable forwarding */

	/* For NU & 2U switch, map the vlan priorities to zero

	 * as we only configure to use priority 0

 enable forwarding */

		/* if phy-mode is not present, default to

		 * PHY_INTERFACE_MODE_RGMII

 Host Tx Pri */

 Max length register */

 nothing to do for promiscuous */

 nothing to do for promiscuous */

	/* If phy has the txtstamp api, assume it will do it.

	 * We mark it here because skb_tx_timestamp() is called

	 * after all the txhooks are called.

 reserved for future extensions */

 CONFIG_TI_CPTS */

	/* Disable(1)/Enable(0) Learn for all ports (host is port 0 and

	 * slaves are port 1 and up

 Don't Flood All Unicast Packets to Host port */

 Clear All Untouched entries */

 Make sure it is not a false timeout */

 Clear all mcast from ALE */

 Flood All Unicast Packets to Host port */

 Check & update SGMII link state of interfaces */

 Check & update SGMII link state of secondary ports */

 A timer runs as a BH, no need to block them */

 For 10G and on NetCP 1.5, use directed to port */

 disable priority elevation and enable statistics on all ports */

 Control register */

 All statistics enabled and STAT AB visible by default */

 CONFIG_TI_CPTS */

 Emac regs memmap are contiguous but port regs are not */

 Initialize  slave port register offsets */

 Initialize EMAC register offsets */

 Initialize  slave port register offsets */

 Initialize EMAC register offsets */

 Initialize  slave port register offsets */

 Initialize EMAC register offsets */

 of_phy_connect() is needed only for MAC-PHY interface */

 Allocate dummy netdev device for attaching to phy device */

 Subsystem registers */

 Switch module registers */

 Host port registers */

	/* K2HK has only 2 hw stats modules visible at a time, so

	 * module 0 & 2 points to one base and

	 * module 1 & 3 points to the other base

 Subsystem registers */

 Switch module registers */

 Host port registers */

	/* Although sgmii modules are mem mapped to one contiguous

	 * region on GBENU devices, setting sgmii_port34_regs allows

	 * consistent code when accessing sgmii api

 Subsystem registers */

 ok to set for MU, but used by 2U only */

 Switch module registers */

 Host port registers */

	/* For NU only.  2U does not need tx_pri_map.

	 * NU cppi port 0 tx pkt streaming interface has (n-1)*8 egress threads

	 * while 2U has only 1 such thread

 init the hw stats lock */

 Create network interfaces */

 Initialize Secondary slave ports */

 initialize host port */

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments N-Port Ethernet Switch Address Lookup Engine

 *

 * Copyright (C) 2012 Texas Instruments

 *

 ALE Registers */

 ALE NetCP NU switch specific Registers */

 ALE_AGING_TIMER */

/**

 * struct ale_entry_fld - The ALE tbl entry field description

 * @start_bit: field start bit

 * @num_bits: field bit length

 * @flags: field flags

 Status register present */

 HW auto aging */

/**

 * struct cpsw_ale_dev_id - The ALE version/SoC specific configuration

 * @dev_id: ALE version/SoC id

 * @features: features supported by ALE

 * @tbl_entries: number of ALE entries

 * @major_ver_mask: mask of ALE Major Version Value in ALE_IDVER reg.

 * @nu_switch_ale: NU Switch ALE

 * @vlan_entry_tbl: ALE vlan entry fields description tbl

 flip */

 flip */

 dm814x, am3/am4/am5, k2hk */

 k2e/k2l, k3 am65/j721e cpsw2g  */

 K3 j721e/j7200 cpsw9g/5g, am64x cpsw3g  */

 The MAC address field in the ALE entry cannot be macroized as above */

 ports dont intersect, not interested */

 free if only remaining port is host port */

		/* if vid passed is -1 then remove all multicast entry from

		 * the table irrespective of vlan id, if a valid vlan id is

		 * passed then remove only multicast added to that vlan id.

		 * if vlan id doesn't match then move on to next entry.

 ALE NetCP NU switch specific vlan functions */

 Set VLAN registered multicast flood mask */

 Set VLAN unregistered multicast flood mask */

	/* if !port_mask - force remove VLAN (legacy).

	 * Check if there are other VLAN members ports

	 * if no - remove VLAN.

	 * if yes it means same VLAN was added to >1 port in multi port mode, so

	 * remove port_mask ports from VLAN ALE entry excluding Host port.

 last port or force remove - remove VLAN */

 global, port is a dont care */

 global, port is a dont care */

 am3/4/5, dra7. dm814x, 66ak2hk-gbe */

 66ak2h_xgbe */

		/* ALE available on newer NetCP switches has introduced

		 * a register, ALE_STATUS, to indicate the size of ALE

		 * table which shows the size as a multiple of 1024 entries.

		 * For these, params.ale_entries will be set to zero. So

		 * read the register and update the value of ale_entries.

		 * return error if ale_entries is zero in ALE_STATUS.

 set default bits for existing h/w */

	/* Set defaults override for ALE on NetCP NU switch and for version

	 * 1R3

		/* Separate registers for unknown vlan configuration.

		 * Also there are N bits, where N is number of ale

		 * ports and shift value should be 0

 SPDX-License-Identifier: GPL-2.0+

/*

 * TI Common Platform Time Sync

 *

 * Copyright (C) 2012 Richard Cochran <richardcochran@gmail.com>

 *

 jiffies */

ms */

 ms */

/*

 * Returns zero if matching event type was found.

 use spin_lock_irqsave() here as it has to run very fast */

 PTP clock operations */

 timeout any expired skbs over 1s */

	/* cpts_rx_timestamp() is called before eth_type_trans(), so

	 * skb MAC Hdr properties are not configured yet. Hence need to

	 * reset skb MAC header here

 Always defer TX TS processing to PTP worker */

 get the timestamp for timeouts */

 Drop all packet */

	/* Calc the maximum number of seconds which we can run before

	 * wrapping around.

	/* limit conversation rate to 10 sec as higher values will produce

	 * too small mult factors and so reduce the conversion accuracy

 Calc overflow check period (maxsec / 2) */

 refclk selection supported not for all SoCs */

 try get clk from dev node for compatibility */

	/* save cc.mult original value as it can be modified

	 * by cpts_ptp_adjfreq().

 SPDX-License-Identifier: GPL-2.0

/* TI K3 CPPI5 descriptors pool API

 *

 * Copyright (C) 2020 Texas Instruments Incorporated - http://www.ti.com

 dma_alloc map */

 frees pool->name */

 frees pool->name */

 SPDX-License-Identifier: GPL-2.0

/* Texas Instruments Ethernet Switch Driver

 *

 * Copyright (C) 2013 Texas Instruments

 *

 * Module Author: Mugunthan V N <mugunthanvnm@ti.com>

 *

 AM33xx SoC specific definitions for the CONTROL port */

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments Ethernet Switch Driver

 *

 * Copyright (C) 2012 Texas Instruments

 *

		/* Enabling promiscuous mode for one interface will be

		 * common for both the interface as the interface shares

		 * the same hardware resource.

 Enable Bypass */

 Disable Bypass */

 Disable Learn for all ports (host is port 0 and slaves are port 1 and up */

 Clear All Untouched entries */

 Clear all mcast from ALE */

 Flood All Unicast Packets to Host port */

 Don't Flood All Unicast Packets to Host port */

 Enable Learn for all ports (host is port 0 and slaves are port 1 and up */

/**

 * cpsw_set_mc - adds multicast entry to the table if it's not added or deletes

 * if it's not deleted

 * @ndev: device to sync

 * @addr: address to be added or deleted

 * @vid: vlan id, if vid < 0 set/unset address for real device

 * @add: add address if the flag is set or remove otherwise

 vlan address is relevant if its sync_cnt != 0 */

 vlan address is relevant if its sync_cnt != 0 */

 Enable promiscuous mode */

 Disable promiscuous mode */

 Restore allmulti on vlans if necessary */

 add/remove mcast address either for real netdev or for vlan */

 In dual emac mode check for all interfaces */

			/* The packet received is for the interface which

			 * is already down and the other interface is up

			 * and running, instead of freeing which results

			 * in reducing of the number of rx descriptor in

			 * DMA engine, requeue page back to cpdma.

 the interface is going down, pages are purged */

 XDP prog can modify vlan tag, so can't use encap header */

 pass skb to netstack if no XDP prog or returned XDP_PASS */

 mark skb for recycling */

 set speed_in input in case RMII mode is used in 100Mbps */

 in band mode only works in 10Mbps RGMII mode */

 In Band mode */

 enable forwarding */

 disable forwarding */

 setup priority mapping */

		/* Increase RX FIFO size to 5 for supporting fullduplex

		 * flow control mode

		/* Increase RX FIFO size to 5 for supporting fullduplex

		 * flow control mode

 setup max packet size, and mac address */

 no link yet */

 Configure GMII_SEL register */

 soft reset the controller and initialize ale */

 switch to vlan unaware mode */

 setup host port priority mapping */

 restore resources after port reset */

 restore vlan configurations */

 restore MQPRIO offload */

 restore CBS offload */

 Notify the stack of the actual queue counts. */

 Initialize host and slave ports */

 Add default VLAN */

 initialize shared resources for every ndev */

 disable priority elevation */

 enable statistics collection only on all ports */

 Enable internal fifo flow control */

		/* create rxqs for both infs in dual mac as they use same pool

		 * and must be destroyed together when no users.

 Enable Interrupt pacing if configured */

	/* If there is no more tx desc left free then we need to

	 * tell the kernel to stop sending us tx frames.

 Barrier, so that stop_queue visible to other cpus */

 Barrier, so that stop_queue visible to other cpus */

		/* In dual EMAC, reserved VLAN id should not be used for

		 * creating VLAN interfaces as this can break the dual

		 * EMAC port separation

	/*

	 * Populate all the child nodes here...

 We do not want to force this, as in some cases may not have child */

 This is no slave child node, continue */

			/* In the case of a fixed PHY, the DT node associated

			 * to the PHY is the Ethernet MAC DT node.

 register the network device */

 sentinel */ },

 sentinel */ }

 RX IRQ */

 TX IRQ */

 get misc irq*/

	/*

	 * This may be required here for child devices.

	/* Need to enable clocks with runtime PM api to access module

	 * registers

 setup netdev */

 register the network device */

	/* Grab RX and TX IRQs. Note that we also have RX_THRESHOLD and

	 * MISC IRQs which are always kept disabled with this driver so

	 * we will not request them.

	 *

	 * If anyone wants to implement support for those, make sure to

	 * first request and append them to irqs_table array.

 Enable misc CPTS evnt_pend IRQ */

 Select sleep pin state */

 Select default pin state */

 shut up ASSERT_RTNL() warning in netif_set_real_num_tx/rx_queues */

 SPDX-License-Identifier: GPL-2.0

/*

 * SGMI module initialisation

 *

 * Copyright (C) 2014 Texas Instruments Incorporated

 * Authors:	Sandeep Nair <sandeep_n@ti.com>

 *		Sandeep Paulraj <s-paulraj@ti.com>

 *		Wingman Kwok <w-kwok2@ti.com>

 *

 SGMII registers */

 port is 0 based */

 Soft reset */

 port is 0 based */

 Initiate a soft reset */

 Wait for the SerDes pll to lock */

 SPDX-License-Identifier: GPL-2.0+

/*

 * DaVinci Ethernet Medium Access Controller

 *

 * DaVinci EMAC is based upon CPPI 3.0 TI DMA engine

 *

 * Copyright (C) 2009 Texas Instruments.

 *

 * ---------------------------------------------------------------------------

 * History:

 * 0-5 A number of folks worked on this driver in bits and pieces but the major

 *     contribution came from Suraj Iyer and Anant Gole

 * 6.0 Anant Gole - rewrote the driver as per Linux conventions

 * 6.1 Chaithrika U S - added support for Gigabit and RMII features,

 *     PHY layer usage

 Netif debug messages possible */

 version info */

 Configuration items */

 Do not pass CRC up to frames */

 EMAC proprietary QoS disabled */

 No buffer chain */

 Discard Maccontrol frames */

 Discard short frames */

 Discard error frames */

 Promiscuous disabled */

 Promiscuous channel is 0 */

 Broadcast enabled */

 Broadcast channel is 0 */

 Multicast enabled */

 Multicast channel is 0 */

 TX Priority is fixed */

 TX pacing NOT supported*/

 Buffer offset to DMA (future) */

 Minimum ethernet pkt size */

 Default 0th channel */

 Default 0th channel */

 Max TX channels configured */

 Max RX channels configured */

 Default NAPI poll weight */

 Buffer descriptor parameters */

 TX max service BD's */

 should = netdev->weight */

 EMAC register related defines */

 RX MBP register bit positions */

 EMAC register definitions/bit maps used */

 EMAC mac_control register */

 GIGABIT MODE related bits */

 EMAC mac_status register */

 EMAC RX register masks */

 MAC_IN_VECTOR (0x180) register bit fields */

* NOTE:: For DM646x the IN_VECTOR has changed */

 CPPI bit positions */

 only CPPI bytes */

 Max hardware defines */

 Max hardware channels */

 Max mcast addr's */

 EMAC Peripheral Device Register Memory Layout structure */

 EMAC statistics registers */

 EMAC DM644x control registers */

 EMAC DM644x control module masks */

 EMAC DM646X control module registers */

 EMAC DM646X control module masks */

 EMAC EOI codes for C0 */

 EMAC Stats Clear Mask */

/* emac_priv: EMAC private data structure

 *

 * EMAC adapter private data structure

 1=link on, 0=link off */

 0=Auto Neg, 1=No PHY, 10,100, 1000 - mbps */

 Link duplex: 0=Half, 1=Full */

platform specific members*/

 EMAC TX Host Error description strings */

 EMAC RX Host Error description strings */

 Helper macros */

/**

 * emac_get_drvinfo - Get EMAC driver information

 * @ndev: The DaVinci EMAC network adapter

 * @info: ethtool info structure containing name and version

 *

 * Returns EMAC driver information (name and version)

 *

/**

 * emac_get_coalesce - Get interrupt coalesce settings for this device

 * @ndev : The DaVinci EMAC network adapter

 * @coal : ethtool coalesce settings structure

 * @kernel_coal: ethtool CQE mode setting structure

 * @extack: extack for reporting error messages

 *

 * Fetch the current interrupt coalesce settings

 *

/**

 * emac_set_coalesce - Set interrupt coalesce settings for this device

 * @ndev : The DaVinci EMAC network adapter

 * @coal : ethtool coalesce settings structure

 * @kernel_coal: ethtool CQE mode setting structure

 * @extack: extack for reporting error messages

 *

 * Set interrupt coalesce parameters

 *

			/*

			 * Interrupt pacer works with 4us Pulse, we can

			 * throttle further by dilating the 4us pulse.

/* ethtool_ops: DaVinci EMAC Ethtool structure

 *

 * Ethtool support for EMAC adapter

/**

 * emac_update_phystatus - Update Phy status

 * @priv: The DaVinci EMAC private adapter structure

 *

 * Updates phy status and takes action for network queue if required

 * based upon link status

 *

 We get called only if link has changed (speed/duplex/status) */

 Clear the GIG bit and GIGFORCE bit */

 Update mac_control if changed */

 link ON */

 reactivate the transmit queue if it is stopped */

 link OFF */

/**

 * hash_get - Calculate hash value from mac address

 * @addr: mac address to delete from hash table

 *

 * Calculates hash value from mac address

 *

/**

 * emac_hash_add - Hash function to add mac addr from hash table

 * @priv: The DaVinci EMAC private adapter structure

 * @mac_addr: mac address to delete from hash table

 *

 * Adds mac address to the internal hash table

 *

 set the hash bit only if not previously set */

 hash value changed */

 incr counter for num of mcast addr's mapped to "this" hash bit */

/**

 * emac_hash_del - Hash function to delete mac addr from hash table

 * @priv: The DaVinci EMAC private adapter structure

 * @mac_addr: mac address to delete from hash table

 *

 * Removes mac address from the internal hash table

 *

 dec cntr for num of mcast addr's mapped to this hash bit */

	/* if counter still > 0, at least one multicast address refers

 return 1 to indicate change in mac_hash registers reqd */

 EMAC multicast operation */

/**

 * emac_add_mcast - Set multicast address in the EMAC adapter (Internal)

 * @priv: The DaVinci EMAC private adapter structure

 * @action: multicast operation to perform

 * @mac_addr: mac address to set

 *

 * Set multicast addresses in EMAC adapter - internal function

 *

 write to the hardware only if the register status chances */

/**

 * emac_dev_mcast_set - Set multicast address in the EMAC adapter

 * @ndev: The DaVinci EMAC network adapter

 *

 * Set multicast addresses in EMAC adapter

 *

 program multicast address list into EMAC hardware */

 Set mbp config register */

/*************************************************************************

 *  EMAC Hardware manipulation

/**

 * emac_int_disable - Disable EMAC module interrupt (from adapter)

 * @priv: The DaVinci EMAC private adapter structure

 *

 * Disable EMAC interrupt on the adapter

 *

		/* Program C0_Int_En to zero to turn off

 NOTE: Rx Threshold and Misc interrupts are not disabled */

 NOTE: Rx Threshold and Misc interrupts are not enabled */

 ack rxen only then a new pulse will be generated */

 ack txen- only then a new pulse will be generated */

 Set DM644x control registers for interrupt control */

/**

 * emac_int_enable - Enable EMAC module interrupt (from adapter)

 * @priv: The DaVinci EMAC private adapter structure

 *

 * Enable EMAC interrupt on the adapter

 *

		/* In addition to turning on interrupt Enable, we need

		 * ack by writing appropriate values to the EOI

 NOTE: Rx Threshold and Misc interrupts are not enabled */

 Set DM644x control registers for interrupt control */

/**

 * emac_irq - EMAC interrupt handler

 * @irq: interrupt number

 * @dev_id: EMAC network adapter data structure ptr

 *

 * EMAC Interrupt handler - we only schedule NAPI and not process any packets

 * here. EVen the interrupt status is checked (TX/RX/Err) in NAPI poll function

 *

 * Returns interrupt handled condition

 we are closing down, so dont process anything */

 free and bail if we are shutting down */

 recycle on receive error */

 feed received packet up the stack */

 alloc a new packet for receive */

	/* Check whether the queue is stopped due to stalled tx dma, if the

	 * queue is stopped then start the queue as we have free desc for tx

/**

 * emac_dev_xmit - EMAC Transmit function

 * @skb: SKB pointer

 * @ndev: The DaVinci EMAC network adapter

 *

 * Called by the system to transmit a packet  - we queue the packet in

 * EMAC hardware transmit queue

 *

 * Returns success(NETDEV_TX_OK) or error code (typically out of desc's)

 If no link, return */

	/* If there is no more tx desc left free then we need to

	 * tell the kernel to stop sending us tx frames.

/**

 * emac_dev_tx_timeout - EMAC Transmit timeout function

 * @ndev: The DaVinci EMAC network adapter

 * @txqueue: the index of the hung transmit queue

 *

 * Called when system detects that a skb timeout period has expired

 * potentially due to a fault in the adapter in not being able to send

 * it out on the wire. We teardown the TX channel assuming a hardware

 * error and re-initialize the TX channel for hardware operation

 *

/**

 * emac_set_type0addr - Set EMAC Type0 mac address

 * @priv: The DaVinci EMAC private adapter structure

 * @ch: RX channel number

 * @mac_addr: MAC address to set in device

 *

 * Called internally to set Type0 mac address of the adapter (Device)

 *

 * Returns success (0) or appropriate error code (none as of now)

/**

 * emac_set_type1addr - Set EMAC Type1 mac address

 * @priv: The DaVinci EMAC private adapter structure

 * @ch: RX channel number

 * @mac_addr: MAC address to set in device

 *

 * Called internally to set Type1 mac address of the adapter (Device)

 *

 * Returns success (0) or appropriate error code (none as of now)

/**

 * emac_set_type2addr - Set EMAC Type2 mac address

 * @priv: The DaVinci EMAC private adapter structure

 * @ch: RX channel number

 * @mac_addr: MAC address to set in device

 * @index: index into RX address entries

 * @match: match parameter for RX address matching logic

 *

 * Called internally to set Type2 mac address of the adapter (Device)

 *

 * Returns success (0) or appropriate error code (none as of now)

/**

 * emac_setmac - Set mac address in the adapter (internal function)

 * @priv: The DaVinci EMAC private adapter structure

 * @ch: RX channel number

 * @mac_addr: MAC address to set in device

 *

 * Called internally to set the mac address of the adapter (Device)

 *

 * Returns success (0) or appropriate error code (none as of now)

/**

 * emac_dev_setmac_addr - Set mac address in the adapter

 * @ndev: The DaVinci EMAC network adapter

 * @addr: MAC address to set in device

 *

 * Called by the system to set the mac address of the adapter (Device)

 *

 * Returns success (0) or appropriate error code (none as of now)

 Store mac addr in priv and rx channel and set it in EMAC hw */

 MAC address is configured only after the interface is enabled. */

/**

 * emac_hw_enable - Enable EMAC hardware for packet transmission/reception

 * @priv: The DaVinci EMAC private adapter structure

 *

 * Enables EMAC hardware for packet processing - enables PHY, enables RX

 * for packet reception and enables device interrupts and then NAPI

 *

 * Returns success (0) or appropriate error code (none right now)

 Soft reset */

 Disable interrupt & Set pacing for more interrupts initially */

 Full duplex enable bit set when auto negotiation happens */

 Enable MII */

 Enable NAPI and interrupts */

/**

 * emac_poll - EMAC NAPI Poll function

 * @napi: pointer to the napi_struct containing The DaVinci EMAC network adapter

 * @budget: Number of receive packets to process (as told by NAPI layer)

 *

 * NAPI Poll function implemented to process packets as per budget. We check

 * the type of interrupt on the device and accordingly call the TX or RX

 * packet processing functions. We follow the budget for RX processing and

 * also put a cap on number of TX pkts processed through config param. The

 * NAPI schedule function is called if more packets pending.

 *

 * Returns number of packets received (in most cases; else TX pkts - rarely)

 Check interrupt vectors and call packet processing */

 TX processing */

 RX processing */

/**

 * emac_poll_controller - EMAC Poll controller function

 * @ndev: The DaVinci EMAC network adapter

 *

 * Polled functionality used by netconsole and others in non interrupt mode

 *

 check the mode of operation - full/half duplex */

/*************************************************************************

 *  Linux Driver Model

/**

 * emac_devioctl - EMAC adapter ioctl

 * @ndev: The DaVinci EMAC network adapter

 * @ifrq: request parameter

 * @cmd: command parameter

 *

 * EMAC driver ioctl function

 *

 * Returns success(0) or appropriate error code

 TODO: Add phy read and write and private statistics get feature */

/**

 * emac_dev_open - EMAC device open

 * @ndev: The DaVinci EMAC network adapter

 *

 * Called when system wants to start the interface. We init TX/RX channels

 * and enable the hardware for packet reception/transmission and start the

 * network queue.

 *

 * Returns 0 for a successful open, or appropriate error code

 Configuration items */

 Request IRQ */

 prepare counters for rollback in case of an error */

 Start/Enable EMAC hardware */

 Enable Interrupt pacing if configured */

 use the first phy on the bus if pdata did not give us a phy id */

		/* NOTE: we can't use bus_find_device_by_name() here because

		 * the device name is not guaranteed to be 'davinci_mdio'. On

		 * some systems it can be 'davinci_mdio.0' so we need to use

		 * strncmp() against the first part of the string to correctly

		 * match it.

 reference taken by bus_find_device */

 No PHY , fix the link, speed and duplex settings */

		/* at the first iteration, irq_num is already set to the

		 * right value

/**

 * emac_dev_stop - EMAC device stop

 * @ndev: The DaVinci EMAC network adapter

 *

 * Called when system wants to stop or down the interface. We stop the network

 * queue, disable interrupts and cleanup TX/RX channels.

 *

 * We return the statistics in net_device_stats structure pulled from emac

 inform the upper layers. */

 Free IRQ */

/**

 * emac_dev_getnetstats - EMAC get statistics function

 * @ndev: The DaVinci EMAC network adapter

 *

 * Called when system wants to get statistics from the device.

 *

 * We return the statistics in net_device_stats structure pulled from emac

 update emac hardware stats and reset the registers*/

/**

 * davinci_emac_probe - EMAC device probe

 * @pdev: The DaVinci EMAC device that we are removing

 *

 * Called when probing for emac devicesr. We get details of instances and

 * resource information from platform init and register a network device

 * and allocate resources necessary for driver to perform

 obtain emac clock from kernel */

 TODO: Probe PHY here if possible */

 MAC addr and PHY mask , RMII enable info from platform_data */

 Get EMAC platform data */

 Use random MAC if still none obtained. */

 register the network device */

/**

 * davinci_emac_remove - EMAC device remove

 * @pdev: The DaVinci EMAC device that we are removing

 *

 * Called when removing the device driver. We disable clock usage and release

 * the resources taken up by the driver and unregister network device

 davinci_emac_driver: EMAC platform driver structure */

/**

 * davinci_emac_init - EMAC driver module init

 *

 * Called when initializing the driver. We register the driver with

 * the platform.

/**

 * davinci_emac_exit - EMAC driver module exit

 *

 * Called when exiting the driver completely. We unregister the driver with

 * the platform and exit

/*******************************************************************************

 *

 *  Linux ThunderLAN Driver

 *

 *  tlan.c

 *  by James Banks

 *

 *  (C) 1997-1998 Caldera, Inc.

 *  (C) 1998 James Banks

 *  (C) 1999-2001 Torben Mathiasen

 *  (C) 2002 Samuel Chessman

 *

 *  This software may be used and distributed according to the terms

 *  of the GNU General Public License, incorporated herein by reference.

 *

 ** Useful (if not required) reading:

 *

 *		Texas Instruments, ThunderLAN Programmer's Guide,

 *			TI Literature Number SPWU013A

 *			available in PDF format from www.ti.com

 *		Level One, LXT901 and LXT970 Data Sheets

 *			available in PDF format from www.level1.com

 *		National Semiconductor, DP83840A Data Sheet

 *			available in PDF format from www.national.com

 *		Microchip Technology, 24C01A/02A/04A Data Sheet

 *			available in PDF format from www.microchip.com

 *

 For removing EISA devices */

 Set speed, duplex and aui settings */

/* Turn on debugging.

 * See Documentation/networking/device_drivers/ethernet/ti/tlan.rst for details

 EISA card */

 EISA card */

/*

  static int	tlan_phy_nop(struct net_device *);

  static int	tlan_phy_internal_check(struct net_device *);

  static int	tlan_phy_internal_service(struct net_device *);

  static int	tlan_phy_dp83840a_check(struct net_device *);

/*****************************************************************************

******************************************************************************



ThunderLAN driver primary functions



these functions are more or less common to all linux network drivers.



******************************************************************************

/***************************************************************

 *	tlan_remove_one

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		None

 *

 *	Goes through the TLanDevices list and frees the device

 *	structs and memory associated with each device (lists

 *	and buffers).  It also ureserves the IO port regions

 *	associated with this device.

 *

	/* NOTE: It might not be necessary to read the stats before a

	   reset if you don't care what the values are.

 Reset and power down phy */

	/* Use new style PCI probing. Now the kernel will

/*

***************************************************************

*	tlan_probe1

*

*	Returns:

*		0 on success, error code on error

*	Parms:

*		none

*

*	The name is lower case to fit in with all the rest of

*	the netcard_probe names.  This function looks for

*	another TLan based adapter, setting it up with the

*	allocated device struct if one is found.

*	tlan_probe has been ported to the new net API and

*	now allocates its own device structure. This function

*	is also used by modules.

*

  CONFIG_PCI  */

 Is this a PCI device? */

 EISA card */

		/* This is a hack. We need to know which board structure

 NetFlex-3/E */

 TLAN 2.3 */

 TLAN 1.0 */

 Kernel parameters */

	/* This will be used when we get an adapter error from

 pdev is NULL if this is an EISA device */

 Module loading/unloading */

/**************************************************************

 *	tlan_eisa_probe

 *

 *	Returns: 0 on success, 1 otherwise

 *

 *	Parms:	 None

 *

 *

 *	This functions probes for EISA devices and calls

 *	TLan_probe1 when one is found.

 *

 Loop through all slots of the EISA bus */

 check if adapter is enabled */

 Get irq from board */

 Setup the newly found eisa adapter */

/***************************************************************

 *	tlan_init

 *

 *	Returns:

 *		0 on success, error code otherwise.

 *	Parms:

 *		dev	The structure of the device to be

 *			init'ed.

 *

 *	This function completes the initialization of the

 *	device structure and driver.  It reserves the IO

 *	addresses, allocates memory for the lists and bounce

 *	buffers, retrieves the MAC address from the eeprom

 *	and assignes the device's methods.

 *

 Olicom OC-2325/OC-2326 have the address byte-swapped */

 Device methods */

/***************************************************************

 *	tlan_open

 *

 *	Returns:

 *		0 on success, error code otherwise.

 *	Parms:

 *		dev	Structure of device to be opened.

 *

 *	This routine puts the driver and TLAN adapter in a

 *	state where it is ready to send and receive packets.

 *	It allocates the IRQ, resets and brings the adapter

 *	out of reset, and allows interrupts.  It also delays

 *	the startup for autonegotiation or sends a Rx GO

 *	command to the adapter, as appropriate.

 *

/**************************************************************

 *	tlan_ioctl

 *

 *	Returns:

 *		0 on success, error code otherwise

 *	Params:

 *		dev	structure of device to receive ioctl.

 *

 *		rq	ifreq structure to hold userspace data.

 *

 *		cmd	ioctl command.

 *

 *

 get address of MII PHY in use. */

 read MII PHY register. */

 write MII PHY register. */

/***************************************************************

 *	tlan_tx_timeout

 *

 *	Returns: nothing

 *

 *	Params:

 *		dev	structure of device which timed out

 *			during transmit.

 *

 Ok so we timed out, lets see what we can do about it...*/

 prevent tx timeout */

/***************************************************************

 *	tlan_tx_timeout_work

 *

 *	Returns: nothing

 *

 *	Params:

 *		work	work item of device which timed out

 *

/***************************************************************

 *	tlan_start_tx

 *

 *	Returns:

 *		0 on success, non-zero on failure.

 *	Parms:

 *		skb	A pointer to the sk_buff containing the

 *			frame to be sent.

 *		dev	The device to send the data on.

 *

 *	This function adds a frame to the Tx list to be sent

 *	ASAP.  First it	verifies that the adapter is ready and

 *	there is room in the queue.  Then it sets up the next

 *	available list, copies the frame to the	corresponding

 *	buffer.  If the adapter Tx channel is idle, it gives

 *	the adapter a Tx Go command on the list, otherwise it

 *	sets the forward address of the previous list to point

 *	to this one.  Then it frees the sk_buff.

 *

/***************************************************************

 *	tlan_handle_interrupt

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		irq	The line on which the interrupt

 *			occurred.

 *		dev_id	A pointer to the device assigned to

 *			this irq line.

 *

 *	This function handles an interrupt generated by its

 *	assigned TLAN adapter.  The function deactivates

 *	interrupts on its adapter, records the type of

 *	interrupt, executes the appropriate subhandler, and

 *	acknowdges the interrupt to the adapter (thus

 *	re-enabling adapter interrupts.

 *

/***************************************************************

 *	tlan_close

 *

 *	Returns:

 *		An error code.

 *	Parms:

 *		dev	The device structure of the device to

 *			close.

 *

 *	This function shuts down the adapter.  It records any

 *	stats, puts the adapter into reset state, deactivates

 *	its time as needed, and	frees the irq it is using.

 *

/***************************************************************

 *	tlan_get_stats

 *

 *	Returns:

 *		A pointer to the device's statistics structure.

 *	Parms:

 *		dev	The device structure to return the

 *			stats for.

 *

 *	This function updates the devices statistics by reading

 *	the TLAN chip's onboard registers.  Then it returns the

 *	address of the statistics structure.

 *

 Should only read stats if open ? */

/***************************************************************

 *	tlan_set_multicast_list

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		dev	The device structure to set the

 *			multicast list for.

 *

 *	This function sets the TLAN adaptor to various receive

 *	modes.  If the IFF_PROMISC flag is set, promiscuous

 *	mode is acitviated.  Otherwise,	promiscuous mode is

 *	turned off.  If the IFF_ALLMULTI flag is set, then

 *	the hash table is set to receive all group addresses.

 *	Otherwise, the first three multicast addresses are

 *	stored in AREG_1-3, and the rest are selected via the

 *	hash table, as necessary.

 *

/*****************************************************************************

******************************************************************************



ThunderLAN driver interrupt vectors and table



please see chap. 4, "Interrupt Handling" of the "ThunderLAN

Programmer's Guide" for more informations on handling interrupts

generated by TLAN based adapters.



******************************************************************************

/***************************************************************

 *	tlan_handle_tx_eof

 *

 *	Returns:

 *		1

 *	Parms:

 *		dev		Device assigned the IRQ that was

 *				raised.

 *		host_int	The contents of the HOST_INT

 *				port.

 *

 *	This function handles Tx EOF interrupts which are raised

 *	by the adapter when it has completed sending the

 *	contents of a buffer.  If detemines which list/buffer

 *	was completed and resets it.  If the buffer was the last

 *	in the channel (EOC), then the function checks to see if

 *	another buffer is ready to send, and if so, sends a Tx

 *	Go command.  Finally, the driver activates/continues the

 *	activity LED.

 *

/***************************************************************

 *	TLan_HandleStatOverflow

 *

 *	Returns:

 *		1

 *	Parms:

 *		dev		Device assigned the IRQ that was

 *				raised.

 *		host_int	The contents of the HOST_INT

 *				port.

 *

 *	This function handles the Statistics Overflow interrupt

 *	which means that one or more of the TLAN statistics

 *	registers has reached 1/2 capacity and needs to be read.

 *

/***************************************************************

 *	TLan_HandleRxEOF

 *

 *	Returns:

 *		1

 *	Parms:

 *		dev		Device assigned the IRQ that was

 *				raised.

 *		host_int	The contents of the HOST_INT

 *				port.

 *

 *	This function handles the Rx EOF interrupt which

 *	indicates a frame has been received by the adapter from

 *	the net and the frame has been transferred to memory.

 *	The function determines the bounce buffer the frame has

 *	been loaded into, creates a new sk_buff big enough to

 *	hold the frame, and sends it to protocol stack.  It

 *	then resets the used buffer and appends it to the end

 *	of the list.  If the frame was the last in the Rx

 *	channel (EOC), the function restarts the receive channel

 *	by sending an Rx Go command to the adapter.  Then it

 *	activates/continues the activity LED.

 *

/***************************************************************

 *	tlan_handle_dummy

 *

 *	Returns:

 *		1

 *	Parms:

 *		dev		Device assigned the IRQ that was

 *				raised.

 *		host_int	The contents of the HOST_INT

 *				port.

 *

 *	This function handles the Dummy interrupt, which is

 *	raised whenever a test interrupt is generated by setting

 *	the Req_Int bit of HOST_CMD to 1.

 *

/***************************************************************

 *	tlan_handle_tx_eoc

 *

 *	Returns:

 *		1

 *	Parms:

 *		dev		Device assigned the IRQ that was

 *				raised.

 *		host_int	The contents of the HOST_INT

 *				port.

 *

 *	This driver is structured to determine EOC occurrences by

 *	reading the CSTAT member of the list structure.  Tx EOC

 *	interrupts are disabled via the DIO INTDIS register.

 *	However, TLAN chips before revision 3.0 didn't have this

 *	functionality, so process EOC events if this is the

 *	case.

 *

/***************************************************************

 *	tlan_handle_status_check

 *

 *	Returns:

 *		0 if Adapter check, 1 if Network Status check.

 *	Parms:

 *		dev		Device assigned the IRQ that was

 *				raised.

 *		host_int	The contents of the HOST_INT

 *				port.

 *

 *	This function handles Adapter Check/Network Status

 *	interrupts generated by the adapter.  It checks the

 *	vector in the HOST_INT register to determine if it is

 *	an Adapter Check interrupt.  If so, it resets the

 *	adapter.  Otherwise it clears the status registers

 *	and services the PHY.

 *

/***************************************************************

 *	tlan_handle_rx_eoc

 *

 *	Returns:

 *		1

 *	Parms:

 *		dev		Device assigned the IRQ that was

 *				raised.

 *		host_int	The contents of the HOST_INT

 *				port.

 *

 *	This driver is structured to determine EOC occurrences by

 *	reading the CSTAT member of the list structure.  Rx EOC

 *	interrupts are disabled via the DIO INTDIS register.

 *	However, TLAN chips before revision 3.0 didn't have this

 *	CSTAT member or a INTDIS register, so if this chip is

 *	pre-3.0, process EOC interrupts normally.

 *

/*****************************************************************************

******************************************************************************



ThunderLAN driver timer function



******************************************************************************

/***************************************************************

 *	tlan_timer

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		data	A value given to add timer when

 *			add_timer was called.

 *

 *	This function handles timed functionality for the

 *	TLAN driver.  The two current timer uses are for

 *	delaying for autonegotionation and driving the ACT LED.

 *	-	Autonegotiation requires being allowed about

 *		2 1/2 seconds before attempting to transmit a

 *		packet.  It would be a very bad thing to hang

 *		the kernel this long, so the driver doesn't

 *		allow transmission 'til after this time, for

 *		certain PHYs.  It would be much nicer if all

 *		PHYs were interrupt-capable like the internal

 *		PHY.

 *	-	The ACT LED, which shows adapter activity, is

 *		driven by the driver, and so must be left on

 *		for a short period to power up the LED so it

 *		can be seen.  This delay can be changed by

 *		changing the TLAN_TIMER_ACT_DELAY in tlan.h,

 *		if desired.  100 ms  produces a slightly

 *		sluggish response.

 *

/*****************************************************************************

******************************************************************************



ThunderLAN driver adapter related routines



******************************************************************************

/***************************************************************

 *	tlan_reset_lists

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		dev	The device structure with the list

 *			structures to be reset.

 *

 *	This routine sets the variables associated with managing

 *	the TLAN lists to their initial values.

 *

 in case ran out of memory early, clear bits */

/***************************************************************

 *	tlan_print_dio

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		io_base		Base IO port of the device of

 *				which to print DIO registers.

 *

 *	This function prints out all the internal (DIO)

 *	registers of a TLAN chip.

 *

/***************************************************************

 *	TLan_PrintList

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		list	A pointer to the struct tlan_list structure to

 *			be printed.

 *		type	A string to designate type of list,

 *			"Rx" or "Tx".

 *		num	The index of the list.

 *

 *	This function prints out the contents of the list

 *	pointed to by the list parameter.

 *

 for (i = 0; i < 10; i++) { */

/***************************************************************

 *	tlan_read_and_clear_stats

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		dev	Pointer to device structure of adapter

 *			to which to read stats.

 *		record	Flag indicating whether to add

 *

 *	This functions reads all the internal status registers

 *	of the TLAN chip, which clears them as a side effect.

 *	It then either adds the values to the device's status

 *	struct, or discards them, depending on whether record

 *	is TLAN_RECORD (!=0)  or TLAN_IGNORE (==0).

 *

/***************************************************************

 *	TLan_Reset

 *

 *	Returns:

 *		0

 *	Parms:

 *		dev	Pointer to device structure of adapter

 *			to be reset.

 *

 *	This function resets the adapter and it's physical

 *	device.  See Chap. 3, pp. 9-10 of the "ThunderLAN

 *	Programmer's Guide" for details.  The routine tries to

 *	implement what is detailed there, though adjustments

 *	have been made.

 *

  1.	Assert reset bit. */

  2.	Turn off interrupts. (Probably isn't necessary) */

  3.	Clear AREGs and HASHs. */

  4.	Setup NetConfig register. */

  5.	Load Ld_Tmr and Ld_Thr in HOST_CMD. */

  6.	Unreset the MII by setting NMRST (in NetSio) to 1. */

  7.	Setup the remaining registers. */

 don't power down internal PHY if we're going to use it */

 We only support link info on Nat.Sem. PHY's */

 Enabling link beat monitoring */

/***************************************************************

 *	tlan_set_mac

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		dev	Pointer to device structure of adapter

 *			on which to change the AREG.

 *		areg	The AREG to set the address in (0 - 3).

 *		mac	A pointer to an array of chars.  Each

 *			element stores one byte of the address.

 *			IE, it isn't in ascii.

 *

 *	This function transfers a MAC address to one of the

 *	TLAN AREGs (address registers).  The TLAN chip locks

 *	the register on writing to offset 0 and unlocks the

 *	register after writing to offset 5.  If NULL is passed

 *	in mac, then the AREG is filled with 0's.

 *

/*****************************************************************************

******************************************************************************



ThunderLAN driver PHY layer routines



******************************************************************************

/*********************************************************************

 *	__tlan_phy_print

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		dev	A pointer to the device structure of the

 *			TLAN device having the PHYs to be detailed.

 *

 *	This function prints the registers a PHY (aka transceiver).

 *

/*********************************************************************

 *	tlan_phy_detect

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		dev	A pointer to the device structure of the adapter

 *			for which the PHY needs determined.

 *

 *	So far I've found that adapters which have external PHYs

 *	may also use the internal PHY for part of the functionality.

 *	(eg, AUI/Thinnet).  This function finds out if this TLAN

 *	chip has an internal PHY, and then finds the first external

 *	PHY (starting from address 0) if it exists).

 *

 if using internal PHY, the external PHY must be powered on */

 just isolate it from MII */

	/* Wait for 50 ms and powerup

	 * This is arbitrary.  It is intended to make sure the

	 * transceiver settles.

	/* Wait for 500 ms and reset the

	 * transceiver.  The TLAN docs say both 50 ms and

	 * 500 ms, so do the longer, just in case.

	/* Wait for 500 ms and initialize.

	 * I don't remember why I wait this long.

	 * I've changed this to 50ms, as it seems long enough.

 Set Auto-Neg advertisement */

 Enablee Auto-Neg */

 Restart Auto-Neg */

			/* Wait for 4 sec for autonegotiation

			 * to complete.  The max spec time is less than this

			 * but the card need additional time to start AN.

			 * .5 sec should be plenty extra.

	/* Wait for 2 sec to give the transceiver time

	 * to establish link.

		/* Wait for 8 sec to give the process

		 * more time.  Perhaps we should fail after a while.

 switch to internal PHY for 10 Mbps */

	/* Wait for 100 ms.  No reason in partiticular.

/*********************************************************************

 *

 *     tlan_phy_monitor

 *

 *     Returns:

 *	      None

 *

 *     Params:

 *	      data	     The device structure of this device.

 *

 *

 *     This function monitors PHY condition by reading the status

 *     register via the MII bus, controls LINK LED and notifies the

 *     kernel about link state.

 *

 Get PHY status register */

 Check if link has been lost */

 power down internal PHY */

 set to external PHY */

 restart autonegotiation */

 Link restablished? */

/*****************************************************************************

******************************************************************************



ThunderLAN driver MII routines



these routines are based on the information in chap. 2 of the

"ThunderLAN Programmer's Guide", pp. 15-24.



******************************************************************************

/***************************************************************

 *	__tlan_mii_read_reg

 *

 *	Returns:

 *		false	if ack received ok

 *		true	if no ack received or other error

 *

 *	Parms:

 *		dev		The device structure containing

 *				The io address and interrupt count

 *				for this device.

 *		phy		The address of the PHY to be queried.

 *		reg		The register whose contents are to be

 *				retrieved.

 *		val		A pointer to a variable to store the

 *				retrieved value.

 *

 *	This function uses the TLAN's MII bus to retrieve the contents

 *	of a given register on a PHY.  It sends the appropriate info

 *	and then reads the 16-bit register value from the MII bus via

 *	the TLAN SIO register.

 *

 start (01b) */

 read  (10b) */

 device #      */

 register #    */

 change direction */

 clock idle bit */

 wait 300ns */

 check for ACK */

 finish ACK */

 no ACK, so fake it */

 ACK, so read data */

 idle cycle */

/***************************************************************

 *	tlan_mii_send_data

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		base_port	The base IO port of the adapter	in

 *				question.

 *		dev		The address of the PHY to be queried.

 *		data		The value to be placed on the MII bus.

 *		num_bits	The number of bits in data that are to

 *				be placed on the MII bus.

 *

 *	This function sends on sequence of bits on the MII

 *	configuration bus.

 *

/***************************************************************

 *	TLan_MiiSync

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		base_port	The base IO port of the adapter in

 *				question.

 *

 *	This functions syncs all PHYs in terms of the MII configuration

 *	bus.

 *

/***************************************************************

 *	__tlan_mii_write_reg

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		dev		The device structure for the device

 *				to write to.

 *		phy		The address of the PHY to be written to.

 *		reg		The register whose contents are to be

 *				written.

 *		val		The value to be written to the register.

 *

 *	This function uses the TLAN's MII bus to write the contents of a

 *	given register on a PHY.  It sends the appropriate info and then

 *	writes the 16-bit register value from the MII configuration bus

 *	via the TLAN SIO register.

 *

 start (01b) */

 write (01b) */

 device #      */

 register #    */

 send ACK */

 send data */

 idle cycle */

/*****************************************************************************

******************************************************************************



ThunderLAN driver eeprom routines



the Compaq netelligent 10 and 10/100 cards use a microchip 24C02A

EEPROM.  these functions are based on information in microchip's

data sheet.  I don't know how well this functions will work with

other Eeproms.



******************************************************************************

/***************************************************************

 *	tlan_ee_send_start

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		io_base		The IO port base address for the

 *				TLAN device with the EEPROM to

 *				use.

 *

 *	This function sends a start cycle to an EEPROM attached

 *	to a TLAN chip.

 *

/***************************************************************

 *	tlan_ee_send_byte

 *

 *	Returns:

 *		If the correct ack was received, 0, otherwise 1

 *	Parms:	io_base		The IO port base address for the

 *				TLAN device with the EEPROM to

 *				use.

 *		data		The 8 bits of information to

 *				send to the EEPROM.

 *		stop		If TLAN_EEPROM_STOP is passed, a

 *				stop cycle is sent after the

 *				byte is sent after the ack is

 *				read.

 *

 *	This function sends a byte on the serial EEPROM line,

 *	driving the clock to send each bit. The function then

 *	reverses transmission direction and reads an acknowledge

 *	bit.

 *

 Assume clock is low, tx is enabled; */

 STOP, raise data while clock is high */

/***************************************************************

 *	tlan_ee_receive_byte

 *

 *	Returns:

 *		Nothing

 *	Parms:

 *		io_base		The IO port base address for the

 *				TLAN device with the EEPROM to

 *				use.

 *		data		An address to a char to hold the

 *				data sent from the EEPROM.

 *		stop		If TLAN_EEPROM_STOP is passed, a

 *				stop cycle is sent after the

 *				byte is received, and no ack is

 *				sent.

 *

 *	This function receives 8 bits of data from the EEPROM

 *	over the serial link.  It then sends and ack bit, or no

 *	ack and a stop bit.  This function is used to retrieve

 *	data after the address of a byte in the EEPROM has been

 *	sent.

 *

 Assume clock is low, tx is enabled; */

 ack = 0 */

 no ack = 1 (?) */

 STOP, raise data while clock is high */

/***************************************************************

 *	tlan_ee_read_byte

 *

 *	Returns:

 *		No error = 0, else, the stage at which the error

 *		occurred.

 *	Parms:

 *		io_base		The IO port base address for the

 *				TLAN device with the EEPROM to

 *				use.

 *		ee_addr		The address of the byte in the

 *				EEPROM whose contents are to be

 *				retrieved.

 *		data		An address to a char to hold the

 *				data obtained from the EEPROM.

 *

 *	This function reads a byte of information from an byte

 *	cell in the EEPROM.

 *

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments Ethernet Switch Driver ethtool intf

 *

 * Copyright (C) 2019 Texas Instruments

		/* Interrupt pacer works with 4us Pulse, we can

		 * throttle further by dilating the 4us pulse.

 Collect Davinci CPDMA stats for Rx and Tx Channel */

 update CPSW IP version */

 Disable NAPI scheduling */

	/* Stop all transmit queues for every network device.

 Barrier, so that stop_queue visible to other cpus */

 Handle rest of tx packets and stop cpdma channels */

 After this receive is started */

 Resume transmit for every affected interface */

 verify we have at least one channel in each direction */

 Inform stack about new count of queues */

 not supported */

 ignore ering->tx_pending - only rx_pending adjustment is supported */

 SPDX-License-Identifier: GPL-2.0

/*

 * Keystone NetCP Core driver

 *

 * Copyright (C) 2014 Texas Instruments Incorporated

 * Authors:	Sandeep Nair <sandeep_n@ti.com>

 *		Sandeep Paulraj <s-paulraj@ti.com>

 *		Cyril Chemparathy <cyril@ti.com>

 *		Santosh Shilimkar <santosh.shilimkar@ti.com>

 *		Murali Karicheri <m-karicheri2@ti.com>

 *		Wingman Kwok <w-kwok2@ti.com>

 Module management structures */

 Helper functions - Get/Set */

 No Endian conversion needed as this data is untouched by hw */

 use these macros to get sw data */

 No Endian conversion needed as this data is untouched by hw */

 use these macros to set sw data */

 Read the e-fuse value as 32 bit values to be endian independent */

 Module management routines */

 Find this module in the sub-tree for this device */

 If module not used for this device, skip it */

 Attach modules only if the primary module is probed */

 Attach module to interfaces */

 Now register the interface with netdev */

 If interface not registered then register now */

 Release the module from each interface */

 Remove the module from each instance */

 Remove the module from the module list */

 Module TX and RX Hook management */

		/* warning!!!! We are retrieving the virtual ptr in the sw_data

		 * field as a 32bit value. Will not work on 64bit machines

	/* warning!!!! We are retrieving the virtual ptr in the sw_data

	 * field as a 32bit value. Will not work on 64bit machines

	/* warning!!!! We are retrieving the virtual ptr in the sw_data

	 * field as a 32bit value. Will not work on 64bit machines

 Build a new sk_buff for the primary buffer */

 update data, tail and len */

 Fill in the page fragment list */

		/* warning!!!! We are retrieving the virtual ptr in the sw_data

		 * field as a 32bit value. Will not work on 64bit machines

 Free the descriptor */

 check for packet len and warn */

	/* Newer version of the Ethernet switch can trim the Ethernet FCS

	 * from the packet and is indicated in hw_cap. So trim it only for

	 * older h/w

 Call each of the RX hooks */

 Free the primary descriptor */

 Free the primary descriptor */

 push skb up the stack */

 Release descriptors and attached buffers from Rx FDQ */

 Allocate descriptor */

		/* warning!!!! We are retrieving the virtual ptr in the sw_data

		 * field as a 32bit value. Will not work on 64bit machines

 Allocate descriptor */

 Allocate a primary receive queue entry */

		/* warning!!!! We are saving the virtual ptr in the sw_data

		 * field as a 32bit value. Will not work on 64bit machines

 Allocate a secondary receive queue entry */

		/* warning!!!! We are saving the virtual ptr in the sw_data

		 * field as a 32bit value. Will not work on 64bit machines

 Push to FDQs */

 Refill Rx FDQ with descriptors & attached buffers */

 Calculate the FDQ deficit and refill */

 end for fdqs */

 NAPI poll */

		/* warning!!!! We are retrieving the virtual ptr in the sw_data

		 * field as a 32bit value. Will not work on 64bit machines

 Map the linear buffer */

 Handle the case where skb is fragmented in pages */

 frag list based linkage is not supported for now. */

 Find out where to inject the packet for transmission */

 Make sure some TX hook claimed the packet */

 update descriptor */

 psdata points to both native-endian and device-endian data */

	/* warning!!!! We are saving the virtual ptr in the sw_data

	 * field as a 32bit value. Will not work on 64bit machines

 submit packet descriptor */

 Submit the packet */

 If we get here, the skb has already been dropped */

 Check Tx pool count & stop subqueue if needed */

 first clear all marks */

 next add new entries, mark existing ones */

 finally sweep and callout into modules */

 Create Rx/Tx descriptor pools */

 open Tx completion queue */

 Set notification for Tx completion */

 open Rx completion queue */

 Set notification for Rx completion */

 open Rx FDQs */

 Open the device */

 Close the device */

 Recycle Rx descriptors from completion queue */

 Recycle Tx descriptors from completion queue */

 setup tc must be called under rtnl lock */

 Sanity-check the number of traffic classes requested */

 Configure traffic class to queue mappings */

 The following are stored as 32 bit */

 MTU range: 68 - 9486 */

 NAPI register */

 Register the network device */

 Notify each of the modules that the interface is going away */

 Allocate a new NETCP device instance */

 Initialize the NETCP device instance */

 create interfaces */

 Add the device instance to the list */

 Probe & attach any modules already registered */

 now that all modules are removed, clean up the interfaces */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2006, 2007 Eugene Konev

 *

 Next 2 are only used in cpmac_probe, so it's pointless to change them */

 frame size + 802.1q tag + FCS size */

 Ethernet registers */

/* Rx/Tx statistics

 * TODO: use some of them to fill stats in cpmac_stats()

 MDIO bus */

 enable all multicast mode */

			/* cpmac uses some strange mac address hashing

			 * (not crc32)

			/* The last update to eoq->hw_next didn't happen

			 * soon enough, and the receiver stopped here.

			 * Remember this descriptor so we can restart

			 * the receiver after freeing some space.

		/* We freed some buffers, but not the whole ring,

		 * add what we did free to the rx list

	/* Optimization: If we did not actually process an EOQ (perhaps because

	 * of quota limits), check to see if the tail of the queue has EOQ set.

	 * We should immediately restart in that case so that the receiver can

	 * restart and run in parallel with more packet processing.

	 * This lets us handle slightly larger bursts before running

	 * out of ring space (assuming dev->weight < ring_size)

		/* reset EOQ so the poll loop (above) doesn't try to

		 * restart this when it eventually gets to this descriptor.

		/* we ran out of packets to read,

		 * revert to interrupt-driven mode

	/* Something went horribly wrong.

	 * Reset hardware to try to recover rather than wedging.

			/* Can't find any documentation on what these

			 * error codes actually are. So just log them and hope..

 fixed phys bus */

 fixed phys bus */

 FIXME: unhardcode gpio&reset bits */

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments Ethernet Switch media-access-controller (MAC) submodule/

 * Ethernet MAC Sliver (CPGMAC_SL)

 *

 * Copyright (C) 2019 Texas Instruments

 *

 Set the soft reset bit */

 Wait for the bit to clear */

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments Ethernet Switch Driver

 *

 * Copyright (C) 2019 Texas Instruments

/* struct cpsw_common is not needed, kept here for compatibility

 * reasons witrh the old driver

	/* Enabling promiscuous mode for one interface will be

	 * common for both the interface as the interface shares

	 * the same hardware resource.

 Enable unknown unicast, reg/unreg mcast */

 Disable unknown unicast */

/**

 * cpsw_set_mc - adds multicast entry to the table if it's not added or deletes

 * if it's not deleted

 * @ndev: device to sync

 * @addr: address to be added or deleted

 * @vid: vlan id, if vid < 0 set/unset address for real device

 * @add: add address if the flag is set or remove otherwise

 vlan address is relevant if its sync_cnt != 0 */

 vlan address is relevant if its sync_cnt != 0 */

 Enable promiscuous mode */

 Disable promiscuous mode */

 Restore allmulti on vlans if necessary */

 add/remove mcast address either for real netdev or for vlan */

 In dual emac mode check for all interfaces */

			/* The packet received is for the interface which

			 * is already down and the other interface is up

			 * and running, instead of freeing which results

			 * in reducing of the number of rx descriptor in

			 * DMA engine, requeue page back to cpdma.

 the interface is going down, pages are purged */

 XDP prog can modify vlan tag, so can't use encap header */

 pass skb to netstack if no XDP prog or returned XDP_PASS */

 mark skb for recycling */

	/* In dual EMAC, reserved VLAN id should not be used for

	 * creating VLAN interfaces as this can break the dual

	 * EMAC port separation

 restore resources after port reset */

 restore vlan configurations */

 restore MQPRIO offload */

 restore CBS offload */

 learning make no sense in dual_mac mode */

 soft reset the controller and initialize ale */

 switch to vlan unaware mode */

 setup host port priority mapping */

 disable priority elevation */

 enable statistics collection only on all ports */

 Enable internal fifo flow control */

 learning make no sense in dual_mac mode */

	/* disabling SA_UPDATE required to make stp work, without this setting

	 * Host MAC addresses will jump between ports.

	 * As per TRM MAC address can be defined as unicast supervisory (super)

	 * by setting both (ALE_BLOCKED | ALE_SECURE) which should prevent

	 * SA_UPDATE, but HW seems works incorrectly and setting ALE_SECURE

	 * causes STP packets to be dropped due to ingress filter

	 *	if (source address found) and (secure) and

	 *	   (receive port number != port_number))

	 *	   then discard the packet

 set speed_in input in case RMII mode is used in 100Mbps */

 in band mode only works in 10Mbps RGMII mode */

 In Band mode */

 enable forwarding */

 disable forwarding */

 setup priority mapping */

		/* Increase RX FIFO size to 5 for supporting fullduplex

		 * flow control mode

		/* Increase RX FIFO size to 5 for supporting fullduplex

		 * flow control mode

 setup max packet size, and mac address */

 no link yet */

 Configure GMII_SEL register */

 Notify the stack of the actual queue counts. */

 Initialize host and slave ports */

 initialize shared resources for every ndev */

		/* create rxqs for both infs in dual mac as they use same pool

		 * and must be destroyed together when no users.

 Enable Interrupt pacing if configured */

	/* If there is no more tx desc left free then we need to

	 * tell the kernel to stop sending us tx frames.

 Barrier, so that stop_queue visible to other cpus */

 Barrier, so that stop_queue visible to other cpus */

	/* reset the return code as pm_runtime_get_sync() can return

	 * non zero values as well.

	/* Populate all the child nodes here...

 We do not want to force this, as in some cases may not have child */

			/* CPSW Host port CPDMA interface is shared between

			 * ports and there is only one TX and one RX IRQs

			 * available for all possible TX and RX channels

			 * accordingly.

 register the network device */

		/* This is adding the port to a second bridge, this is

		 * unsupported

 netdev notifier */

 all ndevs are down */

 enable bypass - no forwarding; all traffic goes to Host */

 clean up ALE table */

 enable bypass - no forwarding; all traffic goes to Host */

 sentinel */ },

 sentinel */ }

 This may be required here for child devices. */

	/* Need to enable clocks with runtime PM api to access module

	 * registers

 setup netdevs */

	/* Grab RX and TX IRQs. Note that we also have RX_THRESHOLD and

	 * MISC IRQs which are always kept disabled with this driver so

	 * we will not request them.

	 *

	 * If anyone wants to implement support for those, make sure to

	 * first request and append them to irqs_table array.

 Enable misc CPTS evnt_pend IRQ */

 Select sleep pin state */

 Select default pin state */

 shut up ASSERT_RTNL() warning in netif_set_real_num_tx/rx_queues */

 SPDX-License-Identifier: GPL-2.0

/* Texas Instruments K3 AM65 Ethernet Switch SubSystem Driver

 *

 * Copyright (C) 2020 Texas Instruments Incorporated - http://www.ti.com/

 *

 AM65_CPSW_P0_REG_CTL */

 AM65_CPSW_PORT_REG_PRI_CTL */

 AM65_CPSW_PN_TS_CTL register fields */

 AM65_CPSW_PORTN_REG_TS_SEQ_LTYPE_REG register fields */

 AM65_CPSW_PORTN_REG_TS_CTL_LTYPE2 */

 The PTP event messages - Sync, Delay_Req, Pdelay_Req, and Pdelay_Resp. */

 Number of TX/RX descriptors */

 Max length register has to be restored after MAC SL reset */

 Can be used with in band mode only */

 RGMII speed is 100M if !CPSW_SL_CTL_GIG*/

 rx_pause/tx_pause */

 enable forwarding */

 disable forwarding */

 Enable promiscuous mode */

 Disable promiscuous mode */

 Restore allmulti on vlans if necessary */

 Clear all mcast from ALE */

 program multicast address list into ALE register */

 try recover if stopped by us */

 P0 set Receive Priority Type */

		/* Enet Ports fifos works in fixed priority mode only, so

		 * reset P0_Rx_Pri_Map so all packet will go in Enet fifo 0

 restore P0_Rx_Pri_Map */

 Control register */

 Max length register */

 set base flow_id */

 en tx crc offload */

 enable statistic */

 disable priority elevation */

 limit to one RX flow only */

 switch to vlan unaware mode */

 default vlan cfg: create mask based on enabled ports */

 shutdown tx channels */

 ensure new tdown_cnt value is visible */

 Notify the stack of the actual queue counts. */

 mac_sl should be configured via phy-link interface */

 restore vlan configurations */

 RX psdata[2] word format - checksum information */

	/* HW can verify IPv4/IPv6 TCP/UDP packets checksum

	 * csum information provides in psdata[2] word:

	 * AM65_CPSW_RX_PSD_CSUM_ERR bit - indicates csum error

	 * AM65_CPSW_RX_PSD_IPV6_VALID and AM65_CPSW_RX_PSD_IPV4_VALID

	 * bits - indicates IPv4/IPv6 packet

	 * AM65_CPSW_RX_PSD_IS_FRAGMENT bit - indicates fragmented packet

	 * AM65_CPSW_RX_PSD_CSUM_ADD has value 0xFFFF for non fragmented packets

	 * or csum value for fragmented packets if !AM65_CPSW_RX_PSD_CSUM_ERR

 csum for fragmented packets is unsupported */

 add RX timestamp */

 process every flow */

		/* Check whether the queue is stopped due to stalled

		 * tx dma, if the queue is stopped then wake the queue

		 * as we have free desc for tx

 padding enabled in hw */

 SKB TX timestamp */

 Map the linear buffer */

 HW csum offload if enabled */

 HW numerates bytes starting from 1 */

 Handle the case where skb is fragmented in pages */

 report bql before sending packet */

 inform bql */

 Barrier, so that stop_queue visible to other cpus */

 re-check for smp */

 TX HW timestamp */

 cfg TX timestamp */

 en/dis RX timestamp */

 init all flows */

	/* Forbid PM runtime if CPTS is running.

	 * K3 CPSWxG modules may completely lose context during ON->OFF

	 * transitions depending on integration.

	 * AM65x/J721E MCU CPSW2G: false

	 * J721E MAIN_CPSW9G: true

 it is not a slave port node, continue */

 get phy/link info */

 is there at least one ext.port */

 alloc netdev */

 Disable TX checksum offload by default due to HW bug */

		/* This is adding the port to a second bridge, this is

		 * unsupported

 netdev notifier */

 learning make no sense in multi-mac mode */

 enable mac-only mode on port */

 all ndevs are down */

 clean up ALE table */

	/* Provide devlink hook to switch mode when multiple external ports

	 * are present NUSS switchdev driver is enabled.

	/* can't auto unregister ndev using devm_add_action() due to

	 * devres release sequence in DD core for DMA

 sentinel */}

 sentinel */ },

 disable quirks */

 Use device's physical base address as switch id */

 init tx channels */

 init common data */

 init ports */

	/* must unregister ndevs here because DD release_driver routine calls

	 * dma_deconfigure(dev) before devres_release_all(dev)

 SPDX-License-Identifier: GPL-2.0

/* Texas Instruments K3 AM65 Ethernet QoS submodule

 * Copyright (C) 2020 Texas Instruments Incorporated - http://www.ti.com/

 *

 * quality of service module includes:

 * Enhanced Scheduler Traffic (EST - P802.1Qbv/D2.2)

 AM65_CPSW_REG_CTL register fields */

 AM65_CPSW_PN_REG_CTL register fields */

 AM65_CPSW_PN_REG_EST_CTL register fields */

 AM65_CPSW_PN_REG_FIFO_STATUS register fields */

 EST FETCH COMMAND RAM */

 need program timer */

 need stop first */

 just buffer can be updated */

 target new EST RAM buffer, actual toggle happens after cycle completion */

/* am65_cpsw_port_est_is_swapped() - Indicate if h/w is transitioned

 * admin -> oper or not

 *

 * Return true if already transitioned. i.e oper is equal to admin and buf

 * numbers match (est_oper->buf match with est_admin->buf).

 * false if before transition. i.e oper is not equal to admin, (i.e a

 * previous admin command is waiting to be transitioned to oper state

 * and est_oper->buf not match with est_oper->buf).

/* am65_cpsw_port_est_get_free_buf_num() - Get free buffer number for

 * Admin to program the new schedule.

 *

 * Logic as follows:-

 * If oper is same as admin, return the other buffer (!oper) as the admin

 * buffer.  If oper is not the same, driver let the current oper to continue

 * as it is in the process of transitioning from admin -> oper. So keep the

 * oper by selecting the same oper buffer by writing to EST_BUFSEL bit in

 * EST CTL register. In the second iteration they will match and code returns.

 * The actual buffer to write command is selected later before it is ready

 * to update the schedule.

		/* admin is not set, so hinder transition as it's not allowed

		 * to touch memory in-flight, by targeting same oper buf.

 rolled buf num means changed buf while configuring */

/* This update is supposed to be used in any routine before getting real state

 * of admin -> oper transition, particularly it's supposed to be used in some

 * generic routine for providing real state to Taprio Qdisc.

/* Fetch command count it's number of bytes in Gigabit mode or nibbles in

 * 10/100Mb mode. So, having speed and time in ns, recalculate ns to number of

 * bytes/nibbles that can be sent while transmission on given speed.

 fetch count can't be less than 16? */

 end cmd, enabling non-timed queues for potential over cycle time */

/*

 * Enable ESTf periodic output, set cycle start time and interval.

 in order to avoid timer reset get base_time form oper taprio */

 base times are cycle synchronized */

 TODO: Admin schedule at future time is not currently supported */

 SPDX-License-Identifier: GPL-2.0 */

/* Texas Instruments K3 AM65 Ethernet Switchdev Driver

 *

 * Copyright (C) 2020 Texas Instruments Incorporated - https://www.ti.com/

 *

	/* We don't care for the return value here, error is returned only if

	 * the unicast entry is not present

	/* We don't care for the return value here, error is returned only if

	 * the multicast entry is not present

 Ignore error as error code is returned only when entry is already removed */

 called under rcu_read_lock() */

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments Ethernet Switch Driver

 *

 * Copyright (C) 2019 Texas Instruments

	/* Check whether the queue is stopped due to stalled tx dma, if the

	 * queue is stopped then start the queue as we have free desc for tx

 process every unprocessed channel */

 process every unprocessed channel */

 Remove VLAN header encapsulation word */

 Ignore unknown & Priority-tagged packets*/

 Ignore vid 0 and pass packet as is */

 Untag P0 packets if set for vlan */

 strip vlan tag for VLAN-tagged packet */

 re-split resources only in case speed was changed */

 cases not dependent on speed */

		/* if max_rate is less then expected due to reduced link speed,

		 * split proportionally according next potential max speed

 split tx weight/budget */

 split rx budget */

 reserved for future extensions */

CONFIG_TI_CPTS*/

 update rates for slaves tx queues */

	/* shaping has to stay enabled for highest fifos linearly

	 * and fifo bw no more then interface can allow

 disable FIFOs rate limited queues */

 set type of FIFO queues to normal priority mode */

 set type of FIFO queues to be rate limited */

 toggle a FIFO rate limited queue */

 FIFO transmit shape enable */

/* Defaults:

 * class A - prio 3

 * class B - prio 2

 * shaping for class A should be set first

	/* enable channels in backward order, as highest FIFOs must be rate

	 * limited first and for compliance with CPDMA rate limited channels

	 * that also used in bacward order. FIFO0 cannot be rate limited.

 do nothing, it's disabled anyway */

 shapers can be set if link speed is known */

 restore default configuration */

		/* using same page pool is allowed as no running rx handlers

		 * simultaneously for both ndevs

 XDP prog might have changed packet data and boundaries */

		/*  Have to flush here, per packet, instead of doing it in bulk

		 *  at the end of the napi handler. The RX devices on this

		 *  particular hardware is sharing a common queue, so the

		 *  incoming device might change per packet.

 handle aborts by dropping packet */

 SPDX-License-Identifier: GPL-2.0

/* TI K3 AM65x Common Platform Time Sync

 *

 * Copyright (C) 2020 Texas Instruments Incorporated - http://www.ti.com

 *

 Comparison Low Value 0:31 */

 Comparison High Value 32:63 */

 control */

 Length */

 PPM Load Low Value 0:31 */

 PPM Load High Value 32:63 */

 Nudge value */

 Identification and version */

 Time sync control */

 Reference Clock Select Register */

 Time stamp event push */

 Time Stamp Load Low Value 0:31 */

 Time stamp load enable */

 Time Stamp Comparison Low Value 0:31 */

 Time Stamp Comparison Length */

 Time sync interrupt status raw */

 Time sync interrupt status masked */

 Time sync interrupt enable */

 Time Stamp Comparison Nudge Value */

 Event interrupt pop */

 Event Time Stamp lo 0:31 */

 Event Type Fields */

 Event Type Fields domain */

 Event Time Stamp hi 32:63 */

 Time Stamp Load High Value 32:63 */

 Time Stamp Comparison High Value 32:63 */

 Time Stamp Add value */

 Time Stamp PPM Load Low Value 0:31 */

 Time Stamp PPM Load High Value 32:63 */

 Time Stamp Nudge value */

 CONTROL_REG */

 RFTCLK_SEL_REG */

 TS_PUSH_REG */

 TS_LOAD_EN_REG */

 INTSTAT_RAW_REG */

 INTSTAT_MASKED_REG */

 INT_ENABLE_REG */

 TS_COMP_NUDGE_REG */

 EVENT_POP_REG */

 EVENT_1_REG */

 EVENT_2_REG */

 Time Stamp Push Event */

 Time Stamp Rollover Event */

 Time Stamp Half Rollover Event */

 Hardware Time Stamp Push Event */

 Ethernet Receive Event */

 Ethernet Transmit Event */

 Time Stamp Compare Event */

 Host Transmit Event */

 ms */

 jiffies */

 protects events lists*/

 PHC access sync */

 select coefficient according to the rate */

	/* temporarily disable cpts interrupt to avoid intentional

	 * doubled read. Interrupt can be in-flight - it's Ok.

 use spin_lock_irqsave() here as it has to run very fast */

 PTP clock operations */

	/* base freq = 1GHz = 1 000 000 000

	 * ppb_norm = ppb * base_freq / clock_freq;

	 * ppm_norm = ppb_norm / 1000

	 * adj_period = 1 000 000 / ppm_norm

	 * adj_period = 1 000 000 000 / ppb_norm

	 * adj_period = 1 000 000 000 / (ppb * base_freq / clock_freq)

	 * adj_period = (1 000 000 000 * clock_freq) / (ppb * base_freq)

	 * adj_period = clock_freq / ppb

 reuse ptp_clk_lock as it serialize ts push */

 according to TRM should be zeroed */

 no need to grab txq.lock as access is always done under cpts->lock */

 timeout any expired skbs over 100 ms */

/**

 * am65_cpts_rx_enable - enable rx timestamping

 * @cpts: cpts handle

 * @en: enable

 *

 * This functions enables rx packets timestamping. The CPTS can timestamp all

 * rx packets.

/**

 * am65_cpts_tx_timestamp - save tx packet for timestamping

 * @cpts: cpts handle

 * @skb: packet

 *

 * This functions saves tx packet for timestamping if packet can be timestamped.

 * The future processing is done in from PTP auxiliary worker.

	/* add frame to queue for processing later.

	 * The periodic FIFO check will handle this.

 get the timestamp for timeouts */

/**

 * am65_cpts_prep_tx_timestamp - check and prepare tx packet for timestamping

 * @cpts: cpts handle

 * @skb: packet

 *

 * This functions should be called from .xmit().

 * It checks if packet can be timestamped, fills internal cpts data

 * in skb-cb and marks packet as SKBTX_IN_PROGRESS.

	/* dev must be NULL to avoid recursive incrementing

	 * of module refcnt

 set time to the current system time */

 SPDX-License-Identifier: GPL-2.0+

/*

 * DaVinci MDIO Module driver

 *

 * Copyright (C) 2010 Texas Instruments.

 *

 * Shamelessly ripped out of davinci_emac.c, original copyrights follow:

 *

 * Copyright (C) 2009 Texas Instruments.

 *

/*

 * This timeout definition is a worst-case ultra defensive measure against

 * unexpected controller lock ups.  Ideally, we should never ever hit this

 * scenario in practice.

 msecs */

 2.2 MHz */

 jiffies */

	/* Indicates that driver shouldn't modify phy_mask in case

	 * if MDIO bus is registered from DT.

	/*

	 * One mdio transaction consists of:

	 *	32 bits of preamble

	 *	32 bits of transferred data

	 *	24 bits of bus yield (not needed unless shared?)

	/*

	 * In the worst case, we could be kicking off a user-access immediately

	 * after the mdio bus scan state-machine triggered its own read.  If

	 * so, our request could get deferred by one access cycle.  We

	 * defensively allow for 4 access cycles.

 set enable and clock divider */

 wait for scan logic to settle */

 dump hardware version info */

 get phy mask from the alive register */

 restrict mdio bus to live phys only */

 desperately scan all phys */

 wait until hardware is ready for another user access */

		/*

		 * An emac soft_reset may have clobbered the mdio controller's

		 * state machine.  We need to reset and retry the current

		 * operation

 wait until hardware state machine is idle */

 sentinel */ },

	/* register the mii bus

	 * Create PHYs from DT only in case if PHY child nodes are explicitly

	 * defined to support backward compatibility with DTs which assume that

	 * Davinci MDIO will always scan the bus for PHYs detection.

 scan and dump the bus */

 shutdown the scan state machine */

 Select sleep pin state */

 Select default pin state */

 SPDX-License-Identifier: GPL-2.0

/*

 * XGE PCSR module initialisation

 *

 * Copyright (C) 2014 Texas Instruments Incorporated

 * Authors:	Sandeep Nair <sandeep_n@ti.com>

 *		WingMan Kwok <w-kwok2@ti.com>

 *

 XGBE registers */

 PCS-R registers */

 bit mask of width w at offset s */

 shift value v to offset s */

 cmu0 setup */

 cmu1 setup */

 lane is 0 based */

 lane setup */

 disable auto negotiation*/

 disable link training */

 Set Lane Control Rate */

 For 2 lane Phy-B, lane0 is actually lane1 */

 Set tbus address */

 Get TBUS Value */

Get the DLPF values */

 Call every 100 ms */

 Get the Loss bit */

 Get Block Errors and Block Lock bits */

 Get Signal Detect Overlay Address */

 If Block errors maxed out, attempt recovery! */

 if good link lock the signal detect ON! */

 if no lock, then reset CDR */

 Link Lost? */

 Nope just noise */

				/* Lost the block lock, reset CDR if it is

				 * not centered and go back to sync state

 Reset the Error counts! */

		/* if we did not get link up then wait 100ms before calling

		 * it again

 Toggle the POR_EN bit in CONFIG.CPU_CTRL */

 enable POR_EN bit */

 disable POR_EN bit */

 This is EVM + RTM-BOC specific */

 SB PLL Status Poll */

 read COMLANE bits 4:0 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments CPDMA Driver

 *

 * Copyright (C) 2010 Texas Instruments

 *

 DMA Registers */

 the following exist only if has_ext_regs is set */

 Descriptor mode bits */

 hardware fields */

 software fields */

 ioremap map */

 dma_alloc map */

 RX descriptors number */

 TX descriptors number */

 offsets into dmaregs */

 The following make access to common cpdma_ctlr params more readable */

 various accessors */

/*

 * Utility constructs for a cpdma descriptor pool.  Some devices (e.g. davinci

 * emac) have dedicated on-chip memory for these descriptors.  Some other

 * devices (e.g. cpsw switches) use plain old memory.  Descriptor pools

 * abstract out these details

		/* recalculate memory size required cpdma descriptor pool

		 * basing on number of descriptors specified by user and

		 * if memory size > CPPI internal RAM size (desc_mem_size)

		 * then switch to use DDR

 assumes no IOMMU, don't use this value */

/* cpdma_chan_set_chan_shaper - set shaper for a channel

 * Has to be called under ctlr lock

/* cpdma_chan_fit_rate - set rate for a channel and check if it's possible.

 * rmask - mask of rate limited channels

 * Returns min rate in Kb/s

 split pool equally between RX/TX by default */

 off prio mode if all tx channels are rate limited */

 use remains */

/*

 * cpdma_chan_split_pool - Splits ctrl pool between all channels.

 * Has to be called under ctlr lock

/* cpdma_chan_set_weight - set weight of a channel in percentage.

 * Tx and Rx channels have separate weights. That is 100% for RX

 * and 100% for Tx. The weight is used to split cpdma resources

 * in correct proportion required by the channels, including number

 * of descriptors. The channel rate is not enough to know the

 * weight of a channel as the maximum rate of an interface is needed.

 * If weight = 0, then channel uses rest of descriptors leaved by

 * weighted channels.

 re-split pool using new channel weight */

/* cpdma_chan_get_min_rate - get minimum allowed rate for channel

 * Should be called before cpdma_chan_set_rate.

 * Returns min rate in Kb/s

/* cpdma_chan_set_rate - limits bandwidth for transmit channel.

 * The bandwidth * limited channels have to be in order beginning from lowest.

 * ch - transmit channel the bandwidth is configured for

 * rate - bandwidth in Kb/s, if 0 - then off shaper

 on shapers */

 simple case - idle channel */

 first chain the descriptor at the tail of the list */

 next check if EOQ has been triggered already */

	/* Relaxed IO accessors can be used here as there is read barrier

	 * at the end of write sequence.

 trigger teardown */

 wait for teardown complete */

 100 ms */

 handle completed packets */

 remaining packets haven't been tx/rx'ed, clean them up */

 issue callback without locks held */

 SPDX-License-Identifier: GPL-2.0

/* Texas Instruments K3 AM65 Ethernet Switch SubSystem Driver ethtool ops

 *

 * Copyright (C) 2020 Texas Instruments Incorporated - http://www.ti.com/

 *

/**

 * struct am65_cpsw_regdump_hdr - regdump record header

 *

 * @module_id: CPSW module ID

 * @len: CPSW module registers space length in u32

/**

 * struct am65_cpsw_regdump_item - regdump module description

 *

 * @hdr: CPSW module header

 * @start_ofs: CPSW module registers start addr

 * @end_ofs: CPSW module registers end addr

 *

 * Registers dump provided in the format:

 *  u32 : module ID

 *  u32 : dump length

 *  u32[..len]: registers values

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave */

 slave 10G only */

 slave */

 K3 */

 K3 */

 K3 */

 K3 */

 K3 */

 K3 */

 K3 */

 K3 */

 K3 slave */

 K3 slave */

 K3 slave */

 K3 slave */

 K3 slave */

 K3 slave */

 following NU only */

 Ethtool priv_flags */

	/* Check if interface is up. Can change the num queues when

	 * the interface is down.

 not supported */

 update CPSW IP version */

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments switchdev Driver

 *

 * Copyright (C) 2019 Texas Instruments

 *

 no barrier */

 CPU port */

	/* We don't care for the return value here, error is returned only if

	 * the unicast entry is not present

	/* We don't care for the return value here, error is returned only if

	 * the multicast entry is not present

 called under rcu_read_lock() */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2004-2013 Synopsys, Inc. (www.synopsys.com)

 *

 * MDIO implementation for ARC EMAC

 Number of seconds we wait for "MDIO complete" flag to appear */

/**

 * arc_mdio_complete_wait - Waits until MDIO transaction is completed.

 * @priv:	Pointer to ARC EMAC private data structure.

 *

 * returns:	0 on success, -ETIMEDOUT on a timeout.

 Reset "MDIO complete" flag */

/**

 * arc_mdio_read - MDIO interface read function.

 * @bus:	Pointer to MII bus structure.

 * @phy_addr:	Address of the PHY device.

 * @reg_num:	PHY register to read.

 *

 * returns:	The register contents on success, -ETIMEDOUT on a timeout.

 *

 * Reads the contents of the requested register from the requested PHY

 * address.

/**

 * arc_mdio_write - MDIO interface write function.

 * @bus:	Pointer to MII bus structure.

 * @phy_addr:	Address of the PHY device.

 * @reg_num:	PHY register to write to.

 * @value:	Value to be written into the register.

 *

 * returns:	0 on success, -ETIMEDOUT on a timeout.

 *

 * Writes the value to the requested register.

/**

 * arc_mdio_reset

 * @bus: points to the mii_bus structure

 * Description: reset the MII bus

/**

 * arc_mdio_probe - MDIO probe function.

 * @priv:	Pointer to ARC EMAC private data structure.

 *

 * returns:	0 on success, -ENOMEM when mdiobus_alloc

 * (to allocate memory for MII bus structure) fails.

 *

 * Sets up and registers the MDIO interface.

 optional reset-related properties */

 A sane reset duration should not be longer than 1s */

/**

 * arc_mdio_remove - MDIO remove function.

 * @priv:	Pointer to ARC EMAC private data structure.

 *

 * Unregisters the MDIO and frees any associate memory for MII bus.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2004-2013 Synopsys, Inc. (www.synopsys.com)

 *

 * Driver for the ARC EMAC 10100 (hardware revision 5)

 *

 * Contributors:

 *		Amit Bhor

 *		Sameer Dhavale

 *		Vineet Gupta

/**

 * arc_emac_tx_avail - Return the number of available slots in the tx ring.

 * @priv: Pointer to ARC EMAC private data structure.

 *

 * returns: the number of slots available for transmission in tx the ring.

/**

 * arc_emac_adjust_link - Adjust the PHY link duplex.

 * @ndev:	Pointer to the net_device structure.

 *

 * This function is called to change the duplex setting after auto negotiation

 * is done by the PHY.

/**

 * arc_emac_get_drvinfo - Get EMAC driver information.

 * @ndev:	Pointer to net_device structure.

 * @info:	Pointer to ethtool_drvinfo structure.

 *

 * This implements ethtool command for getting the driver information.

 * Issue "ethtool -i ethX" under linux prompt to execute this function.

/**

 * arc_emac_tx_clean - clears processed by EMAC Tx BDs.

 * @ndev:	Pointer to the network device.

 return the sk_buff to system */

	/* Ensure that txbd_dirty is visible to tx() before checking

	 * for queue stopped.

/**

 * arc_emac_rx - processing of Rx packets.

 * @ndev:	Pointer to the network device.

 * @budget:	How many BDs to process on 1 call.

 *

 * returns:	Number of processed BDs

 *

 * Iterate through Rx BDs and deliver received packages to upper layer.

		/* Make a note that we saw a packet at this BD.

		 * So next time, driver starts from this + 1

			/* We pre-allocate buffers of MTU size so incoming

			 * packets won't be split/chained.

 Return ownership to EMAC */

		/* Prepare the BD for next cycle. netif_receive_skb()

		 * only if new skb was allocated and mapped to avoid holes

		 * in the RX fifo.

 Return ownership to EMAC */

 Return ownership to EMAC */

 unmap previosly mapped skb */

 Make sure pointer to data buffer is set */

 Return ownership to EMAC */

/**

 * arc_emac_rx_miss_handle - handle R_MISS register

 * @ndev:	Pointer to the net_device structure.

/**

 * arc_emac_rx_stall_check - check RX stall

 * @ndev:	Pointer to the net_device structure.

 * @budget:	How many BDs requested to process on 1 call.

 * @work_done:	How many BDs processed

 *

 * Under certain conditions EMAC stop reception of incoming packets and

 * continuously increment R_MISS register instead of saving data into

 * provided buffer. This function detect that condition and restart

 * EMAC.

/**

 * arc_emac_poll - NAPI poll handler.

 * @napi:	Pointer to napi_struct structure.

 * @budget:	How many BDs to process on 1 call.

 *

 * returns:	Number of processed BDs

/**

 * arc_emac_intr - Global interrupt handler for EMAC.

 * @irq:		irq number.

 * @dev_instance:	device instance.

 *

 * returns: IRQ_HANDLED for all cases.

 *

 * ARC EMAC has only 1 interrupt line, and depending on bits raised in

 * STATUS register we may tell what is a reason for interrupt to fire.

 Reset all flags except "MDIO complete" */

		/* MSER/RXCR/RXFR/RXFL interrupt fires on corresponding

		 * 8-bit error counter overrun.

/**

 * arc_emac_open - Open the network device.

 * @ndev:	Pointer to the network device.

 *

 * returns: 0, on success or non-zero error value on failure.

 *

 * This function sets the MAC address, requests and enables an IRQ

 * for the EMAC device and starts the Tx queue.

 * It also connects to the phy device.

 Allocate and set buffers for Rx BD's */

 Make sure pointer to data buffer is set */

 Return ownership to EMAC */

 Clean Tx BD's */

 Initialize logical address filter */

 Set BD ring pointers for device side */

 Enable interrupts */

 Set CONTROL */

 RX BD table length */

 TX BD table length */

 Enable EMAC */

/**

 * arc_emac_set_rx_mode - Change the receive filtering mode.

 * @ndev:	Pointer to the network device.

 *

 * This function enables/disables promiscuous or all-multicast mode

 * and updates the multicast filtering list of the network device.

/**

 * arc_free_tx_queue - free skb from tx queue

 * @ndev:	Pointer to the network device.

 *

 * This function must be called while EMAC disable

 return the sk_buff to system */

/**

 * arc_free_rx_queue - free skb from rx queue

 * @ndev:	Pointer to the network device.

 *

 * This function must be called while EMAC disable

 return the sk_buff to system */

/**

 * arc_emac_stop - Close the network device.

 * @ndev:	Pointer to the network device.

 *

 * This function stops the Tx queue, disables interrupts and frees the IRQ for

 * the EMAC device.

 * It also disconnects the PHY device associated with the EMAC device.

 Disable interrupts */

 Disable EMAC */

 Return the sk_buff to system */

/**

 * arc_emac_stats - Get system network statistics.

 * @ndev:	Pointer to net_device structure.

 *

 * Returns the address of the device statistics structure.

 * Statistics are updated in interrupt handler.

/**

 * arc_emac_tx - Starts the data transmission.

 * @skb:	sk_buff pointer that contains data to be Transmitted.

 * @ndev:	Pointer to net_device structure.

 *

 * returns: NETDEV_TX_OK, on success

 *		NETDEV_TX_BUSY, if any of the descriptors are not free.

 *

 * This function is invoked from upper layers to initiate transmission.

 Make sure pointer to data buffer is set */

 Make sure info word is set */

 Increment index to point to the next BD */

	/* Ensure that tx_clean() sees the new txbd_curr before

	 * checking the queue status. This prevents an unneeded wake

	 * of the queue in tx_clean().

 Refresh tx_dirty */

/**

 * arc_emac_set_address - Set the MAC address for this device.

 * @ndev:	Pointer to net_device structure.

 * @p:		6 byte Address to be written as MAC address.

 *

 * This function copies the HW address from the sockaddr structure to the

 * net_device structure and updates the address in HW.

 *

 * returns:	-EBUSY if the net device is busy or 0 if the address is set

 *		successfully.

/**

 * arc_emac_restart - Restart EMAC

 * @ndev:	Pointer to net_device structure.

 *

 * This function do hardware reset of EMAC in order to restore

 * network packets reception.

 Disable interrupts */

 Disable EMAC */

 Return the sk_buff to system */

 Clean Tx BD's */

 Return ownership to EMAC */

 Make sure info is visible to EMAC before enable */

 Enable interrupts */

 Enable EMAC */

 Get PHY from device tree */

 Get EMAC registers base address from device tree */

 Get IRQ from device tree */

 Get CPU clock frequency from device tree */

 Check for EMAC revision 5 or 7, magic number */

 Set poll rate so that it polls every 1 ms */

 Register interrupt handler for device */

 Get MAC address from device tree */

 Do 1 allocation instead of 2 separate ones for Rx and Tx BD rings */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * emac-rockchip.c - Rockchip EMAC specific glue layer

 *

 * Copyright (C) 2014 Romain Perier <romain.perier@gmail.com>

 Sentinel */ }

 RK3036/RK3066/RK3188 SoCs only support RMII */

 Optional regulator for PHY */

 Set speed 100M */

 Set RMII mode */

 RMII interface needs always a rate of 50MHz */

 RMII TX/RX needs always a rate of 25MHz */

 SPDX-License-Identifier: GPL-2.0-or-later

/**

 * DOC: emac_arc.c - ARC EMAC specific glue layer

 *

 * Copyright (C) 2014 Romain Perier

 *

 * Romain Perier  <romain.perier@gmail.com>

 Sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * This code is derived from the VIA reference driver (copyright message

 * below) provided to Red Hat by VIA Networking Technologies, Inc. for

 * addition to the Linux kernel.

 *

 * The code has been merged into one source file, cleaned up to follow

 * Linux coding style,  ported to the Linux 2.6 kernel tree and cleaned

 * for 64bit hardware platforms.

 *

 * TODO

 *	rx_copybreak/alignment

 *	More testing

 *

 * The changes are (c) Copyright 2004, Red Hat Inc. <alan@lxorguk.ukuu.org.uk>

 * Additional fixes and clean up: Francois Romieu

 *

 * This source has not been verified for use in safety critical systems.

 *

 * Please direct queries about the revamped driver to the linux-kernel

 * list not VIA.

 *

 * Original code:

 *

 * Copyright (c) 1996, 2003 VIA Networking Technologies, Inc.

 * All rights reserved.

 *

 * Author: Chuang Liang-Shing, AJ Jiang

 *

 * Date: Jan 24, 2003

 *

 * MODULE_LICENSE("GPL");

/**

 *	mac_get_cam_mask	-	Read a CAM mask

 *	@regs: register block for this velocity

 *	@mask: buffer to store mask

 *

 *	Fetch the mask bits of the selected CAM and store them into the

 *	provided mask buffer.

 Select CAM mask */

 read mask */

 disable CAMEN */

 Select mar */

/**

 *	mac_set_cam_mask	-	Set a CAM mask

 *	@regs: register block for this velocity

 *	@mask: CAM mask to load

 *

 *	Store a new mask into a CAM

 Select CAM mask */

 disable CAMEN */

 Select mar */

 Select CAM mask */

 disable CAMEN */

 Select mar */

/**

 *	mac_set_cam	-	set CAM data

 *	@regs: register block of this velocity

 *	@idx: Cam index

 *	@addr: 2 or 6 bytes of CAM data

 *

 *	Load an address or vlan tag into a CAM

 Select CAM mask */

 Select mar */

 Select CAM mask */

 Select mar */

/**

 *	mac_wol_reset	-	reset WOL after exiting low power

 *	@regs: register block of this velocity

 *

 *	Called after we drop out of wake on lan mode in order to

 *	reset the Wake on lan features. This function doesn't restore

 *	the rest of the logic from the result of sleep/wakeup

 Turn off SWPTAG right after leaving power mode */

 clear sticky bits */

 disable force PME-enable */

 disable power-event config bit */

 clear power status */

/*

    Define module options

/* rx_thresh[] is used for controlling the receive fifo threshold.

   0: indicate the rxfifo threshold is 128 bytes.

   1: indicate the rxfifo threshold is 512 bytes.

   2: indicate the rxfifo threshold is 1024 bytes.

   3: indicate the rxfifo threshold is store & forward.

/* DMA_length[] is used for controlling the DMA length

   0: 8 DWORDs

   1: 16 DWORDs

   2: 32 DWORDs

   3: 64 DWORDs

   4: 128 DWORDs

   5: 256 DWORDs

   6: SF(flush till emply)

   7: SF(flush till emply)

/* IP_byte_align[] is used for IP header DWORD byte aligned

   0: indicate the IP header won't be DWORD byte aligned.(Default) .

   1: indicate the IP header will be DWORD byte aligned.

      In some environment, the IP header should be DWORD byte aligned,

      or the packet will be droped when we receive it. (eg: IPVS)

/* flow_control[] is used for setting the flow control ability of NIC.

   1: hardware deafult - AUTO (default). Use Hardware default value in ANAR.

   2: enable TX flow control.

   3: enable RX flow control.

   4: enable RX/TX flow control.

   5: disable

/* speed_duplex[] is used for setting the speed and duplex mode of NIC.

   0: indicate autonegotiation for both speed and duplex mode

   1: indicate 100Mbps half duplex mode

   2: indicate 100Mbps full duplex mode

   3: indicate 10Mbps half duplex mode

   4: indicate 10Mbps full duplex mode

   5: indicate 1000Mbps full duplex mode



   Note:

   if EEPROM have been set to the force mode, this option is ignored

   by driver.

/* wol_opts[] is used for controlling wake on lan behavior.

   0: Wake up if recevied a magic packet. (Default)

   1: Wake up if link status is on/off.

   2: Wake up if recevied an arp packet.

   4: Wake up if recevied any unicast packet.

   Those value can be sumed up to support more than one option.

/*

 *	Internal board variants. At the moment we have only one

/*

 *	Describe the PCI device identifiers that we support in this

 *	device driver. Used for hotplug autoloading.

/*

 *	Describe the OF device identifiers that we support in this

 *	device driver. Used for devicetree nodes.

 Sentinel */ },

/**

 *	get_chip_name	- 	identifier to name

 *	@chip_id: chip identifier

 *

 *	Given a chip identifier return a suitable description. Returns

 *	a pointer a static string valid while the driver is loaded.

/**

 *	velocity_set_int_opt	-	parser for integer options

 *	@opt: pointer to option value

 *	@val: value the user requested (or -1 for default)

 *	@min: lowest value allowed

 *	@max: highest value allowed

 *	@def: default value

 *	@name: property name

 *

 *	Set an integer property in the module options. This function does

 *	all the verification and checking as well as reporting so that

 *	we don't duplicate code for each option.

/**

 *	velocity_set_bool_opt	-	parser for boolean options

 *	@opt: pointer to option value

 *	@val: value the user requested (or -1 for default)

 *	@def: default value (yes/no)

 *	@flag: numeric value to set for true.

 *	@name: property name

 *

 *	Set a boolean property in the module options. This function does

 *	all the verification and checking as well as reporting so that

 *	we don't duplicate code for each option.

/**

 *	velocity_get_options	-	set options on device

 *	@opts: option structure for the device

 *	@index: index of option to use in module options array

 *

 *	Turn the module and command options into a single structure

 *	for the current device

/**

 *	velocity_init_cam_filter	-	initialise CAM

 *	@vptr: velocity to program

 *

 *	Initialize the content addressable memory used for filters. Load

 *	appropriately according to the presence of VLAN

 Turn on MCFG_PQEN, turn off MCFG_RTGOPT */

 Disable all CAMs */

 Enable VCAMs */

/**

 *	velocity_rx_reset	-	handle a receive reset

 *	@vptr: velocity we are resetting

 *

 *	Reset the ownership and status for the receive ring side.

 *	Hand all the receive queue to the NIC.

	/*

	 *	Init state, all RD entries belong to the NIC

/**

 *	velocity_get_opt_media_mode	-	get media selection

 *	@vptr: velocity adapter

 *

 *	Get the media mode stored in EEPROM or module options and load

 *	mii_status accordingly. The requested link state information

 *	is also returned.

/**

 *	safe_disable_mii_autopoll	-	autopoll off

 *	@regs: velocity registers

 *

 *	Turn off the autopoll and wait for it to disable on the chip

  turn off MAUTO */

/**

 *	enable_mii_autopoll	-	turn on autopolling

 *	@regs: velocity registers

 *

 *	Enable the MII link status autopoll feature on the Velocity

 *	hardware. Wait for it to enable.

/**

 *	velocity_mii_read	-	read MII data

 *	@regs: velocity registers

 *	@index: MII register index

 *	@data: buffer for received data

 *

 *	Perform a single read of an MII 16bit register. Returns zero

 *	on success or -ETIMEDOUT if the PHY did not respond.

	/*

	 *	Disable MIICR_MAUTO, so that mii addr can be set normally

/**

 *	mii_check_media_mode	-	check media state

 *	@regs: velocity registers

 *

 *	Check the current MII status and determine the link status

 *	accordingly

/**

 *	velocity_mii_write	-	write MII data

 *	@regs: velocity registers

 *	@mii_addr: MII register index

 *	@data: 16bit data for the MII register

 *

 *	Perform a single write to an MII 16bit register. Returns zero

 *	on success or -ETIMEDOUT if the PHY did not respond.

	/*

	 *	Disable MIICR_MAUTO, so that mii addr can be set normally

 MII reg offset */

 set MII data */

 turn on MIICR_WCMD */

 W_MAX_TIMEOUT is the timeout period */

/**

 *	set_mii_flow_control	-	flow control setup

 *	@vptr: velocity interface

 *

 *	Set up the flow control on this interface according to

 *	the supplied user/eeprom options.

Enable or Disable PAUSE in ANAR */

/**

 *	mii_set_auto_on		-	autonegotiate on

 *	@vptr: velocity

 *

 *	Enable autonegotation on this interface

	/*

	   if (!(PHYSR0 & PHYSR0_LINKGD))

	   status|=VELOCITY_LINK_FAIL;

/**

 *	velocity_set_media_mode		-	set media mode

 *	@vptr: velocity adapter

 *	@mii_status: old MII link state

 *

 *	Check the media link state and configure the flow control

 *	PHY and also velocity hardware setup accordingly. In particular

 *	we need to set up CD polling and frame bursting.

 Set mii link status */

	/*

	 *	If connection type is AUTO

 clear force MAC mode bit */

 set duplex mode of MAC according to duplex mode of MII */

 enable AUTO-NEGO mode */

		/*

		 * 1. if it's 3119, disable frame bursting in halfduplex mode

		 *    and enable it in fullduplex mode

		 * 2. set correct MII/GMII and half/full duplex mode in CHIPGCR

		 * 3. only enable CD heart beat counter in 10HD mode

 set force MAC mode bit */

 MII_REG_BITS_OFF(BMCR_SPEED1000, MII_BMCR, vptr->mac_regs); */

 enable AUTO-NEGO mode */

 MII_REG_BITS_ON(BMCR_ANENABLE, MII_BMCR, vptr->mac_regs); */

 vptr->mii_status=mii_check_media_mode(vptr->mac_regs); */

 vptr->mii_status=check_connection_type(vptr->mac_regs); */

/**

 *	velocity_print_link_status	-	link status reporting

 *	@vptr: velocity to report on

 *

 *	Turn the link status of the velocity card into a kernel log

 *	description of the new link state, detailing speed and duplex

 *	status

/**

 *	enable_flow_control_ability	-	flow control

 *	@vptr: veloity to configure

 *

 *	Set up flow control according to the flow control options

 *	determined by the eeprom/configuration.

/**

 *	velocity_soft_reset	-	soft reset

 *	@vptr: velocity to reset

 *

 *	Kick off a soft reset of the velocity adapter and then poll

 *	until the reset sequence has completed before returning.

 FIXME: PCI POSTING */

 delay 2ms */

/**

 *	velocity_set_multi	-	filter list change callback

 *	@dev: network device

 *

 *	Called by the network layer when the filter lists need to change

 *	for a velocity adapter. Reload the CAMs with the new address

 *	filter ruleset.

 Set promiscuous. */

/*

 * MII access , media link mode setting functions

/**

 *	mii_init	-	set up MII

 *	@vptr: velocity adapter

 *	@mii_status:  links tatus

 *

 *	Set up the PHY for the current link state.

		/*

		 *	Reset to hardware default

		/*

		 *	Turn on ECHODIS bit in NWay-forced full mode and turn it

		 *	off it in NWay-forced half mode for NWay-forced v.s.

		 *	legacy-forced issue.

		/*

		 *	Turn on Link/Activity LED enable bit for CIS8201

		/*

		 *	Reset to hardware default

		/*

		 *	Turn on ECHODIS bit in NWay-forced full mode and turn it

		 *	off it in NWay-forced half mode for NWay-forced v.s.

		 *	legacy-forced issue

		/*

		 *	Assert CRS on Transmit

		/*

		 *	Reset to hardware default

/**

 * setup_queue_timers	-	Setup interrupt timers

 * @vptr: velocity adapter

 *

 * Setup interrupt frequency during suppression (timeout if the frame

 * count isn't filled).

 Only for newer revisions */

/**

 * setup_adaptive_interrupts  -  Setup interrupt suppression

 * @vptr: velocity adapter

 *

 * The velocity is able to suppress interrupt during high interrupt load.

 * This function turns on that feature.

 Setup default interrupt mask (will be changed below) */

 Set Tx Interrupt Suppression Threshold */

 Set Rx Interrupt Suppression Threshold */

 Select page to interrupt hold timer */

/**

 *	velocity_init_registers	-	initialise MAC registers

 *	@vptr: velocity to init

 *	@type: type of initialisation (hot or cold)

 *

 *	Initialise the MAC on a reset or on first set up on the

 *	hardware.

		/*

		 *	Reset RX to prevent RX pointer not on the 4X location

		/*

		 *	Do reset

		/*

		 *	clear Pre_ACPI bit.

		/*

		 *	Back off algorithm use original IEEE standard

		/*

		 *	Init CAM filter

		/*

		 *	Set packet filter: Receive directed and broadcast address

		/*

		 *	Enable MII auto-polling

	/*

	 * RD number must be equal to 4X per hardware spec

	 * (programming guide rev 1.20, p.13)

/**

 *	velocity_init_dma_rings	-	set up DMA rings

 *	@vptr: Velocity to set up

 *

 *	Allocate PCI mapped DMA rings for the receive and transmit layer

 *	to use.

	/*

	 * Allocate all RD/TD rings a single pool.

	 *

	 * dma_alloc_coherent() fulfills the requirement for 64 bytes

	 * alignment

/**

 *	velocity_alloc_rx_buf	-	allocate aligned receive buffer

 *	@vptr: velocity

 *	@idx: ring index

 *

 *	Allocate a new full sized buffer for the reception of a frame and

 *	map it into PCI space for the hardware to use. The hardware

 *	requires *64* byte alignment of the buffer which makes life

 *	less fun than would be ideal.

	/*

	 *	Do the gymnastics to get the buffer head for data at

	 *	64byte alignment.

	/*

	 *	Fill in the descriptor to match

 Fine for an all zero Rx desc at init time as well */

/**

 *	velocity_free_rd_ring	-	free receive ring

 *	@vptr: velocity to clean up

 *

 *	Free the receive buffers for each ring slot and any

 *	attached socket buffers that need to go away.

/**

 *	velocity_init_rd_ring	-	set up receive ring

 *	@vptr: velocity to configure

 *

 *	Allocate and set up the receive buffers for each ring slot and

 *	assign them to the network adapter.

/**

 *	velocity_init_td_ring	-	set up transmit ring

 *	@vptr:	velocity

 *

 *	Set up the transmit ring and chain the ring pointers together.

 *	Returns zero on success or a negative posix errno code for

 *	failure.

 Init the TD ring entries */

/**

 *	velocity_free_dma_rings	-	free PCI ring pointers

 *	@vptr: Velocity to free from

 *

 *	Clean up the PCI ring buffers allocated to this velocity.

/**

 *	velocity_free_tx_buf	-	free transmit buffer

 *	@vptr: velocity

 *	@tdinfo: buffer

 *	@td: transmit descriptor to free

 *

 *	Release an transmit buffer. If the buffer was preallocated then

 *	recycle it, if not then unmap the buffer.

	/*

	 *	Don't unmap the pre-allocated tx_bufs

 For scatter-gather */

/*

 *	FIXME: could we merge this with velocity_free_tx_buf ?

/**

 *	velocity_free_td_ring	-	free td ring

 *	@vptr: velocity

 *

 *	Free up the transmit ring for this particular velocity adapter.

 *	We free the ring contents but not the ring itself.

/**

 *	velocity_error	-	handle error from controller

 *	@vptr: velocity

 *	@status: card status

 *

 *	Process an error report from the hardware and attempt to recover

 *	the card itself. At the moment we cannot recover from some

 *	theoretically impossible errors but this could be fixed using

 *	the pci_device_failed logic to bounce the hardware

 *

		/* FIXME: port over the pci_device_failed code and use it

			/*

			 *	If it is a 3119, disable frame bursting in

			 *	halfduplex mode and enable it in fullduplex

			 *	 mode

			/*

			 *	Only enable CD heart beat counter in 10HD mode

		/*

		 *	Get link status from PHYSR0

		/*

		 *	Re-enable auto-polling because SRCI will disable

		 *	auto-polling

/**

 *	velocity_tx_srv		-	transmit interrupt service

 *	@vptr: Velocity

 *

 *	Scan the queues looking for transmitted packets that

 *	we can complete and clean up. Update any statistics as

 *	necessary/

			/*

			 *	Get Tx Descriptor

	/*

	 *	Look to see if we should kick the transmit network

	 *	layer for more work.

/**

 *	velocity_rx_csum	-	checksum process

 *	@rd: receive packet descriptor

 *	@skb: network layer packet buffer

 *

 *	Process the status bits for the received packet and determine

 *	if the checksum was computed and verified by the hardware

/**

 *	velocity_rx_copy	-	in place Rx copy for small packets

 *	@rx_skb: network layer packet buffer candidate

 *	@pkt_size: received data size

 *	@vptr: velocity adapter

 *

 *	Replace the current skb that is scheduled for Rx processing by a

 *	shorter, immediately allocated skb, if the received packet is small

 *	enough. This function returns a negative value if the received

 *	packet is too big or if memory is exhausted.

/**

 *	velocity_iph_realign	-	IP header alignment

 *	@vptr: velocity we are handling

 *	@skb: network layer packet buffer

 *	@pkt_size: received data size

 *

 *	Align IP header on a 2 bytes boundary. This behavior can be

 *	configured by the user.

/**

 *	velocity_receive_frame	-	received packet processor

 *	@vptr: velocity we are handling

 *	@idx: ring index

 *

 *	A packet has arrived. We process the packet and if appropriate

 *	pass the frame up the network stack

/**

 *	velocity_rx_srv		-	service RX interrupt

 *	@vptr: velocity

 *	@budget_left: remaining budget

 *

 *	Walk the receive ring of the velocity adapter and remove

 *	any received packets from the receive queue. Hand the ring

 *	slots back to the adapter for reuse.

		/*

		 *	Don't drop CE or RL error frame although RXOK is off

	/*

	 * Do rx and tx twice for performance (taken from the VIA

	 * out-of-tree driver).

 If budget not fully consumed, exit the polling mode */

/**

 *	velocity_intr		-	interrupt callback

 *	@irq: interrupt number

 *	@dev_instance: interrupting device

 *

 *	Called whenever an interrupt is generated by the velocity

 *	adapter IRQ line. We may not be the source of the interrupt

 *	and need to identify initially if we are, and if not exit as

 *	efficiently as possible.

 Not us ? */

 Ack the interrupt */

/**

 *	velocity_open		-	interface activation callback

 *	@dev: network layer device to open

 *

 *	Called when the network layer brings the interface up. Returns

 *	a negative posix error code on failure, or zero on success.

 *

 *	All the ring allocation and set up is done on open for this

 *	adapter to minimise memory usage when inactive

 Ensure chip is running */

 Power down the chip */

/**

 *	velocity_shutdown	-	shut down the chip

 *	@vptr: velocity to deactivate

 *

 *	Shuts down the internal operations of the velocity and

 *	disables interrupts, autopolling, transmit and receive

/**

 *	velocity_change_mtu	-	MTU change callback

 *	@dev: network device

 *	@new_mtu: desired MTU

 *

 *	Handle requests from the networking layer for MTU change on

 *	this interface. It gets called on a change by the network layer.

 *	Return zero for success or negative posix error code.

/**

 *  velocity_poll_controller		-	Velocity Poll controller function

 *  @dev: network device

 *

 *

 *  Used by NETCONSOLE and other diagnostic tools to allow network I/P

 *  with interrupts disabled.

/**

 *	velocity_mii_ioctl		-	MII ioctl handler

 *	@dev: network device

 *	@ifr: the ifreq block for the ioctl

 *	@cmd: the command

 *

 *	Process MII requests made via ioctl from the network layer. These

 *	are used by tools like kudzu to interrogate the link state of the

 *	hardware

/**

 *	velocity_ioctl		-	ioctl entry point

 *	@dev: network device

 *	@rq: interface request ioctl

 *	@cmd: command code

 *

 *	Called when the user issues an ioctl request to the network

 *	device in question. The velocity interface supports MII.

	/* If we are asked for information and the device is power

 Get address of MII PHY in use. */

 Read MII PHY register. */

 Write to MII PHY register. */

/**

 *	velocity_get_stats	-	statistics callback

 *	@dev: network device

 *

 *	Callback from the network layer to allow driver statistics

 *	to be resynchronized with hardware collected state. In the

 *	case of the velocity we need to pull the MIB counters from

 *	the hardware into the counters before letting the network

 *	layer display them.

 If the hardware is down, don't touch MII */

  unsigned long   rx_dropped;     /* no space in linux buffers    */

 detailed rx_errors: */

  unsigned long   rx_length_errors;

  unsigned long   rx_over_errors;     /* receiver ring buff overflow  */

  unsigned long   rx_frame_errors;    /* recv'd frame alignment error */

  unsigned long   rx_fifo_errors;     /* recv'r fifo overrun      */

  unsigned long   rx_missed_errors;   /* receiver missed packet   */

 detailed tx_errors */

  unsigned long   tx_fifo_errors;

/**

 *	velocity_close		-	close adapter callback

 *	@dev: network device

 *

 *	Callback from the network layer when the velocity is being

 *	deactivated by the network layer

/**

 *	velocity_xmit		-	transmit packet callback

 *	@skb: buffer to transmit

 *	@dev: network device

 *

 *	Called by the network layer to request a packet is queued to

 *	the velocity. Returns zero on success.

	/* The hardware can handle at most 7 memory segments, so merge

	/*

	 *	Map the linear network buffer into PCI space and

	 *	add it to the transmit ring.

 Handle fragments */

	/*

	 *	Handle hardware checksum

/**

 *	velocity_init_info	-	init private data

 *	@vptr: Velocity info

 *	@info: Board type

 *

 *	Set up the initial velocity_info struct for the device that has been

 *	discovered.

/**

 *	velocity_get_pci_info	-	retrieve PCI info for device

 *	@vptr: velocity device

 *

 *	Retrieve the PCI configuration space data that interests us from

 *	the kernel PCI layer

/**

 *	velocity_get_platform_info - retrieve platform info for device

 *	@vptr: velocity device

 *

 *	Retrieve the Platform configuration data that interests us

/**

 *	velocity_print_info	-	per driver data

 *	@vptr: velocity

 *

 *	Print per driver data as the kernel driver finds Velocity

 *	hardware

/**

 *	velocity_probe - set up discovered velocity device

 *	@dev: PCI device

 *	@info: table of match

 *	@irq: interrupt info

 *	@bustype: bus that device is connected to

 *

 *	Configure a discovered adapter from scratch. Return a negative

 *	errno error code on failure paths.

	/* FIXME: this driver, like almost all other ethernet drivers,

	 * can support more than MAX_UNITS.

 Chain it all together */

	/*

	 *	Mask out the options cannot be set to the chip

	/*

	 *	Enable the chip specified capbilities

 MTU range: 64 - 9000 */

 and leave the chip powered down */

/**

 *	velocity_remove	- device unplug

 *	@dev: device being removed

 *

 *	Device unload callback. Called on an unplug or on module

 *	unload for each active device that is present. Disconnects

 *	the device from the network layer and frees all the resources

/**

 *	wol_calc_crc		-	WOL CRC

 *	@size: size of the wake mask

 *	@pattern: data pattern

 *	@mask_pattern: mask

 *

 *	Compute the wake on lan crc hashes for the packet header

 *	we are interested in.

 Skip this loop if the mask equals to zero */

	Finally, invert the result once to get the correct data */

/**

 *	velocity_set_wol	-	set up for wake on lan

 *	@vptr: velocity to set WOL status on

 *

 *	Set a card up for wake on lan either by unicast or by

 *	ARP packet.

 *

 *	FIXME: check static buffer is safe here

 ARP */

 Magic Packet */

	/*

	   if (vptr->wol_opts & VELOCITY_WOL_PHY)

	   writew((WOLCR_LINKON_EN|WOLCR_LINKOFF_EN), &regs->WOLCRSet);

 Turn on SWPTAG just before entering power mode */

 Go to bed ..... */

/**

 *	velocity_save_context	-	save registers

 *	@vptr: velocity

 *	@context: buffer for stored context

 *

 *	Retrieve the current configuration from the velocity hardware

 *	and stash it in the context structure, for use by the context

 *	restore functions. This allows us to save things we need across

 *	power down states

/**

 *	velocity_restore_context	-	restore registers

 *	@vptr: velocity

 *	@context: buffer for stored context

 *

 *	Reload the register configuration from the velocity context

 *	created by velocity_save_context.

 Just skip cr0 */

 Clear */

 Set */

 CONFIG_PM_SLEEP */

/*

 *	Definition for our device driver. The PCI layer interface

 *	uses this to handle all our card discover and plugging

/**

 *	velocity_ethtool_up	-	pre hook for ethtool

 *	@dev: network device

 *

 *	Called before an ethtool operation. We need to make sure the

 *	chip is out of D3 state before we poke at it. In case of ethtool

 *	ops nesting, only wake the device up in the outermost block.

/**

 *	velocity_ethtool_down	-	post hook for ethtool

 *	@dev: network device

 *

 *	Called after an ethtool operation. Restore the chip back to D3

 *	state if it isn't running. In case of ethtool ops nesting, only

 *	put the device to sleep in the outermost block.

	/*

	   if (vptr->wol_opts & VELOCITY_WOL_PHY)

		   wol.wolopts|=WAKE_PHY;

	/*

	   if (wol.wolopts & WAKE_PHY) {

	   vptr->wol_opts|=VELOCITY_WOL_PHY;

	   vptr->flags |=VELOCITY_FLAGS_WOL_ENABLED;

	   }

 mult with 4 */

 mult with 16 */

 mult with 64 */

 6 bits of  */

 Setup the interrupt suppression and queue timers */

 defined(CONFIG_PM) && defined(CONFIG_INET) */

/**

 *	velocity_init_module	-	load time function

 *

 *	Called when the velocity module is loaded. The PCI driver

 *	is registered with the PCI layer, and in turn will call

 *	the probe functions for each velocity adapter installed

 *	in the system.

 if both_registers failed, remove the notifier */

/**

 *	velocity_cleanup_module		-	module unload

 *

 *	When the velocity hardware is unloaded this function is called.

 *	It will clean up the notifiers and the unregister the PCI

 *	driver interface for this hardware. This in turn cleans up

 *	all discovered interfaces before returning from the function

 via-rhine.c: A Linux Ethernet device driver for VIA Rhine family chips. */

/*

	Written 1998-2001 by Donald Becker.



	Current Maintainer: Kevin Brace <kevinbrace@bracecomputerlab.com>



	This software may be used and distributed according to the terms of

	the GNU General Public License (GPL), incorporated herein by reference.

	Drivers based on or derived from this code fall under the GPL and must

	retain the authorship, copyright and license notice.  This file is not

	a complete program and may only be used when the entire operating

	system is licensed under the GPL.



	This driver is designed for the VIA VT86C100A Rhine-I.

	It also works with the Rhine-II (6102) and Rhine-III (6105/6105L/6105LOM

	and management NIC 6105M).



	The author may be reached as becker@scyld.com, or C/O

	Scyld Computing Corporation

	410 Severn Ave., Suite 210

	Annapolis MD 21403





	This driver contains some changes from the original Donald Becker

	version. He may or may not be interested in bug reports on this

	code. You can find his versions at:

	http://www.scyld.com/network/via-rhine.html

	[link no longer provides useful info -jgarzik]



/* A few user-configurable values.

/* Set the copy breakpoint for the copy-only-tiny-frames scheme.

/* Work-around for broken BIOSes: they are unable to get the chip back out of

/*

 * In case you are looking for 'options[]' or 'full_duplex[]', they

 * are gone. Use ethtool(8) instead.

/* Maximum number of multicast addresses to filter (vs. rx-all-multicast).

 Operational parameters that are set at compile time. */

/* Keep the ring sizes a power of two for compile efficiency.

 * The compiler will convert <unsigned>'%'<2^N> into a bit mask.

 * Making the Tx ring too large decreases the effectiveness of channel

 * bonding and packet priority.

 * With BQL support, we can increase TX ring safely.

 * There are no ill effects from too-large receive rings.

 Limit ring entries actually used. */

 Operational parameters that usually are not changed. */

 Time in jiffies before concluding the transmitter is hung. */

 Size of each temporary Rx buffer.*/

 Processor type for cache alignment. */

/*

		Theory of Operation



I. Board Compatibility



This driver is designed for the VIA 86c100A Rhine-II PCI Fast Ethernet

controller.



II. Board-specific settings



Boards with this chip are functional only in a bus-master PCI slot.



Many operational settings are loaded from the EEPROM to the Config word at

offset 0x78. For most of these settings, this driver assumes that they are

correct.

If this driver is compiled to use PCI memory space operations the EEPROM

must be configured to enable memory ops.



III. Driver operation



IIIa. Ring buffers



This driver uses two statically allocated fixed-size descriptor lists

formed into rings by a branch from the final descriptor to the beginning of

the list. The ring sizes are set at compile time by RX/TX_RING_SIZE.



IIIb/c. Transmit/Receive Structure



This driver attempts to use a zero-copy receive and transmit scheme.



Alas, all data buffers are required to start on a 32 bit boundary, so

the driver must often copy transmit packets into bounce buffers.



The driver allocates full frame size skbuffs for the Rx ring buffers at

open() time and passes the skb->data field to the chip as receive data

buffers. When an incoming frame is less than RX_COPYBREAK bytes long,

a fresh skbuff is allocated and the frame is copied to the new skbuff.

When the incoming frame is larger, the skbuff is passed directly up the

protocol stack. Buffers consumed this way are replaced by newly allocated

skbuffs in the last phase of rhine_rx().



The RX_COPYBREAK value is chosen to trade-off the memory wasted by

using a full-sized skbuff for small frames vs. the copying costs of larger

frames. New boards are typically used in generously configured machines

and the underfilled buffers have negligible impact compared to the benefit of

a single allocation size, so the default value of zero results in never

copying packets. When copying is done, the cost is usually mitigated by using

a combined copy/checksum routine. Copying also preloads the cache, which is

most useful with small frames.



Since the VIA chips are only able to transfer data to buffers on 32 bit

boundaries, the IP header at offset 14 in an ethernet frame isn't

longword aligned for further processing. Copying these unaligned buffers

has the beneficial effect of 16-byte aligning the IP header.



IIId. Synchronization



The driver runs as two independent, single-threaded flows of control. One

is the send-packet routine, which enforces single-threaded use by the

netdev_priv(dev)->lock spinlock. The other thread is the interrupt handler,

which is single threaded by the hardware and interrupt handling software.



The send packet thread has partial control over the Tx ring. It locks the

netdev_priv(dev)->lock whenever it's queuing a Tx packet. If the next slot in

the ring is not available it stops the transmit queue by

calling netif_stop_queue.



The interrupt handler has exclusive control over the Rx ring and records stats

from the Tx ring. After reaping the stats, it marks the Tx queue entry as

empty by incrementing the dirty_tx mark. If at least half of the entries in

the Rx ring are available the transmit queue is woken up if it was stopped.



IV. Notes



IVb. References



Preliminary VT86C100A manual from http://www.via.com.tw/

http://www.scyld.com/expert/100mbps.html

http://www.scyld.com/expert/NWay.html

ftp://ftp.via.com.tw/public/lan/Products/NIC/VT86C100A/Datasheet/VT86C100A03.pdf

ftp://ftp.via.com.tw/public/lan/Products/NIC/VT6102/Datasheet/VT6102_021.PDF





IVc. Errata



The VT86C100A manual is not reliable information.

The 3043 chip does not handle unaligned transmit or receive buffers, resulting

in significant performance degradation for bounce buffer copies on transmit

and unaligned IP headers on receive.

The chip does not pad to minimum transmit length.



/* This table drives the PCI probe routines. It's mostly boilerplate in all

   of the drivers, and will likely be provided by some future kernel.

   Note the matching code -- the first table entry matchs all 56** cards but

   second only the 1234 card.

 Integrated MAC */

 Integrated MAC */

 Integrated MAC */

 Integrated MAC */

 Integrated MAC */

 Management adapter */

 Wake-On-LAN support */

 6 instead of 4 patterns for WOL */

 Tx Status Writeback Error possible */

 See comment below */

 Integrated PHY */

 Management adapter */

	rqNeedEnMMIO	= 0x0800,	/* Whether the core needs to be

					 * switched from PIO mode to MMIO

					 * (only applies to PCI)

/*

 * rqRhineI: VT86C100A (aka Rhine-I) uses different bits to enable

 * MMIO as well as for the collision counter and the Tx FIFO underflow

 * indicator. In addition, Tx and Rx buffers need to 4 byte aligned.

 Beware of PCI posted writes */

 VT86C100A */

 VT6102 */

 6105{,L,LOM} */

 VT6105M */

 terminate list */

/* OpenFirmware identifiers for platform-bus devices

 * The .data field is currently only used to store quirks

 terminate list */

 Offsets to the device registers. */

 Bits in ConfigD */

 Bits in the TxConfig (TCR) register */

 loopback[0] */

 loopback[1] */

 Bits in the CamCon (CAMC) register */

 Bits in the PCIBusConfig1 (BCR1) register */

 for VT6105 */

 for VT6105 */

 for VT6102 */

 for VT6102 */

 Registers we check that mmio and reg are the same. */

 Bits in the interrupt status/mask registers. */

 mapped from IntrStatus2 */

 Bits in WOLcrSet/WOLcrClr and PwrcsrSet/PwrcsrClr */

 The Rx and Tx buffer descriptors. */

 Chain flag, Buffer/frame length */

 Chain flag, Tx Config, Frame length */

 Initial value for tx_desc.desc_length, Buffer size goes to bits 0-10 */

 Bits in *_desc.*_status */

 Bits in *_desc.*_length */

 Bits in ChipCmd. */

 Bit mask for configured VLAN ids */

 Descriptor rings */

 The addresses of receive-in-place skbuffs. */

 The saved address of a sent-in-place packet/buffer, for later free(). */

 Tx bounce buffers (Rhine-I only) */

 Frequently used values: keep some adjacent for cache effect. */

 Based on MTU+slack. */

 On Rhine-II, Bit 3 indicates Tx descriptor write-back race. */

/*

 * Get power related registers into sane state.

 * Notify user about past WOL event.

 Make sure chip is in power state D0 */

 Disable "force PME-enable" */

 Clear power-event config bits (WOL) */

 More recent cards can manage two additional patterns */

 Save power-event status bits */

 Clear power-event status bits */

 Force reset */

 Reset can take somewhat longer (rare) */

 More recent docs say that this bit is reserved */

 Check that selected MMIO registers match the PIO ones */

/*

 * Loads bytes 0x00-0x05, 0x6E-0x6F, 0x78-0x7B from EEPROM

 * (plus 0x6C for Rhine-I/II)

	/*

	 * Reloading from EEPROM overwrites ConfigA-D, so we must re-enable

	 * MMIO. If reloading EEPROM was done first this could be avoided, but

	 * it is not known if that still works with the "win98-reboot" problem.

 Turn off EEPROM-controlled wake-up (magic packet) */

	/*

	 * Clears the "tally counters" for CRC errors and missed frames(?).

	 * It has been reported that some chips need a write of 0 to clear

	 * these, for others the counters are set to 1 when written to and

	 * instead cleared when read. So we clear them both ways ...

 Avoid scavenging before Tx engine turned off */

 Reset the chip to erase previous misconfiguration. */

 Rhine-I needs extra time to recuperate before EEPROM reload */

 Reload EEPROM controlled bytes cleared by soft reset */

 this should always be supported */

 Get chip registers into a sane state */

 Report it and use a random ethernet address instead */

 For Rhine-I/II, phy_id is loaded from EEPROM */

 The chip-specific entries in the device structure. */

 dev->name not defined before register_netdev()! */

 set IFF_RUNNING */

/* This driver was written to use PCI memory space. Some early versions

 * of the Rhine may only work correctly with I/O space accesses.

 * TODO: determine for which revisions this is true and assign the flag

 *	 in code as opposed to this Kconfig option (???)

 sanity check */

 Init the ring entries */

 Mark the last entry as wrapping the ring. */

 Fill in the Rx buffers.  Handle allocation failure gracefully. */

 Free all the skbuffs in the Rx queue. */

 An invalid address. */

 An invalid address. */

 Called after status of force_media possibly changed */

 autoneg is off: Link is always assumed to be up */

/**

 * rhine_set_cam - set CAM multicast filters

 * @ioaddr: register block of this Rhine

 * @idx: multicast CAM index [0..MCAM_SIZE-1]

 * @addr: multicast address (6 bytes)

 *

 * Load addresses into multicast filters.

 Paranoid -- idx out of range should never happen */

/**

 * rhine_set_vlan_cam - set CAM VLAN filters

 * @ioaddr: register block of this Rhine

 * @idx: VLAN CAM index [0..VCAM_SIZE-1]

 * @addr: VLAN ID (2 bytes)

 *

 * Load addresses into VLAN filters.

 Paranoid -- idx out of range should never happen */

/**

 * rhine_set_cam_mask - set multicast CAM mask

 * @ioaddr: register block of this Rhine

 * @mask: multicast CAM mask

 *

 * Mask sets multicast filters active/inactive.

 write mask */

 disable CAMEN */

/**

 * rhine_set_vlan_cam_mask - set VLAN CAM mask

 * @ioaddr: register block of this Rhine

 * @mask: VLAN CAM mask

 *

 * Mask sets VLAN filters active/inactive.

 write mask */

 disable CAMEN */

/**

 * rhine_init_cam_filter - initialize CAM filters

 * @dev: network device

 *

 * Initialize (disable) hardware VLAN and multicast support on this

 * Rhine.

 Disable all CAMs */

 disable hardware VLAN support */

/**

 * rhine_update_vcam - update VLAN CAM filters

 * @dev: rhine_private data of this Rhine

 *

 * Update VLAN CAM filters to match configuration change.

 32 vCAMs (6105M and better) */

 Initialize other registers. */

 Tune configuration??? */

 Configure initial FIFO thresholds. */

 Written in rhine_set_rx_mode(). */

 Enable MII link status auto-polling (required for IntrLinkChange) */

 Disable MII link status auto-polling (required for MDIO access) */

 MII_BMSR

 Can be called from ISR. Evil. */

 0x80 must be set immediately before turning it off */

 Heh. Now clear 0x80 again. */

 Read and write over the MII Management Data I/O (MDIO) interface. */

 rhine_disable_linkmon already cleared MIICmd */

 Trigger read */

 rhine_disable_linkmon already cleared MIICmd */

 Trigger write */

 clear all descriptors */

 Reinitialize the hardware. */

 prevent tx timeout */

	/* Caution: the write order is important here, set the field

 Calculate the next Tx descriptor entry. */

 Must use alignment buffer. */

 packet too long, drop it */

 Padding is not copied and so must be redone. */

 drop CFI/DEI bit, register needs VID and PCP */

 request tagging */

 lock eth irq */

	/*

	 * Nobody wants cur_tx write to rot for ages after the NIC will have

	 * seen the transmit request, especially as the transmit completion

	 * handler could miss it.

 Non-x86 Todo: explicitly flush cache lines here. */

 Tx queues are bits 7-0 (first Tx queue: bit 7) */

 Wake the potentially-idle transmit channel */

 dirty_tx may be pessimistically out-of-sync. See rhine_tx. */

 Rejuvenate. */

/* The interrupt handler does all of the Rx thread work and cleans up

/* This routine is logically part of the interrupt handler, but isolated

	/*

	 * The race with rhine_start_tx does not matter here as long as the

	 * driver enforces a value of cur_tx that was relevant when the

	 * packet was scheduled to the network chipset.

	 * Executive summary: smp_rmb() balances smp_wmb() in rhine_start_tx.

 find and cleanup dirty tx descriptors */

 Keep the skb - we try again */

 Transmitter restarted in 'abnormal' handler. */

 Free the original skb. */

 Pity we can't rely on the nearby BQL completion implicit barrier. */

 cur_tx may be optimistically out-of-sync. See rhine_start_tx. */

 Rejuvenate. */

/**

 * rhine_get_vlan_tci - extract TCI from Rx data buffer

 * @skb: pointer to sk_buff

 * @data_size: used data area of the buffer including CRC

 *

 * If hardware VLAN tag extraction is enabled and the chip indicates a 802.1Q

 * packet, the extracted 802.1Q header (2 bytes TPID + 2 bytes TCI) is 4-byte

 * aligned following the CRC.

 Process up to limit frames from receive ring */

 If EOP is set on the next entry, it's a new packet. Send it up. */

 There was a error. */

 this can also be updated outside the interrupt handler */

 Length should omit the CRC */

			/* Check if the packet is long enough to accept without

	/*

	 * If new errors occurred, we need to sort them out before doing Tx.

	 * In that case the ISR will be back here RSN anyway.

 We know better than the chip where it should continue. */

 Tx queues are bits 7-0 (first Tx queue: bit 7) */

 This should never happen */

 Multicast hash filter */

 Note: 0x02=accept runt, 0x01=accept errs */

 Set promiscuous. */

 Too many to match, or accept all multicasts. */

 32 mCAMs (6105M and better) */

 enable/disable VLAN receive filtering */

 Untested */

 Untested */

 Switch to loopback mode to avoid hardware races. */

 Stop the chip's Tx and Rx processes. */

 Nothing to do for non-WOL adapters */

 Make sure we use pattern 0, 1 and not 4, 5 */

		/*

		 * Turn EEPROM-controlled wake-up back on -- some hardware may

		 * not cooperate otherwise.

 Enable legacy WOL (for old motherboards) */

 !CONFIG_PM_SLEEP */

 when a module, this is printed whether or not devices are found in probe */

 these BIOSes fail at PXE boot if chip is in D3 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Aeroflex Gaisler GRETH 10/100/1G Ethernet MAC.

 *

 * 2005-2010 (c) Aeroflex Gaisler AB

 *

 * This driver supports GRETH 10/100 and GRETH 10/100/1G Ethernet MACs

 * available in the GRLIB VHDL IP core library.

 *

 * Full documentation of both cores can be found here:

 * https://www.gaisler.com/products/grlib/grip.pdf

 *

 * The Gigabit version supports scatter/gather DMA, any alignment of

 * buffers and checksum offloading.

 *

 * Contributors: Kristoffer Glembo

 *               Daniel Hellstrom

 *               Marko Isomaki

 -1 == use GRETH_DEF_MSG_ENABLE as value */

 Accept MAC address of the form macaddr=0x08,0x00,0x20,0x30,0x40,0x50 */

 BDs must been written to memory before enabling TX */

 Free and unmap RX buffers */

 TX buffers */

 10/100 Mbps MAC */

 Initialize descriptor rings and buffers */

 10/100 MAC uses a fixed set of buffers and copy to/from SKBs */

 Initialize pointers. */

 Initialize descriptor base address */

 Clean TX Ring */

save from poll/irq*/

 Enable TX IRQ only if not already in poll() routine */

 Wrap around descriptor ring */

 Write descriptor control word and enable transmission */

save from poll/irq*/

 tx_last is updated by the poll task */

 Save skb pointer. */

 Linear buf */

 Frags */

 Wrap around descriptor ring */

 More fragments left */

 enable IRQ on last fragment */

 Enable the descriptor chain by enabling the first descriptor */

save from poll/irq*/

 Unmap SKB mappings that succeeded and disable descriptor */

 Get the interrupt events that caused us to be here. */

	/* Must see if interrupts are enabled also, INT_TX|INT_RX flags may be

	 * set regardless of whether IRQ is enabled or not. Especially

	 * important when shared IRQ.

 Handle rx and tx interrupts through poll */

 Disable interrupts and schedule poll() */

 Check status for errors */

 Check status for errors */

 We only clean fully completed SKBs */

 skb is set only if the above while loop was entered */

 Check status for errors. */

 save from XMIT */

 Check status for errors. */

		/* Allocate new skb to replace current, not needed if the

 Process the incoming frame. */

 reusing current skb, so it is a drop */

 Bad Frame transfer, the skb is reused */

			/* Failed Allocating a new skb. This is rather stupid

			 * but the current "filled" skb is reused, as if

			 * transfer failure. One could argue that RX descriptor

			 * table handling should be divided into cleaning and

			 * filling as the TX part of the driver

 reusing current skb, so it is a drop */

 Setup multicast filter */

 Find the first PHY */

 If Ethernet debug link is used make autoneg happen right away */

 Initialize the GRETH MAC */

 Reset the controller. */

 Wait for MAC to reset itself */

 Get default PHY address  */

 Check if we have GBIT capable MAC */

 Check for multicast capability */

	/* If we have EDCL we disable the EDCL speed-duplex FSM so

 Check if MAC can handle MDIO interrupts */

 Allocate TX descriptor ring in coherent memory */

 Allocate RX descriptor ring in coherent memory */

 Get MAC address from: module param, OF property or ID prom */

 Clear all pending interrupts except PHY irq */

 setup NAPI */

 Free descriptor areas */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * DOC: Cadence GEM PCI wrapper.

 *

 * Copyright (C) 2016 Cadence Design Systems - https://www.cadence.com

 *

 * Authors: Rafal Ozieblo <rafalo@cadence.com>

 *	    Bartosz Folta <bfolta@cadence.com>

 enable pci device */

 set up resources */

 set up macb platform data */

 initialize clocks */

 set up platform device info */

 register platform device */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Cadence MACB/GEM Ethernet Controller driver

 *

 * Copyright (C) 2004-2006 Atmel Corporation

 This structure is only used for MACB on SiFive FU540 devices */

 bytes */

 must be power of 2 */

 must be power of 2 */

 level of occupied TX descriptors under which we wake up TX process */

 Max length of transmit frame must be a multiple of 8 bytes */

/* Limit maximum TX length as per Cadence TSO errata. This is to avoid a

 * false amba_error in TX path from the DMA assuming there is not enough

 * space in the SRAM (16KB) even when there is.

/* Graceful stop timeouts in us. We should allow up to

 * 1 frame time (10 Mbits/s, full-duplex, ignoring collisions)

 ms */

 in usecs */

/* DMA buffer descriptor might be different size

 * depends on hardware configuration:

 *

 * 1. dma address width 32 bits:

 *    word 1: 32 bit address of Data Buffer

 *    word 2: control

 *

 * 2. dma address width 64 bits:

 *    word 1: 32 bit address of Data Buffer

 *    word 2: control

 *    word 3: upper 32 bit address of Data Buffer

 *    word 4: unused

 *

 * 3. dma address width 32 bits with hardware timestamping:

 *    word 1: 32 bit address of Data Buffer

 *    word 2: control

 *    word 3: timestamp word 1

 *    word 4: timestamp word 2

 *

 * 4. dma address width 64 bits with hardware timestamping:

 *    word 1: 32 bit address of Data Buffer

 *    word 2: control

 *    word 3: upper 32 bit address of Data Buffer

 *    word 4: unused

 *    word 5: timestamp word 1

 *    word 6: timestamp word 2

 Ring buffer accessors */

 I/O accessors */

/* Find the CPU endianness by using the loopback bit of NCR register. When the

 * CPU is in big endian we need to program swapped mode for management

 * descriptor access.

 Write 0 back to disable everything */

 Clear unused address register sets */

 Check all 4 address register for valid address */

/**

 * macb_set_tx_clk() - Set a clock to a new frequency

 * @bp:		pointer to struct macb

 * @speed:	New frequency in Hz

 In case of MII the PHY is the clock master */

	/* RGMII allows 50 ppm frequency error. Test and warn if this limit

	 * is not satisfied.

 We only support MII, RMII, GMII, RGMII & SGMII. */

 Not supported */

 Apply the new configuration, if any */

	/* Disable AN for SGMII fixed link configuration, enable otherwise.

	 * Must be written after PCSSEL is set in NCFGR,

	 * otherwise writes will not take effect.

 Disable Rx and Tx */

		/* Initialize rings & buffers as clearing MACB_BIT(TE) in link down

		 * cleared the pipeline and control registers.

 Enable Rx and Tx */

 attach the mac to the phy */

 based on au1000_eth. c*/

	/* If we have a child named mdio, probe it instead of looking for PHYs

	 * directly under the MAC node

	/* Only create the PHY from the device tree if at least one PHY is

	 * described. Otherwise scan the entire MDIO bus. We do this to support

	 * old device tree that did not follow the best practices and did not

	 * describe their network PHYs.

			/* The loop increments the child refcount,

			 * decrement it before returning.

 Enable management port */

		/* The low bits of RX address contain the RX_USED bit, clearing

		 * of which allows packet RX. Make sure the high bits are also

		 * visible to HW at that point.

	/* Prevent the queue IRQ handlers from running: each of them may call

	 * macb_tx_interrupt(), which in turn may call netif_wake_subqueue().

	 * As explained below, we have to halt the transmission before updating

	 * TBQP registers so we call netif_tx_stop_all_queues() to notify the

	 * network engine about the macb/gem being halted.

 Make sure nobody is trying to queue up new packets */

	/* Stop transmission now

	 * (in case we have just queued new packets)

	 * macb/gem must be halted to write TBQP register

 Just complain for now, reinitializing TX path can be good */

	/* Treat frames in TX queue including the ones that caused the error.

	 * Free transmit buffers in upper layer.

 skb is set for the last buffer of the frame */

			/* ctrl still refers to the first buffer descriptor

			 * since it's the only one written back by the hardware

			/* "Buffers exhausted mid-frame" errors may only happen

			 * if the driver is buggy, so complain loudly about

			 * those. Statistics are updated by hardware.

 Set end of TX queue */

 Make descriptor updates visible to hardware */

 Reinitialize the TX desc queue */

 Make TX ring reflect state of hardware */

 Housework before enabling TX IRQ */

 Now we are ready to start transmission again */

 Make hw descriptor updates visible to CPU */

		/* TX_USED bit is only set by hardware on the very first buffer

		 * descriptor of the transmitted frame.

 Process all buffers of the current transmitted frame */

 First, update TX stats if needed */

					/* skb now belongs to timestamp buffer

					 * and will be removed later

 Now we can safely release resources */

			/* skb is set only for the last buffer of the frame.

			 * WARNING: at this point skb has been freed by

			 * macb_tx_unmap().

 Make hw descriptor updates visible to CPU */

 allocate sk_buff for this free entry in ring */

 now fill corresponding descriptor entry */

			/* Setting addr clears RX_USED and allows reception,

			 * make sure ctrl is cleared first to avoid a race.

 properly align Ethernet header */

 Make descriptor updates visible to hardware */

 Mark DMA descriptors from begin up to and not including end as unused */

 Make descriptor updates visible to hardware */

	/* When this happens, the hardware stats registers for

	 * whatever caused this is updated, so we don't have to record

	 * anything.

 Make hw descriptor updates visible to CPU */

 Ensure ctrl is at least as up-to-date as rxused */

 now everything is ready for receiving packet */

	/* The ethernet header starts NET_IP_ALIGN bytes into the

	 * first buffer. Since the header is 14 bytes, this makes the

	 * payload word-aligned.

	 *

	 * Instead of calling skb_reserve(NET_IP_ALIGN), we just copy

	 * the two padding bytes into the skb so that we avoid hitting

	 * the slowpath in memcpy(), and pull them off afterwards.

 Make descriptor updates visible to hardware */

 Make descriptor updates visible to hardware */

 Make hw descriptor updates visible to CPU */

 Ensure ctrl is at least as up-to-date as addr */

 Packets received while interrupts were disabled */

 TODO: Handle errors */

 Initialize TX and RX buffers */

 Enable interrupts */

 close possible race with dev_close */

			/* There's no point taking any more interrupts

			 * until we have processed the buffers. The

			 * scheduling call may fail if the poll routine

			 * is already scheduled, so disable interrupts

			 * now.

		/* Link change detection isn't possible with RMII, so we'll

		 * add that if/when we get our hands on a full-blown MII PHY.

		/* There is a hardware issue under heavy load where DMA can

		 * stop, this causes endless "used buffer descriptor read"

		 * interrupts but it can be cleared by re-enabling RX. See

		 * the at91rm9200 manual, section 41.3.1 or the Zynq manual

		 * section 16.7.4 for details. RXUBR is only enabled for

		 * these two versions.

 We missed at least one packet */

/* Polling receive - used by netconsole and other diagnostic tools

 * to allow network i/o with interrupts disabled.

 LSO */

 UDP - UFO */

 TCP - TSO */

 First, map non-paged data */

 first buffer length */

 Save info to properly release resources */

 Then, map paged data from fragments */

 Save info to properly release resources */

 Should never happen */

 This is the last buffer of the frame: save socket buffer */

	/* Update TX ring: update buffer descriptors in reverse order

	 * to avoid race condition

	/* Set 'TX_USED' bit in buffer descriptor at tx_head position

	 * to set the end of TX queue

 include header and FCS in value given to h/w */

 TSO */ {

			/* TCP Sequence Number Source Select

			 * can be set only for TSO

 First descriptor is header descriptor */

			/* Only set MSS/MFS on payload descriptors

			 * (second or later descriptor)

 Set TX buffer descriptor */

		/* desc->addr must be visible to hardware before clearing

		 * 'TX_USED' bit in desc->ctrl.

 Validate LSO compatibility */

 there is only one buffer or protocol is not UDP */

 length of header */

	/* For UFO only:

	 * When software supplies two or more payload buffers all payload buffers

	 * apart from the last must be a multiple of 8 bytes in size.

 No need to check last fragment */

 no change for packets without checksum offloading */

 make sure we can modify the header */

	/* initialize checksum field

	 * This is required - at least for Zynq, which otherwise calculates

	 * wrong UDP header checksums for UDP packets with UDP data len <=2

 Not available for GSO */

 FCS could be appeded to tailroom. */

 FCS could be appeded by moving data to headroom. */

 No room for FCS, need to reallocate skb. */

 Add room for FCS. */

 set FCS to packet */

 length of headers */

 only queue eth + ip headers separately for UDP */

 if this is required, would need to copy to single buffer */

	/* Count how many TX buffer descriptors are needed to send this

	 * socket buffer: skb fragments of jumbo frames may need to be

	 * split into many buffer descriptors.

 extra header descriptor if also payload in first buffer */

 This is a hard error, log it. */

 Map socket buffer for DMA transfer */

 Make newly initialized descriptor visible to hardware */

	/* Disable RX and TX (XXX: Should we halt the transmission

	 * more gracefully?)

 Clear the stats registers (XXX: Update stats first?) */

 Clear all status flags */

 Disable all interrupts */

/* Get the DMA bus width field of the network configuration register that we

 * should program.  We find the width from decoding the design configuration

 * register to find the maximum supported data bus width.

/* Configure the receive DMA engine

 * - use the correct receive buffer size

 * - set best burst length for DMA operations

 *   (if not supported by FIFO, it will fallback to default)

 * - set both rx/tx packet buffers to full memory size

 * These are configurable parameters for GEM.

 CPU in big endian */

 Make eth data aligned */

 Discard Rx FCS */

 Enable jumbo frames */

 Receive oversized frames */

 Copy All Frames */

 No BroadCast */

/* The hash address register is 64 bits long and takes up two

 * locations in the memory map.  The least significant bits are stored

 * in EMAC_HSL and the most significant bits in EMAC_HSH.

 *

 * The unicast hash enable and the multicast hash enable bits in the

 * network configuration register enable the reception of hash matched

 * frames. The destination address is reduced to a 6 bit index into

 * the 64 bit hash register using the following hash function.  The

 * hash function is an exclusive or of every sixth bit of the

 * destination address.

 *

 * hi[5] = da[5] ^ da[11] ^ da[17] ^ da[23] ^ da[29] ^ da[35] ^ da[41] ^ da[47]

 * hi[4] = da[4] ^ da[10] ^ da[16] ^ da[22] ^ da[28] ^ da[34] ^ da[40] ^ da[46]

 * hi[3] = da[3] ^ da[09] ^ da[15] ^ da[21] ^ da[27] ^ da[33] ^ da[39] ^ da[45]

 * hi[2] = da[2] ^ da[08] ^ da[14] ^ da[20] ^ da[26] ^ da[32] ^ da[38] ^ da[44]

 * hi[1] = da[1] ^ da[07] ^ da[13] ^ da[19] ^ da[25] ^ da[31] ^ da[37] ^ da[43]

 * hi[0] = da[0] ^ da[06] ^ da[12] ^ da[18] ^ da[24] ^ da[30] ^ da[36] ^ da[42]

 *

 * da[0] represents the least significant bit of the first byte

 * received, that is, the multicast/unicast indicator, and da[47]

 * represents the most significant bit of the last byte received.  If

 * the hash index, hi[n], points to a bit that is set in the hash

 * register then the frame will be matched according to whether the

 * frame is multicast or unicast.  A multicast match will be signalled

 * if the multicast hash enable bit is set, da[0] is 1 and the hash

 * index points to a bit set in the hash register.  A unicast match

 * will be signalled if the unicast hash enable bit is set, da[0] is 0

 * and the hash index points to a bit set in the hash register.  To

 * receive all multicast frames, the hash register should be set with

 * all ones and the multicast hash enable bit should be set in the

 * network configuration register.

 Return the hash index value for the specified address. */

 Add multicast addresses to the internal multicast-hash table. */

 Enable/Disable promiscuous and multicast modes. */

 Enable promiscuous mode */

 Disable RX checksum offload */

 Disable promiscuous mode */

 Enable RX checksum offload only if requested */

 Enable all multicast mode */

 Enable specific multicasts */

 Disable all multicast mode */

 RX buffers initialization */

 Add GEM_OCTTXH, GEM_OCTRXH */

 read stats from hardware */

 Convert HW stats into netdevice stats */

 XXX: What does "missed" mean? */

 Don't know about heartbeat or window errors... */

 Pass the order to phylink layer */

	/* Don't manage WoL on MAC if handled by the PHY

	 * or if there's a failure in talking to the PHY

 nothing to do */

 try pclk instead */

 enable/disable screener regs for the flow entry */

 only enable fields with no masking */

 ignore field if any masking set */

 1st compare reg - IP source address */

 32-bit compare */

 ignore field if any masking set */

 2nd compare reg - IP destination address */

 32-bit compare */

 ignore both port fields if masking set in both */

 3rd compare reg - source port, destination port */

 32-bit compare */

 only one port definition */

 16-bit compare */

 src port */

 dst port */

 find correct place to add in list */

 enable filtering if NTUPLE on */

 disable screener regs for the flow entry */

 TX checksum offload */

 RX checksum offload */

 RX Flow Filters */

 TX checksum offload */

 RX checksum offload */

 RX Flow Filters */

/* Configure peripheral capabilities according to device tree

 * and integration options used

	/* is it macb or gem ?

	 *

	 * We need to read directly from the hardware here because

	 * we are early in the probe process and don't have the

	 * MACB_CAPS_MACB_IS_GEM flag positioned

 bit 0 is never set but queue 0 always exists */

	/* set the queue register mapping once for all: queue0 has a special

	 * register mapping but we don't want to test the queue index then

	 * compute the corresponding register offset at run time.

 queue0 uses legacy registers */

		/* get irq: here we use the linux queue index, not the hardware

		 * queue index. the queue irq definitions in the device tree

		 * must remove the optional gaps that could exist in the

		 * hardware queue mask.

 setup appropriated routines according to adapter type */

 Set features */

 Check LSO capability */

 Checksum offload is only available on gem with packet buffer */

	/* Check RX Flow Filters support.

	 * Max Rx flows set by availability of screeners & compare regs:

	 * each 4-tuple define requires 1 T2 screener reg + 3 compare regs

 also needs one ethtype match to check IPv4 */

 program this reg now */

 Filtering is supported in hw but don't enable it in kernel now */

 init Rx flow definitions */

 Set MII management clock divider */

 1518 rounded up */

 max number of receive buffers */

 Initialize and start the Receiver and Transmit subsystems */

 Set the Wrap bit on the last descriptor */

 Reset buffer index */

 Program address of descriptor list in Rx Buffer Queue register */

 Enable Receive and Transmit */

 Enable MAC interrupts */

 Disable MAC interrupts */

 Disable Receiver and Transmitter */

 Free resources. */

 Open the ethernet interface */

 Clear internal statistics */

 Close the interface */

 Transmit packet */

 Store packet information (to free when Tx completed) */

 Set address of the data in the Transmit Address register */

 Set length of the packet in the Transmit Control register */

/* Extract received frame from buffer descriptors and sent to upper layers.

 * (Called from interrupt context)

 reset ownership bit */

 wrap after last buffer */

 MAC interrupt handler */

	/* MAC Interrupt Status register indicates what interrupts are pending.

	 * It is automatically cleared once read.

 Receive complete */

 Transmit complete */

 The TCOM bit is set even if the transmission failed */

 Work-around for EMAC Errata section 41.3.1 */

 sentinel */ }

 CONFIG_OF */

 setup capabilities */

 MTU range: 68 - 1500 or 10240 */

 not found in DT, MII by default */

 IP specific init */

 Flush all status bits */

 Disable all interrupts */

		/* Change interrupt handler and

		 * Enable WoL IRQ on queue 0

 Disable WoL */

 Clear ISR on queue 0 */

 Replace interrupt handler on queue 0 */

		/* Now make sure we disable phy before moving

		 * to common restore path

 SPDX-License-Identifier: GPL-2.0-only

/*

 * 1588 PTP support for Cadence GEM device.

 *

 * Copyright (C) 2017 Cadence Design Systems - https://www.cadence.com

 *

 * Authors: Rafal Ozieblo <rafalo@cadence.com>

 *          Bartosz Folta <bfolta@cadence.com>

 test for nsec rollover */

		/* if so, use later read & re-read seconds

		 * (assume all done within 1s)

 TSH doesn't latch the time and no atomicity! */

 clear to avoid overflow */

 write lower bits 2nd, for synchronized secs update */

	/* tsu_timer_incr register must be written after

	 * the tsu_timer_incr_sub_ns register and the write operation

	 * will cause the value written to the tsu_timer_incr_sub_ns register

	 * to take effect.

 RegBit[15:0] = Subns[23:8]; RegBit[31:24] = Subns[7:0] */

 Adjustment is relative to base frequency */

 scaling: unused(8bit) | ns(8bit) | fractions(16bit) */

	/* Divide with rounding, equivalent to floating dividing:

	 * (temp / USEC_PER_SEC) + 0.5

 remove fractions */

 1. get current system time */

 2. set ptp timer */

 3. set PTP timer increment value to BASE_INCREMENT */

	/* TSU overlapping workaround

	 * The timestamp only contains lower few bits of seconds,

	 * so add value from 1588 timer

	/* If the top bit is set in the timestamp,

	 * but not in 1588 timer, it has rolled over,

	 * so subtract max size

 Unlikely but check */

 Unlikely but check */

 ensure ts_1/ts_2 is loaded after ctrl (TX_USED check) */

 move head */

 take current head */

 cleanup */

 remove old tail */

 nominal frequency and maximum adjustment in ppb */

 reserved for future extensions */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010 ASIX Electronics Corporation

 * Copyright (c) 2020 Samsung Electronics Co., Ltd.

 *

 * ASIX AX88796C SPI Fast Ethernet Linux driver

 just broadcast and directed */

 Try the device tree first */

 Read the MAC address from AX88796C */

 Use random address if none found */

 Prepare SOP header */

 Prepare Segment header */

 Prepare EOP header */

 schedule free page interrupt */

 SOP and SEG header */

 Write SPI TXQ header */

 Make 32-bit alignment */

 EOP header */

 Ack tx error int */

 Reinitial tx bridge */

 checksum error bit is set */

 Other types may be indicated by more than one bit. */

 check rx packet and total word count */

 Check if rx bridge is idle */

 nothing */;

 Disable stuffing packet */

 Enable RX packet process */

 Setup LED mode */

 Disable PHY auto-polling */

 Enable MAC interrupts */

 Setup flow-control configuration */

	/* We lock the mutex early not only to protect the device

	 * against concurrent access, but also avoid waking up the

	 * queue in ax88796c_work(). phy_stop() needs to be called

	 * before because it locks the mutex to access SPI.

	/* No more work can be scheduled now. Make any pending work,

	 * including one already waiting for the mutex to be unlocked,

	 * NOP.

 Disable MAC interrupts */

 reset info */

 set reset */

 ax88796c gpio reset */

 Reset AX88796C */

 Check board revision */

Reload EEPROM*/

 Disable power saving */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010 ASIX Electronics Corporation

 * Copyright (c) 2020 Samsung Electronics Co., Ltd.

 *

 * ASIX AX88796C SPI Fast Ethernet Linux driver

 Inherit standard device info */

 The following logic comes from phylink_ethtool_set_pauseparam() */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010 ASIX Electronics Corporation

 * Copyright (c) 2020 Samsung Electronics Co., Ltd.

 *

 * ASIX AX88796C SPI Fast Ethernet Linux driver

 driver bus management functions */

 OP */

 OP */

 OP code read register */

 register address */

 dumy cycle */

 dumy cycle */

 OP code read register */

 register address */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * IBM Power Virtual Ethernet Device Driver

 *

 * Copyright (C) IBM Corporation, 2003, 2010

 *

 * Authors: Dave Larson <larson1@us.ibm.com>

 *	    Santiago Leon <santil@linux.vnet.ibm.com>

 *	    Brian King <brking@linux.vnet.ibm.com>

 *	    Robert Jennings <rcj@linux.vnet.ibm.com>

 *	    Anton Blanchard <anton@au.ibm.com>

 simple methods of getting data from the current rxq entry */

 setup the initial settings for a buffer pool */

 allocate and setup an buffer pool - called during open */

/* replenish the buffers for a pool.  note that we don't need to

 * skb_reserve these since they are used for incoming...

/*

 * The final 8 bytes of the buffer list is a counter of frames dropped

 * because there was not a buffer in the buffer list capable of holding

 * the frame.

 replenish routine */

 empty and free ana buffer pool - also used to do cleanup in error paths */

 remove a buffer from a pool */

 get the current buffer on the rx queue */

 recycle the current buffer on the rx queue */

	/*

	 * After a kexec the adapter will still be open, so our attempt to

	 * open it will fail. So if we get a failure we free the adapter and

	 * try again, but only once.

	/*

	 * Since the ibmveth firmware interface does not have the

	 * concept of separate tx/rx checksum offload enable, if rx

	 * checksum is disabled we also have to disable tx checksum

	 * offload. Once we disable rx checksum offload, we are no

	 * longer allowed to send tx buffers that are not properly

	 * checksummed.

		/* Older firmware version of large send offload does not

		 * support tcp6/ipv6

	/*

	 * The retry count sets a maximum for the number of broadcast and

	 * multicast destinations within the system.

	/* veth doesn't handle frag_list, so linearize the skb.

	 * When GRO is enabled SKB's can have frag_list.

	/*

	 * veth handles a maximum of 6 segments including the header, so

	 * we have to linearize the skb if there are more than this.

 veth can't checksum offload UDP */

 Need to zero out the checksum */

	/*

	 * If a linear packet is below the rx threshold then

	 * copy it into the static bounce buffer. This avoids the

	 * cost of a TCE insert and remove.

 Map the header */

 Map the frags */

			/* Put -1 in the IP checksum to tell phyp it

			 * is a largesend packet. Put the mss in

			 * the TCP checksum.

 only TCP packets will be aggregated */

	/* if mss is not set through Large Packet bit/mss in rx buffer,

	 * expect that the mss will be written to the tcp header checksum.

		/* If the IP checksum is not offloaded and if the packet

		 *  is large send, the checksum must be rebuilt.

	/* When CSO is enabled the TCP checksum may have be set to NULL by

	 * the sender given that we zeroed out TCP checksum field in

	 * transmit path (refer ibmveth_start_xmit routine). In this case set

	 * up CHECKSUM_PARTIAL. If the packet is forwarded, the checksum will

	 * then be recalculated by the destination NIC (CSO must be enabled

	 * on the destination NIC).

	 *

	 * In an OVS environment, when a flow is not cached, specifically for a

	 * new TCP connection, the first packet information is passed up to

	 * the user space for finding a flow. During this process, OVS computes

	 * checksum on the first packet when CHECKSUM_PARTIAL flag is set.

	 *

	 * So, re-compute TCP pseudo header checksum when configured for

	 * trunk mode.

 Recompute TCP pseudo header checksum  */

 Setup SKB fields for checksum offload */

 suggested by larson1 */

			/* if the large packet bit is set in the rx queue

			 * descriptor, the mss will be written by PHYP eight

			 * bytes from the start of the rx buffer, which is

			 * skb->data at this stage

			/* PHYP without PLSO support places a -1 in the ip

			 * checksum for large send frames.

 send it up */

		/* We think we are done - reenable interrupts,

		 * then check once more to make sure we are done.

 clear the filter table & disable filtering */

 add the addresses to the filter table */

 add the multicast address to the filter table */

 re-enable filtering */

	/* Deactivate all the buffer pools so that the next loop can activate

 Look for an active buffer pool that can hold the new MTU */

/**

 * ibmveth_get_desired_dma - Calculate IO memory desired by the driver

 *

 * @vdev: struct vio_dev for the device whose desired IO mem is to be returned

 *

 * Return value:

 *	Number of bytes of IO data the driver will need to perform well.

 netdev inits at probe time along with the structures we need below*/

 add the size of the active receive buffers */

 add the size of the receive queue entries */

 Workaround for old/broken pHyp */

 If running older firmware, TSO should not be enabled by default */

			/* Make sure there is a buffer pool with buffers that

 kick the interrupt handler to allocate/deallocate pools */

 SPDX-License-Identifier: GPL-2.0-or-later

*************************************************************************/

                                                                        */

  IBM System i and System p Virtual NIC Device Driver                   */

  Copyright (C) 2014 IBM Corp.                                          */

  Santiago Leon (santi_leon@yahoo.com)                                  */

  Thomas Falcon (tlfalcon@linux.vnet.ibm.com)                           */

  John Allen (jallen@linux.vnet.ibm.com)                                */

                                                                        */

                                                                        */

 This module contains the implementation of a virtual ethernet device   */

 for use with IBM i/p Series LPAR Linux. It utilizes the logical LAN    */

 option of the RS/6000 Platform Architecture to interface with virtual  */

 ethernet NICs that are presented to the partition by the hypervisor.   */

									   */

 Messages are passed between the VNIC driver and the VNIC server using  */

 Command/Response Queues (CRQs) and sub CRQs (sCRQs). CRQs are used to  */

 issue and receive commands that initiate communication with the server */

 on driver initialization. Sub CRQs (sCRQs) are similar to CRQs, but    */

 are used by the driver to notify the server that a packet is           */

 ready for transmission or that a buffer has been added to receive a    */

 packet. Subsequently, sCRQs are used by the server to notify the       */

 driver that a packet transmission has been completed or that a packet  */

 has been received and placed in a waiting buffer.                      */

                                                                        */

 In lieu of a more conventional "on-the-fly" DMA mapping strategy in    */

 which skbs are DMA mapped and immediately unmapped when the transmit   */

 or receive has been completed, the VNIC driver is required to use      */

 "long term mapping". This entails that large, continuous DMA mapped    */

 buffers are allocated on driver initialization and these buffers are   */

 then continuously reused to pass skbs to and from the VNIC server.     */

                                                                        */

*************************************************************************/

/**

 * ibmvnic_wait_for_completion - Check device state and wait for completion

 * @adapter: private device data

 * @comp_done: completion structure to wait for

 * @timeout: time to wait in milliseconds

 *

 * Wait for a completion signal or until the timeout limit is reached

 * while checking that the device is still active.

/**

 * reuse_ltb() - Check if a long term buffer can be reused

 * @ltb:  The long term buffer to be checked

 * @size: The size of the long term buffer.

 *

 * An LTB can be reused unless its size has changed.

 *

 * Return: Return true if the LTB can be reused, false otherwise.

/**

 * alloc_long_term_buff() - Allocate a long term buffer (LTB)

 *

 * @adapter: ibmvnic adapter associated to the LTB

 * @ltb:     container object for the LTB

 * @size:    size of the LTB

 *

 * Allocate an LTB of the specified size and notify VIOS.

 *

 * If the given @ltb already has the correct size, reuse it. Otherwise if

 * its non-NULL, free it. Then allocate a new one of the correct size.

 * Notify the VIOS either way since we may now be working with a new VIOS.

 *

 * Allocating larger chunks of memory during resets, specially LPM or under

 * low memory situations can cause resets to fail/timeout and for LPAR to

 * lose connectivity. So hold onto the LTB even if we fail to communicate

 * with the VIOS and reuse it on next open. Free LTB when adapter is closed.

 *

 * Return: 0 if we were able to allocate the LTB and notify the VIOS and

 *	   a negative value otherwise.

 Ensure ltb is zeroed - specially when reusing it. */

 don't free LTB on communication error - see function header */

	/* VIOS automatically unmaps the long term buffer at remote

	 * end for the following resets:

	 * FAILOVER, MOBILITY, TIMEOUT.

 mark this map_id free */

	/* netdev_skb_alloc() could have failed after we saved a few skbs

	 * in the indir_buf and we would not have sent them to VIOS yet.

	 * To account for them, start the loop at ind_bufp->index rather

	 * than 0. If we pushed all the skbs to VIOS, ind_bufp->index will

	 * be 0.

		/* We maybe reusing the skb from earlier resets. Allocate

		 * only if necessary. But since the LTB may have changed

		 * during reset (see init_rx_pools()), update LTB below

		 * even if reusing skb.

 Copy the skb to the long term mapped DMA buffer */

 add the skb to an rx_buff in the pool */

 queue the rx_buff for the next send_subcrq_indirect */

		/* The length field of the sCRQ is defined to be 24 bits so the

		 * buffer size needs to be left shifted by a byte before it is

		 * converted to big endian to prevent the last byte from being

		 * truncated.

 if send_subcrq_indirect queue is full, flush to VIOS */

		/* Disable buffer pool replenishment and report carrier off if

		 * queue is closed or pending failover.

		 * Firmware guarantees that a signal will be sent to the

		 * driver, triggering a reset.

/**

 * release_rx_pools() - Release any rx pools attached to @adapter.

 * @adapter: ibmvnic adapter

 *

 * Safe to call this multiple times - even if no pools are attached.

/**

 * reuse_rx_pools() - Check if the existing rx pools can be reused.

 * @adapter: ibmvnic adapter

 *

 * Check if the existing rx pools in the adapter can be reused. The

 * pools can be reused if the pool parameters (number of pools,

 * number of buffers in the pool and size of each buffer) have not

 * changed.

 *

 * NOTE: This assumes that all pools have the same number of buffers

 *       which is the case currently. If that changes, we must fix this.

 *

 * Return: true if the rx pools can be reused, false otherwise.

 Require buff size to be exactly same for now */

/**

 * init_rx_pools(): Initialize the set of receiver pools in the adapter.

 * @netdev: net device associated with the vnic interface

 *

 * Initialize the set of receiver pools in the ibmvnic adapter associated

 * with the net_device @netdev. If possible, reuse the existing rx pools.

 * Otherwise free any existing pools and  allocate a new set of pools

 * before initializing them.

 *

 * Return: 0 on success and negative value on error.

 # of buffers in one pool */

 Allocate/populate the pools. */

	/* Set num_active_rx_pools early. If we fail below after partial

	 * allocation, release_rx_pools() will know how many to look for.

			/* NOTE: Don't clear rx_buff->skb here - will leak

			 * memory! replenish_rx_pool() will reuse skbs or

			 * allocate as necessary.

		/* Mark pool "empty" so replenish_rx_pools() will

		 * update the LTB info for each buffer

		/* replenish_rx_pool() may have called deactivate_rx_pools()

		 * on failover. Ensure pool is active now.

	/* We failed to allocate one or more LTBs or map them on the VIOS.

	 * Hold onto the pools and any LTBs that we did allocate/map.

/**

 * release_tx_pools() - Release any tx pools attached to @adapter.

 * @adapter: ibmvnic adapter

 *

 * Safe to call this multiple times - even if no pools are attached.

	/* init_tx_pools() ensures that ->tx_pool and ->tso_pool are

	 * both NULL or both non-NULL. So we only need to check one.

/**

 * reuse_tx_pools() - Check if the existing tx pools can be reused.

 * @adapter: ibmvnic adapter

 *

 * Check if the existing tx pools in the adapter can be reused. The

 * pools can be reused if the pool parameters (number of pools,

 * number of buffers in the pool and mtu) have not changed.

 *

 * NOTE: This assumes that all pools have the same number of buffers

 *       which is the case currently. If that changes, we must fix this.

 *

 * Return: true if the tx pools can be reused, false otherwise.

 Require MTU to be exactly same to reuse pools for now */

/**

 * init_tx_pools(): Initialize the set of transmit pools in the adapter.

 * @netdev: net device associated with the vnic interface

 *

 * Initialize the set of transmit pools in the ibmvnic adapter associated

 * with the net_device @netdev. If possible, reuse the existing tx pools.

 * Otherwise free any existing pools and  allocate a new set of pools

 * before initializing them.

 *

 * Return: 0 on success and negative value on error.

 # of buffers in pool */

	/* We must notify the VIOS about the LTB on all resets - but we only

	 * need to alloc/populate pools if either the number of buffers or

	 * size of each buffer in the pool has changed.

 Allocate/populate the pools. */

	/* To simplify release_tx_pools() ensure that ->tx_pool and

	 * ->tso_pool are either both NULL or both non-NULL.

	/* Set num_active_tx_pools early. If we fail below after partial

	 * allocation, release_tx_pools() will know how many to look for.

	/* NOTE: All tx_pools have the same number of buffers (which is

	 *       same as pool_size). All tso_pools have IBMVNIC_TSO_BUFS

	 *       buffers (see calls init_one_tx_pool() for these).

	 *       For consistency, we use tx_pool->num_buffers and

	 *       tso_pool->num_buffers below.

	/* We failed to allocate one or more LTBs or map them on the VIOS.

	 * Hold onto the pools and any LTBs that we did allocate/map.

			/* FW or device may be busy, so

			 * wait a bit before retrying login

 Partuial success, delay and re-send */

 Vital Product Data (VPD) */

	/* We're ready to receive frames, enable the sub-crq interrupts and

	 * set the logical link state to up

	/* If device failover is pending or we are about to reset, just set

	 * device state and return. Device operation will be handled by reset

	 * routine.

	 *

	 * It should be safe to overwrite the adapter->state here. Since

	 * we hold the rtnl, either the reset has not actually started or

	 * the rtnl got dropped during the set_link_state() in do_reset().

	 * In the former case, no one else is changing the state (again we

	 * have the rtnl) and in the latter case, do_reset() will detect and

	 * honor our setting below.

	/* If open failed and there is a pending failover or in-progress reset,

	 * set device state and return. Device operation will be handled by

	 * reset routine. See also comments above regarding rtnl.

 Free any remaining skbs in the rx buffer pools */

 Free any remaining skbs in the tx buffer pools */

 ensure that transmissions are stopped if called by do_reset */

	/* If device failover is pending, just set device state and return.

	 * Device operation will be handled by reset routine.

/**

 * build_hdr_data - creates L2/L3/L4 header data buffer

 * @hdr_field: bitfield determining needed headers

 * @skb: socket buffer

 * @hdr_len: array of header lengths

 * @hdr_data: buffer to write the header to

 *

 * Reads hdr_field to determine which headers are needed by firmware.

 * Builds a buffer containing these headers.  Saves individual header

 * lengths and total buffer length to be used to build descriptors.

/**

 * create_hdr_descs - create header and header extension descriptors

 * @hdr_field: bitfield determining needed headers

 * @hdr_data: buffer containing header data

 * @len: length of data buffer

 * @hdr_len: array of individual header lengths

 * @scrq_arr: descriptor array

 *

 * Creates header and, if needed, header extension descriptors and

 * places them in a descriptor array, scrq_arr

/**

 * build_hdr_descs_arr - build a header descriptor array

 * @skb: tx socket buffer

 * @indir_arr: indirect array

 * @num_entries: number of descriptors to be sent

 * @hdr_field: bit field determining which headers will be sent

 *

 * This function will build a TX descriptor array with applicable

 * L2/L3/L4 packet header descriptors to be sent by send_subcrq_indirect.

	/* For some backing devices, mishandling of small packets

	 * can result in a loss of connection or TX stall. Device

	 * architects recommend that no packet should be smaller

	 * than the minimum MTU value provided to the driver, so

	 * pad any packets to that length

 Copy the head */

 Copy the frags */

 post changes to long_term_buff *dst before VIOS accessing it */

 flush buffer if current entry can not fit */

		/* Disable TX and report carrier off if queue is closed

		 * or pending failover.

		 * Firmware guarantees that a signal will be sent to the

		 * driver, triggering a reset or some other action.

 Accept all multicast */

 Reject all multicast */

 Accept one or more multicast(s) */

 netdev->dev_addr is changed in handle_change_mac_rsp function */

/*

 * do_reset returns zero if we are able to keep processing reset events, or

 * non-zero if we hit a fatal error and must halt.

 requestor of VNIC_RESET_CHANGE_PARAM already has the rtnl lock */

	/* Now that we have the rtnl lock, clear any pending failover.

	 * This will ensure ibmvnic_open() has either completed or will

	 * block until failover is complete.

 read the state and check (again) after getting rtnl */

			/* Release the RTNL lock before link state change and

			 * re-acquire after the link state change to allow

			 * linkwatch_event to grab the RTNL lock and run during

			 * a reset.

				/* When we dropped rtnl, ibmvnic_open() got

				 * it and noticed that we are resetting and

				 * set the adapter state to OPEN. Update our

				 * new "target" state, and resume the reset

				 * from VNIC_CLOSING state.

				/* If someone else changed the adapter state

				 * when we dropped the rtnl, fail the reset

		/* remove the closed state so when we call open it appears

		 * we are coming from the probed state.

		/* If the adapter was in PROBE or DOWN state prior to the reset,

		 * exit here.

 refresh device's multicast list */

 restore the adapter state if reset failed */

 requestor of VNIC_RESET_CHANGE_PARAM should still hold the rtnl lock */

 read the state and check (again) after getting rtnl */

	/* remove the closed state so when we call open it appears

	 * we are coming from the probed state.

	/* If the adapter was in PROBE or DOWN state prior to the reset,

	 * exit here.

 restore adapter state if reset failed */

/**

 * do_passive_init - complete probing when partner device is detected.

 * @adapter: ibmvnic_adapter struct

 *

 * If the ibmvnic device does not have a partner device to communicate with at boot

 * and that partner device comes online at a later time, this function is called

 * to complete the initialization process of ibmvnic device.

 * Caller is expected to hold rtnl_lock().

 *

 * Returns non-zero if sub-CRQs are not initialized properly leaving the device

 * in the down state.

 * Returns 0 upon success and the device is in PROBED state.

			/* Since we are doing a hard reset now, clear the

			 * failover_pending flag so we don't ignore any

			 * future MOBILITY or other resets.

 Transport event occurred during previous reset */

 Previous was CHANGE_PARAM; caller locked */

 give backing device time to settle down */

		/*

		 * If there is another reset queued, free the previous rwi

		 * and process the new reset even if previous reset failed

		 * (the previous reset could have failed because of a fail

		 * over for instance, so process the fail over).

		 *

		 * If there are no resets queued and the previous reset failed,

		 * the adapter would be in an undefined state. So retry the

		 * previous reset as a hard reset.

	/* If failover is pending don't schedule any other reset.

	 * Instead let the failover complete. If there is already a

	 * a failover reset scheduled, we will detect and drop the

	 * duplicate reset when walking the ->rwi_list below.

	/* if we just received a transport event,

	 * flush reset queue and process this reset

 ibmvnic_close() below can block, so drop the lock first */

	/* No queuing up reset until at least 5 seconds (default watchdog val)

	 * after last reset

 do error checking */

 free the entry */

 free the entry */

 load long_term_buff before copying to skb */

		/* VLAN Header has been stripped by the system firmware and

		 * needs to be inserted by the driver

 free the entry */

 send it up */

	/* Some backing hardware adapters can not

	 * handle packets with a MSS less than 224

	 * or with only one segment.

 ethtool functions */

	/* Don't need to send a query because we request a logical link up at

	 * init and then we wait for link state indications

 Wait for data to be written */

 Routines for managing CRQs/sCRQs  */

 Close the sub-crqs */

		/* H_EOI would fail with rc = H_FUNCTION when running

		 * in XIVE mode which is expected, but not an error.

 remove tx_comp scrq*/

	/* When booting a kdump kernel we can hit pending interrupts

	 * prior to completing driver initialization.

 Make sure we were able to register the minimum number of queues */

 Distribute the failed allocated queues*/

 Sub-CRQ entries are 32 byte long */

	/* Ensure that the SCRQ valid flag is loaded prior to loading the

	 * contents of the SCRQ descriptor

	/* Ensure that the SCRQ valid flag is loaded prior to loading the

	 * contents of the SCRQ descriptor

 Make sure the hypervisor sees the complete request */

 Make sure the hypervisor sees the complete request */

 do not reset, report the fail, wait for passive init from server */

	/* Calculate the amount of buffer space needed for the

	 * vnic client data in the login buffer. There are four entries,

	 * OS name, LPAR name, device name, and a null last entry.

 "Linux" plus NULL */

 Type 1 - LPAR OS */

 Type 2 - LPAR name */

 Type 3 - device name */

 Insert vNIC login client data */

 Send a series of CRQs requesting various capabilities of the VNIC server */

 large_rx disabled for now, additional features needed */

 disable features no longer supported */

 turn on features now supported if previously enabled */

	/* get the position of the firmware version info

	 * located after the ASCII 'RM' substring in the buffer

 get length of firmware level ASCII substring */

 copy firmware version string from vpd into adapter */

	/* crq->change_mac_addr.mac_addr is the requested one

	 * crq->change_mac_addr_rsp.mac_addr is the returned valid one.

 Done receiving requested capabilities, query IP offload support */

	/* CHECK: Test/set of login_pending does not need to be atomic

	 * because only ibmvnic_tasklet tests/clears this.

	/* If the number of queues requested can't be allocated by the

	 * server, the login response will return with code 1. We will need

	 * to resend the login buffer with fewer queues requested.

 login response buffer will be released on reset */

 Sanity checks */

	/* variable buffer sizes are not supported, so just read the

	 * first entry.

			/* Discard any stale login responses from prev reset.

			 * CHECK: should we clear even on INIT_COMPLETE?

				/* We were unable to schedule the failover

				 * reset either because the adapter was still

				 * probing (eg: during kexec) or we could not

				 * allocate memory. Clear the failover_pending

				 * flag since no one else will. We ignore

				 * EBUSY because it means either FAILOVER reset

				 * is already scheduled or the adapter is

				 * being removed.

		/* terminate any thread waiting for a response

		 * from the device

 The adapter lost the connection */

 Pull all the valid messages off the CRQ */

			/* This barrier makes sure ibmvnic_next_crq()'s

			 * crq->generic.first & IBMVNIC_CRQ_CMD_RSP is loaded

			 * before ibmvnic_handle_crq()'s

			 * switch(gen_crq->first) and switch(gen_crq->cmd).

		/* remain in tasklet until all

		 * capabilities responses are received

	/* if capabilities CRQ's were sent in this tasklet, the following

	 * tasklet must wait until all responses are received

 Close the CRQ */

 Clean out the queue */

 And re-open it again */

 Adapter is good, but other end is not ready */

 Should we allocate more than one page? */

 maybe kexecing and resource is busy. try a reset */

 process any CRQs that were queued before we enabled interrupts */

 map_ids start at 1, so ensure map_id 0 is always "in-use" */

	/* We are ignoring the error from ibmvnic_reset_init() assuming that the

	 * partner is not ready. CRQ is not active. When the partner becomes

	 * ready, we will do the passive init reset.

	/* If ibmvnic_reset() is scheduling a reset, wait for it to

	 * finish. Then, set the state to REMOVING to prevent it from

	 * scheduling any more work and to have reset functions ignore

	 * any resets that have already been scheduled. Drop the lock

	 * after setting state, so __ibmvnic_reset() which is called

	 * from the flush_work() below, can make progress.

 netdev inits at probe time along with the structures we need below*/

 the crq message queue */

 the scrq message queue */

 module functions */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/net/ethernet/ibm/ehea/ehea_main.c

 *

 *  eHEA ethernet device driver for IBM eServer System p

 *

 *  (C) Copyright IBM Corp. 2006

 *

 *  Authors:

 *	 Christoph Raisch <raisch@de.ibm.com>

 *	 Jan-Bernd Themann <themann@de.ibm.com>

 *	 Thomas Klein <tklein@de.ibm.com>

 Determine number of handles */

 Keep the existing array */

 Determine number of registrations */

 Broadcast registrations */

 Keep the existing array */

 Ring doorbell */

 Ring doorbell */

 Ring doorbell */

remove CRC */

	/* The packet was not an IPV4 packet so a complemented checksum was

 LL RQ1 */

 RQ2 */

 RQ3 */

 Reset in case of CQ or EQ error */

 may be called via ehea_neq_tasklet() */

 MAC address */

 Port speed */

 Number of default QPs */

 port state change */

 send */

 associated events */

 generate CQE if specified in WQE */

		/*

		 * For TSO packets we only copy the headers into the

		 * immediate area.

 write descriptors */

 sg1entry not yet used */

 copy sg1entry data */

 De/Register untagged packets */

 De/Register VLAN packets */

 Deregister old MAC in pHYP */

 Register new MAC in pHYP */

 Modify Pxs_DUCQPN in CB7 */

 Enable ALLMULTI */

 Disable ALLMULTI */

			/* Dropping the current multicast list failed.

			 * Enabling ALL_MULTI is the best we can do.

 Set default QP for this port */

 Purge send queue */

 Disable queue pair */

 deregister shared memory regions */

 Enable queue pair */

 refill entire queue */

 Shutdown all ports */

 Unregister old memory region */

 Register new memory region */

 Restart all ports */

 (Try to) enable *jumbo frames */

 allocate memory for the port structures */

 initialize net_device structure */

 MTU range: 68 - 9022 */

 re-add canceled memory block */

 Register memory hooks on probe of first adapter */

 Only remove the hooks if we've registered them */

 initialize adapter and ports */

 get adapter properties */

 Handle any events that might be pending. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/net/ethernet/ibm/ehea/ehea_phyp.c

 *

 *  eHEA ethernet device driver for IBM eServer System p

 *

 *  (C) Copyright IBM Corp. 2006

 *

 *  Authors:

 *	 Christoph Raisch <raisch@de.ibm.com>

 *	 Jan-Bernd Themann <themann@de.ibm.com>

 *	 Thomas Klein <tklein@de.ibm.com>

  logarithmus dualis */

 Defines for H_CALL H_ALLOC_RESOURCE */

 array of 9 outputs */

 R4 */

 R5 */

 R6 */

 R7 */

 R8 */

 input param R5 */

 input param R9  */

 input param R10 */

 Max Send Scatter Gather Elements */

 Max Receive SG Elements RQ1 */

 input param R11 */

 max swqe immediate data length */

 input param R12 */

 Threshold RQ2 */

 Threshold RQ3 */

 output param R6 */

 output param, R7 */

 output param R8,R9 */

 output param R11,R12 */

 rq1 & rq2 & rq3 */

 EQE gen. disabled */

 R4 */

 R5 */

 R6 */

 R7 */

 R8 */

 R9 */

 R10 */

 R11 */

 R12 */

 R4 */

 R5 */

 R6 */

 R7 */

 R8 */

 R9-R12 */

 Defines for H_CALL H_ALLOC_RESOURCE */

  input param R5 */

  input param R6 */

  output param R6 */

  output param R7 */

  output param R8 */

  output param R9 */

  output param R10 */

  output param R11 */

  output param R12 */

 resource type */

 R4 */

 R5 */

 R6 */

 R7-R10 */

 R4 */

 R5 */

 R6 */

 R7 */

 R8 */

 R9-R12 */

 R4 */

 R5 */

 R6 */

 R7 */

 R8 */

 R9-R10 */

 R4 */

 R5 */

 R6 */

 R7 */

 R8 */

 R9-R12 */

 R4 */

 R5 */

 R6 */

 R7-R12 */

 R4 */

 R5 */

 R7-R10 */

 R4 */

 R5 */

 R6 */

 R7 */

 R8 */

 R9 */

 R10-R12 */

 R4 */

 R5 */

 R6-R10 */

 R4 */

 R5 */

 R6 */

 R7 */

 R8 */

 R9-R10 */

 R4 */

 R5 */

 R6 */

 R7 */

 R8 */

 R9-R12 */

 R4 */

 R5 */

 R6 */

 R7 */

 R8 */

 R9-R12 */

 R4 */

 R5 */

 R6 */

 R7-R12 */

 R4 */

 R5 */

 R6 */

 R7-R12 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/net/ethernet/ibm/ehea/ehea_ethtool.c

 *

 *  eHEA ethernet device driver for IBM eServer System p

 *

 *  (C) Copyright IBM Corp. 2006

 *

 *  Authors:

 *       Christoph Raisch <raisch@de.ibm.com>

 *       Jan-Bernd Themann <themann@de.ibm.com>

 *       Thomas Klein <tklein@de.ibm.com>

 BUG */

 Restart autonegotiation */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/net/ethernet/ibm/ehea/ehea_qmr.c

 *

 *  eHEA ethernet device driver for IBM eServer System p

 *

 *  (C) Copyright IBM Corp. 2006

 *

 *  Authors:

 *       Christoph Raisch <raisch@de.ibm.com>

 *       Jan-Bernd Themann <themann@de.ibm.com>

 *       Thomas Klein <tklein@de.ibm.com>

	/*

	 * allocate pages for queue:

	 * outer loop allocates whole kernel pages (page aligned) and

	 * inner loop divides a kernel page into smaller hea queue pages

 deregister all previous registered pages */

 last page */

 allocates memory for a queue and registers pages in phyp */

 Mark entries as valid or invalid only; address is assigned later */

 valid */

 invalid */

 Assign contiguous addresses for mr */

 Given chunk is >= 16GB -> check for hugepages */

 Add mem found in front of the hugepage */

 Skip the hugepage */

 Add mem found behind the hugepage(s)  */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * drivers/net/ethernet/ibm/emac/zmii.c

 *

 * Driver for PowerPC 4xx on-chip ethernet controller, ZMII bridge support.

 *

 * Copyright 2007 Benjamin Herrenschmidt, IBM Corp.

 *                <benh@kernel.crashing.org>

 *

 * Based on the arch/ppc version of the driver:

 *

 * Copyright (c) 2004, 2005 Zultys Technologies.

 * Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *

 * Based on original work by

 *      Armin Kuster <akuster@mvista.com>

 * 	Copyright 2001 MontaVista Softare Inc.

 ZMIIx_FER */

 ZMIIx_SSR */

/* ZMII only supports MII, RMII and SMII

 * we also support autodetection for backward compatibility

		/* Probably an EMAC connected to RGMII,

		 * but it still may need ZMII for MDIO so

		 * we don't fail here.

	/* Autodetect ZMII mode if not specified.

	 * This is only for backward compatibility with the old driver.

	 * Please, always specify PHY mode in your board port to avoid

	 * any surprises.

 All inputs must use the same mode */

	/* Report back correct PHY mode,

	 * it may be used during PHY initialization.

 Enable this input */

 Disable this input */

	hdr->index = 0; /* for now, are there chips with more than one

			 * zmii ? if yes, then we'll add a cell_index

			 * like we do for emac

 We may need FER value for autodetection later */

 Disable all inputs by default */

 For backward compat with old DT */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * drivers/net/ethernet/ibm/emac/rgmii.c

 *

 * Driver for PowerPC 4xx on-chip ethernet controller, RGMII bridge support.

 *

 * Copyright 2007 Benjamin Herrenschmidt, IBM Corp.

 *                <benh@kernel.crashing.org>

 *

 * Based on the arch/ppc version of the driver:

 *

 * Copyright (c) 2004, 2005 Zultys Technologies.

 * Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *

 * Based on original work by

 * 	Matt Porter <mporter@kernel.crashing.org>

 * 	Copyright 2004 MontaVista Software, Inc.

 XXX FIXME: Axon seems to support a subset of the RGMII, we

 thus need to take that into account and possibly change some

 of the bit settings below that don't seem to quite match the

 AXON spec

 RGMIIx_FER */

 RGMIIx_SSR */

 RGMII bridge supports only GMII/TBI and RGMII/RTBI PHYs */

 Check if we need to attach to a RGMII */

 Enable this input */

 Disable this input */

	hdr->index = 0; /* for now, are there chips with more than one

			 * rgmii ? if yes, then we'll add a cell_index

			 * like we do for emac

 Check for RGMII flags */

 CAB lacks the right properties, fix this up */

 Disable all inputs by default */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * drivers/net/ethernet/ibm/emac/tah.c

 *

 * Driver for PowerPC 4xx on-chip ethernet controller, TAH support.

 *

 * Copyright 2007 Benjamin Herrenschmidt, IBM Corp.

 *                <benh@kernel.crashing.org>

 *

 * Based on the arch/ppc version of the driver:

 *

 * Copyright 2004 MontaVista Software, Inc.

 * Matt Porter <mporter@kernel.crashing.org>

 *

 * Copyright (c) 2005 Eugene Surovegin <ebs@ebshome.net>

 Reset has been done at probe() time... nothing else to do for now */

 Reset TAH */

 10KB TAH TX FIFO accommodates the max MTU of 9000 */

	hdr->index = 0; /* for now, are there chips with more than one

			 * zmii ? if yes, then we'll add a cell_index

			 * like we do for emac

 Initialize TAH and enable IPv4 checksum verification, no TSO yet */

 For backward compat with old DT */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * drivers/net/ethernet/ibm/emac/mal.c

 *

 * Memory Access Layer (MAL) support

 *

 * Copyright 2007 Benjamin Herrenschmidt, IBM Corp.

 *                <benh@kernel.crashing.org>

 *

 * Based on the arch/ppc version of the driver:

 *

 * Copyright (c) 2004, 2005 Zultys Technologies.

 * Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *

 * Based on original work by

 *      Benjamin Herrenschmidt <benh@kernel.crashing.org>,

 *      David Gibson <hermes@gibson.dropbear.id.au>,

 *

 *      Armin Kuster <akuster@mvista.com>

 *      Copyright 2002 MontaVista Softare Inc.

 Don't let multiple commacs claim the same channel(s) */

	/*

	 * On some 4xx PPC's (e.g. 460EX/GT), the rx channel is a multiple

	 * of 8, but enabling in MAL_RXCASR needs the divided by 8 value

	 * for the bitmask

	/*

	 * On some 4xx PPC's (e.g. 460EX/GT), the rx channel is a multiple

	 * of 8, but enabling in MAL_RXCASR needs the divided by 8 value

	 * for the bitmask

 starts disabled */

 synchronized by mal_poll() */

 XXX might want to cache MAL_CFG as the DCR read can be slooooow

 synchronized by NAPI state */

 XXX might want to cache MAL_CFG as the DCR read can be slooooow

 Clear the error status register */

			/* We ignore Descriptor error,

			 * TXDE or RXDE interrupt will be generated anyway.

			/* PLB error, it's probably buggy hardware or

			 * incorrect physical address in BD (i.e. bug)

		/* OPB error, it's probably buggy hardware or incorrect

		 * EBC setup

 descriptor error */

 SERR */

 Spinlock-type semantics: only one caller disable poll at a time */

 Synchronize with the MAL NAPI poller */

	/* Feels better to trigger a poll here to catch up with events that

	 * may have happened on this channel while disabled. It will most

	 * probably be delayed until the next interrupt but that's mostly a

	 * non-issue in the context where this is called.

 Process TX skbs */

	/* Process RX skbs.

	 *

	 * We _might_ need something more smart here to enforce polling

	 * fairness.

 We need to disable IRQs to protect from RXDE IRQ here */

 Check for "rotting" packet(s) */

 Wait for reset to complete (1 system clock) */

 Load power-on reset defaults */

 Set the MAL configuration register */

	/* Current Axon is not happy with priority being non-0, it can

	 * deadlock, fix it up here

 Apply configuration */

 Allocate space for BD rings */

 Enable all MAL SERR interrupt sources */

 Enable EOB interrupt */

 Advertise this instance to the rest of the world */

 Synchronize with scheduled polling */

 This is *very* bad */

 Backward compat */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * drivers/net/ethernet/ibm/emac/core.c

 *

 * Driver for PowerPC 4xx on-chip ethernet controller.

 *

 * Copyright 2007 Benjamin Herrenschmidt, IBM Corp.

 *                <benh@kernel.crashing.org>

 *

 * Based on the arch/ppc version of the driver:

 *

 * Copyright (c) 2004, 2005 Zultys Technologies.

 * Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *

 * Based on original work by

 * 	Matt Porter <mporter@kernel.crashing.org>

 *	(c) 2003 Benjamin Herrenschmidt <benh@kernel.crashing.org>

 *      Armin Kuster <akuster@mvista.com>

 * 	Johnnie Peters <jpeters@mvista.com>

/*

 * Lack of dma_unmap_???? calls is intentional.

 *

 * API-correct usage requires additional support state information to be

 * maintained for every RX and TX buffer descriptor (BD). Unfortunately, due to

 * EMAC design (e.g. TX buffer passed from network stack can be split into

 * several BDs, dma_map_single/dma_map_page can be used to map particular BD),

 * maintaining such information will add additional overhead.

 * Current DMA API implementation for 4xx processors only ensures cache coherency

 * and dma_unmap_???? routines are empty and are likely to stay this way.

 * I decided to omit dma_unmap_??? calls because I don't want to add additional

 * complexity just for the sake of following some abstract API, when it doesn't

 * add any real benefit to the driver. I understand that this decision maybe

 * controversial, but I really tried to make code API-correct and efficient

 * at the same time and didn't come up with code I liked :(.                --ebs

 minimum number of free TX descriptors required to wake up TX process */

/* If packet size is less than this number, we allocate small skb and copy packet

 * contents into it instead of just sending original big skb up

/* Since multiple EMACs share MDIO lines in various ways, we need

 * to avoid re-using the same PHY ID in cases where the arch didn't

 * setup precise phy_map entries

 *

 * XXX This is something that needs to be reworked as we can have multiple

 * EMAC "sets" (multiple ASICs containing several EMACs) though we can

 * probably require in that case to have explicit PHY IDs in the device-tree

/* This is the wait queue used to wait on any event related to probe, that

 * is discovery of MALs, other EMACs, ZMII/RGMIIs, etc...

/* Having stable interface names is a doomed idea. However, it would be nice

 * if we didn't have completely random interface names at boot too :-) It's

 * just a matter of making everybody's life easier. Since we are doing

 * threaded probing, it's a bit harder though. The base idea here is that

 * we make up a list of all emacs in the device-tree before we register the

 * driver. Every emac will then wait for the previous one in the list to

 * initialize before itself. We should also keep that list ordered by

 * cell_index.

 * That list is only 4 entries long, meaning that additional EMACs don't

 * get ordering guarantees unless EMAC_BOOT_LIST_SIZE is increased.

 How long should I wait for dependent devices ? */

/* I don't want to litter system log with timeout errors

 * when we have brain-damaged PHY.

/* EMAC PHY clock workaround:

 * 440EP/440GR has more sane SDR0_MFR register implementation than 440GX,

 * which allows controlling each EMAC clock

 PHY polling intervals */

/* Graceful stop timeouts in us.

 * We should allow up to 1 frame time (full-duplex, ignoring collisions)

 Please, keep in sync with struct ibm_emac_stats/ibm_emac_error_stats */

 Wait if previous async disable is still in progress */

 prevent tx timeout */

	/* NOTE: unconditional netif_wake_queue is only appropriate

	 * so long as all callers are assured to have free tx slots

	 * (taken from tg3... though the case where that is wrong is

	 *  not terribly harmful)

		/* 40x erratum suggests stopping RX channel before reset,

		 * we stop TX as well

	/*

	 * PPC460EX/GT Embedded Processor Advanced User's Manual

	 * section 28.10.1 Mode Register 0 (EMACx_MR0) states:

	 * Note: The PHY must provide a TX Clk in order to perform a soft reset

	 * of the EMAC. If none is present, select the internal clock

	 * (SDR0_ETH_CFG[EMACx_PHY_CLK] = 1).

	 * After a soft reset, select the external clock.

	 *

	 * The AR8035-A PHY Meraki MR24 does not provide a TX Clk if the

	 * ethernet cable is not attached. This causes the reset to timeout

	 * and the PHY detection code in emac_init_phy() is unable to

	 * communicate and detect the AR8035-A PHY. As a result, the emac

	 * driver bails out early and the user has no ethernet.

	 * In order to stay compatible with existing configurations, the

	 * driver will temporarily switch to the internal clock, after

	 * the first reset fails.

 No PHY: select internal loop clock before reset */

 PHY present: select external clock before reset */

 first attempt has timed out. */

 No PHY: restore external clock source after reset */

 Default fifo sizes */

 No link, force loopback */

 Check for full duplex */

 Adjust fifo sizes, mr1 and timeouts based on link speed */

			/* Put some arbitrary OUI, Manuf & Rev IDs so we can

			 * identify this GPCS PHY later.

 Extended fifo sizes */

 make gcc happy */

	/* on 40x erratum forces us to NOT use integrated flow control,

	 * let's hope it works on 44x ;)

 Add base settings & fifo sizes & program MR1 */

 Set individual MAC address */

 VLAN Tag Protocol ID */

 Receive mode register */

 FIFOs thresholds */

	/* PAUSE frame is sent when RX FIFO reaches its high-water mark,

	   there should be still enough space in FIFO to allow the our link

	   partner time to process this frame and also time to send PAUSE

	   frame itself.



	   Here is the worst case scenario for the RX FIFO "headroom"

	   (from "The Switch Book") (100Mbps, without preamble, inter-frame gap):



	   1) One maximum-length frame on TX                    1522 bytes

	   2) One PAUSE frame time                                64 bytes

	   3) PAUSE frame decode time allowance                   64 bytes

	   4) One maximum-length frame on RX                    1522 bytes

	   5) Round-trip propagation delay of the link (100Mb)    15 bytes

	   ----------

	   3187 bytes



	   I chose to set high-water mark to RX_FIFO_SIZE / 4 (1024 bytes)

	   low-water mark  to RX_FIFO_SIZE / 8 (512 bytes)

 Set PAUSE timer to the maximum */

 IRQ sources */

	    r |= EMAC4_ISR_TXPE | EMAC4_ISR_RXPE /* | EMAC4_ISR_TXUE |

 We need to take GPCS PHY out of isolate mode after EMAC reset */

 Enable proper MDIO port */

 Wait for management interface to become idle */

 Issue read command */

 Wait for read to complete */

 Enable proper MDIO port */

 Wait for management interface to be idle */

 Issue write command */

 Wait for write to complete */

 Tx lock BH */

	/* I decided to relax register access rules here to avoid

	 * full EMAC reset.

	 *

	 * There is a real problem with EMAC4 core if we use MWSW_001 bit

	 * in MR1 register and do a full EMAC reset.

	 * One TX BD status update is delayed and, after EMAC reset, it

	 * never happens, resulting in TX hung (it'll be recovered by TX

	 * timeout handler eventually, but this is just gross).

	 * So we either have to do full TX reset or try to cheat here :)

	 *

	 * The only required change is to RX mode register, so I *think* all

	 * we need is just to stop RX channel. This seems to work on all

	 * tested SoCs.                                                --ebs

	 *

	 * If we need the full reset, we might just trigger the workqueue

	 * and do it async... a bit nasty but should work --BenH

 Tx lock BH */

	/* Make a first pass over RX ring and mark BDs ready, dropping

	 * non-processed packets on the way. We need this as a separate pass

	 * to simplify error recovery in the case of allocation failure later.

 Reallocate RX ring only if bigger skb buffers are required */

 Second pass, allocate new skbs */

 Check if we need to change "Jumbo" bit in MR1 */

 This is to prevent starting RX channel in emac_rx_enable() */

 Restart RX */

 Process ctx, rtnl_lock semaphore */

 Check if we really need to reinitialize RX ring */

 Process ctx, rtnl_lock semaphore */

 Setup error IRQ handler */

 Allocate RX ring */

	/* Start PHY polling now.

 Required for Pause packet support in EMAC */

 BHs disabled */

 Get new link parameters */

 Process ctx, rtnl_lock semaphore */

	/* Send the packet out. If the if makes a significant perf

	 * difference, then we can store the TMR0 value in "dev"

	 * instead

 Tx lock BH */

 Tx lock BH disabled (SG version for TAH equipped EMACs) */

 This is common "fast" path */

	/* Note, this is only an *estimation*, we can still run out of empty

	 * slots because of the additional fragmentation into

	 * MAL_MAX_TX_SIZE-sized chunks

 skb data */

 skb fragments */

 Attach skb to the last slot so we don't release it too early */

 Send the packet out */

	/* Well, too bad. Our previous estimation was overly optimistic.

	 * Undo everything.

 Tx lock BHs */

 NAPI poll context */

 Drop the packet and recycle skb */

 NAPI poll context */

 NAPI poll context */

 I'm just being paranoid here :) */

 Hard IRQ */

 Hard IRQ */

 Compute "legacy" statistics */

 Ethtool support */

 Basic sanity checks */

 no dependency on that item, allright */

 special case for blist as the dependency might go away */

 We are only intereted in device addition */

	/* This is a workaround for powered down ports/phys.

	 * In the wild, this was seen on the Cisco Meraki MX60(W).

	 * This hardware disables ports as part of the handoff

	 * procedure. Accessing the ports will lead to errors

	 * (-ETIMEDOUT, -EREMOTEIO) that do more harm than good.

 PHY-less configuration. */

 PHY-less configuration. */

 Enable internal clock source */

 PHY clock workaround */

 Enable internal clock source on 440GX*/

	/* Configure EMAC with defaults so we can at least use MDIO

	 * This is needed mostly for 440GX

		/* XXX

		 * Make GPCS PHY address equal to EMAC index.

		 * We probably should take into account busy_phy_map

		 * and/or phy_map here.

		 *

		 * Note that the busy_phy_map is currently global

		 * while it should probably be per-ASIC...

			/* No phy-handle property configured.

			 * Continue with the existing phy probe

			 * and setup code.

 Quick check if there is a PHY at the address */

 Enable external clock source */

 Init PHY */

 Disable any PHY features not supported by the platform */

 Setup initial link parameters */

 Restart autonegotiation */

 Select highest supported speed/duplex */

 Force link parameters */

 Read config from device-tree */

 PHY mode needs some decoding */

 Check EMAC version */

 Fixup some feature bits based on the device tree */

 CAB lacks the appropriate properties */

 Enable TAH/ZMII/RGMII features as found */

 Read MAC-address */

 IAHT and GAHT filter parameterization */

 This should never happen */

	/* Skip unused/unwired EMACS.  We leave the check for an unused

	 * property here for now, but new flat device trees should set a

	 * status property to "disabled" instead.

 Find ourselves in the bootlist if we are there */

 Allocate our net_device structure */

 Initialize some embedded data structures */

 Init various config data based on device-tree */

 Get interrupts. EMAC irq is mandatory, WOL irq is optional */

 Map EMAC regs */

 TODO : platform_get_resource() and devm_ioremap_resource()

 Wait for dependent devices */

  display more info about what's missing ? */

 Register with MAL */

 Get pointers to BD rings */

 Clean rings */

 Attach to ZMII, if needed */

 Attach to RGMII, if needed */

 Attach to TAH, if needed */

 Set some link defaults before we can find out real parameters */

 Some SoCs like APM821xx does not support Half Duplex mode. */

 Find PHY if any */

 MTU range: 46 - 1500 or whatever is in OF */

	/* Set our drvdata last as we don't want them visible until we are

	 * fully initialized

 There's a new kid in town ! Let's tell everybody */

 Life is good */

 I have a bad feeling about this ... */

	/* if we were on the bootlist, remove us as we won't show up and

	 * wake up all waiters to notify them in case they were waiting

	 * on us

 XXX Features in here should be replaced by properties... */

 Collect EMACs */

 Bubble sort them (doh, what a creative algorithm :-) */

 Build EMAC boot list */

 Init submodules */

 Destroy EMAC boot list */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/net/ethernet/ibm/emac/phy.c

 *

 * Driver for PowerPC 4xx on-chip ethernet controller, PHY support.

 * Borrowed from sungem_phy.c, though I only kept the generic MII

 * driver for now.

 *

 * This file should be shared with other drivers or eventually

 * merged as the "low level" part of miilib

 *

 * Copyright 2007 Benjamin Herrenschmidt, IBM Corp.

 *                <benh@kernel.crashing.org>

 *

 * Based on the arch/ppc version of the driver:

 *

 * (c) 2003, Benjamin Herrenscmidt (benh@kernel.crashing.org)

 * (c) 2004-2005, Eugene Surovegin <ebs@ebshome.net>

 *

 Configure GPCS interface to recommended setting for SGMII */

 AsymPause, FDX */

 msg_pg, toggle */

 1Gbps, FDX     */

 First clear the PHY */

 Setup standard advertise */

 Start/Restart aneg */

 First clear the PHY */

 Select speed & duplex */

 Clear latched value with dummy read */

 Generic implementation for most 10/100/1000 PHYs */

 CIS8201 */

 MII regs override strap pins */

 Disable TX_EN -> CRS echo mode, otherwise 10/HDX doesn't work */

	/*

	 * Marvell 88E1112 PHY needs to have the SGMII MAC

	 * interace (page 2) properly configured to

	 * communicate with the 460EX/GT GPCS interface.

 Set access to Page 2 */

 1Gbps */

 bypass Auto-Negotiation */

 reset MAC interface */

 Reset access to Page 0 */

 RGMII Trace Delay*/

 Address debug register 5 */

 Value copied from u-boot */

 Address hib ctrl */

 Value copied from u-boot */

 Take PHY out of isolate mode and reset it. */

 Read ID and find matching entry */

 Should never be NULL (we have a generic entry), but... */

 Determine PHY features if needed */

 Setup default advertising */

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************



  Copyright(c) 2006 Tundra Semiconductor Corporation.





/* This driver is based on the driver code originally developed

 * for the Intel IOC80314 (ForestLake) Gigabit Ethernet by

 * scott.wood@timesys.com  * Copyright (C) 2003 TimeSys Corporation

 *

 * Currently changes from original version are:

 * - porting to Tsi108-based platform and kernel 2.6 (kong.lai@tundra.com)

 * - modifications to handle two ports independently and support for

 *   additional PHY devices (alexandre.bounine@tundra.com)

 * - Get hardware information from platform device. (tie-fei.zang@freescale.com)

 *

 max link wait time in msec */

/* NOTE: The driver currently does not support receiving packets

 * larger than the buffer size, so don't decrease this (unless you

 * want to add such support).

 Check the phy status every half a second. */

 Base of normal regs */

 Base of register bank used for PHY access */

 Index of PHY for this interface */

 Timer that triggers the check phy function */

 Next entry in rxring to read */

 Next entry in rxring to give a new buffer */

 Number of free, allocated RX buffers */

	unsigned int rxpending;	/* Non-zero if there are still descriptors

				 * to be processed from a previous descriptor

 Next TX descriptor to check status on */

 Next TX descriptor to use */

	/* Number of free TX descriptors.  This could be calculated from

	 * rxhead and rxtail if one descriptor were left unused to disambiguate

	 * full and empty conditions, but it's simpler to just keep track

 The PHY is currently powered on. */

	/* PHY status (duplex is 1 for half, 2 for full,

	 * so that the default 0 indicates that neither has

 txlock nests in misclock and phy_lock */

	/* stats is used to hold the upper bits of each hardware counter,

	 * and tmpstats is used to hold the full values for returning

	 * to the caller of get_stats().  They must be separate in case

	 * an overflow interrupt occurs before the stats are consumed.

	/* These stats are kept separate in hardware, thus require individual

	 * fields for handling carry.  They are combined in get_stats.

 Add to rx_frame_errors */

 Add to rx_frame_errors */

 Add to rx_frame_errors */

 Add to rx_length_errors */

 Add to rx_length_errors */

 Add to tx_aborted_errors/collisions */

 Add to tx_aborted_errors */

 debug message level */

 Structure for a device driver */

/* Synchronization is needed between the thread and up/down events.

 * Note that the PHY is accessed through the same registers for both

 * interfaces, so this can't be made interface-specific.

			/* The manual says it can take 3-4 usecs for the speed change

			 * to take effect.

/* Read a stat counter atomically with respect to carries.

 * data->misclock must be held.

	/* Check to see if it overflowed, but the interrupt hasn't

	 * been serviced yet.  If so, handle the carry here, and

	 * try again.

 These three are maintained by software. */

/* txlock must be held by caller, with IRQs disabled, and

 * with permission to re-enable them when the lock is dropped.

		/* This is done to mark every TSI108_TX_INT_FREQ tx buffers with

		 * the interrupt bit.  TX descriptor-complete interrupts are

		 * enabled when the queue fills up, and masked when there is

		 * still free space.  This way, when saturating the outbound

		 * link, the tx interrupts are kept to a reasonable level.

		 * When the queue is not full, reclamation of skbs still occurs

		 * as new packets are transmitted, or on a queue-empty

		 * interrupt.

	/* This must be done after the check for completed tx descriptors,

	 * so that the tail pointer is correct.

		/* Sometimes the hardware sets blen to zero after packet

		 * reception, even though the manual says that it's only ever

		 * modified by the driver.

	/* This should normally fill no more slots than the number of

	 * packets received in tsi108_complete_rx().  The exception

	 * is when we previously ran out of memory for RX SKBs.  In that

	 * case, it's helpful to obey the budget, not only so that the

	 * CPU isn't hogged, but so that memory (which may still be low)

	 * is not hogged by one device.

	 *

	 * A work unit is considered to be two SKBs to allow us to catch

	 * up when the ring has shrunk due to out-of-memory but we're

	 * still removing the full budget's worth of packets each time.

	/* A race could cause dev to already be scheduled, so it's not an

	 * error if that happens (and interrupts shouldn't be re-masked,

	 * because that can cause harmful races, if poll has already

	 * unmasked them but not cleared LINK_STATE_SCHED).

	 *

	 * This can happen if this code races with tsi108_poll(), which masks

	 * the interrupts after tsi108_irq_one() read the mask, but before

	 * napi_schedule is called.  It could also happen due to calls

	 * from tsi108_check_rxring().

		/* Mask, rather than ack, the receive interrupts.  The ack

		 * will happen in tsi108_poll().

			/* This can happen if an interrupt occurs while the

			 * interface is being brought down, as the START

			 * bit is cleared before the stop function is called.

			 *

			 * In this case, the interrupts must be masked, or

			 * they will continue indefinitely.

			 *

			 * There's a race here if the interface is brought down

			 * and then up in rapid succession, as the device could

			 * be made running after the above check and before

			 * the masking below.  This will only happen if the IRQ

			 * thread has a lower priority than the task brining

			 * up the interface.  Fixing this race would likely

			 * require changes in generic code.

/* If the RX ring has run out of memory, try periodically

 * to allocate some more, as otherwise poll would never

 * get called (apart from the initial end-of-queue condition).

 *

 * This is called once per second (by default) from the thread.

	/* A poll is scheduled, as opposed to caling tsi108_refill_rx

	 * directly, so as to keep the receive path single-threaded

	 * (and thus not needing a lock).

 Not our interrupt */

 Disable all TX and RX queues ... */

 ...and wait for them to become idle */

	/* Note that the octets are reversed from what the manual says,

	 * producing an even weirder ordering...

 +2 is for the offset of the HW addr type */

 Protected by dev->xmit_lock. */

			/* The manual says that the hardware may drop

			 * back-to-back writes to the data register.

	/* Set G/MII mode and receive clock select in TBI control #2.  The

	 * second port won't work if this isn't done, even though we don't

	 * use TBI mode.

	/* FIXME: It seems to take more than 2 back-to-back reads to the

	 * PHY_STAT register before the link up status bit is set.

			/* Bah.  No memory for now, but maybe we'll get

			 * some more later.

			 * For now, we'll live with the smaller ring.

 Check for any pending TX packets, and drop them. */

 Discard the RX ring. */

 Create an ethernet device instance */

 MII setup */

	/* Apparently, the Linux networking code won't use scatter-gather

	 * if the hardware doesn't do checksums.  However, it's faster

	 * to checksum in place and use SG, as (among other reasons)

	 * the cache won't be dirtied (which then has to be flushed

	 * before DMA).  The checksumming is done by the driver (via

	 * a new function skb_csum_dev() in net/core/skbuff.c).

/* There's no way to either get interrupts from the PHY when

 * something changes, or to have the Tsi108 automatically communicate

 * with the PHY to reconfigure itself.

 *

 * Thus, we have to do it using a timer.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * LiteX Liteeth Ethernet

 *

 * Copyright 2017 Joel Stanley <joel@jms.id.au>

 *

 Tx */

 Rx */

 Clear pending events */

 Enable IRQs */

 Reject oversize packets */

 Rx slots */

 Tx slots come after Rx slots */

 hamachi.c: A Packet Engines GNIC-II Gigabit Ethernet driver for Linux. */

/*

	Written 1998-2000 by Donald Becker.

	Updates 2000 by Keith Underwood.



	This software may be used and distributed according to the terms of

	the GNU General Public License (GPL), incorporated herein by reference.

	Drivers based on or derived from this code fall under the GPL and must

	retain the authorship, copyright and license notice.  This file is not

	a complete program and may only be used when the entire operating

	system is licensed under the GPL.



	The author may be reached as becker@scyld.com, or C/O

	Scyld Computing Corporation

	410 Severn Ave., Suite 210

	Annapolis MD 21403



	This driver is for the Packet Engines GNIC-II PCI Gigabit Ethernet

	adapter.



	Support and updates available at

	http://www.scyld.com/network/hamachi.html

	[link no longer provides useful info -jgarzik]

	or

	http://www.parl.clemson.edu/~keithu/hamachi.html



 A few user-configurable values. */

 1 normal messages, 0 quiet .. 7 verbose.  */

 Maximum events (Rx packets, etc.) to handle at each interrupt. */

 Default values selected by testing on a dual processor PIII-450 */

/* These six interrupt control parameters may be set directly when loading the

 * module, or through the rx_params and tx_params variables

/* Set the copy breakpoint for the copy-only-tiny-frames scheme.

   -Setting to > 1518 causes all frames to be copied

	-Setting to 0 disables copies

/* An override for the hardware detection of bus width.

	Set to 1 to force 32 bit PCI bus detection.  Set to 4 to force 64 bit.

	Add 2 to disable parity detection.

/* Used to pass the media type, etc.

   These exist for driver interoperability.

   No media types are currently defined.

		- The lower 4 bits are reserved for the media type.

		- The next three bits may be set to one of the following:

			0x00000000 : Autodetect PCI bus

			0x00000010 : Force 32 bit PCI bus

			0x00000020 : Disable parity detection

			0x00000040 : Force 64 bit PCI bus

			Default is autodetect

		- The next bit can be used to force half-duplex.  This is a bad

		  idea since no known implementations implement half-duplex, and,

		  in general, half-duplex for gigabit ethernet is a bad idea.

			0x00000080 : Force half-duplex

			Default is full-duplex.

		- In the original driver, the ninth bit could be used to force

		  full-duplex.  Maintain that for compatibility

		   0x00000200 : Force full-duplex

 More are supported, limit only on options */

/* The Hamachi chipset supports 3 parameters each for Rx and Tx

 * interruput management.  Parameters will be loaded as specified into

 * the TxIntControl and RxIntControl registers.

 *

 * The registers are arranged as follows:

 *     23 - 16   15 -  8   7    -    0

 *    _________________________________

 *   | min_pkt | max_gap | max_latency |

 *    ---------------------------------

 *   min_pkt      : The minimum number of packets processed between

 *                  interrupts.

 *   max_gap      : The maximum inter-packet gap in units of 8.192 us

 *   max_latency  : The absolute time between interrupts in units of 8.192 us

 *

 Operational parameters that are set at compile time. */

/* Keep the ring sizes a power of two for compile efficiency.

	The compiler will convert <unsigned>'%'<2^N> into a bit mask.

   Making the Tx ring too large decreases the effectiveness of channel

   bonding and packet priority.

   There are no ill effects from too-large receive rings, except for

/* Empirically it appears that the Tx ring needs to be a little bigger

   for these Gbit adapters or you get into an overrun condition really

   easily.  Also, things appear to work a bit better in back-to-back

   configurations if the Rx ring is 8 times the size of the Tx ring

/*

 * Enable netdev_ioctl.  Added interrupt coalescing parameter adjustment.

 * 2/19/99 Pete Wyckoff <wyckoff@ca.sandia.gov>

 play with 64-bit addrlen; seems to be a teensy bit slower  --pw */

 #define ADDRLEN 64 */

/*

 * RX_CHECKSUM turns on card-generated receive checksum generation for

 *   TCP and UDP packets.  Otherwise the upper layers do the calculation.

 * 3/10/1999 Pete Wyckoff <wyckoff@ca.sandia.gov>

 Operational parameters that usually are not changed. */

 Time in jiffies before concluding the transmitter is hung. */

 Processor type for cache alignment. */

/* IP_MF appears to be only defined in <netinet/ip.h>, however,

   we need it for hardware checksumming support.  FYI... some of

   the definitions in <netinet/ip.h> conflict/duplicate those in

   other linux headers causing many compiler warnings.

 IP more frags from <netinet/ip.h> */

 Define IP_OFFSET to be IPOPT_OFFSET */

 Condensed bus+endian portability operations. */

/*

				Theory of Operation



I. Board Compatibility



This device driver is designed for the Packet Engines "Hamachi"

Gigabit Ethernet chip.  The only PCA currently supported is the GNIC-II 64-bit

66Mhz PCI card.



II. Board-specific settings



No jumpers exist on the board.  The chip supports software correction of

various motherboard wiring errors, however this driver does not support

that feature.



III. Driver operation



IIIa. Ring buffers



The Hamachi uses a typical descriptor based bus-master architecture.

The descriptor list is similar to that used by the Digital Tulip.

This driver uses two statically allocated fixed-size descriptor lists

formed into rings by a branch from the final descriptor to the beginning of

the list.  The ring sizes are set at compile time by RX/TX_RING_SIZE.



This driver uses a zero-copy receive and transmit scheme similar my other

network drivers.

The driver allocates full frame size skbuffs for the Rx ring buffers at

open() time and passes the skb->data field to the Hamachi as receive data

buffers.  When an incoming frame is less than RX_COPYBREAK bytes long,

a fresh skbuff is allocated and the frame is copied to the new skbuff.

When the incoming frame is larger, the skbuff is passed directly up the

protocol stack and replaced by a newly allocated skbuff.



The RX_COPYBREAK value is chosen to trade-off the memory wasted by

using a full-sized skbuff for small frames vs. the copying costs of larger

frames.  Gigabit cards are typically used on generously configured machines

and the underfilled buffers have negligible impact compared to the benefit of

a single allocation size, so the default value of zero results in never

copying packets.



IIIb/c. Transmit/Receive Structure



The Rx and Tx descriptor structure are straight-forward, with no historical

baggage that must be explained.  Unlike the awkward DBDMA structure, there

are no unused fields or option bits that had only one allowable setting.



Two details should be noted about the descriptors: The chip supports both 32

bit and 64 bit address structures, and the length field is overwritten on

the receive descriptors.  The descriptor length is set in the control word

for each channel. The development driver uses 32 bit addresses only, however

64 bit addresses may be enabled for 64 bit architectures e.g. the Alpha.



IIId. Synchronization



This driver is very similar to my other network drivers.

The driver runs as two independent, single-threaded flows of control.  One

is the send-packet routine, which enforces single-threaded use by the

dev->tbusy flag.  The other thread is the interrupt handler, which is single

threaded by the hardware and other software.



The send packet thread has partial control over the Tx ring and 'dev->tbusy'

flag.  It sets the tbusy flag whenever it's queuing a Tx packet. If the next

queue slot is empty, it clears the tbusy flag when finished otherwise it sets

the 'hmp->tx_full' flag.



The interrupt handler has exclusive control over the Rx ring and records stats

from the Tx ring.  After reaping the stats, it marks the Tx queue entry as

empty by incrementing the dirty_tx mark. Iff the 'hmp->tx_full' flag is set, it

clears both the tx_full and tbusy flags.



IV. Notes



Thanks to Kim Stearns of Packet Engines for providing a pair of GNIC-II boards.



IVb. References



Hamachi Engineering Design Specification, 5/15/97

(Note: This version was marked "Confidential".)



IVc. Errata



None noted.



V.  Recent Changes



01/15/1999 EPK  Enlargement of the TX and RX ring sizes.  This appears

    to help avoid some stall conditions -- this needs further research.



01/15/1999 EPK  Creation of the hamachi_tx function.  This function cleans

    the Tx ring and is called from hamachi_start_xmit (this used to be

    called from hamachi_interrupt but it tends to delay execution of the

    interrupt handler and thus reduce bandwidth by reducing the latency

    between hamachi_rx()'s).  Notably, some modification has been made so

    that the cleaning loop checks only to make sure that the DescOwn bit

    isn't set in the status flag since the card is not required

    to set the entire flag to zero after processing.



01/15/1999 EPK In the hamachi_start_tx function, the Tx ring full flag is

    checked before attempting to add a buffer to the ring.  If the ring is full

    an attempt is made to free any dirty buffers and thus find space for

    the new buffer or the function returns non-zero which should case the

    scheduler to reschedule the buffer later.



01/15/1999 EPK Some adjustments were made to the chip initialization.

    End-to-end flow control should now be fully active and the interrupt

    algorithm vars have been changed.  These could probably use further tuning.



01/15/1999 EPK Added the max_{rx,tx}_latency options.  These are used to

    set the rx and tx latencies for the Hamachi interrupts. If you're having

    problems with network stalls, try setting these to higher values.

    Valid values are 0x00 through 0xff.



01/15/1999 EPK In general, the overall bandwidth has increased and

    latencies are better (sometimes by a factor of 2).  Stalls are rare at

    this point, however there still appears to be a bug somewhere between the

    hardware and driver.  TCP checksum errors under load also appear to be

    eliminated at this point.



01/18/1999 EPK Ensured that the DescEndRing bit was being set on both the

    Rx and Tx rings.  This appears to have been affecting whether a particular

    peer-to-peer connection would hang under high load.  I believe the Rx

    rings was typically getting set correctly, but the Tx ring wasn't getting

    the DescEndRing bit set during initialization. ??? Does this mean the

    hamachi card is using the DescEndRing in processing even if a particular

    slot isn't in use -- hypothetically, the card might be searching the

    entire Tx ring for slots with the DescOwn bit set and then processing

    them.  If the DescEndRing bit isn't set, then it might just wander off

    through memory until it hits a chunk of data with that bit set

    and then looping back.



02/09/1999 EPK Added Michel Mueller's TxDMA Interrupt and Tx-timeout

    problem (TxCmd and RxCmd need only to be set when idle or stopped.



02/09/1999 EPK Added code to check/reset dev->tbusy in hamachi_interrupt.

    (Michel Mueller pointed out the ``permanently busy'' potential

    problem here).



02/22/1999 EPK Added Pete Wyckoff's ioctl to control the Tx/Rx latencies.



02/23/1999 EPK Verified that the interrupt status field bits for Tx were

    incorrectly defined and corrected (as per Michel Mueller).



02/23/1999 EPK Corrected the Tx full check to check that at least 4 slots

    were available before resetting the tbusy and tx_full flags

    (as per Michel Mueller).



03/11/1999 EPK Added Pete Wyckoff's hardware checksumming support.



12/31/1999 KDU Cleaned up assorted things and added Don's code to force

32 bit.



02/20/2000 KDU Some of the control was just plain odd.  Cleaned up the

hamachi_start_xmit() and hamachi_interrupt() code.  There is still some

re-structuring I would like to do.



03/01/2000 KDU Experimenting with a WIDE range of interrupt mitigation

parameters on a dual P3-450 setup yielded the new default interrupt

mitigation parameters.  Tx should interrupt VERY infrequently due to

Eric's scheme.  Rx should be more often...



03/13/2000 KDU Added a patch to make the Rx Checksum code interact

nicely with non-linux machines.



03/13/2000 KDU Experimented with some of the configuration values:



	-It seems that enabling PCI performance commands for descriptors

	(changing RxDMACtrl and TxDMACtrl lower nibble from 5 to D) has minimal

	performance impact for any of my tests. (ttcp, netpipe, netperf)  I will

	leave them that way until I hear further feedback.



	-Increasing the PCI_LATENCY_TIMER to 130

	(2 + (burst size of 128 * (0 wait states + 1))) seems to slightly

	degrade performance.  Leaving default at 64 pending further information.



03/14/2000 KDU Further tuning:



	-adjusted boguscnt in hamachi_rx() to depend on interrupt

	mitigation parameters chosen.



	-Selected a set of interrupt parameters based on some extensive testing.

	These may change with more testing.



TO DO:



-Consider borrowing from the acenic driver code to check PCI_COMMAND for

PCI_COMMAND_INVALIDATE.  Set maximum burst size to cache line size in

that case.



-fix the reset procedure.  It doesn't quite work.

 A few values that may be tweaked. */

/* Size of each temporary Rx buffer, calculated as:

 * 1518 bytes (ethernet packet) + 2 bytes (to get 8 byte alignment for

 * the card) + 8 bytes of status info + 8 bytes for the Rx Checksum

/* For now, this is going to be set to the maximum size of an ethernet

 * packet.  Eventually, we may want to make it a variable that is

 * related to the MTU

 The rest of these values should never change. */

 Offsets to the Hamachi registers.  Various sizes. */

 See enum MII_offsets below. */

 Gigabit AutoNegotiation. */

 Offsets to the MII-mode registers. */

 Bits in the interrupt status/mask registers. */

 The Hamachi Rx and Tx buffer descriptors. */

 Bits in hamachi_desc.status_n_length */

 Required alignment mask */

	/* Descriptor rings first for alignment.  Tx requires a second descriptor

 Media selection timer. */

 Frequently used and paired value: keep adjacent for cache effect. */

 Producer/consumer ring indices */

 Based on MTU+slack. */

 The Tx queue is full. */

 Last dev->if_port value. */

 MII transceiver section. */

 MII device addresses. */

 MII lib hooks/info */

 MII device addresses, only first one used. */

 interrupt control variables */

 Hold on to a copy of the options */

 when built into the kernel, we only print version if device is found */

 Really "64 bit addrs" */

 Check for options being passed in */

 If the bus size is misidentified, do the following. */

 Hmmm, do we really need to reset the chip???. */

	/* After a reset, the clock speed measurement of the PCI bus will not

	 * be valid for a moment.  Wait for a little while until it is.  If

	 * it takes more than 10ms, forget it.

 The lower four bits are the media type. */

 lock the duplex mode if someone specified a value */

 Set interrupt tuning parameters */

 The Hamachi-specific entries in the device structure. */

 Configure gigabit autonegotiation. */

 Enable legacy links. */

 Set our advertise word. */

 Enable negotiation */

 We should check busy first - per docs -KDU */

/* MII Managemen Data I/O accesses.

   These routines assume the MDIO controller is idle, and do not exit until

 We should check busy first - per docs -KDU */

 We should check busy first - per docs -KDU */

 Wait for the command to finish. */

 writellll anyone ? */

	/* TODO:  It would make sense to organize this as words since the card

	 * documentation does. -KDU

	/* Initialize other registers: with so many this eventually this will

 Configure the FIFO */

 No FIFO */

 Configure the FIFO for 512K external, 16K used for Tx. */

 Configure the FIFO for 1024 external, 32K used for Tx. */

 Configure the FIFO for 2048 external, 32K used for Tx. */

 Default to no FIFO */

 Setting the Rx mode will start the Rx process. */

 If someone didn't choose a duplex, default to full-duplex */

 always 1, takes no more time to do it */

 Soft reset the MAC */

 WHAT?!?!?  Why isn't this documented somewhere? -KDU */

 Why do we enable receives/transmits here? -KDU */

 Upper 16 bits control LEDs. */

 Enable automatic generation of flow control frames, period 0xffff. */

 dev->mtu+14 ??? */

 Enable legacy links. */

 Enable legacy links. */

 Initial Link LED to blinking red. */

	/* Configure interrupt mitigation.  This has a great effect on

 Enable interrupts by setting the interrupt mask. */

 Clear non-interrupting events */

 Configure and start the DMA channels. */

 Burst sizes are in the low three bits: size = 4<<(val&7) */

 128 dword bursts */

 Set the timer to check for link beat. */

 2.4 sec. */

	/* Update the dirty pointer until we find an entry that is

 Free the original skb. */

 We could do something here... nah. */

	/* Reinit the hardware and make sure the Rx and Tx processes

		are up and running.

	/* The right way to do Reset. -KDU

	 *		-Clear OWN bit in all Rx/Tx descriptors

	 *		-Wait 50 uS for channels to go idle

	 *		-Turn off MAC receiver

	 *		-Issue Reset

	/* Presume that all packets in the Tx queue are gone if we have to

	 * re-init the hardware.

 Sleep 60 us just for safety sake */

 STOP Rx */

 Reinit the hardware */

	/* Rx packets are also presumed lost; however, we need to make sure a

	 * ring of buffers is in tact. -KDU

 Fill in the Rx buffers.  Handle allocation failure gracefully. */

 Mark the last entry as wrapping the ring. */

 Trigger an immediate transmit demand. */

 prevent tx timeout */

 Restart the chip's Tx/Rx processes . */

 STOP Tx */

 START Tx */

 START Rx */

 Initialize the Rx and Tx rings, along with various 'dev' bits. */

	/* +26 gets the maximum ethernet encapsulation, +7 & ~7 because the

	 * card needs room to do 8 byte alignment, +2 so we can reserve

	 * the first 2 bytes, and +16 gets room for the status word from the

	 * card.  -KDU

 Initialize all Rx descriptors. */

 Fill in the Rx buffers.  Handle allocation failure gracefully. */

 16 byte align the IP header. */

 -2 because it doesn't REALLY have that first 2 bytes -KDU */

 Mark the last entry of the ring */

	/* Ok, now make sure that the queue has space before trying to

		add another skbuff.  if we return non-zero the scheduler

		should interpret this as a queue full and requeue the buffer

		for later.

 We should NEVER reach this point -KDU */

 Wake the potentially-idle transmit channel. */

 If we don't need to read status, DON'T -KDU */

	/* Caution: the write order is important here, set the field

 Calculate the next Tx descriptor entry. */

	/* Hmmmm, could probably put a DescIntr on these, but the way

		the driver is currently coded makes Tx interrupts unnecessary

		since the clearing of the Tx ring is handled by the start_xmit

		routine.  This organization helps mitigate the interrupts a

		bit and probably renders the max_tx_latency param useless.



		Update: Putting a DescIntr bit on all of the descriptors and

		mitigating interrupt frequency with the tx_min_pkt parameter. -KDU

 Wrap ring */

 Non-x86 Todo: explicitly flush cache lines here. */

 Wake the potentially-idle transmit channel. */

 If we don't need to read status, DON'T -KDU */

 Immediately before returning, let's clear as many entries as we can. */

	/* We should kick the bottom half here, since we are not accepting

	 * interrupts with every packet.  i.e. realize that Gigabit ethernet

	 * can transmit faster than ordinary machines can load packets;

	 * hence, any packet that got put off because we were in the transmit

	 * routine should IMMEDIATELY get a chance to be re-queued. -KDU

 Typical path */

/* The interrupt handler does all of the Rx thread work and cleans up

 Can never occur. */

			/* This code should RARELY need to execute. After all, this is

			 * a gigabit link, it should consume packets as fast as we put

			 * them in AND we clear the Tx ring in hamachi_start_xmit().

 Free the original skb. */

 The ring is no longer full */

 Abnormal error summary/uncommon events handlers. */

 Code that should never be run!  Perhaps remove after testing.. */

/* This routine is logically part of the interrupt handler, but separated

 If EOP is set on the next entry, it's a new packet. Send it up. */

 Implicit truncate */

 else  Omit for prototype errata??? */

 There was an error. */

 Omit CRC */

			/* Check if the packet is long enough to accept without copying

 16 byte align the IP header */

 Call copy + cksum if available. */

 TCP or UDP on ipv4, DIX encoding */

				/* Check that IP packet is at least 46 bytes, otherwise,

				 * there may be pad bytes included in the hardware checksum.

				 * This wouldn't happen if everyone padded with 0.

 don't worry about frags */

NOTREACHED*/ crc = 0;

 tcp/udp will add in pseudo */

						/*

						* could do the pseudo myself and return

						* CHECKSUM_UNNECESSARY

 RX_CHECKSUM */

 Refill the Rx ring buffers. */

 Better luck next round. */

 Align IP on 16 byte boundaries */

 Restart Rx engine if stopped. */

 If we don't need to check status, don't. -KDU */

/* This is more properly named "uncommon interrupt events", as it covers more

 Read the overflow bits to clear. */

 Hmmmmm, it's not clear how to recover from PCI faults. */

 Disable interrupts by clearing the interrupt mask. */

 Stop the chip's Tx and Rx processes. */

 __i386__ debugging only */

 Free all the skbuffs in the Rx queue. */

 An invalid address. */

	/* We should lock this segment of code for SMP eventually, although

	   the vulnerability window is very small and statistics are

        /* Ok, what goes here?  This appears to be stuck at 21 packets

           according to ifconfig.  It does get incremented in hamachi_tx(),

           so I think I'll comment it out here and see if better things

           happen.

 dev->stats.tx_packets	= readl(ioaddr + 0x000); */

 Total Uni+Brd+Multi */

 Total Uni+Brd+Multi */

 Multicast Rx */

 Over+Undersized */

 Jabber */

 Jabber */

 Symbol Errs */

 Dropped */

 Set promiscuous. */

 Too many to match, or accept all multicasts. */

 Must use the CAM filter. */

 Clear remaining entries. */

 Normal, unicast/broadcast-only mode. */

 private ioctl: set rx,tx intr params */

	/* Should add this check here or an ordinary user can do nasty

	 * things. -KDU

	 *

	 * TODO: Shut down the Rx and Tx engines while doing this.

 when a module, this is printed whether or not devices are found in probe */

 yellowfin.c: A Packet Engines G-NIC ethernet driver for linux. */

/*

	Written 1997-2001 by Donald Becker.



	This software may be used and distributed according to the terms of

	the GNU General Public License (GPL), incorporated herein by reference.

	Drivers based on or derived from this code fall under the GPL and must

	retain the authorship, copyright and license notice.  This file is not

	a complete program and may only be used when the entire operating

	system is licensed under the GPL.



	This driver is for the Packet Engines G-NIC PCI Gigabit Ethernet adapter.

	It also supports the Symbios Logic version of the same chip core.



	The author may be reached as becker@scyld.com, or C/O

	Scyld Computing Corporation

	410 Severn Ave., Suite 210

	Annapolis MD 21403



	Support and updates available at

	http://www.scyld.com/network/yellowfin.html

	[link no longer provides useful info -jgarzik]



/* The user-configurable values.

 1 normal messages, 0 quiet .. 7 verbose. */

 Maximum events (Rx packets, etc.) to handle at each interrupt. */

 Support for prototype hardware errata. */

 System-wide count of bogus-rx frames. */

 Constrained by errata */

 Bypass external Tx FIFO. */

 A future perfect board :->.  */

 Override when loading module! */

 Constrained by errata */

 Bypass external Tx FIFO. */

/* Set the copy breakpoint for the copy-only-tiny-frames scheme.

/* Used to pass the media type, etc.

   No media types are currently defined.  These exist for driver

   interoperability.

 More are supported, limit only on options */

 Do ugly workaround for GX server chipset errata. */

 Operational parameters that are set at compile time. */

/* Keep the ring sizes a power of two for efficiency.

   Making the Tx ring too long decreases the effectiveness of channel

   bonding and packet priority.

 Must be > 4 && <= TX_RING_SIZE */

 Operational parameters that usually are not changed. */

 Time in jiffies before concluding the transmitter is hung. */

 Size of each temporary Rx buffer.*/

 Processor type for cache alignment. */

 These identify the driver base version and may not be removed. */

/*

				Theory of Operation



I. Board Compatibility



This device driver is designed for the Packet Engines "Yellowfin" Gigabit

Ethernet adapter.  The G-NIC 64-bit PCI card is supported, as well as the

Symbios 53C885E dual function chip.



II. Board-specific settings



PCI bus devices are configured by the system at boot time, so no jumpers

need to be set on the board.  The system BIOS preferably should assign the

PCI INTA signal to an otherwise unused system IRQ line.

Note: Kernel versions earlier than 1.3.73 do not support shared PCI

interrupt lines.



III. Driver operation



IIIa. Ring buffers



The Yellowfin uses the Descriptor Based DMA Architecture specified by Apple.

This is a descriptor list scheme similar to that used by the EEPro100 and

Tulip.  This driver uses two statically allocated fixed-size descriptor lists

formed into rings by a branch from the final descriptor to the beginning of

the list.  The ring sizes are set at compile time by RX/TX_RING_SIZE.



The driver allocates full frame size skbuffs for the Rx ring buffers at

open() time and passes the skb->data field to the Yellowfin as receive data

buffers.  When an incoming frame is less than RX_COPYBREAK bytes long,

a fresh skbuff is allocated and the frame is copied to the new skbuff.

When the incoming frame is larger, the skbuff is passed directly up the

protocol stack and replaced by a newly allocated skbuff.



The RX_COPYBREAK value is chosen to trade-off the memory wasted by

using a full-sized skbuff for small frames vs. the copying costs of larger

frames.  For small frames the copying cost is negligible (esp. considering

that we are pre-loading the cache with immediately useful header

information).  For large frames the copying cost is non-trivial, and the

larger copy might flush the cache of useful data.



IIIC. Synchronization



The driver runs as two independent, single-threaded flows of control.  One

is the send-packet routine, which enforces single-threaded use by the

dev->tbusy flag.  The other thread is the interrupt handler, which is single

threaded by the hardware and other software.



The send packet thread has partial control over the Tx ring and 'dev->tbusy'

flag.  It sets the tbusy flag whenever it's queuing a Tx packet. If the next

queue slot is empty, it clears the tbusy flag when finished otherwise it sets

the 'yp->tx_full' flag.



The interrupt handler has exclusive control over the Rx ring and records stats

from the Tx ring.  After reaping the stats, it marks the Tx queue entry as

empty by incrementing the dirty_tx mark. Iff the 'yp->tx_full' flag is set, it

clears both the tx_full and tbusy flags.



IV. Notes



Thanks to Kim Stearns of Packet Engines for providing a pair of G-NIC boards.

Thanks to Bruce Faust of Digitalscape for providing both their SYM53C885 board

and an AlphaStation to verifty the Alpha port!



IVb. References



Yellowfin Engineering Design Specification, 4/23/97 Preliminary/Confidential

Symbios SYM53C885 PCI-SCSI/Fast Ethernet Multifunction Controller Preliminary

   Data Manual v3.0

http://cesdis.gsfc.nasa.gov/linux/misc/NWay.html

http://cesdis.gsfc.nasa.gov/linux/misc/100mbps.html



IVc. Errata



See Packet Engines confidential appendix (prototype chips only).

 Only on early revs.  */

 Don't read the MAC from the EEPROm. */

 The PCI I/O space extent. */

 Only 8 bits. */

 Driver use, intended as capability flags. */

 Offsets to the Yellowfin registers.  Various sizes and alignments. */

/* The Yellowfin Rx and Tx buffer descriptors.

 Little endian chips. */

 __BIG_ENDIAN */

 Bits in yellowfin_desc.cmd */

 Bits in yellowfin_desc.status */

 Bits in the interrupt status/mask registers. */

 Required alignment mask */

	/* Descriptor rings first for alignment.

 Media selection timer. */

 Frequently used and paired value: keep adjacent for cache effect. */

 Producer/consumer ring indices */

 Based on MTU+slack. */

 The Tx queue is full. */

 Full-duplex operation requested. */

 Do not sense media. */

 Last dev->if_port value. */

 MII transceiver section. */

 MII device addresses. */

 NWay media advertisement */

 MII device addresses, only first one used */

 when built into the kernel, we only print version if device is found */

 Reset the chip. */

 The lower four bits are the media type. */

 The Yellowfin-specific entries in the device structure. */

 Typical 33Mhz: 1050 ticks */

/* MII Managemen Data I/O accesses.

   These routines assume the MDIO controller is idle, and do not exit until

 Wait for the command to finish. */

 Reset the chip. */

	/* Set up various condition 'select' registers.

 Interrupt on Tx abort */

 Branch on Tx abort */

 Wait on Tx status */

 Interrupt on Rx done */

 Branch on Rx error */

 Wait on Rx done */

	/* Initialize other registers: with so many this eventually this will

 Enable automatic generation of flow control frames, period 0xffff. */

 Setting the Rx mode will start the Rx process. */

 We are always in full-duplex mode with gigabit! */

 0060/4060 for non-MII 10baseT */

 Enable interrupts by setting the interrupt mask. */

 See enum intr_status_bits */

 Clear non-interrupting events */

 Start Rx and Tx channels. */

 Set the timer to check for link beat. */

 Note: these should be KERN_DEBUG. */

	/* If the hardware is found to hang regularly, we will update the code

 Wake the potentially-idle transmit channel. */

 Typical path */

 prevent tx timeout */

 Initialize the Rx and Tx rings, along with various 'dev' bits. */

 16 byte align the IP header. */

 In this mode the Tx ring needs only a single descriptor. */

 Wrap ring */

 Tx ring needs a pair of descriptors, the second for the status. */

 Branch on Tx error. */

 Symbios chips write only tx_errs word. */

 Om pade ummmmm... */

 Wrap ring */

	/* Note: Ordering is important here, set the field with the

 Calculate the next Tx descriptor entry. */

 Note: only works for paddable protocols e.g.  IP. */

 Fix GX chipset errata. */

 New stop command. */

	/* The input_last (status-write) command is constant, but we must

 Final step -- overwrite the old 'stop' command. */

 Non-x86 Todo: explicitly flush cache lines here. */

 Wake the potentially-idle transmit channel. */

 Typical path */

/* The interrupt handler does all of the Rx thread work and cleans up

 Wake Rx engine. */

 Free the original skb. */

 The ring is no longer full, clear tbusy. */

 Todo: optimize this. */

 It still hasn't been Txed */

 There was an major error, log it. */

 Free the original skb. */

 Mark status as empty. */

 The ring is no longer full, clear tbusy. */

 Log errors and other uncommon events. */

 Abnormal error summary. */

/* This routine is logically part of the interrupt handler, but separated

 If EOP is set on the next entry, it's a new packet. Send it up. */

 There was a error. */

 Support for prototype hardware errata. */

 To verify: Yellowfin Length should omit the CRC! */

			/* Check if the packet is long enough to just pass up the skbuff

 16 byte align the IP header */

 Refill the Rx ring buffers. */

 Better luck next round. */

 Align IP on 16 byte boundaries */

 Clear complete bit. */

 Hmmmmm, it's not clear what to do here. */

 Disable interrupts by clearing the interrupt mask. */

 Stop the chip's Tx and Rx processes. */

 __i386__ debugging only */

 Free all the skbuffs in the Rx queue. */

 An invalid address. */

 Support for prototype hardware errata. */

 Set or clear the multicast filter for this adaptor. */

 Stop the Rx process to change any value. */

 Set promiscuous. */

 Too many to filter well, or accept all multicasts. */

 Must use the multicast hash table. */

			/* Due to a bug in the early chip versions, multiple filter

 Copy the hash table to the chip. */

 Normal, unicast/broadcast-only mode. */

 Restart the Rx process. */

 Get address of MII PHY in use. */

 Read MII PHY register. */

 Write MII PHY register. */

 Check for autonegotiation on or reset. */

 Perhaps check_duplex(dev), depending on chip semantics. */

 when a module, this is printed whether or not devices are found in probe */

 SPDX-License-Identifier: GPL-2.0-only

/*  Silan SC92031 PCI Fast Ethernet Adapter driver

 *

 *  Based on vendor drivers:

 *  Silan Fast Ethernet Netcard Driver:

 *    MODULE_AUTHOR ("gaoyonghong");

 *    MODULE_DESCRIPTION ("SILAN Fast Ethernet driver");

 *    MODULE_LICENSE("GPL");

 *  8139D Fast Ethernet driver:

 *    (C) 2002 by gaoyonghong

 *    MODULE_AUTHOR ("gaoyonghong");

 *    MODULE_DESCRIPTION ("Rsltek 8139D PCI Fast Ethernet Adapter driver");

 *    MODULE_LICENSE("GPL");

 *  Both are almost identical and seem to be based on pci-skeleton.c

 *

 *  Rewritten for 2.6 by Cesar Eduardo Barros

 *

 *  A datasheet for this chip can be found at

 *  http://www.silan.com.cn/english/product/pdf/SC92031AY.pdf 

/* Note about set_mac_address: I don't know how to change the hardware

 * matching, so you need to enable IFF_PROMISC when using it.

 BAR 0 is MMIO, BAR 1 is PIO */

 Maximum number of multicast addresses to filter (vs. Rx-all-multicast). */

 Size of the in-memory receive ring. */

 0==8K, 1==16K, 2==32K, 3==64K ,4==128K*/

 Number of Tx descriptor registers. */

 max supported ethernet frame size -- must be at least (dev->mtu+14+4).*/

 Size of the Tx bounce buffers -- must be at least (dev->mtu+14+4). */

 The following settings are log_2(bytes)-4:  0 == 16 bytes .. 6==1024, 7==end of packet. */

 Rx buffer level before first PCI xfer.  */

 Time in jiffies before concluding the transmitter is hung. */

 number of ETHTOOL_GSTATS */

 media options */

 Symbolic offsets to registers. */

 Config0

 Config1

 Rx buffer writer poiter

 Interrupt status

 Interrupt mask

 Rx buffer start address

 Rx buffer read pointer

 Transmit status of all descriptors

 Transmit status (Four 32bit registers).

 Tx descriptors (also four 32bit).

 Rx configuration

 Ethernet hardware address.

 Multicast filter.

 Rx status

 Tx configuration

 physical control

 flow control

 Mii command0 register

 Mii command1 register

 Mii status register

 Timer counter register

 Timer interrupt register

 Power Manager configuration

 Power Manager CRC ( Two 32bit regisers)

 power Manager wakeup( Eight 64bit regiser)

 power Manager LSBCRC(Two 32bit regiser)

rx buffer size

/* Locking rules:

 * priv->lock protects most of the fields of priv and most of the

 * hardware registers. It does not have to protect against softirqs

 * between sc92031_disable_interrupts and sc92031_enable_interrupts;

 * it also does not need to be used in ->open and ->stop while the

 * device interrupts are off.

 * Not having to protect against softirqs is very useful due to heavy

 * use of mdelay() at _sc92031_reset.

 * Functions prefixed with _sc92031_ must be called with the lock held;

 * functions prefixed with sc92031_ must be called without the lock held.

/* Locking rules for the interrupt:

 * - the interrupt and the tasklet never run at the same time

 * - neither run between sc92031_disable_interrupts and

 *   sc92031_enable_interrupt

 iomap.h cookie */

 pci device structure */

 tasklet */

 CPU address of rx ring */

 PCI address of rx ring */

 PCI address of rx ring read pointer */

 tx ring write index */

 tx ring read index */

 CPU address of tx bounce buffer */

 PCI address of tx bounce buffer */

 copies of some hardware registers */

 copy of some flags from dev->flags */

 for ETHTOOL_GSTATS */

 for dev->get_stats */

/* I don't know which registers can be safely read; however, I can guess

 tell the tasklet/interrupt not to enable interrupts */

 stop interrupts */

 wait for any concurrent interrupt/tasklet to finish */

 Initial Tx/Rx configuration */

 NOTE: vendor driver had dead code here to enable tx padding */

 configure rx mode

 disable PM */

 soft reset the chip */

 disable interrupts */

 clear multicast address */

 init rx ring */

 init tx ring */

 clear old register values */

 configure rx buffer size */

 NOTE: vendor driver had dead code here to enable early tx/rx */

 calculate rx fifo overflow */

 enable PM */

 clear intr register */

 Note: TxCarrierLost is always asserted at 100mbps. */

	/* rx_ring_head is only 17 bits in the RxBufWPtr register.

	 * we need to change it to 32 bits physical address

 for 4 bytes aligned

 Omit the four octet CRC from the length.

 mask interrupts before clearing IntrStatus */

 hardware has gone missing

 FIXME I do not understand what is this trying to do.

 Update the error count. */

 Interrupts already disabled by sc92031_stop or sc92031_probe */

 Disable interrupts, stop Tx and Rx. */

 Disable interrupts by clearing the interrupt mask.*/

 enable interrupts */

 FIXME: I'm not sure what the original code was trying to do

 FIXME: Whole branch guessed

 cmd->speed == SPEED_100 */

 FIXME: Guessed

 FIXME: Guessed

 FIXME: Guessed

 faked with skb_copy_and_csum_dev */

	/* Fudge tasklet count so the call to sc92031_enable_interrupts at

 PCI PM Wakeup */

 Disable interrupts, stop Tx and Rx. */

 Interrupts already disabled by sc92031_suspend */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * WL3501 Wireless LAN PCMCIA Card Driver for Linux

 * Written originally for Linux 2.0.30 by Fox Chen, mhchen@golf.ccl.itri.org.tw

 * Ported to 2.2, 2.4 & 2.5 by Arnaldo Carvalho de Melo <acme@conectiva.com.br>

 * Wireless extensions in 2.4 by Gustavo Niemeyer <niemeyer@conectiva.com>

 *

 * References used by Fox Chen while writing the original driver for 2.0.30:

 *

 *   1. WL24xx packet drivers (tooasm.asm)

 *   2. Access Point Firmware Interface Specification for IEEE 802.11 SUTRO

 *   3. IEEE 802.11

 *   4. Linux network driver (/usr/src/linux/drivers/net)

 *   5. ISA card driver - wl24.c

 *   6. Linux PCMCIA skeleton driver - skeleton.c

 *   7. Linux PCMCIA 3c589 network driver - 3c589_cs.c

 *

 * Tested with WL2400 firmware 1.2, Linux 2.0.30, and pcmcia-cs-2.9.12

 *   1. Performance: about 165 Kbytes/sec in TCP/IP with Ad-Hoc mode.

 *      rsh 192.168.1.3 "dd if=/dev/zero bs=1k count=1000" > /dev/null

 *      (Specification 2M bits/sec. is about 250 Kbytes/sec., but we must deduct

 *       ETHER/IP/UDP/TCP header, and acknowledgement overhead)

 *

 * Tested with Planet AP in 2.4.17, 184 Kbytes/s in UDP in Infrastructure mode,

 * 173 Kbytes/s in TCP.

 *

 * Tested with Planet AP in 2.5.73-bk, 216 Kbytes/s in Infrastructure mode

 * with a SMP machine (dual pentium 100), using pktgen, 432 pps (pkt_size = 60)

 For rough constant delay */

/**

 * iw_valid_channel - validate channel in regulatory domain

 * @reg_domain: regulatory domain

 * @channel: channel to validate

 *

 * Returns 0 if invalid in the specified regulatory domain, non-zero if valid.

/**

 * iw_default_channel - get default channel for a regulatory domain

 * @reg_domain: regulatory domain

 *

 * Returns the default channel for a regulatory domain

/*

 * Get Ethernet MAC address.

 *

 * WARNING: We switch to FPAGE0 and switc back again.

 *          Making sure there is no other WL function beening called by ISR.

 get MAC addr */

 BSS */

 LMAL */

 LMAH */

 wait for reading EEPROM */

 switch to SRAM Page 0 (for safety) */

 The MAC addr should be 00:60:... */

/**

 * wl3501_set_to_wla - Move 'size' bytes from PC to card

 * @this: Card

 * @dest: Card addressing space

 * @src: PC addressing space

 * @size: Bytes to move

 *

 * Move 'size' bytes from PC to card. (Shouldn't be interrupted)

 switch to SRAM Page 0 */

 set LMAL and LMAH */

 rep out to Port A */

/**

 * wl3501_get_from_wla - Move 'size' bytes from card to PC

 * @this: Card

 * @src: Card addressing space

 * @dest: PC addressing space

 * @size: Bytes to move

 *

 * Move 'size' bytes from card to PC. (Shouldn't be interrupted)

 switch to SRAM Page 0 */

 set LMAL and LMAH */

 rep get from Port A */

/*

 * Get/Allocate a free Tx Data Buffer

 *

 *  *--------------*-----------------*----------------------------------*

 *  |    PLCP      |    MAC Header   |  DST  SRC         Data ...       |

 *  |  (24 bytes)  |    (30 bytes)   |  (6)  (6)  (Ethernet Row Data)   |

 *  *--------------*-----------------*----------------------------------*

 *  \               \- IEEE 802.11 -/ \-------------- len --------------/

 *   \-struct wl3501_80211_tx_hdr--/   \-------- Ethernet Frame -------/

 *

 * Return = Position in Card

 if buffer is not enough */

/*

 * Free an allocated Tx Buffer. ptr must be correct position.

 check if all space is not free */

/**

 * wl3501_send_pkt - Send a packet.

 * @this: Card

 * @data: Ethernet raw frame.  (e.g. data[0] - data[5] is Dest MAC Addr,

 *                                   data[6] - data[11] is Src MAC Addr)

 * @len: Packet length

 * Ref: IEEE 802.11

 No free buffer available */

 No free buffer available */

/**

 * wl3501_block_interrupt - Mask interrupt from SUTRO

 * @this: Card

 *

 * Mask interrupt from SUTRO. (i.e. SUTRO cannot interrupt the HOST)

 * Return: 1 if interrupt is originally enabled

/**

 * wl3501_unblock_interrupt - Enable interrupt from SUTRO

 * @this: Card

 *

 * Enable interrupt from SUTRO. (i.e. SUTRO can interrupt the HOST)

 * Return: 1 if interrupt is originally enabled

/**

 * wl3501_receive - Receive data from Receive Queue.

 *

 * Receive data from Receive Queue.

 *

 * @this: card

 * @bf: address of host

 * @size: size of buffer.

 IP headers on 16 bytes boundaries */

 FIXME: should be resync_confirm */

 free request if necessary */

/**

 * wl3501_interrupt - Hardware interrupt from card.

 * @irq: Interrupt number

 * @dev_id: net_device

 *

 * We must acknowledge the interrupt as soon as possible, and block the

 * interrupt from the same card immediately to prevent re-entry.

 *

 * Before accessing the Control_Status_Block, we must lock SUTRO first.

 * On the other hand, to prevent SUTRO from malfunctioning, we must

 * unlock the SUTRO as soon as possible.

 Coreset */

 Reset SRAM 0x480 to zero */

 Start up */

 acme: was commented */

 Polling Self_Test_Status */

 firmware complete all test successfully */

 Switch to SRAM Page 0 */

 Read parameter from card */

 Initial Tx Buffer */

 Stop wl3501_hard_start_xmit() from now on */

 Mask interrupts from the SUTRO */

/**

 * wl3501_reset - Reset the SUTRO.

 * @dev: network device

 *

 * It is almost the same as wl3501_open(). In fact, we may just wl3501_close()

 * and wl3501_open() again, but I wouldn't like to free_irq() when the driver

 * is running. It seems to be dangerous.

 Free IRQ, and mark IRQ as unused */

	/*

	 * Queue has to be started only when the Card is Started

 prevent tx timeout */

/*

 * Return : 0 - OK

 *	    1 - Could not transmit (dev_queue_xmit will queue it)

 *		and try to sent it later

 Initial WL3501 firmware */

 Initial device variables */

 Acknowledge Interrupt, for cleaning last state */

 Enable interrupt from card after all */

 size checked: it is u32 */

/**

 * wl3501_detach - deletes a driver "instance"

 * @link: FILL_IN

 *

 * This deletes a driver "instance". The device is de-registered with Card

 * Services. If it has been released, all local data structures are freed.

 * Otherwise, the structures will be freed when the device is released.

	/* If the device is currently configured and active, we won't actually

	 * delete it yet.  Instead, it is marked so that when the release()

 Set the length (very important for backward compatibility) */

 Set all the info we don't care or don't know about to zero */

 Set the Wireless Extension versions */

 ~2 Mb/s */

 FIXME: study the code to fill in more fields... */

 FIXME: we support other ARPHRDs...*/

 FIXME: rescan? */

 FIXME: rescan? deassoc & scan? */

	/*

	 * FIXME: trigger scanning with a reset, yes, I'm lazy

 Length of data */

 FIXME: set properly these flags */

 We accept any ESSID */

	/*

	 * FIXME: have to see from where to get this info, perhaps this card

	 * works at 1 Mbit/s too... for now leave at 2 Mbit/s that is the most

	 * common with the Planet Access Points. -acme

 size checked: it is u16 */

 size checked: it is u16 */

		/*

		 * From the MIB values I think this can be configurable,

		 * as it lists several tx power levels -acme

 size checked: it is u8 */

 The io structure describes IO port mapping */

 General socket configuration */

	/* Try allocating IO ports.  This tries a few fixed addresses.  If you

	 * want, you can also read the card's config table to pick addresses --

		/* The '^0x300' is so that we probe 0x300-0x3ff first, then

	/* Now allocate an interrupt line. Note that this does not actually

 print probe information */

	/*

	 * Initialize card parameters - added by jss

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for RNDIS based wireless USB devices.

 *

 * Copyright (C) 2007 by Bjorge Dijkstra <bjd@jooz.net>

 * Copyright (C) 2008-2009 by Jussi Kivilinna <jussi.kivilinna@iki.fi>

 *

 *  Portions of this file are based on NDISwrapper project,

 *  Copyright (C) 2003-2005 Pontus Fuchs, Giridhar Pemmasani

 *  http://ndiswrapper.sourceforge.net/

 #define	DEBUG			
 #define	VERBOSE			
 NOTE: All these are settings for Broadcom chipset */

 Typical noise/maximum signal level values taken from ndiswrapper iw_ndis.h */

 typical noise level in dBm */

 typical maximum signal level in dBm */

/* Assume that Broadcom 4320 (only chipset at time of writing known to be

 * based on wireless rndis) has default txpower of 13dBm.

 * This value is from Linksys WUSB54GSC User Guide, Appendix F: Specifications.

 *  100% : 20 mW ~ 13dBm

 *   75% : 15 mW ~ 12dBm

 *   50% : 10 mW ~ 10dBm

 *   25% :  5 mW ~  7dBm

 Known device types */

/* NDIS data structures. Taken from wpa_supplicant driver_ndis.c

 * slightly modified for datatype endianess, etc

/*

 *  private data

 RNDIS device private data */

 module parameters */

 hardware state */

 encryption stuff */

/*

 * cfg80211 ops

 from rndis_host.h */

 from rndis_wlan.c */

 translate error code */

 Device returned data offset outside buffer, error. */

			/* Device would have returned more data if buffer would

			 * have been big enough. Copy just the bits that we got.

/*

 * Specs say that we can only set config parameters only soon after device

 * initialization.

 *   value_type: 0 = u32, 2 = unicode string

 extra 12 bytes are for padding (debug output) */

 simple string to unicode string conversion */

/*

 * data conversion functions

/*

 * common functions

 Note: RNDIS_OID_802_11_BSSID_LIST_SCAN clears internal BSS list. */

	/* disassociate causes radio to be turned off; if reset_ssid

		/* Set device to infrastructure mode so we don't get ad-hoc

		 * 'media connect' indications with the random ssid.

	/* NDIS drivers clear keys when infrastructure mode is

	 * changed. But Linux tools assume otherwise. So set the

 this OID is valid only when not associated */

 Get channel and beacon interval */

 index must be 0 - N, as per NDIS  */

		/* wpa_supplicant gives us the Michael MIC RX/TX keys in

 pairwise key */

 group key */

 remove_key is for both wep and wpa */

 pairwise key */

 if it is transmit key, disable encryption */

	/*

	 * mc_list should be accessed holding the lock, so copy addresses to

	 * local buffer first.

 pmkid not found */

 update with new pmkid */

 out of space, return error */

 add new pmkid */

/*

 * cfg80211 ops

	/* Device doesn't support changing txpower after initialization, only

	 * turn off/on radio. Support 'auto' mode and setting same dBm that is

	 * currently used.

 turn on radio */

	/* Get current bssid list from device before new scan, as new scan

	 * clears internal bssid list.

 Wait before retrieving scan results from device */

 parse bssid structure */

 extract data for cfg80211_inform_bss */

	/* BSSID-list might have got bigger last time we checked, keep

	 * resizing until it won't get any bigger.

	/* Device returns incorrect 'num_items'. Workaround by ignoring the

	 * received 'num_items' and walking through full bssid buffer instead.

	/* Pause and purge rx queue, so we don't pass packets before

	 * 'media connect'-indication.

	/* TODO: How to handle ad-hoc encryption?

	 * connect() has *key, join_ibss() doesn't. RNDIS requires key to be

	 * pre-shared for encryption (open/shared/wpa), is key set before

	 * join_ibss? Which auth_type to use (not in params)? What about WPA?

 Don't need to pause rx queue for ad-hoc. */

 couldn't read PMKID cache from device */

 not found, list full, etc */

 Couldn't read PMKID cache from device */

 not found, etc */

 Get signal quality, in case of error use rssi=0 and ignore error. */

 Get AP capabilities */

 Set atleast ESS/IBSS capability */

 Get channel and beacon interval */

 Get SSID, in case of error, use zero length SSID and ignore error. */

 no tsf */

/*

 * workers, indication handlers, device poller

		/* received media connect indication while connected, either

 No memory? Try resume work later */

 Get association info IEs from device. */

			/* Since rndis_wlan_craft_connected_bss() might use info

			 * later and expects info to contain valid data if

			 * non-null, free info and set NULL here.

	/* Internal bss list in device should contain at least the currently

	 * connected bss and we can get it to cfg80211 with

	 * rndis_check_bssid_list().

	 *

	 * NDIS spec says: "If the device is associated, but the associated

	 *  BSSID is not in its BSSID scan list, then the driver must add an

	 *  entry for the BSSID at the end of the data that it returns in

	 *  response to query of RNDIS_OID_802_11_BSSID_LIST."

	 *

	 * NOTE: Seems to be true for BCM4320b variant, but not BCM4320a.

		/* Couldn't get bss from device, we need to manually craft bss

		 * for cfg80211.

 must have at least one array entry */

			/* RNDIS_OID_802_11_ADD_KEY causes sometimes extra

			 * "media connect" indications which confuses driver

			 * and userspace to think that device is

			 * roaming/reassociating when it isn't.

 queue work to avoid recursive calls into rndis_command */

 queue work to avoid recursive calls into rndis_command */

 determine supported modes */

 get device 802.11 capabilities, number of PMKIDs */

	/* Only check/do workaround when connected. Calling is_associated()

	 * also polls device with rndis_command() and catches for media link

	 * indications.

		/* Workaround bad scanning in BCM4320a devices with active

		 * background scanning when not associated.

 Get previous scan results */

 Initiate new scan */

	/* Workaround transfer stalls on poor quality links.

	 * TODO: find right way to fix these stalls (as stalls do not happen

		/* Decrease stats worker interval to catch stalls.

		 * faster. Faster than 400-500ms causes packet loss,

		 * Slower doesn't catch stalls fast enough.

		/* Send scan OID. Use of both OIDs is required to get device

		 * working.

/*

 * driver/device initialization

 doesn't support EU as country code, use FI instead */

	/* copy module parameters for unknown so that iwconfig reports txpower

	 * and workaround parameter is copied to private structure correctly.

	/* This is unknown device, so do not try set configuration parameters.

	/* copy module parameters for bcm4320a so that iwconfig reports txpower

	 * and workaround parameter is copied to private structure correctly.

	/* bcm4320a doesn't handle configuration parameters well. Try

	 * set any and you get partially zeroed mac and broken device.

	/* Early initialization settings, setting these won't have effect

	 * if called after generic_rndis_bind().

 same as rndis_netdev_ops but with local multicast handler */

	/* allocate wiphy and rndis private data

	 * NOTE: We only support a single virtual interface, so wiphy

	 * and wireless_dev are somewhat synonymous for this device.

	/* These have to be initialized before calling generic_rndis_bind().

	 * Otherwise we'll be in big trouble in rndis_wlan_early_init().

 because rndis_command() sleeps we need to use workqueue */

 try bind rndis_host */

	/* generic_rndis_bind set packet filter to multicast_all+

	 * promisc mode which doesn't work well for our devices (device

	 * picks up rssi to closest station instead of to access point).

	 *

	 * rndis_host wants to avoid all OID as much as possible

	 * so do promisc/multicast handling in rndis_wlan.

 fill-out wiphy structure and register w/ cfg80211 */

 TODO: fill-out band/encr information based on priv->caps */

 set default rts/frag */

 turn radio off on init */

 turn radio off */

	/* rndis_reset cleared multicast list, so restore here.

	/* Set current packet filter zero to block receiving data packets from

-------------------------------------------------------------------------*/

 ACM */, \

/* INF driver for these devices have DriverVer >= 4.xx.xx.xx and many custom

 * parameters available. Chipset marked as 'BCM4320SKFBG' in NDISwrapper-wiki.

 Buffalo WLI-U2-KG125S */

 U.S. Robotics USR5421 */

 Belkin F5D7051 */

 Belkin has two vendor ids */

 Belkin F5D7051 */

 Linksys WUSB54GSv2 */

 Linksys WUSB54GSC */

 Asus WL169gE */

 Eminent EM4045 */

 BT Voyager 1055 */

/* These devices have DriverVer < 4.xx.xx.xx and do not have any custom

 * parameters available, hardware probably contain older firmware version with

 * no way of updating. Chipset marked as 'BCM4320????' in NDISwrapper-wiki.

 Linksys WUSB54GSv1 */

 U.S. Robotics USR5420 */

 BUFFALO WLI-USB-G54 */

/* Generic Wireless RNDIS devices that we don't have exact

 * idVendor/idProduct/chip yet.

 RNDIS is MSFT's un-official variant of CDC ACM */

 ACM */, 0x0ff),

 "ActiveSync" is an undocumented variant of RNDIS, used in WM5 */

 END

 SPDX-License-Identifier: GPL-2.0-only

/*=============================================================================

 *

 * A  PCMCIA client driver for the Raylink wireless LAN card.

 * The starting point for this module was the skeleton.c in the

 * PCMCIA 2.9.12 package written by David Hinds, dahinds@users.sourceforge.net

 *

 * Copyright (c) 1998  Corey Thomas (corey@world.std.com)

 *

 * Changes:

 * Arnaldo Carvalho de Melo <acme@conectiva.com.br> - 08/08/2000

 * - reorganize kmallocs in ray_attach, checking all for failure

 *   and releasing the previous allocations if one fails

 *

 * Daniele Bellucci <bellucda@tiscali.it> - 07/10/2003

 * - Audit copy_to_user in ioctl(SIOCGIWESSID)

 *

 Warning : these stuff will slow down the driver... */

 Enable spying addresses */

 Definitions we need for spy */

 Hardware address */

* Prototypes based on PCMCIA skeleton driver *******************************/

**** Prototypes indicated by device structure ******************************/

**** Prototypes for raylink functions **************************************/

 Prototypes for interrpt time functions **********************************/

 Card command functions */

===========================================================================*/

 Parameters that can be set with 'insmod' */

 ADHOC=0, Infrastructure=1 */

 Hop dwell time in Kus (1024 us units defined by 802.11) */

 Beacon period in Kus */

 power save mode (0 = off, 1 = save power) */

 String for network's Extended Service Set ID. 32 Characters max */

 Default to encapsulation unless translation requested */

/* 48 bit physical card address if overriding card's real physical

 * address is required.  Since IEEE 802.11 addresses are 48 bits

 * like ethernet, an int can't be used, so a string is used. To

 * allow use of addresses starting with a decimal digit, the first

 * character must be a letter and will be ignored. This letter is

 * followed by up to 12 hex digits which are the address.  If less

 * than 12 digits are used, the address will be left filled with 0's.

 * Note that bit 0 of the first byte is the broadcast bit, and evil

 * things will happen if it is not 0 in a card address.

 WARNING: THIS DRIVER IS NOT CAPABLE OF HANDLING MULTIPLE DEVICES! */

 Adhoc station */

 32 char ESSID */

 Active scan, CA Mode */

 No default MAC addr  */

 Frag threshold */

 Hop time 128 Kus */

 Beacon period 256 Kus */

 DTIM, retries, ack timeout */

 SIFS, DIFS, PIFS */

 RTS threshold */

 scan_dwell, max_scan_dwell */

 assoc resp timeout thresh */

 adhoc, infra, super cycle max */

 Promiscuous mode */

 Unique word */

 Slot time */

 roam-low snr, low snr count */

 Infra, adhoc missed bcn thresh */

 USA, hop pattern, hop pat length */

 b4 - b5 differences start here */

 CW max */

 CW min */

 Noise gain, limit offset */

 det rssi, med busy offsets */

 det sync thresh */

 test mode, min, max */

 allow broadcast SSID probe resp */

 privacy must start, can join */

 basic rate set */

 Adhoc station */

 32 char ESSID */

 Active scan, CA Mode */

 No default MAC addr  */

 Frag threshold */

 Hop time */

 Beacon period */

 DTIM, retries, ack timeout */

 SIFS, DIFS, PIFS */

 RTS threshold */

 scan_dwell, max_scan_dwell */

 assoc resp timeout thresh */

 adhoc, infra, super cycle max */

 Promiscuous mode */

 Unique word */

 Slot time (TBD seems wrong) */

 roam-low snr, low snr count */

 Infra, adhoc missed bcn thresh */

 USA, hop pattern, hop pat length */

 b4 - b5 differences start here */

 CW max, min */

 Noise gain, limit offset */

 det rssi, med busy offsets */

 det sync thresh */

 test mode, min, max */

 rx/tx delay */

 current BSS id */

 hop set */

===========================================================================*/

 Allocate space for private device-specific data */

 The io structure describes IO port mapping. None used here */

 General socket configuration */

 Raylink entries in the device structure */

 WIRELESS_SPY */

 ray_attach */

 ray_detach */

 Determine card type and firmware version */

	/* Now allocate an interrupt line.  Note that this does not

	   actually assign a handler to the interrupt.

** Set up 32k window for shared memory (transmit and control) ************/

** Set up 16k window for shared memory (receive buffer) ***************/

** Set up window for attribute memory ***********************************/

 ray_config */

	/*

	 * This looks nonsensical, since there is a separate

	 * RCS_BASE. But the difference between a "struct rcs"

	 * and a "struct ccs" ends up being in the _index_ off

	 * the base, so the base pointer is the same for both

	 * ccs/rcs.

===========================================================================*/

 Copy the startup results to local memory */

 Check Power up test status and get mac address from card */

 Initialize CCS's to buffer free state */

 copy mac address to startup parameters */

 Clear any interrupt from the card */

 ray_init */

===========================================================================*/

 Download startup parameters to the card and command it to read them       */

 Copy parameters to host to ECF area */

 Fill in the CCS fields for the ECF */

 Interrupt the firmware to process the command */

 Start kernel timer to wait for dl startup to complete. */

 dl_startup_params */

===========================================================================*/

	/* structure for hop time and beacon period is defined here using

	 * New 802.11D6.1 format.  Card firmware is still using old format

	 * until version 6.

	 *    Before                    After

	 *    a_hop_time ms byte        a_hop_time ms byte

	 *    a_hop_time 2s byte        a_hop_time ls byte

	 *    a_hop_time ls byte        a_beacon_period ms byte

	 *    a_beacon_period           a_beacon_period ls byte

	 *

	 *    a_hop_time = uS           a_hop_time = KuS

	 *    a_beacon_period = hops    a_beacon_period = KuS

* 64ms = 010000 */

 Translate sane kus input values to old build 4/5 format */

 i = hop time in uS truncated to 3 bytes */

 Version 5 uses real kus values */

 init_startup_params */

===========================================================================*/

 end verify_dl_startup */

===========================================================================*/

 Command card to start a network */

 Fill in the CCS fields for the ECF */

 Interrupt the firmware to process the command */

 end start_net */

===========================================================================*/

 Command card to join a network */

 Fill in the CCS fields for the ECF */

 Interrupt the firmware to process the command */

===========================================================================*/

 RAY_IMMEDIATE_INIT */

 Download startup parameters */

 RAY_IMMEDIATE_INIT */

	/* Postpone the card init so that we can still configure the card,

	 * for example using the Wireless Extensions. The init will happen

 RAY_IMMEDIATE_INIT */

 copy mac and broadcast addresses to linux device */

===========================================================================*/

 Dummy routine to satisfy device structure */

===========================================================================*/

 ray_dev_start_xmit */

===========================================================================*/

 Address of xmit buffer in PC space */

 Address of xmit buffer in card space */

 Encapsulate frame */

 TBD TIB length will move address of ptx->var */

 fill in the CCS */

 TBD still need psm_cam? */

 Interrupt the firmware to process the command */

/* TBD very inefficient to copy packet to buffer, and then not

   send it, but the alternative is to queue the messages and that

   won't be done for a while.  Maybe set tbusy until a CCS is free?

 end ray_hw_xmit */

===========================================================================*/

 DIX II ethernet frame */

 Copy LLC header to card buffer */

 This is the selective translation table, only 2 entries */

 Copy body of ethernet packet without ethernet header */

 already  802 type, and proto is length */

 evil netware IPX 802.3 without LLC */

 TBD do other frame types */

 end translate_frame */

===========================================================================*/

/*** IEEE 802.11 Address field assignments *************

		TODS	FROMDS	addr_1		addr_2		addr_3	addr_4

Adhoc		0	0	dest		src (terminal)	BSSID	N/A

AP to Terminal	0	1	dest		AP(BSSID)	source	N/A

Terminal to AP	1	0	AP(BSSID)	src (terminal)	dest	N/A

AP to AP	1	1	dest AP		src AP		dest	source

 infrastructure */

 Terminal */

 end encapsulate_frame */

====================================================================*/

------------------------------------------------------------------*/

/*

 * Wireless Handler : get protocol name

------------------------------------------------------------------*/

/*

 * Wireless Handler : set frequency

 Call commit handler */

 Reject if card is already initialised */

 Setting by channel number */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get frequency

------------------------------------------------------------------*/

/*

 * Wireless Handler : set ESSID

 Reject if card is already initialised */

 Check if we asked for `any' */

 Corey : can you do that ? */

 Check the size of the string */

 Set the ESSID in the card */

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get ESSID

 Get the essid that was set */

 Push it out ! */

 active */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get AP address

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Bit-Rate

 Reject if card is already initialised */

 Check if rate is in range */

 Hack for 1.5 Mb/s instead of 2 Mb/s */

 Please check */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Bit-Rate

 Hum... */

 We are in auto mode */

------------------------------------------------------------------*/

/*

 * Wireless Handler : set RTS threshold

 Reject if card is already initialised */

 if(wrq->u.rts.fixed == 0) we should complain */

 What's the max packet size ??? */

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get RTS threshold

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Fragmentation threshold

 Reject if card is already initialised */

 if(wrq->u.frag.fixed == 0) should complain */

 To check out ! */

 Call commit handler */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Fragmentation threshold

------------------------------------------------------------------*/

/*

 * Wireless Handler : set Mode of Operation

 Call commit handler */

 Reject if card is already initialised */

------------------------------------------------------------------*/

/*

 * Wireless Handler : get Mode of Operation

------------------------------------------------------------------*/

/*

 * Wireless Handler : get range info

 Set the length (very important for backward compatibility) */

 Set the Wireless Extension versions */

 Set information in the range struct */

 Put the right number here */

 What's the correct value ? */

 Idem */

 1 Mb/s */

 2 Mb/s */

------------------------------------------------------------------*/

/*

 * Wireless Private Handler : set framing mode

 Set framing mode */

------------------------------------------------------------------*/

/*

 * Wireless Private Handler : get framing mode

------------------------------------------------------------------*/

/*

 * Wireless Private Handler : get country

------------------------------------------------------------------*/

/*

 * Commit handler : called after a bunch of SET operations

------------------------------------------------------------------*/

/*

 * Stats handler : return Wireless Stats

 Get it from the first node in spy list */

 WIRELESS_SPY */

 end ray_get_wireless_stats */

------------------------------------------------------------------*/

/*

 * Structures to export the Wireless Handlers

 WIRELESS_SPY */

 Set framing mode */

 Get framing mode */

 Get country code */

 cmd,		set_args,	get_args,	name */

===========================================================================*/

 If the card is not started, time to start it ! - Jean II */

 Download startup parameters */

 end ray_open */

===========================================================================*/

	/* In here, we should stop the hardware (stop card from beeing active)

	 * and set local->card_status to CARD_AWAITING_PARAM, so that while the

	 * card is closed we can chage its configuration.

 end ray_dev_close */

===========================================================================*/

===========================================================================*/

 Cause a firmware interrupt if it is ready for one                         */

 Return nonzero if not ready                                               */

 Fill the mailbox, then kick the card */

 interrupt_ecf */

===========================================================================*/

 Get next free transmit CCS                                                */

 Return - index of current tx ccs                                          */

 get_free_tx_ccs */

===========================================================================*/

 Get next free CCS                                                         */

 Return - index of current ccs                                             */

 get_free_ccs */

===========================================================================*/

===========================================================================*/

===========================================================================*/

===========================================================================*/

 Interrupt the firmware to process the command */

===========================================================================*/

 Copy the kernel's list of MC addresses to card */

 Interrupt the firmware to process the command */

 end ray_update_multi_list */

===========================================================================*/

 end set_multicast_list */

/*=============================================================================

 * All routines below here are run at interrupt time.

 Note that we want interrupts with dev->start == 0 */

 If it's a returned CCS */

 Happens in firmware someday */

 Note that this CCS isn't returned */

 It's an RCS */

 do we need to clear tx buffers CCS's? */

 ray_interrupt */

===========================================================================*/

 Calculate address of packet within Rx buffer */

 Length of first packet fragment */

 Get the statistics so the card counters never overflow */

 end ray_rx */

===========================================================================*/

 Other end of the wireless link */

 TBD length needs fixing for translated header */

 encapsulated ethernet */

 If fragmented packet, verify sizes of fragments add up */

 Single unfragmented packet */

 Align IP on 16 byte (TBD check this) */

***********************/

 Reserve enough room for the whole damn packet. */

 Copy the whole packet to sk_buff */

 Get source address */

 Now, deal with encapsulation/translation/sniffer */

 Encapsulated ethernet, so just lop off 802.11 MAC header */

 TBD reserve            skb_reserve( skb, RX_MAC_HEADER_LENGTH); */

 Do translation */

 sniffer mode, so just pass whole packet */

***********************/

 Now pick up the rest of the fragments if any */

 Gather signal strength per address */

	/* For the Access Point or the node having started the ad-hoc net

	 * note : ad-hoc work only in some specific configurations, but we

 Update statistics */

local->wstats.qual.qual = none ? */

local->wstats.qual.noise = none ? */

 Now, update the spy stuff */

 wstats.noise = none ? */

 wstats.qual = none ? */

 Update spy records */

 WIRELESS_SPY */

 end rx_data */

===========================================================================*/

 not a snap type so leave it alone */

 Its a SNAP */

 EtherII and nuke the LLC */

 TBD reserve  skb_reserve(skb, delta); */

 end untranslate */

===========================================================================*/

/* Copy data from circular receive buffer to PC memory.

 * dest     = destination address in PC memory

 * pkt_addr = source address in receive buffer

 * len      = length of packet to copy

 Packet wrapped in circular buffer */

===========================================================================*/

===========================================================================*/

 end authenticate */

===========================================================================*/

 if we are trying to get authenticated */

 Infrastructure network */

 Verify authentication sequence #2 and success */

 end rx_authenticate */

===========================================================================*/

 If no tx buffers available, return */

 TBD should never be here but... what if we are? */

 fill in the CCS */

 Interrupt the firmware to process the command */

 end associate */

===========================================================================*/

/*  UCHAR buff[256];

    struct ray_rx_msg *msg = (struct ray_rx_msg *) buff;

 Need to reauthenticate or rejoin depending on reason code */

/*  copy_from_rx_buff(local, buff, pkt_addr, rx_len & 0xff);

===========================================================================*/

===========================================================================*/

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 8 9 10 undefined */

 11 */

 12 */

 13 */

 14 */

 15 */

 16 */

===========================================================================*/

/* Print current values which are not available via other means

 * eg ifconfig

 build 4 does not report version, and field is 0x55 after memtest */

 Pull some fields out of last beacon received */

===========================================================================*/

 If no tx buffers available, return */

 Address in card space */

 fill in the CCS */

 fill in the mac header */

 Fill in msg body with protocol 00 00, sequence 01 00 ,status 00 00 */

 Interrupt the firmware to process the command */

 End build_auth_frame */

===========================================================================*/

 init_ray_cs */

===========================================================================*/

 exit_ray_cs */

===========================================================================*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * mac80211_hwsim - software simulator of 802.11 radio(s) for mac80211

 * Copyright (c) 2008, Jouni Malinen <j@w1.fi>

 * Copyright (c) 2011, Javier Lopez <jlopex@gmail.com>

 * Copyright (c) 2016 - 2017 Intel Deutschland GmbH

 * Copyright (C) 2018 - 2020 Intel Corporation

/*

 * TODO:

 * - Add TSF sync and fix IBSS beacon transmission by adding

 *   competition for "air time" at TBTT

 * - RX filtering based on filter configuration (data->rx_filter)

/**

 * enum hwsim_regtest - the type of regulatory tests we offer

 *

 * These are the different values you can use for the regtest

 * module parameter. This is useful to help test world roaming

 * and the driver regulatory_hint() call and combinations of these.

 * If you want to do specific alpha2 regulatory domain tests simply

 * use the userspace regulatory request as that will be respected as

 * well without the need of this module parameter. This is designed

 * only for testing the driver regulatory request, world roaming

 * and all possible combinations.

 *

 * @HWSIM_REGTEST_DISABLED: No regulatory tests are performed,

 * 	this is the default value.

 * @HWSIM_REGTEST_DRIVER_REG_FOLLOW: Used for testing the driver regulatory

 *	hint, only one driver regulatory hint will be sent as such the

 * 	secondary radios are expected to follow.

 * @HWSIM_REGTEST_DRIVER_REG_ALL: Used for testing the driver regulatory

 * 	request with all radios reporting the same regulatory domain.

 * @HWSIM_REGTEST_DIFF_COUNTRY: Used for testing the drivers calling

 * 	different regulatory domains requests. Expected behaviour is for

 * 	an intersection to occur but each device will still use their

 * 	respective regulatory requested domains. Subsequent radios will

 * 	use the resulting intersection.

 * @HWSIM_REGTEST_WORLD_ROAM: Used for testing the world roaming. We accomplish

 *	this by using a custom beacon-capable regulatory domain for the first

 *	radio. All other device world roam.

 * @HWSIM_REGTEST_CUSTOM_WORLD: Used for testing the custom world regulatory

 * 	domain requests. All radios will adhere to this custom world regulatory

 * 	domain.

 * @HWSIM_REGTEST_CUSTOM_WORLD_2: Used for testing 2 custom world regulatory

 * 	domain requests. The first radio will adhere to the first custom world

 * 	regulatory domain, the second one to the second custom world regulatory

 * 	domain. All other devices will world roam.

 * @HWSIM_REGTEST_STRICT_FOLLOW: Used for testing strict regulatory domain

 *	settings, only the first radio will send a regulatory domain request

 *	and use strict settings. The rest of the radios are expected to follow.

 * @HWSIM_REGTEST_STRICT_ALL: Used for testing strict regulatory domain

 *	settings. All radios will adhere to this.

 * @HWSIM_REGTEST_STRICT_AND_DRIVER_REG: Used for testing strict regulatory

 *	domain settings, combined with secondary driver regulatory domain

 *	settings. The first radio will get a strict regulatory domain setting

 *	using the first driver regulatory request and the second radio will use

 *	non-strict settings using the second driver regulatory request. All

 *	other devices should follow the intersection created between the

 *	first two.

 * @HWSIM_REGTEST_ALL: Used for testing every possible mix. You will need

 * 	at least 6 radios for a complete test. We will test in this order:

 * 	1 - driver custom world regulatory domain

 * 	2 - second custom world regulatory domain

 * 	3 - first driver regulatory domain request

 * 	4 - second driver regulatory domain request

 * 	5 - strict regulatory domain settings using the third driver regulatory

 * 	    domain request

 * 	6 and on - should follow the intersection of the 3rd, 4rth and 5th radio

 * 	           regulatory requests.

 Set to one of the HWSIM_REGTEST_* values above */

 global monitor netdev */

 Channel 1 */

 Channel 2 */

 Channel 3 */

 Channel 4 */

 Channel 5 */

 Channel 6 */

 Channel 7 */

 Channel 8 */

 Channel 9 */

 Channel 10 */

 Channel 11 */

 Channel 12 */

 Channel 13 */

 Channel 14 */

 Channel 36 */

 Channel 40 */

 Channel 44 */

 Channel 48 */

 Channel 52 */

 Channel 56 */

 Channel 60 */

 Channel 64 */

 Channel 100 */

 Channel 104 */

 Channel 108 */

 Channel 112 */

 Channel 116 */

 Channel 120 */

 Channel 124 */

 Channel 128 */

 Channel 132 */

 Channel 136 */

 Channel 140 */

 Channel 149 */

 Channel 153 */

 Channel 157 */

 Channel 161 */

 Channel 165 */

 Channel 169 */

 Channel 171 */

 Channel 172 */

 Channel 173 */

 Channel 174 */

 Channel 175 */

 Channel 176 */

 Channel 177 */

 Channel 178 */

 Channel 179 */

 Channel 180 */

 Channel 181 */

 Channel 182 */

 Channel 183 */

 Channel 184 */

 Channel 185 */

 Channel 1 */

 Channel 5 */

 Channel 9 */

 Channel 13 */

 Channel 17 */

 Channel 21 */

 Channel 25 */

 Channel 29 */

 Channel 33 */

 Channel 37 */

 Channel 41 */

 Channel 45 */

 Channel 49 */

 Channel 53 */

 Channel 57 */

 Channel 61 */

 Channel 65 */

 Channel 69 */

 Channel 73 */

 Channel 77 */

 Channel 81 */

 Channel 85 */

 Channel 89 */

 Channel 93 */

 Channel 97 */

 Channel 181 */

 Channel 105 */

 Channel 109 */

 Channel 113 */

 Channel 117 */

 Channel 121 */

 Channel 125 */

 Channel 129 */

 Channel 133 */

 Channel 137 */

 Channel 141 */

 Channel 145 */

 Channel 149 */

 Channel 153 */

 Channel 157 */

 Channel 161 */

 Channel 165 */

 Channel 169 */

 Channel 173 */

 Channel 177 */

 Channel 181 */

 Channel 185 */

 Channel 189 */

 Channel 193 */

 Channel 197 */

 Channel 201 */

 Channel 205 */

 Channel 209 */

 Channel 213 */

 Channel 217 */

 Channel 221 */

 Channel 225 */

 Channel 229 */

 Channel 233 */

 MCS 7 for 1 SS */

 RX Highest Supported Long GI Data Rate 0:7 */

 RX Highest Supported Long GI Data Rate 0:7 */

 TX S1G MCS Map 0:6 */

 TX S1G MCS Map :7 */

 TX Highest Supported Long GI Data Rate 0:6 */

 TX Highest Supported Long GI Data Rate 7:8 */

 Rx Single spatial stream and S1G-MCS Map for 1MHz */

 Tx Single spatial stream and S1G-MCS Map for 1MHz */

	/* Send a vendor event as a test. Note that this would not normally be

	 * done within a command handler, but rather, based on some other

	 * trigger. For simplicity, this command is used to trigger the event

	 * here.

	 *

	 * event_idx = 0 (index in mac80211_hwsim_vendor_commands)

		/* skb_put() or nla_put() will fill up data within

		 * NL80211_ATTR_VENDOR_DATA.

 Add vendor data */

 Send the event - this will call nla_nest_end() */

 Send a response to the command */

	/* skb_put() or nla_put() will fill up data within

	 * NL80211_ATTR_VENDOR_DATA

 Advertise support vendor specific events */

 beacon interval in us */;

 packets pending */

	/*

	 * Only radios in the same group can communicate together (the

	 * channel has to match too). Each bit represents a group. A

	 * radio can be in more than one group.

 group shared by radios created in the same netns */

 wmediumd portid responsible for netgroup of this radio */

 difference between this hw's clock and the real clock, in usecs */

 absolute beacon transmission time. Used to cover up "tx" delay. */

 Stats */

 MAC80211_HWSIM netlink family */

 MAC80211_HWSIM netlink policy */

 MAC80211_HWSIM virtio queues */

 cause a linker error if this ends up being needed */

 sysfs attributes */

 TODO: allow packet injection */

 adjust after beaconing with new timestamp at old TBTT */

		/* TODO: accept (some) Beacons by default and other frames only

		/* Allow unicast frames to own address if there is a pending

 If the queue contains MAX_QUEUE skb's drop some */

 Droping until WARN_QUEUE level */

 We get the skb->data */

	/* We get the flags for this transmission, and we translate them to

 We get the tx control (rate and retries) info*/

 We create a cookie to identify this skb */

 Enqueue the packet */

	/*

	 * To enable this code, #define the HWSIM_RADIOTAP_OUI,

	 * e.g. like this:

	 * #define HWSIM_RADIOTAP_OUI "\x02\x00\x00"

	 * (but you should use a valid OUI, not that)

	 *

	 * If anyone wants to 'donate' a radiotap OUI/subns code

	 * please send a patch removing this #ifdef and changing

	 * the values accordingly.

	/*

	 * Note that this code requires the headroom in the SKB

	 * that was allocated earlier.

	/*

	 * Radiotap vendor namespaces can (and should) also be

	 * split into fields by using the standard radiotap

	 * presence bitmap mechanism. Use just BIT(0) here for

	 * the presence bitmap.

 We have 8 bytes of (dummy) data */

 For testing, also require it to be aligned */

 And also test that padding works, 4 bytes */

 push the data */

 make sure to clear padding, mac80211 doesn't */

 TODO: simulate real signal strength (and optional packet loss) */

 release the skb's source info */

	/*

	 * Get absolute mactime here so all HWs RX at the "same time", and

	 * absolute TX time for beacon mactime so the timestamp matches.

	 * Giving beacons a different mactime than non-beacons looks messy, but

	 * it helps the Toffset be exact and a ~10us mactime discrepancy

	 * probably doesn't really matter.

 Copy skb to all enabled radios that are on the current frequency */

		/*

		 * reserve some space for our vendor and the normal

		 * radiotap header, since we're copying anyway

 Should not happen; just a sanity check for addr1 use */

 fake header transmission time */

 TODO: get MCS */

 wmediumd mode check */

 NO wmediumd detected, perfect medium simulation */

 frame was transmitted at most favorable rate at first attempt */

	/*

	 * interface may change from non-AP to AP in

	 * which case this needs to be set up again

 TODO: get MCS */

 fake header transmission time */

 beacon at new TBTT + beacon interval */

 TODO: make good use of these flags */

	/*

	 * Magically conjured dummy values --- this is only ok for simulated hardware.

	 *

	 * A real driver which cannot determine real values noise MUST NOT

	 * report any, especially not a magically conjured ones :-)

 report 12.5% of channel time is used */

/*

 * This section contains example code for using netlink

 * attributes with the testmode command in nl80211.

 These enums need to be kept in sync with userspace */

 keep last */

 Not implemented, queues only on kernel side */

 send probes */

				/* Leave all the other PHY capability bytes

				 * unset, as DCM, beam forming, RU and PPE

				 * threshold information are not supported

				/* Leave all the other PHY capability bytes

				 * unset, as DCM, beam forming, RU and PPE

				 * threshold information are not supported

 TODO: should we support other types, e.g., P2P?*/

				/* Leave all the other PHY capability bytes

				 * unset, as DCM, beam forming, RU and PPE

				 * threshold information are not supported

 TODO: should we support other types, e.g., IBSS?*/

				/* Leave all the other PHY capability bytes

				 * unset, as DCM, beam forming, RU and PPE

				 * threshold information are not supported

 TODO: should we support other types, e.g., P2P?*/

				/* Leave all the other PHY capability bytes

				 * unset, as DCM, beam forming, RU and PPE

				 * threshold information are not supported

 TODO: should we support other types, e.g., IBSS?*/

				/* Leave all the other PHY capability bytes

				 * unset, as DCM, beam forming, RU and PPE

				 * threshold information are not supported

 ieee80211_alloc_hw_nm may have used a default name */

 Why need here second address ? */

 possible address clash is checked at hash table insertion */

 compatibility with automatically generated mac addr */

 setup interface limits, only on interface types we support */

		/*

		 * For this case, we may only support a subset of

		 * HWSIM_DEFAULT_IF_LIMIT, therefore we only want to add the

		 * bits that both param->iftype & HWSIM_DEFAULT_IF_LIMIT have.

	/*

	 * If we actually were asked to support combinations,

	 * advertise them - if there's only a single thing like

	 * only IBSS then don't advertise it as combinations.

 ask mac80211 to reserve space for magic */

 By default all radios belong to the first group */

 Enable frame retransmissions for lossy channels */

 give the regulatory workqueue a chance to run */

 look for the skb matching the cookie passed back from user */

 not found */

	/* Tx info received because the frame was broadcasted on user space,

 now send back TX status */

 Allocate new skb here */

 Copy the data */

 check if radio is configured properly */

 A frame is received from user space */

		/* throw away off-channel packets, but allow both the temporary

		 * ("hw" scan/remain-on-channel) and regular channel, since the

		 * internal datapath also allows this

	/* In the future we should revise the userspace API and allow it

	 * to set a flag that it does support multi-channel, then we can

	 * let this pass conditionally on the flag.

	 * For current userspace, prohibit it since it won't work right.

 ensures ciphers only include ciphers listed in 'hwsim_ciphers' array */

 ensure both flag and iftype support is honored */

 list changed, but no new element sent, set interrupted flag */

 Generic Netlink operations array */

 Radios created in init_net are returned to init_net. */

 unregister the notifier */

 unregister the family */

 MAC80211_HWSIM virtio device id table */

 SPDX-License-Identifier: GPL-2.0

/* drivers/net/wireless/virt_wifi.c

 *

 * A fake implementation of cfg80211_ops that can be tacked on to an ethernet

 * net_device to make it appear as a wireless connection.

 *

 * Copyright (C) 2018 Google, Inc.

 *

 * Author: schuffelen@google.com

 Assigned at module init. Guaranteed locally-administered and unicast. */

 Called with the rtnl lock held. */

 Acquires and releases the rdev BSS lock. */

 Schedules work which acquires and releases the rtnl lock. */

 May acquire and release the rdev BSS lock. */

 Clean up dangling callbacks if necessary. */

 Schedules work which acquires and releases the rtnl lock. */

 Called with the rtnl lock held. */

 Acquires and releases the rdev event lock. */

 Schedules an event that acquires the rtnl lock. */

 May acquire and release the rdev event lock. */

 If there is work pending, clean up dangling callbacks. */

 Schedules an event that acquires the rtnl lock. */

 Called with the rtnl lock held. Acquires the rdev event lock. */

 Called with the rtnl lock held. */

 For CFG80211_SIGNAL_TYPE_MBM, value is expressed in _dBm_ */

 units are 100kbit/s */

 Called with the rtnl lock held. */

 Acquires and releases the rtnl lock. */

 Acquires and releases the rtnl lock. */

 Enters and exits a RCU-bh critical section. */

 Called with rtnl lock held. */

 Called with rtnl lock held. */

 Invoked as part of rtnl lock release. */

	/* Delayed past dellink to allow nl80211 to react to the device being

	 * deleted.

 No lock interaction. */

 Called in a RCU read critical section from netif_receive_skb */

 GFP_ATOMIC because this is a packet interrupt handler. */

 Called with rtnl lock held. */

 Called with rtnl lock held. */

 Deleting the wiphy is handled in the module destructor. */

 Acquires and releases the rtnl lock. */

 Guaranteed to be locallly-administered and not multicast. */

 Acquires and releases the rtnl lock. */

 Will delete any devices that depend on the wiphy. */

/*

 * drivers/net/wireless/mwl8k.c

 * Driver for Marvell TOPDOG 802.11 Wireless cards

 *

 * Copyright (C) 2008, 2009, 2010 Marvell Semiconductor Inc.

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 Module parameters */

 Register definitions */

 Host->device communications */

 Device->host communications */

/* HW micro second timer register

 * located at offset 0xA600. This

 * will be used to timestamp tx

 * packets.

/* txpriorities are mapped with hw queues.

 * Each hw queue has a txpriority.

/* Each HW queue can have one AMPDU stream.

 * But, because one of the hw queue is reserved,

 * maximum AMPDU queues that can be created are

 * one short of total tx queues.

 hw receives here */

 refill descs here */

 hw transmits here */

 sw appends here */

 firmware */

 hardware/firmware parameters */

 Ampdu stream information */

 firmware access */

 lock held over TX and TX reap */

 TX quiesce completion, protected by fw_mutex and tx_lock */

 List of interfaces.  */

 power management status cookie from firmware */

	/*

	 * Running count of TX packets in flight, to avoid

	 * iterating over the transmit rings each time.

 XXX need to convert this to handle multiple interfaces */

	/*

	 * This FJ worker has to be global as it is scheduled from the

	 * RX handler.  At this point we don't know which interface it

	 * belongs to until the list of bssids waiting to complete join

	 * is checked.

 Tasklet to perform TX reclaim.  */

 Tasklet to perform RX.  */

 Most recently reported noise in dBm */

	/*

	 * preserve the queue configurations so they can be restored if/when

	 * the firmware image is swapped.

 To perform the task of reloading the firmware */

 async firmware loading state */

 bitmap of running BSSes */

 ACS related */

 Per interface specific private data */

 Firmware macid for this vif.  */

 Non AMPDU sequence number assigned by driver.  */

 Saved WEP keys */

 BSSID */

 A flag to indicate is HW crypto is enabled for this bssid */

 Index into station database. Returned by UPDATE_STADB.  */

 Set or get info from Firmware */

 Firmware command codes */

 per-vif */

 per-vif */

 per-vif */

 per-vif */

 per-vif */

 per-vif */

 Hardware and firmware reset */

 Release fw image */

 states for asynchronous f/w loading */

 Request fw image */

 release current image */

		/*

		 * if we get here, no helper image is needed.  Skip the

		 * FW_STATE_INIT state.

/*

 * Firmware loading.

 DMA header used by firmware and hardware.  */

 Routines to add/remove DMA header from skb.  */

	/*

	 * Add a firmware DMA header; the firmware requires that we

	 * present a 2-byte payload length followed by a 4-address

	 * header (without QoS field), followed (optionally) by any

	 * WEP/ExtIV header (but only filled in for CCMP).

	/*

	 * Check if skb_resize is required because of

	 * tx_headroom adjustment.

	/*

	 * Firmware length is the length of the fully formed "802.11

	 * payload".  That is, everything except for the 802.11 header.

	 * This includes all crypto material including the MIC.

	/*

	 * Make sure the packet header is in the DMA header format (4-address

	 * without QoS), and add head & tail padding when HW crypto is enabled.

	 *

	 * We have the following trailer padding requirements:

	 * - WEP: 4 trailer bytes (ICV)

	 * - TKIP: 12 trailer bytes (8 MIC + 4 ICV)

	 * - CCMP: 8 trailer bytes (MIC)

/*

 * Packet reception for 88w8366/88w8764 AP firmware.

 8366/8764 AP rx_status bits */

/*

 * Packet reception for STA firmware.

 ICV=0 or MIC=1 */

 Key is uploaded only in failure case */

 Must be called only when the card's reception is completely halted */

/*

 * Scan a list of BSSIDs to process for finalize join.

 * Allows for extension to process multiple BSSIDs.

	/*

	 * Use GFP_ATOMIC as rxq_process is called from

	 * the primary interrupt handler, memory allocation call

	 * must not sleep.

		/*

		 * Check for a pending join operation.  Save a

		 * copy of the beacon and schedule a tasklet to

		 * send a FINALIZE_JOIN command to the firmware.

			/* Check if hw crypto has been enabled for

			 * this bss. If yes, set the status flags

			 * accordingly

				/*

				 * When MMIC ERROR is encountered

				 * by the firmware, payload is

				 * dropped and only 32 bytes of

				 * mwl8k Firmware header is sent

				 * to the host.

				 *

				 * We need to add four bytes of

				 * key information.  In it

				 * MAC80211 expects keyidx set to

				 * 0 for triggering Counter

				 * Measure of MMIC failure.

/*

 * Packet transmission.

/*

 * Must be called with priv->fw_mutex held and tx queues stopped.

	/* Since fw restart is in progress, allow only the firmware

	 * commands from the restart code and block the other

	 * commands since they are going to fail in any case since

	 * the firmware has crashed

	/*

	 * The TX queues are stopped at this point, so this test

	 * doesn't need to take ->tx_lock.

/* The firmware will fill in the rate information

 * for each packet that gets queued in the hardware

 * and these macros will interpret that info.

 Mark descriptor as unused */

				/* If rate is < 6.5 Mpbs for an ht station

				 * do not form an ampdu. If the station is a

				 * legacy station (format = 0), do not form an

				 * ampdu

		/* Rate control is happening in the firmware.

		 * Ensure no tx rate is being reported.

 must be called only when the card's transmit is completely halted */

 caller must hold priv->stream_lock when calling the stream functions */

 if the stream has already been started, don't start it again */

	/* reset the packet count after each second elapses.  If the number of

	 * packets ever exceeds the ampdu_min_traffic threshold, we will allow

	 * an ampdu stream to be started.

/* The hardware ampdu queues start from 5.

 * txpriorities for ampdu queues are

 * 5 6 7 0 1 2 3 4 ie., queue 5 is highest

 * and queue 3 is lowest (queue 4 is reserved)

 Setup firmware control bit fields for each frame type.  */

	/* Queue ADDBA request in the respective data queue.  While setting up

	 * the ampdu stream, mac80211 queues further packets for that

	 * particular ra/tid pair.  However, packets piled up in the hardware

	 * for that ra/tid pair will still go out. ADDBA request and the

	 * related data packets going out from different queues asynchronously

	 * will cause a shift in the receiver window which might result in

	 * ampdu packets getting dropped at the receiver after the stream has

	 * been setup.

				/* We get here if the driver sends us packets

				 * after we've initiated a stream, but before

				 * our ampdu_action routine has been called

				 * with IEEE80211_AMPDU_TX_START to get the SSN

				 * for the ADDBA request.  So this packet can

				 * go out with no risk of sequence number

				 * mismatch.  No special handling is required.

				/* Drop packets that would go out after the

				 * ADDBA request was sent but before the ADDBA

				 * response is received.  If we don't do this,

				 * the recipient would probably receive it

				 * after the ADDBA request with SSN 0.  This

				 * will cause the recipient's BA receive window

				 * to shift, which would cause the subsequent

				 * packets in the BA stream to be discarded.

				 * mac80211 queues our packets for us in this

				 * case, so this is really just a safety check.

			/* Defer calling mwl8k_start_stream so that the current

			 * skb can go out before the ADDBA request.  This

			 * prevents sequence number mismatch at the recepient

			 * as described above.

	/* Mgmt frames that go out frequently are probe

	 * responses. Other mgmt frames got out relatively

	 * infrequently. Hence reserve 2 buffers so that

	 * other mgmt frames do not get dropped due to an

	 * already queued probe response in one of the

	 * reserved buffers.

 Initiate the ampdu session here */

/*

 * Firmware access.

 *

 * We have the following requirements for issuing firmware commands:

 * - Some commands require that the packet transmit path is idle when

 *   the command is issued.  (For simplicity, we'll just quiesce the

 *   transmit path for every command.)

 * - There are certain sequences of commands that need to be issued to

 *   the hardware sequentially, with no other intervening commands.

 *

 * This leads to an implementation of a "firmware lock" as a mutex that

 * can be taken recursively, and which is taken by both the low-level

 * command submission function (mwl8k_post_cmd) as well as any users of

 * that function that require issuing of an atomic sequence of commands,

 * and quiesces the transmit path whenever it's taken.

/*

 * Command processing.

 Timeout firmware commands after 10s */

	/* Before posting firmware commands that could change the hardware

	 * characteristics, make sure that all BSSes are stopped temporary.

	 * Enable these stopped BSSes after completion of the commands

/*

 * Setup code shared between STA and AP firmware images.

/*

 * CMD_GET_HW_SPEC (STA version).

/*

 * CMD_GET_HW_SPEC (AP version).

/*

 * CMD_SET_HW_SPEC.

/* If enabled, MWL8K_SET_HW_SPEC_FLAG_ENABLE_LIFE_TIME_EXPIRY will cause

 * packets to expire 500 ms after the timestamp in the tx descriptor.  That is,

 * the packets that are queued for more than 500ms, will be dropped in the

 * hardware. This helps minimizing the issues caused due to head-of-line

 * blocking where a slow client can hog the bandwidth and affect traffic to a

 * faster client.

	/*

	 * Mac80211 stack has Q0 as highest priority and Q3 as lowest in

	 * that order. Firmware has Q3 as highest priority and Q0 as lowest

	 * in that order. Map Q3 of mac80211 to Q0 of firmware so that the

	 * priority is interpreted the right way in firmware.

/*

 * CMD_MAC_MULTICAST_ADR.

/*

 * CMD_GET_STAT.

/*

 * CMD_RADIO_CONTROL.

/*

 * CMD_RF_TX_POWER.

/*

 * CMD_TX_POWER.

/*

 * CMD_RF_ANTENNA.

/*

 * CMD_SET_BEACON.

/*

 * CMD_SET_PRE_SCAN.

/*

 * CMD_BBP_REG_ACCESS.

/*

 * CMD_SET_POST_SCAN.

 uSecs to mSecs */

 uSecs to mSecs */

 Make sure sign is negative else ACS  at hostapd fails */

/*

 * CMD_SET_RF_CHANNEL.

		/* Store current channel stats

		 * before switching to newer one.

		 * This will be processed only for AP fw.

/*

 * CMD_SET_AID.

 AP's MAC address (BSSID) */

	/*

	 * Clear nonstandard rate 4.

/*

 * CMD_SET_RATE.

 Bitmap for supported MCS codes.  */

/*

 * CMD_FINALIZE_JOIN.

 Number of beacon periods to sleep */

/*

 * CMD_SET_RTS_THRESHOLD.

/*

 * CMD_SET_SLOT.

/*

 * CMD_SET_EDCA_PARAMS.

 See MWL8K_SET_EDCA_XXX below */

 TX opportunity in units of 32 us */

 Log exponent of max contention period: 0...15 */

 Log exponent of min contention period: 0...15 */

 Adaptive interframe spacing in units of 32us */

 TX queue to configure */

 Log exponent of max contention period: 0...15 */

 Log exponent of min contention period: 0...15 */

 Adaptive interframe spacing in units of 32us */

 TX queue to configure */

/*

 * CMD_SET_WMM_MODE.

/*

 * CMD_MIMO_CONFIG.

/*

 * CMD_USE_FIXED_RATE (STA version).

/*

 * CMD_USE_FIXED_RATE (AP version).

/*

 * CMD_ENABLE_SNIFFER.

/*

 * MWL8K_CMD_SET_MAC_ADDR.

/*

 * MWL8K_CMD_DEL_MAC_ADDR.

/*

 * CMD_SET_RATEADAPT_MODE.

/*

 * CMD_GET_WATCHDOG_BITMAP.

 the bitmap is the hw queue number.  Map it to the ampdu queue. */

/*

 * CMD_BSS_START.

/*

 * CMD_BASTREAM.

/*

 * UPSTREAM is tx direction

/*

 * CMD_SET_NEW_STN.

 Destroy any active ampdu streams for this sta */

/*

 * CMD_UPDATE_ENCRYPTION.

/*

 * CMD_UPDATE_STADB.

 Peer type - AP vs. STA.  */

 Basic 802.11 capabilities from assoc resp.  */

 Set if peer supports 802.11n high throughput (HT).  */

 Valid if HT is supported.  */

 Legacy rate table. Intersection of our rates and peer rates.  */

 HT rate table. Intersection of our rates and peer rates.  */

 If set, interoperability mode, no proprietary extensions.  */

 See STADB_ACTION_TYPE */

 Peer MAC address */

 Peer info - valid during add/update.  */

 Peer Entry flags - used to define the type of the peer node */

/*

 * Interrupt handling.

/*

 * Core driver operations.

 Enable TX reclaim and RX tasklets.  */

 Enable interrupts */

 Disable interrupts */

 Stop finalize join worker */

 Stop TX reclaim and RX tasklets.  */

 Return all skbs to mac80211 */

	/*

	 * Reject interface creation if sniffer mode is active, as

	 * STA operation is mutually exclusive with hardware sniffer

	 * mode.  (Sniffer mode is only used on STA firmware.)

 we must load the ap fw to meet this request */

				/* we must load the sta fw to

				 * meet this request.

 Setup driver private area. */

 Set the mac address.  */

 Has ieee80211_restart_hw re-added the removed interfaces? */

 If some command is waiting for a response, clear it */

	/*

	 * This unlock will wake up the queues and

	 * also opens the command path for other

	 * commands

	/*

	 * No need to capture a beacon if we're no longer associated.

	/*

	 * Get the AP's legacy and MCS rates.

				/* Use AP firmware specific rate command.

		/*

		 * Finalize the join.  Tell rx handler to process

		 * next beacon from our BSSID.

		/*

		 * Use lowest supported basic rate for multicasts

		 * and management frames (such as probe responses --

		 * beacons will always go out at 1 Mb/s).

	/*

	 * Synthesize and return a command packet that programs the

	 * hardware multicast address filter.  At this point we don't

	 * know whether FIF_ALLMULTI is being requested, but if it is,

	 * we'll end up throwing this packet away and creating a new

	 * one in mwl8k_configure_filter().

	/*

	 * Hardware sniffer mode is mutually exclusive with STA

	 * operation, so refuse to enable sniffer mode if a STA

	 * interface is active.

	/*

	 * AP firmware doesn't allow fine-grained control over

	 * the receive filter.

	/*

	 * Enable hardware sniffer mode if FIF_CONTROL or

	 * FIF_OTHER_BSS is requested.

 Clear unsupported feature flags */

			/*

			 * Disable the BSS filter.

			/*

			 * Enable the BSS filter.

			 *

			 * If there is an active STA interface, use that

			 * interface's BSSID, otherwise use a dummy one

			 * (where the OUI part needs to be nonzero for

			 * the BSSID to be accepted by POST_SCAN).

	/*

	 * If FIF_ALLMULTI is being requested, throw away the command

	 * packet that ->prepare_multicast() built and replace it with

	 * a command packet that enables reception of all multicast

	 * packets.

		/* By the time we get here the hw queues may contain outgoing

		 * packets for this RA/TID that are not part of this BA

		 * session.  The hw will assign sequence numbers to these

		 * packets as they go out.  So if we query the hw for its next

		 * sequence number and use that for the SSN here, it may end up

		 * being wrong, which will lead to sequence number mismatch at

		 * the recipient.  To avoid this, we reset the sequence number

		 * to O for the first MPDU in this BA stream.

			/* This means that somebody outside this driver called

			 * ieee80211_start_tx_ba_session.  This is unexpected

			 * because we do our own rate control.  Just warn and

			 * move on.

 Release the lock before we do the time consuming stuff */

 Check if link is still valid */

			/* If HW restart is in progress mwl8k_post_cmd will

			 * return -EBUSY. Avoid retrying mwl8k_check_ba in

			 * such cases

			/*

			 * HW queues take time to be flushed, give them

			 * sufficient time

 clear all stats */

 clear all stats */

 Reset firmware and hardware */

 Ask userland hotplug daemon for the device firmware */

 Load firmware into hardware */

 Reclaim memory once firmware is successfully loaded */

		/* FW did not start successfully;

		 * lets try one more time

 initialize hw after successfully loading a firmware image */

	/* For the sta firmware, we need to know the dma addresses of tx queues

	 * before sending MWL8K_CMD_GET_HW_SPEC.  So we must initialize them

	 * prior to issuing this command.  But for the AP case, we learn the

	 * total number of queues from the result CMD_GET_HW_SPEC, so for this

	 * case we must initialize the tx queues after.

	/*

	 * When hw restart is requested,

	 * mac80211 will take care of clearing

	 * the ampdu streams, so do not clear

	 * the ampdu state here

	/*

	 * Temporarily enable interrupts.  Initial firmware host

	 * commands use interrupts and avoid polling.  Disable

	 * interrupts when done.

 Get config data, mac addrs etc */

 Turn radio off */

 Clear MAC address */

 Configure Antennas */

 Disable interrupts */

/*

 * invoke mwl8k_reload_firmware to change the firmware image after the device

 * has already been registered

	/*

	 * All the existing interfaces are re-added by the ieee80211_reconfig;

	 * which means driver should remove existing interfaces before calling

	 * ieee80211_restart_hw

	/*

	 * Extra headroom is the size of the required DMA header

	 * minus the size of the smallest 802.11 frame (CTS frame).

 Set rssi values to dBm */

	/*

	 * Ask mac80211 to not to trigger PS mode

	 * based on PM bit of incoming frames.

 Set default radio state and preamble */

 Finalize join worker */

 Handle watchdog ba events */

 To reload the firmware if it crashes */

 TX reclaim and RX tasklets.  */

 Power management cookie */

	/*

	 * If BAR0 is a 32 bit BAR, the register BAR will be BAR1.

	 * If BAR0 is a 64 bit BAR, the register BAR will be BAR2.

	/*

	 * Choose the initial fw image depending on user input.  If a second

	 * image is available, make it the alternative image that will be

	 * loaded if the first one fails.

 Remove TX reclaim and RX tasklets.  */

 Stop hardware */

 Return all skbs to mac80211 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	linux/drivers/net/wireless/libertas/if_spi.c

 *

 *	Driver for Marvell SPI WLAN cards.

 *

 *	Copyright 2008 Analog Devices Inc.

 *

 *	Authors:

 *	Andrey Yurovsky <andrey@cozybit.com>

 *	Colin McCabe <colin@cozybit.com>

 *

 *	Inspired by if_sdio.c, Copyright 2007-2008 Pierre Ossman

 The card ID and card revision, as reported by the hardware. */

 The last time that we initiated an SPU operation */

 Handles all SPI communication (except for FW load) */

	/* A buffer of incoming packets from libertas core.

	 * Since we can't sleep in hw_host_to_card, we have to buffer

 Protects cmd_packet_list and data_packet_list */

 True is card suspended */

/*

 * SPI Interface Unit Routines

 *

 * The SPU sits between the host and the WLAN module.

 * All communication with the firmware is through SPU transactions.

 *

 * First we have to put a SPU register name on the bus. Then we can

 * either read from or write to that register.

 *

		/* Unfortunately, the SPU requires a delay between successive

		 * transactions. If our last transaction was more than a jiffy

		 * ago, we have obviously already delayed enough.

/*

 * Write out a byte buffer to an SPI register,

 * using a series of 16-bit transfers.

	/* You must give an even number of bytes to the SPU, even if it

 write SPU register index */

	/*

	 * You must take an even number of bytes from the SPU, even if you

	 * don't care about the last one.

 write SPU register index */

 Clock in dummy cycles while the SPU fills the FIFO */

 Busy-wait while the SPU fills the FIFO */

 read in data */

 Read 16 bits from an SPI register */

/*

 * Read 32 bits from an SPI register.

 * The low 16 bits are read first.

/*

 * Keep reading 16 bits from an SPI register until you get the correct result.

 *

 * If mask = 0, the correct result is any non-zero number.

 * If mask != 0, the correct result is any number where

 * number & target_mask == target

 *

 * Returns -ETIMEDOUT if a second passes without the correct result.

/*

 * Read 16 bits from an SPI register until you receive a specific value.

 * Returns -ETIMEDOUT if a 4 tries pass without success.

	/*

	 * We can suppress a host interrupt by clearing the appropriate

	 * bit in the "host interrupt status mask" register

	/*

	 * If auto-interrupts are on, the completion of certain transactions

	 * will trigger an interrupt automatically. If auto-interrupts

	 * are off, we need to set the "Card Interrupt Cause" register to

	 * trigger a card interrupt.

 set bus mode */

 Check that we were able to read back what we just wrote. */

	/*

	 * We have to start up in timed delay mode so that we can safely

	 * read the Delay Read Register.

 If dummy clock delay mode has been requested, switch to it now */

/*

 * Firmware Loading

 Load helper firmware image */

		/*

		 * Scratch pad 1 should contain the number of bytes we

		 * want to download to the firmware

		/*

		 * Feed the data into the command read/write port reg

		 * in chunks of 64 bytes

 Interrupt the boot code */

	/*

	 * Once the helper / single stage firmware download is complete,

	 * write 0 to scratch pad 1 and interrupt the

	 * bootloader. This completes the helper download.

/*

 * Returns the length of the next packet the firmware expects us to send.

 * Sets crc_err if the previous transfer had a CRC error.

	/*

	 * wait until the host interrupt status register indicates

	 * that we are ready to download

 Ask the device how many bytes of firmware it wants. */

			/*

			 * If there are no more bytes left, we would normally

			 * expect to have terminated with len = 0

 Previous transfer failed. */

 Previous transfer succeeded. Advance counters. */

 Confirm firmware download */

/*

 * SPI Transfer Thread

 *

 * The SPI worker handles all SPI transfers, so there is no need for a lock.

 Move a command from the card to the host */

	/*

	 * We need a buffer big enough to handle whatever people send to

	 * hw_host_to_card

	/*

	 * It's just annoying if the buffer size isn't a multiple of 4, because

	 * then we might have len < IF_SPI_CMD_BUF_SIZE but

	 * ALIGN(len, 4) > IF_SPI_CMD_BUF_SIZE

 How many bytes are there to read? */

 Read the data from the WLAN module into our command buffer */

 Move data from the card to the host */

 How many bytes are there to read? */

 TODO: should we allocate a smaller skb if we have less data? */

 Read the data from the WLAN module into our skb... */

 pass the SKB to libertas */

 lbs_process_rxed_packet() consumes the skb */

 Move data or a command from the host to the card. */

 Write the data to the card */

 Inform the host about a card event */

 re-enable the card event interrupt */

 generate a card interrupt */

	/*

	 * Read the host interrupt status register to see what we

	 * can do.

	/*

	 * workaround: in PS mode, the card does not set the Command

	 * Download Ready bit, but it sets TX Download Ready.

		/*

		 * This means two things. First of all,

		 * if there was a previous command sent, the card has

		 * successfully received it.

		 * Secondly, it is now ready to download another

		 * command.

 Do we have any command packets from the host to send? */

 Do we have any data packets from the host to send? */

/*

 * Host to Card

 *

 * Called from Libertas to transfer some data to the WLAN device

 * We can't sleep here.

 Queue spi xfer work */

/*

 * Host Interrupts

 *

 * Service incoming interrupts from the WLAN device. We can't sleep here, so

 * don't try to talk on the SPI bus, just queue the SPI xfer work.

/*

 * SPI callbacks

 Check if we support this card */

 Init card ... */

 And resume it ... */

 Allocate card structure to represent this specific device */

 Initialize the SPI Interface Unit */

 Firmware load */

	/*

	 * Register our card with libertas.

	 * This will call alloc_etherdev.

 Initialize interrupt handling stuff. */

	/*

	 * Start the card.

	 * This will call register_netdev, and we'll start

	 * getting interrupts...

 successful exit */

 will call free_netdev */

 will call free_netdev */

 Schedule delayed work */

/*

 * Module functions

 SPDX-License-Identifier: GPL-2.0

/*

 * This file contains the handling of command

 * responses as well as events generated by firmware.

/**

 * lbs_mac_event_disconnected - handles disconnect event. It

 * reports disconnect to upper layer, clean tx/rx packets,

 * reset link state etc.

 *

 * @priv:	A pointer to struct lbs_private structure

 * @locally_generated: indicates disconnect was requested locally

 *		(usually by userspace)

 *

 * returns:	n/a

	/*

	 * Cisco AP sends EAP failure and de-auth in less than 0.5 ms.

	 * It causes problem in the Supplicant

 report disconnect to upper layer */

 Free Tx and Rx packets */

 make firmware to exit PS mode */

		/* 0x0004 means -EAGAIN. Drop the response, let it time out

 Now we got response from FW, cancel the command timer */

		/* struct cmd_ds_802_11_ps_mode also contains

		 * the header

			/*

			 * We should not re-try enter-ps command in

			 * ad-hoc mode. It takes place in

			 * lbs_execute_next_command().

				/*

				 * When Deauth Event received before Enter_PS command

				 * response, We need to wake up the firmware.

 If the command is not successful, cleanup and return failure */

		/*

		 * Handling errors here

 Clean up and Put current command back to cmdfreeq */

 handle unexpected PS SLEEP event */

 handle unexpected PS AWAKE event */

			/*

			 * wait for the command processing to finish

			 * before resuming sending

			 * priv->needtowakeup will be set to FALSE

			 * in lbs_ps_wakeup()

 Ignore spurious autostart events */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file contains the handling of RX in wlan driver.

/**

 * lbs_process_rxed_packet - processes received packet and forwards it

 * to kernel/upper layer

 *

 * @priv:	A pointer to &struct lbs_private

 * @skb:	A pointer to skb which includes the received packet

 * returns:	0 or -1

		/*

		 *  Replace the 803 header and rfc1042 header (llc/snap) with an

		 *    EthernetII header, keep the src/dst and snap_type (ethertype)

		 *

		 *  The firmware only passes up SNAP frames converting

		 *    all RX Data from 802.11 to 802.2/LLC/SNAP frames.

		 *

		 *  To create the Ethernet II, just move the src, dst address right

		 *    before the snap_type.

		/* Chop off the rxpd + the excess memory from the 802.2/llc/snap header

		 *   that was removed

 Chop off the rxpd */

	/* Chop off the leading header bytes so the skb points to the start of

	 *   either the reconstructed EthII frame or the 802.2/llc/snap frame

/**

 * convert_mv_rate_to_radiotap - converts Tx/Rx rates from Marvell WLAN format

 * (see Table 2 in Section 3.1) to IEEE80211_RADIOTAP_RATE units (500 Kb/s)

 *

 * @rate:	Input rate

 * returns:	Output Rate (0 if invalid)

   1 Mbps */

   2 Mbps */

 5.5 Mbps */

  11 Mbps */

 case 4: reserved */

   6 Mbps */

   9 Mbps */

  12 Mbps */

  18 Mbps */

  24 Mbps */

  36 Mbps */

  48 Mbps */

  54 Mbps */

/**

 * process_rxed_802_11_packet - processes a received 802.11 packet and forwards

 * it to kernel/upper layer

 *

 * @priv:	A pointer to &struct lbs_private

 * @skb:	A pointer to skb which includes the received packet

 * returns:	0 or -1

 lbs_deb_hex(LBS_DEB_RX, "RX Data: Before chop rxpd", skb->data, min(skb->len, 100)); */

 create the exported radio header */

 radiotap header */

 XXX must check radiotap_hdr.hdr.it_pad for pad */

 XXX must check no carryout */

 chop the rxpd */

 add space for the new radio header */

 SPDX-License-Identifier: GPL-2.0

/*

 * All 8388 parts have 16KiB EEPROM size at the time of writing.

 * In case that changes this needs fixing.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file contains the handling of command.

 * It prepares command and sends it to firmware when it is ready.

/**

 * lbs_cmd_copyback - Simple callback that copies response back into command

 *

 * @priv:	A pointer to &struct lbs_private structure

 * @extra:	A pointer to the original command structure for which

 *		'resp' is a response

 * @resp:	A pointer to the command response

 *

 * returns:	0 on success, error on failure

/**

 *  lbs_cmd_async_callback - Simple callback that ignores the result.

 *  Use this if you just want to send a command to the hardware, but don't

 *  care for the result.

 *

 *  @priv:	ignored

 *  @extra:	ignored

 *  @resp:	ignored

 *

 *  returns:	0 for success

/**

 *  is_command_allowed_in_ps - tests if a command is allowed in Power Save mode

 *

 *  @cmd:	the command ID

 *

 *  returns:	1 if allowed, 0 if not allowed

/**

 *  lbs_update_hw_spec - Updates the hardware details like MAC address

 *  and regulatory region

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *

 *  returns:	0 on success, error on failure

	/* The firmware release is in an interesting format: the patch

	/* Some firmware capabilities:

	 * CF card    firmware 5.0.16p0:   cap 0x00000303

	 * USB dongle firmware 5.110.17p2: cap 0x00000303

	/* Clamp region code to 8-bit since FW spec indicates that it should

	 * only ever be 8-bit, even though the field size is 16-bit.  Some firmware

	 * returns non-zero high 8 bits here.

	 *

	 * Firmware version 4.0.102 used in CF8381 has region code shifted.  We

	 * need to check for this problem and handle it properly.

 use the region code to search for the index */

 if it's unidentified region code, use the default (USA) */

	/*

	 * Certain firmware versions do not support EHS_REMOVE_WAKEUP command

	 * and the card will return a failure.  Since we need to be

	 * able to reset the mask, in those cases we set a 0 mask instead.

/**

 *  lbs_set_ps_mode - Sets the Power Save mode

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *  @cmd_action: The Power Save operation (PS_MODE_ACTION_ENTER_PS or

 *                         PS_MODE_ACTION_EXIT_PS)

 *  @block:	Whether to block on a response or not

 *

 *  returns:	0 on success, error on failure

 Default DTIM multiple */

		/* We don't handle CONFIRM_SLEEP here because it needs to

		 * be fastpathed to the firmware.

/**

 *  lbs_set_snmp_mib - Set an SNMP MIB value

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *  @oid:	The OID to set in the firmware

 *  @val:	Value to set the OID to

 *

 *  returns: 	   	0 on success, error on failure

/**

 *  lbs_get_snmp_mib - Get an SNMP MIB value

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *  @oid:	The OID to retrieve from the firmware

 *  @out_val:	Location for the returned value

 *

 *  returns:	0 on success, error on failure

/**

 *  lbs_get_tx_power - Get the min, max, and current TX power

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *  @curlevel:	Current power level in dBm

 *  @minlevel:	Minimum supported power level in dBm (optional)

 *  @maxlevel:	Maximum supported power level in dBm (optional)

 *

 *  returns:	0 on success, error on failure

/**

 *  lbs_set_tx_power - Set the TX power

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *  @dbm:	The desired power level in dBm

 *

 *  returns: 	   	0 on success, error on failure

/**

 *  lbs_set_monitor_mode - Enable or disable monitor mode

 *  (only implemented on OLPC usb8388 FW)

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *  @enable:	1 to enable monitor mode, 0 to disable

 *

 *  returns:	0 on success, error on failure

/**

 *  lbs_get_channel - Get the radio channel

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *

 *  returns:	The channel on success, error on failure

 the channel in f/w could be out of sync; get the current channel */

/**

 *  lbs_set_channel - Set the radio channel

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *  @channel:	The desired channel, or 0 to clear a locked channel

 *

 *  returns:	0 on success, error on failure

/**

 * lbs_get_rssi - Get current RSSI and noise floor

 *

 * @priv:	A pointer to &struct lbs_private structure

 * @rssi:	On successful return, signal level in mBm

 * @nf:		On successful return, Noise floor

 *

 * returns:	The channel on success, error on failure

 Average SNR over last 8 beacons */

/**

 *  lbs_set_11d_domain_info - Send regulatory and 802.11d domain information

 *  to the firmware

 *

 *  @priv:	pointer to &struct lbs_private

 *

 *  returns:	0 on success, error code on failure

 Set country code */

	/* Now set up the channel triplets; firmware is somewhat picky here

	 * and doesn't validate channel numbers and spans; hence it would

	 * interpret a triplet of (36, 4, 20) as channels 36, 37, 38, 39.  Since

	 * the last 3 aren't valid channels, the driver is responsible for

	 * splitting that up into 4 triplet pairs of (36, 1, 20) + (40, 1, 20)

	 * etc.

 Consolidate adjacent channels */

 Add this triplet */

 Add last triplet */

 Set command header sizes */

/**

 *  lbs_get_reg - Read a MAC, Baseband, or RF register

 *

 *  @priv:	pointer to &struct lbs_private

 *  @reg:	register command, one of CMD_MAC_REG_ACCESS,

 *		CMD_BBP_REG_ACCESS, or CMD_RF_REG_ACCESS

 *  @offset:	byte offset of the register to get

 *  @value:	on success, the value of the register at 'offset'

 *

 *  returns:	0 on success, error code on failure

/**

 *  lbs_set_reg - Write a MAC, Baseband, or RF register

 *

 *  @priv:	pointer to &struct lbs_private

 *  @reg:	register command, one of CMD_MAC_REG_ACCESS,

 *		CMD_BBP_REG_ACCESS, or CMD_RF_REG_ACCESS

 *  @offset:	byte offset of the register to set

 *  @value:	the value to write to the register at 'offset'

 *

 *  returns:	0 on success, error code on failure

 Exit_PS command needs to be queued in the header always. */

 These commands take longer */

 Reset dnld state machine, report failure */

 Setup the timer after transmit command */

/*

 *  This function inserts command node to cmdfreeq

 *  after cleans it. Requires priv->driver_lock held.

	/*

	 * Normally, commands are removed from cmdpendingq before being

	 * submitted. However, we can arrive here on alternative codepaths

	 * where the command is still pending. Make sure the command really

	 * isn't part of a list at this point.

 Only v8 and below support setting the preamble */

/**

 *  lbs_allocate_cmd_buffer - allocates the command buffer and links

 *  it to command free queue

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *

 *  returns:	0 for success or -1 on error

 Allocate and initialize the command array */

 Allocate and initialize each command buffer in the command array */

/**

 *  lbs_free_cmd_buffer - free the command buffer

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *

 *  returns:	0 for success

 need to check if cmd array is allocated or not */

 Release shared memory buffers */

 Release cmd_ctrl_node */

/**

 *  lbs_get_free_cmd_node - gets a free command node if available in

 *  command free queue

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *

 *  returns:	A pointer to &cmd_ctrl_node structure on success

 *		or %NULL on error

/**

 *  lbs_execute_next_command - execute next command in command

 *  pending queue. Will put firmware back to PS mode if applicable.

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *

 *  returns:	0 on success or -1 on error

	/* Debug group is LBS_DEB_THREAD and not LBS_DEB_HOST, because the

	 * only caller to us is lbs_thread() and we get even when a

			/*

			 * 1. Non-PS command:

			 * Queue it. set needtowakeup to TRUE if current state

			 * is SLEEP, otherwise call send EXIT_PS.

			 * 2. PS command but not EXIT_PS:

			 * Ignore it.

			 * 3. PS command EXIT_PS:

			 * Set needtowakeup to TRUE if current state is SLEEP,

			 * otherwise send this command down to firmware

			 * immediately.

				/*  Prepare to send Exit PS,

					/* w/ new scheme, it will not reach here.

				/*

				 * PS command. Ignore it if it is not Exit_PS.

				 * otherwise send it down immediately.

		/*

		 * check if in power save mode, if yes, put the device back

		 * to PS mode

 We don't get a response on the sleep-confirmation */

 If nothing to do, go back to sleep (?) */

/**

 * lbs_ps_confirm_sleep - checks condition and prepares to

 * send sleep confirm command to firmware if ok

 *

 * @priv:	A pointer to &struct lbs_private structure

 *

 * returns:	n/a

 In-progress command? */

 Pending events or command responses? */

/**

 * lbs_set_tpc_cfg - Configures the transmission power control functionality

 *

 * @priv:	A pointer to &struct lbs_private structure

 * @enable:	Transmission power control enable

 * @p0:		Power level when link quality is good (dBm).

 * @p1:		Power level when link quality is fair (dBm).

 * @p2:		Power level when link quality is poor (dBm).

 * @usesnr:	Use Signal to Noise Ratio in TPC

 *

 * returns:	0 on success

/**

 * lbs_set_power_adapt_cfg - Configures the power adaptation settings

 *

 * @priv:	A pointer to &struct lbs_private structure

 * @enable:	Power adaptation enable

 * @p0:		Power level for 1, 2, 5.5 and 11 Mbps (dBm).

 * @p1:		Power level for 6, 9, 12, 18, 22, 24 and 36 Mbps (dBm).

 * @p2:		Power level for 48 and 54 Mbps (dBm).

 *

 * returns:	0 on Success

	/* No commands are allowed in Deep Sleep until we toggle the GPIO

	 * to wake up the card and it has signaled that it's ready.

 Wake up main thread to execute next command */

 Copy the incoming command to the buffer */

 Set command, clean result, move to buffer */

	/*

	 * Be careful with signals here. A signal may be received as the system

	 * goes into suspend or resume. We do not want this to interrupt the

	 * command, so we perform an uninterruptible sleep.

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Driver for the Marvell 8385 based compact flash WLAN cards.



  (C) 2007 by Holger Schurig <hs4233@mail.mn-solutions.de>





*******************************************************************/

 Module stuff                                                     */

*******************************************************************/

*******************************************************************/

 Data structures                                                  */

*******************************************************************/

*******************************************************************/

 Hardware access                                                  */

*******************************************************************/

/* This define enables wrapper functions which allow you

   to dump all register accesses. You normally won't this,

 #define DEBUG_IO */

 This way the compiler optimizes the printk's away */

/*

 * I know that polling/delaying is frowned upon. However, this procedure

 * with polling is needed while downloading the firmware. At this stage,

 * the hardware does unfortunately not create any interrupts.

 *

 * Fortunately, this function is never used once the firmware is in

 * the card. :-)

 *

 * As a reference, see the "Firmware Specification v5.1", page 18

 * and 19. I did not follow their suggested timing to the word,

 * but this works nice & fast anyway.

/*

 * First the bitmasks for the host/card interrupt/status registers:

/*

 * It's not really clear to me what the host status register is for. It

 * needs to be set almost in union with "host int cause". The following

 * bits from above are used:

 *

 *   IF_CS_BIT_TX         driver downloaded a data packet

 *   IF_CS_BIT_RX         driver got a data packet

 *   IF_CS_BIT_COMMAND    driver downloaded a command

 *   IF_CS_BIT_RESP       not used (has some meaning with powerdown)

 *   IF_CS_BIT_EVENT      driver read a host event

/*

 * With the host int cause register can the host (that is, Linux) cause

 * an interrupt in the firmware, to tell the firmware about those events:

 *

 *   IF_CS_BIT_TX         a data packet has been downloaded

 *   IF_CS_BIT_RX         a received data packet has retrieved

 *   IF_CS_BIT_COMMAND    a firmware block or a command has been downloaded

 *   IF_CS_BIT_RESP       not used (has some meaning with powerdown)

 *   IF_CS_BIT_EVENT      a host event (link lost etc) has been retrieved

/*

 * The host int mask register is used to enable/disable interrupt.  However,

 * I have the suspicion that disabled interrupts are lost.

/*

 * Used to send or receive data packets:

/*

 * Used to send commands (and to send firmware block) and to

 * receive command responses:

/*

 * The card status registers shows what the card/firmware actually

 * accepts:

 *

 *   IF_CS_BIT_TX        you may send a data packet

 *   IF_CS_BIT_RX        you may retrieve a data packet

 *   IF_CS_BIT_COMMAND   you may send a command

 *   IF_CS_BIT_RESP      you may retrieve a command response

 *   IF_CS_BIT_EVENT     the card has a event for use (link lost, snr low etc)

 *

 * When reading this register several times, you will get back the same

 * results --- with one exception: the IF_CS_BIT_EVENT clear itself

 * automatically.

 *

 * Not that we don't rely on BIT_RX,_BIT_RESP or BIT_EVENT because

 * we handle this via the card int cause register.

/*

 * The card int cause register is used by the card/firmware to notify us

 * about the following events:

 *

 *   IF_CS_BIT_TX        a data packet has successfully been sentx

 *   IF_CS_BIT_RX        a data packet has been received and can be retrieved

 *   IF_CS_BIT_COMMAND   not used

 *   IF_CS_BIT_RESP      the firmware has a command response for us

 *   IF_CS_BIT_EVENT     the card has a event for use (link lost, snr low etc)

/*

 * This is used to for handshaking with the card's bootloader/helper image

 * to synchronize downloading of firmware blocks.

/*

 * The scratch register tells us ...

 *

 * IF_CS_SCRATCH_BOOT_OK     the bootloader runs

 * IF_CS_SCRATCH_HELPER_OK   the helper firmware already runs

/*

 * Used to detect ancient chips:

/*

 * Used to detect other cards than CF8385 since their revisions of silicon

 * doesn't match those from CF8385, eg. CF8381 B3 works with this driver.

/*

 * FIXME: just use the 'driver_info' field of 'struct pcmcia_device_id' when

 * that gets fixed.  Currently there's no way to access it from the probe hook.

 NOTE: keep in sync with if_cs_ids */

*******************************************************************/

 I/O and interrupt handling                                       */

*******************************************************************/

/*

 * Called from if_cs_host_to_card to send a command to the hardware

 Is hardware ready? */

 Are we supposed to transfer an odd amount of bytes? */

	/* "Assert the download over interrupt command in the Host

	/* "Assert the download over interrupt command in the Card

/*

 * Called from if_cs_host_to_card to send a data to the hardware

 write even number of bytes, then odd byte if necessary */

/*

 * Get the command result out of the card.

 is hardware ready? */

 read even number of bytes, then odd byte if necessary */

	/* This is a workaround for a firmware that reports too much

 Clear this flag again */

 16 byte align */

 read even number of bytes, then odd byte if necessary */

 Ask card interrupt cause register if there is something for us */

 Not for us */

 Read in junk, the card has probably been removed */

 Clear interrupt cause */

*******************************************************************/

 Firmware                                                         */

*******************************************************************/

/*

 * Tries to program the helper firmware.

 *

 * Return 0 on success

	/*

	 * This is the only place where an unaligned register access happens on

	 * the CF8305 card, therefore for the sake of speed of the driver, we do

	 * the alignment correction here.

	/* "If the value is 0x5a, the firmware is already

	 * downloaded successfully"

 "If the value is != 00, it is invalid value of register */

 "Set the 5 bytes of the helper image to 0" */

 Not needed, this contains an ARM branch instruction */

 "the number of bytes to send is 256" */

		/*

		 * "write the number of bytes to be sent to the I/O Command

		 * write length register"

 "write this to I/O Command port register as 16 bit writes */

		/*

		 * "Assert the download over interrupt command in the Host

		 * status register"

		/*

		 * "Assert the download over interrupt command in the Card

		 * interrupt case register"

		/*

		 * "The host polls the Card Status register ... for 50 ms before

		 * declaring a failure"

 Load the firmware */

 Now actually get the IRQ */

	/*

	 * Clear any interrupt cause that happened while sending

	 * firmware/initializing card

 And finally bring the card up */

*******************************************************************/

 Callback functions for libertas.ko                               */

*******************************************************************/

 Send commands or data packets to the card */

 This reserves IO space but doesn't actually enable it */

	/*

	 * Allocate an interrupt line.  Note that this does not assign

	 * a handler to the interrupt, unless the 'Handler' member of

	 * the irq structure is initialized.

 Initialize io access */

 Finally, report what we've done */

	/*

	 * Most of the libertas cards can do unaligned register access, but some

	 * weird ones cannot. That's especially true for the CF8305 card.

 Check if we have a current silicon */

 Make this card known to the libertas driver */

 Set up fields in lbs_private */

 Get firmware */

*******************************************************************/

 Module initialization                                            */

*******************************************************************/

 NOTE: keep in sync with get_model() */

 SPDX-License-Identifier: GPL-2.0

/*

 * When calling CMD_802_11_SUBSCRIBE_EVENT with CMD_ACT_GET, me might

 * get a bunch of vendor-specific TLVs (a.k.a. IEs) back from the

 * firmware. Here's an example:

 *	04 01 02 00 00 00 05 01 02 00 00 00 06 01 02 00

 *	00 00 07 01 02 00 3c 00 00 00 00 00 00 00 03 03

 *	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

 *

 * The 04 01 is the TLV type (here TLV_TYPE_RSSI_LOW), 02 00 is the length,

 * 00 00 are the data bytes of this TLV. For this TLV, their meaning is

 * defined in mrvlietypes_thresholds

 *

 * This function searches in this TLV data chunk for a given TLV type

 * and returns a pointer to the first data byte of the TLV, or to NULL

 * if the TLV hasn't been found.

 Now everything is set and we can send stuff down to the firmware */

 The command header, the action, the event mask, and one TLV */

 debug entry */

/* To debug any member of struct lbs_private, simply add one line here.

/**

 * lbs_debugfs_read - proc read function

 *

 * @file:	file to read

 * @userbuf:	pointer to buffer

 * @count:	number of bytes to read

 * @ppos:	read data starting position

 *

 * returns:	amount of data read or negative error code

/**

 * lbs_debugfs_write - proc write function

 *

 * @f:		file pointer

 * @buf:	pointer to data buffer

 * @cnt:	data number to write

 * @ppos:	file position

 *

 * returns:	amount of data written

/**

 * lbs_debug_init - create debug proc file

 *

 * @priv:	pointer to &struct lbs_private

 *

 * returns:	N/A

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file contains functions used in USB interface module.

 table of firmware file names */

 Enter the device signature inside */

 Terminating entry */

/**

 * if_usb_write_bulk_callback - callback function to handle the status

 * of the URB

 * @urb:	pointer to &urb structure

 * returns:	N/A

 handle the transmission complete validations */

		/* Boot commands such as UPDATE_FW and UPDATE_BOOT2 are not

		 * passed up to the lbs level.

 print the failure status number for debug */

/**

 * if_usb_free - free tx/rx urb, skb and rx buffer

 * @cardp:	pointer to &if_usb_card

 * returns:	N/A

 Unlink tx & rx urb */

 Wake via GPIO2... */

 ... after 20ms    */

			/* The versions which boot up this way don't seem to

/**

 * if_usb_probe - sets the configuration values

 * @intf:	&usb_interface pointer

 * @id:	pointer to usb_device_id

 * returns:	0 on success, error code on failure

/**

 * if_usb_disconnect - free resource and cleanup

 * @intf:	USB interface structure

 * returns:	N/A

 Unlink and free urb */

/**

 * if_usb_send_fw_pkt - download FW

 * @cardp:	pointer to &struct if_usb_card

 * returns:	0

	/* If we got a CRC failure on the last block, back

	/* struct fwdata (which we sent to the card) has an

	   extra __le32 field in between the header and the data,

	   which is not in the struct fwheader in the actual

/**

 *  usb_tx_block - transfer the data to the device

 *  @cardp: 	pointer to &struct if_usb_card

 *  @payload:	pointer to payload data

 *  @nb:	data length

 *  returns:	0 for success or negative error code

 check if device is removed */

 Fill the receive configuration URB and initialise the Rx call back */

 Give device 5s to either write firmware to its RAM or eeprom */

/**

 *  if_usb_receive - read the packet into the upload buffer,

 *  wake up the main thread and initialise the Rx callack

 *

 *  @urb:	pointer to &struct urb

 *  returns:	N/A

 Event handling */

 Icky undocumented magic special case */

/**

 *  if_usb_host_to_card - downloads data to FW

 *  @priv:	pointer to &struct lbs_private structure

 *  @type:	type of data

 *  @payload:	pointer to data buffer

 *  @nb:	number of bytes

 *  returns:	0 for success or negative error code

/**

 *  if_usb_issue_boot_command - issues Boot command to the Boot2 code

 *  @cardp:	pointer to &if_usb_card

 *  @ivalue:	1:Boot from FW by USB-Download

 *		2:Boot from FW in EEPROM

 *  returns:	0 for success or negative error code

 Prepare command */

 Issue command */

/**

 *  check_fwfile_format - check the validity of Boot2/FW image

 *

 *  @data:	pointer to image

 *  @totlen:	image length

 *  returns:     0 (good) or 1 (failure)

 Cancel any pending usb business */

 wait for command response */

 Return to normal operation */

 Send the first firmware packet... */

 ... and wait for the process to complete */

	/*

	 * EHS_REMOVE_WAKEUP is not supported on all versions of the firmware.

 Unlink tx & rx urb */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Firmware loading and handling functions.

 User must free helper/mainfw */

 Failed to find firmware: try next table entry */

 Firmware found! */

 Failed to find firmware: try next table entry */

 Firmware found! */

 No main firmware needed for this helper --> success! */

 End of table hit. */

/**

 *  lbs_get_firmware_async - Retrieves firmware asynchronously. Can load

 *  either a helper firmware and a main firmware (2-stage), or just the helper.

 *

 *  @priv:      Pointer to lbs_private instance

 *  @device:   	A pointer to &device structure

 *  @card_model: Bus-specific card model ID used to filter firmware table

 *		elements

 *  @fw_table:	Table of firmware file names and device model numbers

 *		terminated by an entry with a NULL helper name

 *  @callback:	User callback to invoke when firmware load succeeds or fails.

/**

 *  lbs_get_firmware - Retrieves two-stage firmware

 *

 *  @dev:     	A pointer to &device structure

 *  @card_model: Bus-specific card model ID used to filter firmware table

 *		elements

 *  @fw_table:	Table of firmware file names and device model numbers

 *		terminated by an entry with a NULL helper name

 *  @helper:	On success, the helper firmware; caller must free

 *  @mainfw:	On success, the main firmware; caller must free

 *

 * Deprecated: use lbs_get_firmware_async() instead.

 *

 *  returns:		0 on success, non-zero on failure

 Search for firmware to use from the table. */

			/* If the device has one-stage firmware (ie cf8305) and

			 * we've got it then we don't need to bother with the

			 * main firmware.

				/* Clear the helper to ensure we don't have

				 * mismatched firmware pairs.

 Failed */

 SPDX-License-Identifier: GPL-2.0

/*

 * Implement cfg80211 ("iw") support.

 *

 * Copyright (C) 2009 M&N Solutions GmbH, 61191 Rosbach, Germany

 * Holger Schurig <hs4233@mail.mn-solutions.de>

 *

 Table 6 in section 3.2.1.1 */

 Time to stay on the channel */

/***************************************************************************

 * Misc utility functions

 *

 * TLVs are Marvell specific. They are very similar to IEs, they have the

 * same structure: type, length, data*. The only difference: for IEs, the

 * type and length are u8, but for TLVs they're __le16.

/*

 * Convert NL80211's auth_type to the one from Libertas, see chapter 5.9.1

 * in the firmware spec

 silence compiler */

/*

 * Various firmware commands need the list of supported rates, but with

 * the hight-bit set for basic rates

/***************************************************************************

 * TLV utility functions

 *

 * TLVs are Marvell specific. They are very similar to IEs, they have the

 * same structure: type, length, data*. The only difference: for IEs, the

 * type and length are u8, but for TLVs they're __le16.

/*

 * Add ssid TLV

	/*

	 * TLV-ID SSID  00 00

	 * length       06 00

	 * ssid         4d 4e 54 45 53 54

/*

 * Add channel list TLV (section 8.4.2)

 *

 * Actual channel data comes from priv->wdev->wiphy->channels.

	/*

	 * TLV-ID CHANLIST  01 01

	 * length           0e 00

	 * channel          00 01 00 00 00 64 00

	 *   radio type     00

	 *   channel           01

	 *   scan type            00

	 *   min scan time           00 00

	 *   max scan time                 64 00

	 * channel 2        00 02 00 00 00 64 00

	 *

	/* lbs_deb_scan("scan: channels %d to %d\n", priv->scan_channel,

/*

 * Add rates TLV

 *

 * The rates are in lbs_bg_rates[], but for the 802.11b

 * rates the high bit is set. We add this TLV only because

 * there's a firmware which otherwise doesn't report all

 * APs in range.

 Adds a TLV with all rates the hardware supports */

	/*

	 * TLV-ID RATES  01 00

	 * length        0e 00

	 * rates         82 84 8b 96 0c 12 18 24 30 48 60 6c

 Add common rates from a TLV and return the new end of the TLV */

 Advance past IE header */

/*

 * Adds a TLV with all rates the hardware *and* BSS supports.

	/*

	 * 01 00                   TLV_TYPE_RATES

	 * 04 00                   len

	 * 82 84 8b 96             rates

 Add basic rates */

 Add extended rates, if any */

 Fallback: add basic 802.11b rates */

/*

 * Add auth type TLV.

 *

 * This is only needed for newer firmware (V9 and up).

	/*

	 * 1f 01  TLV_TYPE_AUTH_TYPE

	 * 01 00  len

	 * 01     auth type

/*

 * Add channel (phy ds) TLV

	/*

	 * 03 00  TLV_TYPE_PHY_DS

	 * 01 00  len

	 * 06     channel

/*

 * Add (empty) CF param TLV of the form:

	/*

	 * 04 00  TLV_TYPE_CF

	 * 06 00  len

	 * 00     cfpcnt

	 * 00     cfpperiod

	 * 00 00  cfpmaxduration

	 * 00 00  cfpdurationremaining

/*

 * Add WPA TLV

 TODO: I guessed the size */)

	/*

	 * We need just convert an IE to an TLV. IEs use u8 for the header,

	 *   u8      type

	 *   u8      len

	 *   u8[]    data

	 * but TLVs use __le16 instead:

	 *   __le16  type

	 *   __le16  len

	 *   u8[]    data

 the TLV is two bytes larger than the IE */

/*

 * Set Channel

/*

 * Scanning

/*

 * When scanning, the firmware doesn't send a nul packet with the power-safe

 * bit to the AP. So we cannot stay away from our current channel too long,

 * otherwise we loose data. So take a "nap" while scanning every other

 * while.

/*

 * When the firmware reports back a scan-result, it gives us an "u8 rssi",

 * which isn't really an RSSI, as it becomes larger when moving away from

 * the AP. Anyway, we need to convert that into mBm.

	/*

	 * The general layout of the scan response is described in chapter

	 * 5.7.1. Basically we have a common part, then any number of BSS

	 * descriptor sections. Finally we have section with the same number

	 * of TSFs.

	 *

	 * cmd_ds_802_11_scan_rsp

	 *   cmd_header

	 *   pos_size

	 *   nr_sets

	 *   bssdesc 1

	 *     bssid

	 *     rssi

	 *     timestamp

	 *     intvl

	 *     capa

	 *     IEs

	 *   bssdesc 2

	 *   bssdesc n

	 *   MrvlIEtypes_TsfFimestamp_t

	 *     TSF for BSS 1

	 *     TSF for BSS 2

	 *     TSF for BSS n

 Validity check: we expect a Marvell-Local TLV */

	/*

	 * Validity check: the TLV holds TSF values with 8 bytes each, so

	 * the size in the TLV must match the nr_sets value

 BSSID */

 RSSI */

 Packet time stamp */

 Beacon interval */

 Capabilities */

 To find out the channel, we must parse the IEs */

		/*

		 * 6+1+8+2+2: size of BSSID, RSSI, time stamp, beacon

		 * interval, capabilities

 No channel, no luck */

/*

 * Our scan command contains a TLV, consting of a SSID TLV, a channel list

 * TLV and a rates TLV. Determine the maximum size of them:

/*

 * Assumes priv->scan_req is initialized and valid

 * Assumes priv->scan_channel is initialized

 pointer into our current, growing TLV storage area */

 prepare fixed part of scan command */

 stop network while we're away from our main channel */

 prepare fixed part of scan command */

 add SSID TLV */

 add channel TLVs */

 add rates TLV */

 This is the final data we are about to send */

 Mark scan done */

 Restart network */

 Wake up anything waiting on scan completion */

/*

 * Clean up priv->scan_req.  Should be used to handle the allocation details.

 old scan request not yet processed */

/*

 * Events

/*

 * Connect/disconnect

/*

 * This removes all WEP keys

/*

 * Set WEP keys

	/*

	 * command         13 00

	 * size            50 00

	 * sequence        xx xx

	 * result          00 00

	 * action          02 00     ACT_ADD

	 * transmit key    00 00

	 * type for key 1  01        WEP40

	 * type for key 2  00

	 * type for key 3  00

	 * type for key 4  00

	 * key 1           39 39 39 39 39 00 00 00

	 *                 00 00 00 00 00 00 00 00

	 * key 2           00 00 00 00 00 00 00 00

	 *                 00 00 00 00 00 00 00 00

	 * key 3           00 00 00 00 00 00 00 00

	 *                 00 00 00 00 00 00 00 00

	 * key 4           00 00 00 00 00 00 00 00

 Only set wep keys if we have at least one of them */

 Otherwise remove all wep keys */

/*

 * Enable/Disable RSN status

	/*

	 * cmd       2f 00

	 * size      0c 00

	 * sequence  xx xx

	 * result    00 00

	 * action    01 00    ACT_SET

	 * enable    01 00

/*

 * Set WPA/WPA key material

/*

 * like "struct cmd_ds_802_11_key_material", but with cmd_header. Once we

 * get rid of WEXT, this should go into host.h

	/*

	 * Example for WPA (TKIP):

	 *

	 * cmd       5e 00

	 * size      34 00

	 * sequence  xx xx

	 * result    00 00

	 * action    01 00

	 * TLV type  00 01    key param

	 * length    00 26

	 * key type  01 00    TKIP

	 * key info  06 00    UNICAST | ENABLED

	 * key len   20 00

	 * key       32 bytes

/*

 * Sets the auth type (open, shared, etc) in the firmware. That

 * we use CMD_802_11_AUTHENTICATE is misleading, this firmware

 * command doesn't send an authentication frame at all, it just

 * stores the auth_type.

	/*

	 * cmd        11 00

	 * size       19 00

	 * sequence   xx xx

	 * result     00 00

	 * BSS id     00 13 19 80 da 30

	 * auth type  00

	 * reserved   00 00 00 00 00 00 00 00 00 00

 convert auth_type */

/*

 * Create association request

 cmd_ds_802_11_associate.iebuf */ \

	/*

	 * cmd              50 00

	 * length           34 00

	 * sequence         xx xx

	 * result           00 00

	 * BSS id           00 13 19 80 da 30

	 * capabilities     11 00

	 * listen interval  0a 00

	 * beacon interval  00 00

	 * DTIM period      00

	 * TLVs             xx   (up to 512 bytes)

 Fill in static fields */

 add SSID TLV */

 add DS param TLV */

 add (empty) CF param TLV */

 add rates TLV */

 skip Marvell IE header */

 add auth type TLV */

 add WPA/WPA2 TLV */

 store for later use */

 generate connect message to cfg80211 */

 recast for easier field access */

	/* Older FW versions map the IEEE 802.11 Status Code in the association

	 * response to the following values returned in resp->statuscode:

	 *

	 *    IEEE Status Code                Marvell Status Code

	 *    0                       ->      0x0000 ASSOC_RESULT_SUCCESS

	 *    13                      ->      0x0004 ASSOC_RESULT_AUTH_REFUSED

	 *    14                      ->      0x0004 ASSOC_RESULT_AUTH_REFUSED

	 *    15                      ->      0x0004 ASSOC_RESULT_AUTH_REFUSED

	 *    16                      ->      0x0004 ASSOC_RESULT_AUTH_REFUSED

	 *    others                  ->      0x0003 ASSOC_RESULT_REFUSED

	 *

	 * Other response codes:

	 *    0x0001 -> ASSOC_RESULT_INVALID_PARAMETERS (unused)

	 *    0x0002 -> ASSOC_RESULT_TIMEOUT (internal timer expired waiting for

	 *                                    association response from the AP)

			/* v5 OLPC firmware does return the AP status code if

			 * it's not one of the values above.  Let that through.

 TODO: get rid of priv->connect_status */

 SSIDs come after channels */

 Scan all available channels */

 ignore disabled channels */

 Set real number of channels specified in creq->channels[] */

 Scan for the SSID we're going to connect to */

 No channels found... */

		/*

		 * Scan for the requested network after waiting for existing

		 * scans to finish.

 Find the BSS we want using available scan results */

 As this is a new connection, clear locally stored WEP keys */

 set/remove WEP keys */

 Store provided WEP keys in priv-> */

 Set WEP keys and WEP mode */

 No RSN mode for WEP */

 there's no WLAN_CIPHER_SUITE_NONE definition */

		/*

		 * If we don't have no WEP, no WPA and no WPA2,

		 * we remove all keys like in the WPA/WPA2 setup,

		 * we just don't set RSN.

		 *

		 * Therefore: fall-through

 Remove WEP keys and WEP mode */

 clear the WPA/WPA2 keys */

 doesn't matter */

 doesn't matter */

 RSN mode for WPA/WPA2 */

 Do the actual association */

 Mildly ugly to use a locally store my own BSSID ... */

 store for lbs_cfg_ret_disconnect() */

 actually compare if something has changed ... */

	/*

	 * I think can keep this a NO-OP, because:



	 * - we clear all keys whenever we do lbs_cfg_connect() anyway

	 * - neither "iw" nor "wpa_supplicant" won't call this during

	 *   an ongoing connection

	 * - TODO: but I have to check if this is still true when

	 *   I set the AP to periodic re-keying

	 * - we've not kzallec() something when we've added a key at

	 *   lbs_cfg_connect() or lbs_cfg_add_key().

	 *

	 * This causes lbs_cfg_del_key() only called at disconnect time,

	 * where we'd just waste time deleting a key that is not going

	 * to be used anyway.

/*

 * Get station

 Get current RSSI */

 Convert priv->cur_rate from hw_value to NL80211 value */

/*

 * Change interface

/*

 * IBSS (Ad-Hoc)

/*

 * The firmware needs the following bits masked out of the beacon-derived

 * capability field when associating/joining to a BSS:

 *  9 (QoS), 11 (APSD), 12 (unused), 14 (unused), 15 (unused)

 ssid */

 basic rates */

 DS parameter */

 atim */

 extended rates */

	/*

	 * For cfg80211_inform_bss, we'll need a fake IE, as we can't get

	 * the real IE from the firmware. So we fabricate a fake IE based on

	 * what the firmware actually sends (sniffed with wireshark).

 Fake SSID IE */

 Fake supported basic rates IE */

 Fake DS channel IE */

 Fake IBSS params IE */

 ATIM=0 */

	/* Fake extended rates IE, TODO: don't add this for 802.11b only,

 TODO: consider doing this at MACREG_INT_CODE_LINK_SENSED time */

 TODO: set preamble based on scan result */

	/*

	 * Example CMD_802_11_AD_HOC_JOIN command:

	 *

	 * command         2c 00         CMD_802_11_AD_HOC_JOIN

	 * size            65 00

	 * sequence        xx xx

	 * result          00 00

	 * bssid           02 27 27 97 2f 96

	 * ssid            49 42 53 53 00 00 00 00

	 *                 00 00 00 00 00 00 00 00

	 *                 00 00 00 00 00 00 00 00

	 *                 00 00 00 00 00 00 00 00

	 * type            02            CMD_BSS_TYPE_IBSS

	 * beacon period   64 00

	 * dtim period     00

	 * timestamp       00 00 00 00 00 00 00 00

	 * localtime       00 00 00 00 00 00 00 00

	 * IE DS           03

	 * IE DS len       01

	 * IE DS channel   01

	 * reserveed       00 00 00 00

	 * IE IBSS         06

	 * IE IBSS len     02

	 * IE IBSS atim    00 00

	 * reserved        00 00 00 00

	 * capability      02 00

	 * rates           82 84 8b 96 0c 12 18 24 30 48 60 6c 00

	 * fail timeout    ff 00

	 * probe delay     00 00

	/* set rates to the intersection of our rates and the rates in the

 Only v8 and below support setting this */

	/*

	 * This is a sample response to CMD_802_11_AD_HOC_JOIN:

	 *

	 * response        2c 80

	 * size            09 00

	 * sequence        xx xx

	 * result          00 00

	 * reserved        00

	/*

	 * Example CMD_802_11_AD_HOC_START command:

	 *

	 * command         2b 00         CMD_802_11_AD_HOC_START

	 * size            b1 00

	 * sequence        xx xx

	 * result          00 00

	 * ssid            54 45 53 54 00 00 00 00

	 *                 00 00 00 00 00 00 00 00

	 *                 00 00 00 00 00 00 00 00

	 *                 00 00 00 00 00 00 00 00

	 * bss type        02

	 * beacon period   64 00

	 * dtim period     00

	 * IE IBSS         06

	 * IE IBSS len     02

	 * IE IBSS atim    00 00

	 * reserved        00 00 00 00

	 * IE DS           03

	 * IE DS len       01

	 * IE DS channel   01

	 * reserved        00 00 00 00

	 * probe delay     00 00

	 * capability      02 00

	 * rates           82 84 8b 96   (basic rates with have bit 7 set)

	 *                 0c 12 18 24 30 48 60 6c

	 * padding         100 bytes

 Only v8 and below support setting probe delay */

 TODO: mix in WLAN_CAPABILITY_PRIVACY */

	/*

	 * This is a sample response to CMD_802_11_AD_HOC_JOIN:

	 *

	 * response        2b 80

	 * size            14 00

	 * sequence        xx xx

	 * result          00 00

	 * reserved        00

	 * bssid           02 2b 7b 0f 86 0e

	/* Search if someone is beaconing. This assumes that the

 TODO: consider doing this at MACREG_INT_CODE_ADHOC_BCN_LOST time */

	/* firmware does not work well with too long latency with power saving

	 * enabled, so do not enable it if there is only polling, no

	 * interrupts (like in some sdio hosts which can only

	 * poll for sdio irqs)

/*

 * Initialization

/*

 * At this time lbs_private *priv doesn't even exist, so we just allocate

 * memory and don't initialize the wiphy further. This is postponed until we

 * can talk to the firmware and happens at registration time in

 * lbs_cfg_wiphy_register().

 Section 5.17.2 */

 US FCC */

 Canada */

 ETSI   */

 Spain  */

 France */

 Japan  */

/*

 * This function get's called after lbs_setup_firmware() determined the

 * firmware capabities. So we can setup the wiphy according to our

 * hardware/firmware.

	/*

	 * We could check priv->fwcapinfo && FW_CAPINFO_WPA, but I have

	 * never seen a firmware without WPA

 SPDX-License-Identifier: GPL-2.0

/***************************************************************************

 * Mesh command handling

	/*

	 * Command id is 0xac for v10 FW along with mesh interface

	 * id in bits 14-13-12.

/* This function is the CMD_MESH_CONFIG legacy function.  It only handles the

 * START and STOP actions.  The extended actions supported by CMD_MESH_CONFIG

 * are all handled by preparing a struct cmd_ds_mesh_config and passing it to

 * lbs_mesh_config_send.

/***************************************************************************

 * Mesh sysfs support

/*

 * Attributes exported through sysfs

/**

 * anycast_mask_show - Get function for sysfs attribute anycast_mask

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer where data will be returned

/**

 * anycast_mask_store - Set function for sysfs attribute anycast_mask

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer that contains new attribute value

 * @count: size of buffer

/**

 * prb_rsp_limit_show - Get function for sysfs attribute prb_rsp_limit

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer where data will be returned

/**

 * prb_rsp_limit_store - Set function for sysfs attribute prb_rsp_limit

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer that contains new attribute value

 * @count: size of buffer

/**

 * lbs_mesh_show - Get function for sysfs attribute mesh

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer where data will be returned

/**

 * lbs_mesh_store - Set function for sysfs attribute mesh

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer that contains new attribute value

 * @count: size of buffer

/*

 * lbs_mesh attribute to be exported per ethX interface

 * through sysfs (/sys/class/net/ethX/lbs_mesh)

/*

 * anycast_mask attribute to be exported per mshX interface

 * through sysfs (/sys/class/net/mshX/anycast_mask)

/*

 * prb_rsp_limit attribute to be exported per mshX interface

 * through sysfs (/sys/class/net/mshX/prb_rsp_limit)

/***************************************************************************

 * Persistent configuration support

/**

 * bootflag_show - Get function for sysfs attribute bootflag

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer where data will be returned

/**

 * bootflag_store - Set function for sysfs attribute bootflag

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer that contains new attribute value

 * @count: size of buffer

/**

 * boottime_show - Get function for sysfs attribute boottime

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer where data will be returned

/**

 * boottime_store - Set function for sysfs attribute boottime

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer that contains new attribute value

 * @count: size of buffer

	/* A too small boot time will result in the device booting into

	 * standalone (no-host) mode before the host can take control of it,

	 * so the change will be hard to revert.  This may be a desired

	 * feature (e.g to configure a very fast boot time for devices that

	 * will not be attached to a host), but dangerous.  So I'm enforcing a

	 * lower limit of 20 seconds:  remove and recompile the driver if this

	 * does not work for you.

/**

 * channel_show - Get function for sysfs attribute channel

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer where data will be returned

/**

 * channel_store - Set function for sysfs attribute channel

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer that contains new attribute value

 * @count: size of buffer

/**

 * mesh_id_show - Get function for sysfs attribute mesh_id

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer where data will be returned

/**

 * mesh_id_store - Set function for sysfs attribute mesh_id

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer that contains new attribute value

 * @count: size of buffer

 fetch all other Information Element parameters */

 transfer IE elements */

 SSID len */

 IE len */

/**

 * protocol_id_show - Get function for sysfs attribute protocol_id

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer where data will be returned

/**

 * protocol_id_store - Set function for sysfs attribute protocol_id

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer that contains new attribute value

 * @count: size of buffer

 fetch all other Information Element parameters */

 transfer IE elements */

 update protocol id */

/**

 * metric_id_show - Get function for sysfs attribute metric_id

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer where data will be returned

/**

 * metric_id_store - Set function for sysfs attribute metric_id

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer that contains new attribute value

 * @count: size of buffer

 fetch all other Information Element parameters */

 transfer IE elements */

 update metric id */

/**

 * capability_show - Get function for sysfs attribute capability

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer where data will be returned

/**

 * capability_store - Set function for sysfs attribute capability

 * @dev: the &struct device

 * @attr: device attributes

 * @buf: buffer that contains new attribute value

 * @count: size of buffer

 fetch all other Information Element parameters */

 transfer IE elements */

 update value */

/***************************************************************************

 * Initializing and starting, stopping mesh

/*

 * Check mesh FW version and appropriately send the mesh start

 * command

 Determine mesh_fw_ver from fwrelease and fwcapinfo */

 5.0.16p0 9.0.0.p0 is known to NOT support any mesh */

 5.110.22 have mesh command with 0xa3 command id */

 10.0.0.p0 FW brings in mesh config command with different id */

 Check FW version MSB and initialize mesh_fw_ver */

		/* Enable mesh, if supported, and work out which TLV it uses.

		   0x100 + 291 is an unofficial value used in 5.110.20.pXX

		   0x100 + 37 is the official value used in 5.110.21.pXX

		   but we check them in that order because 20.pXX doesn't

		/* 5.110.20.pXX firmware will fail the command if the channel

		   doesn't match the existing channel. But only if the TLV

		   is correct. If the channel is wrong, _BOTH_ versions will

		   give an error to 0x100+291, and allow 0x100+37 to succeed.

		   It's just that 5.110.20.pXX will not have done anything

		/* 10.0.0.pXX new firmwares should succeed with TLV

		 * 0x100+37; Do not invoke command with old TLV.

 Stop meshing until interface is brought up */

/**

 * lbs_mesh_stop - close the mshX interface

 *

 * @dev:	A pointer to &net_device structure

 * returns:	0

/**

 * lbs_mesh_dev_open - open the mshX interface

 *

 * @dev:	A pointer to &net_device structure

 * returns:	0 or -EBUSY if monitor mode active

/**

 * lbs_add_mesh - add mshX interface

 *

 * @priv:	A pointer to the &struct lbs_private structure

 * returns:	0 if successful, -X otherwise

 Allocate a virtual mesh device */

 Register virtual mesh interface */

 Everything successful */

/***************************************************************************

 * Sending and receiving

/***************************************************************************

 * Ethtool related

 Get Mesh Statistics */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/net/wireless/libertas/if_sdio.c

 *

 *  Copyright 2007-2008 Pierre Ossman

 *

 * Inspired by if_cs.c, Copyright 2007 Holger Schurig

 *

 * This hardware has more or less no CMD53 support, so all registers

 * must be accessed using sdio_readb()/sdio_writeb().

 *

 * Transfers must be in one transaction or the firmware goes bonkers.

 * This means that the transfer must either be small enough to do a

 * byte based transfer or it must be padded to a multiple of the

 * current block size.

 *

 * As SDIO is still new to the kernel, it is unfortunately common with

 * bugs in the host controllers related to that. One such bug is that

 * controllers cannot do transfers that aren't a multiple of 4 bytes.

 * If you don't have time to fix the host controller driver, you can

 * work around the problem by modifying if_sdio_host_to_card() and

 * if_sdio_card_to_host() to pad the data.

/* The if_sdio_remove() callback function is called when

 * user removes this module from kernel space or ejects

 * the card from the slot. The driver handles these 2 cases

 * differently for SD8688 combo chip.

 * If the user is removing the module, the FUNC_SHUTDOWN

 * command for SD8688 is sent to the firmware.

 * If the card is removed, there is no need to send this command.

 *

 * The variable 'user_rmmod' is used to distinguish these two

 * scenarios. This flag is initialized as FALSE in case the card

 * is removed, and will be set to TRUE for module removal when

 * module_exit function is called.

 end: all zeroes */				},

*******************************************************************/

 I/O                                                              */

*******************************************************************/

/*

 *  For SD8385/SD8686, this function reads firmware status after

 *  the image is downloaded, or reads RX packet length when

 *  interrupt (with IF_SDIO_H_INT_UPLD bit set) is received.

 *  For SD8688, this function reads firmware status only.

 for newer chipsets */

 invalid length */

 right shift 3 bits to get the event id */

	/*

	 * The transfer must be in one transaction or the firmware

	 * goes suicidal. There's no way to guarantee that for all

	 * controllers, but we can at least try.

*******************************************************************/

 Firmware                                                         */

*******************************************************************/

		/* On some platforms (like Davinci) the chip needs more time

		 * between helper blocks.

/*

		lbs_deb_sdio("sending %d bytes chunk\n", chunk_size);

 an empty block marks the end of the transfer */

 wait for the helper to boot by looking at the size register */

			/*

			 * For SD8688 wait until the length is not 0, 1 or 2

			 * before downloading the first FW block,

			 * since BOOT code writes the register to indicate the

			 * helper/FW download winner,

			 * the value could be 1 or 2 (Func1 or Func2).

/*

		lbs_deb_sdio("firmware wants %d bytes\n", (int)req_size);

/*

			lbs_deb_sdio("sending %d bytes (%d bytes) chunk\n",

				chunk_size, (chunk_size + 31) / 32 * 32);

 wait for the firmware to boot */

	/*

	 * Disable interrupts

	/*

	 * The manual clearly describes that FEDC is the right code to use

	 * to detect firmware presence, but for SD8686 it is not that simple.

	 * Scratch is also used to store the RX packet length, so we lose

	 * the FEDC value early on. So we use a non-zero check in order

	 * to validate firmware presence.

	 * Additionally, the SD8686 in the Gumstix always has the high scratch

	 * bit set, even when the firmware is not loaded. So we have to

	 * exclude that from the test.

*******************************************************************/

 Power management                                                 */

*******************************************************************/

 Finish power on sequence (after firmware is loaded) */

	/*

	 * Get rx_unit if the chip is SD8688 or newer.

	 * SD8385 & SD8686 do not have rx_unit.

	/*

	 * Set up the interrupt handler late.

	 *

	 * If we set it up earlier, the (buggy) hardware generates a spurious

	 * interrupt, even before the interrupt has been enabled, with

	 * CCCR_INTx = 0.

	 *

	 * We register the interrupt handler late so that we can handle any

	 * spurious interrupts, and also to avoid generation of that known

	 * spurious interrupt in the first place.

	/*

	 * Enable interrupts now that everything is set up

	/* Set fw_ready before queuing any commands so that

	 * lbs_thread won't block from sending them to firmware.

	/*

	 * FUNC_INIT is required for SD8688 WLAN/BT multiple functions

			/* Tell PM core that we don't need the card to be

	/* For 1-bit transfers to the 8686 model, we need to enable the

	 * interrupt flag in the CCCR register. Set the MMC_QUIRK_LENIENT_FN0

******************************************************************/

 Libertas callbacks                                              */

******************************************************************/

	/*

	 * The transfer must be in one transaction or the firmware

	 * goes suicidal. There's no way to guarantee that for all

	 * controllers, but we can at least try.

	/*

	 * SDIO specific header.

	/*

	 * The actual reset operation must be run outside of lbs_thread. This

	 * is because mmc_remove_host() will cause the device to be instantly

	 * destroyed, and the libertas driver then needs to end lbs_thread,

	 * leading to a deadlock.

	 *

	 * We run it in a workqueue totally independent from the if_sdio_card

	 * instance for that reason.

 Let runtime PM know the card is powered off */

 Make sure the card will not be powered off by runtime PM */

******************************************************************/

 SDIO callbacks                                                  */

******************************************************************/

	/*

	 * Ignore the define name, this really means the card has

	 * successfully received the command.

 for newer chipsets */

 Check if we support this card */

 Undo decrement done above in if_sdio_probe */

		/*

		 * FUNC_SHUTDOWN is required for SD8688 WLAN/BT

		 * multiple functions

	/* If we're powered off anyway, just let the mmc layer remove the

	/* If we aren't being asked to wake on anything, we should bail out

	 * and let the SD stack power down the card.

******************************************************************/

 Module functions                                                */

******************************************************************/

 Clear the flag in case user removes the card. */

 Set the flag as user is removing this module. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file contains the handling of TX in wlan driver.

/**

 * convert_radiotap_rate_to_mv - converts Tx/Rx rates from IEEE80211_RADIOTAP_RATE

 * units (500 Kb/s) into Marvell WLAN format (see Table 8 in Section 3.2.1)

 *

 * @rate:	Input rate

 * returns:	Output Rate (0 if invalid)

   1 Mbps */

   2 Mbps */

 5.5 Mbps */

  11 Mbps */

   6 Mbps */

   9 Mbps */

  12 Mbps */

  18 Mbps */

  24 Mbps */

  36 Mbps */

  48 Mbps */

  54 Mbps */

/**

 * lbs_hard_start_xmit - checks the conditions and sends packet to IF

 * layer if everything is ok

 *

 * @skb:	A pointer to skb which includes TX packet

 * @dev:	A pointer to the &struct net_device

 * returns:	0 or -1

	/* We need to protect against the queues being restarted before

 We'll never manage to send this one; drop it and return 'OK' */

		/* This can happen if packets come in on the mesh and eth

		   device simultaneously -- there's no mutual exclusion on

 set txpd fields from the radiotap header */

 skip the radiotap header */

 copy destination address from 802.11 header */

 copy destination address from 802.3 header */

		/* Keep the skb to echo it back once Tx feedback is

 Keep the skb around for when we get feedback */

/**

 * lbs_send_tx_feedback - sends to the host the last transmitted packet,

 * filling the radiotap headers with transmission information.

 *

 * @priv:	A pointer to &struct lbs_private structure

 * @try_count:	A 32-bit value containing transmission retry status.

 *

 * returns:	void

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file contains the major functions in WLAN

 * driver. It includes init, exit, open, close and main

 * thread etc..

 Module parameters */

/*

 * This global structure is used to send the confirm_sleep command as

 * fast as possible down to the firmware.

/*

 * the table to keep region code

/*

 * FW rate table.  FW refers to rates by their index in this table, not by the

 * rate value itself.  Values of 0x00 are

 * reserved positions.

/**

 *  lbs_fw_index_to_data_rate - use index to get the data rate

 *

 *  @idx:	The index of data rate

 *  returns:	data rate or 0

/**

 *  lbs_data_rate_to_fw_index - use rate to get the index

 *

 *  @rate:	data rate

 *  returns:	index or 0

/**

 *  lbs_dev_open - open the ethX interface

 *

 *  @dev:	A pointer to &net_device structure

 *  returns:	0 or -EBUSY if monitor mode active

 Disable command processing, and wait for all commands to complete */

/**

 *  lbs_eth_stop - close the ethX interface

 *

 *  @dev:	A pointer to &net_device structure

 *  returns:	0

 Wake main thread if commands are pending */

	/*

	 * Can only set MAC address when all interfaces are down, to be written

	 * to the hardware when one of them is brought up.

 In case it was called from the mesh device */

 Once for priv->dev, again for priv->mesh_dev if it exists */

/**

 *  lbs_thread - handles the major jobs in the LBS driver.

 *  It handles all events generated by firmware, RX data received

 *  from firmware and TX data sent from kernel.

 *

 *  @data:	A pointer to &lbs_thread structure

 *  returns:	0

 Bye */

 We need to wait until we're _told_ to die */

 Sleep mode. Nothing we can do till it wakes */

 Command timed out. Recover */

 Firmware not ready. We're waiting for it */

 Something is en route to the device already */

 We've a packet to send */

 We have a command response */

 Can't send a command; one already running */

 We have a command to send */

 We have an event to process */

 No command */

 Process any pending command response */

 Process hardware events, e.g. card removed, link lost */

 Wake up device */

 command timeout stuff */

			/* Reset card, but only when it isn't in the process

 Check if we need to confirm Sleep Request received previously */

				/* workaround for firmware sending

				 * deauth/linkloss event immediately

				 * after sleep request; remove this

				 * after firmware fixes it

		/* The PS state is changed during processing of Sleep Request

		 * event above

 Execute the next command */

				/* We can wake the queues immediately if we aren't

/**

 * lbs_setup_firmware - gets the HW spec from the firmware and sets

 *        some basic parameters

 *

 *  @priv:	A pointer to &struct lbs_private structure

 *  returns:	0 or -1

 Read MAC address from firmware */

 Read power levels if available */

 Send cmd to FW to enable 11D function */

/**

 * lbs_cmd_timeout_handler - handles the timeout of command sending.

 * It will re-send the same command again.

 *

 * @t: Context from which to retrieve a &struct lbs_private pointer

	/*

	 * If the device didn't even acknowledge the command, reset the state

	 * so that we don't block all future commands due to this one timeout.

/**

 * lbs_tx_lockup_handler - handles the timeout of the passing of TX frames

 * to the hardware. This is known to frequently happen with SD8686 when

 * waking up after a Wake-on-WLAN-triggered resume.

 *

 * @t: Context from which to retrieve a &struct lbs_private pointer

/**

 * auto_deepsleep_timer_fn - put the device back to deep sleep mode when

 * timer expires and no activity (command, event, data etc.) is detected.

 * @t: Context from which to retrieve a &struct lbs_private pointer

 * returns:	N/A

 Allocate the command buffers */

 Create the event FIFO */

/**

 * lbs_add_card - adds the card. It will probe the

 * card, allocate the lbs_priv and initialize the device.

 *

 * @card:	A pointer to card

 * @dmdev:	A pointer to &struct device

 * returns:	A pointer to &struct lbs_private structure

 Allocate an Ethernet device and register it */

	/* worker thread destruction blocks on the in-flight command which

	 * should have been cleared already in lbs_stop_card().

		/* no need to wakeup if already woken up,

		 * on suspend, this exit ps command is not processed

		 * the driver hangs

 Stop the thread servicing the interrupts */

 newer firmware use a capability mask */

 poke the firmware */

	/* If the netdev isn't registered, it means that lbs_start_card() was

 Swap buffers by flipping the response index */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2008, cozybit Inc.

 *  Copyright (C) 2003-2006, Marvell International Ltd.

/**

 *  lbtf_cmd_copyback - Simple callback that copies response back into command

 *

 *  @priv:	A pointer to struct lbtf_private structure

 *  @extra:	A pointer to the original command structure for which

 *		'resp' is a response

 *  @resp:	A pointer to the command response

 *

 *  Returns: 0 on success, error on failure

/**

 *  lbtf_update_hw_spec: Updates the hardware details.

 *

 *  @priv:    	A pointer to struct lbtf_private structure

 *

 *  Returns: 0 on success, error on failure

	/* The firmware release is in an interesting format: the patch

	/* Clamp region code to 8-bit since FW spec indicates that it should

	 * only ever be 8-bit, even though the field size is 16-bit.  Some

	 * firmware returns non-zero high 8 bits here.

 use the region code to search for the index */

 if it's unidentified region code, use the default (USA) */

/**

 *  lbtf_set_channel: Set the radio channel

 *

 *  @priv:	A pointer to struct lbtf_private structure

 *  @channel:	The desired channel, or 0 to clear a locked channel

 *

 *  Returns: 0 on success, error on failure

		/* Let the timer kick in and retry, and potentially reset

 Setup the timer after transmit command */

/*

 *  This function inserts command node to cmdfreeq

 *  after cleans it. Requires priv->driver_lock held.

/**

 *  lbtf_allocate_cmd_buffer - Allocates cmd buffer, links it to free cmd queue

 *

 *  @priv:	A pointer to struct lbtf_private structure

 *

 *  Returns: 0 on success.

 Allocate and initialize the command array */

 Allocate and initialize each command buffer in the command array */

/**

 *  lbtf_free_cmd_buffer - Frees the cmd buffer.

 *

 *  @priv:	A pointer to struct lbtf_private structure

 *

 *  Returns: 0

 need to check if cmd array is allocated or not */

 Release shared memory buffers */

 Release cmd_ctrl_node */

/**

 *  lbtf_get_cmd_ctrl_node - Gets free cmd node from free cmd queue.

 *

 *  @priv:		A pointer to struct lbtf_private structure

 *

 *  Returns: pointer to a struct cmd_ctrl_node or NULL if none available.

/**

 *  lbtf_execute_next_command: execute next command in cmd pending queue.

 *

 *  @priv:     A pointer to struct lbtf_private structure

 *

 *  Returns: 0 on success.

	/* Debug group is lbtf_deb_THREAD and not lbtf_deb_HOST, because the

	 * only caller to us is lbtf_thread() and we get even when a

 Wake up main thread to execute next command */

 Copy the incoming command to the buffer */

 Set sequence number, clean result, move to buffer */

 Call holding driver_lock */

		/* 0x0004 means -EAGAIN. Drop the response, let it time out

 Now we got response from FW, cancel the command timer */

 If the command is not successful, cleanup and return failure */

		/*

		 * Handling errors here

 Clean up and Put current command back to cmdfreeq */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2008, cozybit Inc.

 *  Copyright (C) 2003-2006, Marvell International Ltd.

 Enter the device signature inside */

 Terminating entry */

/**

 *  if_usb_write_bulk_callback -  call back to handle URB status

 *

 *  @urb:		pointer to urb structure

 print the failure status number for debug */

/**

 *  if_usb_free - free tx/rx urb, skb and rx buffer

 *

 *  @cardp:	pointer if_usb_card

 Unlink tx & rx urb */

 Download timed out */

/**

 *  if_usb_probe - sets the configuration values

 *

 *  @intf:	USB interface structure

 *  @id:	pointer to usb_device_id

 *

 *  Returns: 0 on success, error code on failure

 Endpoints not found */

/**

 *  if_usb_disconnect -  free resource and cleanup

 *

 *  @intf:	USB interface structure

 Unlink and free urb */

/**

 *  if_usb_send_fw_pkt -  This function downloads the FW

 *

 *  @cardp:	pointer if_usb_card

 *

 *  Returns: 0

	/* If we got a CRC failure on the last block, back

	/* struct fwdata (which we sent to the card) has an

	   extra __le32 field in between the header and the data,

	   which is not in the struct fwheader in the actual

		/* Host has finished FW downloading

		 * Donwloading FW JUMP BLOCK

/**

 *  usb_tx_block - transfer data to the device

 *

 *  @cardp:	pointer if_usb_card

 *  @payload:	pointer to payload data

 *  @nb:	data length

 *  @data:	non-zero for data, zero for commands

 *

 *  Returns: 0 on success, nonzero otherwise.

 check if device is removed */

 Fill the receive configuration URB and initialise the Rx call back */

 Firmware ready event received */

 Received valid boot command response */

 reschedule timer for 200ms hence */

/**

 *  if_usb_receive - read data received from the device.

 *

 *  @urb:		pointer to struct urb

 Event cause handling */

 Icky undocumented magic special case */

/**

 *  if_usb_host_to_card -  Download data to the device

 *

 *  @priv:		pointer to struct lbtf_private structure

 *  @type:		type of data

 *  @payload:		pointer to payload buffer

 *  @nb:		number of bytes

 *

 *  Returns: 0 on success, nonzero otherwise

/**

 *  if_usb_issue_boot_command - Issue boot command to Boot2.

 *

 *  @cardp:	pointer if_usb_card

 *  @ivalue:   1 boots from FW by USB-Download, 2 boots from FW in EEPROM.

 *

 *  Returns: 0

 Prepare command */

 Issue command */

/**

 *  check_fwfile_format - Check the validity of Boot2/FW image.

 *

 *  @data:	pointer to image

 *  @totlen:	image length

 *

 *  Returns: 0 if the image is valid, nonzero otherwise.

 Issue Boot command = 1, Boot from Download-FW */

 wait for command response */

 Send the first firmware packet... */

 ... and wait for the process to complete */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2008, cozybit Inc.

 *  Copyright (C) 2003-2006, Marvell International Ltd.

 thinfirm version: 5.132.X.pX */

 Module parameters */

 This table contains the hardware specific values for the modulation rates. */

 command response? */

			/* Stick it back at the _top_ of the pending

 Execute the next command */

/*

 *  This function handles the timeout of command sending.

 *  It will re-send the same command again.

 Allocate the command buffers */

	/*

	 * queue will be restarted when we receive transmission feedback if

	 * there are no buffered multicast frames to send

 Activate per-packet rate selection */

 copy destination address from 802.11 header */

 Flush pending command nodes */

 Marvell rate index has a hole at value 4 */

/*

 * lbtf_add_card: Add and initialize the card.

 *

 *  Returns: pointer to struct lbtf_priv.

	/* The firmware seems to start with the radio enabled. Turn it

	 * off before an actual mac80211 start callback is invoked.

	/*

	 * Commented out, otherwise we never go beyond 1Mbit/s using mac80211

	 * default pid rc algorithm.

	 *

	 * info->status.retry_count = MRVL_DEFAULT_RETRIES - retrycnt;

/*

 * NXP Wireless LAN device driver: station event handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

		/* Locate curr pointer to the start of beacon tlv,

		 * timestamp 8 bytes, beacon intervel 2 bytes,

		 * capability info 2 bytes, totally 12 byte beacon header

 check VHT MAXMPDU capability */

/*

 * This function resets the connection state.

 *

 * The function is invoked after receiving a disconnect event from firmware,

 * and performs the following actions -

 *      - Set media status to disconnected

 *      - Clean up Tx and Rx packets

 *      - Resets SNR/NF/RSSI value in driver

 *      - Resets security configurations in driver

 *      - Enables auto data rate

 *      - Saves the previous SSID and BSSID so that they can

 *        be used for re-association, if required

 *      - Erases current SSID and BSSID information

 *      - Sends a disconnect event to upper layers/applications.

 Free Tx and Rx packets, report disconnect to upper layer */

 Reset SNR/NF/RSSI values */

 Enable auto data rate */

	/*

	 * Memorize the previous SSID and BSSID so

	 * it could be used for re-assoc

 Need to erase the current SSID and BSSID info */

 reserved 2 bytes are not mandatory in tdls event */

 tdls channel switch failed */

 tdls channel switch success */

/*

* This function handles coex events generated by firmware

		/* When receive the first event, allocate device dump

		 * buffer, dump driver info.

		/* If no proceeded event arrive in 10s, upload device

		 * dump data, this will be useful if the end of

		 * transmission event get lost, in this cornel case,

		 * user would still get partial of the dump.

 Overflow check */

/*

 * This function handles events generated by firmware.

 *

 * This is a generic function and handles all events.

 *

 * Event specific routines are called by this function based

 * upon the generated event cause.

 *

 * For the following events, the function just forwards them to upper

 * layers, optionally recording the change -

 *      - EVENT_LINK_SENSED

 *      - EVENT_MIC_ERR_UNICAST

 *      - EVENT_MIC_ERR_MULTICAST

 *      - EVENT_PORT_RELEASE

 *      - EVENT_RSSI_LOW

 *      - EVENT_SNR_LOW

 *      - EVENT_MAX_FAIL

 *      - EVENT_RSSI_HIGH

 *      - EVENT_SNR_HIGH

 *      - EVENT_DATA_RSSI_LOW

 *      - EVENT_DATA_SNR_LOW

 *      - EVENT_DATA_RSSI_HIGH

 *      - EVENT_DATA_SNR_HIGH

 *      - EVENT_LINK_QUALITY

 *      - EVENT_PRE_BEACON_LOST

 *      - EVENT_IBSS_COALESCED

 *      - EVENT_IBSS_STA_CONNECT

 *      - EVENT_IBSS_STA_DISCONNECT

 *      - EVENT_WEP_ICV_ERR

 *      - EVENT_BW_CHANGE

 *      - EVENT_HOSTWAKE_STAIE

  *

 * For the following events, no action is taken -

 *      - EVENT_MIB_CHANGED

 *      - EVENT_INIT_DONE

 *      - EVENT_DUMMY_HOST_WAKEUP_SIGNAL

 *

 * Rest of the supported events requires driver handling -

 *      - EVENT_DEAUTHENTICATED

 *      - EVENT_DISASSOCIATED

 *      - EVENT_LINK_LOST

 *      - EVENT_PS_SLEEP

 *      - EVENT_PS_AWAKE

 *      - EVENT_DEEP_SLEEP_AWAKE

 *      - EVENT_HS_ACT_REQ

 *      - EVENT_ADHOC_BCN_LOST

 *      - EVENT_BG_SCAN_REPORT

 *      - EVENT_WMM_STATUS_CHANGE

 *      - EVENT_ADDBA

 *      - EVENT_DELBA

 *      - EVENT_BA_STREAM_TIEMOUT

 *      - EVENT_AMSDU_AGGR_CTRL

 *      - EVENT_FW_DUMP_INFO

		/* We intend to skip this event during suspend, but handle

		 * it in interface disabled case

 Debugging event; not used, but let's not print an ERROR for it. */

/*

 * NXP Wireless LAN device driver: functions for station ioctl

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * Copies the multicast address list from device to driver.

 *

 * This function does not validate the destination memory for

 * size, and the calling function must ensure enough memory is

 * available.

/*

 * Wait queue completion handler.

 *

 * This function waits on a cmd wait queue. It also cancels the pending

 * request after waking up, in case of errors.

 Wait for completion */

/*

 * This function prepares the correct firmware command and

 * issues it to set the multicast list.

 *

 * This function can be used to enable promiscuous mode, or enable all

 * multicast packets, or to enable selective multicast.

 Multicast */

 Send multicast addresses to firmware */

/*

 * This function fills bss descriptor structure using provided

 * information.

 * beacon_ie buffer is allocated in this function. It is caller's

 * responsibility to free the memory.

 The caller of this function will free beacon_ie */

	/* Disable 11ac by default. Enable it only where there

	 * exist VHT_CAP IE in AP beacon

/*

 * In Ad-Hoc mode, the IBSS is created if not found in scan list.

 * In both Ad-Hoc and infra mode, an deauthentication is performed

 * first.

 Allocate and fill new bss descriptor */

		/* Clear any past association response stored for

		/* If auth type is auto and association fails using open mode,

 Adhoc mode */

 If the requested SSID matches current SSID, return */

	/* beacon_ie buffer was allocated in function

	 * mwifiex_fill_new_bss_desc(). Free it now.

/*

 * IOCTL request handler to set host sleep configuration.

 *

 * This function prepares the correct firmware command and

 * issues it.

 Already cancelled */

 Save previous condition */

				/* Return failure if no parameters for HS

 Restore previous condition */

/*

 * Sends IOCTL request to cancel the existing Host Sleep configuration.

 *

 * This function allocates the IOCTL request buffer, fills it

 * with requisite parameters and calls the IOCTL handler.

/*

 * Sends IOCTL request to cancel the existing Host Sleep configuration.

 *

 * This function allocates the IOCTL request buffer, fills it

 * with requisite parameters and calls the IOCTL handler.

/*

 * IOCTL request handler to get BSS information.

 *

 * This function collates the information from different driver structures

 * to send to the user.

/*

 * The function disables auto deep sleep mode.

/*

 * Sends IOCTL request to get the data rate.

 *

 * This function allocates the IOCTL request buffer, fills it

 * with requisite parameters and calls the IOCTL handler.

/*

 * IOCTL request handler to set tx power configuration.

 *

 * This function prepares the correct firmware command and

 * issues it.

 *

 * For non-auto power mode, all the following power groups are set -

 *      - Modulation class HR/DSSS

 *      - Modulation class OFDM

 *      - Modulation class HTBW20

 *      - Modulation class HTBW40

 Power group for modulation class HR/DSSS */

 Power group for modulation class OFDM */

 Power group for modulation class HTBW20 */

 Power group for modulation class HTBW40 */

/*

 * IOCTL request handler to get power save mode.

 *

 * This function prepares the correct firmware command and

 * issues it.

/*

 * IOCTL request handler to set/reset WPA IE.

 *

 * The supplied WPA IE is treated as a opaque buffer. Only the first field

 * is checked to determine WPA version. If buffer length is zero, the existing

 * WPA IE is reset.

/*

 * IOCTL request handler to set/reset WAPI IE.

 *

 * The supplied WAPI IE is treated as a opaque buffer. Only the first field

 * is checked to internally enable WAPI. If buffer length is zero, the existing

 * WAPI IE is reset.

/*

 * IOCTL request handler to set/reset WPS IE.

 *

 * The supplied WPS IE is treated as a opaque buffer. Only the first field

 * is checked to internally enable WPS. If buffer length is zero, the existing

 * WPS IE is reset.

/*

 * IOCTL request handler to set WAPI key.

 *

 * This function prepares the correct firmware command and

 * issues it.

/*

 * IOCTL request handler to set WEP network key.

 *

 * This function prepares the correct firmware command and

 * issues it, after validation checks.

 Copy the required key as the current key */

 Copy the key in the driver */

 Send request to firmware */

/*

 * IOCTL request handler to set WPA key.

 *

 * This function prepares the correct firmware command and

 * issues it, after validation checks.

 *

 * Current driver only supports key length of up to 32 bytes.

 *

 * This function can also be used to disable a currently set key.

 Current driver only supports key length of up to 32 bytes */

		/*

		 * IBSS/WPA-None uses only one key (Group) for both receiving

		 * and sending unicast and multicast packets.

 Send the key as PTK to firmware */

 Copy the key in the driver */

 Send the key as GTK to firmware */

/*

 * IOCTL request handler to set/get network keys.

 *

 * This is a generic key handling function which supports WEP, WPA

 * and WAPI.

/*

 * This function returns the driver version.

/*

 * Sends IOCTL request to set encoding parameters.

 *

 * This function allocates the IOCTL request buffer, fills it

 * with requisite parameters and calls the IOCTL handler.

/*

 * Sends IOCTL request to get extended version.

 *

 * This function allocates the IOCTL request buffer, fills it

 * with requisite parameters and calls the IOCTL handler.

/*

 * Sends IOCTL request to get statistics information.

 *

 * This function allocates the IOCTL request buffer, fills it

 * with requisite parameters and calls the IOCTL handler.

/*

 * IOCTL request handler to read/write register.

 *

 * This function prepares the correct firmware command and

 * issues it.

 *

 * Access to the following registers are supported -

 *      - MAC

 *      - BBP

 *      - RF

 *      - PMIC

 *      - CAU

/*

 * Sends IOCTL request to write to a register.

 *

 * This function allocates the IOCTL request buffer, fills it

 * with requisite parameters and calls the IOCTL handler.

/*

 * Sends IOCTL request to read from a register.

 *

 * This function allocates the IOCTL request buffer, fills it

 * with requisite parameters and calls the IOCTL handler.

/*

 * Sends IOCTL request to read from EEPROM.

 *

 * This function allocates the IOCTL request buffer, fills it

 * with requisite parameters and calls the IOCTL handler.

 Send request to firmware */

/*

 * This function sets a generic IE. In addition to generic IE, it can

 * also handle WPA, WPA2 and WAPI IEs.

 If the passed length is zero, reset the buffer */

 IE is a WPA/WPA2 IE so call set_wpa function */

 IE is a WAPI IE so call set_wapi function */

			/* Test to see if it is a WPA IE, if not, then

			 * it is a gen IE

				/* IE is a WPA/WPA2 IE so call set_wpa function

				/* Test to see if it is a WPS IE,

				 * if so, enable wps session flag

 Saved in gen_ie, such as P2P IE.etc.*/

		/* Verify that the passed length is not larger than the

		 * available space remaining in the buffer

			/* Append the passed data to the end

			 * of the genIeBuffer

			/* Increment the stored buffer length by the

			 * size passed

/*

 * IOCTL request handler to set/get generic IE.

 *

 * In addition to various generic IEs, this function can also be

 * used to set the ARP filter.

/*

 * Sends IOCTL request to set a generic IE.

 *

 * This function allocates the IOCTL request buffer, fills it

 * with requisite parameters and calls the IOCTL handler.

/* This function get Host Sleep wake up reason.

 *

/*

 * NXP Wireless LAN device driver: AP TX and RX data handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/* This function checks if particular RA list has packets more than low bridge

 * packet threshold and then deletes packet from this RA list.

 * Function deletes packets from such RA list and returns true. If no such list

 * is found, false is returned.

/* This function deletes packets from particular RA List. RA list index

 * from which packets are deleted is preserved so that packets from next RA

 * list are deleted upon subsequent call thus maintaining fairness.

		/* Replace the 803 header and rfc1042 header (llc/snap) with

		 * an Ethernet II header, keep the src/dst and snap_type

		 * (ethertype).

		 *

		 * The firmware only passes up SNAP frames converting all RX

		 * data from 802.11 to 802.2/LLC/SNAP frames.

		 *

		 * To create the Ethernet II, just move the src, dst address

		 * right before the snap_type.

		/* Chop off the rxpd + the excess memory from

		 * 802.2/llc/snap header that was removed.

 Chop off the rxpd */

	/* Chop off the leading header bytes so that it points

	 * to the start of either the reconstructed EthII frame

	 * or the 802.2/llc/snap frame.

 Insufficient skb headroom - allocate a new skb */

		/* Update bridge packet statistics as the

		 * packet is not going to kernel/upper layer.

		/* Sending bridge packet to TX queue, so save the packet

		 * length in TXCB to update statistics in TX complete.

/*

 * This function contains logic for AP packet forwarding.

 *

 * If a packet is multicast/broadcast, it is sent to kernel/upper layer

 * as well as queued back to AP TX queue so that it can be sent to other

 * associated stations.

 * If a packet is unicast and RA is present in associated station list,

 * it is again requeued into AP TX queue.

 * If a packet is unicast and RA is not in associated station list,

 * packet is forwarded to kernel to handle routing logic.

 don't do packet forwarding in disconnected state */

 Requeue Intra-BSS packet */

 Forward unicat/Inter-BSS packets to kernel. */

 Don't forward Intra-BSS unicast packet to upper layer*/

	/* This is required only in case of 11n and USB/PCIE as we alloc

	 * a buffer of 4K only if its 11N (to be able to receive 4K

	 * AMSDU packets). In case of SD we allocate buffers based

	 * on the size of packet and hence this is not needed.

	 *

	 * Modifying the truesize here as our allocation for each

	 * skb is 4K but we only receive 2K packets and this cause

	 * the kernel to start dropping packets in case where

	 * application has allocated buffer based on 2K size i.e.

	 * if there a 64K packet received (in IP fragments and

	 * application allocates 64K to receive this packet but

	 * this packet would almost double up because we allocate

	 * each 1.5K fragment in 4K and pass it up. As soon as the

	 * 64K limit hits kernel will start to drop rest of the

	 * fragments. Currently we fail the Filesndl-ht.scr script

	 * for UDP, hence this fix

 Forward multicast/broadcast packet to upper layer*/

/*

 * This function processes the packet received on AP interface.

 *

 * The function looks into the RxPD and performs sanity tests on the

 * received buffer to ensure its a valid packet before processing it

 * further. If the packet is determined to be aggregated, it is

 * de-aggregated accordingly. Then skb is passed to AP packet forwarding logic.

 *

 * The completion callback is called after processing is complete.

 Reorder and send to kernel */

/*

 * This function fills the TxPD for AP tx packets.

 *

 * The Tx buffer received by this function should already have the

 * header space allocated for TxPD.

 *

 * This function inserts the TxPD in between interface header and actual

 * data and adjusts the buffer pointers accordingly.

 *

 * The following TxPD fields are set by this function, as required -

 *      - BSS number

 *      - Tx packet length and offset

 *      - Priority

 *      - Packet delay

 *      - Priority specific Tx control

 *      - Flags

		/*

		 * Set the priority specific tx_control field, setting of 0 will

		 * cause the default value to be used later in this function.

 Offset of actual data */

 Set the packet type and add header for management frame */

 make space for adapter->intf_hdr_len */

 TxCtrl set by user or default */

/*

 * NXP Wireless LAN device driver: 802.11n Aggregation

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * Creates an AMSDU subframe for aggregation into one AMSDU packet.

 *

 * The resultant AMSDU subframe format is -

 *

 * +---- ~ -----+---- ~ ------+---- ~ -----+----- ~ -----+---- ~ -----+

 * |     DA     |     SA      |   Length   | SNAP header |   MSDU     |

 * | data[0..5] | data[6..11] |            |             | data[14..] |

 * +---- ~ -----+---- ~ ------+---- ~ -----+----- ~ -----+---- ~ -----+

 * <--6-bytes--> <--6-bytes--> <--2-bytes--><--8-bytes--> <--n-bytes-->

 *

 * This function also computes the amount of padding required to make the

 * buffer length multiple of 4 bytes.

 *

 * Data => |DA|SA|SNAP-TYPE|........    .|

 * MSDU => |DA|SA|Length|SNAP|......   ..|

 LLC DSAP */

 LLC SSAP */

 LLC CTRL */

 SNAP OUI */

 SNAP type */

			/*

			 * This field will be overwritten

			 * later with ethertype

 Copy DA and SA */

 Copy SNAP header */

 Update Length field */

 Add payload */

 Add padding for new MSDU to start from 4 byte boundary */

/*

 * Adds TxPD to AMSDU header.

 *

 * Each AMSDU packet will contain one TxPD at the beginning,

 * followed by multiple AMSDU subframes.

 Original priority has been overwritten */

 Always zero as the data is followed by struct txpd */

 TxCtrl set by user or default */

/*

 * Create aggregated packet.

 *

 * This function creates an aggregated MSDU packet, by combining buffers

 * from the RA list. Each individual buffer is encapsulated as an AMSDU

 * subframe and all such subframes are concatenated together to form the

 * AMSDU packet.

 *

 * A TxPD is also added to the front of the resultant AMSDU packets for

 * transmission. The resultant packets format is -

 *

 * +---- ~ ----+------ ~ ------+------ ~ ------+-..-+------ ~ ------+

 * |    TxPD   |AMSDU sub-frame|AMSDU sub-frame| .. |AMSDU sub-frame|

 * |           |       1       |       2       | .. |       n       |

 * +---- ~ ----+------ ~ ------+------ ~ ------+ .. +------ ~ ------+

	/* skb_aggr->data already 64 byte align, just reserve bus interface

	 * header and txpd.

 Check if AMSDU can accommodate this MSDU */

 Last AMSDU packet does not need padding */

 Form AMSDU */

/*

 * NXP Wireless LAN device driver: CFG80211

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * This function maps the nl802.11 channel type into driver channel type.

 *

 * The mapping is as follows -

 *      NL80211_CHAN_NO_HT     -> IEEE80211_HT_PARAM_CHA_SEC_NONE

 *      NL80211_CHAN_HT20      -> IEEE80211_HT_PARAM_CHA_SEC_NONE

 *      NL80211_CHAN_HT40PLUS  -> IEEE80211_HT_PARAM_CHA_SEC_ABOVE

 *      NL80211_CHAN_HT40MINUS -> IEEE80211_HT_PARAM_CHA_SEC_BELOW

 *      Others                 -> IEEE80211_HT_PARAM_CHA_SEC_NONE

/* This function maps IEEE HT secondary channel type to NL80211 channel type

/*

 * This function checks whether WEP is set.

/*

 * This function retrieves the private structure from kernel wiphy structure.

/*

 * CFG802.11 operation handler to delete a network key.

/*

 * This function forms an skb for management frame.

 Add packet data and address4 */

/*

 * CFG802.11 operation handler to transmit a management frame.

		/* Since we support offload probe resp, we need to skip probe

/*

 * CFG802.11 operation handler to register a mgmt frame.

/*

 * CFG802.11 operation handler to remain on channel.

/*

 * CFG802.11 operation handler to cancel remain on channel.

/*

 * CFG802.11 operation handler to set Tx power.

/*

 * CFG802.11 operation handler to get Tx power.

 tx_power_level is set in HostCmd_CMD_RF_TX_PWR command handler */

/*

 * CFG802.11 operation handler to set Power Save option.

 *

 * The timeout value, if provided, is currently ignored.

/*

 * CFG802.11 operation handler to set the default network key.

 Return if WEP key not configured */

/*

 * CFG802.11 operation handler to add a network key.

/*

 * CFG802.11 operation handler to set default mgmt key.

/*

 * This function sends domain information to the firmware.

 *

 * The following information are passed to the firmware -

 *      - Country codes

 *      - Sub bands (first channel, number of channels, maximum Tx power)

 Set country code */

/*

 * CFG802.11 regulatory domain callback function.

 *

 * This function is called when the regulatory domain is changed due to the

 * following reasons -

 *      - Set by driver

 *      - Set by system core

 *      - Set by user

 *      - Set bt Country IE

 Don't send world or same regdom info to firmware */

/*

 * This function sets the fragmentation threshold.

 *

 * The fragmentation threshold value must lie between MWIFIEX_FRAG_MIN_VALUE

 * and MWIFIEX_FRAG_MAX_VALUE.

/*

 * This function sets the RTS threshold.



 * The rts value must lie between MWIFIEX_RTS_MIN_VALUE

 * and MWIFIEX_RTS_MAX_VALUE.

/*

 * CFG802.11 operation handler to set wiphy parameters.

 *

 * This function can be used to set the RTS threshold and the

 * Fragmentation threshold of the driver.

/*

 * This function initializes the functionalities for P2P client.

 * The P2P client initialization sequence is:

 * disable -> device -> client

/*

 * This function initializes the functionalities for P2P GO.

 * The P2P GO initialization sequence is:

 * disable -> device -> GO

/*

 * CFG802.11 operation handler to change interface type.

 bit[1-0]: 00=LG 01=HT 10=VHT */

 HT */

 VHT */

 HT or VHT */

		/*

		 * Bit 0 in htinfo indicates that current rate is 11n. Valid

		 * MCS index values for us are 0 to 15.

 Decode legacy rates for non-HT. */

 Bitrates in multiples of 100kb/s. */

 MWIFIEX_RATE_INDEX_OFDM0 */

/*

 * This function dumps the station information on a buffer.

 *

 * The following information are shown -

 *      - Total bytes transmitted

 *      - Total bytes received

 *      - Total packets transmitted

 *      - Total packets received

 *      - Signal quality level

 *      - Transmission rate

 Get signal information from the firmware */

 Get DTIM period information from firmware */

 bit rate is in 500 kb/s units. Convert it to 100kb/s units */

/*

 * CFG802.11 operation handler to get station information.

 *

 * This function only works in connected mode, and dumps the

 * requested station information, if available.

/*

 * CFG802.11 operation handler to dump station information.

 Supported rates to be advertised to the cfg80211 */

 Channel definitions to be advertised to cfg80211 */

 Supported crypto cipher suits to be advertised to cfg80211 */

 Supported mgmt frame types to be advertised to cfg80211 */

/*

 * CFG802.11 operation handler for setting bit rates.

 *

 * Function configures data rates to firmware using bitrate mask

 * provided by cfg80211.

 Fill HR/DSSS rates. */

 Fill OFDM rates */

 Fill HT MCS rates */

 Fill VHT MCS rates */

/*

 * CFG802.11 operation handler for connection quality monitoring.

 *

 * This function subscribes/unsubscribes HIGH_RSSI and LOW_RSSI

 * events to FW.

 Subscribe/unsubscribe low and high rssi events */

/* cfg80211 operation handler for change_beacon.

 * Function retrieves and sets modified management IEs to FW.

/* cfg80211 operation handler for del_station.

 * Function deauthenticates station which value is provided in mac parameter.

 * If mac is NULL/broadcast, all stations in associated station list are

 * deauthenticated. If bss is not started or there are no stations in

 * associated stations list, no action is taken.

		/* Not a MIMO chip. User should provide specific antenna number

		 * for Tx/Rx path or enable all antennas for diversity

/* cfg80211 operation handler for stop ap.

 * Function stops BSS running at uAP interface.

/* cfg80211 operation handler for start_ap.

 * Function sets beacon period, DTIM period, SSID and security into

 * AP config structure.

 * AP is configured with these settings and BSS is started.

 sta_ao_timer/ps_sta_ao_timer is in unit of 100ms */

/*

 * CFG802.11 operation handler for disconnection request.

 *

 * This function does not work when there is already a disconnection

 * procedure going on.

/*

 * This function informs the CFG802.11 subsystem of a new IBSS.

 *

 * The following information are sent to the CFG802.11 subsystem

 * to register the new IBSS. If we do not register the new IBSS,

 * a kernel panic will result.

 *      - SSID

 *      - SSID length

 *      - BSSID

 *      - Channel

/*

 * This function connects with a BSS.

 *

 * This function handles both Infra and Ad-Hoc modes. It also performs

 * validity checking on the provided parameters, disconnects from the

 * current BSS (if any), sets up the association/scan parameters,

 * including security settings, and performs specific SSID scan before

 * trying to connect.

 *

 * For Infra mode, the function returns failure if the specified SSID

 * is not found in scan table. However, for Ad-Hoc mode, it can create

 * the IBSS if it does not exist. On successful completion in either case,

 * the function notifies the CFG802.11 subsystem of the new BSS connection.

	/* As this is new association, clear locally stored

 set ibss coalescing_status */

 "privacy" is set only for ad-hoc mode */

			/*

			 * Keep WLAN_CIPHER_SUITE_WEP104 for now so that

			 * the firmware can find a matching network from the

			 * scan. The cfg80211 does not give us the encryption

			 * mode at this stage so just setting it to WEP here.

 Now handle infra mode. "sme" is valid for infra mode only */

	/*

	 * Scan entries are valid for some time (15 sec). So we can save one

	 * active scan time if we just try cfg80211_get_bss first. If it fails

	 * then request scan and cfg80211_get_bss() again for final output.

 Do specific SSID scanning */

 Find the BSS we want using available scan results */

		/* Inform the BSS information to kernel, otherwise

 Pass the selected BSS entry to caller. */

/*

 * CFG802.11 operation handler for association request.

 *

 * This function does not work when the current mode is set to Ad-Hoc, or

 * when there is already an association procedure going on. The given BSS

 * information is used to associate.

/*

 * This function sets following parameters for ibss network.

 *  -  channel

 *  -  start band

 *  -  11n flag

 *  -  secondary channel offset

				/*

				 * Rates below 6 Mbps in the table are CCK

				 * rates; 802.11b and from 6 they are OFDM;

				 * 802.11G

/*

 * CFG802.11 operation handler to join an IBSS.

 *

 * This function does not work in any mode other than Ad-Hoc, or if

 * a join operation is already in progress.

/*

 * CFG802.11 operation handler to leave an IBSS.

 *

 * This function does not work if a leave operation is

 * already in progress.

/*

 * CFG802.11 operation handler for scan request.

 *

 * This function issues a scan request to the firmware based upon

 * the user specified scan configuration. On successful completion,

 * it also informs the results.

	/* Block scan request if scan operation or scan cleanup when interface

	 * is disabled is in process

/* CFG802.11 operation handler for sched_scan_start.

 *

 * This function issues a bgscan config request to the firmware based upon

 * the user specified sched_scan configuration. On successful completion,

 * firmware will generate BGSCAN_REPORT event, driver should issue bgscan

 * query command to get sched_scan results from firmware.

 Use at least 15 second for per scan cycle */

/* CFG802.11 operation handler for sched_scan_stop.

 *

 * This function issues a bgscan config command to disable

 * previous bgscan configuration in the firmware

 Update MCS support for VHT */

/*

 * This function sets up the CFG802.11 specific HT capability fields

 * with default values.

 *

 * The following default values are set -

 *      - HT Supported = True

 *      - Maximum AMPDU length factor = IEEE80211_HT_MAX_AMPDU_64K

 *      - Minimum AMPDU spacing = IEEE80211_HT_MPDU_DENSITY_NONE

 *      - HT Capabilities supported by firmware

 *      - MCS information, Rx mask = 0xff

 *      - MCD information, Tx parameters = IEEE80211_HT_MCS_TX_DEFINED (0x01)

 Fill HT capability information */

 Set MCS for 1x1/2x2 */

 Clear all the other values */

 Set MCS32 for infra mode or ad-hoc mode with 40MHz support */

/*

 *  create a new virtual interface with the given name and name assign type

		/* At start-up, wpa_supplicant tries to change the interface

		 * to NL80211_IFTYPE_STATION if it is not managed mode.

		/* Setting bss_type to P2P tells firmware that this interface

		 * is receiving P2P peers found during find phase and doing

		 * action frame handshake.

 Register network device */

/*

 * del_virtual_intf: remove the virtual interface determined by dev

 Clear the priv in adapter */

			/* wildcard bytes record as the offset

			 * before the valid byte

 Enable ARP offload feature */

/* cfg80211 ops handler for tdls_mgmt.

 * Function prepares TDLS action frame packets and forwards them to FW

 make sure we are in station mode and connected */

 make sure we are in station mode and connected */

 shouldn't happen!*/

 shouldn't happen!*/

 shouldn't happen!*/

 make sure we are in station mode and connected */

 keep last */

 process hostcmd response*/

 we support change_station handler only for TDLS peers*/

 make sure we are in station mode and connected */

 station cfg80211 operations */

	/* allocate twice the number total channels, since the driver issues an

	 * additional active scan request for hidden SSIDs on passive channels.

/*

 * This function registers the device with CFG802.11 subsystem.

 *

 * The function creates the wireless device/wiphy, populates it with

 * default parameters and handler function pointers, and finally

 * registers the device.

 create a new wiphy for use with cfg80211 */

 Initialize cipher suits */

 Reserve space for mwifiex specific private data for BSS */

 Set struct mwifiex_adapter pointer in wiphy_priv */

/*

 * NXP Wireless LAN device driver: AP event handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

			/* Point the regular IEEE IE 2 bytes into the Marvell IE

			 * and setup the IEEE IE type and length byte fields

/*

 * This function handles AP interface specific events generated by firmware.

 *

 * Event specific routines are called by this function based

 * upon the generated event cause.

 *

 *

 * Events supported for AP -

 *      - EVENT_UAP_STA_ASSOC

 *      - EVENT_UAP_STA_DEAUTH

 *      - EVENT_UAP_BSS_ACTIVE

 *      - EVENT_UAP_BSS_START

 *      - EVENT_UAP_BSS_IDLE

 *      - EVENT_UAP_MIC_COUNTERMEASURES:

				/* There will be ETH_ALEN bytes of

				 * current_ap_addr before the re-assoc ies.

 For future development */

/* This function deletes station entry from associated station list.

 * Also if both AP and STA are 11n enabled, RxReorder tables and TxBA stream

 * tables created for this station are deleted.

/*

 * NXP Wireless LAN device driver: management IE handling- setting and

 * deleting IE.

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/* This function checks if current IE index is used by any on other interface.

 * Return: -1: yes, current IE index is used by someone else.

 *          0: no, current IE index is NOT used by other interface.

 Get unused IE index. This index will be used for setting new IE */

 This function prepares IE data buffer for command to be sent to FW */

 automatic addition */

			/*

			 * Check if this index is being used on any

			 * other interface.

/* Copy individual custom IEs for beacon, probe response and assoc response

 * and prepare single structure for IE setting.

 * This function also updates allocated IE indices from driver.

 save beacon ie index after auto-indexing */

 save probe resp ie index after auto-indexing */

 save assoc resp ie index after auto-indexing */

/* This function checks if the vendor specified IE is present in passed buffer

 * and copies it to mwifiex_ie structure.

 * Function takes pointer to struct mwifiex_ie pointer as argument.

 * If the vendor specified IE is present then memory is allocated for

 * mwifiex_ie pointer and filled in with IE. Caller should take care of freeing

 * this memory.

/* This function parses beacon IEs, probe response IEs, association response IEs

 * from cfg80211_ap_settings->beacon and sets these IE to FW.

/* This function parses  head and tail IEs, from cfg80211_beacon_data and sets

 * these IE to FW.

	/* Many IEs are generated in FW by parsing bss configuration.

	 * Let's not add them here; else we may end up duplicating these IEs

 Skip only Microsoft WMM IE */

	/* parse only WPA vendor IE from tail, WMM IE is configured by

	 * bss_config command

/* This function parses different IEs-head & tail IEs, beacon IEs,

 * probe response IEs, association response IEs from cfg80211_ap_settings

 * function and sets these IE to FW.

 This function removes management IE set */

/*

 * NXP Wireless LAN device driver: scan ioctl and command handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

 The maximum number of channels the firmware can scan per command */

 Memory needed to store a max sized Channel List TLV for a firmware scan */

 Memory needed to store supported rate */

/* Memory needed to store a max number/size WildCard SSID TLV for a firmware

 Maximum memory needed for a mwifiex_scan_cmd_config with all TLVs at max */

 Scan configuration (variable length) */

 Max allocated block */

 TKIP */

 AES  */

 TKIP */

 AES  */

/*

 * This function parses a given IE for a given OUI.

 *

 * This is used to parse a WPA/RSN IE to find if it has

 * a given oui in PTK.

	/* There could be multiple OUIs for PTK hence

	   1) Take the length.

	   2) Check all the OUIs for AES.

/*

 * This function checks if a given OUI is present in a RSN IE.

 *

 * The function first checks if a RSN IE is present or not in the

 * BSS descriptor. It tries to locate the OUI only if such an IE is

 * present.

/*

 * This function checks if a given OUI is present in a WPA IE.

 *

 * The function first checks if a WPA IE is present or not in the

 * BSS descriptor. It tries to locate the OUI only if such an IE is

 * present.

/*

 * This function compares two SSIDs and checks if they match.

/*

 * This function checks if wapi is enabled in driver and scanned network is

 * compatible with it.

/*

 * This function checks if driver is configured with no security mode and

 * scanned network is compatible with it.

/*

 * This function checks if static WEP is enabled in driver and scanned network

 * is compatible with it.

/*

 * This function checks if wpa is enabled in driver and scanned network is

 * compatible with it.

	   /*

	    * Privacy bit may NOT be set in some APs like

	    * LinkSys WRT54G && bss_desc->privacy

/*

 * This function checks if wpa2 is enabled in driver and scanned network is

 * compatible with it.

		/*

		 * Privacy bit may NOT be set in some APs like

		 * LinkSys WRT54G && bss_desc->privacy

/*

 * This function checks if adhoc AES is enabled in driver and scanned network is

 * compatible with it.

/*

 * This function checks if dynamic WEP is enabled in driver and scanned network

 * is compatible with it.

/*

 * This function checks if a scanned network is compatible with the driver

 * settings.

 *

 *   WEP     WPA    WPA2   ad-hoc encrypt                  Network

 * enabled enabled enabled  AES    mode   Privacy WPA WPA2 Compatible

 *    0       0       0      0     NONE      0     0   0   yes No security

 *    0       1       0      0      x        1x    1   x   yes WPA (disable

 *                                                         HT if no AES)

 *    0       0       1      0      x        1x    x   1   yes WPA2 (disable

 *                                                         HT if no AES)

 *    0       0       0      1     NONE      1     0   0   yes Ad-hoc AES

 *    1       0       0      0     NONE      1     0   0   yes Static WEP

 *                                                         (disable HT)

 *    0       0       0      0    !=NONE     1     0   0   yes Dynamic WEP

 *

 * Compatibility is not matched while roaming, except for mode.

 Don't check for compatibility if roaming */

 No security */

 Static WEP enabled */

 WPA enabled */

 WPA2 enabled */

 Ad-hoc AES enabled */

 Dynamic WEP enabled */

 Security doesn't match */

 Mode doesn't match */

/*

 * This function creates a channel list for the driver to scan, based

 * on region/band information.

 *

 * This routine is used for any scan that is not provided with a

 * specific channel list to scan.

/* This function creates a channel list tlv for bgscan config, based

 * on region/band information.

 This function appends rate TLV to scan config command. */

/*

 * This function constructs and sends multiple scan config commands to

 * the firmware.

 *

 * Previous routines in the code flow have created a scan command configuration

 * with any requested TLVs.  This function splits the channel TLV into maximum

 * channels supported per scan lists and sends the portion of the channel TLV,

 * along with the other TLVs, to the firmware.

 Check csa channel expiry before preparing scan list */

	/* Set the temp channel struct pointer to the start of the desired

	/* Loop through the desired channel list, sending a new firmware scan

	   commands for each max_chan_per_scan channels (or for 1,6,11

		/*

		 * Construct the Channel TLV for the scan command.  Continue to

		 * insert channel TLVs until:

		 *   - the tlv_idx hits the maximum configured per scan command

		 *   - the next channel to insert is 0 (end of desired channel

		 *     list)

		 *   - done_early is set (controlling individual scanning of

		 *     1,6,11)

			/* Copy the current channel TLV to the command being

			/* Increment the TLV header length by the size

			/*

			 * The tlv buffer length is set to the number of bytes

			 * of the between the channel tlv pointer and the start

			 * of the tlv buffer.  This compensates for any TLVs

			 * that were appended before the channel list.

			/* Add the size of the channel tlv header and the data

			/* Increment the index to the channel tlv we are

 Count the total scan time per command */

			/* Stop the loop if the *current* channel is in the

			   1,6,11 set and we are not filtering on a BSSID

			/* Increment the tmp pointer to the next channel to

			/* Stop the loop if the *next* channel is in the 1,6,11

			   set.  This will cause it to be the only channel

		/* The total scan time should be less than scan command timeout

		/* Send the scan command to the firmware with the specified

		/* rate IE is updated per scan command but same starting

		 * pointer is used each time so that rate IE from earlier

		 * scan_cfg_out->buf is overwritten with new one.

/*

 * This function constructs a scan command configuration structure to use

 * in scan commands.

 *

 * Application layer or other functions can invoke network scanning

 * with a scan configuration supplied in a user scan configuration structure.

 * This structure is used as the basis of one or many scan command configuration

 * commands that are sent to the command processing module and eventually to the

 * firmware.

 *

 * This function creates a scan command configuration structure  based on the

 * following user supplied parameters (if present):

 *      - SSID filter

 *      - BSSID filter

 *      - Number of Probes to be sent

 *      - Channel list

 *

 * If the SSID or BSSID filter is not present, the filter is disabled/cleared.

 * If the number of probes is not set, adapter default setting is used.

	/* The tlv_buf_len is calculated for each scan command.  The TLVs added

	   in this routine will be preserved since the routine that sends the

	   command will append channelTLVs at *chan_list_out.  The difference

	   between the *chan_list_out and the tlv_buf start will be used to

	/* Running tlv pointer.  Assigned to chan_list_out at end of function

	   so later routines know where channels can be added to the command

	/* Initialize the scan as un-filtered; the flag is later set to TRUE

	/* Initialize the scan as not being only on the current channel.  If

	   the channel list is customized, only contains one channel, and is

		/* Default the ssid_filter flag to TRUE, set false under

		   certain wildcard conditions and qualified by the existence

		/* Set the BSS type scan filter, use Adapter setting if

		/* Set the number of probes to send, use Adapter setting

		/*

		 * Set the BSSID filter to the incoming configuration,

		 * if non-zero.  If not set, it will remain disabled

		 * (all zeros).

			/*

			 * max_ssid_length = 0 tells firmware to perform

			 * specific scan for the SSID filled, whereas

			 * max_ssid_length = IEEE80211_MAX_SSID_LEN is for

			 * wildcard scan.

			/* Empty wildcard ssid with a maxlen will match many or

			   potentially all SSIDs (maxlen == 32), therefore do

			   not treat the scan as

		/*

		 *  The default number of channels sent in the command is low to

		 *  ensure the response buffer from the firmware does not

		 *  truncate scan results.  That is not an issue with an SSID

		 *  or BSSID filter applied to the scan results in the firmware.

	/*

	 *  If a specific BSSID or SSID is used, the number of channels in the

	 *  scan command will be increased to the absolute maximum.

	/* If the input config or adapter has the number of Probes set,

 Append vendor specific IE TLV */

	/*

	 * Set the output for the channel TLV to the address in the tlv buffer

	 *   past any TLVs that were added in this function (SSID, num_probes).

	 *   Channel TLVs will be added past this for each scan command,

	 *   preserving the TLVs that were previously added.

 Check if we are only scanning the current channel */

/*

 * This function inspects the scan response buffer for pointers to

 * expected TLVs.

 *

 * TLVs can be included at the end of the scan response BSS information.

 *

 * Data in the buffer is parsed pointers to TLVs that can potentially

 * be passed back in the response.

 Give up, this seems corrupted */

 while */

/*

 * This function parses provided beacon buffer and updates

 * respective fields in bss descriptor structure.

 Process variable IE */

			/*

			 * Only process extended supported rate

			 * if data rate is already found.

			 * Data rate IE should come before

			 * extended supported rate IE

 802.11 requires at least 3-byte OUI. */

 Not long enough for a match? Skip it. */

					/*

					 * Only accept and copy the WMM IE if

					 * it matches the size expected for the

					 * WMM Info IE or the WMM Parameter IE.

 while (bytes_left > 2) */

/*

 * This function converts radio type scan parameter to a band configuration

 * to be used in join command.

/*

 * This is an internal function used to start a scan based on an input

 * configuration.

 *

 * This uses the input user scan configuration information when provided in

 * order to send the appropriate scan commands to firmware to populate or

 * update the internal driver scan table.

 Get scan command from scan_pending_q and put to cmd_pending_q */

 Perform internal scan synchronously */

/*

 * This function prepares a scan command to be sent to the firmware.

 *

 * This uses the scan command configuration sent to the command processing

 * module in command preparation stage to configure a scan command structure

 * to send to firmware.

 *

 * The fixed fields specifying the BSS type and BSSID filters as well as a

 * variable number/length of TLVs are sent in the command to firmware.

 *

 * Preparation also includes -

 *      - Setting command ID, and proper size

 *      - Ensuring correct endian-ness

 Set fixed field variables in scan command */

 Size is equal to the sizeof(fixed portions) + the TLV len + header */

/*

 * This function checks compatibility of requested network with current

 * driver settings.

 This function checks if SSID string contains all zeroes or length is zero */

/* This function checks if any hidden SSID found in passive scan channels

 * and save those channels for specific SSID active scan

 Allocate and fill new bss descriptor */

	/* beacon_ie buffer was allocated in function

	 * mwifiex_fill_new_bss_desc(). Free it now.

 Allocate and fill new bss descriptor */

 Make a copy of current BSSID descriptor */

	/* The contents of beacon_ie will be copied to its own buffer

	 * in mwifiex_save_curr_bcn()

	/* beacon_ie buffer was allocated in function

	 * mwifiex_fill_new_bss_desc(). Free it now.

 Extract & convert beacon size from command buffer */

	/* Initialize the current working beacon pointer for this BSS

	 * iteration

 Advance the return beacon pointer past the current beacon */

	/* First 5 fields are bssid, RSSI(for legacy scan only),

	 * time stamp, beacon interval, and capability information

 Convert dBm to mBm */

 Rest of the current buffer are IE's */

 Skip entry if on csa closed channel */

/* This function checks if any hidden SSID found in passive scan channels

 * and do specific SSID active scan for those channels

		/* Get scan command from scan_pending_q and put to

		 * cmd_pending_q

/*

 * This function handles the command response of scan.

 *

 * The response buffer for the scan command has the following

 * memory layout:

 *

 *      .-------------------------------------------------------------.

 *      |  Header (4 * sizeof(t_u16)):  Standard command response hdr |

 *      .-------------------------------------------------------------.

 *      |  BufSize (t_u16) : sizeof the BSS Description data          |

 *      .-------------------------------------------------------------.

 *      |  NumOfSet (t_u8) : Number of BSS Descs returned             |

 *      .-------------------------------------------------------------.

 *      |  BSSDescription data (variable, size given in BufSize)      |

 *      .-------------------------------------------------------------.

 *      |  TLV data (variable, size calculated using Header->Size,    |

 *      |            BufSize and sizeof the fixed fields above)       |

 *      .-------------------------------------------------------------.

 Check csa channel expiry before parsing scan response */

	/*

	 * The size of the TLV buffer is equal to the entire command response

	 *   size (scan_resp_size) minus the fixed fields (sizeof()'s), the

	 *   BSS Descriptions (bss_descript_size as bytesLef) and the command

	 *   response header (S_DS_GEN)

	/* Search the TLV buffer space in the scan response for any valid

	/* Search the TLV buffer space in the scan response for any valid

		/*

		 * If the TSF TLV was appended to the scan results, save this

		 * entry's TSF value in the fw_tsf field. It is the firmware's

		 * TSF value at the time the beacon or probe response was

		 * received.

/*

 * This function prepares an extended scan command to be sent to the firmware

 *

 * This uses the scan command configuration sent to the command processing

 * module in command preparation stage to configure a extended scan command

 * structure to send to firmware.

 Size is equal to the sizeof(fixed portions) + the TLV len + header */

/* This function prepares an background scan config command to be sent

 * to the firmware

  stop sched scan  */

		/* max_ssid_length = 0 tells firmware to perform

		 * specific scan for the SSID filled, whereas

		 * max_ssid_length = IEEE80211_MAX_SSID_LEN is for

		 * wildcard scan.

 Increment the TLV header length by size appended */

 Append vendor specific IE TLV */

 This function handles the command response of extended scan */

/* This function This function handles the event extended scan report. It

 * parses extended scan results and informs to cfg80211 stack.

		/* BSS response TLV with beacon or probe response buffer

		 * at the initial position of each descriptor

		/* Advance pointer to the beacon buffer length and

		 * update the bytes count so that the function

		 * wlan_interpret_bss_desc_with_ie() can handle the

		 * scan buffer withut any change

 Convert dBm to mBm */

/*

 * This function prepares command for background scan query.

 *

 * Preparation includes -

 *      - Setting command ID and proper size

 *      - Setting background scan flush parameter

 *      - Ensuring correct endian-ness

/*

 * This function inserts scan command node to the scan pending queue.

/*

 * This function sends a scan command for all available channels to the

 * firmware, filtered on a specific SSID.

/*

 * Sends IOCTL request to start a scan.

 *

 * This function allocates the IOCTL request buffer, fills it

 * with requisite parameters and calls the IOCTL handler.

 *

 * Scan command can be issued for both normal scan and specific SSID

 * scan, depending upon whether an SSID is provided or not.

 Specific SSID scan */

 Normal scan */

/*

 * This function appends the vendor specific IE TLV to a buffer.

	/*

	 * Traverse through the saved vendor specific IE array and append

	 * the selected(scan/assoc/adhoc) IE as TLV to the command

/*

 * This function saves a beacon buffer of the current BSS descriptor.

 *

 * The current beacon buffer is saved so that it can be restored in the

 * following cases that makes the beacon buffer not to contain the current

 * ssid's beacon buffer.

 *      - The current ssid was not found somehow in the last scan.

 *      - The current ssid was the last entry of the scan table and overloaded.

 allocate beacon buffer at 1st time; or if it's size has changed */

 adjust the pointers in the current BSS descriptor */

/*

 * This function frees the current BSS descriptor beacon buffer.

/*

 * NXP Wireless LAN device driver: USB specific handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

 8766 */

 8797 */

 8801 */

 8997 */

 Terminating entry */

/* This function handles received packet. Necessary action is taken based on

 * cmd/event/data.

 The buffer will be reused for further cmds/events */

 Do not free skb in case of command ep */

			/* urb for data_ep is re-submitted now;

			 * urb for cmd_ep will be re-submitted in callback

			 * mwifiex_usb_recv_complete

 Do not free skb in case of command ep */

 Do not free skb in case of command ep */

 fall through setup_for_next */

/* This function probes an mwifiex device and registers it. It allocates

 * the card structure, initiates the device registration and initialization

 * procedure by adding a logical interface.

 PID_1 is used for firmware downloading only */

 Reject broken descriptors. */

 Assume the driver can handle missing endpoints for now. */

/* Kernel needs to suspend all functions separately. Therefore all

 * registered functions must have drivers with suspend and resume

 * methods. Failing that the kernel simply removes the whole card.

 *

 * If already not suspended, this function allocates and sends a

 * 'host sleep activate' request to the firmware and turns off the traffic.

 Might still be loading firmware */

 Enable the Host Sleep */

	/* 'MWIFIEX_IS_SUSPENDED' bit indicates device is suspended.

	 * It must be set here before the usb_kill_urb() calls. Reason

	 * is in the complete handlers, urb->status(= -ENOENT) and

	 * this flag is used in combination to distinguish between a

	 * 'suspended' state and a 'disconnect' one.

/* Kernel needs to suspend all functions separately. Therefore all

 * registered functions must have drivers with suspend and resume

 * methods. Failing that the kernel simply removes the whole card.

 *

 * If already not resumed, this function turns on the traffic and

 * sends a 'host sleep cancel' request to the firmware.

	/* Indicate device resumed. The netdev queue will be resumed only

	 * after the urbs have been re-submitted

 Disable Host Sleep */

 Send the data block */

 Receive the data response */

	/* Packets in aggr_list will be send in either skb_aggr or

	 * write complete, delete the tx_aggr timer

 padding for aligning next packet header*/

 do not padding for last packet*/

 add aggregation interface header */

/* This function prepare data packet to be send under usb tx aggregation

 * protocol, check current usb aggregation status, link packet to aggrgation

 * list if possible, work flow as below:

 * (1) if only 1 packet available, add usb tx aggregation header and send.

 * (2) if packet is able to aggregated, link it to current aggregation list.

 * (3) if packet is not able to aggregated, aggregate and send exist packets

 *     in aggrgation list. Then, link packet in the list if there is more

 *     packet in transmit queue, otherwise try to transmit single packet.

 padding to ensure each packet alginment */

 next packet available in tx queue*/

 current packet could be aggregated*/

			    /* next packet could not be aggregated

			     * send current aggregation buffer

 last packet in tx queue */

 pending packets in aggregation buffer*/

				/* current packet not be able to aggregated,

				 * send aggr buffer first, then send packet.

 last packet, Aggregation and send */

			/* no pending packets in aggregation buffer,

			 * send current packet immediately

 Send NULL packet immediately*/

		/* packet will not been send immediately,

		 * set a timer to make sure it will be sent under

		 * strict time limit. Dynamically fit the timeout

		 * value, according to packets number in aggr_list

 Dyanmic fit timeout */

 no available urb, postcopy packet*/

 New aggregation begin, start timer */

 This function write a command/data packet to card. */

 get the data port structure for endpoint */

 This function register usb device and initialize parameter. */

 Allocate memory for transmit */

 Allocate memory for receive */

 Send pseudo data to check winner status first */

 copy the header of the fw_data to get the length */

 Command 7 doesn't have data length field */

 If the send/receive fails or CRC occurs then retry */

 send the firmware block */

 Receive the firmware block response */

 check 1st firmware block resp for highest bit set */

 returning success */

 check the firmware block response for CRC errors */

 Boot state changes after successful firmware download */

 This function wakes up the card. */

 Simulation of HS_AWAKE event */

 This function is called after the card has woken up. */

 USB specific */

/*

 * NXP Wireless LAN device driver: 802.11n RX Re-ordering

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/* This function will dispatch amsdu packet and forward it to kernel/upper

 * layer.

/* This function will process the rx packet and forward it to kernel/upper

 * layer.

/*

 * This function dispatches all packets in the Rx reorder table until the

 * start window.

 *

 * There could be holes in the buffer, which are skipped by the function.

 * Since the buffer is linear, the function uses rotation to simulate

 * circular buffer.

	/*

	 * We don't have a circular buffer, hence use rotation to simulate

	 * circular buffer

/*

 * This function dispatches all packets in the Rx reorder table until

 * a hole is found.

 *

 * The start window is adjusted automatically when a hole is located.

 * Since the buffer is linear, the function uses rotation to simulate

 * circular buffer.

	/*

	 * We don't have a circular buffer, hence use rotation to simulate

	 * circular buffer

/*

 * This function deletes the Rx reorder table and frees the memory.

 *

 * The function stops the associated timer and dispatches all the

 * pending packets in the Rx reorder table before deletion.

/*

 * This function returns the pointer to an entry in Rx reordering

 * table which matches the given TA/TID pair.

/* This function retrieves the pointer to an entry in Rx reordering

 * table which matches the given TA and deletes it.

/*

 * This function finds the last sequence number used in the packets

 * buffered in Rx reordering table.

/*

 * This function flushes all the packets in Rx reordering table.

 *

 * The function checks if any packets are currently buffered in the

 * table or not. In case there are packets available, it dispatches

 * them and then dumps the Rx reordering table.

/*

 * This function creates an entry in Rx reordering table for the

 * given TA/TID.

 *

 * The function also initializes the entry with sequence number, window

 * size as well as initializes the timer.

 *

 * If the received TA/TID pair is already present, all the packets are

 * dispatched and the window size is moved until the SSN.

	/*

	 * If we get a TID, ta pair which is already present dispatch all the

	 * the packets and move the window size until the ssn

 if !tbl then create one */

/*

 * This function prepares command for adding a BA request.

 *

 * Preparation includes -

 *      - Setting command ID and proper size

 *      - Setting add BA request buffer

 *      - Ensuring correct endian-ness

/*

 * This function prepares command for adding a BA response.

 *

 * Preparation includes -

 *      - Setting command ID and proper size

 *      - Setting add BA response buffer

 *      - Ensuring correct endian-ness

 If we don't support AMSDU inside AMPDU, reset the bit */

/*

 * This function prepares command for deleting a BA request.

 *

 * Preparation includes -

 *      - Setting command ID and proper size

 *      - Setting del BA request buffer

 *      - Ensuring correct endian-ness

/*

 * This function identifies if Rx reordering is needed for a received packet.

 *

 * In case reordering is required, the function will do the reordering

 * before sending it to kernel.

 *

 * The Rx reorder table is checked first with the received TID/TA pair. If

 * not found, the received packet is dispatched immediately. But if found,

 * the packet is reordered and all the packets in the updated Rx reordering

 * table is dispatched until a hole is found.

 *

 * For sequence number less than the starting window, the packet is dropped.

		/*

		 * If seq_num is less then starting win then ignore and drop

		 * the packet

	/*

	 * If this packet is a BAR we adjust seq_num as

	 * WinStart = seq_num

	/*

	 * Dispatch all packets sequentially from start_win until a

	 * hole is found and adjust the start_win appropriately

/*

 * This function deletes an entry for a given TID/TA pair.

 *

 * The TID/TA are taken from del BA event body.

/*

 * This function handles the command response of an add BA response.

 *

 * Handling includes changing the header fields into CPU format and

 * creating the stream, provided the add BA is accepted.

	/*

	 * Check if we had rejected the ADDBA, if yes then do not create

	 * the stream

/*

 * This function handles BA stream timeout event by preparing and sending

 * a command to the firmware.

/*

 * This function cleans up the Rx reorder table by deleting all the entries

 * and re-initializing.

/*

 * This function updates all rx_reorder_tbl's flags.

/* This function update all the rx_win_size based on coex flag

/* This function check coex for RX BA

/* This function handles rxba_sync event

/*

 * NXP Wireless LAN device driver: AP specific command handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/* This function parses security related parameters from cfg80211_ap_settings

 * and sets into FW understandable bss_config structure.

/* This function updates 11n related parameters from IE and sets them into

 * bss_config structure.

/* This function updates 11ac related parameters from IE

 * and sets them into bss_config structure.

/* This function updates 11ac related parameters from IE

 * and sets them into bss_config structure.

/* Enable VHT only when cfg80211_ap_settings has VHT IE.

 * Otherwise disable VHT.

/* This function finds supported rates IE from beacon parameter and sets

 * these rates into bss_config structure.

/* This function initializes some of mwifiex_uap_bss_param variables.

 * This helps FW in ignoring invalid values. These values may or may not

 * be get updated to valid ones at later stage.

/* This function parses BSS related parameters from structure

 * and prepares TLVs specific to WPA/WPA2 security.

 * These TLVs are appended to command buffer.

/* This function parses WMM related parameters from cfg80211_ap_settings

 * structure and updates bss_config structure.

/* This function parses BSS related parameters from structure

 * and prepares TLVs specific to WEP encryption.

 * These TLVs are appended to command buffer.

/* This function enable 11D if userspace set the country IE.

 Send cmd to FW to enable 11D function */

/* This function parses BSS related parameters from structure

 * and prepares TLVs. These TLVs are appended to command buffer.

 This function parses custom IEs from IE list and prepares command buffer */

/* Parse AP config structure and prepare TLV based command structure

 * to be sent to FW for uAP configuration

/* This function prepares AP specific deauth command with mac supplied in

 * function parameter.

/* This function prepares the AP specific commands before sending them

 * to the firmware.

 * This is a generic function which calls specific command preparation

 * routines based upon the command number.

 Set appropriate bands */

/*

 * NXP Wireless LAN device driver: ethtool

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * NXP Wireless LAN device driver: TDLS handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available on the worldwide web at

 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

 This function appends rate TLV to scan config command. */

 follow AP's channel bandwidth */

 find the minimum bandwidth between AP/TDLS peers */

 We need check AP's bandwidth when TDLS_WIDER_BANDWIDTH is off */

 Microsoft OUI 00:50:F2 */

 WME */

 WME param */

 WME ver */

 U-APSD not in use */

 use default WMM AC parameters for TDLS link*/

 len */

 Microsoft OUI 00:50:F2 */

 WME */

 WME info */

 WME ver */

 U-APSD no in use */

 Qos Info */

	/* Delay 10ms to make sure tdls setup confirm/teardown frame

	 * is received by peer

 add address 4 */

 move back for addr4 */

 init address 4 */

 Qos Info */

 Address4 */

 the TDLS link IE is always added last we are the responder */

/* This function process tdls action frame from peer.

 * Peer capabilities are stored into station node structure.

 payload 1+ category 1 + action 1 + dialog 1 */

 payload 1+ category 1 + action 1 + dialog 1 + status code 2*/

 copy the ie's value into ht_capb*/

 copy the ie's value into ht_oper*/

 copy the ie's value into vhtoper*/

 copy the ie's value into vhtcap*/

 make sure we are in station mode and connected */

 create new TDLS peer */

/*

 * NXP Wireless LAN device driver: debugfs

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * Proc info file read handler.

 *

 * This function is called when the 'info' file is opened for reading.

 * It prints the following driver related information -

 *      - Driver name

 *      - Driver version

 *      - Driver extended version

 *      - Interface name

 *      - BSS mode

 *      - Media state (connected or disconnected)

 *      - MAC address

 *      - Total number of Tx bytes

 *      - Total number of Rx bytes

 *      - Total number of Tx packets

 *      - Total number of Rx packets

 *      - Total number of dropped Tx packets

 *      - Total number of dropped Rx packets

 *      - Total number of corrupted Tx packets

 *      - Total number of corrupted Rx packets

 *      - Carrier status (on or off)

 *      - Tx queue status (started or stopped)

 *

 * For STA mode drivers, it also prints the following extra -

 *      - ESSID

 *      - BSSID

 *      - Channel

 *      - Region code

 *      - Multicast count

 *      - Multicast addresses

/*

 * Proc getlog file read handler.

 *

 * This function is called when the 'getlog' file is opened for reading

 * It prints the following log information -

 *      - Number of multicast Tx frames

 *      - Number of failed packets

 *      - Number of Tx retries

 *      - Number of multicast Tx retries

 *      - Number of duplicate frames

 *      - Number of RTS successes

 *      - Number of RTS failures

 *      - Number of ACK failures

 *      - Number of fragmented Rx frames

 *      - Number of multicast Rx frames

 *      - Number of FCS errors

 *      - Number of Tx frames

 *      - WEP ICV error counts

 *      - Number of received beacons

 *      - Number of missed beacons

/* Sysfs histogram file read handler.

 *

 * This function is called when the 'histogram' file is opened for reading

 * It prints the following histogram information -

 *      - Number of histogram samples

 *      - Receive packet number of each rx_rate

 *      - Receive packet number of each snr

 *      - Receive packet number of each nosie_flr

 *      - Receive packet number of each signal streath

/*

 * Proc debug file read handler.

 *

 * This function is called when the 'debug' file is opened for reading

 * It prints the following log information -

 *      - Interrupt count

 *      - WMM AC VO packets count

 *      - WMM AC VI packets count

 *      - WMM AC BE packets count

 *      - WMM AC BK packets count

 *      - Maximum Tx buffer size

 *      - Tx buffer size

 *      - Current Tx buffer size

 *      - Power Save mode

 *      - Power Save state

 *      - Deep Sleep status

 *      - Device wakeup required status

 *      - Number of wakeup tries

 *      - Host Sleep configured status

 *      - Host Sleep activated status

 *      - Number of Tx timeouts

 *      - Number of command timeouts

 *      - Last timed out command ID

 *      - Last timed out command action

 *      - Last command ID

 *      - Last command action

 *      - Last command index

 *      - Last command response ID

 *      - Last command response index

 *      - Last event

 *      - Last event index

 *      - Number of host to card command failures

 *      - Number of sleep confirm command failures

 *      - Number of host to card data failure

 *      - Number of deauthentication events

 *      - Number of disassociation events

 *      - Number of link lost events

 *      - Number of deauthentication commands

 *      - Number of association success commands

 *      - Number of association failure commands

 *      - Number of commands sent

 *      - Number of data packets sent

 *      - Number of command responses received

 *      - Number of events received

 *      - Tx BA stream table (TID, RA)

 *      - Rx reorder table (TID, TA, Start window, Window size, Buffer)

/*

 * Proc regrdwr file write handler.

 *

 * This function is called when the 'regrdwr' file is opened for writing

 *

 * This function can be used to write to a register.

/*

 * Proc regrdwr file read handler.

 *

 * This function is called when the 'regrdwr' file is opened for reading

 *

 * This function can be used to read from a register.

 No command has been given */

 Set command has been given */

 Get command has been given */

/* Proc debug_mask file read handler.

 * This function is called when the 'debug_mask' file is opened for reading

 * This function can be used read driver debugging mask value.

/* Proc debug_mask file read handler.

 * This function is called when the 'debug_mask' file is opened for reading

 * This function can be used read driver debugging mask value.

/* debugfs verext file write handler.

 * This function is called when the 'verext' file is opened for write

/* Proc verext file read handler.

 * This function is called when the 'verext' file is opened for reading

 * This function can be used read driver exteneed verion string.

/* Proc memrw file write handler.

 * This function is called when the 'memrw' file is opened for writing

 * This function can be used to write to a memory location.

/* Proc memrw file read handler.

 * This function is called when the 'memrw' file is opened for reading

 * This function can be used to read from a memory location.

/*

 * Proc rdeeprom file write handler.

 *

 * This function is called when the 'rdeeprom' file is opened for writing

 *

 * This function can be used to write to a RDEEPROM location.

/*

 * Proc rdeeprom read write handler.

 *

 * This function is called when the 'rdeeprom' file is opened for reading

 *

 * This function can be used to read from a RDEEPROM location.

 No command has been given */

 Get command has been given */

/* Proc hscfg file write handler

 * This function can be used to configure the host sleep parameters.

/* Proc hscfg file read handler

 * This function can be used to read host sleep configuration

 * parameters from driver.

/*

 * This function creates the debug FS directory structure and the files.

/*

 * This function removes the debug FS directory structure and the files.

/*

 * This function creates the top level proc directory.

/*

 * This function removes the top level proc directory.

/*

 * NXP Wireless LAN device driver: association and ad-hoc start/join

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * Append a generic IE as a pass through TLV to a TLV buffer.

 *

 * This function is called from the network join command preparation routine.

 *

 * If the IE buffer has been setup by the application, this routine appends

 * the buffer as a pass through TLV type to the request.

 Null Checks */

	/*

	 * If there is a generic ie buffer setup, append it to the return

	 *   parameter buffer pointer.

 Wrap the generic IE buffer with a pass through TLV type */

		/* Increment the return size and the return buffer pointer

		/* Copy the generic IE buffer to the output buffer, advance

		/* Increment the return size and the return buffer pointer

 Reset the generic IE buffer */

 return the length appended to the buffer */

/*

 * Append TSF tracking info from the scan table for the target AP.

 *

 * This function is called from the network join command preparation routine.

 *

 * The TSF table TSF sent to the firmware contains two TSF values:

 *      - The TSF of the target AP from its previous beacon/probe response

 *      - The TSF timestamp of our local MAC at the time we observed the

 *        beacon/probe response.

 *

 * The firmware uses the timestamp values to set an initial TSF value

 * in the MAC for the new association after a reassociation attempt.

 Null Checks */

 TSF at the time when beacon/probe_response was received */

/*

 * This function finds out the common rates between rate1 and rate2.

 *

 * It will fill common rates in rate1 as output if found.

 *

 * NOTE: Setting the MSB of the basic rates needs to be taken

 * care of, either before or after calling this function.

			/* Check common rate, excluding the bit for

/*

 * This function creates the intersection of the rates supported by a

 * target BSS and our adapter settings for use in an assoc/join command.

 Copy AP supported rates */

 Get the STA supported rates */

 Get the common rates between AP and STA supported rates */

/*

 * This function appends a WPS IE. It is called from the network join command

 * preparation routine.

 *

 * If the IE buffer has been setup by the application, this routine appends

 * the buffer as a WPS TLV type to the request.

	/*

	 * If there is a wps ie buffer setup, append it to the return

	 * parameter buffer pointer.

 Wrap the generic IE buffer with a pass through TLV type */

/*

 * This function appends a WAPI IE.

 *

 * This function is called from the network join command preparation routine.

 *

 * If the IE buffer has been setup by the application, this routine appends

 * the buffer as a WAPI TLV type to the request.

 Null Checks */

	/*

	 * If there is a wapi ie buffer setup, append it to the return

	 *   parameter buffer pointer.

 Wrap the generic IE buffer with a pass through TLV type */

		/* Increment the return size and the return buffer pointer

		/* Copy the wapi IE buffer to the output buffer, advance

		/* Increment the return size and the return buffer pointer

 return the length appended to the buffer */

/*

 * This function appends rsn ie tlv for wpa/wpa2 security modes.

 * It is called from the network join command preparation routine.

/*

 * This function prepares command for association.

 *

 * This sets the following parameters -

 *      - Peer MAC address

 *      - Listen interval

 *      - Beacon interval

 *      - Capability information

 *

 * ...and the following TLVs, as required -

 *      - SSID TLV

 *      - PHY TLV

 *      - SS TLV

 *      - Rates TLV

 *      - Authentication TLV

 *      - Channel TLV

 *      - WPA/WPA2 IE

 *      - 11n TLV

 *      - Vendor specific TLV

 *      - WMM TLV

 *      - WAPI IE

 *      - Generic IE

 *      - TSF TLV

 *

 * Preparation also includes -

 *      - Setting command ID and proper size

 *      - Ensuring correct endian-ness

 Save so we know which BSS Desc to use in the response handler */

 Set the listen interval */

 Set the beacon period */

 Get the common rates supported between the driver and the BSS Desc */

 Save the data rates into Current BSS state structure */

 Setup the Rates TLV in the association command */

 Add the Authentication type to be used for Auth frames */

		/* Append a channel TLV for the channel the attempted AP was

 Append vendor specific IE TLV */

 Set the Capability info at last */

/*

 * Association firmware command response handler

 *

 * The response buffer for the association command has the following

 * memory layout.

 *

 * For cases where an association response was not received (indicated

 * by the CapInfo and AId field):

 *

 *     .------------------------------------------------------------.

 *     |  Header(4 * sizeof(t_u16)):  Standard command response hdr |

 *     .------------------------------------------------------------.

 *     |  cap_info/Error Return(t_u16):                             |

 *     |           0xFFFF(-1): Internal error                       |

 *     |           0xFFFE(-2): Authentication unhandled message     |

 *     |           0xFFFD(-3): Authentication refused               |

 *     |           0xFFFC(-4): Timeout waiting for AP response      |

 *     .------------------------------------------------------------.

 *     |  status_code(t_u16):                                       |

 *     |        If cap_info is -1:                                  |

 *     |           An internal firmware failure prevented the       |

 *     |           command from being processed.  The status_code   |

 *     |           will be set to 1.                                |

 *     |                                                            |

 *     |        If cap_info is -2:                                  |

 *     |           An authentication frame was received but was     |

 *     |           not handled by the firmware.  IEEE Status        |

 *     |           code for the failure is returned.                |

 *     |                                                            |

 *     |        If cap_info is -3:                                  |

 *     |           An authentication frame was received and the     |

 *     |           status_code is the IEEE Status reported in the   |

 *     |           response.                                        |

 *     |                                                            |

 *     |        If cap_info is -4:                                  |

 *     |           (1) Association response timeout                 |

 *     |           (2) Authentication response timeout              |

 *     .------------------------------------------------------------.

 *     |  a_id(t_u16): 0xFFFF                                       |

 *     .------------------------------------------------------------.

 *

 *

 * For cases where an association response was received, the IEEE

 * standard association response frame is returned:

 *

 *     .------------------------------------------------------------.

 *     |  Header(4 * sizeof(t_u16)):  Standard command response hdr |

 *     .------------------------------------------------------------.

 *     |  cap_info(t_u16): IEEE Capability                          |

 *     .------------------------------------------------------------.

 *     |  status_code(t_u16): IEEE Status Code                      |

 *     .------------------------------------------------------------.

 *     |  a_id(t_u16): IEEE Association ID                          |

 *     .------------------------------------------------------------.

 *     |  IEEE IEs(variable): Any received IEs comprising the       |

 *     |                      remaining portion of a received       |

 *     |                      association response frame.           |

 *     .------------------------------------------------------------.

 *

 * For simplistic handling, the status_code field can be used to determine

 * an association success (0) or failure (non-zero).

 Send a Media Connected event, according to the Spec */

 Set the attempted BSSID Index to current */

 Make a copy of current BSSID descriptor */

 Update curr_bss_params */

 Store the bandwidth information from assoc response */

		/* Don't re-enable carrier until we get the WMM_GET_STATUS

		/* Since WMM is not enabled, setup the queues with the

 Reset SNR/NF/RSSI values */

	/* Add the ra_list here for infra mode as there will be only 1 ra

 Need to indicate IOCTL complete */

/*

 * This function prepares command for ad-hoc start.

 *

 * Driver will fill up SSID, BSS mode, IBSS parameters, physical

 * parameters, probe delay, and capability information. Firmware

 * will fill up beacon period, basic rates and operational rates.

 *

 * In addition, the following TLVs are added -

 *      - Channel TLV

 *      - Vendor specific IE

 *      - WPA/WPA2 IE

 *      - HT Capabilities IE

 *      - HT Information IE

 *

 * Preparation also includes -

 *      - Setting command ID and proper size

 *      - Ensuring correct endian-ness

	/*

	 * Fill in the parameters for 2 data structures:

	 *   1. struct host_cmd_ds_802_11_ad_hoc_start command

	 *   2. bss_desc

	 * Driver will fill up SSID, bss_mode,IBSS param, Physical Param,

	 * probe delay, and Cap info.

	 * Firmware will fill up beacon period, Basic rates

	 * and operational rates.

 Set the BSS mode */

 Set Physical param set */

 Parameter IE Id */

 Parameter IE length */

 Set IBSS param set */

 IBSS parameter IE Id */

 IBSS parameter IE length */

 Set Capability info */

 Set up privacy in bss_desc */

 Ad-Hoc capability privacy on */

 Find the last non zero */

 Copy the ad-hoc creating rates into Current BSS rate structure */

 Append a channel TLV */

 Append vendor specific IE TLV */

 Fill HT CAPABILITY */

 Fill HT INFORMATION */

/*

 * This function prepares command for ad-hoc join.

 *

 * Most of the parameters are set up by copying from the target BSS descriptor

 * from the scan response.

 *

 * In addition, the following TLVs are added -

 *      - Channel TLV

 *      - Vendor specific IE

 *      - WPA/WPA2 IE

 *      - 11n IE

 *

 * Preparation also includes -

 *      - Setting command ID and proper size

 *      - Ensuring correct endian-ness

 Use G protection */

 Information on BSSID descriptor passed to FW */

 Copy Data Rates from the Rates recorded in scan response */

 Copy the adhoc join rates into Current BSS state structure */

 Copy the channel information */

 Append a channel TLV */

 Append vendor specific IE TLV */

/*

 * This function handles the command response of ad-hoc start and

 * ad-hoc join.

 *

 * The function generates a device-connected event to notify

 * the applications, in case of successful ad-hoc start/join, and

 * saves the beacon buffer.

 Join result code 0 --> SUCCESS */

 Send a Media Connected event, according to the Spec */

 Update the created network descriptor with the new BSSID */

		/*

		 * Now the join cmd should be successful.

		 * If BSSID has changed use SSID to compare instead of BSSID

		/*

		 * Make a copy of current BSSID descriptor, only needed for

		 * join since the current descriptor is already being used

		 * for adhoc start

 Need to indicate IOCTL complete */

/*

 * This function associates to a specific BSS discovered in a scan.

 *

 * It clears any past association response stored for application

 * retrieval and calls the command preparation routine to send the

 * command to firmware.

	/* Return error if the adapter is not STA role or table entry

	 * is not marked as infra.

	/* Clear any past association response stored for application

/*

 * This function starts an ad-hoc network.

 *

 * It calls the command preparation routine to send the command to firmware.

/*

 * This function joins an ad-hoc network found in a previous scan.

 *

 * It calls the command preparation routine to send the command to firmware,

 * if already not connected to the requested SSID.

 Check if the requested SSID is already joined */

/*

 * This function deauthenticates/disconnects from infra network by sending

 * deauthentication request.

/*

 * This function deauthenticates/disconnects from a BSS.

 *

 * In case of infra made, it sends deauthentication request, and

 * in case of ad-hoc mode, a stop network request is sent to the firmware.

 * In AP mode, a command to stop bss is sent to firmware.

 This function deauthenticates/disconnects from all BSS. */

/*

 * This function converts band to radio type used in channel TLV.

/*

 * NXP Wireless LAN device driver: PCIE and platform specific quirks

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

 quirk table based on DMI matching */

 match for SKU here due to generic product name "Surface Pro" */

 match for SKU here due to generic product name "Surface Pro" */

 Power-cycle (put into D3cold then D0) */

	/* We need to perform power-cycle also for bridge of wifi because

	 * on some devices (e.g. Surface Book 1), the OS for some reasons

	 * can't know the real power state of the bridge.

	 * When tried to power-cycle only wifi, the reset failed with the

	 * following dmesg log:

	 * "Cannot transition to power state D0 for parent in D3hot".

/*

 * NXP Wireless LAN device driver: HW/FW Initialization

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * This function adds a BSS priority table to the table list.

 *

 * The function allocates a new BSS priority table node and adds it to

 * the end of BSS priority table list, kept in driver memory.

/*

 * This function initializes the private structure and sets default

 * values to the members.

 *

 * Additionally, it also initializes all the locks and sets up all the

 * lists.

 Initially indicate the rate as auto */

 beacon interval */

/*

 * This function allocates buffers for members of the adapter

 * structure.

 *

 * The memory allocated includes scan table, command buffers, and

 * sleep confirm command buffer. In addition, the queues are

 * also initialized.

 Allocate command buffer */

/*

 * This function initializes the adapter structure and sets default

 * values to the members of adapter.

 *

 * This also initializes the WMM related parameters in the driver private

 * structures.

	adapter->local_listen_interval = 0;	/* default value in firmware

	adapter->gen_null_pkt = false;	/* Disable NULL Pkg generation by

	adapter->pps_uapsd_mode = false; /* Disable pps/uapsd mode by

/*

 * This function sets trans_start per tx_queue

/*

 * This function wakes up all queues in net_device

/*

 * This function stops all queues in net_device

/*

 * This function invalidates the list heads.

/*

 * This function performs cleanup for adapter structure.

 *

 * The cleanup is done recursively, by canceling all pending

 * commands, freeing the member buffers previously allocated

 * (command buffers, scan table buffer, sleep confirm command

 * buffer), stopping the timers and calling the cleanup routines

 * for every interface.

 Free command buffer */

/*

 *  This function intializes the lock variables and

 *  the list heads.

 Initialize cmd_free_q */

 Initialize cmd_pending_q */

 Initialize scan_pending_q */

/*

 * This function initializes the firmware.

 *

 * The following operations are performed sequentially -

 *      - Allocate adapter structure

 *      - Initialize the adapter structure

 *      - Initialize the private structure

 *      - Add BSS priority tables to the adapter structure

 *      - For each interface, send the init commands to firmware

 *      - Send the first command in command pending queue, if available

 Allocate memory for member of adapter structure */

 Initialize adapter structure */

 Initialize private structure */

 Send the first command in queue and return */

/*

 * This function deletes the BSS priority tables.

 *

 * The function traverses through all the allocated BSS priority nodes

 * in every BSS priority table and frees them.

 bss priority lock */

/*

 * This function frees the private structure, including cleans

 * up the TX and RX queues and frees the BSS priority tables.

/*

 * This function is used to shutdown the driver.

 *

 * The following operations are performed sequentially -

 *      - Check if already shut down

 *      - Make sure the main process has stopped

 *      - Clean up the Tx and Rx queues

 *      - Delete BSS priority tables

 *      - Free the adapter

 *      - Notify completion

 mwifiex already shutdown */

 cancel current command */

 shut down mwifiex */

 Clean up Tx/Rx queues and delete BSS priority table */

/*

 * This function downloads the firmware to the card.

 *

 * The actual download is preceded by two sanity checks -

 *      - Check if firmware is already running

 *      - Check if the interface is the winner to download the firmware

 *

 * ...and followed by another -

 *      - Check if the firmware is downloaded successfully

 *

 * After download is successfully completed, the host interrupts are enabled.

 check if firmware is already running */

 check if we are the winner for downloading FW */

 Download firmware with helper */

 Check if the firmware is downloaded successfully or not */

/*

 * NXP Wireless LAN device driver: Channel, Frequence and Power

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

 100mW */

 100mW */

 50mW */

 100mW */

 10mW */

 100mW */

/* For every mcs_rate line, the first 8 bytes are for stream 1x1,

 * and all 16 bytes are for stream 2x2.

 LGI 40M */

 SGI 40M */

 LGI 20M */

 SGI 20M */

 AC rates */

 LG 160M */

 SG 160M */

 LG 80M */

 SG 80M */

 LG 40M */

 SG 40M */

 LG 20M */

 SG 20M */

 NSS2 note: the value in the table is 2 multiplier of the actual rate */

 LG 160M */

 SG 160M */

 LG 80M */

 SG 80M */

 LG 40M */

 SG 40M */

 LG 20M */

 SG 20M */

 US FCC */

 IC Canada */

 France */

 Spain */

 France */

 Japan */

 Japan */

 China */

 This function converts integer code to region string */

 Look for code in mapping table */

/*

 * This function maps an index in supported rates table into

 * the corresponding data rate.

 20M: bw=0, 40M: bw=1, 80M: bw=2, 160M: bw=3 */

 LGI: gi =0, SGI: gi = 1 */

 NSS = 2 */

 NSS = 1 */

 20M: bw=0, 40M: bw=1 */

 LGI: gi =0, SGI: gi = 1 */

 MCS 32 SGI rate */

 MCS 32 LGI rate */

 11n non-HT rates */

/* This function maps an index in supported rates table into

 * the corresponding data rate.

 MCS 32 SGI rate */

 MCS 32 LGI rate */

 SGI, 40M */

 LGI, 40M */

 SGI, 20M */

 LGI, 20M */

/*

 * This function returns the current active data rates.

 *

 * The result may vary depending upon connection status.

/*

 * This function locates the Channel-Frequency-Power triplet based upon

 * band and channel/frequency parameters.

 find by valid channel*/

/*

 * This function checks if the data rate is set to auto.

/* This function gets the supported data rates from bitmask inside

 * cfg80211_scan_request.

 skip rate */

/* This function gets the supported data rates. The function works in

 * both Ad-Hoc and infra mode by printing the band and returning the

 * data rates.

 Ad-hoc mode */

 HT40 */

 HT20 */

/*

 * NXP Wireless LAN device driver: generic TX/RX data handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * This function processes the received buffer.

 *

 * Main responsibility of this function is to parse the RxPD to

 * identify the correct interface this packet is headed for and

 * forwarding it to the associated handling function, where the

 * packet will be further processed and sent to kernel/upper layer

 * if required.

 Get the BSS number from rxpd, get corresponding priv */

/*

 * This function sends a packet to device.

 *

 * It processes the packet to add the TxPD, checks condition and

 * sends the processed packet to firmware for transmission.

 *

 * On successful completion, the function calls the completion callback

 * and logs the time.

/*

 * Packet send completion callback handler.

 *

 * It either frees the buffer directly or forwards it to another

 * completion callback which checks conditions, updates statistics,

 * wakes up stalled traffic queue if required, and then frees the buffer.

 For skb_aggr, do not wake up tx queue */

 consumes ack_skb */

 Remove broadcast address which was added by driver */

			/* Remove driver's proprietary header including 2 bytes

			 * of packet length and pass actual management frame buffer

			 * to cfg80211.

/*

 * NXP Wireless LAN device driver: utility functions

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

 variables defined in struct mwifiex_adapter */

/*

 * Firmware initialization complete callback handler.

 *

 * This function wakes up the function waiting on the init

 * wait queue for the firmware initialization to complete.

/*

 * This function sends init/shutdown command

 * to firmware.

/*

 * IOCTL request handler to set/get debug information.

 *

 * This function collates/sets the information from/to different driver

 * structures.

 The last 3 items are struct mwifiex_adapter variables */

we dont indicate BACK action frames to cfg80211*/

/*

 * This function processes the received management packet and send it

 * to the kernel.

 Remove address4 */

/*

 * This function processes the received packet before sending it to the

 * kernel.

 *

 * It extracts the SKB from the received buffer and sends it to kernel.

 * In case the received buffer does not contain the data in SKB format,

 * the function creates a blank SKB, fills it with the data from the

 * received buffer and then sends this new SKB to the kernel.

	/* This is required only in case of 11n and USB/PCIE as we alloc

	 * a buffer of 4K only if its 11N (to be able to receive 4K

	 * AMSDU packets). In case of SD we allocate buffers based

	 * on the size of packet and hence this is not needed.

	 *

	 * Modifying the truesize here as our allocation for each

	 * skb is 4K but we only receive 2K packets and this cause

	 * the kernel to start dropping packets in case where

	 * application has allocated buffer based on 2K size i.e.

	 * if there a 64K packet received (in IP fragments and

	 * application allocates 64K to receive this packet but

	 * this packet would almost double up because we allocate

	 * each 1.5K fragment in 4K and pass it up. As soon as the

	 * 64K limit hits kernel will start to drop rest of the

	 * fragments. Currently we fail the Filesndl-ht.scr script

	 * for UDP, hence this fix

/*

 * IOCTL completion callback handler.

 *

 * This function is called when a pending IOCTL is completed.

 *

 * If work queue support is enabled, the function wakes up the

 * corresponding waiting function. Otherwise, it processes the

 * IOCTL response and frees the response buffer.

/* This function will return the pointer to station entry in station list

 * table which matches specified mac address.

 * This function should be called after acquiring RA list spinlock.

 * NULL is returned if station entry is not found in associated STA list.

/* If tdls channel switching is on-going, tx data traffic should be

 * blocked until the switching stage completed.

/* If tdls channel switching is on-going or tdls operate on off-channel,

 * cmd path should be blocked until tdls switched to base-channel.

/* This function will add a sta_node entry to associated station list

 * table with the given mac address.

 * If entry exist already, existing entry is returned.

 * If received mac address is NULL, NULL is returned.

/* This function will search for HT IE in association request IEs

 * and set station HT parameters accordingly.

 This function will delete a station entry from station list */

 This function will delete all stations from associated station list. */

 This function adds histogram data to histogram array*/

 function to add histogram record */

 function to reset histogram data during init/reset */

/*

 * NXP Wireless LAN device driver: 802.11h

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/* This function appends 11h info to a buffer while joining an

 * infrastructure BSS

 one channel in the subband */

 Enable or disable the 11h extensions in the firmware */

 enable master mode radar detection on AP interface */

/* This functions processes TLV buffer for a pending BSS Join command.

 *

 * Activate 11h functionality in the firmware if the spectrum management

 * capability bit is found in the network we are joining. Also, necessary

 * TLVs are set based on requested network's 11h capability.

		/* Activate 11h functions in firmware, turns on capability

		 * bit

 Deactivate 11h functions in the firmware */

/* This is DFS CAC work queue function.

 * This delayed work emits CAC finished event for cfg80211 if

 * CAC was started earlier.

/* This function prepares channel report request command to FW for

 * starting radar detection.

/* This function is to abort ongoing CAC upon stopping AP operations

 * or during unload.

/* This function handles channel report event from FW during CAC period.

 * If radar is detected during CAC, driver indicates the same to cfg80211

 * and also cancels ongoing delayed work.

 Handler for radar detected event from FW.*/

/* This is work queue function for channel switch handling.

 * This function takes care of updating new channel definitin to

 * bss config structure, restart AP and indicate channel switch success

 * to cfg80211.

/*

 * NXP Wireless LAN device driver: SDIO specific handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/* This function parse device tree node using mmc subnode devicetree API.

 * The device node is saved in card->plt_of_node.

 * if the device tree node exist and include interrupts attributes, this

 * function will also request platform specific wakeup interrupt.

/*

 * SDIO probe.

 *

 * This function probes an mwifiex device and registers it. It allocates

 * the card structure, enables SDIO function number and initiates the

 * device registration and initialization procedure by adding a logical

 * interface.

 device tree node parsing and platform specific configuration*/

/*

 * SDIO resume.

 *

 * Kernel needs to suspend all functions separately. Therefore all

 * registered functions must have drivers with suspend and resume

 * methods. Failing that the kernel simply removes the whole card.

 *

 * If already not resumed, this function turns on the traffic and

 * sends a host sleep cancel request to the firmware.

 Disable Host Sleep */

 Write data into SDIO card register. Caller claims SDIO device. */

/* This function writes data into SDIO card register.

/* This function reads data from SDIO card register.

/* This function writes multiple data into SDIO card memory.

 *

 * This does not work in suspended mode.

/* This function reads multiple data from SDIO card memory.

/* This function reads the firmware status.

/* This function checks the firmware status in card.

/* This function checks if WLAN is the winner.

/*

 * SDIO remove.

 *

 * This function removes the interface and frees up the card structure.

/*

 * SDIO suspend.

 *

 * Kernel needs to suspend all functions separately. Therefore all

 * registered functions must have drivers with suspend and resume

 * methods. Failing that the kernel simply removes the whole card.

 *

 * If already not suspended, this function allocates and sends a host

 * sleep activate request to the firmware and turns off the traffic.

 Might still be loading firmware */

 Enable the Host Sleep */

 Indicate device suspended */

 WLAN IDs */

/*

 * This function wakes up the card.

 *

 * A host power up command is written to the card configuration

 * register to wake up the card.

/*

 * This function is called after the card has woken up.

 *

 * The card configuration register is reset.

/*

 * This function is used to initialize IO ports for the

 * chipsets supporting SDIO new mode eg SD8897.

 enable sdio new mode */

 Configure cmd port and enable reading rx length from the register */

	/* Enable Dnld/Upld ready auto reset for cmd port after cmd53 is

	 * completed

/* This function initializes the IO ports.

 *

 * The following operations are performed -

 *      - Read the IO ports (0, 1 and 2)

 *      - Set host interrupt Reset-To-Read to clear

 *      - Set auto re-enable interrupt

 Read the IO port */

 Set Host interrupt reset to read to clear */

 Dnld/Upld ready set to auto reset */

/*

 * This function sends data to the card.

/*

 * This function gets the read port.

 *

 * If control port bit is set in MP read bitmap, the control port

 * is returned, otherwise the current read port is returned and

 * the value is increased (provided it does not reach the maximum

 * limit, in which case it is reset to 1)

 We are now handling the SDIO data ports */

/*

 * This function gets the write port for data.

 *

 * The current write port is returned if available and the value is

 * increased (provided it does not reach the maximum limit, in which

 * case it is reset to 1)

/*

 * This function polls the card status.

/*

 * This function disables the host interrupt.

 *

 * The host interrupt mask is read, the disable bit is reset and

 * written back to the card host interrupt mask register.

/*

 * This function reads the interrupt status from card.

		/*

		 * DN_LD_HOST_INT_STATUS and/or UP_LD_HOST_INT_STATUS

		 * For SDIO new mode CMD port interrupts

		 *	DN_LD_CMD_PORT_HOST_INT_STATUS and/or

		 *	UP_LD_CMD_PORT_HOST_INT_STATUS

		 * Clear the interrupt status register

/*

 * SDIO interrupt handler.

 *

 * This function reads the interrupt status from firmware and handles

 * the interrupt in current thread (ksdioirqd) right away.

/*

 * This function enables the host interrupt.

 *

 * The host interrupt enable mask is written to the card

 * host interrupt mask register.

 Request the SDIO IRQ */

 Simply write the mask to the register */

/*

 * This function sends a data buffer to the card.

/*

 * This function downloads the firmware to the card.

 *

 * Firmware is downloaded to the card in blocks. Every block download

 * is tested for CRC errors, and retried a number of times before

 * returning failure.

 Assume that the allocated buffer is 8-byte aligned */

 Perform firmware data transfer */

		/* The host polls for the DN_LD_CARD_RDY and CARD_IO_READY

 More data? */

 Setting this to 0 to resend from same offset */

			/* Set blocksize to transfer - checking for last

 Copy payload to buffer */

/*

 * This function decode sdio aggreation pkt.

 *

 * Based on the the data block size and pkt_len,

 * skb data will be decoded to few packets.

/*

 * This function decodes a received packet.

 *

 * Based on the type, the packet is treated as either a data, or

 * a command response, or an event, and the correct handler

 * function is invoked.

 take care of curr_cmd = NULL case */

 event cause has been saved to adapter->event_cause */

/*

 * This function transfers received packets from card to driver, performing

 * aggregation if required.

 *

 * For data received on control port, or if aggregation is disabled, the

 * received buffers are uploaded as separate packets. However, if aggregation

 * is enabled and required, the buffers are copied onto an aggregation buffer,

 * provided there is space left, processed and finally uploaded.

 Read the command Resp without aggr */

 Some more data RX pending */

 No room in Aggr buf, do rx aggr now */

 Rx aggr not in progress */

 No more data RX pending */

 No room in Aggr buf, do rx aggr now */

 Curr pkt can be aggregated */

 No more pkts allowed in Aggr buf, rx it */

 do aggr RX now */

			/* Reading data from "start_port + 0" to "start_port +

			 * port_count -1", so decrease the count by 1

 get curr PKT len & type */

 copy pkt to deaggr buf */

 Process de-aggr packet */

 Curr pkt can be aggregated */

 Single transfer pending. Free curr buff also */

/*

 * This function checks the current interrupt status.

 *

 * The following interrupts are checked and handled by this function -

 *      - Data sent

 *      - Command sent

 *      - Packets received

 *

 * Since the firmware does not generate download ready interrupt if the

 * port updated is command port only, command sent interrupt checking

 * should be done manually, and for every SDIO interrupt.

 *

 * In case of Rx packets received, the packets are uploaded from card to

 * host and processed accordingly.

 Following interrupt is only for SDIO new mode */

 Following interrupt is only for SDIO new mode */

 read the len of control packet */

	/* As firmware will not generate download ready interrupt if the port

	   updated is command port only, cmd_sent should be done for any SDIO

		/* Check if firmware has attach buffer at command port and

 terminate cmd */

/*

 * This function aggregates transmission buffers in driver and downloads

 * the aggregated packet to card.

 *

 * The individual packets are aggregated by copying into an aggregation

 * buffer and then downloaded to the card. Previous unsent packets in the

 * aggregation buffer are pre-copied first before new packets are added.

 * Aggregation is done till there is space left in the aggregation buffer,

 * or till new packets are available.

 *

 * The function will only download the packet to the card when aggregation

 * stops, otherwise it will just aggregate the packet in aggregation buffer

 * and return.

 More pkt in TX queue */

 No room in Aggr buf, send it */

 Last pkt in TX queue */

 some packs in Aggr buf already */

 No room in Aggr buf, send it */

 No more pkts allowed in Aggr buf, send it */

			/* Writing data from "start_port + 0" to "start_port +

			 * port_count -1", so decrease the count by 1

 Save the last multi port tx aggreagation info to debug log */

/*

 * This function downloads data from driver to card.

 *

 * Both commands and data packets are transferred to the card by this

 * function.

 *

 * This function adds the SDIO specific header to the front of the buffer

 * before transferring. The header contains the length of the packet and

 * the type. The firmware handles the packets based upon this set type.

 Allocate buffer and copy payload */

	/*

	 * This is SDIO specific header

	 *  u16 length,

	 *  u16 type (MWIFIEX_TYPE_DATA = 0, MWIFIEX_TYPE_CMD = 1,

	 *  MWIFIEX_TYPE_EVENT = 3)

 Type must be MWIFIEX_TYPE_CMD */

 Transfer data to card */

 restore curr_wr_port in error cases */

/*

 * This function allocates the MPA Tx and Rx buffers.

/*

 * This function unregisters the SDIO device.

 *

 * The SDIO IRQ is released, the function is disabled and driver

 * data is set to null.

/*

 * This function registers the SDIO device.

 *

 * SDIO IRQ is claimed, block size is set and driver data is initialized.

 save adapter pointer in card */

 Set block size */

/*

 * This function initializes the SDIO driver.

 *

 * The following initializations steps are followed -

 *      - Read the Host interrupt status register to acknowledge

 *        the first interrupt got from bootloader

 *      - Disable host interrupt mask register

 *      - Get SDIO port

 *      - Initialize SDIO variables in card

 *      - Allocate MP registers

 *      - Allocate MPA Tx and Rx buffers

	/*

	 * Read the host_int_status_reg for ACK the first interrupt got

	 * from the bootloader. If we don't do this we get a interrupt

	 * as soon as we register the irq.

 Get SDIO ioport */

 Initialize SDIO variables in card */

 Allocate buffers for SDIO MP-A */

 Allocate skb pointer buffers */

 Allocate 32k MPA Tx/Rx buffers if 64k memory allocation fails */

 Disable rx single port aggregation */

 Disable multi port aggregation */

/*

 * This function resets the MPA Tx and Rx buffers.

/*

 * This function cleans up the allocated card buffers.

 *

 * The following are freed by this function -

 *      - MP registers

 *      - MPA Tx buffer

 *      - MPA Rx buffer

/*

 * This function updates the MP end port in card.

 Prepare the adapter for the reset. */

 Run a HW reset of the SDIO interface. */

 This function read/write firmware */

 This function dump firmware memory to file */

 Read the number of the memories which will dump */

 Read the length of every memory which will dump */

 This function resets the card */

 This function dumps FW information */

/* Function to dump SDIO function registers and SDIO scratch registers in case

 * of FW crash

 Read the registers of SDIO function0 */

 Read the registers of SDIO function1 */

 Read the scratch registers of SDIO function1 */

/* sdio device/function initialization, code is extracted

 * from init_if handler and register_dev handler.

	/* tx_buf_size might be changed to 3584 by firmware during

	 * data transfer, we will reset to default size.

	/* Read the host_int_status_reg for ACK the first interrupt got

	 * from the bootloader. If we don't do this we get a interrupt

	 * as soon as we register the irq.

 SDIO specific */

/*

 * NXP Wireless LAN device driver: commands and events

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * This function initializes a command node.

 *

 * The actual allocation of the node is not done by this function. It only

 * initiates a node by filling it with default parameters. Similarly,

 * allocation of the different buffers used (IOCTL buffer, data buffer) are

 * not done by this function either.

/*

 * This function returns a command node from the free queue depending upon

 * availability.

/*

 * This function cleans up a command node.

 *

 * The function resets the fields including the buffer pointers.

 * This function does not try to free the buffers. They must be

 * freed before calling this function.

 *

 * This function will however call the receive completion callback

 * in case a response buffer is still available before resetting

 * the pointer.

/*

 * This function returns a command to the command free queue.

 *

 * The function also calls the completion callback if required, before

 * cleaning the command node and re-inserting it into the free queue.

 Clean the node */

 Insert node into cmd_free_q */

 This function reuses a command node. */

/*

 * This function sends a host command to the firmware.

 *

 * The function copies the host command into the driver command

 * buffer, which will be transferred to the firmware later by the

 * main thread.

 Copy the HOST command to command buffer */

/*

 * This function downloads a command to the firmware.

 *

 * The function performs sanity tests, sets the command sequence

 * number and size, converts the header fields to CPU format before

 * sending. Afterwards, it logs the command ID and action for debugging

 * and sets up the command timeout timer.

 Sanity test */

 Set command sequence number */

 Adjust skb length */

		/*

		 * cmd_size is less than sizeof(struct host_cmd_ds_command).

		 * Trim off the unused portion.

		/*

		 * cmd_size is larger than sizeof(struct host_cmd_ds_command)

		 * because we have appended custom IE TLV. Increase skb length

		 * accordingly.

 Save the last command id and action to debug log */

	/* Setup the timer after transmit command, except that specific

	 * command might not have command response.

 Clear BSS_NO_BITS from HostCmd */

/*

 * This function downloads a sleep confirm command to the firmware.

 *

 * The function performs sanity tests, sets the command sequence

 * number and size, converts the header fields to CPU format before

 * sending.

 *

 * No responses are needed for sleep confirm command.

 Response is not needed for sleep confirm command */

/*

 * This function allocates the command buffers and links them to

 * the command free queue.

 *

 * The driver uses a pre allocated number of command buffers, which

 * are created at driver initializations and freed at driver cleanup.

 * Every command needs to obtain a command buffer from this pool before

 * it can be issued. The command free queue lists the command buffers

 * currently free to use, while the command pending queue lists the

 * command buffers already in use and awaiting handling. Command buffers

 * are returned to the free queue after use.

 Allocate and initialize struct cmd_ctrl_node */

 Allocate and initialize command buffers */

/*

 * This function frees the command buffers.

 *

 * The function calls the completion callback for all the command

 * buffers that still have response buffers associated with them.

 Need to check if cmd pool is allocated or not */

 Release shared memory buffers */

 Release struct cmd_ctrl_node */

/*

 * This function handles events generated by firmware.

 *

 * Event body of events received from firmware are not used (though they are

 * saved), only the event ID is used. Some events are re-invoked by

 * the driver, with a new event body.

 *

 * After processing, the function calls the completion callback

 * for cleanup.

 Save the last event to debug log */

 Get BSS number and corresponding priv */

 Clear BSS_NO_BITS from event */

/*

 * This function prepares a command and send it to the firmware.

 *

 * Preparation includes -

 *      - Sanity tests to make sure the card is still present or the FW

 *        is not reset

 *      - Getting a new command node from the command free queue

 *      - Initializing the command node for default parameters

 *      - Fill up the non-default parameters and buffer pointers

 *      - Add the command to pending queue

	/* We don't expect commands in manufacturing mode. They are cooked

	 * in application and ready to download buffer is passed to the driver

 Get a new command node */

 Initialize the command node */

 Prepare command */

 Return error, since the command preparation failed */

 Send command */

/*

 * This function queues a command to the command pending queue.

 *

 * This in effect adds the command to the command list to be executed.

 * Exit PS command is handled specially, by placing it always to the

 * front of the command queue.

 Exit_PS command needs to be queued in the header always. */

 Same with exit host sleep cmd, luckily that can't happen at the same time as EXIT_PS */

/*

 * This function executes the next command in command pending queue.

 *

 * This function will fail if a command is already in processing stage,

 * otherwise it will dequeue the first command from the command pending

 * queue and send to the firmware.

 *

 * If the device is currently in host sleep mode, any commands, except the

 * host sleep configuration command will de-activate the host sleep. For PS

 * mode, the function will put the firmware back to sleep if applicable.

 Check if already in processing */

 Check if any command is pending */

	/* Any command sent to the firmware when host is in sleep

	 * mode should de-configure host sleep. We should skip the

	 * host sleep configuration command itself though

/*

 * This function handles the command response.

 *

 * After processing, the function cleans the command node and puts

 * it back to the command free queue.

 Now we got response from FW, cancel the command timer */

 Copy original response back to response buffer */

 Get BSS number and corresponding priv */

 Clear RET_BIT from HostCmd */

 Save the last command response to debug log */

 handle response */

 Check init command response */

/*

 * This function handles the timeout of command sending.

 *

 * It will re-send the same command again.

 Cancel all pending scan command */

/*

 * This function cancels all the pending commands.

 *

 * The current command, all commands in command pending queue and all scan

 * commands in scan pending queue are cancelled. All the completion callbacks

 * are called with failure status to ensure cleanup.

 Cancel current cmd */

 no recycle probably wait for response */

 Cancel all pending command */

/*

 * This function cancels all pending commands that matches with

 * the given IOCTL request.

 *

 * Both the current command buffer and the pending command queue are

 * searched for matching IOCTL request. The completion callback of

 * the matched command is called with failure status to ensure cleanup.

 * In case of scan commands, all pending commands in scan pending queue

 * are cancelled.

		/* setting curr_cmd to NULL is quite dangerous, because

		 * mwifiex_process_cmdresp checks curr_cmd to be != NULL

		 * at the beginning then relies on it and dereferences

		 * it at will

		 * this probably works since mwifiex_cmd_timeout_func

		 * is the only caller of this function and responses

		 * at that point

/*

 * This function sends the sleep confirm command to firmware, if

 * possible.

 *

 * The sleep confirm command cannot be issued if command response,

 * data response or event response is awaiting handling, or if we

 * are in the middle of sending a command, or expecting a command

 * response.

/*

 * This function sends a Host Sleep activated event to applications.

 *

 * This event is generated by the driver, with a blank event body.

/*

 * This function handles the command response of a Host Sleep configuration

 * command.

 *

 * Handling includes changing the header fields into CPU format

 * and setting the current host sleep activation status in driver.

 *

 * In case host sleep status change, the function generates an event to

 * notify the applications.

/*

 * This function wakes up the adapter and generates a Host Sleep

 * cancel event on receiving the power up interrupt.

/*

 * This function handles the command response of a sleep confirm command.

 *

 * The function sets the card state to SLEEP if the response indicates success.

 Get BSS number and corresponding priv */

 Update sequence number */

 Clear RET_BIT from HostCmd */

/*

 * This function prepares an enhanced power mode command.

 *

 * This function can be used to disable power save or to configure

 * power save with auto PS or STA PS or auto deep sleep.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting Power Save bitmap, PS parameters TLV, PS mode TLV,

 *        auto deep sleep TLV (as required)

 *      - Ensuring correct endian-ness

/*

 * This function handles the command response of an enhanced power mode

 * command.

 *

 * Handling includes changing the header fields into CPU format

 * and setting the current enhanced power mode in driver.

 This section is for get power save mode */

/*

 * This function prepares command to get hardware specifications.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting permanent address parameter

 *      - Ensuring correct endian-ness

/*

 * This function handles the command response of get hardware

 * specifications.

 *

 * Handling includes changing the header fields into CPU format

 * and saving/updating the following parameters in driver -

 *      - Firmware capability information

 *      - Firmware band settings

 *      - Ad-hoc start band and channel

 *      - Ad-hoc 11n activation status

 *      - Firmware release number

 *      - Number of antennas

 *      - Hardware address

 *      - Hardware interface version

 *      - Firmware version

 *      - Region code

 *      - 11n capabilities

 *      - MCS support fields

 *      - MP end port

 Copy 11AC cap */

 Copy 11AC mcs */

 we have variable HW SPEC information */

 Use the region code to search for the index */

 If it's unidentified region code, use the default (world) */

/* This function handles the command response of hs wakeup reason

 * command.

/*

 * NXP Wireless LAN device driver: station command response handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * This function handles the command response error case.

 *

 * For scan response error, the function cancels all the pending

 * scan commands and generates an event to inform the applications

 * of the scan completion.

 *

 * For Power Save command failure, we do not retry enter PS

 * command in case of Ad-hoc mode.

 *

 * For all other response errors, the current command buffer is freed

 * and returned to the free command queue.

 We do not re-try enter-ps command in ad-hoc mode. */

 Handling errors here */

/*

 * This function handles the command response of get RSSI info.

 *

 * Handling includes changing the header fields into CPU format

 * and saving the following parameters in driver -

 *      - Last data and beacon RSSI value

 *      - Average data and beacon RSSI value

 *      - Last data and beacon NF value

 *      - Average data and beacon NF value

 *

 * The parameters are send to the application as well, along with

 * calculated SNR values.

 Resubscribe low and high rssi events with new thresholds */

/*

 * This function handles the command response of set/get SNMP

 * MIB parameters.

 *

 * Handling includes changing the header fields into CPU format

 * and saving the parameter in driver.

 *

 * The following parameters are supported -

 *      - Fragmentation threshold

 *      - RTS threshold

 *      - Short retry limit

/*

 * This function handles the command response of get log request

 *

 * Handling includes changing the header fields into CPU format

 * and sending the received parameters to application.

/*

 * This function handles the command response of set/get Tx rate

 * configurations.

 *

 * Handling includes changing the header fields into CPU format

 * and saving the following parameters in driver -

 *      - DSSS rate bitmap

 *      - OFDM rate bitmap

 *      - HT MCS rate bitmaps

 *

 * Based on the new rate bitmaps, the function re-evaluates if

 * auto data rate has been activated. If not, it sends another

 * query to the firmware to get the current Tx data rate.

 Add RATE_DROP tlv here */

/*

 * This function handles the command response of get Tx power level.

 *

 * Handling includes saving the maximum and minimum Tx power levels

 * in driver, as well as sending the values to user.

 At least one structure required to update power */

/*

 * This function handles the command response of set/get Tx power

 * configurations.

 *

 * Handling includes changing the header fields into CPU format

 * and saving the current Tx power level in driver.

/*

 * This function handles the command response of get RF Tx power.

/*

 * This function handles the command response of set rf antenna

/*

 * This function handles the command response of set/get MAC address.

 *

 * Handling includes saving the MAC address in driver.

/*

 * This function handles the command response of set/get MAC multicast

 * address.

/*

 * This function handles the command response of get Tx rate query.

 *

 * Handling includes changing the header fields into CPU format

 * and saving the Tx rate and HT information parameters in driver.

 *

 * Both rate configuration and current data rate can be retrieved

 * with this request.

/*

 * This function handles the command response of a deauthenticate

 * command.

 *

 * If the deauthenticated MAC matches the current BSS MAC, the connection

 * state is reset.

/*

 * This function handles the command response of ad-hoc stop.

 *

 * The function resets the connection state in driver.

/*

 * This function handles the command response of set/get v1 key material.

 *

 * Handling includes updating the driver parameters to reflect the

 * changes.

/*

 * This function handles the command response of set/get v2 key material.

 *

 * Handling includes updating the driver parameters to reflect the

 * changes.

 Wrapper function for processing response of key material command */

/*

 * This function handles the command response of get 11d domain information.

 Proc Set Action */

/*

 * This function handles the command response of get extended version.

 *

 * Handling includes forming the extended version string and sending it

 * to application.

/*

 * This function handles the command response of remain on channel.

/*

 * This function handles the command response of P2P mode cfg.

/* This function handles the command response of mem_access command

/*

 * This function handles the command response of register access.

 *

 * The register value and offset are returned to the user. For EEPROM

 * access, the byte count is also returned.

/*

 * This function handles the command response of get IBSS coalescing status.

 *

 * If the received BSSID is different than the current one, the current BSSID,

 * beacon interval, ATIM window and ERP information are updated, along with

 * changing the ad-hoc state accordingly.

 If rsp has NULL BSSID, Just return..... No Action */

 If BSSID is diff, modify current BSS parameters */

 BSSID */

 Beacon Interval */

 ERP Information */

/*

 * This function handles the command response for subscribe event command.

	/* For every subscribe event command (Get/Set/Clear), FW reports the

 This function handles the command response of set_cfg_data */

* This Function handles the command response of sdio rx aggr */

/*

 * This function handles the command responses.

 *

 * This is a generic function, which calls command specific

 * response handlers based on the command ID.

 If the command is not successful, cleanup and return failure */

 Command successful, handle response */

/*

 * NXP Wireless LAN device driver: station RX data handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/* This function checks if a frame is IPv4 ARP or IPv6 Neighbour advertisement

 * frame. If frame has both source and destination mac address as same, this

 * function drops such gratuitous frames.

/*

 * This function processes the received packet and forwards it

 * to kernel/upper layer.

 *

 * This function parses through the received packet and determines

 * if it is a debug packet or normal packet.

 *

 * For non-debug packets, the function chops off unnecessary leading

 * header bytes, reconstructs the packet as an ethernet frame or

 * 802.2/llc/snap frame as required, and sends it to kernel/upper layer.

 *

 * The completion callback is called after processing in complete.

		/*

		 *  Replace the 803 header and rfc1042 header (llc/snap) with an

		 *    EthernetII header, keep the src/dst and snap_type

		 *    (ethertype).

		 *  The firmware only passes up SNAP frames converting

		 *    all RX Data from 802.11 to 802.2/LLC/SNAP frames.

		 *  To create the Ethernet II, just move the src, dst address

		 *    right before the snap_type.

		/* Chop off the rxpd + the excess memory from the 802.2/llc/snap

 Chop off the rxpd */

	/* Chop off the leading header bytes so the it points to the start of

 Only stash RX bitrate for unicast packets. */

/*

 * This function processes the received buffer.

 *

 * The function looks into the RxPD and performs sanity tests on the

 * received buffer to ensure its a valid packet, before processing it

 * further. If the packet is determined to be aggregated, it is

 * de-aggregated accordingly. Non-unicast packets are sent directly to

 * the kernel/upper layers. Unicast packets are handed over to the

 * Rx reordering routine if 11n is enabled.

 *

 * The completion callback is called after processing in complete.

	/*

	 * If the packet is not an unicast packet then send the packet

	 * directly to os. Don't pass thru rx reordering

 Reorder and send to OS */

/*

 * NXP Wireless LAN device driver: WMM

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

 Maximum value FW can accept for driver delay in packet transmission */

 Offset for TOS field in the IP header */

/* This table inverses the tos_to_tid operation to get a priority

 * which is in sequential order, and can be compared.

 * Use this to compare the priority of two different TIDs.

 from tos_to_tid[2] = 0 */

 from tos_to_tid[0] = 1 */

 from tos_to_tid[1] = 2 */

 WMM information IE */

 TID DSCP_P2 DSCP_P1 DSCP_P0 WMM_AC */

 0 1 0 AC_BK */

 0 0 0 AC_BK */

 0 0 1 AC_BE */

 0 1 1 AC_BE */

 1 0 0 AC_VI */

 1 0 1 AC_VI */

 1 1 0 AC_VO */

 1 1 1 AC_VO */

/*

 * This function debug prints the priority parameters for a WMM AC.

/*

 * This function allocates a route address list.

 *

 * The function also initializes the list with the provided RA.

/* This function returns random no between 16 and 32 to be used as threshold

 * for no of packets after which BA setup is initiated.

	/* setup ba_packet_threshold here random number between

	 * [BA_SETUP_PACKET_OFFSET,

	 * BA_SETUP_PACKET_OFFSET+BA_SETUP_MAX_PACKET_THRESHOLD-1]

/*

 * This function allocates and adds a RA list for all TIDs

 * with the given RA.

/*

 * This function sets the WMM queue priorities to their default values.

 Default queue priorities: VO->VI->BE->BK */

/*

 * This function map ACs to TIDs.

/*

 * This function initializes WMM priority queues.

 WMM is not enabled, just set the defaults and return */

 Bubble sort */

/*

 * This function evaluates whether or not an AC is to be downgraded.

 *

 * In case the AC is not enabled, the highest AC is returned that is

 * enabled and does not require admission control.

 Okay to use this AC, its enabled */

 Setup a default return value of the lowest priority */

	/*

	 *  Find the highest AC that is enabled and does not require

	 *  admission control. The spec disallows downgrading to an AC,

	 *  which is enabled due to a completed admission control.

	 *  Unadmitted traffic is not to be sent on an AC with admitted

	 *  traffic.

			/* AC is enabled and does not require admission

/*

 * This function downgrades WMM priority queue.

 WMM is not enabled, default priorities */

/*

 * This function converts the IP TOS field to an WMM AC

 * Queue assignment.

 Map of TOS UP values to WMM AC */

/*

 * This function evaluates a given TID and downgrades it to a lower

 * TID if the WMM Parameter IE received from the AP indicates that the

 * AP is disabled (due to call admission control (ACM bit). Mapping

 * of TID to AC is taken care of internally.

	/* Send the index to tid array, picking from the array will be

	 * taken care by dequeuing function

/*

 * This function initializes the WMM state information and the

 * WMM data path queues.

/*

 * This function checks if WMM Tx queue is empty.

/*

 * This function deletes all packets in an RA list node.

 *

 * The packet sent completion callback handler are called with

 * status failure, after they are dequeued to ensure proper

 * cleanup. The RA list node itself is freed at the end.

/*

 * This function deletes all packets in an RA list.

 *

 * Each nodes in the RA list are freed individually first, and then

 * the RA list itself is freed.

/*

 * This function deletes all packets in all RA lists.

/*

 * This function deletes all route addresses from all RA lists.

/*

 * This function cleans up the Tx and Rx queues.

 *

 * Cleanup includes -

 *      - All packets in RA lists

 *      - All entries in Rx reorder table

 *      - All entries in Tx BA stream table

 *      - MPA buffer (if required)

 *      - All RA lists

/*

 * This function retrieves a particular RA list node, matching with the

 * given TID and RA address.

/* This function updates non-tdls peer ralist tx_pause while

 * tdls channel switching

/*

 * This function retrieves an RA list node for a given TID and

 * RA address pair.

 *

 * If no such node is found, a new node is added first and then

 * retrieved.

/*

 * This function deletes RA list nodes for given mac for all TIDs.

 * Function also decrements TX pending count accordingly.

/*

 * This function checks if a particular RA list node exists in a given TID

 * table index.

/*

 * This function adds a packet to bypass TX queue.

 * This is special TX queue for packets which can be sent even when port_open

 * is false.

/*

 * This function adds a packet to WMM queue.

 *

 * In disconnected state the packet is immediately dropped and the

 * packet send completion callback is called with status failure.

 *

 * Otherwise, the correct RA list node is located and the packet

 * is queued at the list tail.

	/* In case of infra as we have already created the list during

	   association we just don't have to call get_queue_raptr, we will

/*

 * This function processes the get WMM status command response from firmware.

 *

 * The response may contain multiple TLVs -

 *      - AC Queue status TLVs

 *      - Current WMM Parameter IE TLV

 *      - Admission Control action frame TLVs

 *

 * This function parses the TLVs and then calls further specific functions

 * to process any changes in the queue prioritize or state.

			/*

			 * Point the regular IEEE IE 2 bytes into the Marvell IE

			 *   and setup the IEEE IE type and length byte fields

/*

 * Callback handler from the command module to allow insertion of a WMM TLV.

 *

 * If the BSS we are associating to supports WMM, this function adds the

 * required WMM Information IE to the association request command buffer in

 * the form of a Marvell extended IEEE IE.

 Null checks */

/*

 * This function computes the time delay in the driver queues for a

 * given packet.

 *

 * When the packet is received at the OS/Driver interface, the current

 * time is set in the packet structure. The difference between the present

 * time and that received time is computed in this function and limited

 * based on pre-compiled limits in the driver.

	/*

	 * Queue delay is passed as a uint8 in units of 2ms (ms shifted

	 *  by 1). Min value (other than 0) is therefore 2ms, max is 510ms.

	 *

	 * Pass max value if queue_delay is beyond the uint8 range

/*

 * This function retrieves the highest priority RA list table pointer.

 check the BSS with highest priority first */

 iterate over BSS with the equal priority */

 iterate over the WMM queues of the BSS */

 iterate over receiver addresses */

 holds both locks */

				/* Iterate current private once more, since

				 * there still exist packets in data queue

 holds ra_list_spinlock */

/* This functions rotates ra and bss lists so packets are picked round robin.

 *

 * After a packet is successfully transmitted, rotate the ra list, so the ra

 * next to the one transmitted, will come first in the list. This way we pick

 * the ra' in a round robin fashion. Same applies to bss nodes of equal

 * priority.

 *

 * Function also increments wmm.packets_out counter.

	/*

	 * dirty trick: we remove 'head' temporarily and reinsert it after

	 * curr bss node. imagine list to stay fixed while head is moved

 same as above */

/*

 * This function checks if 11n aggregation is possible.

/*

 * This function sends a single packet to firmware for transmission.

 Queue the packet back at the head */

/*

 * This function checks if the first packet in the given RA list

 * is already processed or not.

/*

 * This function sends a single processed packet to firmware for

 * transmission.

/*

 * This function dequeues a packet from the highest priority list

 * and transmits it.

		/* ra_list_spinlock has been freed in

			/* ra_list_spinlock has been freed in

			 * mwifiex_11n_aggregate_pkt()

			/* ra_list_spinlock has been freed in

			 * mwifiex_send_single_packet()

			/* ra_list_spinlock has been freed in

			/* ra_list_spinlock has been freed in

 no aggregation for bypass packets */

/*

 * This function transmits the highest priority packet awaiting in the

 * WMM Queues.

/*

 * NXP Wireless LAN device driver: 802.11n

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * Fills HT capability information field, AMPDU Parameters field, HT extended

 * capability field, and supported MCS set fields.

 *

 * HT capability information field, AMPDU Parameters field, supported MCS set

 * fields are retrieved from cfg80211 stack

 *

 * RD responder bit to set to clear in the extended capability header.

 Set MCS32 for infra mode or ad-hoc mode with 40MHz support */

 Clear RD responder bit */

/*

 * This function returns the pointer to an entry in BA Stream

 * table which matches the requested BA status.

/*

 * This function handles the command response of delete a block

 * ack request.

 *

 * The function checks the response success status and takes action

 * accordingly (send an add BA request in case of success, or recreate

 * the deleted stream in case of failure, if the add BA was also

 * initiated by us).

	} else { /*

		  * In case of failure, recreate the deleted stream in case

		  * we initiated the DELBA

/*

 * This function handles the command response of add a block

 * ack request.

 *

 * Handling includes changing the header fields to CPU formats, checking

 * the response success status and taking actions accordingly (delete the

 * BA stream table in case of failure).

/*

 * This function prepares command of reconfigure Tx buffer.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting Tx buffer size (for SET only)

 *      - Ensuring correct endian-ness

/*

 * This function prepares command of AMSDU aggregation control.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting AMSDU control parameters (for SET only)

 *      - Ensuring correct endian-ness

/*

 * This function prepares 11n configuration command.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting HT Tx capability and HT Tx information fields

 *      - Ensuring correct endian-ness

/*

 * This function appends an 11n TLV to a buffer.

 *

 * Buffer allocation is responsibility of the calling

 * function. No size validation is made here.

 *

 * The function fills up the following sections, if applicable -

 *      - HT capability IE

 *      - HT information IE (with channel list)

 *      - 20/40 BSS Coexistence IE

 *      - HT Extended Capabilities IE

 Update HT40 capability from current channel information */

/*

 * This function checks if the given pointer is valid entry of

 * Tx BA Stream table.

/*

 * This function deletes the given entry in Tx BA Stream table.

 *

 * The function also performs a validity check on the supplied

 * pointer before trying to delete.

/*

 * This function deletes all the entries in Tx BA Stream table.

/*

 * This function returns the pointer to an entry in BA Stream

 * table which matches the given RA/TID pair.

/*

 * This function creates an entry in Tx BA stream table for the

 * given RA/TID pair.

/*

 * This function sends an add BA request to the given TID/RA pair.

 enable AMSDU inside AMPDU */

 We don't wait for the response of this command */

/*

 * This function sends a delete BA request to the given TID/RA pair.

 We don't wait for the response of this command */

/*

 * This function sends delba to specific tid

/*

 * This function handles the command response of a delete BA request.

/*

 * This function retrieves the Rx reordering table.

/*

 * This function retrieves the Tx BA stream table.

/*

 * This function retrieves the entry for specific tx BA stream table by RA and

 * deletes it.

/* This function initializes the BlockACK setup information for given

 * mwifiex_private structure.

/* This function will send DELBA to entries in the priv's

 * Tx BA stream table

/* This function updates all the tx_win_size

/*

 * NXP Wireless LAN device driver: station TX data handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * This function fills the TxPD for tx packets.

 *

 * The Tx buffer received by this function should already have the

 * header space allocated for TxPD.

 *

 * This function inserts the TxPD in between interface header and actual

 * data and adjusts the buffer pointers accordingly.

 *

 * The following TxPD fields are set by this function, as required -

 *      - BSS number

 *      - Tx packet length and offset

 *      - Priority

 *      - Packet delay

 *      - Priority specific Tx control

 *      - Flags

		/*

		 * Set the priority specific tx_control field, setting of 0 will

		 *   cause the default value to be used later in this function

 Offset of actual data */

 Set the packet type and add header for management frame */

 make space for adapter->intf_hdr_len */

 TxCtrl set by user or default */

/*

 * This function tells firmware to send a NULL data packet.

 *

 * The function creates a NULL data packet with TxPD and sends to the

 * firmware for transmission, with highest priority setting.

 sizeof(struct txpd) + Interface specific header */

/*

 * This function checks if we need to send last packet indication.

/*

 * NXP Wireless LAN device driver: station command handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * This function prepares command to set/get RSSI information.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting data/beacon average factors

 *      - Resetting SNR/NF/RSSI values in private structure

 *      - Ensuring correct endian-ness

 Reset SNR/NF/RSSI values in private structure */

/*

 * This function prepares command to set MAC control.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Ensuring correct endian-ness

/*

 * This function prepares command to set/get SNMP MIB.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting SNMP MIB OID number and value

 *        (as required)

 *      - Ensuring correct endian-ness

 *

 * The following SNMP MIB OIDs are supported -

 *      - FRAG_THRESH_I     : Fragmentation threshold

 *      - RTS_THRESH_I      : RTS threshold

 *      - SHORT_RETRY_LIM_I : Short retry limit

 *      - DOT11D_I          : 11d support

/*

 * This function prepares command to get log.

 *

 * Preparation includes -

 *      - Setting command ID and proper size

 *      - Ensuring correct endian-ness

/*

 * This function prepares command to set/get Tx data rate configuration.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting configuration index, rate scope and rate drop pattern

 *        parameters (as required)

 *      - Ensuring correct endian-ness

/*

 * This function prepares command to set/get Tx power configuration.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting Tx power mode, power group TLV

 *        (as required)

 *      - Ensuring correct endian-ness

/*

 * This function prepares command to get RF Tx power.

/*

 * This function prepares command to set rf antenna.

/*

 * This function prepares command to set Host Sleep configuration.

 *

 * Preparation includes -

 *      - Setting command ID and proper size

 *      - Setting Host Sleep action, conditions, ARP filters

 *        (as required)

 *      - Ensuring correct endian-ness

 New Activate command */

/*

 * This function prepares command to set/get MAC address.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting MAC address (for SET only)

 *      - Ensuring correct endian-ness

/*

 * This function prepares command to set MAC multicast address.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting MAC multicast address

 *      - Ensuring correct endian-ness

/*

 * This function prepares command to deauthenticate.

 *

 * Preparation includes -

 *      - Setting command ID and proper size

 *      - Setting AP MAC address and reason code

 *      - Ensuring correct endian-ness

 Set AP MAC address */

/*

 * This function prepares command to stop Ad-Hoc network.

 *

 * Preparation includes -

 *      - Setting command ID and proper size

 *      - Ensuring correct endian-ness

/*

 * This function sets WEP key(s) to key parameter TLV(s).

 *

 * Multi-key parameter TLVs are supported, so we can send multiple

 * WEP keys in a single buffer.

 Multi-key_param_set TLV is supported */

 Key_param_set WEP fixed length */

 Set WEP key index */

 Set default Tx key flag */

/* This function populates key material v2 command

 * to set network key for AES & CMAC AES.

/* This function prepares command to set/get/reset network key(s).

 * This function prepares key material command for V2 format.

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting WEP keys, WAPI keys or WPA keys along with required

 *        encryption (TKIP, AES) (as required)

 *      - Ensuring correct endian-ness

 Enable unicast bit for WPA-NONE/ADHOC_AES */

 Enable default key for WPA/WPA2 */

/*

 * This function prepares command to set/get/reset network key(s).

 * This function prepares key material command for V1 format.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting WEP keys, WAPI keys or WPA keys along with required

 *        encryption (TKIP, AES) (as required)

 *      - Ensuring correct endian-ness

 set 0 when re-key */

 WAPI pairwise key: unicast */

 WAPI group key: multicast */

 AES pairwise key: unicast */

 AES group key: multicast */

 TKIP pairwise key: unicast */

 TKIP group key: multicast */

 Wrapper function for setting network key depending upon FW KEY API version */

/*

 * This function prepares command to set/get 11d domain information.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting domain information fields (for SET only)

 *      - Ensuring correct endian-ness

 Set domain info fields */

/*

 * This function prepares command to set/get IBSS coalescing status.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting status to enable or disable (for SET only)

 *      - Ensuring correct endian-ness

 In other case.. Nothing to do */

/* This function prepares command buffer to get/set memory location value.

/*

 * This function prepares command to set/get register value.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting register offset (for both GET and SET) and

 *        register value (for SET only)

 *      - Ensuring correct endian-ness

 *

 * The following type of registers can be accessed with this function -

 *      - MAC register

 *      - BBP register

 *      - RF register

 *      - PMIC register

 *      - CAU register

 *      - EEPROM

/*

 * This function prepares command to set PCI-Express

 * host buffer configuration

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Setting host buffer configuration

 *      - Ensuring correct endian-ness

 Send the ring base addresses and count to firmware */

/*

 * This function prepares command for event subscription, configuration

 * and query. Events can be subscribed or unsubscribed. Current subscribed

 * events can be queried. Also, current subscribed events are reported in

 * every FW response.

For query requests, no configuration TLV structures are to be added.*/

	/*

	 * Append TLV structures for each of the specified events for

	 * subscribing or re-configuring. This is not required for

	 * bitwise unsubscribing request.

 This function parse cal data from ASCII to hex */

 look for all matching property names */

 property header is 6 bytes, data must fit in cmd buffer */

 This function prepares command of set_cfg_data. */

		/* Total rule length is sizeof max_coalescing_delay(u16),

		 * num_of_fields(u8), pkt_type(u8) and total length of the all

		 * params

 Add the rule length to the command size*/

 Add sizeof action, num_of_rules to total command length */

 This function prepares command of sdio rx aggr info. */

/* This function prepares command to get HS wakeup reason.

 *

 * Preparation includes -

 *      - Setting command ID, action and proper size

 *      - Ensuring correct endian-ness

 This function check if the command is supported by firmware */

/*

 * This function prepares the commands before sending them to the firmware.

 *

 * This is a generic function which calls specific command preparation

 * routines based upon the command number.

 Prepare command */

/*

 * This function issues commands to initialize firmware.

 *

 * This is called after firmware download to bring the card to

 * working state.

 * Function is also called during reinitialization of virtual

 * interfaces.

 *

 * The following commands are issued sequentially -

 *      - Set PCI-Express host buffer configuration (PCIE only)

 *      - Function init (for first interface only)

 *      - Read MAC address (for first interface only)

 *      - Reconfigure Tx buffer size (for first interface only)

 *      - Enable auto deep sleep (for first interface only)

 *      - Get Tx rate

 *      - Get Tx power

 *      - Set IBSS coalescing status

 *      - Set AMSDU aggregation control

 *      - Set 11d control

 *      - Set MAC control (this must be the last command to initialize firmware)

		/* Download calibration data to firmware.

		 * The cal-data can be read from device tree and/or

		 * a configuration file and downloaded to firmware.

 Read MAC address from HW */

* Set SDIO Single Port RX Aggr Info */

 Reconfigure tx buf size */

 Enable IEEE PS by default */

 get tx rate */

 get tx power */

 Send request to firmware */

 MAC Control must be the last command in init_fw */

 set MAC Control */

 Enable auto deep sleep */

 Send cmd to FW to enable/disable 11D function */

 Pacekt aggregation handshake with firmware */

	/* Send cmd to FW to configure 11n specific configuration

	 * (Short GI, Channel BW, Green field support etc.) for transmit

 set last_init_cmd before sending the command */

/*

 * NXP Wireless LAN device driver: 802.11ac

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/* Tables of the MCS map to the highest data rate (in Mbps) supported

 * for long GI.

 NSS = 1 */

 NSS = 2 */

 NSS = 3 */

 NSS = 4 */

 NSS = 5 */

 NSS = 6 */

 NSS = 7 */

 NSS = 8 */

 NSS = 1 */

 NSS = 2 */

 NSS = 3 */

 NSS = 4 */

 NSS = 5 */

 NSS = 6 */

 NSS = 7 */

 NSS = 8 */

/* This function converts the 2-bit MCS map to the highest long GI

 * VHT data rate.

 find the max NSS supported */

 if mcs is 3, nss must be 1 (NSS = 1). Default mcs to MCS 0~9 */

 support 160 MHz */

 MCS9 is not supported in NSS6 */

 MCS9 is not supported in NSS3 */

 Fill VHT cap info */

 rx MCS Set: find the minimum of the user rx mcs and ap rx mcs */

 tx MCS Set: find the minimum of the user tx mcs and ap tx mcs */

 VHT Capabilities IE */

 VHT Operation IE */

			/* negotiate the channel width and central freq

			 * and keep the central freq as the peer suggests

 Operating Mode Notification IE */

/* This function initializes the BlockACK setup information for given

 * mwifiex_private structure for 11ac enabled networks.

/*

 * NXP Wireless LAN device driver: PCIE specific handling

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * This function writes data into PCIE card register.

/* This function reads data from PCIE card register.

 This function reads u8 data from PCIE card register. */

/*

 * This function reads sleep cookie and checks if FW is ready

/*

 * Kernel needs to suspend all functions separately. Therefore all

 * registered functions must have drivers with suspend and resume

 * methods. Failing that the kernel simply removes the whole card.

 *

 * If already not suspended, this function allocates and sends a host

 * sleep activate request to the firmware and turns off the traffic.

 Might still be loading firmware */

 Enable the Host Sleep */

 Indicate device suspended */

/*

 * Kernel needs to suspend all functions separately. Therefore all

 * registered functions must have drivers with suspend and resume

 * methods. Failing that the kernel simply removes the whole card.

 *

 * If already not resumed, this function turns on the traffic and

 * sends a host sleep cancel request to the firmware.

/*

 * This function probes an mwifiex device and registers it. It allocates

 * the card structure, enables PCIE function number and initiates the

 * device registration and initialization procedure by adding a logical

 * interface.

 device tree node parsing and platform specific configuration*/

 check quirks */

/*

 * This function removes the interface and frees up the card structure.

/*

 * Cleanup all software without cleaning anything related to PCIe and HW.

	/* On MS Surface gen4+ devices FLR isn't effective to recover from

	 * hangups, so we power-cycle the card instead.

/*

 * Kernel stores and restores PCIe function context before and after performing

 * FLR respectively. Reconfigure the software and firmware including firmware

 * redownload.

 Power Management Hooks */

 PCI Device Driver */

/*

 * This function adds delay loop to ensure FW is awake before proceeding.

 50ms max wait */

 This function wakes up the card by reading fw_status register. */

	/* The 88W8897 PCIe+USB firmware (latest version 15.68.19.p21) sometimes

	 * appears to ignore or miss our wakeup request, so we continue trying

	 * until we receive an interrupt from the card.

/*

 * This function is called after the card has woken up.

 *

 * The card configuration register is reset.

/*

 * This function disables the host interrupt.

 *

 * The host interrupt mask is read, the disable bit is reset and

 * written back to the card host interrupt mask register.

/*

 * This function enables the host interrupt.

 *

 * The host interrupt enable mask is written to the card

 * host interrupt mask register.

 Simply write the mask to the register */

/*

 * This function initializes TX buffer ring descriptors

/* This function initializes RX buffer ring descriptors. Each SKB is allocated

 * here and after mapping PCI memory, its physical address is assigned to

 * PCIE Rx buffer descriptor's physical address.

 Allocate skb here so that firmware can DMA data from it */

/* This function initializes event buffer ring descriptors. Each SKB is

 * allocated here and after mapping PCI memory, its physical address is assigned

 * to PCIE Rx buffer descriptor's physical address

 Allocate skb here so that firmware can DMA data from it */

/* This function cleans up TX buffer rings. If any of the buffer list has valid

 * SKB address, associated SKB is freed.

/* This function cleans up RX buffer rings. If any of the buffer list has valid

 * SKB address, associated SKB is freed.

/* This function cleans up event buffer rings. If any of the buffer list has

 * valid SKB address, associated SKB is freed.

/* This function creates buffer descriptor ring for TX

	/*

	 * driver maintaines the write pointer and firmware maintaines the read

	 * pointer. The write pointer starts at 0 (zero) while the read pointer

	 * starts at zero with rollover bit set

	/* allocate shared memory for the BD ring and divide the same in to

/*

 * This function creates buffer descriptor ring for RX

	/*

	 * driver maintaines the read pointer and firmware maintaines the write

	 * pointer. The write pointer starts at 0 (zero) while the read pointer

	 * starts at zero with rollover bit set

/*

 * This function deletes Buffer descriptor ring for RX

/*

 * This function creates buffer descriptor ring for Events

	/*

	 * driver maintaines the read pointer and firmware maintaines the write

	 * pointer. The write pointer starts at 0 (zero) while the read pointer

	 * starts at zero with rollover bit set

/*

 * This function deletes Buffer descriptor ring for Events

/*

 * This function allocates a buffer for CMDRSP

 Allocate memory for receiving command response data */

/*

 * This function deletes a buffer for CMDRSP

/*

 * This function allocates a buffer for sleep cookie

 Init val of Sleep Cookie */

/*

 * This function deletes buffer for sleep cookie

/* This function flushes the TX buffer descriptor ring

 * This function defined as handler is also called while cleaning TXRX

 * during disconnect/ bss stop.

		/* write pointer already set at last send

		 * send dnld-rdy intr again, wait for completion.

/*

 * This function unmaps and frees downloaded data buffer

 Read the TX ring read pointer set by firmware */

 free from previous txbd_rdptr to current txbd_rdptr */

/* This function sends data buffer to device. First 4 bytes of payload

 * are filled with payload length and payload type. Then this payload

 * is mapped to PCI device memory. Tx ring pointers are advanced accordingly.

 * Download ready interrupt to FW is deffered if Tx ring is not full and

 * additional payload can be accomodated.

 * Caller must ensure tx_param parameter to this function is not NULL.

 Write the TX ring write pointer in to reg->tx_wrptr */

		/* The firmware (latest version 15.68.19.p21) of the 88W8897 PCIe+USB card

		 * seems to crash randomly after setting the TX ring write pointer when

		 * ASPM powersaving is enabled. A workaround seems to be keeping the bus

		 * busy by reading a random register afterwards.

 have more packets and TxBD still can hold more */

 Send the TX ready interrupt */

 Send the TX ready interrupt */

/*

 * This function handles received buffer ring and

 * dispatches packets to upper

 Read the RX ring Write pointer set by firmware */

		/* If skb allocation was failed earlier for Rx packet,

		 * rx_buf_list[rd_index] would have been left with a NULL.

		/* Get data length from interface header -

		 * first 2 bytes for len, next 2 bytes is for type

 Write the RX ring read pointer in to reg->rx_rdptr */

 Read the RX ring Write pointer set by firmware */

/*

 * This function downloads the boot command to device

	/* Write the lower 32bits of the physical address to low command

	 * address scratch register

	/* Write the upper 32bits of the physical address to high command

	 * address scratch register

 Write the command length to cmd_size scratch register */

 Ring the door bell */

/* This function init rx port in firmware which in turn enables to receive data

 * from device before transmitting any packet.

 Write the RX ring read pointer in to reg->rx_rdptr */

/* This function downloads commands to the device

 Make sure a command response buffer is available */

	/*

	 * Need to keep a reference, since core driver might free up this

	 * buffer before we've unmapped it.

	/* To send a command, the driver will:

		1. Write the 64bit physical address of the data buffer to

		   cmd response address low  + cmd response address high

		2. Ring the door bell (i.e. set the door bell interrupt)



		In response to door bell interrupt, the firmware will perform

		the DMA of the command packet (first header to obtain the total

		length and then rest of the command).

		/* Write the lower 32bits of the cmdrsp buffer physical

		/* Write the upper 32bits of the cmdrsp buffer physical

 Write the lower 32bits of the physical address to reg->cmd_addr_lo */

 Write the upper 32bits of the physical address to reg->cmd_addr_hi */

 Write the command length to reg->cmd_size */

 Ring the door bell */

/*

 * This function handles command complete interrupt

 Unmap the command as a response has been received. */

		/* Take the pointer and set it to CMD node and will

		/* Clear the cmd-rsp buffer address in scratch registers. This

		   will prevent firmware from writing to the same response

		/* Write the upper 32bits of the cmdrsp buffer physical

/*

 * Command Response processing complete handler

/*

 * This function handles firmware event ready interrupt

 Read the event ring write pointer set by firmware */

		/* Take the pointer and set it to event pointer in adapter

		/* The first 4bytes will be the event transfer header

		/* Do not update the event read pointer here, wait till the

		   buffer is released. This is just to make things simpler,

		   we need to find a better method of managing these buffers.

/*

 * Event processing complete handler

 Read the event ring write pointer set by firmware */

 Write the event ring read pointer in to reg->evt_rdptr */

/* Combo firmware image is a combination of

 * (1) combo crc heaer, start with CMD5

 * (2) bluetooth image, start with CMD7, end with CMD6, data wrapped in CMD1.

 * (3) wifi image.

 *

 * This function bypass the header and bluetooth part, return

 * the offset of tail wifi-only part. If the image is already wifi-only,

 * that is start with CMD1, return 0.

 Check for integer and buffer overflow */

 Skip past header */

 Image start with cmd1, already wifi-only firmware */

 Check for integer overflow */

 Check for integer overflow */

/*

 * This function downloads the firmware to the card.

 *

 * Firmware is downloaded to the card in blocks. Every block download

 * is tested for CRC errors, and retried a number of times before

 * returning failure.

 PCIE FLR case: extract wifi part from combo firmware*/

 Perform firmware data transfer */

 More data? */

 Setting this to 0 to resend from same offset */

			/* Set blocksize to transfer - checking for

 Copy payload to buffer */

 Send the boot command to device */

 Wait for the command done interrupt */

/*

 * This function checks the firmware status in card.

 Mask spurios interrupts */

 Wait for firmware initialization event */

/* This function checks if WLAN is the winner.

/*

 * This function reads the interrupt status from card.

 Clear the pending interrupts */

		/* Potentially for PCIe we could get other

		 * interrupts like shared. Don't change power

		 * state until cookie is set

/*

 * Interrupt handler for PCIe root port

 *

 * This function reads the interrupt status from firmware and assigns

 * the main process in workqueue which will handle the interrupt.

/*

 * This function checks the current interrupt status.

 *

 * The following interrupts are checked and handled by this function -

 *      - Data sent

 *      - Command sent

 *      - Command received

 *      - Packets received

 *      - Events received

 *

 * In case of Rx packets received, the packets are uploaded from card to

 * host and processed accordingly.

 Clear out unused interrupts */

 Handle command response */

/*

 * This function downloads data from driver to card.

 *

 * Both commands and data packets are transferred to the card by this

 * function.

 *

 * This function adds the PCIE specific header to the front of the buffer

 * before transferring. The header contains the length of the packet and

 * the type. The firmware handles the packets based upon this set type.

/* Function to dump PCIE scratch registers in case of FW crash

 This function read/write firmware */

 This function dump firmware memory to file */

 Read the number of the memories which will dump */

 W8997 chipset firmware dump will be restore in single region*/

 Read the length of every memory which will dump */

	/* We can't afford to wait here; remove() might be waiting on us. If we

	 * can't grab the device lock, maybe we'll get another chance later.

 This function dumps FW information */

/*

 * This function initializes the PCI-E host memory space, WCB rings, etc.

/*

 * This function cleans up the allocated card buffers.

	/* Perform the cancel_work_sync() only when we're not resetting

	 * the card. It's because that function never returns if we're

	 * in reset path. If we're here when resetting the card, it means

	 * that we failed to reset the card (reset failure path).

/*

 * This function gets the firmware name for downloading by revision id

 *

 * Read revision id register to get revision id

/*

 * This function registers the PCIE device.

 *

 * PCIE IRQ is claimed, block size is set and driver data is initialized.

 save adapter pointer in card */

/*

 * This function unregisters the PCIE device.

 *

 * The PCIE IRQ is released, the function is disabled and driver

 * data is set to null.

/*

 * This function initializes the PCI-E host memory space, WCB rings, etc.,

 * similar to mwifiex_init_pcie(), but without resetting PCI-E state.

	/* tx_buf_size might be changed to 3584 by firmware during

	 * data transfer, we should reset it to default size.

 This function cleans up the PCI-E host memory space. */

 PCIE specific */

/*

 * NXP Wireless LAN device driver: major functions

 *

 * Copyright 2011-2020 NXP

 *

 * This software file (the "File") is distributed by NXP

 * under the terms of the GNU General Public License Version 2, June 1991

 * (the "License").  You may use, redistribute and/or modify this File in

 * accordance with the terms and conditions of the License, a copy of which

 * is available by writing to the Free Software Foundation, Inc.,

 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or on the

 * worldwide web at http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

 *

 * THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE

 * ARE EXPRESSLY DISCLAIMED.  The License provides additional details about

 * this warranty disclaimer.

/*

 * This function registers the device and performs all the necessary

 * initializations.

 *

 * The following initialization operations are performed -

 *      - Allocate adapter structure

 *      - Save interface specific operations table in adapter

 *      - Call interface specific initialization routine

 *      - Allocate private structures

 *      - Set default adapter structure parameters

 *      - Initialize locks

 *

 * In case of any errors during inittialization, this function also ensures

 * proper cleanup before exiting.

 Save interface specific operations in adapter */

 card specific initialization has been deferred until now .. */

 Allocate memory for private structure */

/*

 * This function unregisters the device and performs all the necessary

 * cleanups.

 *

 * The following cleanup operations are performed -

 *      - Free the timers

 *      - Free beacon buffers

 *      - Free private structures

 *      - Free adapter structure

 Free private structures */

 Check for Rx data */

/*

 * The main process.

 *

 * This function is the main procedure of the driver and handles various driver

 * operations. It runs in a loop and provides the core functionalities.

 *

 * The main responsibilities of this function are -

 *      - Ensure concurrency control

 *      - Handle pending interrupts and call interrupt handlers

 *      - Wake up the card if required

 *      - Handle command responses and call response handlers

 *      - Handle events and call event handlers

 *      - Execute pending commands

 *      - Transmit pending data packets

 Check if already processing */

		/* For non-USB interfaces, If we process interrupts first, it

		 * would increase RX pending even further. Avoid this by

		 * checking if rx_pending has crossed high threshold and

		 * schedule rx work queue and then process interrupts.

		 * For USB interface, there are no interrupts. We already have

		 * HIGH_RX_PENDING check in usb.c

 Handle pending interrupt if any */

 Need to wake up the card ? */

 We have tried to wakeup the card already */

 Check for event */

 Check for Cmd Resp */

 call mwifiex back when init_fw is done */

		/* Check if we need to confirm Sleep Request

		/* * The ps_state may have been changed during processing of

		 * Sleep Request event.

		/** If USB Multi channel setup ongoing,

		 *  wait for ready to tx data.

/*

 * This function frees the adapter structure.

 *

 * Additionally, this closes the netlink socket, frees the timers

 * and private structures.

/*

 * This function cancels all works in the queue and destroys

 * the main workqueue.

/*

 * This function gets firmware and initializes it.

 *

 * The main initialization steps followed are -

 *      - Download the correct firmware to card

 *      - Issue the init commands to firmware

 enable host interrupt after fw dnld is successful */

 Wait for mwifiex_init to complete */

 Create station interface by default */

 Tell all current and future waiters we're finished */

/*

 * This function gets the firmware and (if called asynchronously) kicks off the

 * HW init when done.

	/* Override default firmware with manufacturing one if

	 * manufacturing mode is enabled

/*

 * CFG802.11 network device handler for open.

 *

 * Starts the data queue.

/*

 * CFG802.11 network device handler for close.

/*

 * Add buffer into wmm tx queue and queue work to transmit it.

 couldn't clone -- lose tx status ... */

/*

 * CFG802.11 network device handler for data transmission.

 Insufficient skb headroom - allocate a new skb */

	/* Record the current time the packet was queued; used to

	 * determine the amount of time the packet was queued in

	 * the driver before it was sent to the firmware.

	 * The delay is then sent along with the packet to the

	 * firmware for aggregate delay calculation for stats and

	 * MSDU lifetime expiry.

 Internal mac address change */

 Set mac address based on bss_type/bss_num */

 Send request to firmware */

/* CFG802.11 network device handler for setting MAC address.

/*

 * CFG802.11 network device handler for setting multicast list.

/*

 * CFG802.11 network device handler for transmission timeout.

	/* Dump all the memory data into single file, a userspace script will

	 * be used to split all the memory data to multiple files

	/* Device dump data will be freed in device coredump release function

	 * after 5 min. Here reset adapter->devdump_data and ->devdump_len

	 * to avoid it been accidentally reused.

 Realloc in case buffer overflow */

/*

 * CFG802.11 network device handler for statistics retrieval.

 Network device handlers */

/*

 * This function initializes the private structure parameters.

 *

 * The following wait queues are initialized -

 *      - IOCTL wait queue

 *      - Command wait queue

 *      - Statistics wait queue

 *

 * ...and the following default parameters are set -

 *      - Current key index     : Set to 0

 *      - Rate index            : Set to auto

 *      - Media connected       : Set to disconnected

 *      - Adhoc link sensed     : Set to false

 *      - Nick name             : Set to null

 *      - Number of Tx timeout  : Set to 0

 *      - Device address        : Set to current address

 *      - Rx histogram statistc : Set to 0

 *

 * In addition, the CFG80211 work queue is also created.

 Initialize private structure */

/*

 * This function check if command is pending.

/*

 * This is the RX work queue function.

 *

 * It handles the RX operations.

/*

 * This is the main work queue function.

 *

 * It handles the main process, which in turn handles the complete

 * driver operations.

 Common teardown code used for both device removal and reset */

	/* We can no longer handle interrupts once we start doing the teardown

	 * below.

 Stop data */

			/*

			 * Close the netdev now, because if we do it later, the

			 * netdev notifiers will need to acquire the wiphy lock

			 * again --> deadlock.

/*

 * This function can be used for shutting down the adapter SW.

 Caller should ensure we aren't suspending while this happens */

/* This function can be used for reinitting the adapter SW. Required

 * code is extracted from mwifiex_add_card()

	/* Register the device. Fill up the private data structure with

	 * relevant information from the card. Some code extracted from

	 * mwifiex_register_dev()

 _mwifiex_fw_dpc() does its own cleanup */

 Notify PM core we are wakeup source */

/*

 * This function adds the card.

 *

 * This function follows the following major steps to set up the device -

 *      - Initialize software. This includes probing the card, registering

 *        the interface operations table, and allocating/initializing the

 *        adapter structure

 *      - Set up the netlink socket

 *      - Create and start the main work queue

 *      - Register the device

 *      - Initialize firmware and hardware

 *      - Add logical interfaces

	/* Register the device. Fill up the private data structure with relevant

/*

 * This function removes the card.

 *

 * This function follows the following major steps to remove the device -

 *      - Stop data traffic

 *      - Shutdown firmware

 *      - Remove the logical interfaces

 *      - Terminate the work queue

 *      - Unregister the device

 *      - Free the adapter structure

 Unregister device */

 Free adapter structure */

/*

 * This function initializes the module.

 *

 * The debug FS is also initialized if configured.

/*

 * This function cleans up the module.

 *

 * The debug FS is removed if available.

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11n HT-PHY support



  Copyright (c) 2011 Rafał Miłecki <zajec5@gmail.com>





 Force values to keep compatibility with wl */

/**************************************************

 * Radio 2059.

 Calibration */

 Calibrate resistors in LPF of PLL? */

 Enable */

 Start */

 Stop */

 Disable */

 Calibrate the internal RC oscillator? */

 Start */

 Wait */

 Stop */

 Prepare (reset?) radio */

 Post init starts below */

 FIXME */

/**************************************************

 * RF

 TODO: Does 5GHz band use different value (not 0x0400)? */

/**************************************************

 * Various PHY ops

 Some unknown AFE (Analog Frondned) op */

 TODO: verify masks&sets */

 Put BPHY in or take it out of the reset */

/**************************************************

 * Samples

 TODO: find out mask bits! Do we need more function arguments? */

/**************************************************

 * RSSI

 Check if caller requested a one specific core */

/**************************************************

 * Tx/Rx

 FIXME */

 We disable enabled TX pwr ctl, save it's state */

 0xF? Or just 0x6? */

 0x159 is probably TX_SSI_MUX or TSSIG (by comparing to N-PHY) */

 TODO: Does it depend on sprom->fem.ghz2.tssipos? */

 TODO: what to mask/set? */

/**************************************************

 * Channel switching ops.

 Check for 13 and 14 is just a guess, we don't have enough logs. */

 Switch to 2 GHz for a moment to access B-PHY regs */

 Switch to 5 GHz */

 Switch to 2 GHz */

 TODO: On N it's for early devices only, what about HT? */

 TODO: In case of N-PHY some bandwidth switching goes here */

/**************************************************

 * Basic PHY ops.

 TODO: Did wl mean 2 instead of 40? */

 Copy some tables entries */

 Reset CCA */

 TODO: Should we restore it? Or store it in global PHY info? */

bcm-v4.sipsolutions.net/802.11/Radio/Switch%20Radio */

/**************************************************

 * R/W ops.

 HT-PHY needs 0x200 for read access */

/**************************************************

 * PHY ops struct.

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11g PHY driver



  Copyright (c) 2005 Martin Langer <martin-langer@gmx.de>,

  Copyright (c) 2005-2007 Stefano Brivio <stefano.brivio@polimi.it>

  Copyright (c) 2005-2008 Michael Buesch <m@bues.ch>

  Copyright (c) 2005, 2006 Danny van Dyk <kugelfang@gentoo.org>

  Copyright (c) 2005, 2006 Andreas Jaggi <andreas.jaggi@waterwave.ch>





 Get the freq, as it has to be written to the device. */

 APHY.rev < 5 || GPHY.rev < 6 */

 Radio.rev == 8 && Radio.version == 0x2050 */

 Otherwise */

 Software pctl */

 Hardware pctl */

 Hardware pctl */

 Synthetic PU workaround */

 We do not need the workaround. */

 Set the baseband attenuation value on chip. */

 Adjust the transmission power output (G-PHY) */

	/* Save the values for later. Use memmove, because it's valid

 GPHY_TSSI_Power_Lookup_Table_Init */

 GPHY_Gain_Lookup_Table_Init */

bcm-specs.sipsolutions.net/NRSSILookupTable */

bcm-specs.sipsolutions.net/NRSSILookupTable */

bcm-specs.sipsolutions.net/NRSSILookupTable */

bcm-specs.sipsolutions.net/NRSSILookupTable */

 Not in specs, but needed to prevent PPC machine check */

 Not in specs, but needed to prevent PPC machine check */

 Not in specs, but needed to prevent PPC machine check */

 Not in specs, but needed to prevent PPC machine check */

/* Stack implementation to save/restore values from the

 * interference mitigation code.

 * It is save to restore values in random order.

 Core registers */

 Radio registers */

 PHY registers */

 get rid of "may be used uninitialized..." */

 Restore the registers */

 Force to channel 7, even if not supported. */

bcm-v4.sipsolutions.net/802.11/PHY/Init/B6 */

 We had code for these revs here... */

 Not in specs, but needed to prevent PPC machine check */

 Not in specs, but needed to prevent PPC machine check */

 Not in specs, but needed to prevent PPC machine check */

 Not in specs, but needed to prevent PPC machine check */

 Hardware power control for G-PHY */

 No hardware power control */

 Enable hardware pctl in firmware. */

 Initialize B/G PHY power control */

 This does something with the Analog... */

 Current-Idle-TSSI sanity check. */

		/* The specs state to update the NRSSI LT with

		 * the value 0x7FFFFFFF here. I think that is some weird

		 * compiler optimization in the original driver.

		 * Essentially, what we do here is resetting all NRSSI LT

		 * entries to -32 (see the clamp_val() in nrssi_hw_update())

FIXME?

	/* FIXME: The spec says in the following if, the 0 should be replaced

	   'if OFDM may not be used in the current locale'

 clamp temp to signed 5bit */

 Initialise the TSSI->dBm lookup table */

 Not supported anymore */

 The pabX values are set in SPROM. Use them. */

 pabX values not set in SPROM. */

	/* tssi2dbm table is constant, so it is initialized at alloc time.

 Save the LO pointer. */

 Zero out the whole PHY structure. */

 Restore pointers. */

 NRSSI */

 OFDM-table address caching. */

 Local Osciallator structure */

 Commit previous writes */

		/* Workaround: Temporarly disable gmode through the early init

 Register 1 is a 32-bit register. */

 G-PHY needs 0x80 for read access. */

 Register 1 is a 32-bit register. */

 Turn radio ON */

 Restore the RFover values. */

 Turn radio OFF */

 Default to channel 1 */

/* https://bcm-specs.sipsolutions.net/EstimatePowerOut

 * This function converts a TSSI value to dBm in Q5.2

	/* Get baseband and radio attenuation values into their permitted ranges.

 Range constants */

 Can not get it into ranges */

 Can not get it into ranges */

 Can not get it into ranges */

 Can not get it into ranges */

 Calculate the new attenuation values. */

 Save the control values */

 Adjust the hardware */

 First get the average TSSI */

 No TSSI information available */

 Merge the average with the stored value. */

 Estimate the TX power emission based on the TSSI */

 minus 0.75 */

dBm*/))) {

 fake it */

 Get desired power (in Q5.2) */

 And limit it. max_pwr already is Q5.2 */

 Calculate the adjustment delta. */

 RF attenuation delta. */

 Lower attenuation => Bigger power output. Negate it. */

 Baseband attenuation delta. */

 Lower attenuation => Bigger power output. Negate it. */

	/* RF att affects power level 4 times as much as

 DEBUG */

 So do we finally need to adjust something in hardware? */

 Save the deltas for later when we adjust the power. */

 We need to adjust the TX power on the device. */

TODO: update_aci_moving_average

TODO: not scanning? */ ) {

TODO: bunch of conditions */ ) {

TODO*/) {

(aci_average > 1000) &&*/ !b43_gphy_aci_scan(dev))

TODO: implement rev1 workaround

 VCO Calibration */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11n PHY and radio device data tables



  Copyright (c) 2008 Michael Buesch <m@bues.ch>

  Copyright (c) 2010 Rafał Miłecki <zajec5@gmail.com>





 Value to write if we use the 5GHz band. */

 Value to write if we use the 2.4GHz band. */

 Flags */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 MHz */

 flush */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  Common PHY routines



  Copyright (c) 2005 Martin Langer <martin-langer@gmx.de>,

  Copyright (c) 2005-2007 Stefano Brivio <stefano.brivio@polimi.it>

  Copyright (c) 2005-2008 Michael Buesch <m@bues.ch>

  Copyright (c) 2005, 2006 Danny van Dyk <kugelfang@gentoo.org>

  Copyright (c) 2005, 2006 Andreas Jaggi <andreas.jaggi@waterwave.ch>





	/* During PHY init we need to use some channel. On the first init this

	 * function is called *before* b43_op_config, so our pointer is NULL.

	/* Commit the write and wait for the firmware

 Commit any write */

 unlock */

 Unset reset bit (with forcing clock) */

 Do not force clock anymore */

 Unset reset bit (with forcing clock) */

 flush */

 flush */

	/* First we set the channel radio code to prevent the

	 * firmware from sending ghost packets.

 FIXME: set 40Mhz flag if required */

 Now try to switch the PHY hardware channel. */

 Wait for the radio to tune to the channel and stabilize. */

/*

 * b43_phy_txpower_adjust_work - TX power workqueue.

 *

 * Workqueue for updating the TX power parameters in hardware.

 Check if it's time for a TXpower check. */

 Not yet */

 The next check will be needed in two seconds, or later. */

 No software txpower adjustment needed */

 We are done. */

	/* We must adjust the transmission power in hardware.

 The values are OK. Clear them. */

 Get the average of the values with 0.5 added to each value. */

 Adjust for CCK-boost */

bcm-v4.sipsolutions.net/802.11/PHY/N/BmacPhyClkFgc */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  Bus abstraction layer



  Copyright (c) 2011 Rafał Miłecki <zajec5@gmail.com>





 BCMA */

 bcma_bus_may_powerdown(dev->bdev->bus); */

 bcma_bus_powerup(dev->sdev->bus, dynamic_pctl); */

 CONFIG_B43_BCMA */

 SSB */

 CONFIG_B43_SSB */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11n 2056 radio device data tables



  Copyright (c) 2010 Rafał Miłecki <zajec5@gmail.com>





 Value to write if we use the 5GHz band. */

 Value to write if we use the 2.4GHz band. */

 Flags */

bcm-v4.sipsolutions.net/802.11/Radio/2056/ChannelTable */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Broadcom B43 wireless driver

 * PPR (Power Per Rate) management

 *

 * Copyright (c) 2014 Rafał Miłecki <zajec5@gmail.com>

 Compile-time PPR check */

 OFDM */

 MCS 20 SISO */

 MCS 20 CDD */

 OFDM 20 CDD */

 MCS 20 STBC */

 MCS 20 SDM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver



  Copyright (c) 2005 Martin Langer <martin-langer@gmx.de>,

  Copyright (c) 2005-2007 Stefano Brivio <stefano.brivio@polimi.it>

  Copyright (c) 2006, 2006 Michael Buesch <m@bues.ch>

  Copyright (c) 2005 Danny van Dyk <kugelfang@gentoo.org>

  Copyright (c) 2005 Andreas Jaggi <andreas.jaggi@waterwave.ch>





 0 */

 8 */

 16 */

 24 */

 32 */

 40 */

 48 */

 0 */

 8 */

 16 */

 24 */

 32 */

 40 */

 48 */

 0 */

 16 */

 32 */

 48 */

 64 */

 80 */

 96 */

 112 */

 128 */

 144 */

 160 */

 176 */

 192 */

 208 */

 224 */

 240 */

 0 */

 16 */

 32 */

 48 */

 64 */

 80 */

 96 */

 112 */

 128 */

 144 */

 160 */

 176 */

 192 */

 208 */

 224 */

 240 */

 0 */

 16 */

 0 */

 16 */

 0 */

 16 */

 0 */

 16 */

 0 */

 16 */

 0 */

 16 */

 32 */

 48 */

 0 */

 16 */

 32 */

 48 */

 0 */

 0 */

 16 */

 32 */

 The hardware has a different address in memory. Update it. */

 Some compiletime assertions... */

 The hardware has a different address in memory. Update it. */

 The hardware has a different address in memory. Update it. */

 The hardware has a different address in memory. Update it. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver



  DMA ringbuffer and descriptor allocation/management



  Copyright (c) 2005, 2006 Michael Buesch <m@bues.ch>



  Some code in this file is derived from the b44.c driver

  Copyright (C) 2002 David S. Miller

  Copyright (C) Pekka Pietikainen





/* Required number of TX DMA slots per TX frame.

 * This currently is 2, because we put the header and the ieee80211 frame

 32bit DMA ops. */

 64bit DMA ops. */

 DEBUG */

 Request a slot for usage. */

	/* The specs call for 4K buffers for 30- and 32-bit DMA with 4K

	 * alignment and 8K buffers for 64-bit DMA with 8K alignment.

	 * In practice we could use smaller buffers for the latter, but the

	 * alignment is really important because of the hardware bug. If bit

	 * 0x00001000 is used in DMA address, some hardware (like BCM4331)

	 * copies that bit into B43_DMA64_RXSTATUS and we get false values from

	 * B43_DMA64_RXSTATDPTR. Let's just use 8K buffers even if we don't use

	 * more than 256 slots for ring.

 Reset the RX DMA channel */

 Reset the TX DMA channel */

 ensure the reset is completed. */

 Check if a DMA mapping address is invalid. */

		/* Currently we can't have addresses beyond

 The address is OK. */

 We can't support this address. Unmap it again. */

 This poisons the RX buffer to detect DMA failures. */

 padding */);

 ugh. try to realloc in zone_dma */

/* Allocate the initial descbuffers.

 * This is used for an RX ring only.

/* Do initial setup of the DMA controller.

 * Reset the controller, write the ring busaddress

 * and switch the "enable" bit on.

 Shutdown the DMA controller. */

 get meta - ignore returned value */

 Main initialization function. */

 Assumption: B43_TXRING_SLOTS can be divided by TX_SLOTS_PER_FRAME */

 test for ability to dma to txhdr_cache */

 ugh realloc */

 Main cleanup function. */

 Print some statistics. */

 DEBUG */

	/* Device IRQs are disabled prior entering this function,

	 * so no need to take care of concurrency with rx handler stuff.

/* Some hardware with 64-bit DMA seems to be bugged and looks for translation

 * bit in low address word instead of high one.

 TODO: find out which SSB devices need disabling parity */

 setup TX DMA channels. */

 setup RX DMA channel. */

 No support for the TX status DMA ring. */

 Generate a cookie for the TX header. */

	/* Use the upper 4 bits of the cookie as

	 * DMA controller ID and store the slot number

	 * in the lower 12 bits.

	 * Note that the cookie must never be 0, as this

	 * is a special value used in RX path.

	 * It can also not be 0xFFFF because that is special

	 * for multicast frames.

 Inspect a cookie and find out to which controller/slot it belongs. */

	/* Important note: If the number of used DMA slots per TX frame

	 * is changed here, the TX_SLOTS_PER_FRAME definition at the top of

	 * the file has to be updated, too!

 Get a slot for the header. */

 Get a slot for the payload. */

 create a bounce buffer in zone_dma on mapping failure. */

		/* Tell the firmware about the cookie of the last

 Now transfer the whole frame. */

		/* Check if we should inject another ringbuffer overflow

 CONFIG_B43_DEBUG */

 Static mapping of mac80211's queues (priorities) to b43 DMA rings. */

 0 = highest priority */

 The multicast ring will be sent after the DTIM */

		/* Set the more-data bit. Ucode will clear it on

 Decide by priority where to put this frame. */

		/* We get here only because of a bug in mac80211.

		 * Because of a race, one packet may be queued after

		 * the queue is stopped, thus we got called when we shouldn't.

		/* If we get here, we have a real error with the queue

	/* Assign the queue number to the ring (if not already done before)

	 * so TX status handling can use it. The queue to ring mapping is

		/* Drop this packet, as we don't have the encryption key

 This TX ring is full. */

 filled with 0 */

	/* Sanity check: TX packets are processed in-order on one ring.

	 * Check if the slot deduced from the cookie really is the first

		/* This possibly is a firmware bug and will result in

		 * malfunction, memory leaks and/or stall of DMA functionality.

			/* If a single header/data pair was missed, skip over

			 * the first two slots in an attempt to recover.

 Report the error once. */

			/* More than a single header/data pair were missed.

			 * Report this error. If running with open-source

			 * firmware, then reset the controller to

			 * revive operation.

 get meta - ignore returned value */

				/* This is a scatter-gather fragment of a frame,

				 * so the skb pointer must not be NULL.

			/*

			 * Call back to inform the ieee80211 subsystem about

			 * the status of the transmission. When skipping over

			 * a missed TX status report, use a status structure

			 * filled with zeros to indicate that the frame was not

			 * sent (frame_count 0) and not acknowledged

 DEBUG */

			/* skb will be freed by ieee80211_tx_status().

			/* No need to call free_descriptor_buffer here, as

			 * this is only the txhdr, which is not allocated.

 Everything unmapped and free'd. So it's not used anymore. */

			/* This is the last scatter-gather

		/* If the driver queue is running wake the corresponding

 Add work to the queue. */

		/* Something went wrong with the DMA.

		/* The data did not fit into one descriptor buffer

		 * and is split over multiple buffers.

		 * This should never happen, as we try to allocate buffers

		 * big enough. So simply ignore this packet.

 recycle the descriptor buffer. */

 Poison and recycle the RX buffer. */

	/* Device has filled all buffers, drop all packets and let TCP

	 * decrease speed.

	 * Decrement RX index by one will let the device to see all slots

	 * as free again

	/*

	*TODO: How to increase rx_drop in mac80211?

/* Enable/Disable Direct FIFO Receive Mode (PIO) on a RX engine.

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11n PHY data tables



  Copyright (c) 2008 Michael Buesch <m@bues.ch>

  Copyright (c) 2010 Rafał Miłecki <zajec5@gmail.com>





 static tables, PHY revision >= 3 */

 volatile  tables, PHY revision >= 3 */

 indexed by antswctl2g */

 static tables, PHY revision >= 7 */

 Copied from brcmsmac (5.75.11) */

 Extracted from MMIO dump of 6.30.223.141 */

/**************************************************

 * TX gain tables

 EPA 2 GHz */

 EPA 5 GHz */

 IPA 2 GHz */

 Copied from brcmsmac (5.75.11): nphy_tpc_txgain_ipa_2g_2057rev5 */

 Extracted from MMIO dump of 6.30.223.141 */

 Extracted from MMIO dump of 6.30.223.248 */

 IPA 2 5Hz */

 Extracted from MMIO dump of 6.30.223.141 */

/* Extracted from MMIO dump of 6.30.223.248

 * Entries: 0, 15, 17, 21, 24, 26, 27, 29, 30 were guessed

 Extracted from MMIO dump of 6.30.223.248 */

/* Extracted from MMIO dump of 6.30.223.248

 * Entries: 0, 26, 28, 29, 30, 31 were guessed

 addr0,  addr1,  bmask,  shift */

 for field == 0x0002 (fls == 2) */

 for field == 0x0004 (fls == 3) */

 for field == 0x0008 (fls == 4) */

 for field == 0x0010 (fls == 5) */

 for field == 0x0020 (fls == 6) */

 for field == 0x0040 (fls == 7) */

 for field == 0x0080 (fls == 8) */

 for field == 0x0100 (fls == 9) */

 for field == 0x0200 (fls == 10) */

 for field == 0x0400 (fls == 11) */

 for field == 0x0800 (fls == 12) */

 for field == 0x1000 (fls == 13) */

 for field == 0x2000 (fls == 14) */

 for field == 0x4000 (fls == 15) */

 val_mask, val_shift, en_addr0, val_addr0, en_addr1, val_addr1 */

 field == 0x0001 (fls 1) */

 field == 0x0002 (fls 2) */

 field == 0x0004 (fls 3) */

 field == 0x0008 (fls 4) */

 field == 0x0010 (fls 5) */

 field == 0x0020 (fls 6) */

 field == 0x0040 (fls 7) */

 field == 0x0080 (fls 8) */

 field == 0x0100 (fls 9) */

 field == 0x0200 (fls 10) */

 field == 0x0400 (fls 11) */

 field == 0x0800 (fls 12) */

 field == 0x1000 (fls 13) */

 field == 0x2000 (fls 14) */

 field == 0x4000 (fls 15) */

 field, val_addr_core0, val_addr_core1, val_mask, val_shift */

 field, val_addr_core0, val_addr_core1, val_mask, val_shift */

 field, val_addr_core0, val_addr_core1, val_mask, val_shift */

 2GHz */

 PHY rev 3 */

 PHY rev 4 */

 PHY rev 5 */

 invalid for external LNA! */

 invalid for external LNA! */

 low is invalid (the last one) */

 PHY rev 6+ */

 invalid for external LNA! */

 invalid for external LNA! */

 low is invalid (the last one) */

 5GHz */

 PHY rev 3 */

 PHY rev 4 */

 PHY rev 5 */

 PHY rev 6+ */

 low is invalid for radio rev 11! */

 Auto increment broken + caching issue on BCM43224? */

 Some compiletime assertions... */

 Auto increment broken + caching issue on BCM43224? */

 Offsets for values */

 Core 0 */

 Core 1 */

 Static tables */

 Volatile tables */

 Static tables */

 Volatile tables */

 Static tables */

 Volatile tables */

 Static tables */

 Volatile tables */

bcm-v4.sipsolutions.net/802.11/PHY/N/InitTables */

bcm-v4.sipsolutions.net/802.11/PHY/N/GetIpaGainTbl */

 rev 3+ */

 Some workarounds to the workarounds... */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  RFKILL support



  Copyright (c) 2007 Michael Buesch <m@bues.ch>





 Returns TRUE, if the radio is enabled in hardware. */

 The poll callback for the hardware button. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11n HT-PHY data tables



  Copyright (c) 2011 Rafał Miłecki <zajec5@gmail.com>





 Some late-init table */

/**************************************************

 * R/W ops.

/**************************************************

 * Tables ops.

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11n LCN-PHY data tables



  Copyright (c) 2011 Rafał Miłecki <zajec5@gmail.com>





/**************************************************

 * Static tables.

/**************************************************

 * TX gain.

/**************************************************

 * SW control.

/**************************************************

 * R/W ops.

/**************************************************

 * Tables ops.

 brcmsmac doesn't maskset, we follow newer wl here */

 wlc_lcnphy_load_rfpower */

		/* TODO: calculate value for 0x240 + i table offset

		 * b43_lcntab_write(dev, B43_LCNTAB32(0x7, 0x240 + i), val);

 Not implemented in brcmsmac, noticed in wl in MMIO dump */

 wlc_lcnphy_clear_papd_comptable */

 wlc_lcnphy_tbl_init */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11a/g LP-PHY driver



  Copyright (c) 2008-2009 Michael Buesch <m@bues.ch>

  Copyright (c) 2009 Gábor Stefanik <netrolller.3d@gmail.com>





TODO

bcm-v4.sipsolutions.net/802.11/PHY/LP/ReadBandSrom */

 5GHz */

FIXME the Broadcom driver caches & delays this HF write!

 5GHz */

 5GHz */

 Initialize the 2062 radio. */

 Get the crystal freq, in Hz. */

 FIXME: Keep this printk until the code is fully debugged. */

 Initialize the 2063 radio. */

 The radio is attached through the 4wire bus. */

 TODO SSB PMU recalibration

FIXME check channel 14!

		/*

		 * SPEC FIXME The spec calls for (pa_gain << 8) here, but that

		 * conflicts with the spec for set_pa_gain! Vendor driver bug?

 Fixed-point division algorithm using only integer math. */

 Read the TX power control mode from hardware. */

 Set the TX power control mode in hardware. */

TODO Update TX Power NPT

TODO Clear all TX Power offsets

TODO Recalculate target TX power

TODO Set "TSSI Transmit Count" variable to total transmitted frame count

		/*

		 * SPEC FIXME: The specs say "get_tx_gains" here, which is

		 * illogical. According to lwfinger, vendor driver v4.150.10.5

		 * has a Set here, while v4.174.64.19 has a Get - regression in

		 * the vendor driver? This should be tested this once the code

		 * is testable.

 rev2+ doesn't support antenna diversity

SPEC FIXME mask & set != 0

TODO check MAC control register

 This was previously called lpphy_japan_filter */

SPEC FIXME check japanwidefilter!

SPEC FIXME Isn't this rev0/1-specific?

SPEC TODO Call LP PHY Clear TX Power offsets

 (SPEC?) TODO Set "Target TX frequency" variable to 0

 SPEC FIXME "Set BB Multiplier to 0xE000" impossible - bb_mult is u8!

 Initialize TX power control */

FIXME HWPCTL capable */) {

 This device is only software TX power control capable. */

FIXME PHY reset

FIXME is table init needed?

SPEC FIXME what does a negative freq mean?

 Find i for which abs(freq) integrally divides 20000 * i */

TODO Perform transmit power table I/Q LO calibration

 Register 1 is a 32-bit register. */

 LP-PHY needs a special bit set for read access */

 Register 1 is a 32-bit register. */

 spec says 2484, but 4000 is safer */

FIXME should this be in prepare_structs?

TODO ACI init

TODO

TODO

TODO

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver



  PIO data transfer



  Copyright (c) 2005-2008 Michael Buesch <m@bues.ch>





	/* Use the upper 4 bits of the cookie as

	 * PIO controller ID and store the packet index number

	 * in the lower 12 bits.

	 * Note that the cookie must never be 0, as this

	 * is a special value used in RX path.

	 * It can also not be 0xFFFF because that is special

	 * for multicast frames.

FIXME this constant is wrong.

 Enable Direct FIFO RX (PIO) on the engine. */

 Static mapping of mac80211's queues (priorities) to b43 PIO queues. */

 0 = highest priority */

 Write the last byte. */

 Transfer the header data. */

 Transfer the frame data. */

 Write the last few bytes. */

 Transfer the header data. */

 Transfer the frame data. */

		/* Tell the firmware about the cookie of the last

	/* Remove it from the list of available packet slots.

 Update the queue statistics. */

 The multicast queue will be sent after the DTIM. */

		/* Set the frame More-Data bit. Ucode will clear it

 Decide by priority where to put this frame. */

 Not enough memory on the queue. */

	/* Assign the queue number to the ring (if not already done before)

	 * so TX status handling can use it. The mac80211-queue to b43-queue

		/* Drop this packet, as we don't have the encryption key

 The queue is full. */

 Returns whether we should fetch another frame. */

 Check if we have data and wait for it to get ready. */

 Get the preamble (RX header) */

 Sanity checks. */

 Drop frames with failed FCS. */

	/* We always pad 2 bytes, as that's what upstream code expects

	 * due to the RX-header being 30 bytes. In case the frame is

 Read the last few bytes. */

 Read the last byte. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver



  PHY workarounds.



  Copyright (c) 2005-2007 Stefano Brivio <stefano.brivio@polimi.it>

  Copyright (c) 2005-2007 Michael Buesch <m@bues.ch>





 RSSI lookup table */

 FIXME: For APHY.rev=2 this might be needed */) {

 Fine frequency table */

 Noise figure table */

 Rotor table */

 Noise scale table */

 ADV retard table */

 Min sigma square table */

 Dummy read */

 TR Lookup Table Original Values */

XXX review rev1

 No N PHY support so far, LP PHY is in phy_lp.c */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11a/g LP-PHY and radio device data tables



  Copyright (c) 2009 Michael Buesch <m@bues.ch>

  Copyright (c) 2009 Gábor Stefanik <netrolller.3d@gmail.com>





 Entry of the 2062/2063 radio init table */

 Flag: Init in A mode */

 Flag: Init in G mode */

 { .offset = B2062_N_COMM1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = 0x0001, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM7, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM8, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM9, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM10, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM11, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM12, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM13, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM14, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_COMM15, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_PDN_CTL0, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_PDN_CTL2, .value_a = 0x0018, .value_g = 0x0018, .flags = 0, }, */

 { .offset = B2062_N_GEN_CTL0, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_IQ_CALIB, .value_a = 0x0001, .value_g = 0x0001, .flags = 0, }, */

 { .offset = B2062_N_LGENA_LPF, .value_a = 0x0001, .value_g = 0x0001, .flags = 0, }, */

 { .offset = B2062_N_LGENA_BIAS0, .value_a = 0x0041, .value_g = 0x0041, .flags = 0, }, */

 { .offset = B2062_N_LGNEA_BIAS1, .value_a = 0x0002, .value_g = 0x0002, .flags = 0, }, */

 { .offset = B2062_N_LGENA_CTL0, .value_a = 0x0032, .value_g = 0x0032, .flags = 0, }, */

 { .offset = B2062_N_LGENA_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_LGENA_CTL2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_LGENA_TUNE1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_LGENA_CTL4, .value_a = 0x001F, .value_g = 0x001F, .flags = 0, }, */

 { .offset = B2062_N_LGENA_CTL5, .value_a = 0x0032, .value_g = 0x0032, .flags = 0, }, */

 { .offset = B2062_N_LGENA_CTL6, .value_a = 0x0032, .value_g = 0x0032, .flags = 0, }, */

 { .offset = B2062_N_RXA_CTL0, .value_a = 0x0009, .value_g = 0x0009, .flags = 0, }, */

 { .offset = B2062_N_RXA_CTL2, .value_a = 0x0018, .value_g = 0x0018, .flags = 0, }, */

 { .offset = B2062_N_RXA_CTL3, .value_a = 0x0027, .value_g = 0x0027, .flags = 0, }, */

 { .offset = B2062_N_RXA_CTL4, .value_a = 0x0028, .value_g = 0x0028, .flags = 0, }, */

 { .offset = B2062_N_RXA_CTL5, .value_a = 0x0007, .value_g = 0x0007, .flags = 0, }, */

 { .offset = B2062_N_RXA_CTL6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_RXA_CTL7, .value_a = 0x0008, .value_g = 0x0008, .flags = 0, }, */

 { .offset = B2062_N_RXBB_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_RXBB_CTL2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_RXBB_GAIN0, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_RXBB_GAIN3, .value_a = 0x0011, .value_g = 0x0011, .flags = 0, }, */

 { .offset = B2062_N_RXBB_RSSI0, .value_a = 0x0043, .value_g = 0x0043, .flags = 0, }, */

 { .offset = B2062_N_RXBB_RSSI1, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2062_N_RXBB_CALIB0, .value_a = 0x0010, .value_g = 0x0010, .flags = 0, }, */

 { .offset = B2062_N_RXBB_CALIB1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_RXBB_CALIB2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_RXBB_BIAS0, .value_a = 0x0006, .value_g = 0x0006, .flags = 0, }, */

 { .offset = B2062_N_RXBB_BIAS1, .value_a = 0x002A, .value_g = 0x002A, .flags = 0, }, */

 { .offset = B2062_N_RXBB_BIAS2, .value_a = 0x00AA, .value_g = 0x00AA, .flags = 0, }, */

 { .offset = B2062_N_RXBB_BIAS3, .value_a = 0x0021, .value_g = 0x0021, .flags = 0, }, */

 { .offset = B2062_N_RXBB_BIAS4, .value_a = 0x00AA, .value_g = 0x00AA, .flags = 0, }, */

 { .offset = B2062_N_RXBB_BIAS5, .value_a = 0x0022, .value_g = 0x0022, .flags = 0, }, */

 { .offset = B2062_N_RXBB_RSSI2, .value_a = 0x0001, .value_g = 0x0001, .flags = 0, }, */

 { .offset = B2062_N_RXBB_RSSI3, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2062_N_RXBB_RSSI4, .value_a = 0x0001, .value_g = 0x0001, .flags = 0, }, */

 { .offset = B2062_N_RXBB_RSSI5, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2062_N_TX_CTL0, .value_a = 0x0001, .value_g = 0x0001, .flags = 0, }, */

 { .offset = B2062_N_TX_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_TX_CTL2, .value_a = 0x0084, .value_g = 0x0084, .flags = 0, }, */

 { .offset = B2062_N_TX_CTL3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_TX_CTL6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_TX_CTL7, .value_a = 0x0058, .value_g = 0x0058, .flags = 0, }, */

 { .offset = B2062_N_TX_CTL8, .value_a = 0x0082, .value_g = 0x0082, .flags = 0, }, */

 { .offset = B2062_N_TX_CTL9, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_TX_CTL_A, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_TX_GC2G, .value_a = 0x00FF, .value_g = 0x00FF, .flags = 0, }, */

 { .offset = B2062_N_TX_GC5G, .value_a = 0x00FF, .value_g = 0x00FF, .flags = 0, }, */

 { .offset = B2062_N_TX_PAD, .value_a = 0x0088, .value_g = 0x0088, .flags = 0, }, */

 { .offset = B2062_N_TX_PGA, .value_a = 0x0088, .value_g = 0x0088, .flags = 0, }, */

 { .offset = B2062_N_TX_PADAUX, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2062_N_TX_PGAAUX, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2062_N_TSSI_CTL0, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_TSSI_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_TSSI_CTL2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_IQ_CALIB_CTL0, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2062_N_IQ_CALIB_CTL1, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2062_N_IQ_CALIB_CTL2, .value_a = 0x0032, .value_g = 0x0032, .flags = 0, }, */

 { .offset = B2062_N_CALIB_TS, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_CALIB_CTL0, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_CALIB_CTL1, .value_a = 0x0015, .value_g = 0x0015, .flags = 0, }, */

 { .offset = B2062_N_CALIB_CTL2, .value_a = 0x000F, .value_g = 0x000F, .flags = 0, }, */

 { .offset = B2062_N_CALIB_CTL3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_CALIB_CTL4, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_CALIB_DBG0, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_CALIB_DBG1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_CALIB_DBG2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_CALIB_DBG3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_PSENSE_CTL0, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_PSENSE_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_PSENSE_CTL2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_N_TEST_BUF0, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RADIO_ID_CODE, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM7, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM8, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM9, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM10, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM11, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM12, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM13, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM14, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_COMM15, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_PDS_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_PDS_CTL2, .value_a = 0x008E, .value_g = 0x008E, .flags = 0, }, */

 { .offset = B2062_S_PDS_CTL3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_BG_CTL0, .value_a = 0x0006, .value_g = 0x0006, .flags = 0, }, */

 { .offset = B2062_S_BG_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_BG_CTL2, .value_a = 0x0011, .value_g = 0x0011, .flags = 0, }, */

 { .offset = B2062_S_LGENG_CTL2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_LGENG_CTL3, .value_a = 0x0041, .value_g = 0x0041, .flags = 0, }, */

 { .offset = B2062_S_LGENG_CTL4, .value_a = 0x0002, .value_g = 0x0002, .flags = 0, }, */

 { .offset = B2062_S_LGENG_CTL5, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2062_S_LGENG_CTL6, .value_a = 0x0022, .value_g = 0x0022, .flags = 0, }, */

 { .offset = B2062_S_LGENG_CTL7, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_LGENG_CTL9, .value_a = 0x0088, .value_g = 0x0088, .flags = 0, }, */

 { .offset = B2062_S_LGENG_CTL11, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL0, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL1, .value_a = 0x0007, .value_g = 0x0007, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL2, .value_a = 0x00AF, .value_g = 0x00AF, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL3, .value_a = 0x0012, .value_g = 0x0012, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL4, .value_a = 0x000B, .value_g = 0x000B, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL5, .value_a = 0x005F, .value_g = 0x005F, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL7, .value_a = 0x0040, .value_g = 0x0040, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL8, .value_a = 0x0052, .value_g = 0x0052, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL9, .value_a = 0x0026, .value_g = 0x0026, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL10, .value_a = 0x0003, .value_g = 0x0003, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL11, .value_a = 0x0036, .value_g = 0x0036, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL12, .value_a = 0x0057, .value_g = 0x0057, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL13, .value_a = 0x0011, .value_g = 0x0011, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL14, .value_a = 0x0075, .value_g = 0x0075, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL15, .value_a = 0x00B4, .value_g = 0x00B4, .flags = 0, }, */

 { .offset = B2062_S_REFPLL_CTL16, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL4, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL15, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL16, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL17, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL20, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL26, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL27, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL28, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL29, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RFPLL_CTL32, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT0, .value_a = 0x0010, .value_g = 0x0010, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT4, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT5, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT6, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT7, .value_a = 0x0005, .value_g = 0x0005, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT9, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT10, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT11, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT12, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT13, .value_a = 0x0044, .value_g = 0x0044, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT14, .value_a = 0x00A0, .value_g = 0x00A0, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT15, .value_a = 0x0004, .value_g = 0x0004, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT16, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2062_S_RXG_CNT17, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2063_COMM2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_COMM3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_COMM4, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_COMM5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_COMM6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_COMM7, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_COMM8, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_COMM9, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_COMM11, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_COMM12, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_COMM13, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_COMM14, .value_a = 0x0006, .value_g = 0x0006, .flags = 0, }, */

 { .offset = B2063_COMM15, .value_a = 0x000f, .value_g = 0x000f, .flags = 0, }, */

 { .offset = B2063_PWR_SWITCH_CTL, .value_a = 0x007f, .value_g = 0x007f, .flags = 0, }, */

 { .offset = B2063_PLL_SP1, .value_a = 0x003f, .value_g = 0x003f, .flags = 0, }, */

 { .offset = B2063_PLL_SP2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LOGEN_SP3, .value_a = 0x00ff, .value_g = 0x00ff, .flags = 0, }, */

 { .offset = B2063_LOGEN_SP5, .value_a = 0x0001, .value_g = 0x0001, .flags = 0, }, */

 { .offset = B2063_G_RX_SP4, .value_a = 0x0035, .value_g = 0x0035, .flags = 0, }, */

 { .offset = B2063_G_RX_SP5, .value_a = 0x003f, .value_g = 0x003f, .flags = 0, }, */

 { .offset = B2063_G_RX_SP6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_SP8, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_SP9, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_SP11, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_SP3, .value_a = 0x00ff, .value_g = 0x00ff, .flags = 0, }, */

 { .offset = B2063_A_RX_SP4, .value_a = 0x00ff, .value_g = 0x00ff, .flags = 0, }, */

 { .offset = B2063_A_RX_SP5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_SP6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_RX_BB_SP1, .value_a = 0x000f, .value_g = 0x000f, .flags = 0, }, */

 { .offset = B2063_RX_BB_SP2, .value_a = 0x0022, .value_g = 0x0022, .flags = 0, }, */

 { .offset = B2063_RX_BB_SP3, .value_a = 0x00a8, .value_g = 0x00a8, .flags = 0, }, */

 { .offset = B2063_RX_BB_SP5, .value_a = 0x0011, .value_g = 0x0011, .flags = 0, }, */

 { .offset = B2063_RX_BB_SP6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_RX_BB_SP7, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP1, .value_a = 0x0001, .value_g = 0x0001, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP2, .value_a = 0x0003, .value_g = 0x0003, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP5, .value_a = 0x000f, .value_g = 0x000f, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP6, .value_a = 0x0080, .value_g = 0x0080, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP7, .value_a = 0x0068, .value_g = 0x0068, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP8, .value_a = 0x0068, .value_g = 0x0068, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP9, .value_a = 0x0080, .value_g = 0x0080, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP10, .value_a = 0x00ff, .value_g = 0x00ff, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP11, .value_a = 0x0003, .value_g = 0x0003, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP12, .value_a = 0x0038, .value_g = 0x0038, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP13, .value_a = 0x00ff, .value_g = 0x00ff, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP14, .value_a = 0x0038, .value_g = 0x0038, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP15, .value_a = 0x00c0, .value_g = 0x00c0, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP16, .value_a = 0x00ff, .value_g = 0x00ff, .flags = 0, }, */

 { .offset = B2063_TX_RF_SP17, .value_a = 0x00ff, .value_g = 0x00ff, .flags = 0, }, */

 { .offset = B2063_PA_SP2, .value_a = 0x000c, .value_g = 0x000c, .flags = 0, }, */

 { .offset = B2063_PA_SP3, .value_a = 0x0096, .value_g = 0x0096, .flags = 0, }, */

 { .offset = B2063_PA_SP4, .value_a = 0x005a, .value_g = 0x005a, .flags = 0, }, */

 { .offset = B2063_PA_SP5, .value_a = 0x007f, .value_g = 0x007f, .flags = 0, }, */

 { .offset = B2063_PA_SP6, .value_a = 0x007f, .value_g = 0x007f, .flags = 0, }, */

 { .offset = B2063_PA_SP7, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2063_TX_BB_SP2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_TX_BB_SP3, .value_a = 0x0030, .value_g = 0x0030, .flags = 0, }, */

 { .offset = B2063_REG_SP1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_BANDGAP_CTL2, .value_a = 0x0006, .value_g = 0x0006, .flags = 0, }, */

 { .offset = B2063_LPO_CTL1, .value_a = 0x000e, .value_g = 0x000e, .flags = 0, }, */

 { .offset = B2063_RC_CALIB_CTL1, .value_a = 0x007e, .value_g = 0x007e, .flags = 0, }, */

 { .offset = B2063_RC_CALIB_CTL2, .value_a = 0x0015, .value_g = 0x0015, .flags = 0, }, */

 { .offset = B2063_RC_CALIB_CTL3, .value_a = 0x000f, .value_g = 0x000f, .flags = 0, }, */

 { .offset = B2063_RC_CALIB_CTL4, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_RC_CALIB_CTL5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_RC_CALIB_CTL6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_RC_CALIB_CTL7, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_RC_CALIB_CTL8, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_RC_CALIB_CTL9, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_RC_CALIB_CTL10, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_CALNRST, .value_a = 0x0004, .value_g = 0x0004, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_IN_PLL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_IN_PLL2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_CP1, .value_a = 0x00cf, .value_g = 0x00cf, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_CP2, .value_a = 0x0059, .value_g = 0x0059, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_CP3, .value_a = 0x0007, .value_g = 0x0007, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_CP4, .value_a = 0x0042, .value_g = 0x0042, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_LF1, .value_a = 0x00db, .value_g = 0x00db, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_LF2, .value_a = 0x0094, .value_g = 0x0094, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_LF3, .value_a = 0x0028, .value_g = 0x0028, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_LF4, .value_a = 0x0063, .value_g = 0x0063, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_SG1, .value_a = 0x0007, .value_g = 0x0007, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_SG2, .value_a = 0x00d3, .value_g = 0x00d3, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_SG3, .value_a = 0x00b1, .value_g = 0x00b1, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_SG4, .value_a = 0x003b, .value_g = 0x003b, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_SG5, .value_a = 0x0006, .value_g = 0x0006, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_VCO1, .value_a = 0x0058, .value_g = 0x0058, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_VCO_CALIB1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_VCO_CALIB2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_VCO_CALIB3, .value_a = 0x0002, .value_g = 0x0002, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_VCO_CALIB4, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_VCO_CALIB5, .value_a = 0x0009, .value_g = 0x0009, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_VCO_CALIB6, .value_a = 0x0005, .value_g = 0x0005, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_VCO_CALIB7, .value_a = 0x0016, .value_g = 0x0016, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_VCO_CALIB8, .value_a = 0x006b, .value_g = 0x006b, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_VCO_CALIB9, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_VCO_CALIB10, .value_a = 0x00b3, .value_g = 0x00b3, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_XTAL_12, .value_a = 0x0004, .value_g = 0x0004, .flags = 0, }, */

 { .offset = B2063_PLL_JTAG_PLL_XTAL3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LOGEN_ACL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LOGEN_ACL2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LOGEN_ACL3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LOGEN_ACL4, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LOGEN_ACL5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_INPUTS, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CTL2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CTL3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_WAITCNT, .value_a = 0x0002, .value_g = 0x0002, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_OVR1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_OVR2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_OVAL1, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_OVAL2, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_OVAL3, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_OVAL4, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_OVAL5, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_OVAL6, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_OVAL7, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CALVLD1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CALVLD2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CVAL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CVAL2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CVAL3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CVAL4, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CVAL5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CVAL6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LO_CALIB_CVAL7, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LOGEN_CALIB_EN, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LOGEN_PEAKDET1, .value_a = 0x00ff, .value_g = 0x00ff, .flags = 0, }, */

 { .offset = B2063_LOGEN_RCCR1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LOGEN_VCOBUF1, .value_a = 0x0060, .value_g = 0x0060, .flags = 0, }, */

 { .offset = B2063_LOGEN_MIXER1, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LOGEN_MIXER2, .value_a = 0x000c, .value_g = 0x000c, .flags = 0, }, */

 { .offset = B2063_LOGEN_BUF1, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LOGEN_BUF2, .value_a = 0x000c, .value_g = 0x000c, .flags = 0, }, */

 { .offset = B2063_LOGEN_DIV1, .value_a = 0x0001, .value_g = 0x0001, .flags = 0, }, */

 { .offset = B2063_LOGEN_DIV2, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LOGEN_DIV3, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LOGEN_CBUFRX1, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LOGEN_CBUFRX2, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LOGEN_CBUFTX1, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LOGEN_CBUFTX2, .value_a = 0x0066, .value_g = 0x0066, .flags = 0, }, */

 { .offset = B2063_LOGEN_IDAC1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LOGEN_SPARE1, .value_a = 0x0001, .value_g = 0x0001, .flags = 0, }, */

 { .offset = B2063_LOGEN_SPARE2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_LOGEN_SPARE3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_1ST1, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2063_G_RX_1ST2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_1ST3, .value_a = 0x0005, .value_g = 0x0005, .flags = 0, }, */

 { .offset = B2063_G_RX_2ND1, .value_a = 0x0030, .value_g = 0x0030, .flags = 0, }, */

 { .offset = B2063_G_RX_2ND2, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2063_G_RX_2ND3, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2063_G_RX_2ND4, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_2ND5, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2063_G_RX_2ND6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_2ND7, .value_a = 0x0035, .value_g = 0x0035, .flags = 0, }, */

 { .offset = B2063_G_RX_2ND8, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_PS1, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2063_G_RX_PS2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_PS3, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2063_G_RX_PS4, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_PS5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_MIX1, .value_a = 0x0044, .value_g = 0x0044, .flags = 0, }, */

 { .offset = B2063_G_RX_MIX2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_MIX5, .value_a = 0x0003, .value_g = 0x0003, .flags = 0, }, */

 { .offset = B2063_G_RX_MIX6, .value_a = 0x0088, .value_g = 0x0088, .flags = 0, }, */

 { .offset = B2063_G_RX_MIX7, .value_a = 0x0044, .value_g = 0x0044, .flags = 0, }, */

 { .offset = B2063_G_RX_MIX8, .value_a = 0x0001, .value_g = 0x0001, .flags = 0, }, */

 { .offset = B2063_G_RX_PDET1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_SPARES1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_SPARES2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_G_RX_SPARES3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_1ST1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_1ST3, .value_a = 0x0005, .value_g = 0x0005, .flags = 0, }, */

 { .offset = B2063_A_RX_1ST4, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2063_A_RX_1ST5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_2ND1, .value_a = 0x0005, .value_g = 0x0005, .flags = 0, }, */

 { .offset = B2063_A_RX_2ND2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_2ND3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_2ND4, .value_a = 0x0005, .value_g = 0x0005, .flags = 0, }, */

 { .offset = B2063_A_RX_2ND5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_2ND6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_2ND7, .value_a = 0x0005, .value_g = 0x0005, .flags = 0, }, */

 { .offset = B2063_A_RX_PS1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_PS2, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2063_A_RX_PS3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_PS4, .value_a = 0x0033, .value_g = 0x0033, .flags = 0, }, */

 { .offset = B2063_A_RX_PS5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_MIX1, .value_a = 0x0088, .value_g = 0x0088, .flags = 0, }, */

 { .offset = B2063_A_RX_MIX2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_MIX3, .value_a = 0x0044, .value_g = 0x0044, .flags = 0, }, */

 { .offset = B2063_A_RX_MIX7, .value_a = 0x0044, .value_g = 0x0044, .flags = 0, }, */

 { .offset = B2063_A_RX_MIX8, .value_a = 0x0001, .value_g = 0x0001, .flags = 0, }, */

 { .offset = B2063_A_RX_PWRDET1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_SPARE1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_SPARE2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_A_RX_SPARE3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_RX_TIA_CTL2, .value_a = 0x0058, .value_g = 0x0058, .flags = 0, }, */

 { .offset = B2063_RX_TIA_CTL4, .value_a = 0x0058, .value_g = 0x0058, .flags = 0, }, */

 { .offset = B2063_RX_TIA_CTL5, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_RX_TIA_CTL6, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_RX_BB_CTL1, .value_a = 0x0074, .value_g = 0x0074, .flags = 0, }, */

 { .offset = B2063_RX_BB_CTL3, .value_a = 0x00a2, .value_g = 0x00a2, .flags = 0, }, */

 { .offset = B2063_RX_BB_CTL4, .value_a = 0x00aa, .value_g = 0x00aa, .flags = 0, }, */

 { .offset = B2063_RX_BB_CTL5, .value_a = 0x0024, .value_g = 0x0024, .flags = 0, }, */

 { .offset = B2063_RX_BB_CTL6, .value_a = 0x00a9, .value_g = 0x00a9, .flags = 0, }, */

 { .offset = B2063_RX_BB_CTL7, .value_a = 0x0028, .value_g = 0x0028, .flags = 0, }, */

 { .offset = B2063_RX_BB_CTL8, .value_a = 0x0010, .value_g = 0x0010, .flags = 0, }, */

 { .offset = B2063_RX_BB_CTL9, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL1, .value_a = 0x0080, .value_g = 0x0080, .flags = 0, }, */

 { .offset = B2063_TX_RF_IDAC_LO_RF_I, .value_a = 0x0088, .value_g = 0x0088, .flags = 0, }, */

 { .offset = B2063_TX_RF_IDAC_LO_RF_Q, .value_a = 0x0088, .value_g = 0x0088, .flags = 0, }, */

 { .offset = B2063_TX_RF_IDAC_LO_BB_I, .value_a = 0x0088, .value_g = 0x0088, .flags = 0, }, */

 { .offset = B2063_TX_RF_IDAC_LO_BB_Q, .value_a = 0x0088, .value_g = 0x0088, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL2, .value_a = 0x0080, .value_g = 0x0080, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL3, .value_a = 0x0038, .value_g = 0x0038, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL4, .value_a = 0x00b8, .value_g = 0x00b8, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL5, .value_a = 0x0080, .value_g = 0x0080, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL6, .value_a = 0x0038, .value_g = 0x0038, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL7, .value_a = 0x0078, .value_g = 0x0078, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL8, .value_a = 0x00c0, .value_g = 0x00c0, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL9, .value_a = 0x0003, .value_g = 0x0003, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL10, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL14, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_TX_RF_CTL15, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PA_CTL2, .value_a = 0x000c, .value_g = 0x000c, .flags = 0, }, */

 { .offset = B2063_PA_CTL3, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PA_CTL4, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PA_CTL5, .value_a = 0x0096, .value_g = 0x0096, .flags = 0, }, */

 { .offset = B2063_PA_CTL6, .value_a = 0x0077, .value_g = 0x0077, .flags = 0, }, */

 { .offset = B2063_PA_CTL7, .value_a = 0x005a, .value_g = 0x005a, .flags = 0, }, */

 { .offset = B2063_PA_CTL8, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PA_CTL9, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PA_CTL10, .value_a = 0x0021, .value_g = 0x0021, .flags = 0, }, */

 { .offset = B2063_PA_CTL11, .value_a = 0x0070, .value_g = 0x0070, .flags = 0, }, */

 { .offset = B2063_PA_CTL12, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_PA_CTL13, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_TX_BB_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_TX_BB_CTL2, .value_a = 0x00b3, .value_g = 0x00b3, .flags = 0, }, */

 { .offset = B2063_TX_BB_CTL3, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2063_TX_BB_CTL4, .value_a = 0x000b, .value_g = 0x000b, .flags = 0, }, */

 { .offset = B2063_GPIO_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_AMUX_CTL1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_IQ_CALIB_GVAR, .value_a = 0x00b3, .value_g = 0x00b3, .flags = 0, }, */

 { .offset = B2063_IQ_CALIB_CTL1, .value_a = 0x0055, .value_g = 0x0055, .flags = 0, }, */

 { .offset = B2063_IQ_CALIB_CTL2, .value_a = 0x0030, .value_g = 0x0030, .flags = 0, }, */

 { .offset = B2063_TEMPSENSE_CTL1, .value_a = 0x0046, .value_g = 0x0046, .flags = 0, }, */

 { .offset = B2063_TEMPSENSE_CTL2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_TX_RX_LOOPBACK1, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_TX_RX_LOOPBACK2, .value_a = 0x0000, .value_g = 0x0000, .flags = 0, }, */

 { .offset = B2063_EXT_TSSI_CTL1, .value_a = 0x0021, .value_g = 0x0021, .flags = 0, }, */

 { .offset = B2063_EXT_TSSI_CTL2, .value_a = 0x0023, .value_g = 0x0023, .flags = 0, }, */

 { .offset = B2063_AFE_CTL , .value_a = 0x0002, .value_g = 0x0002, .flags = 0, }, */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver



  debugfs driver debugging code



  Copyright (c) 2005-2007 Michael Buesch <m@bues.ch>





 The root directory. */

 Offset of struct b43_dfs_file in struct b43_dfsentry */

 The biggest address values for SHM access from the debugfs files. */

 The biggest MMIO address that we allow access to from the debugfs files. */

 expired */

 jiffies wrapped */

 16 kiB buffer */

		/* Force full debugging messages, if the user enabled

 invalid address */

 invalid address */

 invalid routing */

 invalid address */

 invalid routing */

 invalid address */

/*



  Broadcom B43 wireless driver

  IEEE 802.11n LCN-PHY support



  Copyright (c) 2011 Rafał Miłecki <zajec5@gmail.com>



  This program is free software; you can redistribute it and/or modify

  it under the terms of the GNU General Public License as published by

  the Free Software Foundation; either version 2 of the License, or

  (at your option) any later version.



  This program is distributed in the hope that it will be useful,

  but WITHOUT ANY WARRANTY; without even the implied warranty of

  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

  GNU General Public License for more details.



  You should have received a copy of the GNU General Public License

  along with this program; see the file COPYING.  If not, write to

  the Free Software Foundation, Inc., 51 Franklin Steet, Fifth Floor,

  Boston, MA 02110-1301, USA.



  This file incorporates work covered by the following copyright and

  permission notice:



      Copyright (c) 2010 Broadcom Corporation



      Permission to use, copy, modify, and/or distribute this software for any

      purpose with or without fee is hereby granted, provided that the above

      copyright notice and this permission notice appear in all copies.

/**************************************************

 * Radio 2064.

 wlc_lcnphy_radio_2064_channel_tune_4313 */

 Channel specific values in theory, in practice always the same */

 TODO */

 TODO */

 brcmsmac uses outdated 0x3 for 0x038 */

 wlc_radio_2064_init */

 TODO */

 TODO: wait for some bit to be set */

/**************************************************

 * Various PHY ops

 wlc_lcnphy_toggle_afe_pwdn */

 wlc_lcnphy_get_pa_gain */

 wlc_lcnphy_set_dac_gain */

 wlc_lcnphy_set_bbmult */

 wlc_lcnphy_clear_tx_power_offsets */

 FIXME */

 wlc_lcnphy_rev0_baseband_init */

 TODO */

 wlc_lcnphy_bu_tweaks */

 FIXME: update to wl */

 TODO: wl operates on PHY 0x416, brcmsmac is outdated here */

 TODO: something more? */

 wlc_lcnphy_vbat_temp_sense_setup */

 Save */

 wlc_lcnphy_set_tx_pwr_ctrl(pi, LCNPHY_TX_PWR_CTRL_OFF); */

 Setup */

 TODO: wlc_lcnphy_set_tx_pwr_by_index(pi, 127); */

 FIXME: don't hardcode */

 Wait if not done */

 Restore */

 TODO: wlc_lcnphy_set_tx_pwr_by_index(tx_pwr_idx) */

	/* Table is from brcmsmac, values for type 25 were outdated, probably

		/* brcmsmac version { 25, { 1, 299, 1884, 51, 64, 51, 736, 1720,

 wlc_lcnphy_set_tx_gain_override */

 wlc_lcnphy_set_tx_gain */

 wlc_lcnphy_tx_pwr_ctrl_init */

 wlc_lcnphy_txrx_spur_avoidance_mode */

/**************************************************

 * Channel switching ops.

 wlc_lcnphy_set_chanspec_tweaks */

 wlc_phy_chanspec_set_lcnphy */

 brcmsmac uses filter_type 2, we follow wl with 25 */

 brcmsmac uses filter_type 2, we follow wl with 0 */

/**************************************************

 * Basic PHY ops.

 wlc_phy_init_lcnphy */

 TODO */

 TODO */

/**************************************************

 * R/W ops.

 LCN-PHY needs 0x200 for read access */

/**************************************************

 * PHY ops struct.

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11n 2059 radio device data tables



  Copyright (c) 2011 Rafał Miłecki <zajec5@gmail.com>





 Extracted from MMIO dump of 6.30.223.141 */

/* Extracted from MMIO dump of 6.30.223.141

 * TODO: Values for channels 12 & 13 are outdated (from some old 5.x driver)!

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver



  Transmission (TX/RX) related functions.



  Copyright (C) 2005 Martin Langer <martin-langer@gmx.de>

  Copyright (C) 2005 Stefano Brivio <stefano.brivio@polimi.it>

  Copyright (C) 2005, 2006 Michael Buesch <m@bues.ch>

  Copyright (C) 2005 Danny van Dyk <kugelfang@gentoo.org>

  Copyright (C) 2005 Andreas Jaggi <andreas.jaggi@waterwave.ch>





 Extract the bitrate index out of a CCK PLCP header. */

 Extract the bitrate index out of an OFDM PLCP header. */

 For 2 GHz band first OFDM rate is at index 4, see main.c */

 TODO: verify if needed for SSLPN or LCN  */

 FIXME */

 FIXME: MIMO */

	/*

	 * Don't just fallback to CCK; it may be in 5GHz operation

	 * and falling back to CCK won't work out very well.

 Generate a TX data header. */

 Calculate duration for fallback rate */

		/* If the fallback rate equals the normal rate or the

		 * dur_id field contains an AID, CFP magic or 0,

			/* This key is invalid. This might only happen

			 * in a short timeframe after machine resume before

			 * we were able to reconfigure keys.

			 * Drop this packet completely. Do not transmit it

 Hardware appends ICV. */

			/* we give the phase1key and iv16 here, the key is stored in

			 * shm. With that the hardware can do phase 2 and encryption.

 phase1key is in host endian. Copy to little-endian txhdr->iv. */

 iv16 */

 Extra Frame Types */

	/* Set channel radio code. Note that the micrcode ORs 0x100 to

	 * this value before comparing it to the value in SHM, if this

	 * is a 5Ghz packet.

 PHY TX Control word */

 Default */

 Antenna 0 */

 Antenna 1 */

 Antenna 2 */

 Antenna 3 */

 MAC control */

 use hardware sequence counter as the non-TID counter */

	/* Overwrite rates[0].count to make the retry calculation

	 * in the tx status easier. need the actual retry limit to

	 * detect whether the fallback rate was used.

 Generate the RTS or CTS-to-self frame */

 Generate the PLCP headers for the RTS/CTS frame */

 Magic cookie */

 Apply the bitfields */

 Get metadata about the frame from the header. */

		/* Decryption with the given key failed.

		 * Drop the packet. We also won't be able to decrypt it with

 Skip PLCP and padding */

 The skb contains the Wireless Header + payload data now */

minimum hdr */  + FCS_LEN))) {

		/* We must adjust the key index here. We want the "physical"

		 * key index, but the ucode passed it slightly different.

 Link quality statistics */

 TODO: is max the right choice? */

 Broadcom has code for min and avg, but always uses max */

		/* PLCP seems to be corrupted.

	/*

	 * All frames on monitor interfaces and beacons always need a full

	 * 64-bit timestamp. Monitor interfaces need it for diagnostic

	 * purposes and beacons for IBSS merging.

	 * This code assumes we get to process the packet within 16 bits

	 * of timestamp, i.e. about 65 milliseconds after the PHY received

	 * the first symbol.

		/* Somewhere between 478.104 and 508.1084 firmware for G-PHY

		 * has been modified to be compatible with N-PHY and others.

		/* chanid is the SHM channel cookie. Which is the plain

FIXME

/* Fill out the mac80211 TXstatus report based on the b43-specific

 * txstatus report data. This returns a boolean whether the frame was

	/* preserve the confiured retry limit before clearing the status

	 * The xmit function has overwritten the rc's value with the actual

 The frame was ACKed. */

 The frame was not ACKed... */

 ...but we expected an ACK. */

 The frame was not transmitted at all. */

		/*

		 * If the short retries (RTS, not data frame) have exceeded

		 * the limit, the hw will not have tried the selected rate,

		 * but will have used the fallback rate instead.

		 * Don't let the rate control count attempts for the selected

		 * rate in this case, otherwise the statistics will be off.

 Stop any TX operation on the device (suspend the hardware queues) */

 Resume any TX operation on the device (resume the hardware queues) */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver



  G PHY LO (LocalOscillator) Measuring and Control routines



  Copyright (c) 2005 Martin Langer <martin-langer@gmx.de>,

  Copyright (c) 2005, 2006 Stefano Brivio <stefano.brivio@polimi.it>

  Copyright (c) 2005-2007 Michael Buesch <m@bues.ch>

  Copyright (c) 2005, 2006 Danny van Dyk <kugelfang@gentoo.org>

  Copyright (c) 2005, 2006 Andreas Jaggi <andreas.jaggi@waterwave.ch>





 Write the LocalOscillator Control (adjust) value-pair. */

/*FIXME This assertion fails		B43_WARN_ON(trsw_rx & ~(B43_PHY_RFOVERVAL_TRSWRX |

				    B43_PHY_RFOVERVAL_BW));

 Construct the RF Override Value */

	/* This is a good place to check if we need to relax a bit,

	 * as this is the main function called regularly

/* TXCTL Register and Value Table.

 * Returns the "TXCTL Register".

 * "value" is the "TXCTL Value".

 * "pad_mix_gain" is the PAD Mixer Gain.

 Loopback gain (in dB) */

 TX bias == 0 */

 Clear the vector on the device. */

 802.11/LO/GPHY/MeasuringGains */

 Core registers */

 PHY registers */

 Radio registers */

 dummy read */

 Re-measure the txctl values, if needed. */

 Loop over each possible value in this state. */

 Values from the "TXCTL Register and Value Table" */

/* Get a calibrated LO setting for the given attenuation values.

	/* Not in the list of calibrated LO settings.

 Nothing to do. */

	/* Suspend the MAC now to avoid continuous suspend/enable

		/* Update the table entry for this power_vector bit.

FIXME: Is Q really in the low nibble? */

 Get the index into the hardware DC LT. */

 Change the table in memory. */

 Change the high byte. */

 Change the low byte. */

 The table changed in memory. Update the hardware table. */

/* Fixup the RF attenuation value for the case where we are

 Periodic LO maintenance work */

 Read the power vector and update it, if needed. */

FIXME Recalc the whole DC table from time to time?

	/* Search for expired LO settings. Remove them.

 This item expired. */

 Recalibrate currently used LO setting. */

 LO Initialization */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver



  SYSFS support routines



  Copyright (c) 2006 Michael Buesch <m@bues.ch>





 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Broadcom B43 wireless driver

 *

 * SDIO over Sonics Silicon Backplane bus glue for b43.

 *

 * Copyright (C) 2009 Albert Herranz

 * Copyright (C) 2009 Michael Buesch <m@bues.ch>

 vendor & device id */

 rx fifo max size in bytes */

 Look for the card chip identifier. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11n PHY support



  Copyright (c) 2008 Michael Buesch <m@bues.ch>

  Copyright (c) 2010-2011 Rafał Miłecki <zajec5@gmail.com>





bcm-v4.sipsolutions.net/802.11/PHY/N/RxCoreGetState */

/**************************************************

 * RF (just without b43_nphy_rf_ctl_intc_override)

bcm-v4.sipsolutions.net/802.11/PHY/N/ForceRFSeq */

 TODO */

bcm-v4.sipsolutions.net/802.11/PHY/N/RFCtrlOverrideRev7 */

 Remember: we can get NULL! */

 Do it safer, better than wl */

bcm-v4.sipsolutions.net/802.11/PHY/N/RFCtrlOverideOneToMany */

bcm-v4.sipsolutions.net/802.11/PHY/N/RFCtrlOverride */

 we expect only one bit set */

 TODO: What about rev19+? Revs 3+ and 7+ are a bit similar */

bcm-v4.sipsolutions.net/802.11/PHY/N/RFCtrlIntcOverride */

/**************************************************

 * Various PHY ops

bcm-v4.sipsolutions.net/802.11/PHY/N/clip-detection */

bcm-v4.sipsolutions.net/802.11/PHY/N/clip-detection */

bcm-v4.sipsolutions.net/802.11/PHY/N/classifier */

bcm-v4.sipsolutions.net/802.11/PHY/N/CCA */

bcm-v4.sipsolutions.net/802.11/PHY/N/carriersearch */

bcm-v4.sipsolutions.net/PHY/N/Read_Lpf_Bw_Ctl */

bcm-v4.sipsolutions.net/802.11/PHY/N/AdjustLnaGainTbl */

bcm-v4.sipsolutions.net/802.11/PHY/N/SetRfSeq */

/**************************************************

 * Radio 0x2057

 e.g. PHY rev 16 */

 TODO */

 2 GHz only */

 TODO */

 VCO calibration */

/* Calibrate resistors in LPF of PLL?

 * https://bcm-v4.sipsolutions.net/PHY/radio205x_rcal

 Save */

 Set */

 Enable */

 Start */

 Stop */

 Wait and check for result */

 Disable */

 Restore */

/* Calibrate the internal RC oscillator?

 * https://bcm-v4.sipsolutions.net/PHY/radio2057_rccal

 Setup cal */

 Start, wait, stop */

 Setup cal */

 Start, wait, stop */

 Setup cal */

 Start, wait, stop */

 Maybe wl meant to reset and set (order?) RFCTL_CMD_OEPORFORCE? */

 FIXME: Is this BCM43217 specific? */

bcm-v4.sipsolutions.net/802.11/Radio/2057/Init */

/**************************************************

 * Radio 0x2056

bcm-v4.sipsolutions.net/802.11/PHY/Radio/2056Setup */

 VCO calibration */

 Maybe wl meant to reset and set (order?) RFCTL_CMD_OEPORFORCE? */

/*

 * Initialize a Broadcom 2056 N-radio

 * https://bcm-v4.sipsolutions.net/802.11/Radio/2056/Init

/**************************************************

 * Radio 0x2055

 flush writes */

 flush writes */

 flush writes */

 flush writes */

 flush writes */

bcm-v4.sipsolutions.net/802.11/PHY/Radio/2055Setup */

 flush writes */

/*

 * Initialize a Broadcom 2055 N-radio

 * https://bcm-v4.sipsolutions.net/802.11/Radio/2055/Init

 Follow wl, not specs. Do not force uploading all regs */

/**************************************************

 * Samples

bcm-v4.sipsolutions.net/802.11/PHY/N/LoadSampleTable */

bcm-v4.sipsolutions.net/802.11/PHY/N/GenLoadSamples */

bcm-v4.sipsolutions.net/802.11/PHY/N/RunSamples */

 TODO */

/**************************************************

 * RSSI

bcm-v4.sipsolutions.net/802.11/PHY/N/ScaleOffsetRssi */

 TODO */

bcm-v4.sipsolutions.net/802.11/PHY/N/RSSISel */

bcm-v4.sipsolutions.net/802.11/PHY/N/SetRssi2055Vcm */

bcm-v4.sipsolutions.net/802.11/PHY/N/PollRssi */

 TODO: rev7+ is treated like rev3+, what about rev19+? */

bcm-v4.sipsolutions.net/802.11/PHY/N/RSSICalRev3 */

 routing */

 Grab RSSI results for every possible VCM */

 Find out which VCM got the best results */

 Select the best VCM */

 Store for future configuration */

 Remember for which channel we store configuration */

 End of calibration, restore configuration */

bcm-v4.sipsolutions.net/802.11/PHY/N/RSSICal */

	/* Specs don't say about reset here, but it makes wl and b43 dumps

/*

 * RSSI Calibration

 * https://bcm-v4.sipsolutions.net/802.11/PHY/N/RSSICal

 TODO */

/**************************************************

 * Workarounds

 TODO */

 TODO */

 Prepare values */

 Set Clip 2 detect */

 Set Clip 2 detect */

 Set narrowband clip threshold */

 Set dwell lengths */

 Set wideband clip 2 threshold */

 Set HPVGA2 index */

 specs say about 2 loops, but wl does 4 */

 specs say about 2 loops, but wl does 4 */

bcm-v4.sipsolutions.net/802.11/PHY/N/WorkaroundsGainCtrl */

 TX to RX */

 RX to TX */

 Check radio version (to be 0) by PHY rev for now */

 TODO: Radio version 1 (e.g. BCM5357B0) */

	/* TODO

	b43_ntab_write_bulk(dev, B43_NTAB16(8, 0x08), 4,

			    aux_adc_vmid_rev7_core0);

	b43_ntab_write_bulk(dev, B43_NTAB16(8, 0x18), 4,

			    aux_adc_vmid_rev7_core1);

	b43_ntab_write_bulk(dev, B43_NTAB16(8, 0x0C), 4,

			    aux_adc_gain_rev7);

	b43_ntab_write_bulk(dev, B43_NTAB16(8, 0x1C), 4,

			    aux_adc_gain_rev7);

 TX to RX */

 RX to TX */

 0 */

 1 */

 2 */

 3 */

 4 and 5 */

 0 */

 1 */

 2 */

 3 */

 4 and 5 */

 TX to RX */

 RX to TX */

 N PHY WAR TX Chain Update with hw_phytxchain as argument */

 Dropped probably-always-true condition */

 TODO: 0x0080000000000000 HF */

 Set phase track alpha and beta */

bcm-v4.sipsolutions.net/802.11/PHY/N/Workarounds */

 TODO: rev19+ */

/**************************************************

 * Tx/Rx common

/*

 * Transmits a known value for LO calibration

 * https://bcm-v4.sipsolutions.net/802.11/PHY/N/TXTone

bcm-v4.sipsolutions.net/802.11/PHY/N/Chains */

bcm-v4.sipsolutions.net/802.11/PHY/N/stop-playback */

bcm-v4.sipsolutions.net/802.11/PHY/N/IqCalGainParams */

 Rev 7+ */

 TODO */

/**************************************************

 * Tx and Rx

bcm-v4.sipsolutions.net/802.11/PHY/N/TxPwrCtrlEnable */

 We disable enabled TX pwr ctl, save it's state */

 wl does useless check for "enable" param here */

 TODO */

 Recover TX pwr ctl state */

 TODO */

bcm-v4.sipsolutions.net/802.11/PHY/N/TxPwrFix */

 u32 gaintbl; rev3+ */

 TODO: rev19+ */

	/*

	for (i = 0; i < 2; i++) {

		nphy->txpwrindex[i].index_internal = txpi[i];

		nphy->txpwrindex[i].index_internal_save = txpi[i];

	}

 routing */

 TODO */

/*

 * Stop radio and transmit known signal. Then check received signal strength to

 * get TSSI (Transmit Signal Strength Indicator).

 * https://bcm-v4.sipsolutions.net/802.11/PHY/N/TxPwrCtrlIdleTssi

 TODO */

bcm-v4.sipsolutions.net/PHY/N/TxPwrLimitToTbl */

	/* Array adj_pwr_tbl corresponds to the hardware table. It consists of

	 * 21 groups, each containing 4 entries.

	 *

	 * First group has entries for CCK modulation.

	 * The rest of groups has 1 entry per modulation (SISO, CDD, STBC, SDM).

	 *

	 * Group 0 is for CCK

	 * Groups 1..4 use BPSK (group per coding rate)

	 * Groups 5..8 use QPSK (group per coding rate)

	 * Groups 9..12 use 16-QAM (group per coding rate)

	 * Groups 13..16 use 64-QAM (group per coding rate)

	 * Groups 17..20 are unknown

bcm-v4.sipsolutions.net/802.11/PHY/N/TxPwrCtrlSetup */

 routing */

 TODO */

 TODO: Enable this once we have gains configured */

 TODO */

 FIXME */

bcm-v4.sipsolutions.net/802.11/PHY/N/PA%20override */

/*

 * TX low-pass filter bandwidth setup

 * https://bcm-v4.sipsolutions.net/802.11/PHY/N/TxLpFbw

bcm-v4.sipsolutions.net/802.11/PHY/N/RxIqEst */

bcm-v4.sipsolutions.net/802.11/PHY/N/RxIqCoeffs */

 Ready but not used anywhere */

bcm-v4.sipsolutions.net/802.11/PHY/N/RxCalPhyCleanup */

bcm-v4.sipsolutions.net/802.11/PHY/N/RxCalPhySetup */

bcm-v4.sipsolutions.net/802.11/PHY/N/CalcRxIqComp */

bcm-v4.sipsolutions.net/802.11/PHY/N/TxIqWar */

bcm-v4.sipsolutions.net/802.11/PHY/N/SpurWar */

bcm-v4.sipsolutions.net/802.11/PHY/N/TxPwrCtrlCoefSetup */

/*

 * Restore RSSI Calibration

 * https://bcm-v4.sipsolutions.net/802.11/PHY/N/RestoreRssiCal

 TODO */

 TODO */

 TODO */

 TODO */

bcm-v4.sipsolutions.net/802.11/PHY/N/TxCalRadioSetup */

bcm-v4.sipsolutions.net/802.11/PHY/N/UpdateTxCalLadder */

bcm-v4.sipsolutions.net/802.11/PHY/N/ExtPaSetTxDigiFilts */

bcm-v4.sipsolutions.net/802.11/PHY/N/IpaSetTxDigiFilts */

 B43_NPHY_TXF_20CO_S0A1, B43_NPHY_TXF_40CO_S0A1, unknown */

 Verified with BCM43227 and BCM43228 */

 Verified with BCM43131 and BCM43217 */

bcm-v4.sipsolutions.net/802.11/PHY/N/GetTxGain */

bcm-v4.sipsolutions.net/802.11/PHY/N/TxCalPhyCleanup */

bcm-v4.sipsolutions.net/802.11/PHY/N/TxCalPhySetup */

 FIXME */) {

bcm-v4.sipsolutions.net/802.11/PHY/N/SaveCal */

 TODO use some definitions */

 TODO */

bcm-v4.sipsolutions.net/802.11/PHY/N/RestoreCal */

 TODO use some definitions */

 TODO */

bcm-v4.sipsolutions.net/802.11/PHY/N/CalTxIqlo */

 TODO */

bcm-v4.sipsolutions.net/802.11/PHY/N/ReapplyTxCalCoeffs */

bcm-v4.sipsolutions.net/802.11/PHY/N/CalRxIqRev2 */

bcm-v4.sipsolutions.net/802.11/PHY/N/CalRxIq */

bcm-v4.sipsolutions.net/802.11/PHY/N/RxCoreSetState */

 u16 buf[16]; it's rev3+ */

 FIXME clk */)

 TODO */

 TODO */

 qdBm */

 Make sure we have a clean PPR */

 HW limitations */

 Regulatory & user settings */

 TODO: Enable this once we get gains working */

 Some extra gains */

 N-PHY specific */

 Make sure we didn't go too low */

 Apply */

/**************************************************

 * N-PHY init

bcm-v4.sipsolutions.net/802.11/PHY/N/MIMOConfig */

bcm-v4.sipsolutions.net/802.11/PHY/N/BPHYInit */

bcm-v4.sipsolutions.net/802.11/PHY/N/SuperSwitchInit */

 FIXME */) {

bcm-v4.sipsolutions.net/802.11/PHY/Init/N */

 Clear all overrides */

 TODO */

 Reset CCA, in init code it differs a little from standard way */

 TODO PHY Periodic Calibration Multi-Phase Restart */

 TODO N PHY Pre Calibrate TX Gain */

 N PHY Periodic Calibration with arg 3 */

/**************************************************

 * Channel switching ops.

bcm-v4.sipsolutions.net/802.11/PmuSpurAvoid */

bcm-v4.sipsolutions.net/802.11/PHY/N/ChanspecSetup */

 Switch to 2 GHz for a moment to access B43_PHY_B_BBCFG */

 Put BPHY in the reset */

 Take BPHY out of the reset */

 TODO */

 TODO */

 TODO: Off for channels 1-11, but check 12-14! */

 TODO: Off for 2 GHz, but check 5 GHz! */

 20MHz */

 40 MHz */

 20MHz */

 40MHz */

 wl sets useless phy_isspuravoid here */

bcm-v4.sipsolutions.net/802.11/PHY/N/SetChanspec */

 TODO */

	/* Channel is set later in common code, but we need to set it on our

 TODO: BMAC BW Set (channel_type) */

 TODO */

/**************************************************

 * Basic PHY ops.

 this way we follow wl, assume it is true */

 sth different than 0 and 1 for now */

 to avoid b43_nphy_set_rx_core_state like wl */

 avoid additional rssi cal on init (like wl) */

	/* 128 can mean disabled-by-default state of TX pwr ctl. Max value is

 Hardware TX power control and 5GHz power gain */

 OFDM registers are onnly available on A/G-PHYs */

 Ext-G registers are only available on G-PHYs */

 B43_DEBUG */

 Register 1 is a 32-bit register. */

 Radio 0x2057 */

 Register 1 is a 32-bit register. */

bcm-v4.sipsolutions.net/802.11/Radio/Switch%20Radio */

 TODO */

 Nothing needed */

 TODO */

bcm-v4.sipsolutions.net/802.11/PHY/Anacore */

 TODO */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  LED control



  Copyright (c) 2005 Martin Langer <martin-langer@gmx.de>,

  Copyright (c) 2005 Stefano Brivio <stefano.brivio@polimi.it>

  Copyright (c) 2005-2007 Michael Buesch <m@bues.ch>

  Copyright (c) 2005 Danny van Dyk <kugelfang@gentoo.org>

  Copyright (c) 2005 Andreas Jaggi <andreas.jaggi@waterwave.ch>





	/* The led->state read is racy, but we don't care. In case we raced

	 * with the brightness_set handler, we will be called again soon

 Callback from the LED subsystem. */

	/* Map the b43 specific LED behaviour value to the

		/* There is no LED information in the SPROM

 keep LED disabled if no mapping is defined */

 Sync the RF-kill LED state (if we have one) with radio and switch states. */

 Initialize TX/RX/ASSOC leds */

 Initialize other LED states. */

 Leave others as-is. */

 Register the LEDs to the LED subsystem. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Broadcom B43 wireless driver

 * IEEE 802.11ac AC-PHY support

 *

 * Copyright (c) 2015 Rafał Miłecki <zajec5@gmail.com>

/**************************************************

 * Basic PHY ops

/**************************************************

 * PHY ops struct

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  IEEE 802.11n 2057 radio device data tables



  Copyright (c) 2010 Rafał Miłecki <zajec5@gmail.com>





/* TODO: Which devices should use it?

static u16 r2057_rev8_init[][2] = {

	{ 0x00, 0x08 }, { 0x01, 0x57 }, { 0x02, 0x20 }, { 0x31, 0x00 },

	{ 0x32, 0x00 }, { 0x33, 0x00 }, { 0x51, 0x70 }, { 0x59, 0x88 },

	{ 0x5C, 0x20 }, { 0x62, 0x33 }, { 0x63, 0x0f }, { 0x64, 0x0f },

	{ 0x6E, 0x58 }, { 0x75, 0x13 }, { 0x7B, 0x13 }, { 0x7C, 0x0f },

	{ 0x7D, 0xee }, { 0x81, 0x01 }, { 0x91, 0x3f }, { 0x92, 0x36 },

	{ 0xA1, 0x20 }, { 0xC9, 0x01 }, { 0xD6, 0x70 }, { 0xDE, 0x88 },

	{ 0xE1, 0x20 }, { 0xE8, 0x0f }, { 0xE9, 0x0f }, { 0xF3, 0x58 },

	{ 0xFA, 0x13 }, { 0x100, 0x13 }, { 0x101, 0x0f }, { 0x102, 0xee },

	{ 0x106, 0x01 }, { 0x116, 0x3f }, { 0x117, 0x36 }, { 0x126, 0x20 },

	{ 0x14E, 0x01 }, { 0x15E, 0x00 }, { 0x15F, 0x00 }, { 0x160, 0x00 },

	{ 0x161, 0x00 }, { 0x162, 0x00 }, { 0x163, 0x00 }, { 0x16A, 0x00 },

	{ 0x16B, 0x00 }, { 0x16C, 0x00 }, { 0x1A4, 0x00 }, { 0x1A5, 0x00 },

	{ 0x1A6, 0x00 }, { 0x1AA, 0x00 }, { 0x1AB, 0x00 }, { 0x1AC, 0x00 },

	{ 0x1B7, 0x05 }, { 0x1C2, 0xa0 },

};

 Extracted from MMIO dump of 6.30.223.141 */

 Extracted from MMIO dump of 6.30.223.248 */

 Copied from brcmsmac (5.75.11): chan_info_nphyrev8_2057_rev5 */

 Extracted from MMIO dump of 6.30.223.248 */

 Extracted from MMIO dump of 6.30.223.141 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver



  Copyright (c) 2005 Martin Langer <martin-langer@gmx.de>

  Copyright (c) 2005 Stefano Brivio <stefano.brivio@polimi.it>

  Copyright (c) 2005-2009 Michael Buesch <m@bues.ch>

  Copyright (c) 2005 Danny van Dyk <kugelfang@gentoo.org>

  Copyright (c) 2005 Andreas Jaggi <andreas.jaggi@waterwave.ch>

  Copyright (c) 2010-2011 Rafał Miłecki <zajec5@gmail.com>



  SDIO support

  Copyright (c) 2009 Albert Herranz <albert_herranz@yahoo.es>



  Some parts of the code in this file are derived from the ipw2200

  driver  Copyright(c) 2003 - 2004 Intel Corporation.





/* Channel and ratetables are shared for all devices.

 * They can't be const, because ieee80211 puts some precalculated

 * data in there. This data is the same for all devices, so we don't

/*

 * NOTE: When changing this, sync with xmit.c's

 *	 b43_plcp_get_bitrate_idx_* functions!

 No support for the last 3 channels (12, 13, 14) */

	/* We are up and running.

 "offset" is the WORD offset. */

 Unaligned access */

 Unaligned access */

 Unaligned access */

 Unaligned access */

 Read HostFlags */

 Write HostFlags */

 Read the firmware capabilities bitmask (Opensource firmware only) */

	/* The hardware guarantees us an atomic read, if we

 Commit the write */

 Commit the write */

	/* The hardware guarantees us an atomic write, if we

 Write our MAC address and BSSID to template ram */

 slot_time is in usec. */

 This test used to exit for all but a G PHY. */

	/* Shared memory location 0x0010 is the slot time and should be

	 * set to slot_time; however, this register is initially 0 and changing

	 * the value adversely affects the transmit rate for BCM4311

	 * devices. Until this behavior is unterstood, delete this step

	 *

	 * b43_shm_write16(dev, B43_SHM_SHARED, 0x0010, slot_time);

/* DummyTransmission function, as documented on

 * https://bcm-v4.sipsolutions.net/802.11/DummyTransmission

b43_nphy_pa_override(dev, false) */

 Key index/algo block */

 Write the key to the Key Table Pointer offset */

	/* We have four default TX keys and possibly four default RX keys.

	 * Physical mac 0 is mapped to physical key 4 or 8, depending

	 * on the firmware version.

	 * So we must adjust the index here.

 Receive match transmitter address (RCMTA) mechanism */

/* The ucode will use phase1 key with TEK key to decrypt rx packets.

 * When a packet is received, the iv32 is checked.

 * - if it doesn't the packet is returned without modification (and software

 *   decryption can be done). That's what happen when iv16 wrap.

 * - if it does, the rc4 key is computed, and decryption is tried.

 *   Either it will success and B43_RX_MAC_DEC is returned,

 *   either it fails and B43_RX_MAC_DEC|B43_RX_MAC_DECERR is returned

 *   and the packet is not usable (it got modified by the ucode).

 * So in order to never have B43_RX_MAC_DECERR, we should provide

 * a iv32 and phase1key that match. Because we drop packets in case of

 * B43_RX_MAC_DECERR, if we have a correct iv32 but a wrong phase1key, all

 * packets will be lost without higher layer knowing (ie no resync possible

 * until next wrap).

 *

 * NOTE : this should support 50 key like RCMTA because

 * (B43_SHM_SH_KEYIDXBLOCK - B43_SHM_SH_TKIPTSCTTAK)/14 = 50

	/* We have four default TX keys and possibly four default RX keys.

	 * Physical mac 0 is mapped to physical key 4 or 8, depending

	 * on the firmware version.

	 * So we must adjust the index here.

 Write the key to the  RX tkip shared mem */

	/* This is only called from the RX path through mac80211, where

 First zero out mac to avoid race */

 only pairwise TKIP keys are supported right now */

 First zero out mac. */

		/*

		 * We should provide an initial iv32, phase1key pair.

		 * We could start with iv32=0 and compute the corresponding

		 * phase1key, but this means calling ieee80211_get_tkip_key

		 * with a fake skb (or export other tkip function).

		 * Because we are lazy we hope iv32 won't start with

		 * 0xffffffff and let's b43_op_update_tkip_key provide a

		 * correct pair.

 clear it */

	/* For ALG_TKIP the key is encoded as a 256-bit (32 byte) data block:

	 * 	- Temporal Encryption Key (128 bits)

	 * 	- Temporal Authenticator Tx MIC Key (64 bits)

	 * 	- Temporal Authenticator Rx MIC Key (64 bits)

	 *

	 * 	Hardware only store TEK

 Check that we don't already have this key. */

 Pairwise key. Get an empty slot for the key. */

 found empty */

 Default RX key */

TODO: If powersave is not off and FIXME is not set and we are not in adhoc

      and thus is not an AP and we are associated, set bit 25

TODO: If the device is awake or this is an AP, or we are scanning, or FIXME,

      or we are associated, or FIXME, or the latest PS-Poll packet sent was

      successful, set bit26

 FIXME: For now we force awake-on and hwps-off */

 Commit write */

 Wait for the microcode to wake up. */

bcm-v4.sipsolutions.net/802.11/PHY/BmacCorePllReset */

 Put PHY into reset */

 Make 20 MHz def */

 Make 20 MHz def */

 Wait for the PLL to turn on. */

	/* Turn Analog ON, but only if we already know the PHY-type.

	 * This protects against very early setup where we don't know the

	 * PHY-type, yet. wireless_core_reset will be called once again later,

	/* Read all entries from the microcode TXstatus FIFO

	 * and throw them away.

 Top half of Link Quality calculation. */

 Bottom half of Link Quality calculation. */

	/* Possible race condition: It might be possible that the user

	 * changed to a different channel in the meantime since we

	 * started the calculation. We ignore that fact, since it's

	 * not really that much of a problem. The background noise is

	 * an estimation only anyway. Slightly wrong results will get damped

	 * by the averaging of the 8 sample rounds. Additionally the

	 * value is shortlived. So it will be replaced by the next noise

 Get the noise samples. */

 Calculate the Link Quality by the noise samples. */

FIXME: the last PSpoll frame was sent successfully */ )

TODO: AP mode.

 16bit write is odd, but correct. */

	/* The PLCP is 6 bytes long, but we only wrote 4 bytes, yet.

	 * So leave the first two bytes of the next write blank.

/* Check if the use of the antenna that ieee80211 told us to

 * use is possible. This will fall back to DEFAULT.

 Zero means "use default antenna". That's always OK. */

 Get the mask of available antennas. */

 This antenna is not available. Fall back to default. */

 Convert a b43 antenna number value to the PHY TX control value. */

 Clone the beacon, so it cannot go away, while we write it to hw. */

 Write the PHY TX control parameters. */

 We can't send beacons with short preamble. Would get PHY errors. */

	/* Find the position of the TIM and the DTIM_period value

 This is the TIM Information Element */

 Check whether the ie_len is in the beacon data range. */

 A valid TIM is at least 4 bytes long. */

		/*

		 * If ucode wants to modify TIM do it behind the beacon, this

		 * will happen, for example, when doing mesh networking.

 This is the bottom half of the asynchronous beacon update. */

 Ignore interrupt in the future. */

 Schedule interrupt manually, if busy. */

		/* We never uploaded a beacon before.

 update beacon right away or defer to irq */

 The handler updated the IRQ mask. */

			/* Device interrupts are currently disabled. That means

			 * we just ran the hardirq handler and scheduled the

			 * IRQ thread. The thread will write the IRQ mask when

			 * it finished, so there's nothing to do here. Writing

 wl->mutex is enough. */

 Asynchronously update the packet templates in template RAM. */

	/* This is the top half of the asynchronous beacon update.

	 * The bottom half is the beacon IRQ.

	 * Beacon update must be asynchronous to avoid sending an

	 * invalid beacon. This can happen for example, if the firmware

	/* We could modify the existing beacon and set the aid bit in

	 * the TIM field, but that would probably require resizing and

	 * moving of data within the beacon template.

 Read the register that contains the reason code for the panic. */

		/* Do not restart the controller or firmware.

		 * The device is nonfunctional from now on.

		 * Restarting would result in this panic to trigger again,

 The proprietary firmware doesn't have this IRQ. */

 Read the register that contains the reason code for this IRQ. */

 Only with driver debugging enabled. */

 Only with driver debugging enabled. */

 Only with driver debugging enabled. */

 Acknowledge the debug-IRQ, so the firmware can continue. */

 Fall back to PIO transfers if we get fatal DMA errors! */

 TODO */

 Check the DMA reason registers for received data. */

 Re-enable interrupts on the device by restoring the current interrupt mask. */

 Interrupt thread handler. Handles device interrupts in thread context. */

	/* This code runs under wl->hardirq_lock, but _only_ on non-SDIO busses.

 shared IRQ */

/* Unused ring

	dev->dma_reason[5] = b43_read32(dev, B43_MMIO_DMA5_REASON)

	    & 0x0000DC00;

 ACK the interrupt. */

/* Unused ring

	b43_write32(dev, B43_MMIO_DMA5_REASON, dev->dma_reason[5]);

 Disable IRQs on the device. The IRQ thread handler will re-enable them. */

 Save the reason bitmasks for the IRQ thread handler. */

 Interrupt handler top-half. This runs with interrupts disabled. */

 SDIO interrupt handler. This runs in process context. */

wireless.wiki.kernel.org/en/users/Drivers/b43#devicefirmware " \

 Don't fetch anything. Free possibly cached firmware. */

		/* FIXME: We should probably keep it anyway, to save some headache

 Already have this fw. */

 Free the cached firmware first. */

		/* FIXME: We should probably do this later after we successfully

		 * got the new fw. This could reduce headache with multiband devices.

		 * We could also redesign this to cache the firmware for all possible

 do this part asynchronously */

	/* On some ARM systems, the async request will fail, but the next sync

	 * request works. For this reason, we fall through here

bcm-v4.sipsolutions.net/802.11/Init/Firmware */

 Get microcode */

 Get PCM code */

		/* We did not find a PCM file? Not fatal, but

 Get initvals */

 What about n0initvals22? */

 Get bandswitch initvals */

 What about n0bsinitvals22? */

	/* We failed to load this firmware image. The error message

	 * already is in ctx->errors. Return and let our caller decide

 Successfully loaded it. */

 Was fw version known? */

 proprietary fw not found, try open source */

 Successfully loaded it. */

 Could not find a usable firmware. Print the errors. */

 Register HW RNG driver */

 Jump the microcode PSM to offset 0 */

 Zero out all microcode PSM registers and shared memory. */

 Upload Microcode. */

 Upload PCM data. */

 No need for autoinc bit in SHM_HW */

 Start the microcode PSM */

 Wait for the microcode to load and respond */

 dummy read */

 Get and check the revisions. */

 Default to firmware/hardware crypto acceleration. */

 Patchlevel info is encoded in the "time" field. */

 Disable hardware crypto and fall back to software crypto. */

 adding QoS support should use an offline discovery mechanism */

		/* We're over the deadline, but we keep support for old fw

 Stop the microcode PSM. */

/* Initialize the GPIOs

 * https://bcm-specs.sipsolutions.net/GPIO

 Don't allow overtaking buttons GPIOs */

 0x2 is LED GPIO on BCM5354 */

 FIXME: conditional unknown */ ) {

 BT Coexistance Input */

 BT Coexistance Out */

 PA is controlled by gpio 9, let ucode handle it */

 Turn off all GPIO stuff. Call this on module unload, for example. */

bcm-specs.sipsolutions.net/EnableMac */

 Commit writes */

bcm-specs.sipsolutions.net/SuspendMAC */

 force pci to flush the write */

 Hm, it seems this will take some time. Use msleep(). */

bcm-v4.sipsolutions.net/802.11/PHY/N/MacPhyClkSet */

 brcms_b_switch_macfreq */

 168 Mhz: 2^26/168 = 0x61862 */

 164 Mhz: 2^26/164 = 0x63e70 */

 160 Mhz: 2^26/160 = 0x66666 */

 126 Mhz */

 123 Mhz */

 120 Mhz */

 82 Mhz */

 80 Mhz */

 Reset status to STA infrastructure mode. */

	/* Workaround: On old hardware the HW-MAC-address-filter

	 * doesn't work properly, so always run promisc in filter

	/* FIXME: We don't currently implement the PMQ mechanism,

	 *        so always disable it. If we want to implement PMQ,

	 *        we need to enable it here (clear DISCPMQ) in AP mode.

 ctl & B43_MACCTL_AP */)

 Set the default values for the PHY TX Control Words. */

 Set the TX-Antenna for management frames sent by firmware. */

 For ACK/CTS */

 For Probe Resposes */

 This is the opposite of b43_chip_init() */

 firmware is released later */

/* Initialize the chip

 * https://bcm-specs.sipsolutions.net/ChipInit

 Initialize the MAC control */

 firmware is released later */

 firmware is released later */

 Turn the Analog on and initialize the PHY. */

 Disable Interference Mitigation. */

 Select the antennae */

 Probe Response Timeout value */

 FIXME: Default to 0, has to be set by ioctl probably... :-/ */

 Initially set the wireless operation mode. */

 FIXME: 0xE74 is quite common, but should be read from CC */

 Force check the TX power emission now. */

 Update device statistics. */

		/* Check if the firmware is still alive.

/* Periodic work locking policy:

 * 	The whole periodic work handler is protected by

 * 	wl->mutex. If another lock is needed somewhere in the

 * 	pwork callchain, it's acquired in-place, where it's needed.

 Check if communication with the device works correctly. */

 Check for read/write and endianness problems. */

	/* Check if unaligned 32bit SHM_SHARED access works properly.

		/* The 32bit register shadows the two 16bit registers

	/* KTP is a word address, but we address SHM bytewise.

	 * So multiply by two.

 Number of RCMTA address slots */

 Clear the key memory. */

 CONFIG_B43_HWRNG */

 CONFIG_B43_HWRNG */

 CONFIG_B43_HWRNG */

 Too short, this can't be a valid frame. */

 Mark the parameters as updated. */

 Mapping of mac80211 queue numbers to b43 QoS SHM offsets. */

 [mac80211-queue-nr] = SHM_OFFSET, */

 Update all QOS parameters in hardware. */

 Initialize QoS parameters to sane defaults. */

 Initialize the core's QOS capabilities */

 Disable QOS support. */

 Upload the current QOS parameters. */

 Enable QOS support. */

		/* Queue not available or don't support setting

		 * params on this queue. Return success to not

 Expects wl->mutex locked */

 This device is already running. */

 Some new devices don't need disabling radio for band switching */

 Write the short and long frame retry limit values. */

	/* The retry limit is a 4-bit counter. Enforce this to avoid overflowing

 Switch the band (if necessary). */

		/* Switch to the requested channel.

		 * The firmware takes care of races with the TX handler.

 Adjust the desired TX power level. */

 Antennas for RX and management frame TX. */

		/*

		 * Get the pointer that we need to point to

		 * from the direct map

 and write it to the basic map */

 Update templates for AP/mesh mode. */

 User disabled HW-crypto */

		/*

		 * For now, disable hw crypto for the RSN IBSS group keys. This

		 * could be optimized in the future, but until that gets

		 * implemented, use of software crypto for group addressed

		 * frames is a acceptable to allow RSN IBSS to be used.

		/* We don't have firmware for the crypto engine.

 We support only pairwise key */

 Pairwise key with an assigned MAC address. */

 Group key */

/* Locking: wl->mutex

 * Returns the current dev. This might be different from the passed in dev,

 Cancel work. Unlock to avoid deadlocks. */

 Whoops, aliens ate up the device while we were unlocked. */

 Disable interrupts on the device. */

 wl->mutex is locked. That is enough. */

 Flush */

 Flush */

 Synchronize and free the interrupt handlers. Unlock to avoid deadlocks. */

 Drain all TX queues. */

 Locking: wl->mutex */

 We are ready to run. */

 Start data flow (TX/RX). */

 Start maintenance work */

 Get PHY and RADIO versioning numbers */

 Get PHY versioning */

 LCNXN is continuation of N which run out of revisions */

 Get RADIO versioning */

 Is there version somewhere? */

 Probably not available on old hw */

 Broadcom */)

 FIXME: b43 treats "id" as "ver" and ignores the real "ver" */

 PHY TX errors counter. */

	/* Assume the radio is enabled. If it's not enabled, the state will

 Stats */

 IRQ related flags */

 Noise calculation context */

TODO

 The time value is in microseconds. */

 Set the TSF CFP pre-TargetBeaconTransmissionTime. */

 The time value is in microseconds. */

 Shutdown a wireless core */

 Locking: wl->mutex */

 Stop the microcode PSM. */

 TODO */

 Initialize a wireless core */

 Reset all data structures. */

 Enable IRQ routing to this device. */

 Disable slowclock requests from ucode. */

 PCI slow clock workaround. */

 tell the ucode MAC capabilities */

	/* Disable sending probe responses from firmware.

	 * Setting the MaxTime to one usec will always trigger

	 * a timeout, so we never send any probe resp.

 Minimum Contention Window */

 Maximum Contention Window */

 write phytype and phyvers */

 TODO: allow AP devices to coexist */

	/* Kill all old instance specific information to make sure

	 * the card won't use it in the short timeframe between start

 XXX: only do if device doesn't support rfkill irq */

	/*

	 * Configuration may have been overwritten during initialization.

	 * Reload the configuration, but only if initialization was

	 * successful. Reloading the configuration after a failed init

	 * may hang the system.

 Disable CFP update during scan on other channels. */

 Re-enable CFP update. */

/* Hard-reset the chip. Do not call this directly.

 * Use b43_controller_restart()

 Bring the device down... */

 ...and up again. */

 Failed to init the dev. */

 reload configuration */

 We don't support all 2 GHz channels on some devices */

	/* We release firmware that late to not be required to re-request

 Override with SPROM value if available */

 Note: below IDs can be "virtual" (not maching e.g. real PCI ID) */

 BCM4306 */

 BCM4311 */

 BCM4318 */

 BCM4321 */

 BCM4322 */

 BCM43222 */

 BCM43224 */

 BCM43224 */

 BCM6362 */

 BCM4331 */

 BCM43228 */

 BCM4360 */

 BCM4352 */

 Dual band devices */

 BCM4306 */

 There are 14e4:4321 PCI devs with 2.4 GHz BCM4321 (N-PHY) */

 BCM4311 */

 BCM4318 */

 BCM4321 */

 BCM4322 */

 BCM43222 */

 BCM43228 */

 BCM4331 */

 BCM4360 */

 BCM4352 */

 5 GHz only devices */

 As a fallback, try to guess using PHY type */

	/* Do NOT do any device initialization here.

	 * Do it in wireless_core_init() instead.

	 * This function is for gathering basic information about the HW, only.

	 * Also some structs may be set up here. But most likely you want to have

	 * that in core_init(), too.

 Try to guess supported bands for the first init needs */

 Get the PHY type. */

 Get real info about supported bands */

 We don't support 5 GHz on some PHYs yet */

 Now set some default "current_dev" */

	/* Do not cancel ieee80211-workqueue based work here.

 boardflags workarounds */

 fill hw info */

 Initialize struct b43_wl */

 Initialize queues and flags. */

 setup and start work to load firmware */

	/* We must cancel any work here before unregistering from ieee80211,

 NULL if firmware never loaded */

 Unregister HW RNG driver */

 setup and start work to load firmware */

	/* We must cancel any work here before unregistering from ieee80211,

 NULL if firmware never loaded */

 Unregister HW RNG driver */

 CONFIG_B43_SSB */

 Perform a hardware reset. This can be called from any context. */

 Must avoid requeueing, if we are in shutdown. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43legacy wireless driver



  DMA ringbuffer and descriptor allocation/management



  Copyright (c) 2005, 2006 Michael Buesch <m@bues.ch>



  Some code in this file is derived from the b44.c driver

  Copyright (C) 2002 David S. Miller

  Copyright (C) Pekka Pietikainen





 32bit DMA ops. */

 DEBUG */

 Request a slot for usage. */

 Mac80211-queue to b43legacy-ring mapping */

FIXME: For now we always run on TX-ring-1 */

 0 = highest priority */

 GFP flags must match the flags in free_ringmemory()! */

 Reset the RX DMA channel */

 Reset the RX DMA channel */

 ensure the reset is completed. */

 Check if a DMA mapping address is invalid. */

 The address is OK. */

 We can't support this address. Unmap it again. */

 ugh. try to realloc in zone_dma */

/* Allocate the initial descbuffers.

 * This is used for an RX ring only.

 all descbuffer setup before next line */

/* Do initial setup of the DMA controller.

 * Reset the controller, write the ring busaddress

 * and switch the "enable" bit on.

 Shutdown the DMA controller. */

 Main initialization function. */

 test for ability to dma to txhdr_cache */

 ugh realloc */

 Main cleanup function. */

	/* Device IRQs are disabled prior entering this function,

	 * so no need to take care of concurrency with rx handler stuff.

 setup TX DMA channels. */

 setup RX DMA channels. */

 Generate a cookie for the TX header. */

	/* Use the upper 4 bits of the cookie as

	 * DMA controller ID and store the slot number

	 * in the lower 12 bits.

	 * Note that the cookie must never be 0, as this

	 * is a special value used in RX path.

 Inspect a cookie and find out to which controller/slot it belongs. */

 Get a slot for the header. */

 Get a slot for the payload. */

 create a bounce buffer in zone_dma on mapping failure. */

 previous stuff MUST be done */

 Now transfer the whole frame. */

		/* Check if we should inject another ringbuffer overflow

 CONFIG_B43LEGACY_DEBUG */

		/* We get here only because of a bug in mac80211.

		 * Because of a race, one packet may be queued after

		 * the queue is stopped, thus we got called when we shouldn't.

		/* If we get here, we have a real error with the queue

	/* dma_tx_fragment might reallocate the skb, so invalidate pointers pointing

		/* Drop this packet, as we don't have the encryption key

 This TX ring is full. */

	/* Sanity check: TX packets are processed in-order on one ring.

	 * Check if the slot deduced from the cookie really is the first

		/* This possibly is a firmware bug and will result in

		 * malfunction, memory leaks and/or stall of DMA functionality.

			/* preserve the confiured retry limit before clearing the status

			 * The xmit function has overwritten the rc's value with the actual

				/*

				 * If the short retries (RTS, not data frame) have exceeded

				 * the limit, the hw will not have tried the selected rate,

				 * but will have used the fallback rate instead.

				 * Don't let the rate control count attempts for the selected

				 * rate in this case, otherwise the statistics will be off.

			/* Call back to inform the ieee80211 subsystem about the

			 * status of the transmission.

			 * Some fields of txstat are already filled in dma_tx().

 skb is freed by ieee80211_tx_status_irqsafe() */

			/* No need to call free_descriptor_buffer here, as

			 * this is only the txhdr, which is not allocated.

 Everything unmapped and free'd. So it's not used anymore. */

		/* If the driver queue is running wake the corresponding

 Add work to the queue. */

 We received an xmit status. */

 recycle the descriptor buffer. */

 recycle the descriptor buffer. */

		/* The data did not fit into one descriptor buffer

		 * and is split over multiple buffers.

		 * This should never happen, as we try to allocate buffers

		 * big enough. So simply ignore this packet.

 recycle the descriptor buffer. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  RFKILL support



  Copyright (c) 2007 Michael Buesch <m@bues.ch>





 Returns TRUE, if the radio is enabled in hardware. */

		/* To prevent CPU fault on PPC, do not read a register

		 * unless the interface is started; however, on resume

		 * for hibernation, this routine is entered early. When

		 * that happens, unconditionally return TRUE.

 The poll callback for the hardware button. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43legacy wireless driver



  PIO Transmission



  Copyright (c) 2005 Michael Buesch <m@bues.ch>





	/* We use the upper 4 bits for the PIO

	 * controller ID and the lower 12 bits

	 * for the packet index (in the cache).

 Drop it silently (return success) */

	/* Check if there is sufficient free space on the device

	 * TX queue. If not, return and let the TX tasklet

	 * retry later.

 Now poke the device. */

		/* Drop this packet, as we don't have the encryption key

	/* Account for the packet size.

	 * (We must not overflow the device TX queue)

	/* Transmission started, everything ok, move the

	 * packet to the txrunning list.

		/* Try to transmit the packet. This can fail, if

		 * the device queue is full. In case of failure, the

		 * packet is left in the txqueue.

		 * If transmission succeed, the packet is moved to txrunning.

		 * If it is impossible to transmit the packet, it

		 * is dropped.

	/* preserve the confiured retry limit before clearing the status

	 * The xmit function has overwritten the rc's value with the actual

		/*

		 * If the short retries (RTS, not data frame) have exceeded

		 * the limit, the hw will not have tried the selected rate,

		 * but will have used the fallback rate instead.

		 * Don't let the rate control count attempts for the selected

		 * rate in this case, otherwise the statistics will be off.

	/* If there are packets on the txqueue, poke the tasklet

	 * to transmit them.

 Dummy read. */

 We received an xmit status. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43legacy wireless driver



  debugfs driver debugging code



  Copyright (c) 2005-2007 Michael Buesch <m@bues.ch>





 The root directory. */

 Offset of struct b43legacy_dfs_file in struct b43legacy_dfsentry */

 Take wl->irq_lock before calling read/write? */

 wl->irq_lock is locked */

 wl->irq_lock is locked */

 wl->irq_lock is locked */

 wl->irq_lock is locked */

 wl->irq_lock is locked */

 16 KiB buffer */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43legacy wireless driver



  Copyright (c) 2005 Martin Langer <martin-langer@gmx.de>,

		     Stefano Brivio <stefano.brivio@polimi.it>

		     Michael Buesch <m@bues.ch>

		     Danny van Dyk <kugelfang@gentoo.org>

		     Andreas Jaggi <andreas.jaggi@waterwave.ch>





*** Initial Internal Lookup Tables ****/

 0 */

 8 */

 16 */

 24 */

 32 */

 40 */

 48 */

 0 */

 8 */

 16 */

 24 */

 32 */

 40 */

 48 */

 0 */

 16 */

 32 */

 48 */

 64 */

 80 */

 96 */

 112 */

 128 */

 144 */

 160 */

 176 */

 192 */

 208 */

 224 */

 240 */

 0 */

 16 */

 32 */

 48 */

 64 */

 80 */

 96 */

 112 */

 128 */

 144 */

 160 */

 176 */

 192 */

 208 */

 224 */

 240 */

 0 */

 16 */

 0 */

 16 */

 0 */

 16 */

 0 */

 16 */

 32 */

 48 */

 0 */

 16 */

 32 */

 48 */

*** Helper functions to access the device Internal Lookup Tables ****/

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43legacy wireless driver



  Transmission (TX/RX) related functions.



  Copyright (C) 2005 Martin Langer <martin-langer@gmx.de>

  Copyright (C) 2005 Stefano Brivio <stefano.brivio@polimi.it>

  Copyright (C) 2005, 2006 Michael Buesch <m@bues.ch>

  Copyright (C) 2005 Danny van Dyk <kugelfang@gentoo.org>

  Copyright (C) 2005 Andreas Jaggi <andreas.jaggi@waterwave.ch>

  Copyright (C) 2007 Larry Finger <Larry.Finger@lwfinger.net>





 Extract the bitrate out of a CCK PLCP header. */

 Extract the bitrate out of an OFDM PLCP header. */

 Calculate duration for fallback rate */

		/* If the fallback rate equals the normal rate or the

		 * dur_id field contains an AID, CFP magic or 0,

 Hardware appends ICV. */

			/* This key is invalid. This might only happen

			 * in a short timeframe after machine resume before

			 * we were able to reconfigure keys.

			 * Drop this packet completely. Do not transmit it

 PHY TX Control word */

 MAC control */

	/* Overwrite rates[0].count to make the retry calculation

	 * in the tx status easier. need the actual retry limit to

	 * detect whether the fallback rate was used.

 Generate the RTS or CTS-to-self frame */

 Magic cookie */

 Apply the bitfields */

 Get metadata about the frame from the header. */

 Skip PLCP and padding */

 The skb contains the Wireless Header + payload data now */

minimum hdr*/ + FCS_LEN))) {

		/* We must adjust the key index here. We want the "physical"

		 * key index, but the ucode passed it slightly different.

 Remove PROTECTED flag to mark it as decrypted. */

				/* The Ext-IV Bit is set in the "KeyID"

				 * octet of the IV.

 Remove the IV */

 Remove the ICV */

 change to support A PHY */

	/*

	 * All frames on monitor interfaces and beacons always need a full

	 * 64-bit timestamp. Monitor interfaces need it for diagnostic

	 * purposes and beacons for IBSS merging.

	 * This code assumes we get to process the packet within 16 bits

	 * of timestamp, i.e. about 65 milliseconds after the PHY received

	 * the first symbol.

 FIXME */

 Handle TX status report as received through DMA/PIO queues */

 Stop any TX operation on the device (suspend the hardware queues) */

 Resume any TX operation on the device (resume the hardware queues) */

 Initialize the QoS parameters */

	/* FIXME: This function must probably be called from the mac80211

 FIXME kill magic */

TODO: We might need some stack support here to get the values. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43legacy wireless driver



  SYSFS support routines



  Copyright (c) 2006 Michael Buesch <m@bues.ch>





 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43legacy wireless driver



  Copyright (c) 2005 Martin Langer <martin-langer@gmx.de>,

		     Stefano Brivio <stefano.brivio@polimi.it>

		     Michael Buesch <m@bues.ch>

		     Danny van Dyk <kugelfang@gentoo.org>

		     Andreas Jaggi <andreas.jaggi@waterwave.ch>

  Copyright (c) 2007 Larry Finger <Larry.Finger@lwfinger.net>



  Some parts of the code in this file are derived from the ipw2200

  driver  Copyright(c) 2003 - 2004 Intel Corporation.





 Table for b43legacy_radio_calibrationvalue() */

/* Reverse the bits of a 4bit value.

 * Example:  1101 is flipped 1011

 Get the freq, as it has to be written to the device. */

	/* Frequencies are given as frequencies_bg[index] + 2.4GHz

	 * Starting with channel 1

 dummy read */

 Synthetic PU workaround */

 We do not need the workaround. */

 clamp temp to signed 5bit */

bcm-specs.sipsolutions.net/NRSSILookupTable */

bcm-specs.sipsolutions.net/NRSSILookupTable */

bcm-specs.sipsolutions.net/NRSSILookupTable */

bcm-specs.sipsolutions.net/NRSSILookupTable */

 dummy read */

/* Stack implementation to save/restore values from the

 * interference mitigation code.

 * It is save to restore values in random order.

 loopback gain enabled */

 Initialization */

 Restore the registers */

 TODO: Check if channel is valid - return -EINVAL if not */

 JAPAN) */

	/*XXX: Using the longer of 2 timeouts (8000 vs 2000 usecs). Specs states

bcm-specs.sipsolutions.net/TX_Gain_Base_Band */

bcm-specs.sipsolutions.net/TX_Gain_Radio_Frequency_Power_Amplifier */

bcm-specs.sipsolutions.net/TX_Gain_Digital_Analog_Converter */

 TODO: FuncPlaceholder (Adjust BB loft cancel) */

 FIXME: The spec is very weird and unclear here. */

 Restore the RFover values. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43legacy wireless driver



  Copyright (c) 2005 Martin Langer <martin-langer@gmx.de>,

		     Stefano Brivio <stefano.brivio@polimi.it>

		     Michael Buesch <m@bues.ch>

		     Danny van Dyk <kugelfang@gentoo.org>

     Andreas Jaggi <andreas.jaggi@waterwave.ch>

  Copyright (c) 2007 Larry Finger <Larry.Finger@lwfinger.net>



  Some parts of the code in this file are derived from the ipw2200

  driver  Copyright(c) 2003 - 2004 Intel Corporation.





/* Lock the PHY registers against concurrent access from the microcode.

 Dummy read. */

/* initialize B PHY power control

 * as described in https://bcm-specs.sipsolutions.net/InitPowerControl

FIXME: incomplete specs for 5 < revision < 9 */ 0)

 nrssi values are signed 6-bit values. Why 0x7654 here? */

 dummy read */

 Initialize the APHY portion of a GPHY. */

 Force to channel 7, even if not supported. */

 dummy read */

		/* The specs state to update the NRSSI LT with

		 * the value 0x7FFFFFFF here. I think that is some weird

		 * compiler optimization in the original driver.

		 * Essentially, what we do here is resetting all NRSSI LT

		 * entries to -32 (see the clamp_val() in nrssi_hw_update())

 Write the LocalOscillator CONTROL */

 Sanity check. */

 Adjust B/G LO */

 Use fixed values. Only for initialization. */

	/* Note that in_pair and out_pair can point to the same pair.

 Set the baseband attenuation value on chip. */

bcm-specs.sipsolutions.net/LocalOscillator/Measure */

 XXX: What are these? */

 Setup */

 Measure */

 Loop over each possible RadioAttenuation (0-9) */

 Loop over each possible BasebandAttenuation/2 */

 Loop over each possible RadioAttenuation (10-13) */

 Loop over each possible BasebandAttenuation/2 */

				/* FIXME: The next line is wrong, as the

			/* FIXME: shouldn't txctl1 be zero in the next line

txctl1*/ << 4));

 Restoration */

 Sanity check for all lopairs. */

 CONFIG_B43LEGACY_DEBUG */

/* https://bcm-specs.sipsolutions.net/EstimatePowerOut

 * This function converts a TSSI value to dBm in Q5.2

bcm-specs.sipsolutions.net/RecalculateTransmissionPower */

 fake it */

	/* Use regulatory information to get the maximum power.

	 * In the absence of such data from mac80211, we will use 20 dBm, which

	 * is the value for the EU, US, Canada, and most of the world.

	 * The regulatory maximum is reduced by the antenna gain (from sprom)

	 * and 1.5 dBm (a safety factor??). The result is in Q5.2 format

	/* find the desired power in Q5.2 - power_level is in dBm

	/* Check if we need to adjust the current power. The factor of 2 is

	/* RF attenuation delta

 Baseband attenuation delta */

 Do we need to adjust anything? */

 Calculate the new attenuation values. */

	/* Get baseband and radio attenuation values into permitted ranges.

	 * baseband 0-11, radio 0-9.

	 * Radio attenuation affects power level 4 times as much as baseband.

 Save the control values */

 Adjust the hardware */

bcm-specs.sipsolutions.net/TSSI_to_DBM_Table */

 The pabX values are set in SPROM. Use them. */

 pabX values not set in SPROM. */

automatic*/ << 7);

force0*/ << 7);

automatic*/ << 7);

/* Set the PowerSavingControlBits.

 * Bitvalues:

 *   0  => unset the bit

 *   1  => set the bit

 *   -1 => calculate the bit

 FIXME: Force 25 to off and 26 to on for now: */

		/* TODO: If powersave is not off and FIXME is not set and we

		 *	are not in adhoc and thus is not an AP and we arei

		/* TODO: If the device is awake or this is an AP, or we are

		 *	scanning, or FIXME, or we are associated, or FIXME,

		 *	or the latest PS-Poll packet sent was successful,

 SPDX-License-Identifier: GPL-2.0-or-later

/*



  Broadcom B43 wireless driver

  LED control



  Copyright (c) 2005 Martin Langer <martin-langer@gmx.de>,

  Copyright (c) 2005 Stefano Brivio <stefano.brivio@polimi.it>

  Copyright (c) 2005-2007 Michael Buesch <m@bues.ch>

  Copyright (c) 2005 Danny van Dyk <kugelfang@gentoo.org>

  Copyright (c) 2005 Andreas Jaggi <andreas.jaggi@waterwave.ch>





 Callback from the LED subsystem. */

	/* Checking the radio-enabled status here is slightly racy,

	 * but we want to avoid the locking overhead and we don't care

	/* Map the b43 specific LED behaviour value to the

 Sync the RF-kill LED state with radio and switch states. */

			/* There is no LED information in the SPROM

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Broadcom B43legacy wireless driver

 *

 *  Copyright (c) 2005 Martin Langer <martin-langer@gmx.de>

 *  Copyright (c) 2005-2008 Stefano Brivio <stefano.brivio@polimi.it>

 *  Copyright (c) 2005, 2006 Michael Buesch <m@bues.ch>

 *  Copyright (c) 2005 Danny van Dyk <kugelfang@gentoo.org>

 *  Copyright (c) 2005 Andreas Jaggi <andreas.jaggi@waterwave.ch>

 *  Copyright (c) 2007 Larry Finger <Larry.Finger@lwfinger.net>

 *

 *  Some parts of the code in this file are derived from the ipw2200

 *  driver  Copyright(c) 2003 - 2004 Intel Corporation.



 The following table supports BCM4301, BCM4303 and BCM4306/2 devices. */

/* Channel and ratetables are shared for all devices.

 * They can't be const, because ieee80211 puts some precalculated

 * data in there. This data is the same for all devices, so we don't

/*

 * NOTE: When changing this, sync with xmit.c's

 *	 b43legacy_plcp_get_bitrate_idx_* functions!

	/* We are up and running.

 DEBUG */

 "offset" is the WORD offset. */

 Unaligned access */

 Unaligned access */

 Unaligned access */

 Unaligned access */

 Read HostFlags */

 Write HostFlags */

	/* We need to be careful. As we read the TSF from multiple

	 * registers, we should take care of register overflows.

	 * In theory, the whole tsf read process should be atomic.

	 * We try to be atomic here, by restaring the read process,

	 * if any of the high registers changed (overflowed).

	/* Be careful with the in-progress timer.

	 * First zero out the low register, so we have a full

	 * register-overflow duration to complete the operation.

 Write our MAC address and BSSID to template ram */

 slot_time is in usec. */

/* Synchronize IRQ top- and bottom-half.

 * IRQs must be masked before calling this.

 * This must not be called with the irq_lock held.

/* DummyTransmission function, as documented on

 * https://bcm-specs.sipsolutions.net/DummyTransmission

 dummy read follows */

 Turn the Analog ON/OFF */

 Wait for the PLL to turn on. */

 Now take the PHY out of Reset again */

 flush */

 flush */

 Turn Analog ON */

	/* Read all entries from the microcode TXstatus FIFO

	 * and throw them away.

 Top half of Link Quality calculation. */

 Bottom half of Link Quality calculation. */

 Get the noise samples. */

 Calculate the Link Quality by the noise samples. */

 TODO: PS TBTT */

FIXME: the last PSpoll frame was sent successfully */)

 TODO: AP mode. */

 16bit write is odd, but correct. */

	/* The PLCP is 6 bytes long, but we only wrote 4 bytes, yet.

	 * So leave the first two bytes of the next write blank.

 Convert a b43legacy antenna number value to the PHY TX control value. */

 Write the PHY TX control parameters. */

 We can't send beacons with short preamble. Would get PHY errors. */

	/* Find the position of the TIM and the DTIM_period value

 This is the TIM Information Element */

 Check whether the ie_len is in the beacon data range. */

 A valid TIM is at least 4 bytes long. */

 Write PLCP in two parts and timing for packet transfer */

/* Instead of using custom probe response template, this function

 * just patches custom beacon template by:

 * 1) Changing packet type

 * 2) Patching duration field

 * 3) Stripping TIM

 Get the start offset of the variable IEs in the packet. */

 Copy the static data and all Information Elements, except the TIM. */

 This is the TIM. */

 Set the frame control. */

	/* Looks like PLCP headers plus packet timings are stored for

	 * all possible basic rates

	/* FIXME: Probe resp upload doesn't really belong here,

 This is the bottom half of the asynchronous beacon update. */

 Ignore interrupt in the future. */

 Schedule interrupt manually, if busy. */

		/* We never uploaded a beacon before.

 Update beacon right away or defer to IRQ. */

 The handler might have updated the IRQ mask. */

/* Asynchronously update the packet templates in template RAM.

	/* This is the top half of the ansynchronous beacon update. The bottom

	 * half is the beacon IRQ. Beacon update must be asynchronous to avoid

	 * sending an invalid beacon. This can happen for example, if the

	/* We could modify the existing beacon and set the aid bit in the TIM

	 * field, but that would probably require resizing and moving of data

	 * within the beacon template. Simply request a new beacon and let

 Interrupt handler bottom-half */

TODO*/

 Check the DMA reason registers for received data. */

 Apply a PIO specific workaround to the dma_reasons */

 Interrupt handler top-half */

 This can only happen on shared IRQ lines. */

 shared IRQ */

 Disable all IRQs. They are enabled again in the bottom half. */

 Save the reason code and call our bottom half. */

wireless.wiki.kernel.org/en/"

 stall here until fw ready */

 Jump the microcode PSM to offset 0 */

 Zero out all microcode PSM registers and shared memory. */

 Upload Microcode. */

 Upload PCM data. */

 No need for autoinc bit in SHM_HW */

 Start the microcode PSM */

 Wait for the microcode to load and respond */

 dummy read follows */

 Get and check the revisions. */

/* Initialize the GPIOs

 * https://bcm-specs.sipsolutions.net/GPIO

 FIXME: This is redundant. */

 Turn off all GPIO stuff. Call this on module unload, for example. */

bcm-specs.sipsolutions.net/EnableMac */

 the next two are dummy reads */

 Re-enable IRQs. */

bcm-specs.sipsolutions.net/SuspendMAC */

		/* Mask IRQs before suspending MAC. Otherwise

 Reset status to STA infrastructure mode. */

	/* Workaround: On old hardware the HW-MAC-address-filter

	 * doesn't work properly, so always run promisc in filter

 Set the TX-Antenna for management frames sent by firmware. */

	/* FIXME We also need to set the other flags of the PHY control

 For Beacons */

 For ACK/CTS */

 For Probe Resposes */

 This is the opposite of b43legacy_chip_init() */

 firmware is released later */

/* Initialize the chip

 * https://bcm-specs.sipsolutions.net/ChipInit

 Initialize the MAC control */

 firmware is released later */

 firmware is released later */

 Select initial Interference Mitigation. */

 Probe Response Timeout value */

 FIXME: Default to 0, has to be set by ioctl probably... :-/ */

 Initially set the wireless operation mode. */

 PHY TX errors counter. */

 Update device statistics. */

 FIXME: unless scanning? */

/* Periodic work locking policy:

 * 	The whole periodic work handler is protected by

 * 	wl->mutex. If another lock is needed somewhere in the

 * 	pwork callchain, it's acquired in-place, where it's needed.

 Validate access to the chip (SHM) */

	/* KTP is a word address, but we address SHM bytewise.

	 * So multiply by two.

 Number of RCMTA address slots */

	/* Don't take wl->mutex here, as it could deadlock with

	 * hwrng internal locking. It's not needed to take

 Drop it */

 Too short, this can't be a valid frame. */

			/* Ok, this device supports the PHY-mode.

 Expects wl->mutex locked */

 This device is already running. */

 Shutdown the currently running core. */

		/* We switch to a different core, so we put PHY into

 Now start the new core. */

 Whoops, failed to init the new core. No core is operating now. */

 Write the short and long frame retry limit values. */

	/* The retry limit is a 4-bit counter. Enforce this to avoid overflowing

 Switch the PHY mode (if necessary). */

	/* Disable IRQs while reconfiguring the device.

	 * This makes it possible to drop the spinlock throughout

	/* Switch to the requested channel.

 Adjust the desired TX power level. */

 Antennas for RX and management frame TX. */

		/*

		 * Get the pointer that we need to point to

		 * from the direct map

 and write it to the basic map */

	/* Disable IRQs while reconfiguring the device.

	 * This makes it possible to drop the spinlock throughout

 XXX: why? */

 Locking: wl->mutex */

	/* Disable and sync interrupts. We must do this before than

	 * setting the status to INITIALIZED, as the interrupt handler

 flush */

	/* Must unlock as it would otherwise deadlock. No races here.

 Drain all TX queues. */

 Locking: wl->mutex */

 We are ready to run. */

 Start data flow (TX/RX) */

 Start maintenance work */

 Get PHY and RADIO versioning numbers */

 Get PHY versioning */

 Get RADIO versioning */

	/* Assume the radio is enabled. If it's not enabled, the state will

 Set default attenuation values. */

 NRSSI */

 Flags */

 Stats */

 IRQ related flags */

 Noise calculation context */

 Set the TSF CFP pre-TargetBeaconTransmissionTime. */

 The time value is in microseconds. */

 Shutdown a wireless core */

 Locking: wl->mutex */

 Stop the microcode PSM. */

 Set default attenuation values. */

 NRSSI */

 Flags */

 Initialize a wireless core */

 Enable IRQ routing to this device. */

	/* Disable sending probe responses from firmware.

	 * Setting the MaxTime to one usec will always trigger

	 * a timeout, so we never send any probe resp.

 Minimum Contention Window */

 Maximum Contention Window */

 Enable dynamic PCTL */

 TODO: allow AP devices to coexist */

	/* Kill all old instance specific information to make sure

	 * the card won't use it in the short timeframe between start

/* Hard-reset the chip. Do not call this directly.

 * Use b43legacy_controller_restart()

 Bring the device down... */

 ...and up again. */

 Failed to init the dev. */

	/* We release firmware that late to not be required to re-request

	/* Do NOT do any device initialization here.

	 * Do it in wireless_core_init() instead.

	 * This function is for gathering basic information about the HW, only.

	 * Also some structs may be set up here. But most likely you want to

	 * have that in core_init(), too.

 Get the PHY type. */

 Check if this device supports multiband. */

 No multiband support. */

 Now set some default "current_dev" */

	/* Do not cancel ieee80211-workqueue based work here.

 boardflags workarounds */

 fill hw info */

 Allow WPA3 in software */

 FIXME: hardware has more queues */

 Get and initialize struct b43legacy_wl */

 Initialize queues and flags. */

 Probing the first core - setup common struct b43legacy_wl */

 setup and start work to load firmware */

	/* We must cancel any work here before unregistering from ieee80211,

 NULL if fw never loaded */

		/* Last core on the chip unregistered.

		 * We can destroy common struct b43legacy_wl.

 Perform a hardware reset. This can be called from any context. */

 Must avoid requeueing, if we are in shutdown. */

 CONFIG_PM */

 CONFIG_PM */

/*

 * Copyright (c) 2010 Broadcom Corporation

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 max number of mpdus in an ampdu */

 max number of mpdus in an ampdu to a legacy */

 max Tx ba window size (in pdu) */

 default Tx ba window size (in pdu) */

 default Rx ba window size (in pdu) */

 max Rx ba window size (in pdu) */

 max dur of tx ampdu (in msec) */

 default tx retry limit */

 default tx retry limit at reg rate */

 default ffpld reserved bytes */

 # of inis to be freed on detach */

 max # of mpdus released at a time */

 number of fifo concerned by pre-loading */

#define FFPLD_TX_MAX_UNFL   200	/* default value of the average number of ampdu

				 * without underflows

 estimate of maximum mpdu size */

 we don't deal with mcs 32 */

 increments in bytes */

#define FFPLD_MAX_AMPDU_CNT 5000	/* maximum number of ampdu we

					 * accumulate between resets.

 max allowed number of mpdus in an ampdu (2 streams) */

 max possible overhead per mpdu in the ampdu; 3 is for roundup if needed */

 modulo add/sub, bound = 2^k */

/* structure to hold tx fifo information and pre-loading state

 * counters specific to tx underflows of ampdus

 * some counters might be redundant with the ones in wlc or ampdu structures.

 * This allows to maintain a specific state independently of

 * how often and/or when the wlc counters are updated.

 *

 * ampdu_pld_size: number of bytes to be pre-loaded

 * mcs2ampdu_table: per-mcs max # of mpdus in an ampdu

 * prev_txfunfl: num of underflows last read from the HW macstats counter

 * accum_txfunfl: num of underflows since we modified pld params

 * accum_txampdu: num of tx ampdu since we modified pld params

 * prev_txampdu: previous reading of tx ampdu

 * dmaxferrate: estimated dma avg xfer rate in kbits/sec

/* AMPDU module specific state

 *

 * wlc: pointer to main wlc structure

 * scb_handle: scb cubby handle to retrieve data from scb

 * ini_enable: per-tid initiator enable/disable of ampdu

 * ba_tx_wsize: Tx ba window size (in pdu)

 * ba_rx_wsize: Rx ba window size (in pdu)

 * retry_limit: mpdu transmit retry limit

 * rr_retry_limit: mpdu transmit retry limit at regular rate

 * retry_limit_tid: per-tid mpdu transmit retry limit

 * rr_retry_limit_tid: per-tid mpdu transmit retry limit at regular rate

 * mpdu_density: min mpdu spacing (0-7) ==> 2^(x-1)/8 usec

 * max_pdu: max pdus allowed in ampdu

 * dur: max duration of an ampdu (in msec)

 * rx_factor: maximum rx ampdu factor (0-3) ==> 2^(13+x) bytes

 * ffpld_rsvd: number of bytes to reserve for preload

 * max_txlen: max size of ampdu per mcs, bw and sgi

 * mfbr: enable multiple fallback rate

 * tx_max_funl: underflows should be kept such that

 *		(tx_max_funfl*underflows) < tx frames

 * fifo_tb: table of fifo infos

 used for flushing ampdu packets */

 rate is in Kbps; dur is in msec ==> len = (rate * dur) / 8 */

 20MHz, No SGI */

 40 MHz, No SGI */

 20MHz, SGI */

 40 MHz, SGI */

 Disable ampdu for VO by default */

 Disable ampdu for BK by default since not enough fifo space */

	/*

	 * bump max ampdu rcv size to 64k for all 11n

	 * devices except 4321A0 and 4321A1

 try to set ampdu to the default value */

 go back to legacy size if some preloading is occurring */

 apply user override */

 recompute the dma rate */

 note : we divide/multiply by 100 to avoid integer overflows */

 fill up the mcs2ampdu table; do not recalc the last mcs */

 shifting to keep it within integer range */

/* evaluate the dma transfer rate using the tx underflows as feedback.

 * If necessary, increase tx fifo preloading. If not enough,

 * decrease maximum ampdu size for each mcs till underflows stop

 * Return 1 if pre-loading not active, -1 if not an underflow event,

 * 0 if pre-loading module took care of the event.

 return if we got here for a different reason than underflows */

 check if fifo is big enough */

 we need to wait for at least 10 underflows */

	/*

	   compute the current ratio of tx unfl per ampdu.

	   When the current ampdu count becomes too

	   big while the ratio remains small, we reset

	   the current count in order to not

	   introduce too big of a latency in detecting a

	   large amount of tx underflows later.

	/* In case max value max_pdu is already lower than

	   the fifo depth, there is nothing more we can do.

 increment by TX_FIFO_PLD_INC bytes */

 update scb release size */

		/*

		 * compute a new dma xfer rate for max_mpdu @ max mcs.

		 * This is the minimum dma rate that can achieve no

		 * underflow condition for the current mpdu size.

		 *

		 * note : we divide/multiply by 100 to avoid integer overflows

 decrease ampdu size */

 recompute the table */

 update scb release size */

 negotiated ba window size (in pdu) */

 from ht_cap in beacon */

 determined from first MPDU */

 determined from first MPDU */

/*

 * Preps the given packet for AMPDU based on the session data. If the

 * frame cannot be accomodated in the current session, -ENOSPC is

 * returned.

		/*

		 * We aren't really out of space if the new frame is of

		 * a different priority, but we want the same behaviour

		 * so return -ENOSPC anyway.

		 *

		 * XXX: The old AMPDU code did this, but is it really

		 * necessary?

	/*

	 * Now that we're sure this frame can be accomodated, update the

	 * session information.

 Handle retry limits */

 Limit AMPDU size based on MCS */

	/*

	 * Treat all frames as "middle" frames of AMPDU here. First and

	 * last frames must be fixed up after all MPDUs have been prepped.

 always default to 0 */

 Need to fix up last MPDU first to adjust AMPDU length */

 remove the null delimiter after last mpdu */

 remove the pad len from last mpdu */

 Now fix up the first MPDU */

 If only one MPDU leave it marked as last */

 rebuild the rspec and rspec_fallback */

 mark plcp to indicate ampdu */

 reset the mixed mode header durations */

 set the preload length */

 update RTS dur fields */

 set TxFesTimeNormal */

 set fallback rate version of TxFesTimeNormal */

 set flag and plcp for fallback rate */

 clear the rest of the rates */

 no need to retry for badch; will fail again */

				/* TX underflow:

				 *   try tuning pre-loading or ampdu size

				/*

				 * if there were underflows, but pre-loading

				 * is not active, notify rate adaptation.

 loop through all pkts and retry if not acked */

 if acked then clear bit and free packet */

				/*

				 * ampdu_ack_len:

				 *   number of acked aggregated frames

 ampdu_len: number of aggregated frames */

 either retransmit or send bar if ack not recd */

				/*

				 * We shouldn't be out of space in the DMA

				 * ring here since we're reinserting a frame

				 * that was just pulled out.

 Retry timeout */

 break out if last packet of ampdu */

 update rate state */

	/* BMAC_NOTE: For the split driver, second level txstatus comes later

	 * So if the ACK was received then wait for the second level else just

	 * call the first one

 wait till the next 8 bytes of txstatus is available */

 error condition */

 loop through all pkts and free */

 break out if last packet of ampdu */

 driver needs to write the ta in the template; ta is at offset 16 */

	/*

	 * Extend ucode internal watchdog timer to

	 * match larger received frames

/*

 * callback function that helps invalidating ampdu packets in a DMA queue

/*

 * When a remote party is no longer available for ampdu communication, any

 * pending tx ampdu packets in the driver have to be flushed.

/*

 * Copyright (c) 2011 Broadcom Corporation

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 bug in tracepoint.h, it should include this */

 SPDX-License-Identifier: GPL-2.0

 number of leds */

 behavior mask */

 activelow (polarity) bit */

 radio enabled */

 Callback from the LED subsystem. */

 get CC core */

 find radio enabled LED */

 No LED, bail out */

 Try to obtain this LED GPIO line */

/*

 * Copyright (c) 2010 Broadcom Corporation

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 bitmap of the core enabled */

 For Nsts = 1, enable core 1 */

 For Nsts = 2, enable core 1 & 2 */

 For Nsts = 3, enable core 1, 2 & 3 */

 For Nsts = 4, enable all cores */

 MIMOPHYs rev3-6 cannot receive STBC with only one rx core active */

/*

 * every WLC_TEMPSENSE_PERIOD seconds temperature check to decide whether to

 * turn on/off txchain.

 Check if the chip is too hot. Disable one Tx chain, if it is */

 high 4 bits are for Rx chain, low 4 bits are  for Tx chain */

 turn off 1 tx chain */

 turn back on txchain */

 Clear previous settings */

 criteria to choose stf mode */

	/*

	 * the "+3dbm (12 0.25db units)" is to account for the fact that with

	 * CDD, tx occurs on both chains

	/*

	 * STBC is ORed into to algo channel as STBC requires per-packet SCB

	 * capability check so cannot be default mode of operation. One of

	 * SISO, CDD have to be set

 Nsts = 1..4, txcore index = 1..4 */

		/* Needs to update beacon and ucode generated response

		 * frames when 1 stream core map changed

/*

 * Centralized txant update function. call it whenever wlc->stf->txant and/or

 * wlc->stf->txchain change.

 *

 * Antennas are controlled by ucode indirectly, which drives PHY or GPIO to

 * achieve various tx/rx antenna selection schemes

 *

 * legacy phy, bit 6 and bit 7 means antenna 0 and 1 respectively, bit6+bit7

 * means auto(last rx).

 * for NREV<3, bit 6 and bit 7 means antenna 0 and 1 respectively, bit6+bit7

 * means last rx and do tx-antenna selection for SISO transmissions

 * for NREV=3, bit 6 and bit _8_ means antenna 0 and 1 respectively, bit6+bit7

 * means last rx and do tx-antenna selection for SISO transmissions

 * for NREV>=7, bit 6 and bit 7 mean antenna 0 and 1 respectively, nit6+bit7

 * means both cores active

 catch out of sync wlc->stf->txcore */

	/*

	 * if nrate override is configured to be non-SISO STF mode, reject

	 * reducing txchain to 1

/*

 * update wlc->stf->ss_opmode which represents the operational stf_ss mode

 * we're using

	/*

	 * NOTE: opmode can only be SISO or CDD as STBC is decided on a

	 * per-packet basis

 Init the default value */

 get available rx/tx chains */

 these parameter are intended to be used for all PHY types */

 initialize the txcore table */

 default spatial_policy */

 for non-siso rates or default setting, use the available chains */

/*

 * Copyright (c) 2010 Broadcom Corporation

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * dma register field offset calculation

/*

 * DMA hardware requires each descriptor ring to be 8kB aligned, and fit within

 * a contiguous 8kB physical address.

 transmit channel control */

 transmit enable */

 transmit suspend request */

 loopback enable */

 flush request */

 parity check disable */

 address extension bits */

 transmit descriptor table pointer */

 last valid descriptor */

 transmit channel status */

 current descriptor pointer */

 transmit state */

 disabled */

 active */

 idle wait */

 stopped */

 suspend pending */

 active descriptor */

 transmit errors */

 no error */

 descriptor protocol error */

 data fifo underrun */

 data transfer error */

 descriptor read error */

 core error */

 receive channel control */

 receive enable */

 receive frame offset */

 direct fifo receive (pio) mode */

 separate rx header descriptor enable */

 overflow continue */

 parity check disable */

 address extension bits */

 flags for dma controller */

 partity enable */

 rx overflow continue */

 allow rx scatter to multiple descriptors */

 Unframed Rx/Tx data */

 receive descriptor table pointer */

 last valid descriptor */

 receive channel status */

 current descriptor pointer */

 receive state */

 disabled */

 active */

 idle wait */

 stopped */

 suspend pending */

 active descriptor */

 receive errors */

 no error */

 descriptor protocol error */

 data fifo overflow */

 data transfer error */

 descriptor read error */

 core error */

 fifoaddr */

 offset */

 select */

 transmit dma data */

 transmit dma pointers */

 receive dma data */

 receive dma pointers */

 transmit fifo data */

 transmit fifo pointers */

 receive fifo data */

 receive fifo pointers */

 receive frame status data */

 receive frame status pointers */

 descriptor control flags 1 */

 core specific flags */

 end of descriptor table */

 interrupt on completion */

 end of frame */

 start of frame */

 descriptor control flags 2 */

 buffer byte count. real data len must <= 16KB */

 address extension bits */

 parity bit */

 control flags in the range [27:20] are core-specific and not defined here */

 frame length mask */

 RxOverFlow */

 no. of descriptors used - 1 */

 core-dependent data type */

/*

 * packet headroom necessary to accommodate the largest header

 * in the system, (i.e TXOFF). By doing, we avoid the need to

 * allocate an extra buffer for the header when bridging to WL.

 * There is a compile time check in wlc.c which ensure that this

 * value is at least as big as TXOFF. This value is used in

 * dma_rxfill().

 8 char names */

 macros to convert between byte offsets and indexes */

 address[31:30] */

 address[31:30] */

 address[63] */

 address[63] */

/*

 * DMA Descriptor

 * Descriptors are only read by the hardware, never written back.

 misc control bits & bufcount */

 buffer count and address extension */

 memory address of the date buffer, bits 31:0 */

 memory address of the date buffer, bits 63:32 */

 dma engine software state */

 exported structure */

 callers name for diag msgs */

 session information for AMPDU */

 this dma engine is operating in 64-bit mode */

 this dma engine supports DmaExtendedAddrChanges */

 64-bit dma tx engine registers */

 64-bit dma rx engine registers */

 pointer to dma64 tx descriptor ring */

 pointer to dma64 rx descriptor ring */

 alignment requirement for dma descriptors */

 # tx descriptors tunable */

 index of next descriptor to reclaim */

 index of next descriptor to post */

 pointer to parallel array of pointers to packets */

 Aligned physical address of descriptor ring */

 Original physical address of descriptor ring */

 #bytes added to alloc'd mem to align txd */

 #bytes allocated for the ring */

	u32 xmtptrbase;	/* When using unaligned descriptors, the ptr register

			 * is not just an index, it needs all 13 bits to be

			 * an offset from the addr register.

 # rx descriptors tunable */

 index of next descriptor to reclaim */

 index of next descriptor to post */

 pointer to parallel array of pointers to packets */

 Aligned physical address of descriptor ring */

 Original physical address of descriptor ring */

 #bytes added to alloc'd mem to align rxd */

 #bytes allocated for the ring */

 Base for ptr reg when using unaligned descriptors */

 tunables */

	unsigned int rxbufsize;	/* rx buffer size in bytes, not including

				 * the extra headroom

	uint rxextrahdrroom;	/* extra rx headroom, reverseved to assist upper

				 * stack, e.g. some rx pkt buffers will be

				 * bridged to tx side without byte copying.

				 * The extra headroom needs to be large enough

				 * to fit txheader needs. Some dongle driver may

				 * not need it.

 # rx buffers to keep posted */

 rxcontrol offset */

 add to get dma address of descriptor ring, low 32 bits */

   high 32 bits */

 add to get dma address of data buffer, low 32 bits */

   high 32 bits */

 descriptor base need to be aligned or not */

 Check for odd number of 1's */

 no swap needed for counting 1's */

 descriptor bumping functions */

 faster than %, but n must be power of 2 */

 If trying to enable parity, check if parity is actually supported */

			/* We *can* disable it so it is supported,

			 * restore control register

 Not supported, don't allow it to be enabled */

/*

 * return true if this dma engine supports DmaExtendedAddrChanges,

 * otherwise false

 DMA64 supports full 32- or 64-bit operation. AE is always valid */

 not all tx or rx channel are available */

 Check to see if the descriptors need to be aligned on 4K/8K or not */

/*

 * Descriptor table must start at the DMA hardware dictated alignment, so

 * allocated memory must be large enough to support this requirement.

/* This function ensures that the DMA descriptor ring will not get allocated

 * across Page boundary. If the allocation is done across the page boundary

 * at the first time, then it is freed and the allocation is done at

 * descriptor ring size aligned location. This will ensure that the ring will

 * not cross page boundary

 allocate private info structure */

 init dma reg info */

	/*

	 * Default flags (which can be changed by the driver calling

	 * dma_ctrlflags before enable): For backwards compatibility

	 * both Rx Overflow Continue and Parity are DISABLED.

 make a private copy of our callers name */

 save tunables */

 the actual dma size doesn't include the extra headroom */

	/*

	 * figure out the DMA physical address offset for dd and data

	 *     PCI/PCIE: they map silicon backplace address to zero

	 *     based memory, need offset

	 *     Other bus: use zero SI_BUS BIGENDIAN kludge: use sdram

	 *     swapped region for data buffer, not descriptor

 for pci bus, add offset */

 add offset for pcie with DMA64 bus */

 WAR64450 : DMACtl.Addr ext fields are not supported in SDIOD core. */

 does the descriptor need to be aligned and if yes, on 4K/8K or not */

 for smaller dd table, HW relax alignment reqmnt */

 16 byte alignment */

 allocate tx packet pointer vector */

 allocate rx packet pointer vector */

	/*

	 * allocate transmit descriptor ring, only need ntxd descriptors

	 * but it must be aligned

	/*

	 * allocate receive descriptor ring, only need nrxd descriptors

	 * but it must be aligned

 Initialize AMPDU session */

 PCI bus with big(>1G) physical address, use address extension */

 address extension for 32-bit PCI */

 !! may be called with core in reset */

 free dma descriptor rings */

 free packet pointer vectors */

 free our private info structure */

 initialize descriptor table base address */

 DMA64 32bits address extension */

 shift the high bit(s) from pa to ae */

 clear rx descriptor ring */

	/* DMA engine with out alignment requirement requires table to be inited

	 * before enabling the engine

 return if no packets posted */

 ignore curr if forceall */

 get the packet pointer that corresponds to the rx descriptor */

 clear this packet from the descriptor ring */

/*

 * !! rx entry routine

 * returns the number packages in the next frame, or 0 if there are no more

 *   if DMA_CTRL_RXMULTI is defined, DMA scattering(multiple buffers) is

 *   supported with pkts chain

 *   otherwise, it's treated as giant pkt and will be tossed.

 *   The DMA scattering starts with normal DMA header, followed by first

 *   buffer data. After it reaches the max size of buffer, the data continues

 *   in next DMA descriptor buffer WITHOUT DMA header

 set actual length */

 check for single or multi-buffer rx */

 DEBUG */

/*

 * post receive buffers

 *  Return false if refill failed completely or dma mapping failed. The ring

 *  is empty, which will stall the rx dma and user might want to call rxfill

 *  again asap. This is unlikely to happen on a memory-rich NIC, but often on

 *  memory-constrained dongle.

	/*

	 * Determine how many receive buffers we're lacking

	 * from the full complement, allocate, initialize,

	 * and post them, then update the chip rx lastdscr.

		/*

		 * the di->rxbufsize doesn't include the extra headroom,

		 * we need to add it to the size to be allocated

 reserve an extra headroom, if applicable */

		/* Do a cached write instead of uncached write since DMA_MAP

		 * will flush the cache.

 save the free packet pointer */

 reset flags for each descriptor */

 update the chip lastdscr pointer */

 reset all software counters */

 get the address of the var in order to change later */

 64-bit DMA functions */

 clear tx descriptor ring */

	/* DMA engine with out alignment requirement requires table to be inited

	 * before enabling the engine

	/* DMA engine with alignment requirement requires table to be inited

	 * before enabling the engine

 For unframed data, we don't have any packets to free */

 suspend tx DMA first */

 wait for the last transaction to complete */

	/*

	 * obtain and initialize transmit descriptor entry.

 get physical address of buffer start */

 if mapping failed, free skb */

	/* With a DMA segment list, Descriptor table is filled

	 * using the segment list instead of looping over

	 * buffers in multi-chain DMA. Therefore, EOF for SGLIST

	 * is when end of segment list is reached.

 save the packet */

 bump the tx descriptor index */

		/*

		 * AMPDU cannot accomodate this frame. Close out the in-

		 * progress AMPDU session and start a new one.

 Update count of available tx descriptors based on current DMA state */

	/*

	 * Available space is number of descriptors less the number of

	 * active descriptors and the number of queued AMPDU frames.

/*

 * !! tx entry routine

 * WARNING: call must check the return value for error.

 *   the error(toss frames) could be fatal and cause many subsequent hard

 *   to debug problems

 no use to transmit a zero length packet */

 return nonzero if out of tx descriptors */

 tx flow control */

 kick the chip */

		/*

		 * Start sending data if we've got a full AMPDU, there's

		 * no more space in the DMA ring, or the ring isn't

		 * currently transmitting.

/*

 * If we have an active AMPDU session and are not transmitting,

 * this function will force tx to start.

/*

 * Reclaim next completed txd (txds if using chained buffers) in the range

 * specified and return associated packet.

 * If range is DMA_RANGE_TRANSMITTED, reclaim descriptors that have be

 * transmitted as noted by the hardware "CurrDescr" pointer.

 * If range is DMA_RANGE_TRANSFERED, reclaim descriptors that have be

 * transferred by the DMA as noted by the hardware "ActiveDescr" pointer.

 * If range is DMA_RANGE_ALL, reclaim all txd(s) posted to the ring and

 * return associated packet regardless of the value of hardware pointers.

 tx flow control */

/*

 * Mac80211 initiated actions sometimes require packets in the DMA queue to be

 * modified. The modified portion of the packet is not under control of the DMA

 * engine. This function calls a caller-supplied function for each packet in

 * the caller specified dma chain.

/*

 * Copyright (c) 2010 Broadcom Corporation

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Rate info per rate: It tells whether a rate is ofdm or not and its phy_rate

 * value

  0     1     2     3     4     5     6     7     8     9 */

   0 */ 0x00, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,

  10 */ 0x00, 0x37, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x00,

  20 */ 0x00, 0x00, 0x6e, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00,

  30 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00,

  40 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00,

  50 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  60 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  70 */ 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  80 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  90 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,

 100 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c

 rates are in units of Kbps */

 MCS  0: SS 1, MOD: BPSK,  CR 1/2 */

 MCS  1: SS 1, MOD: QPSK,  CR 1/2 */

 MCS  2: SS 1, MOD: QPSK,  CR 3/4 */

 MCS  3: SS 1, MOD: 16QAM, CR 1/2 */

 MCS  4: SS 1, MOD: 16QAM, CR 3/4 */

 MCS  5: SS 1, MOD: 64QAM, CR 2/3 */

 MCS  6: SS 1, MOD: 64QAM, CR 3/4 */

 MCS  7: SS 1, MOD: 64QAM, CR 5/6 */

 MCS  8: SS 2, MOD: BPSK,  CR 1/2 */

 MCS  9: SS 2, MOD: QPSK,  CR 1/2 */

 MCS 10: SS 2, MOD: QPSK,  CR 3/4 */

 MCS 11: SS 2, MOD: 16QAM, CR 1/2 */

 MCS 12: SS 2, MOD: 16QAM, CR 3/4 */

 MCS 13: SS 2, MOD: 64QAM, CR 2/3 */

 MCS 14: SS 2, MOD: 64QAM, CR 3/4 */

 MCS 15: SS 2, MOD: 64QAM, CR 5/6 */

 MCS 16: SS 3, MOD: BPSK,  CR 1/2 */

 MCS 17: SS 3, MOD: QPSK,  CR 1/2 */

 MCS 18: SS 3, MOD: QPSK,  CR 3/4 */

 MCS 19: SS 3, MOD: 16QAM, CR 1/2 */

 MCS 20: SS 3, MOD: 16QAM, CR 3/4 */

 MCS 21: SS 3, MOD: 64QAM, CR 2/3 */

 MCS 22: SS 3, MOD: 64QAM, CR 3/4 */

 MCS 23: SS 3, MOD: 64QAM, CR 5/6 */

 MCS 24: SS 4, MOD: BPSK,  CR 1/2 */

 MCS 25: SS 4, MOD: QPSK,  CR 1/2 */

 MCS 26: SS 4, MOD: QPSK,  CR 3/4 */

 MCS 27: SS 4, MOD: 16QAM, CR 1/2 */

 MCS 28: SS 4, MOD: 16QAM, CR 3/4 */

 MCS 29: SS 4, MOD: 64QAM, CR 2/3 */

 MCS 30: SS 4, MOD: 64QAM, CR 3/4 */

 MCS 31: SS 4, MOD: 64QAM, CR 5/6 */

 MCS 32: SS 1, MOD: BPSK,  CR 1/2 */

/*

 * phycfg for legacy OFDM frames: code rate, modulation scheme, spatial streams

 * Number of spatial streams: always 1 other fields: refer to table 78 of

 * section 17.3.2.2 of the original .11a standard

 ofdm mac rate */

 phy ctl byte 3, code rate, modulation type, # of streams */

 Number of legacy_rate_cfg entries in the table */

/*

 * In CCK mode LPPHY overloads OFDM Modulation bits with CCK Data Rate

 * Eventually MIMOPHY would also be converted to this format

 * 0 = 1Mbps; 1 = 2Mbps; 2 = 5.5Mbps; 3 = 11Mbps

 CCK  1Mbps,  data rate  0 */

 CCK  2Mbps,  data rate  1 */

 CCK  5.5Mbps,  data rate  2 */

 CCK  11Mbps,  data rate   3 */

 OFDM  6Mbps,  code rate 1/2, BPSK,   1 spatial stream */

 OFDM  9Mbps,  code rate 3/4, BPSK,   1 spatial stream */

 OFDM  12Mbps, code rate 1/2, QPSK,   1 spatial stream */

 OFDM  18Mbps, code rate 3/4, QPSK,   1 spatial stream */

 OFDM  24Mbps, code rate 1/2, 16-QAM, 1 spatial stream */

 OFDM  36Mbps, code rate 3/4, 16-QAM, 1 spatial stream */

 OFDM  48Mbps, code rate 2/3, 64-QAM, 1 spatial stream */

 OFDM  54Mbps, code rate 3/4, 64-QAM, 1 spatial stream */

 Hardware rates (also encodes default basic rates) */

  1b,   2b,   5.5b, 6,    9,    11b,  12,   18,   24,   36,   48, */

 54 Mbps */

  6b,   9,    12b,  18,   24b,  36,   48,   54 Mbps */

 Default ratesets that include MCS32 for 40BW channels */

  1b,   2b,   5.5b, 6,    9,    11b,  12,   18,   24,   36,   48 */

 54 Mbps */

  6b,   9,    12b,  18,   24b,  36,   48,   54 Mbps */

  1b,   2b, 5.5b, 6,    9,    11b,  12,   18,   24,   36,   48,*/

54 Mbps */

  1b,   2b,   5.5b, 11b Mbps */

  6b,   9,    12b,  18,   24b,  36,   48,   54 Mbps */

  1b,   2b,   5.5,  11 Mbps */

/* check if rateset is valid.

 * if check_brate is true, rateset without a basic rate is considered NOT valid.

 error if no basic rates */

/*

 * filter based on hardware rateset, and sort filtered rateset with basic

 * bit(s) preserved, and check if resulting rateset is valid.

 mask off "basic rate" bit, BRCMS_RATE_FLAG */

 preserve basic bit! */

 fill out the rates in order, looking at only supported rates */

 only set the mcs rate bit if the equivalent hw mcs bit is set */

 calculate the rate of a rx'd frame and return it as a ratespec */

 indicate rspec is for 40 MHz mode */

 fallthru */

 not supported, error condition */

 copy rateset src to dst as-is (no masking or sorting) */

/*

 * Copy and selectively filter one rateset to another.

 * 'basic_only' means only copy basic rates.

 * 'rates' indicates cck (11b) and ofdm rates combinations.

 *    - 0: cck and ofdm

 *    - 1: cck only

 *    - 2: ofdm only

 * 'xmask' is the copy mask (typically 0x7f or 0xff).

/* select rateset for a given phy_type and bandtype and filter it, sort it

 * and fill rs_tgt with result

 should not happen, error condition */

 force cck */

 if hw rateset is not supplied, assign selected rateset to it */

 Based on bandwidth passed, allow/disallow MCS 32 in the rateset */

/*

 * Copyright (c) 2010 Broadcom Corporation

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * This is "two-way" interface, acting as the SHIM layer between driver

 * and PHY layer. The driver can optionally call this translation layer

 * to do some preprocessing, then reach PHY. On the PHY->driver direction,

 * all calls go through this layer since PHY doesn't have access to the

 * driver's brcms_hardware pointer.

 PHY SHIM module specific state */

 pointer to main wlc_hw structure */

 pointer to main wlc structure */

 pointer to os-specific private state */

/*

 * Copyright (c) 2011 Broadcom Corporation

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * external LPO crystal frequency

/*

 * Duration for ILP clock frequency measurment in milliseconds

 *

 * remark: 1000 must be an integer multiple of this duration

 Fields in pmucontrol */

 rev 2 */

 rev 1 */

 ILP clock */

 ALP clock on pre-PMU chips */

 pmustatus */

 PMU resource bit position */

/* PMU corerev and chip specific PLL controls.

 * PMU<rev>_PLL<num>_XX where <rev> is PMU corerev and <num> is an arbitrary

 * number to differentiate different PLLs controlled by the same PMU rev.

 pmu XtalFreqRatio */

 4313 resources */

 Remember original core before switch to chipc */

		/*

		 * Enable the reg to measure the freq,

		 * in case it was disabled before

 Delay for well over 4 ILP clocks */

 Read the latched number of ALP ticks per 4 ILP ticks */

		/*

		 * Turn off the PMU_XTALFREQ_REG_MEASURE_SHIFT

		 * bit to save power

 Calculate ALP frequency */

		/*

		 * Round to nearest 100KHz, and at

		 * the same time convert to KHz

/*

 * Copyright (c) 2010 Broadcom Corporation

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Copyright (c) 2010 Broadcom Corporation

 * Copyright (c) 2013 Hauke Mehrtens <hauke@hauke-m.de>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 #tx queues on mac80211<->driver interface */

 msec */

 Flags we support */

 This needs to be adjusted when brcms_firmwares changes */

 recognized BCMA Core IDs */

/*

 * Module parameter for setting the debug message level. Available

 * flags are specified by the BRCM_DL_* macros in

 * drivers/net/wireless/brcm80211/include/defs.h.

 UNII-1 */

 UNII-2 */

 MID */

 UNII-3 */

/*

 * The rate table is used for both 2.4G and 5G rates. The

 * latter being a subset as it does not support CCK rates.

 from include/linux/ieee80211.h */

 placeholders for now */

 placeholders for now */

 flags the given rate in rateset as requested */

/*

 * This function frees the WL per-device resources.

 *

 * This function frees resources owned by the WL device pointed to

 * by the wl parameter.

 *

 * precondition: can both be called locked and unlocked

 free ucode data */

 kill dpc */

 free common resources */

 virtual interface deletion is deferred so we cannot spinwait */

 wait for all pending callbacks to complete */

 free timers */

/*

* called from both kernel as from this kernel module (error flow on attach)

* precondition: perimeter lock is not acquired.

/*

 * Precondition: Since this function is called in brcms_pci_probe() context,

 * no locking is required.

/*

 * Precondition: Since this function is called in brcms_pci_probe() context,

 * no locking is required.

 avoid acknowledging frames before a non-monitor device is added */

 put driver in down state */

 Just STA, AP and ADHOC for now */

		/* association status changed (associated/disassociated)

		 * also implies a change in the AID.

 slot timing changed */

 802.11n parameters changed */

 retrieve the current rates */

 convert to internal rate value */

 set/clear basic rate flag */

 update the rate set */

 Beacon interval changed */

 BSSID changed, for whatever reason (IBSS and managed mode) */

 BSSID changed, for whatever reason (IBSS and managed mode) */

 Beacon data changed, retrieve new beacon (beaconing modes) */

 Beaconing should be enabled/disabled (beaconing modes) */

 Connection quality monitor config changed */

 IBSS join status changed */

 Hardware ARP filter address list or state changed */

		/*

		 * QoS for this association was enabled/disabled.

		 * Note that it is only ever disabled for station mode.

	/*

	 * minstrel_ht initiates addBA on our behalf by calling

	 * ieee80211_start_tx_ba_session()

		/*

		 * BA window size from ADDBA response ('buf_size') defines how

		 * many outstanding MPDUs are allowed for the BA stream by

		 * recipient and traffic class. 'ampdu_factor' gives maximum

		 * AMPDU size.

 Power save wakeup */

 call the common second level interrupt handler */

 brcms_c_dpc() may bring the driver down */

 re-schedule dpc */

 re-enable interrupts */

 call common first level interrupt handler */

 schedule second level handler */

/*

 * is called in brcms_pci_probe() context, therefore no locking required.

 Single stream */

 Assume all bands use the same phy.  True for 11n devices. */

/*

 * is called in brcms_pci_probe() context, therefore no locking required.

 Primary rate and 1 fallback rate */

 channel change time is dependent on chip and band  */

	/*

	 * deactivate sending probe responses by ucude, because this will

	 * cause problems when WPS is used.

	 *

	 * hw->wiphy->flags |= WIPHY_FLAG_AP_PROBE_RESP_OFFLOAD;

/*

 * attach to the WL device.

 *

 * Attach to the WL device identified by vendor and device parameters.

 * regs is a host accessible memory address pointing to WL device registers.

 *

 * is called in brcms_bcma_probe() context, therefore no locking required.

 allocate private info */

 setup the bottom half handler */

 common load-time initialization */

 register our interrupt handler */

 register module */

/*

 * determines if a device is a WL device, and if so, attaches it.

 *

 * This function determines if a device pointed to by pdev is a WL device,

 * and if so, performs a brcms_attach() on it.

 *

 * Perimeter lock is initialized in the course of this function.

 only need to flag hw is down for proper resume */

/*

 * This is the main entry point for the brcmsmac driver.

 *

 * This function is scheduled upon module initialization and

 * does the driver registration, which result in brcms_bcma_probe()

 * call resulting in the driver bringup.

/*

 * This function unloads the brcmsmac driver from the system.

 *

 * This function unconditionally unloads the brcmsmac driver module from the

 * system.

 *

/*

 * precondition: perimeter lock has been acquired

/*

 * precondition: perimeter lock has been acquired

/*

 * precondition: perimeter lock has been acquired

 dpc will not be rescheduled */

 inform publicly that interface is down */

/*

 * These are interrupt on/off entry points. Disable interrupts

 * during interrupt state transition.

/*

 * precondition: perimeter lock has been acquired

/*

 * precondition: perimeter lock has been acquired

 call common down function */

 wait for down callbacks to complete */

	/* For HIGH_only driver, it's important to actually schedule other work,

	 * not just spin wait since everything runs at schedule level

/*

* precondition: perimeter lock is not acquired

/*

 * Adds a timer to the list. Caller supplies a timer function.

 * Is called from wlc.

 *

 * precondition: perimeter lock has been acquired

/*

 * adds only the kernel timer since it's going to be more accurate

 * as well as it's easier to make it periodic

 *

 * precondition: perimeter lock has been acquired

/*

 * return true if timer successfully deleted, false if still pending

 *

 * precondition: perimeter lock has been acquired

/*

 * precondition: perimeter lock has been acquired

 delete the timer in case it is active */

/*

 * precondition: no locking required

/*

 * Precondition: Since this function is called in brcms_bcma_probe() context,

 * no locking is required.

/*

 * precondition: can both be called locked and unlocked

/*

 * checks validity of all firmware images loaded from user space

 *

 * Precondition: Since this function is called in brcms_bcma_probe() context,

 * no locking is required.

 check if ucode section overruns firmware image */

/*

 * precondition: perimeter lock has been acquired

/*

 * Copyright (c) 2010 Broadcom Corporation

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 bit indicates antenna sel AUTO */

 antenna configuration mask */

 unicast tx antenna configuration */

 unicast rx antenna configuration */

 default tx antenna configuration */

 default rx antenna configuration */

 useful macros */

 antenna switch */

 defines for no boardlevel antenna diversity */

 default antenna configuration */

 2x3 antdiv defines and tables for GPIO communication */

 default antenna configuration */

 2x4 antdiv rev4 defines and tables for GPIO communication */

 default antenna configuration */

 ant0: 0 ant1: 2,3 */

 ant0: 1 ant1: 2,3 */

 n.a.              */

 n.a.              */

 pat to antselid */

 ant0: 0 ant1: 1,2 */

 n.a.              */

 ant0: 2 ant1: 1   */

 n.a.              */

 pat to antselid */

 boardlevel antenna selection: init antenna selection structure */

 no antenna selection available */

 4321/2 board with 2x3 switch logic */

 Antenna selection availability */

 hack to match old 4321CB2 cards with 2of3 antenna switch */

 Set the antenna selection type for the low driver */

 Init (auto/manual) antenna selection */

/*

 * boardlevel antenna selection:

 *   convert ant_cfg to mimo_antsel (ucode interface)

 2x4 antenna diversity board, 4 cfgs: 0-2 0-3 1-2 1-3 */

 2x3 antenna selection, 3 cfgs: 0-1 0-2 2-1 */

 boardlevel antenna selection: ucode interface control */

	/* 1) Update TX antconfig for all frames that are not unicast data

	 *    (aka default TX)

	/*

	 * Update driver stats for currently selected

	 * default tx/rx antenna config

	/* 2) Update RX antconfig for all frames that are not unicast data

	 *    (aka default RX)

	/*

	 * Update driver stats for currently selected

	 * default tx/rx antenna config

 boardlevel antenna selection: convert id to ant_cfg */

 2x4 antenna diversity board, 4 cfgs: 0-2 0-3 1-2 1-3 */

 2x3 antenna selection, 3 cfgs: 0-1 0-2 2-1 */

 if use default, assign it and return */

 boardlevel antenna selection: convert mimo_antsel (ucode interface) to id */

 2x4 antenna diversity board, 4 cfgs: 0-2 0-3 1-2 1-3 */

 2x3 antenna selection, 3 cfgs: 0-1 0-2 2-1 */

