gradle
line,location
apply plugin: 'com.diffplug.spotless'spotless {    java {        target '**/*.java',/home/luyang/Android/spotless.gradle: 6
apply plugin: 'com.diffplug.spotless'spotless {    java {        target '**/*.java'        removeUnusedImports()        trimTrailingWhitespace()        indentWithSpaces(),/home/luyang/Android/spotless.gradle: 10
apply plugin: 'com.diffplug.spotless'spotless {    java {        target '**/*.java'        removeUnusedImports()        trimTrailingWhitespace()        indentWithSpaces()    },/home/luyang/Android/spotless.gradle: 17
apply plugin: 'com.diffplug.spotless'spotless {    java {        target '**/*.java'        removeUnusedImports()        trimTrailingWhitespace()        indentWithSpaces()    }        target '**/*.xml'        indentWithSpaces()        trimTrailingWhitespace(),/home/luyang/Android/spotless.gradle: 21
// Top-level build file where you can add configuration options common to all sub-projects/modules.,/home/luyang/Android/build.gradle: 2
"// Top-level build file where you can add configuration options common to all sub-projects/modules.    ext.spotless = ""5.14.0""",/home/luyang/Android/build.gradle: 5
"// Top-level build file where you can add configuration options common to all sub-projects/modules.    ext.spotless = ""5.14.0""    ext.gradle_plugin = ""7.0.3""    ext.min_sdk = 21",/home/luyang/Android/build.gradle: 10
"// Top-level build file where you can add configuration options common to all sub-projects/modules.    ext.spotless = ""5.14.0""    ext.gradle_plugin = ""7.0.3""    ext.min_sdk = 21    }    dependencies {",/home/luyang/Android/build.gradle: 19
"// Top-level build file where you can add configuration options common to all sub-projects/modules.    ext.spotless = ""5.14.0""    ext.gradle_plugin = ""7.0.3""    ext.min_sdk = 21    }    dependencies {        classpath ""com.squareup.anvil:gradle-plugin:$anvil_version""",/home/luyang/Android/build.gradle: 23
/ in the individual module build.gradle files,/home/luyang/Android/build.gradle: 24
"// Top-level build file where you can add configuration options common to all sub-projects/modules.    ext.spotless = ""5.14.0""    ext.gradle_plugin = ""7.0.3""    ext.min_sdk = 21    }    dependencies {        classpath ""com.squareup.anvil:gradle-plugin:$anvil_version""    }",/home/luyang/Android/build.gradle: 26
"// Top-level build file where you can add configuration options common to all sub-projects/modules.    ext.spotless = ""5.14.0""    ext.gradle_plugin = ""7.0.3""    ext.min_sdk = 21    }    dependencies {        classpath ""com.squareup.anvil:gradle-plugin:$anvil_version""    }allprojects {    repositories {        google()        mavenCentral()",/home/luyang/Android/build.gradle: 32
"// Top-level build file where you can add configuration options common to all sub-projects/modules.    ext.spotless = ""5.14.0""    ext.gradle_plugin = ""7.0.3""    ext.min_sdk = 21    }    dependencies {        classpath ""com.squareup.anvil:gradle-plugin:$anvil_version""    }allprojects {    repositories {        google()        mavenCentral()    }",/home/luyang/Android/build.gradle: 36
"// Top-level build file where you can add configuration options common to all sub-projects/modules.    ext.spotless = ""5.14.0""    ext.gradle_plugin = ""7.0.3""    ext.min_sdk = 21    }    dependencies {        classpath ""com.squareup.anvil:gradle-plugin:$anvil_version""    }allprojects {    repositories {        google()        mavenCentral()    }    delete rootProject.buildDir",/home/luyang/Android/build.gradle: 40
ext {    buildVersionCode = {        def versionName = getVersionName(),/home/luyang/Android/versioning.gradle: 5
ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode(),/home/luyang/Android/versioning.gradle: 8
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }",/home/luyang/Android/versioning.gradle: 13
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {",/home/luyang/Android/versioning.gradle: 17
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {",/home/luyang/Android/versioning.gradle: 20
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }",/home/luyang/Android/versioning.gradle: 22
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()",/home/luyang/Android/versioning.gradle: 26
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()",/home/luyang/Android/versioning.gradle: 30
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }",/home/luyang/Android/versioning.gradle: 33
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""",/home/luyang/Android/versioning.gradle: 35
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()",/home/luyang/Android/versioning.gradle: 38
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))",/home/luyang/Android/versioning.gradle: 41
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }",/home/luyang/Android/versioning.gradle: 46
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {",/home/luyang/Android/versioning.gradle: 52
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }",/home/luyang/Android/versioning.gradle: 55
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }            throw new IllegalStateException(""build number file could not be found at: $filePath"")",/home/luyang/Android/versioning.gradle: 58
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }            throw new IllegalStateException(""build number file could not be found at: $filePath"")        }",/home/luyang/Android/versioning.gradle: 65
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }            throw new IllegalStateException(""build number file could not be found at: $filePath"")        }        props.load(new FileInputStream(filePath))        props[""build""] = buildNumberInt.toString()",/home/luyang/Android/versioning.gradle: 70
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }            throw new IllegalStateException(""build number file could not be found at: $filePath"")        }        props.load(new FileInputStream(filePath))        props[""build""] = buildNumberInt.toString()        props.store(os, null)",/home/luyang/Android/versioning.gradle: 72
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }            throw new IllegalStateException(""build number file could not be found at: $filePath"")        }        props.load(new FileInputStream(filePath))        props[""build""] = buildNumberInt.toString()        props.store(os, null)}tasks.register('incrementBuildNumber') {    doLast {",/home/luyang/Android/versioning.gradle: 77
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }            throw new IllegalStateException(""build number file could not be found at: $filePath"")        }        props.load(new FileInputStream(filePath))        props[""build""] = buildNumberInt.toString()        props.store(os, null)}tasks.register('incrementBuildNumber') {    doLast {        }        def props = new Properties()",/home/luyang/Android/versioning.gradle: 83
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }            throw new IllegalStateException(""build number file could not be found at: $filePath"")        }        props.load(new FileInputStream(filePath))        props[""build""] = buildNumberInt.toString()        props.store(os, null)}tasks.register('incrementBuildNumber') {    doLast {        }        def props = new Properties()        buildNumber++",/home/luyang/Android/versioning.gradle: 87
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }            throw new IllegalStateException(""build number file could not be found at: $filePath"")        }        props.load(new FileInputStream(filePath))        props[""build""] = buildNumberInt.toString()        props.store(os, null)}tasks.register('incrementBuildNumber') {    doLast {        }        def props = new Properties()        buildNumber++        }",/home/luyang/Android/versioning.gradle: 90
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }            throw new IllegalStateException(""build number file could not be found at: $filePath"")        }        props.load(new FileInputStream(filePath))        props[""build""] = buildNumberInt.toString()        props.store(os, null)}tasks.register('incrementBuildNumber') {    doLast {        }        def props = new Properties()        buildNumber++        }        def os = new FileOutputStream(filePath)",/home/luyang/Android/versioning.gradle: 92
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }            throw new IllegalStateException(""build number file could not be found at: $filePath"")        }        props.load(new FileInputStream(filePath))        props[""build""] = buildNumberInt.toString()        props.store(os, null)}tasks.register('incrementBuildNumber') {    doLast {        }        def props = new Properties()        buildNumber++        }        def os = new FileOutputStream(filePath)    }",/home/luyang/Android/versioning.gradle: 94
"ext {    buildVersionCode = {        def versionName = getVersionName()        (major * 10_000_000) + (minor * 10_000) + (patch * 1_000) + buildNumberCode()        file(""version/version.properties"").withInputStream { props.load(it) }    }    getVersionNameSuffix = {            return project[""versionNameSuffix""]        } else {        }        def suffix = getVersionNameSuffix()            return getVersionName()    }        filePath = ""${CI_HOME_DIR}/build_number.properties""        def suffix = getVersionNameSuffix()            props.load(new FileInputStream(filePath))        }}tasks.register(""setBuildNumber"") {    doLast {        if(!project.hasProperty(""number"")) {        }            throw new IllegalStateException(""build number file could not be found at: $filePath"")        }        props.load(new FileInputStream(filePath))        props[""build""] = buildNumberInt.toString()        props.store(os, null)}tasks.register('incrementBuildNumber') {    doLast {        }        def props = new Properties()        buildNumber++        }        def os = new FileOutputStream(filePath)    }tasks.register('getBuildVersionName') {    doLast {        print buildVersionName()",/home/luyang/Android/versioning.gradle: 99
"plugins {    id(""de.fayard.refreshVersions"") version ""0.23.0""",/home/luyang/Android/settings.gradle: 3
"plugins {    id(""de.fayard.refreshVersions"") version ""0.23.0""include ':vpn-main'include ':vpn-api'",/home/luyang/Android/settings.gradle: 9
"plugins {    id(""de.fayard.refreshVersions"") version ""0.23.0""include ':vpn-main'include ':vpn-api'include ':di'include ':app'",/home/luyang/Android/settings.gradle: 12
"plugins {    id(""de.fayard.refreshVersions"") version ""0.23.0""include ':vpn-main'include ':vpn-api'include ':di'include ':app'include ':common'include ':common-ui'include ':app-store'include ':feature-toggles-api'",/home/luyang/Android/settings.gradle: 18
"plugins {    id(""de.fayard.refreshVersions"") version ""0.23.0""include ':vpn-main'include ':vpn-api'include ':di'include ':app'include ':common'include ':common-ui'include ':app-store'include ':feature-toggles-api'include ':privacy-config-api'include ':privacy-config-impl'",/home/luyang/Android/settings.gradle: 22
"plugins {    id(""de.fayard.refreshVersions"") version ""0.23.0""include ':vpn-main'include ':vpn-api'include ':di'include ':app'include ':common'include ':common-ui'include ':app-store'include ':feature-toggles-api'include ':privacy-config-api'include ':privacy-config-impl'project(':privacy-config-api').projectDir = new File('privacy-config/privacy-config-api')",/home/luyang/Android/settings.gradle: 29
"plugins {    id(""de.fayard.refreshVersions"") version ""0.23.0""include ':vpn-main'include ':vpn-api'include ':di'include ':app'include ':common'include ':common-ui'include ':app-store'include ':feature-toggles-api'include ':privacy-config-api'include ':privacy-config-impl'project(':privacy-config-api').projectDir = new File('privacy-config/privacy-config-api')project(':privacy-config-store').projectDir = new File('privacy-config/privacy-config-store')",/home/luyang/Android/settings.gradle: 32
"plugins {    id(""de.fayard.refreshVersions"") version ""0.23.0""include ':vpn-main'include ':vpn-api'include ':di'include ':app'include ':common'include ':common-ui'include ':app-store'include ':feature-toggles-api'include ':privacy-config-api'include ':privacy-config-impl'project(':privacy-config-api').projectDir = new File('privacy-config/privacy-config-api')project(':privacy-config-store').projectDir = new File('privacy-config/privacy-config-store')    if (subproject.name == ""vpn"") {        subproject.buildFileName = ""${subproject.name}-build.gradle""",/home/luyang/Android/settings.gradle: 36
"plugins {    id(""de.fayard.refreshVersions"") version ""0.23.0""include ':vpn-main'include ':vpn-api'include ':di'include ':app'include ':common'include ':common-ui'include ':app-store'include ':feature-toggles-api'include ':privacy-config-api'include ':privacy-config-impl'project(':privacy-config-api').projectDir = new File('privacy-config/privacy-config-api')project(':privacy-config-store').projectDir = new File('privacy-config/privacy-config-store')    if (subproject.name == ""vpn"") {        subproject.buildFileName = ""${subproject.name}-build.gradle""}buildCache {",/home/luyang/Android/settings.gradle: 41
"plugins {    id(""de.fayard.refreshVersions"") version ""0.23.0""include ':vpn-main'include ':vpn-api'include ':di'include ':app'include ':common'include ':common-ui'include ':app-store'include ':feature-toggles-api'include ':privacy-config-api'include ':privacy-config-impl'project(':privacy-config-api').projectDir = new File('privacy-config/privacy-config-api')project(':privacy-config-store').projectDir = new File('privacy-config/privacy-config-store')    if (subproject.name == ""vpn"") {        subproject.buildFileName = ""${subproject.name}-build.gradle""}buildCache {        // configure local build cache directory so that it is local to the project dir        enabled = true        directory = new File(rootDir, 'build-cache')        removeUnusedEntriesAfterDays = 7",/home/luyang/Android/settings.gradle: 46
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/common/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/common/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/common/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'",/home/luyang/Android/common/build.gradle: 21
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'}",/home/luyang/Android/common/build.gradle: 24
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'}    implementation project(path: ':di')",/home/luyang/Android/common/build.gradle: 29
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'}    implementation project(path: ':di')    implementation KotlinX.coroutines.android",/home/luyang/Android/common/build.gradle: 33
/ Android KTX,/home/luyang/Android/common/build.gradle: 36
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'}    implementation project(path: ':di')    implementation KotlinX.coroutines.android    implementation JakeWharton.timber    implementation Square.okHttp3.okHttp",/home/luyang/Android/common/build.gradle: 45
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'}    implementation project(path: ':di')    implementation KotlinX.coroutines.android    implementation JakeWharton.timber    implementation Square.okHttp3.okHttp    kapt AndroidX.room.compiler",/home/luyang/Android/common/build.gradle: 49
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/statistics/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/statistics/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/statistics/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'",/home/luyang/Android/statistics/build.gradle: 20
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}",/home/luyang/Android/statistics/build.gradle: 23
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')",/home/luyang/Android/statistics/build.gradle: 27
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')    implementation Kotlin.stdlib.jdk7    implementation KotlinX.coroutines.core",/home/luyang/Android/statistics/build.gradle: 31
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')    implementation Kotlin.stdlib.jdk7    implementation KotlinX.coroutines.core    implementation ""io.reactivex.rxjava2:rxandroid:_""    implementation Square.retrofit2.retrofit",/home/luyang/Android/statistics/build.gradle: 37
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')    implementation Kotlin.stdlib.jdk7    implementation KotlinX.coroutines.core    implementation ""io.reactivex.rxjava2:rxandroid:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2",/home/luyang/Android/statistics/build.gradle: 39
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')    implementation Kotlin.stdlib.jdk7    implementation KotlinX.coroutines.core    implementation ""io.reactivex.rxjava2:rxandroid:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    // Room    implementation AndroidX.room.runtime    // WorkManager",/home/luyang/Android/statistics/build.gradle: 47
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')    implementation Kotlin.stdlib.jdk7    implementation KotlinX.coroutines.core    implementation ""io.reactivex.rxjava2:rxandroid:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    // Room    implementation AndroidX.room.runtime    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2",/home/luyang/Android/statistics/build.gradle: 51
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')    implementation Kotlin.stdlib.jdk7    implementation KotlinX.coroutines.core    implementation ""io.reactivex.rxjava2:rxandroid:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    // Room    implementation AndroidX.room.runtime    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    // Apache commons",/home/luyang/Android/statistics/build.gradle: 56
/ Play Store referrer library,/home/luyang/Android/statistics/build.gradle: 58
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')    implementation Kotlin.stdlib.jdk7    implementation KotlinX.coroutines.core    implementation ""io.reactivex.rxjava2:rxandroid:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    // Room    implementation AndroidX.room.runtime    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    // Apache commons    implementation(""com.android.installreferrer:installreferrer:_"")",/home/luyang/Android/statistics/build.gradle: 61
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')    implementation Kotlin.stdlib.jdk7    implementation KotlinX.coroutines.core    implementation ""io.reactivex.rxjava2:rxandroid:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    // Room    implementation AndroidX.room.runtime    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    // Apache commons    implementation(""com.android.installreferrer:installreferrer:_"")    androidTestImplementation AndroidX.test.rules",/home/luyang/Android/statistics/build.gradle: 64
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/vpn-internal/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/vpn-internal/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/vpn-internal/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'",/home/luyang/Android/vpn-internal/build.gradle: 20
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}",/home/luyang/Android/vpn-internal/build.gradle: 23
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {",/home/luyang/Android/vpn-internal/build.gradle: 26
/ default is false,/home/luyang/Android/vpn-internal/build.gradle: 27
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }",/home/luyang/Android/vpn-internal/build.gradle: 29
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }    implementation project(path: ':di')",/home/luyang/Android/vpn-internal/build.gradle: 35
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }    implementation project(path: ':di')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx",/home/luyang/Android/vpn-internal/build.gradle: 42
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }    implementation project(path: ':di')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8",/home/luyang/Android/vpn-internal/build.gradle: 49
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }    implementation project(path: ':di')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation Kotlin.stdlib.jdk7    implementation AndroidX.constraintLayout",/home/luyang/Android/vpn-internal/build.gradle: 53
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }    implementation project(path: ':di')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation Kotlin.stdlib.jdk7    implementation AndroidX.constraintLayout    // Dagger    implementation Google.dagger    implementation KotlinX.coroutines.core",/home/luyang/Android/vpn-internal/build.gradle: 60
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }    implementation project(path: ':di')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation Kotlin.stdlib.jdk7    implementation AndroidX.constraintLayout    // Dagger    implementation Google.dagger    implementation KotlinX.coroutines.core    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx",/home/luyang/Android/vpn-internal/build.gradle: 66
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/vpn-api/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/vpn-api/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/vpn-api/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'",/home/luyang/Android/vpn-api/build.gradle: 20
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {",/home/luyang/Android/vpn-api/build.gradle: 25
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/vpn/vpn-build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/vpn/vpn-build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/vpn/vpn-build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'",/home/luyang/Android/vpn/vpn-build.gradle: 20
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}",/home/luyang/Android/vpn/vpn-build.gradle: 24
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {",/home/luyang/Android/vpn/vpn-build.gradle: 27
/ default is false,/home/luyang/Android/vpn/vpn-build.gradle: 28
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }",/home/luyang/Android/vpn/vpn-build.gradle: 30
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""",/home/luyang/Android/vpn/vpn-build.gradle: 34
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')",/home/luyang/Android/vpn/vpn-build.gradle: 40
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')",/home/luyang/Android/vpn/vpn-build.gradle: 43
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx",/home/luyang/Android/vpn/vpn-build.gradle: 49
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8",/home/luyang/Android/vpn/vpn-build.gradle: 56
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto",/home/luyang/Android/vpn/vpn-build.gradle: 61
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer",/home/luyang/Android/vpn/vpn-build.gradle: 67
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger",/home/luyang/Android/vpn/vpn-build.gradle: 70
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {",/home/luyang/Android/vpn/vpn-build.gradle: 75
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""",/home/luyang/Android/vpn/vpn-build.gradle: 78
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023",/home/luyang/Android/vpn/vpn-build.gradle: 82
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation ""com.jakewharton.threetenabp:threetenabp:_""    testImplementation ""org.threeten:threetenbp:_""",/home/luyang/Android/vpn/vpn-build.gradle: 89
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation ""com.jakewharton.threetenabp:threetenabp:_""    testImplementation ""org.threeten:threetenbp:_""    implementation 'nl.dionsegijn:konfetti:1.2.5'",/home/luyang/Android/vpn/vpn-build.gradle: 93
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation ""com.jakewharton.threetenabp:threetenabp:_""    testImplementation ""org.threeten:threetenbp:_""    implementation 'nl.dionsegijn:konfetti:1.2.5'    androidTestImplementation AndroidX.room.testing    // WorkManager",/home/luyang/Android/vpn/vpn-build.gradle: 101
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation ""com.jakewharton.threetenabp:threetenabp:_""    testImplementation ""org.threeten:threetenbp:_""    implementation 'nl.dionsegijn:konfetti:1.2.5'    androidTestImplementation AndroidX.room.testing    // WorkManager    implementation ""androidx.work:work-multiprocess:$workManager""    testImplementation AndroidX.work.testing",/home/luyang/Android/vpn/vpn-build.gradle: 104
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation ""com.jakewharton.threetenabp:threetenabp:_""    testImplementation ""org.threeten:threetenbp:_""    implementation 'nl.dionsegijn:konfetti:1.2.5'    androidTestImplementation AndroidX.room.testing    // WorkManager    implementation ""androidx.work:work-multiprocess:$workManager""    testImplementation AndroidX.work.testing    implementation Square.retrofit2.converter.moshi    implementation Square.okHttp3.okHttp    implementation ""com.github.bumptech.glide:glide:_""",/home/luyang/Android/vpn/vpn-build.gradle: 112
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation ""com.jakewharton.threetenabp:threetenabp:_""    testImplementation ""org.threeten:threetenbp:_""    implementation 'nl.dionsegijn:konfetti:1.2.5'    androidTestImplementation AndroidX.room.testing    // WorkManager    implementation ""androidx.work:work-multiprocess:$workManager""    testImplementation AndroidX.work.testing    implementation Square.retrofit2.converter.moshi    implementation Square.okHttp3.okHttp    implementation ""com.github.bumptech.glide:glide:_""    testImplementation Testing.mockito.kotlin",/home/luyang/Android/vpn/vpn-build.gradle: 114
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation ""com.jakewharton.threetenabp:threetenabp:_""    testImplementation ""org.threeten:threetenbp:_""    implementation 'nl.dionsegijn:konfetti:1.2.5'    androidTestImplementation AndroidX.room.testing    // WorkManager    implementation ""androidx.work:work-multiprocess:$workManager""    testImplementation AndroidX.work.testing    implementation Square.retrofit2.converter.moshi    implementation Square.okHttp3.okHttp    implementation ""com.github.bumptech.glide:glide:_""    testImplementation Testing.mockito.kotlin    testImplementation Testing.junit4    testImplementation AndroidX.test.ext.junit    testImplementation AndroidX.archCore.testing",/home/luyang/Android/vpn/vpn-build.gradle: 118
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation ""com.jakewharton.threetenabp:threetenabp:_""    testImplementation ""org.threeten:threetenbp:_""    implementation 'nl.dionsegijn:konfetti:1.2.5'    androidTestImplementation AndroidX.room.testing    // WorkManager    implementation ""androidx.work:work-multiprocess:$workManager""    testImplementation AndroidX.work.testing    implementation Square.retrofit2.converter.moshi    implementation Square.okHttp3.okHttp    implementation ""com.github.bumptech.glide:glide:_""    testImplementation Testing.mockito.kotlin    testImplementation Testing.junit4    testImplementation AndroidX.test.ext.junit    testImplementation AndroidX.archCore.testing    androidTestImplementation AndroidX.archCore.testing    androidTestImplementation 'app.cash.turbine:turbine:_'    androidTestImplementation AndroidX.test.runner",/home/luyang/Android/vpn/vpn-build.gradle: 125
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}android {    }ext {    workManager = ""2.5.0-beta01""    api project(path: ':vpn-api')    implementation project(path: ':app-store')    implementation project(path: ':common')    implementation project(path: ':common-ui')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    implementation AndroidX.lifecycle.commonJava8    implementation ""androidx.viewpager2:viewpager2:_""    // Security crypto    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Shimmer    // Dagger    androidTestImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation ""com.jakewharton.threetenabp:threetenabp:_""    testImplementation ""org.threeten:threetenbp:_""    implementation 'nl.dionsegijn:konfetti:1.2.5'    androidTestImplementation AndroidX.room.testing    // WorkManager    implementation ""androidx.work:work-multiprocess:$workManager""    testImplementation AndroidX.work.testing    implementation Square.retrofit2.converter.moshi    implementation Square.okHttp3.okHttp    implementation ""com.github.bumptech.glide:glide:_""    testImplementation Testing.mockito.kotlin    testImplementation Testing.junit4    testImplementation AndroidX.test.ext.junit    testImplementation AndroidX.archCore.testing    androidTestImplementation AndroidX.archCore.testing    androidTestImplementation 'app.cash.turbine:turbine:_'    androidTestImplementation AndroidX.test.runner    androidTestImplementation Testing.mockito.android    androidTestImplementation Testing.mockito.kotlin    testImplementation project(path: ':common-test')",/home/luyang/Android/vpn/vpn-build.gradle: 131
plugins {    id 'com.android.library',/home/luyang/Android/common-test/build.gradle: 3
plugins {    id 'com.android.library'},/home/luyang/Android/common-test/build.gradle: 6
plugins {    id 'com.android.library'}    // Dependencies for this Module,/home/luyang/Android/common-test/build.gradle: 11
plugins {    id 'com.android.library'}    // Dependencies for this Module        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023,/home/luyang/Android/common-test/build.gradle: 16
plugins {    id 'com.android.library'}    // Dependencies for this Module        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    },/home/luyang/Android/common-test/build.gradle: 19
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/app-store/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/app-store/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/app-store/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'",/home/luyang/Android/app-store/build.gradle: 20
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {",/home/luyang/Android/app-store/build.gradle: 26
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation KotlinX.coroutines.android    implementation AndroidX.room.runtime    implementation ""com.jakewharton.threetenabp:threetenabp:_""",/home/luyang/Android/app-store/build.gradle: 33
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/vpn-main/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/vpn-main/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/vpn-main/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'",/home/luyang/Android/vpn-main/build.gradle: 21
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'}",/home/luyang/Android/vpn-main/build.gradle: 24
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'}    api project(path: ':vpn')",/home/luyang/Android/vpn-main/build.gradle: 28
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'}    api project(path: ':vpn')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx",/home/luyang/Android/vpn-main/build.gradle: 32
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'}    api project(path: ':vpn')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    // Dagger    implementation Google.dagger",/home/luyang/Android/vpn-main/build.gradle: 37
/ the problem is not with refreshVersions but with the dagger version. AndroidX.room.compiler uses 2.32,/home/luyang/Android/vpn-main/build.gradle: 38
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'}    api project(path: ':vpn')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    // Dagger    implementation Google.dagger    // I don't understand yet what happens tho so I will leave it as is for now",/home/luyang/Android/vpn-main/build.gradle: 40
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'}    api project(path: ':vpn')    implementation Kotlin.stdlib.jdk7    implementation AndroidX.core.ktx    // Dagger    implementation Google.dagger    // I don't understand yet what happens tho so I will leave it as is for now    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx",/home/luyang/Android/vpn-main/build.gradle: 47
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/vpn-store/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/vpn-store/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/vpn-store/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'",/home/luyang/Android/vpn-store/build.gradle: 21
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {",/home/luyang/Android/vpn-store/build.gradle: 27
"/    compileOnly ""com.google.dagger:dagger:$dagger""",/home/luyang/Android/vpn-store/build.gradle: 33
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation JakeWharton.timber",/home/luyang/Android/vpn-store/build.gradle: 37
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation JakeWharton.timber    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx",/home/luyang/Android/vpn-store/build.gradle: 43
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation JakeWharton.timber    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    testImplementation ""junit:junit:_""    androidTestImplementation AndroidX.test.runner",/home/luyang/Android/vpn-store/build.gradle: 49
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation JakeWharton.timber    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    testImplementation ""junit:junit:_""    androidTestImplementation AndroidX.test.runner    androidTestImplementation Testing.mockito.android    androidTestImplementation Testing.mockito.kotlin",/home/luyang/Android/vpn-store/build.gradle: 53
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/common-ui/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/common-ui/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/common-ui/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'",/home/luyang/Android/common-ui/build.gradle: 20
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}",/home/luyang/Android/common-ui/build.gradle: 23
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')",/home/luyang/Android/common-ui/build.gradle: 28
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')    implementation Kotlin.stdlib.jdk7",/home/luyang/Android/common-ui/build.gradle: 32
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')    implementation Kotlin.stdlib.jdk7    // just to get the dagger annotations    implementation Google.dagger",/home/luyang/Android/common-ui/build.gradle: 39
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':common')    implementation Kotlin.stdlib.jdk7    // just to get the dagger annotations    implementation Google.dagger    implementation ""androidx.localbroadcastmanager:localbroadcastmanager:_""",/home/luyang/Android/common-ui/build.gradle: 41
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/gradle/android-library.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/gradle/android-library.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */apply from: ""$rootDir/spotless.gradle""",/home/luyang/Android/gradle/android-library.gradle: 19
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */apply from: ""$rootDir/spotless.gradle""    compileSdkVersion compile_sdk",/home/luyang/Android/gradle/android-library.gradle: 22
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */apply from: ""$rootDir/spotless.gradle""    compileSdkVersion compile_sdk        versionCode 1",/home/luyang/Android/gradle/android-library.gradle: 26
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */apply from: ""$rootDir/spotless.gradle""    compileSdkVersion compile_sdk        versionCode 1        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        consumerProguardFiles ""consumer-rules.pro""        vectorDrawables.useSupportLibrary = true",/home/luyang/Android/gradle/android-library.gradle: 31
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */apply from: ""$rootDir/spotless.gradle""    compileSdkVersion compile_sdk        versionCode 1        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        consumerProguardFiles ""consumer-rules.pro""        vectorDrawables.useSupportLibrary = true        release {",/home/luyang/Android/gradle/android-library.gradle: 35
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */apply from: ""$rootDir/spotless.gradle""    compileSdkVersion compile_sdk        versionCode 1        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        consumerProguardFiles ""consumer-rules.pro""        vectorDrawables.useSupportLibrary = true        release {            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'",/home/luyang/Android/gradle/android-library.gradle: 37
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */apply from: ""$rootDir/spotless.gradle""    compileSdkVersion compile_sdk        versionCode 1        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        consumerProguardFiles ""consumer-rules.pro""        vectorDrawables.useSupportLibrary = true        release {            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'    }    compileOptions {",/home/luyang/Android/gradle/android-library.gradle: 40
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */apply from: ""$rootDir/spotless.gradle""    compileSdkVersion compile_sdk        versionCode 1        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        consumerProguardFiles ""consumer-rules.pro""        vectorDrawables.useSupportLibrary = true        release {            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'    }    compileOptions {        targetCompatibility JavaVersion.VERSION_1_8",/home/luyang/Android/gradle/android-library.gradle: 42
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */apply from: ""$rootDir/spotless.gradle""    compileSdkVersion compile_sdk        versionCode 1        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        consumerProguardFiles ""consumer-rules.pro""        vectorDrawables.useSupportLibrary = true        release {            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'    }    compileOptions {        targetCompatibility JavaVersion.VERSION_1_8    buildFeatures {        viewBinding = true",/home/luyang/Android/gradle/android-library.gradle: 45
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */apply from: ""$rootDir/spotless.gradle""    compileSdkVersion compile_sdk        versionCode 1        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        consumerProguardFiles ""consumer-rules.pro""        vectorDrawables.useSupportLibrary = true        release {            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'    }    compileOptions {        targetCompatibility JavaVersion.VERSION_1_8    buildFeatures {        viewBinding = true}tasks.register('checks') {",/home/luyang/Android/gradle/android-library.gradle: 49
apply plugin: 'com.android.application'apply plugin: 'kotlin-android',/home/luyang/Android/app/build.gradle: 4
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'",/home/luyang/Android/app/build.gradle: 11
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false",/home/luyang/Android/app/build.gradle: 13
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}",/home/luyang/Android/app/build.gradle: 16
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk",/home/luyang/Android/app/build.gradle: 18
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {",/home/luyang/Android/app/build.gradle: 20
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {",/home/luyang/Android/app/build.gradle: 31
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }",/home/luyang/Android/app/build.gradle: 33
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())",/home/luyang/Android/app/build.gradle: 36
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {",/home/luyang/Android/app/build.gradle: 40
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }",/home/luyang/Android/app/build.gradle: 42
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }",/home/luyang/Android/app/build.gradle: 44
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }",/home/luyang/Android/app/build.gradle: 46
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {",/home/luyang/Android/app/build.gradle: 50
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8",/home/luyang/Android/app/build.gradle: 52
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release",/home/luyang/Android/app/build.gradle: 55
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [",/home/luyang/Android/app/build.gradle: 61
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]",/home/luyang/Android/app/build.gradle: 64
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {",/home/luyang/Android/app/build.gradle: 66
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""",/home/luyang/Android/app/build.gradle: 72
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }",/home/luyang/Android/app/build.gradle: 74
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""",/home/luyang/Android/app/build.gradle: 79
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""",/home/luyang/Android/app/build.gradle: 82
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""",/home/luyang/Android/app/build.gradle: 85
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->",/home/luyang/Android/app/build.gradle: 88
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type",/home/luyang/Android/app/build.gradle: 91
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }",/home/luyang/Android/app/build.gradle: 93
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {",/home/luyang/Android/app/build.gradle: 96
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""",/home/luyang/Android/app/build.gradle: 98
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }",/home/luyang/Android/app/build.gradle: 100
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")",/home/luyang/Android/app/build.gradle: 103
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true",/home/luyang/Android/app/build.gradle: 106
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {",/home/luyang/Android/app/build.gradle: 108
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }",/home/luyang/Android/app/build.gradle: 110
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()",/home/luyang/Android/app/build.gradle: 116
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""",/home/luyang/Android/app/build.gradle: 123
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }",/home/luyang/Android/app/build.gradle: 125
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')",/home/luyang/Android/app/build.gradle: 129
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')",/home/luyang/Android/app/build.gradle: 133
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')",/home/luyang/Android/app/build.gradle: 138
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4",/home/luyang/Android/app/build.gradle: 143
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {",/home/luyang/Android/app/build.gradle: 150
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""",/home/luyang/Android/app/build.gradle: 153
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit",/home/luyang/Android/app/build.gradle: 164
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2",/home/luyang/Android/app/build.gradle: 166
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""",/home/luyang/Android/app/build.gradle: 169
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay",/home/luyang/Android/app/build.gradle: 176
/ Android KTX,/home/luyang/Android/app/build.gradle: 178
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx",/home/luyang/Android/app/build.gradle: 182
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx",/home/luyang/Android/app/build.gradle: 186
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing",/home/luyang/Android/app/build.gradle: 190
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx",/home/luyang/Android/app/build.gradle: 196
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager",/home/luyang/Android/app/build.gradle: 201
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2",/home/luyang/Android/app/build.gradle: 206
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""",/home/luyang/Android/app/build.gradle: 213
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto",/home/luyang/Android/app/build.gradle: 219
/ Play Store referrer library,/home/luyang/Android/app/build.gradle: 221
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")",/home/luyang/Android/app/build.gradle: 224
/ Flipper,/home/luyang/Android/app/build.gradle: 228
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")    internalImplementation ""com.facebook.flipper:flipper:_""",/home/luyang/Android/app/build.gradle: 230
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")    internalImplementation ""com.facebook.flipper:flipper:_""    // Testing dependencies    androidTestUtil AndroidX.test.orchestrator",/home/luyang/Android/app/build.gradle: 234
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")    internalImplementation ""com.facebook.flipper:flipper:_""    // Testing dependencies    androidTestUtil AndroidX.test.orchestrator    androidTestImplementation AndroidX.test.rules",/home/luyang/Android/app/build.gradle: 237
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")    internalImplementation ""com.facebook.flipper:flipper:_""    // Testing dependencies    androidTestUtil AndroidX.test.orchestrator    androidTestImplementation AndroidX.test.rules    androidTestImplementation CashApp.turbine    androidTestImplementation AndroidX.test.orchestrator",/home/luyang/Android/app/build.gradle: 242
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")    internalImplementation ""com.facebook.flipper:flipper:_""    // Testing dependencies    androidTestUtil AndroidX.test.orchestrator    androidTestImplementation AndroidX.test.rules    androidTestImplementation CashApp.turbine    androidTestImplementation AndroidX.test.orchestrator    androidTestImplementation ""androidx.test.ext:junit-ktx:_""    androidTestImplementation ""androidx.test.espresso:espresso-core:_""",/home/luyang/Android/app/build.gradle: 245
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")    internalImplementation ""com.facebook.flipper:flipper:_""    // Testing dependencies    androidTestUtil AndroidX.test.orchestrator    androidTestImplementation AndroidX.test.rules    androidTestImplementation CashApp.turbine    androidTestImplementation AndroidX.test.orchestrator    androidTestImplementation ""androidx.test.ext:junit-ktx:_""    androidTestImplementation ""androidx.test.espresso:espresso-core:_""    testImplementation Testing.mockito.kotlin",/home/luyang/Android/app/build.gradle: 248
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")    internalImplementation ""com.facebook.flipper:flipper:_""    // Testing dependencies    androidTestUtil AndroidX.test.orchestrator    androidTestImplementation AndroidX.test.rules    androidTestImplementation CashApp.turbine    androidTestImplementation AndroidX.test.orchestrator    androidTestImplementation ""androidx.test.ext:junit-ktx:_""    androidTestImplementation ""androidx.test.espresso:espresso-core:_""    testImplementation Testing.mockito.kotlin    testImplementation ""androidx.test:runner:_""    testImplementation (KotlinX.coroutines.test) {",/home/luyang/Android/app/build.gradle: 256
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")    internalImplementation ""com.facebook.flipper:flipper:_""    // Testing dependencies    androidTestUtil AndroidX.test.orchestrator    androidTestImplementation AndroidX.test.rules    androidTestImplementation CashApp.turbine    androidTestImplementation AndroidX.test.orchestrator    androidTestImplementation ""androidx.test.ext:junit-ktx:_""    androidTestImplementation ""androidx.test.espresso:espresso-core:_""    testImplementation Testing.mockito.kotlin    testImplementation ""androidx.test:runner:_""    testImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""",/home/luyang/Android/app/build.gradle: 259
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")    internalImplementation ""com.facebook.flipper:flipper:_""    // Testing dependencies    androidTestUtil AndroidX.test.orchestrator    androidTestImplementation AndroidX.test.rules    androidTestImplementation CashApp.turbine    androidTestImplementation AndroidX.test.orchestrator    androidTestImplementation ""androidx.test.ext:junit-ktx:_""    androidTestImplementation ""androidx.test.espresso:espresso-core:_""    testImplementation Testing.mockito.kotlin    testImplementation ""androidx.test:runner:_""    testImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    androidTestImplementation project(path: ':common-test')    testImplementation project(path: ':common-test')",/home/luyang/Android/app/build.gradle: 263
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")    internalImplementation ""com.facebook.flipper:flipper:_""    // Testing dependencies    androidTestUtil AndroidX.test.orchestrator    androidTestImplementation AndroidX.test.rules    androidTestImplementation CashApp.turbine    androidTestImplementation AndroidX.test.orchestrator    androidTestImplementation ""androidx.test.ext:junit-ktx:_""    androidTestImplementation ""androidx.test.espresso:espresso-core:_""    testImplementation Testing.mockito.kotlin    testImplementation ""androidx.test:runner:_""    testImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    androidTestImplementation project(path: ':common-test')    testImplementation project(path: ':common-test')tasks.register('fastlaneVersionCode') {    doLast {        print buildVersionCode()",/home/luyang/Android/app/build.gradle: 268
"apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'apply plugin: 'com.squareup.anvil'apply from: '../versioning.gradle'apply from: ""$rootDir/spotless.gradle""apply plugin: 'com.duckduckgo.buildtime'    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false}    compileSdkVersion compile_sdk    defaultConfig {        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""        archivesBaseName = ""duckduckgo-$versionName""        vectorDrawables.useSupportLibrary = true        javaCompileOptions {            annotationProcessorOptions {            }            androidTest.assets.srcDirs += files(""$projectDir/schemas"".toString())                    resources {                    }            }    }    }    compileOptions {        targetCompatibility = JavaVersion.VERSION_1_8        release        debug {            applicationIdSuffix "".debug""            pseudoLocalesEnabled false            manifestPlaceholders = [            ]        release {                    appIconRound: ""@mipmap/ic_launcher_red_round""        }            dimension ""store""            dimension ""store""            dimension ""store""    }    variantFilter { variant ->            // We don't need fdroidDebug build type        }    externalNativeBuild {            path ""CMakeLists.txt""    }        abortOnError true        baseline file(""lint-baseline.xml"")    testOptions {        unitTests.returnDefaultValues = true        if (USE_ORCHESTRATOR) {        }    def propertiesFile = new File(propertiesPath)    if (propertiesFile.exists()) {        def props = new Properties()        android.signingConfigs.release.storeFile = file(""${CI_HOME_DIR}/${props['key.store']}"")        android.signingConfigs.release.storePassword = props['key.store.password']        android.signingConfigs.release.keyAlias = props['key.alias']        android.signingConfigs.release.keyPassword = props['key.alias.password']    } else {        println ""Signing properties not found at ${propertiesPath}, releases will NOT succeed""    }    implementation project(path: ':statistics')    implementation project(path: ':di')    internalImplementation project(path: ':vpn-internal')    implementation project(path: ':feature-toggles-api')    implementation project(path: ':privacy-config-api')    implementation project(path: ':privacy-config-impl')    implementation AndroidX.legacy.supportV4    implementation KotlinX.coroutines.android    androidTestImplementation(KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout    implementation AndroidX.recyclerView    implementation AndroidX.swipeRefreshLayout    implementation AndroidX.webkit    implementation Square.okHttp3.okHttp    implementation ""com.squareup.okhttp3:okhttp-tls:_""    implementation Square.retrofit2.retrofit    implementation Square.retrofit2.adapter.rxJava2    implementation ""com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:_""    implementation ""io.reactivex.rxjava2:rxjava:_""    implementation JakeWharton.timber    // ThreeTenABP    implementation ""com.jakewharton.threetenabp:threetenabp:_""    // RxRelay    implementation AndroidX.fragmentKtx    implementation AndroidX.lifecycle.liveDataKtx    implementation AndroidX.lifecycle.commonJava8    testImplementation AndroidX.archCore.testing    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    androidTestImplementation AndroidX.room.testing    // WorkManager    androidTestImplementation AndroidX.work.testing    implementation AndroidX.work.rxJava2    kapt Google.dagger.compiler    implementation Google.dagger    // Glide    implementation ""com.github.bumptech.glide:glide:_""    implementation ""com.github.bumptech.glide:okhttp3-integration:_""    // Lottie    implementation ""com.airbnb.android:lottie:_""    // Security crypto    playImplementation(""com.android.installreferrer:installreferrer:_"")    internalImplementation ""com.facebook.flipper:flipper:_""    // Testing dependencies    androidTestUtil AndroidX.test.orchestrator    androidTestImplementation AndroidX.test.rules    androidTestImplementation CashApp.turbine    androidTestImplementation AndroidX.test.orchestrator    androidTestImplementation ""androidx.test.ext:junit-ktx:_""    androidTestImplementation ""androidx.test.espresso:espresso-core:_""    testImplementation Testing.mockito.kotlin    testImplementation ""androidx.test:runner:_""    testImplementation (KotlinX.coroutines.test) {        // conflicts with mockito due to direct inclusion of byte buddy        exclude group: ""org.jetbrains.kotlinx"", module: ""kotlinx-coroutines-debug""    androidTestImplementation project(path: ':common-test')    testImplementation project(path: ':common-test')tasks.register('fastlaneVersionCode') {    doLast {        print buildVersionCode()}tasks.register('checks') {",/home/luyang/Android/app/build.gradle: 272
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/di/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/di/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/di/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'",/home/luyang/Android/di/build.gradle: 20
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {",/home/luyang/Android/di/build.gradle: 25
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation AndroidX.fragmentKtx    implementation Google.dagger",/home/luyang/Android/di/build.gradle: 28
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/feature-toggles/feature-toggles-api/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/feature-toggles/feature-toggles-api/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/feature-toggles/feature-toggles-api/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'java-library'",/home/luyang/Android/feature-toggles/feature-toggles-api/build.gradle: 19
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'java-library'}",/home/luyang/Android/feature-toggles/feature-toggles-api/build.gradle: 22
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'java-library'}    sourceCompatibility = JavaVersion.VERSION_1_8",/home/luyang/Android/feature-toggles/feature-toggles-api/build.gradle: 26
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'java-library'}    sourceCompatibility = JavaVersion.VERSION_1_8}dependencies {    implementation Google.dagger",/home/luyang/Android/feature-toggles/feature-toggles-api/build.gradle: 31
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'java-library'}    sourceCompatibility = JavaVersion.VERSION_1_8}dependencies {    implementation Google.dagger}tasks.register('checks') {",/home/luyang/Android/feature-toggles/feature-toggles-api/build.gradle: 35
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'",/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 20
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}",/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 23
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')",/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 28
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation Kotlin.stdlib.jdk7",/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 32
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation Kotlin.stdlib.jdk7    implementation JakeWharton.timber    implementation Google.dagger    implementation AndroidX.core.ktx",/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 39
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation Kotlin.stdlib.jdk7    implementation JakeWharton.timber    implementation Google.dagger    implementation AndroidX.core.ktx    testImplementation Testing.junit4",/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 42
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation Kotlin.stdlib.jdk7    implementation JakeWharton.timber    implementation Google.dagger    implementation AndroidX.core.ktx    testImplementation Testing.junit4anvil {    generateDaggerFactories = true // default is false",/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 46
/tasks.register('checks') {,/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 48
"/    dependsOn 'spotlessCheck', 'testDebugUnitTest'",/home/luyang/Android/feature-toggles/feature-toggles-impl/build.gradle: 49
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/privacy-config/privacy-config-api/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/privacy-config/privacy-config-api/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/privacy-config/privacy-config-api/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'java-library'",/home/luyang/Android/privacy-config/privacy-config-api/build.gradle: 19
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'java-library'}",/home/luyang/Android/privacy-config/privacy-config-api/build.gradle: 22
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'java-library'}    sourceCompatibility = JavaVersion.VERSION_1_8",/home/luyang/Android/privacy-config/privacy-config-api/build.gradle: 26
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'java-library'}    sourceCompatibility = JavaVersion.VERSION_1_8}dependencies {",/home/luyang/Android/privacy-config/privacy-config-api/build.gradle: 31
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'java-library'}    sourceCompatibility = JavaVersion.VERSION_1_8}dependencies {    implementation Kotlin.stdlib.jdk7",/home/luyang/Android/privacy-config/privacy-config-api/build.gradle: 35
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'java-library'}    sourceCompatibility = JavaVersion.VERSION_1_8}dependencies {    implementation Kotlin.stdlib.jdk7    dependsOn 'spotlessCheck'",/home/luyang/Android/privacy-config/privacy-config-api/build.gradle: 39
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 20
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 24
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 28
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation project(path: ':privacy-config-api')    api project(path: ':privacy-config-store')",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 33
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation project(path: ':privacy-config-api')    api project(path: ':privacy-config-store')    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 37
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation project(path: ':privacy-config-api')    api project(path: ':privacy-config-store')    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 43
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation project(path: ':privacy-config-api')    api project(path: ':privacy-config-store')    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 47
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation project(path: ':privacy-config-api')    api project(path: ':privacy-config-store')    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation AndroidX.work.runtimeKtx",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 56
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation project(path: ':privacy-config-api')    api project(path: ':privacy-config-store')    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation AndroidX.work.runtimeKtx    testImplementation Testing.mockito.kotlin",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 61
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation project(path: ':privacy-config-api')    api project(path: ':privacy-config-store')    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation AndroidX.work.runtimeKtx    testImplementation Testing.mockito.kotlin    testImplementation ""androidx.test:runner:_""    testImplementation Testing.robolectric    testImplementation CashApp.turbine",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 68
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation project(path: ':privacy-config-api')    api project(path: ':privacy-config-store')    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation AndroidX.work.runtimeKtx    testImplementation Testing.mockito.kotlin    testImplementation ""androidx.test:runner:_""    testImplementation Testing.robolectric    testImplementation CashApp.turbineandroid {",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 71
/ default is false,/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 72
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation project(path: ':privacy-config-api')    api project(path: ':privacy-config-store')    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation AndroidX.work.runtimeKtx    testImplementation Testing.mockito.kotlin    testImplementation ""androidx.test:runner:_""    testImplementation Testing.robolectric    testImplementation CashApp.turbineandroid {    }",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 74
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation project(path: ':privacy-config-api')    api project(path: ':privacy-config-store')    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation AndroidX.work.runtimeKtx    testImplementation Testing.mockito.kotlin    testImplementation ""androidx.test:runner:_""    testImplementation Testing.robolectric    testImplementation CashApp.turbineandroid {    }        unitTests {            includeAndroidResources = true",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 77
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'}    implementation project(path: ':di')    implementation project(path: ':privacy-config-api')    api project(path: ':privacy-config-store')    implementation AndroidX.appCompat    implementation Google.android.material    implementation AndroidX.constraintLayout        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    implementation AndroidX.work.runtimeKtx    testImplementation Testing.mockito.kotlin    testImplementation ""androidx.test:runner:_""    testImplementation Testing.robolectric    testImplementation CashApp.turbineandroid {    }        unitTests {            includeAndroidResources = true    }",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 79
/tasks.register('checks') {,/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 81
"/    dependsOn 'spotlessCheck', 'testDebugUnitTest'",/home/luyang/Android/privacy-config/privacy-config-impl/build.gradle: 82
* you may not use this file except in compliance with the License. * You may obtain a copy of the License at *,/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 8
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and",/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 14
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */",/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 17
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'",/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 21
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {",/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 27
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation project(path: ':common')",/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 30
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation project(path: ':common')    implementation JakeWharton.timber",/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 34
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation project(path: ':common')    implementation JakeWharton.timber    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx",/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 40
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation project(path: ':common')    implementation JakeWharton.timber    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    testImplementation Testing.junit4",/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 43
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation project(path: ':common')    implementation JakeWharton.timber    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    testImplementation Testing.junit4        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023",/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 47
"* you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and */    id 'kotlin-android'    id 'kotlin-kapt'apply from: ""$rootProject.projectDir/gradle/android-library.gradle""dependencies {    implementation project(path: ':common')    implementation JakeWharton.timber    // Room    implementation AndroidX.room.runtime    implementation AndroidX.room.rxJava2    implementation AndroidX.room.ktx    testImplementation Testing.junit4        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023    }    testImplementation project(path: ':common-test')",/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 53
/tasks.register('checks') {,/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 55
"/    dependsOn 'spotlessCheck', 'testDebugUnitTest'",/home/luyang/Android/privacy-config/privacy-config-store/build.gradle: 56
